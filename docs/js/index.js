!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=37)}([function(e,t,n){e.exports={dropdownWrapper:"src-views-fifty-state-selections--dropdownWrapper",dropdownOuter:"src-views-fifty-state-selections--dropdownOuter",dropdownInner:"src-views-fifty-state-selections--dropdownInner",label:"src-views-fifty-state-selections--label",sortActive:"src-views-fifty-state-selections--sortActive",labelSort:"src-views-fifty-state-selections--labelSort",sortBy:"src-views-fifty-state-selections--sortBy"}},function(e,t,n){e.exports={compareColor1:"src-components-comparison--compareColor1",compareColor2:"src-components-comparison--compareColor2",chartContainer:"src-components-comparison--chartContainer",chartLabel:"src-components-comparison--chartLabel",chartLabelText:"src-components-comparison--chartLabelText",chartLabel1:"src-components-comparison--chartLabel1",chartLabel2:"src-components-comparison--chartLabel2",barContainer:"src-components-comparison--barContainer",barContainer1:"src-components-comparison--barContainer1",barContainer2:"src-components-comparison--barContainer2",dataLabel:"src-components-comparison--dataLabel"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(6);var a=function(){function e(t,n){var r=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"!=typeof t)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=t,this.model=n.model,this.parent=n.parent,this.renderToSelector=n.renderToSelector,this.container=i.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.el=this.prerender(arguments),this.isReady=new Promise(function(e,t){r.resolve=e,r.reject=t})}return r(e,[{key:"prerender",value:function(){var e=i.DOMHelpers.q(this.selector);return e&&!this.rerender?(this.prerendered=!0,e):e?(e.innerHTML="",e):i.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),e}();t.default=a},function(e,t,n){e.exports={groupHeader:"src-views-state-comparison--groupHeader",typeContainer:"src-views-state-comparison--typeContainer","credit-rating":"src-views-state-comparison--credit-rating",typeDiv:"src-views-state-comparison--typeDiv",typeHeader:"src-views-state-comparison--typeHeader",debt_limit_type:"src-views-state-comparison--debt_limit_type",credit2015:"src-views-state-comparison--credit2015",credit2018:"src-views-state-comparison--credit2018",autoComplete0:"src-views-state-comparison--autoComplete0","autoComplete_wrapper-0":"src-views-state-comparison--autoComplete_wrapper-0",autoComplete1:"src-views-state-comparison--autoComplete1","autoComplete_wrapper-1":"src-views-state-comparison--autoComplete_wrapper-1",withTooltip:"src-views-state-comparison--withTooltip"}},function(e,t,n){e.exports={groupHeader:"src-views-fifty-state--groupHeader",barLabel:"src-views-fifty-state--barLabel",groupDiv:"src-views-fifty-state--groupDiv",barContainer:"src-views-fifty-state--barContainer",isHighlighted:"src-views-fifty-state--isHighlighted"}},function(e,t,n){const r=n(10),i={};function a(){console.log(i)}Array.prototype.compare=Array.prototype.compare||function(e){if(this.length!=e.length)return!1;if(0===this.length&&0===e.length)return!0;console.log("in compare"),console.log(this);for(var t=0;t<e.length;t++)if(this[t]!==e[t])return!1;return!0},t.stateModule={logState:a,getState:function(e){return void 0!==i[e]?i[e][0]:void 0},getPreviousState:function(e){return void 0!==i[e]&&void 0!==i[e][1]?i[e][1]:void 0},setState:function(e,t){void 0===i[e]?(i[e]=[t],r.publish(e,t),a()):("string"==typeof t||"number"==typeof t?i[e][0]!==t:!Array.isArray(t)||!Array.isArray(i[e][0])||!t.compare(i[e][0]))&&(i[e].unshift(t),r.publish(e,t),a(),i[e].length>2&&(i[e].length=2))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GTMPush=function(e){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:e})},t.publishWindowResize=function(e){var t;window.addEventListener("resize",function(){t||(t=setTimeout(function(){e.setState("resize",document.documentElement.clientWidth),t=null},350))},!1)};t.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(e,t){var n=this,r=t||0;return t&&(this.style.transition="opacity "+t+"s ease-in-out"),new Promise(function(t){var i=window.getComputedStyle(n).getPropertyValue("transition-duration")||r,a=1e3*parseFloat(i);n.fadeOutContent(),setTimeout(function(){n.innerHTML=e,n.classList.remove("no-opacity"),t(!0)},a)})})),t.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(e,t){if(this.length<=e)return this;var n=this.substr(0,e-1);return(t?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var e,t=0;if(0===this.length)return t;for(e=0;e<this.length;e++)t=(t<<5)-t+this.charCodeAt(e),t|=0;return t})),t.DOMHelpers={c:function(e){if(-1!==e.indexOf(".")||-1!==e.indexOf("#")){var t=e.match(/\.([^#.]*)/g)||[],n=e.match(/#([^.]*)/),r=e.match(/^([^.#]+)/),i=document.createElement(r[0]);return t.forEach(function(e){i.classList.add(e.replace(".",""))}),null!==n&&i.setAttribute("id",n[1]),i}return document.createElement(e)},q:function(e){return document.querySelector(e)},qa:function(e){return document.querySelectorAll(e)}}},function(e,t,n){var r=n(33),i=n(10),a={};function o(e,t){var n=r(t.toString());return{token:"sub"+r(e+t),fn:n}}e.exports={logSubs:function(){console.log(a)},setSubs:function(e){e.forEach(function(e){var t=e[0],n=e[1],r=o(t,n);if(void 0===a[r.fn]&&(a[r.fn]={}),void 0!==a[r.fn][t])throw"Subscription token is already in use.";a[r.fn][t]=i.subscribe(t,n)})},cancelSub:function(e,t){var n=o(e,t);if(void 0===a[n.fn]||void 0===a[n.fn][e])throw"Subscription does not exist.";i.unsubscribe(a[n.fn][e]),delete a[n.fn][e],0===Object.keys(a[n.fn]).length&&delete a[n.fn]}}},function(e,t){e.exports="<p><strong>Credit rating:</strong> Standard &amp; Poor’s general obligation credit rating.</p>\n"},function(e,t,n){e.exports={bar:"src-components-bar--bar",barColor1:"src-components-bar--barColor1",barColor2:"src-components-bar--barColor2"}},function(e,t,n){(function(e){!function(n,r){"use strict";var i={};n.PubSub=i;var a=n.define;!function(e){var t={},n=-1;function r(e){var t;for(t in e)if(e.hasOwnProperty(t))return!0;return!1}function i(e,t,n){try{e(t,n)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function a(e,t,n){e(t,n)}function o(e,n,r,o){var s,p=t[n],l=o?a:i;if(t.hasOwnProperty(n))for(s in p)p.hasOwnProperty(s)&&l(p[s],e,r)}function s(e,n,i,a){var s=function(e,t,n){return function(){var r=String(e),i=r.lastIndexOf(".");for(o(e,e,t,n);-1!==i;)r=r.substr(0,i),i=r.lastIndexOf("."),o(e,r,t,n)}}(e="symbol"==typeof e?e.toString():e,n,a),p=function(e){var n=String(e),i=Boolean(t.hasOwnProperty(n)&&r(t[n])),a=n.lastIndexOf(".");for(;!i&&-1!==a;)n=n.substr(0,a),a=n.lastIndexOf("."),i=Boolean(t.hasOwnProperty(n)&&r(t[n]));return i}(e);return!!p&&(!0===i?s():setTimeout(s,0),!0)}e.publish=function(t,n){return s(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return s(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,r){if("function"!=typeof r)return!1;e="symbol"==typeof e?e.toString():e,t.hasOwnProperty(e)||(t[e]={});var i="uid_"+String(++n);return t[e][i]=r,i},e.subscribeOnce=function(t,n){var r=e.subscribe(t,function(){e.unsubscribe(r),n.apply(this,arguments)});return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)t.hasOwnProperty(n)&&0===n.indexOf(e)&&delete t[n]},e.unsubscribe=function(n){var r,i,a,o="string"==typeof n&&(t.hasOwnProperty(n)||function(e){var n;for(n in t)if(t.hasOwnProperty(n)&&0===n.indexOf(e))return!0;return!1}(n)),s=!o&&"string"==typeof n,p="function"==typeof n,l=!1;if(!o){for(r in t)if(t.hasOwnProperty(r)){if(i=t[r],s&&i[n]){delete i[n],l=n;break}if(p)for(a in i)i.hasOwnProperty(a)&&i[a]===n&&(delete i[a],l=!0)}return l}e.clearSubscriptions(n)}}(i),"function"==typeof a&&a.amd?a(function(){return i}):(void 0!==e&&e.exports&&(t=e.exports=i),t.PubSub=i,e.exports=t=i)}("object"==typeof window&&window||this)}).call(this,n(30)(e))},function(e,t,n){var r,i,a;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),i=[],void 0===(a="function"==typeof(r=function(){"use strict";var e,t,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},r=!n.document&&!!n.postMessage,i=r&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),a=!1,o={},s=0,p={parse:function(t,r){var i=(r=r||{}).dynamicTyping||!1;if(k(i)&&(r.dynamicTypingFunction=i,i={}),r.dynamicTyping=i,r.transform=!!k(r.transform)&&r.transform,r.worker&&p.WORKERS_SUPPORTED){var l=function(){if(!p.WORKERS_SUPPORTED)return!1;if(!a&&null===p.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var t=p.SCRIPT_PATH||e;t+=(-1!==t.indexOf("?")?"&":"?")+"papaworker";var r=new n.Worker(t);return r.onmessage=v,r.id=s++,o[r.id]=r}();return l.userStep=r.step,l.userChunk=r.chunk,l.userComplete=r.complete,l.userError=r.error,r.step=k(r.step),r.chunk=k(r.chunk),r.complete=k(r.complete),r.error=k(r.error),delete r.worker,void l.postMessage({input:t,config:r,workerId:l.id})}var c=null;return p.NODE_STREAM_INPUT,"string"==typeof t?c=r.download?new d(r):new h(r):!0===t.readable&&k(t.read)&&k(t.on)?c=new f(r):(n.File&&t instanceof File||t instanceof Object)&&(c=new u(r)),c.stream(t)},unparse:function(e,t){var n=!1,r=!0,i=",",a="\r\n",o='"',s=!1;"object"==typeof t&&("string"!=typeof t.delimiter||p.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(i=t.delimiter),("boolean"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(s=t.skipEmptyLines),"string"==typeof t.newline&&(a=t.newline),"string"==typeof t.quoteChar&&(o=t.quoteChar),"boolean"==typeof t.header&&(r=t.header));var l=new RegExp(g(o),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return d(null,e,s);if("object"==typeof e[0])return d(c(e[0]),e,s)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:c(e.data[0])),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),d(e.fields||[],e.data||[],s);throw"exception: Unable to serialize unrecognized input";function c(e){if("object"!=typeof e)return[];var t=[];for(var n in e)t.push(n);return t}function d(e,t,n){var o="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var s=Array.isArray(e)&&0<e.length,p=!Array.isArray(t[0]);if(s&&r){for(var l=0;l<e.length;l++)0<l&&(o+=i),o+=u(e[l],l);0<t.length&&(o+=a)}for(var c=0;c<t.length;c++){var d=s?e.length:t[c].length,h=!1,f=s?0===Object.keys(t[c]).length:0===t[c].length;if(n&&!s&&(h="greedy"===n?""===t[c].join("").trim():1===t[c].length&&0===t[c][0].length),"greedy"===n&&s){for(var m=[],g=0;g<d;g++){var b=p?e[g]:g;m.push(t[c][b])}h=""===m.join("").trim()}if(!h){for(var v=0;v<d;v++){0<v&&!f&&(o+=i);var y=s&&p?e[v]:v;o+=u(t[c][y],v)}c<t.length-1&&(!n||0<d&&!f)&&(o+=a)}}return o}function u(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);e=e.toString().replace(l,o+o);var r="boolean"==typeof n&&n||Array.isArray(n)&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(-1<e.indexOf(t[n]))return!0;return!1}(e,p.BAD_DELIMITERS)||-1<e.indexOf(i)||" "===e.charAt(0)||" "===e.charAt(e.length-1);return r?o+e+o:e}}};if(p.RECORD_SEP=String.fromCharCode(30),p.UNIT_SEP=String.fromCharCode(31),p.BYTE_ORDER_MARK="\ufeff",p.BAD_DELIMITERS=["\r","\n",'"',p.BYTE_ORDER_MARK],p.WORKERS_SUPPORTED=!r&&!!n.Worker,p.SCRIPT_PATH=null,p.NODE_STREAM_INPUT=1,p.LocalChunkSize=10485760,p.RemoteChunkSize=5242880,p.DefaultDelimiter=",",p.Parser=b,p.ParserHandle=m,p.NetworkStreamer=d,p.FileStreamer=u,p.StringStreamer=h,p.ReadableStreamStreamer=f,n.jQuery){var l=n.jQuery;l.fn.parse=function(e){var t=e.config||{},r=[];return this.each(function(e){if("INPUT"!==l(this).prop("tagName").toUpperCase()||"file"!==l(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var i=0;i<this.files.length;i++)r.push({file:this.files[i],inputElem:this,instanceConfig:l.extend({},t)})}),i(),this;function i(){if(0!==r.length){var t,n,i,o=r[0];if(k(e.before)){var s=e.before(o.file,o.inputElem);if("object"==typeof s){if("abort"===s.action)return t=o.file,n=o.inputElem,i=s.reason,void(k(e.error)&&e.error({name:"AbortError"},t,n,i));if("skip"===s.action)return void a();"object"==typeof s.config&&(o.instanceConfig=l.extend(o.instanceConfig,s.config))}else if("skip"===s)return void a()}var c=o.instanceConfig.complete;o.instanceConfig.complete=function(e){k(c)&&c(e,o.file,o.inputElem),a()},p.parse(o.file,o.instanceConfig)}else k(e.complete)&&e.complete()}function a(){r.splice(0,1),i()}}}function c(e){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=x(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new m(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&k(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1;var a=this._partialLine+e;this._partialLine="";var o=this._handle.parse(a,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=o.meta.cursor;this._finished||(this._partialLine=a.substring(s-this._baseIndex),this._baseIndex=s),o&&o.data&&(this._rowCount+=o.data.length);var l=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(i)n.postMessage({results:o,workerId:p.WORKER_ID,finished:l});else if(k(this._config.chunk)&&!t){if(this._config.chunk(o,this._handle),this._handle.paused()||this._handle.aborted())return;o=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(o.data),this._completeResults.errors=this._completeResults.errors.concat(o.errors),this._completeResults.meta=o.meta),this._completed||!l||!k(this._config.complete)||o&&o.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),l||o&&o.meta.paused||this._nextChunk(),o}},this._sendError=function(e){k(this._config.error)?this._config.error(e):i&&this._config.error&&n.postMessage({workerId:p.WORKER_ID,error:e,finished:!1})}}function d(e){var t;(e=e||{}).chunkSize||(e.chunkSize=p.RemoteChunkSize),c.call(this,e),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),r||(t.onload=C(this._chunkLoaded,this),t.onerror=C(this._chunkError,this)),t.open("GET",this._input,!r),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var n in e)t.setRequestHeader(n,e[n])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+i),t.setRequestHeader("If-None-Match","webkit-no-cache")}try{t.send()}catch(e){this._chunkError(e.message)}r&&0===t.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var e;4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(e=t.getResponseHeader("Content-Range"))?-1:parseInt(e.substr(e.lastIndexOf("/")+1))),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(new Error(n))}}function u(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=p.LocalChunkSize),c.call(this,e);var r="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,r?((t=new FileReader).onload=C(this._chunkLoaded,this),t.onerror=C(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var i=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,i)}var a=t.readAsText(e,this._config.encoding);r||this._chunkLoaded({target:{result:a}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function h(e){var t;c.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,n=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(n)}}}function f(e){c.call(this,e=e||{});var t=[],n=!0,r=!1;this.pause=function(){c.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){c.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):n=!0},this._streamData=C(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=C(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=C(function(){this._streamCleanUp(),r=!0,this._streamData("")},this),this._streamCleanUp=C(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function m(e){var t,n,r,i=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,a=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,o=this,s=0,l=0,c=!1,d=!1,u=[],h={data:[],errors:[],meta:{}};if(k(e.step)){var f=e.step;e.step=function(t){if(h=t,y())v();else{if(v(),0===h.data.length)return;s+=t.data.length,e.preview&&s>e.preview?n.abort():f(h,o)}}}function m(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function v(){if(h&&r&&(C("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+p.DefaultDelimiter+"'"),r=!1),e.skipEmptyLines)for(var t=0;t<h.data.length;t++)m(h.data[t])&&h.data.splice(t--,1);return y()&&function(){if(h){for(var t=0;y()&&t<h.data.length;t++)for(var n=0;n<h.data[t].length;n++){var r=h.data[t][n];e.trimHeaders&&(r=r.trim()),u.push(r)}h.data.splice(0,1)}}(),function(){if(!h||!e.header&&!e.dynamicTyping&&!e.transform)return h;for(var t=0;t<h.data.length;t++){var n,r=e.header?{}:[];for(n=0;n<h.data[t].length;n++){var i=n,a=h.data[t][n];e.header&&(i=n>=u.length?"__parsed_extra":u[n]),e.transform&&(a=e.transform(a,i)),a=w(i,a),"__parsed_extra"===i?(r[i]=r[i]||[],r[i].push(a)):r[i]=a}h.data[t]=r,e.header&&(n>u.length?C("FieldMismatch","TooManyFields","Too many fields: expected "+u.length+" fields but parsed "+n,l+t):n<u.length&&C("FieldMismatch","TooFewFields","Too few fields: expected "+u.length+" fields but parsed "+n,l+t))}return e.header&&h.meta&&(h.meta.fields=u),l+=h.data.length,h}()}function y(){return e.header&&0===u.length}function w(t,n){return r=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[r]&&(e.dynamicTyping[r]=e.dynamicTypingFunction(r)),!0===(e.dynamicTyping[r]||e.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(i.test(n)?parseFloat(n):a.test(n)?new Date(n):""===n?null:n):n;var r}function C(e,t,n,r){h.errors.push({type:e,code:t,message:n,row:r})}this.parse=function(i,a,o){var s=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substr(0,1048576);var n=new RegExp(g(t)+"([^]*?)"+g(t),"gm"),r=(e=e.replace(n,"")).split("\r"),i=e.split("\n"),a=1<i.length&&i[0].length<r[0].length;if(1===r.length||a)return"\n";for(var o=0,s=0;s<r.length;s++)"\n"===r[s][0]&&o++;return o>=r.length/2?"\r\n":"\r"}(i,s)),r=!1,e.delimiter)k(e.delimiter)&&(e.delimiter=e.delimiter(i),h.meta.delimiter=e.delimiter);else{var l=function(t,n,r,i){for(var a,o,s,l=[",","\t","|",";",p.RECORD_SEP,p.UNIT_SEP],c=0;c<l.length;c++){var d=l[c],u=0,h=0,f=0;s=void 0;for(var g=new b({comments:i,delimiter:d,newline:n,preview:10}).parse(t),v=0;v<g.data.length;v++)if(r&&m(g.data[v]))f++;else{var y=g.data[v].length;h+=y,void 0!==s?1<y&&(u+=Math.abs(y-s),s=y):s=0}0<g.data.length&&(h/=g.data.length-f),(void 0===o||o<u)&&1.99<h&&(o=u,a=d)}return{successful:!!(e.delimiter=a),bestDelimiter:a}}(i,e.newline,e.skipEmptyLines,e.comments);l.successful?e.delimiter=l.bestDelimiter:(r=!0,e.delimiter=p.DefaultDelimiter),h.meta.delimiter=e.delimiter}var d=x(e);return e.preview&&e.header&&d.preview++,t=i,n=new b(d),h=n.parse(t,a,o),v(),c?{meta:{paused:!0}}:h||{meta:{paused:!1}}},this.paused=function(){return c},this.pause=function(){c=!0,n.abort(),t=t.substr(n.getCharIndex())},this.resume=function(){c=!1,o.streamer.parseChunk(t,!0)},this.aborted=function(){return d},this.abort=function(){d=!0,n.abort(),h.meta.aborted=!0,k(e.complete)&&e.complete(h),t=""}}function g(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function b(e){var t,n=(e=e||{}).delimiter,r=e.newline,i=e.comments,a=e.step,o=e.preview,s=e.fastMode,l=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(l=e.escapeChar),("string"!=typeof n||-1<p.BAD_DELIMITERS.indexOf(n))&&(n=","),i===n)throw"Comment character same as delimiter";!0===i?i="#":("string"!=typeof i||-1<p.BAD_DELIMITERS.indexOf(i))&&(i=!1),"\n"!==r&&"\r"!==r&&"\r\n"!==r&&(r="\n");var c=0,d=!1;this.parse=function(e,p,u){if("string"!=typeof e)throw"Input must be a string";var h=e.length,f=n.length,m=r.length,b=i.length,v=k(a),y=[],w=[],x=[],C=c=0;if(!e)return B();if(s||!1!==s&&-1===e.indexOf(t)){for(var S=e.split(r),E=0;E<S.length;E++){if(x=S[E],c+=x.length,E!==S.length-1)c+=r.length;else if(u)return B();if(!i||x.substr(0,b)!==i){if(v){if(y=[],D(x.split(n)),j(),d)return B()}else D(x.split(n));if(o&&o<=E)return y=y.slice(0,o),B(!0)}}return B()}for(var _,O=e.indexOf(n,c),T=e.indexOf(r,c),A=new RegExp(g(l)+g(t),"g");;)if(e[c]!==t)if(i&&0===x.length&&e.substr(c,b)===i){if(-1===T)return B();c=T+m,T=e.indexOf(r,c),O=e.indexOf(n,c)}else if(-1!==O&&(O<T||-1===T))x.push(e.substring(c,O)),c=O+f,O=e.indexOf(n,c);else{if(-1===T)break;if(x.push(e.substring(c,T)),M(T+m),v&&(j(),d))return B();if(o&&y.length>=o)return B(!0)}else for(_=c,c++;;){if(-1===(_=e.indexOf(t,_+1)))return u||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:y.length,index:c}),I();if(_===h-1)return I(e.substring(c,_).replace(A,t));if(t!==l||e[_+1]!==l){if(t===l||0===_||e[_-1]!==l){var L=R(-1===T?O:Math.min(O,T));if(e[_+1+L]===n){x.push(e.substring(c,_).replace(A,t)),c=_+1+L+f,O=e.indexOf(n,c),T=e.indexOf(r,c);break}var P=R(T);if(e.substr(_+1+P,m)===r){if(x.push(e.substring(c,_).replace(A,t)),M(_+1+P+m),O=e.indexOf(n,c),v&&(j(),d))return B();if(o&&y.length>=o)return B(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:y.length,index:c}),_++}}else _++}return I();function D(e){y.push(e),C=c}function R(t){var n=0;if(-1!==t){var r=e.substring(_+1,t);r&&""===r.trim()&&(n=r.length)}return n}function I(t){return u||(void 0===t&&(t=e.substr(c)),x.push(t),c=h,D(x),v&&j()),B()}function M(t){c=t,D(x),x=[],T=e.indexOf(r,c)}function B(e){return{data:y,errors:w,meta:{delimiter:n,linebreak:r,aborted:d,truncated:!!e,cursor:C+(p||0)}}}function j(){a(B()),y=[],w=[]}},this.abort=function(){d=!0},this.getCharIndex=function(){return c}}function v(e){var t=e.data,n=o[t.workerId],r=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var i={abort:function(){r=!0,y(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(k(n.userStep)){for(var a=0;a<t.results.data.length&&(n.userStep({data:[t.results.data[a]],errors:t.results.errors,meta:t.results.meta},i),!r);a++);delete t.results}else k(n.userChunk)&&(n.userChunk(t.results,i,t.file),delete t.results)}t.finished&&!r&&y(t.workerId,t.results)}function y(e,t){var n=o[e];k(n.userComplete)&&n.userComplete(t),n.terminate(),delete o[e]}function w(){throw"Not implemented."}function x(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var n in e)t[n]=x(e[n]);return t}function C(e,t){return function(){e.apply(t,arguments)}}function k(e){return"function"==typeof e}return i?n.onmessage=function(e){var t=e.data;if(void 0===p.WORKER_ID&&t&&(p.WORKER_ID=t.workerId),"string"==typeof t.input)n.postMessage({workerId:p.WORKER_ID,results:p.parse(t.input,t.config),finished:!0});else if(n.File&&t.input instanceof File||t.input instanceof Object){var r=p.parse(t.input,t.config);r&&n.postMessage({workerId:p.WORKER_ID,results:r,finished:!0})}}:p.WORKERS_SUPPORTED&&(t=document.getElementsByTagName("script"),e=t.length?t[t.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){a=!0},!0):a=!0),(d.prototype=Object.create(c.prototype)).constructor=d,(u.prototype=Object.create(c.prototype)).constructor=u,(h.prototype=Object.create(h.prototype)).constructor=h,(f.prototype=Object.create(c.prototype)).constructor=f,p})?r.apply(t,i):r)||(e.exports=a)},function(e,t,n){e.exports=n.p+"data/data.csv?v=5753dc"},function(e){e.exports=["Borrowing Practices","Fiscal Conditions and Infrastructure Needs","Debt Levels","Credit Rating"]},function(e){e.exports=[{field:"debt_limit_type",type:"text",group:1,order:1,label:"General Obligation Debt Limit Type",tooltip:"The kind of limit the state has on GO borrowing, one of the most common types of debt issued by states. These limits affect how states borrow."},{field:"centralization",type:"percent",group:1,order:2,label:"Centralization",tooltip:"The degree to which borrowing is done by the state itself rather than by a component unit—a legally separate entity such as a housing or turnpike authority. Higher values mean the state is more centralized."},{field:"state_local_division",type:"percent",group:1,order:3,label:"State-Local Borrowing Division",tooltip:"The share of combined state and local debt issued by local governments. States where local governments borrow less tend to have higher debt levels."},{field:"revenue_volatility",type:"number",group:2,order:1,label:"Revenue Volatility",tooltip:"A measure of variation in tax collections. Low scores mean that revenue levels are similar from year to year, while high scores indicate that revenue varies more. More volatile states should plan for greater uncertainty."},{field:"ten_year_pop_growth",type:"percent",group:2,order:2,label:"Population Growth",tooltip:"The 10-year population growth rate from 2008 to 2017. Growing populations are associated with greater infrastructure investment."},{field:"debt_per_capita",type:"currency",group:3,order:1,label:"Debt per Capita",tooltip:"Total debt relative to a state’s population."},{field:"debt_percent_SPI",type:"percent",group:3,order:2,label:"Debt as a Percentage of SPI",tooltip:"Total debt relative to state personal income, a measure of economic resources.",isDefaultSelection:!0},{field:"credit2015",type:"text",group:4,order:1,label:2015,tooltip:"Standard & Poor’s general obligation credit rating."},{field:"credit2018",type:"text",group:4,order:2,label:2018,tooltip:"Standard & Poor’s general obligation credit rating."},{field:"census",type:"text",group:null,order:null,label:"Census region and division",tooltip:null}]},function(e){e.exports={census:["N/A","Northeast—New England","Northeast—Middle Atlantic","Midwest—East North Central","Midwest—West North Central","South—South Atlantic","South—East South Central","South—West South Central","West—Mountain","West—Pacific"],credit2018:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"],credit2015:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"]}},function(e,t,n){e.exports=function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t={resultsList:"autoComplete_results_list",result:"autoComplete_result",highlight:"autoComplete_highlighted"},n=function(e){return"string"==typeof e?document.querySelector(e):e()},r=function(e){return e.innerHTML=""},i={getInput:n,createResultsList:function(e){var n=document.createElement("ul");return e.container&&(t.resultsList=e.container(n)||t.resultsList),n.classList.add(t.resultsList),e.destination.insertAdjacentElement(e.position,n),n},highlight:function(e){return"<span class=".concat(t.highlight,">").concat(e,"</span>")},addResultsToList:function(e,n,r,i){n.forEach(function(a,o){var s=document.createElement("li"),p=n[o].source[r]||n[o].source;s.setAttribute("data-result",p),s.setAttribute("class",t.result),s.setAttribute("tabindex","1"),s.innerHTML=i?i(a,s):a.match||a,e.appendChild(s)})},navigation:function(e,t){var r=n(e),i=t.firstChild;document.onkeydown=function(e){var n=document.activeElement;switch(e.keyCode){case 38:n!==i&&n!==r?n.previousSibling.focus():n===i&&r.focus();break;case 40:n===r&&t.childNodes.length>0?i.focus():n!==t.lastChild&&n.nextSibling.focus()}}},clearResults:r,getSelection:function(e,i,a,o,s){var p=i.querySelectorAll(".".concat(t.result));Object.keys(p).forEach(function(l){["mousedown","keydown"].forEach(function(c){p[l].addEventListener(c,function(p){"mousedown"!==c&&13!==p.keyCode||(a({event:p,query:n(e).value,results:o.map(function(e){return e.source}),selection:o.find(function(e){var n=e.source[s]||e.source;return n===p.target.closest(".".concat(t.result)).getAttribute("data-result")}).source}),r(i))})})})}};return function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.selector=e.selector||"#autoComplete",this.data={src:function(){return"function"==typeof e.data.src?e.data.src():e.data.src},key:e.data.key},this.searchEngine="loose"===e.searchEngine?"loose":"strict",this.threshold=e.threshold||0,this.resultsList=i.createResultsList({container:!(!e.resultsList||!e.resultsList.container)&&e.resultsList.container,destination:e.resultsList&&e.resultsList.destination?e.resultsList.destination:i.getInput(this.selector),position:e.resultsList&&e.resultsList.position?e.resultsList.position:"afterend"}),this.placeHolder=e.placeHolder,this.maxResults=e.maxResults||5,this.resultItem=e.resultItem,this.highlight=e.highlight||!1,this.onSelection=e.onSelection,this.init()}return n=t,(r=[{key:"search",value:function(e,t){var n=this.highlight,r=t.toLowerCase();if("loose"===this.searchEngine){e=e.replace(/ /g,"");for(var a=[],o=0,s=0;s<r.length;s++){var p=r[s];o<e.length&&p===e[o]&&(p=n?i.highlight(p):p,o++),a.push(p)}return o===e.length&&a.join("")}if(r.includes(e)){if(n){var l=i.getInput(this.selector).value.toLowerCase();return r.replace(l,i.highlight(l))}return r}}},{key:"listMatchedResults",value:function(e){var t=this,n=[],r=i.getInput(this.selector).value.toLowerCase();e.filter(function(e){var i=t.search(r,e[t.data.key]||e);i&&n.push({match:i,source:e})});var a=n.slice(0,this.maxResults);return i.addResultsToList(this.resultsList,a,this.data.key,this.resultItem),i.navigation(this.selector,this.resultsList),a}},{key:"ignite",value:function(e){var t=this,n=this.selector,r=i.getInput(n),a=this.placeHolder,o=this.onSelection;a&&r.setAttribute("placeholder",a),r.onkeyup=function(){var a=t.resultsList;if(i.clearResults(a),r.value.length>t.threshold&&r.value.replace(/ /g,"").length){var s=t.listMatchedResults(e);o&&i.getSelection(n,a,o,s,t.data.key)}}}},{key:"init",value:function(){var e=this,t=this.data.src();t instanceof Promise?t.then(function(t){return e.ignite(t)}):this.ignite(t)}}])&&e(n.prototype,r),a&&e(n,a),t;var n,r,a}()}()},function(e,t,n){"use strict";(function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.7
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,a=0;a<r.length;a+=1)if(n&&navigator.userAgent.indexOf(r[a])>=0){i=1;break}var o=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},i))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function p(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function l(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=p(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:c(l(e))}var d=n&&!(!window.MSInputMethodContext||!document.documentMode),u=n&&/MSIE 10/.test(navigator.userAgent);function h(e){return 11===e?d:10===e?u:d||u}function f(e){if(!e)return document.documentElement;for(var t=h(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===p(n,"position")?f(n):n:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function g(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,a=document.createRange();a.setStart(r,0),a.setEnd(i,0);var o,s,p=a.commonAncestorContainer;if(e!==p&&t!==p||r.contains(i))return"BODY"===(s=(o=p).nodeName)||"HTML"!==s&&f(o.firstElementChild)!==o?f(p):p;var l=m(e);return l.host?g(l.host,t):g(e,m(t).host)}function b(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function v(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function y(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],h(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function w(e){var t=e.body,n=e.documentElement,r=h(10)&&getComputedStyle(n);return{height:y("Height",t,n,r),width:y("Width",t,n,r)}}var x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},C=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),k=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function E(e){return S({},e,{right:e.left+e.width,bottom:e.top+e.height})}function _(e){var t={};try{if(h(10)){t=e.getBoundingClientRect();var n=b(e,"top"),r=b(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},a="HTML"===e.nodeName?w(e.ownerDocument):{},o=a.width||e.clientWidth||i.right-i.left,s=a.height||e.clientHeight||i.bottom-i.top,l=e.offsetWidth-o,c=e.offsetHeight-s;if(l||c){var d=p(e);l-=v(d,"x"),c-=v(d,"y"),i.width-=l,i.height-=c}return E(i)}function O(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=h(10),i="HTML"===t.nodeName,a=_(e),o=_(t),s=c(e),l=p(t),d=parseFloat(l.borderTopWidth,10),u=parseFloat(l.borderLeftWidth,10);n&&i&&(o.top=Math.max(o.top,0),o.left=Math.max(o.left,0));var f=E({top:a.top-o.top-d,left:a.left-o.left-u,width:a.width,height:a.height});if(f.marginTop=0,f.marginLeft=0,!r&&i){var m=parseFloat(l.marginTop,10),g=parseFloat(l.marginLeft,10);f.top-=d-m,f.bottom-=d-m,f.left-=u-g,f.right-=u-g,f.marginTop=m,f.marginLeft=g}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(f=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=b(t,"top"),i=b(t,"left"),a=n?-1:1;return e.top+=r*a,e.bottom+=r*a,e.left+=i*a,e.right+=i*a,e}(f,t)),f}function T(e){if(!e||!e.parentElement||h())return document.documentElement;for(var t=e.parentElement;t&&"none"===p(t,"transform");)t=t.parentElement;return t||document.documentElement}function A(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},o=i?T(e):g(e,t);if("viewport"===r)a=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=O(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),a=Math.max(n.clientHeight,window.innerHeight||0),o=t?0:b(n),s=t?0:b(n,"left");return E({top:o-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:a})}(o,i);else{var s=void 0;"scrollParent"===r?"BODY"===(s=c(l(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===r?e.ownerDocument.documentElement:r;var d=O(s,o,i);if("HTML"!==s.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===p(t,"position"))return!0;var r=l(t);return!!r&&e(r)}(o))a=d;else{var u=w(e.ownerDocument),h=u.height,f=u.width;a.top+=d.top-d.marginTop,a.bottom=h+d.top,a.left+=d.left-d.marginLeft,a.right=f+d.left}}var m="number"==typeof(n=n||0);return a.left+=m?n:n.left||0,a.top+=m?n:n.top||0,a.right-=m?n:n.right||0,a.bottom-=m?n:n.bottom||0,a}function L(e,t,n,r,i){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var o=A(n,r,a,i),s={top:{width:o.width,height:t.top-o.top},right:{width:o.right-t.right,height:o.height},bottom:{width:o.width,height:o.bottom-t.bottom},left:{width:t.left-o.left,height:o.height}},p=Object.keys(s).map(function(e){return S({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),l=p.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=l.length>0?l[0].key:p[0].key,d=e.split("-")[1];return c+(d?"-"+d:"")}function P(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return O(n,r?T(t):g(t,n),r)}function D(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function R(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function I(e,t,n){n=n.split("-")[0];var r=D(e),i={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(n),o=a?"top":"left",s=a?"left":"top",p=a?"height":"width",l=a?"width":"height";return i[o]=t[o]+t[p]/2-r[p]/2,i[s]=n===s?t[s]-r[l]:t[R(s)],i}function M(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function B(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=M(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&s(n)&&(t.offsets.popper=E(t.offsets.popper),t.offsets.reference=E(t.offsets.reference),t=n(t,e))}),t}function j(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],a=i?""+i+n:e;if(void 0!==document.body.style[a])return a}return null}function F(e){var t=e.ownerDocument;return t?t.defaultView:window}function N(e,t,n,r){n.updateBound=r,F(e).addEventListener("resize",n.updateBound,{passive:!0});var i=c(e);return function e(t,n,r,i){var a="BODY"===t.nodeName,o=a?t.ownerDocument.defaultView:t;o.addEventListener(n,r,{passive:!0}),a||e(c(o.parentNode),n,r,i),i.push(o)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function z(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,F(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function W(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function q(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&W(t[n])&&(r="px"),e.style[n]=t[n]+r})}var Y=n&&/Firefox/i.test(navigator.userAgent);function U(e,t,n){var r=M(e,function(e){return e.name===t}),i=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!i){var a="`"+t+"`",o="`"+n+"`";console.warn(o+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return i}var $=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],X=$.slice(3);function G(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=X.indexOf(e),r=X.slice(n+1).concat(X.slice(0,n));return t?r.reverse():r}var V={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function K(e,t,n,r){var i=[0,0],a=-1!==["right","left"].indexOf(r),o=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=o.indexOf(M(o,function(e){return-1!==e.search(/,|\s/)}));o[s]&&-1===o[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var p=/\s*,\s*|\s+/,l=-1!==s?[o.slice(0,s).concat([o[s].split(p)[0]]),[o[s].split(p)[1]].concat(o.slice(s+1))]:[o];return(l=l.map(function(e,r){var i=(1===r?!a:a)?"height":"width",o=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,o=!0,e):o?(e[e.length-1]+=t,o=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+i[1],o=i[2];if(!a)return e;if(0===o.indexOf("%")){var s=void 0;switch(o){case"%p":s=n;break;case"%":case"%r":default:s=r}return E(s)[t]/100*a}if("vh"===o||"vw"===o)return("vh"===o?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a;return a}(e,i,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){W(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))})}),i}var J={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,a=i.reference,o=i.popper,s=-1!==["bottom","top"].indexOf(n),p=s?"left":"top",l=s?"width":"height",c={start:k({},p,a[p]),end:k({},p,a[p]+a[l]-o[l])};e.offsets.popper=S({},o,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,a=i.popper,o=i.reference,s=r.split("-")[0],p=void 0;return p=W(+n)?[+n,0]:K(n,a,o,s),"left"===s?(a.top+=p[0],a.left-=p[1]):"right"===s?(a.top+=p[0],a.left+=p[1]):"top"===s?(a.left+=p[0],a.top-=p[1]):"bottom"===s&&(a.left+=p[0],a.top+=p[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||f(e.instance.popper);e.instance.reference===n&&(n=f(n));var r=H("transform"),i=e.instance.popper.style,a=i.top,o=i.left,s=i[r];i.top="",i.left="",i[r]="";var p=A(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);i.top=a,i.left=o,i[r]=s,t.boundaries=p;var l=t.priority,c=e.offsets.popper,d={primary:function(e){var n=c[e];return c[e]<p[e]&&!t.escapeWithReference&&(n=Math.max(c[e],p[e])),k({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>p[e]&&!t.escapeWithReference&&(r=Math.min(c[n],p[e]-("right"===e?c.width:c.height))),k({},n,r)}};return l.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=S({},c,d[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],a=Math.floor,o=-1!==["top","bottom"].indexOf(i),s=o?"right":"bottom",p=o?"left":"top",l=o?"width":"height";return n[s]<a(r[p])&&(e.offsets.popper[p]=a(r[p])-n[l]),n[p]>a(r[s])&&(e.offsets.popper[p]=a(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!U(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],a=e.offsets,o=a.popper,s=a.reference,l=-1!==["left","right"].indexOf(i),c=l?"height":"width",d=l?"Top":"Left",u=d.toLowerCase(),h=l?"left":"top",f=l?"bottom":"right",m=D(r)[c];s[f]-m<o[u]&&(e.offsets.popper[u]-=o[u]-(s[f]-m)),s[u]+m>o[f]&&(e.offsets.popper[u]+=s[u]+m-o[f]),e.offsets.popper=E(e.offsets.popper);var g=s[u]+s[c]/2-m/2,b=p(e.instance.popper),v=parseFloat(b["margin"+d],10),y=parseFloat(b["border"+d+"Width"],10),w=g-e.offsets.popper[u]-v-y;return w=Math.max(Math.min(o[c]-m,w),0),e.arrowElement=r,e.offsets.arrow=(k(n={},u,Math.round(w)),k(n,h,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(j(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=A(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],i=R(r),a=e.placement.split("-")[1]||"",o=[];switch(t.behavior){case V.FLIP:o=[r,i];break;case V.CLOCKWISE:o=G(r);break;case V.COUNTERCLOCKWISE:o=G(r,!0);break;default:o=t.behavior}return o.forEach(function(s,p){if(r!==s||o.length===p+1)return e;r=e.placement.split("-")[0],i=R(r);var l=e.offsets.popper,c=e.offsets.reference,d=Math.floor,u="left"===r&&d(l.right)>d(c.left)||"right"===r&&d(l.left)<d(c.right)||"top"===r&&d(l.bottom)>d(c.top)||"bottom"===r&&d(l.top)<d(c.bottom),h=d(l.left)<d(n.left),f=d(l.right)>d(n.right),m=d(l.top)<d(n.top),g=d(l.bottom)>d(n.bottom),b="left"===r&&h||"right"===r&&f||"top"===r&&m||"bottom"===r&&g,v=-1!==["top","bottom"].indexOf(r),y=!!t.flipVariations&&(v&&"start"===a&&h||v&&"end"===a&&f||!v&&"start"===a&&m||!v&&"end"===a&&g);(u||b||y)&&(e.flipped=!0,(u||b)&&(r=o[p+1]),y&&(a=function(e){return"end"===e?"start":"start"===e?"end":e}(a)),e.placement=r+(a?"-"+a:""),e.offsets.popper=S({},e.offsets.popper,I(e.instance.popper,e.offsets.reference,e.placement)),e=B(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,a=r.reference,o=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[o?"left":"top"]=a[n]-(s?i[o?"width":"height"]:0),e.placement=R(t),e.offsets.popper=E(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!U(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=M(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,a=M(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var o=void 0!==a?a:t.gpuAcceleration,s=f(e.instance.popper),p=_(s),l={position:i.position},c=function(e,t){var n=e.offsets,r=n.popper,i=n.reference,a=Math.round,o=Math.floor,s=function(e){return e},p=a(i.width),l=a(r.width),c=-1!==["left","right"].indexOf(e.placement),d=-1!==e.placement.indexOf("-"),u=t?c||d||p%2==l%2?a:o:s,h=t?a:s;return{left:u(p%2==1&&l%2==1&&!d&&t?r.left-1:r.left),top:h(r.top),bottom:h(r.bottom),right:u(r.right)}}(e,window.devicePixelRatio<2||!Y),d="bottom"===n?"top":"bottom",u="right"===r?"left":"right",h=H("transform"),m=void 0,g=void 0;if(g="bottom"===d?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-p.height+c.bottom:c.top,m="right"===u?"HTML"===s.nodeName?-s.clientWidth+c.right:-p.width+c.right:c.left,o&&h)l[h]="translate3d("+m+"px, "+g+"px, 0)",l[d]=0,l[u]=0,l.willChange="transform";else{var b="bottom"===d?-1:1,v="right"===u?-1:1;l[d]=g*b,l[u]=m*v,l.willChange=d+", "+u}var y={"x-placement":e.placement};return e.attributes=S({},y,e.attributes),e.styles=S({},l,e.styles),e.arrowStyles=S({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return q(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&q(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var a=P(i,t,e,n.positionFixed),o=L(n.placement,a,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",o),q(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},Q=function(){function e(t,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=o(this.update.bind(this)),this.options=S({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(S({},e.Defaults.modifiers,i.modifiers)).forEach(function(t){r.options.modifiers[t]=S({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return S({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return C(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=P(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=L(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=I(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=B(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=N(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return z.call(this)}}]),e}();Q.Utils=("undefined"!=typeof window?window:e).PopperUtils,Q.placements=$,Q.Defaults=J,t.a=Q}).call(this,n(34))},function(e,t,n){e.exports={dropdown:"src-components-dropdown--dropdown"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=t.TextInput=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var a=Object.getPrototypeOf(t);return null===a?void 0:e(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},o=n(6),s=n(2),p=(r=s)&&r.__esModule?r:{default:r};function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.TextInput=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"input",n=arguments[1];return l(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return d(t,p.default),i(t,[{key:"prerender",value:function(){var e=a(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered?e:(e.setAttribute("type","text"),e)}},{key:"init",value:function(){}}]),t}(),t.Dropdown=function(e){function t(){return l(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return d(t,p.default),i(t,[{key:"prerender",value:function(){var e=a(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered?e:(this.data.forEach(function(t){var n=o.DOMHelpers.c("option");n.setAttribute("value",t.value),n.innerHTML=t.name,t.selected&&n.setAttribute("selected","selected"),e.appendChild(n)}),e)}},{key:"init",value:function(){var e=this;this.data.forEach(function(t,n){e.el.options[n].pctModel=t})}}]),t}()},function(e,t){e.exports="<p><strong>Centralization.</strong> The degree to which borrowing is done by the state itself rather than by a component unit-a legally separate entity such as a housing or turnpike authority. Higher values mean the state is more centralized.</p>\n"},function(e,t){e.exports="<p><strong>General obligation (GO) debt limit type.</strong> The kind of limit the state has on GO borrowing, one of the most common types of debt issued by states. These limits affect how states borrow. </p>\n"},function(e,t){e.exports="<p><strong>Debt per capita.</strong> Total debt relative to a state’s population.</p>\n"},function(e,t){e.exports="<p><strong>Debt as a percentage of state personal income.</strong> Total debt relative to state personal income, a measure of economic resources.</p>\n"},function(e,t){e.exports="<p><strong>Population growth.</strong> The 10-year population growth rate from 2008 to 2017. Growing populations are associated with greater infrastructure investment. </p>\n"},function(e,t){e.exports="<p><strong>Revenue volatility.</strong> A measure of variation in tax collections. Low scores mean that revenue levels are similar from year to year, while high scores indicate that revenue varies more. More volatile states should plan for greater uncertainty. </p>\n"},function(e,t){e.exports="<p><strong>Division of borrowing between state and local governments.</strong> The share of combined state and local debt issued by local governments. States where local governments borrow less tend to have higher debt levels.</p>\n"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(35),s=(r=o)&&r.__esModule?r:{default:r};var p=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.el=document.querySelector(t),Object.keys(n).forEach(function(e){r[e]=n[e]})}return a(e,[{key:"init",value:function(e){this.needsRouter&&(this.router=new s.default,this.router.init(e)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var e=!1,t=document.body,n=0;function r(){new Date-n<500||e||(t.classList.add("has-hover"),e=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){e&&(t.classList.remove("has-hover"),e=!1)},!0),document.addEventListener("mousemove",r,!0),r()}},{key:"createComponent",value:function(e,t,n,r){var a=Object.create({children:[],data:null,model:e,parent:null,rerenderOnDataMismatch:!1});if(null!==r&&"object"===(void 0===r?"undefined":i(r)))for(var o in r)r.hasOwnProperty(o)&&(a[o]=r[o]);return new t(n,a)}}]),e}();t.default=p},function(e,t){e.exports='<section id="section-overview">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">Overview</h2>\n    <div class="js-inner-content">\n    \n\t<p>\n\t    When state policymakers try to assess how much debt to take on for projects\n\t    such as roads, bridges, and schools, they often compare debt levels in\n\t    their state to those of others. Because no universal guidelines exist for\n\t    how much debt is affordable, many policymakers evaluate how their state\n\t    stacks up against others with a common credit rating or national median\n\t    debt level.\n\t</p>\n\t<p>\n\t    But selecting a peer group based only on a common rating or using national\n\t    benchmarks overlooks many factors that influence borrowing levels. States\n\t    with growing populations, for example, tend to borrow more; a state&#8217;s\n\t    fiscal health affects the funds available for debt service; and policies\n\t    meant to limit state debt can influence how much local governments and\n\t    other state entities borrow for capital projects.\n\t</p>\n\t<p>\n\t    To address this gap, The Pew Charitable Trusts has created an interactive\n\t    tool to allow policymakers to compare states based on seven characteristics\n\t    related to debt.<sup>*</sup> States can use these data to select more\n\t    tailored peer groups, giving them a deeper understanding of how states with\n\t    similar borrowing practices, constraints, and needs manage their borrowing.\n\t    Ultimately, these improved comparisons will help them make better-informed\n\t    decisions.\n\t</p>\n\t<p class="pct-footnote">\n\t<sup>*</sup> To measure debt levels, this tool uses Census Bureau data. For more\n\t    information about these characteristics and why Pew chose them, see the \n\t    &#8220;About the Data&#8221; section below.\n\t</p>\n\n    </div>\n    </section>\n<section id="section-comparison">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">State Comparison</h2>\n    <div class="js-inner-content">\n        <div class="compare-selection-wrapper">\n            <span class="compare-label">Compare</span><br />\n            <div class="flex flex-start flex-baseline autoComplete_outerWrapper">\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-0">\n                    <input autocomplete="hack" type="text" id="compare-input-0">\n                </div>\n                <span>to</span>\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-1">\n                    <input autocomplete="hack" type="text" id="compare-input-1">\n                </div>\n            </div>\n        </div>\n    </div>\n    </section>\n<section id="section-states">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">50-State Data</h2>\n    <div class="js-inner-content">\n    </div>\n    </section>\n<section id="section-about">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">About the Data</h2>\n    <div class="js-inner-content">\n    \n\t<p>\n    Pew researchers developed this list of characteristics by examining\n    relevant literature and consulting subject matter experts. The final set of\n    seven characteristics included in the tool was selected based on evidence\n    in the literature that the characteristics are related to state debt, the\n    feasibility of collecting the data used to construct the characteristic,\n    and a desire to avoid redundancy. Pew also limited the number of\n    characteristics to make the tool easy to use and understand.\n</p>\n<p>\n    The goal of this tool was not to create an exhaustive catalog of the\n    factors that may affect state borrowing levels, so states should not feel\n    the need to limit themselves to the data in it when selecting peers.\n    Instead, the tool is intended to help states consider these differences\n    when constructing peer groups.\n</p>\n<h3 class="static">\n    Borrowing practices\n</h3>\n<p>\n    How states borrow also affects how they should make comparisons: General\n    obligation (GO) debt limits, centralization, and the division of\n    state-local borrowing in a state can affect state borrowing practices.\n</p>\n<h4>\n    General obligation debt limit type (2018)\n</h4>\n<p>\n    GO debt is one of the most common types issued by states. It carries a\n    state’s full faith and credit, the strongest possible pledge. As a result,\n    GO debt is typically a state’s highest rated and lowest cost since credit\n    rating agencies and bond purchasers strongly believe the state will repay\n    it.<sup>1</sup> \n</p>\n<p>\n    Not all states issue much GO debt. All but two have GO debt limits, which\n    vary in restrictiveness and structure. For example, Connecticut limits this\n    debt to 1.6 times total estimated general fund tax receipts, while Arizona\neffectively prohibits its issuance.<sup>2</sup> Comparing Connecticut\n    and Arizona, then, might not be appropriate because Connecticut has\n    significant GO debt and Arizona none. Connecticut’s debt will draw on the\n    state’s general fund in a way Arizona’s won’t. (GO debt is typically\n    supported by a state’s general fund.) Because analyzing the revenue streams\n    available for debt repayment is important, this is a key difference.\n</p>\n<p>\n    These limits sometimes apply to state debt beyond just GO borrowing. For\n    example, West Virginia’s limit applies to net tax-supported debt, which\n    includes GO.\n</p>\n<p>\n    Pew has classified each state’s limit for GO debt as one of the following\n    types:\n</p>\n<ul>\n    <li>\n        <strong>Constitutional amendment.</strong>\n        Three states—Alabama, Ohio, and West Virginia—require an amendment to\n        their constitutions to issue GO debt.\n    </li>\n    <li>\n        <strong>Metric.</strong>\n        In 11 states—Connecticut, Georgia, Hawaii, Mississippi, Nevada, New\n        Hampshire, North Dakota, Oregon, Tennessee, Utah, and Wisconsin—debt is\n        not allowed to exceed a certain metric-based threshold. Tennessee, for\n        example, caps debt service at 10 percent of combined revenues in its\n        general, debt service, and highway funds.\n    </li>\n    <li>\n        <strong>Metric-based with referendum to exceed.</strong>\n        North Carolina, Pennsylvania, and Wyoming use a metric to cap debt but\n        allow issuance above the cap with voter approval.\n    </li>\n    <li>\n        <strong>No limit.</strong>\n        Maryland and Vermont place no restrictions on GO debt.\n    </li>\n    <li>\n        <strong>Prohibition.</strong>\n        Arizona, Colorado, Indiana, and Nebraska prohibit GO debt. Indiana law\n        forbids any GO debt to be issued; the others authorize amounts so\n        low—$350,000 or less—as to be equivalent to prohibitions.\n    </li>\n    <li>\n        <strong>Referendum and/or supermajority.</strong>\n        Thirteen states—Alaska, Arkansas, California, Idaho, Iowa, Kansas,\n        Kentucky, Maine, Michigan, Minnesota, Missouri, Montana, and Rhode\n        Island—require some combination of voter approval and/or a legislative\n        supermajority (generally three-fifths or two-thirds) to issue debt.\n    </li>\n    <li>\n        <strong>Referendum and/or supermajority and metric.</strong>\n        Fourteen states—Delaware, Florida, Illinois, Louisiana, Massachusetts,\n        New Jersey, New Mexico, New York, Oklahoma, South Carolina, South\n        Dakota, Texas, Virginia, and Washington—require a referendum and/or\n        supermajority and have a metric-based cap on debt or debt service.\n    </li>\n</ul>\n<div class="pct-note"><p>\n    <strong>Note:</strong> The classification system is a variation on the approach taken in D.\n    Roderick Kiewiet and Kristin Szakaly, “Constitutional Limitations on\nBorrowing: An Analysis of State Bonded Indebtedness,”    <cite>The Journal of Law, Economics &amp; Organization</cite> 12, no. 1 (1996):\n    62-97,\n    <a href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents">\n        https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents</a>.\n</p>\n<p>\n    <strong>Source:</strong> Pew analysis of state constitutions and statutes\n</p></div>\n<h4>\n    Centralization (fiscal year 2014)\n</h4>\n<p>\n    Another effect of Arizona’s prohibition on GO debt is decentralized debt\n    issuance.<sup>3</sup> This means\n    borrowing is done by entities other than the primary—meaning\n    state—government, including the independent agencies and authorities known\n    as component units. Centralization measures component unit debt as a share\n    of the total debt issued by both the primary government and its component\n    units.\n</p>\n<p>\n    Component unit debt generally relies less on state funds for repayment than\n    primary government debt. Often, lenders have no legal claim on state\n    general funds if the component unit defaults. As a result, state\n    comparisons based on total debt may be misleading. Montana and Delaware,\n    for example, have about the same total debt, but most of Montana’s debt is\n    held by component units and most of Delaware’s is held by the state.\n</p>\n<div class="pct-note"><p>\n    <strong>Note:</strong> To calculate centralization in a state, Pew first analyzed the\n    state’s comprehensive annual financial report to determine how much debt\n    was held by the primary government. That was then compared to a sum of the\n    debt of major component units as reported in their annual financial\n    statements.<sup>4</sup> \n</p></div>\n<h4>\n    The state-local borrowing division (2015)\n</h4>\n<p>\n    One factor that influences state debt levels is the division of borrowing\n    between state and local governments. In some states, local governments are\n    responsible for paying for most capital projects within their\n    jurisdictions. In other places, the state is responsible for those\n    projects. Instead of a city or town bonding to finance them, the state\n    takes on this debt—increasing its overall borrowing. The division of\n    borrowing responsibility is related to the debt limit. Local governments in\n    Arizona, for example, borrow more than the state does because the state’s\nability to borrow is so restricted.<sup>5</sup> This tool measures the\n    state-local borrowing division as the share of total debt within a state\n    issued by local governments.\n</p>\n<div class="pct-note"><p>\n    <strong>Source:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances: 2015 Data Release” (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n</p></div>\n<p>\n    <strong></strong>\n</p>\n<h3 class="static">\n    Fiscal conditions and infrastructure needs\n</h3>\n<p>\n    Fiscal conditions may affect a state’s willingness to issue debt and\n    ability to repay it, while infrastructure needs might increase a state’s\n    demand for debt. Observing trends and variations among states in both\n    categories can allow officials to create more appropriate peer groups.\n</p>\n<h4>\n    Revenue volatility (1997-2016)\n</h4>\n<p>\n    Revenue volatility is the annual fluctuation in tax collections and is\n    affected by each state’s mix of tax streams. It indicates whether a state\n    can expect to dedicate a relatively consistent share of its revenue to its\n    liabilities year to year or whether that share will show greater\n    fluctuation as revenue varies. States with stable revenue can plan debt\n    issuances and pay down debt more easily than states with uncertain tax\n    collections can.<sup>6</sup> States\n    with more volatile revenue may therefore wish to compare themselves to\n    states with similar concerns.\n</p>\n<p>\n    Pew used data from 1997 to 2016 to calculate a revenue volatility score for\n    each state. The score reflects variations in yearly percentage changes in\nrevenue between 1997 and 2016.<sup>7</sup> States have differing\n    levels of volatility because they have unique revenue mixes. Alaska has a\n    highly volatile revenue stream because much of its collections come from\n    unpredictable severance taxes on oil. Other states—such as South Dakota,\n    which earns more of its revenue from stable sources like personal income\n    taxes—have less volatility. A low volatility score means that revenue\n    levels were similar from year to year, and a high score indicates that\n    revenue grew or declined more dramatically.\n</p>\n<div class="pct-note"><p>\n    <strong>Source:</strong> The Pew Charitable Trusts, “Tax Revenue Volatility, FY 1997-2016,”\n    last modified Aug. 29, 2018,\n    <a\n        href="http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6"\n    >\n        http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6</a>\n</p></div>\n<h4>\n    Population growth (2008-17)\n</h4>\n<p>\n    Population growth drives infrastructure needs. More people means greater\n    pressure on a state’s infrastructure, necessitating improvements and new\n    construction. Research shows that as a state’s population grows, so too\ndoes its demand for, and in some cases spending on, capital construction.<sup>8</sup> \n</p>\n<p>\n    As a result, states with similar growth patterns may have similar demands\n    for infrastructure. For this reason, Pew used population growth as a proxy\n    for infrastructure demand, a metric for which exact, reliable sources are\n    scarce. Observing population growth can help identify peers and provides a\n    data point not often used in interstate debt comparisons.\n</p>\n<p>\n    Pew selected a 10-year population growth rate, measured as the increase or\n    decrease in state population between 2008 and 2017. Although no consensus\n    exists in academic literature regarding the appropriate time span for\n    examining population trends, this period captured the trough of the Great\n    Recession, the subsequent economic expansion, and the resulting demographic\n    and geographic shifts.<sup>9</sup> \n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances: 2015 Data Release” (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n    United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n    2017,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx</a>\n    ; U.S. Census Bureau, “Intercensal Estimates of the Resident Population for\n    the United States, Regions, States, and Puerto Rico: April 1, 2000 to July\n    1, 2010,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls</a>\n</p></div>\n<h3 class="static">\n    Debt levels (2015)\n</h3>\n<p>\n    Debt levels are a natural point of comparison and are influenced by the\n    preceding characteristics. While an absolute dollar amount provides useful\n    information, it does not put the amount of debt into context relative to\n    the state’s resources.<sup>10</sup> \n    Given size, population, and economic differences among states, a dollar\n    amount is also less useful for state comparisons. Instead, normalized\n    ratios allow states of various sizes to compare themselves. Consistent with\n    the best practices for understanding debt affordability, Pew’s tool\n    includes two ratios—debt per capita and debt as a percentage of state\n    personal income—to give a more complete measure of a state’s debt.\n    State-based analyses often use a ratio of debt service to revenue when\n    evaluating debt levels and setting limits. This ratio is not included in\nthis tool due to cross-state comparability issues.<sup>11</sup> \n</p>\n<h4>\n    Debt per capita\n</h4>\n<p>\n    Because debt is repaid through revenue generally in the form of taxes or\n    user fees paid by residents, assessing debt relative to its repayment\n    source—the resident—is a common approach. Debt per capita, which measures\n    total debt against a state’s population, makes comparisons between states\n    of different sizes feasible and helps policymakers understand the debt\n    burden on individual residents.\n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances,” 2015 Data Release (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n    United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n    2017,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx</a>\n</p></div>\n<h4>\n    Debt as a percentage of state personal income\n</h4>\n<p>\n    Another common practice, used by credit rating agencies and academics, is\n    to consider a state’s debt level relative to resources available for\n    repayment.<sup>12</sup> A ratio\n    comparing debt not only to population but to taxpayer earning power or\nwealth is therefore beneficial.<sup>13</sup> Debt as a percentage\n    of state personal income addresses this and is commonly used by states to\n    evaluate debt levels.\n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances,” 2015 Data Release (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Bureau of Economic Analysis, “SA1 Personal Income Summary: Personal\n    Income, Population, Per Capita Personal Income,”\n    https://www.bea.gov/data/income-saving/personal-income-by-state.\n</p></div>\n<aside class="pct-box">\n        <h4>Census Data vs. Moody’s Net Tax-Supported Debt Calculations</h4>\n    \n\t<p>\n\t    While debt affordability studies often use Moody’s Investors Service Inc.\n\t    calculations of state net tax-supported debt to compare borrowing, The Pew\n\t    Charitable Trusts used U.S. Census Bureau data for two reasons.\n\t</p>\n\t<p>\n\t    First, the Census Bureau captures a broader scope of debt than does\n\t    Moody’s, including some debt held by dependent agencies such as public\n\tauthorities and component units,<sup>14</sup> giving a more\n\t    accurate representation of the debt burden supported by a state’s\n\t    residents.<sup>15</sup> Second, the\n\t    bureau analyzes how closely the dependent agencies it includes in its\n\t    definition of state debt are fiscally or administratively tied to the\n\t    state. Because ultimate responsibility for a debt can be nebulous—and a\n\t    state may not support the liabilities of its more independent entities—this\n\tfurther ensures an accurate description of state debt.<sup>16</sup> \n\t</p>\n</aside>\n<h3 class="static">\n    Credit ratings (September 2018 and September 2015)\n</h3>\n<p>\n    This tool allows users to group states by Standard &amp; Poor’s credit\n    ratings to explore differences among those with similar credit profiles.\n    The user can select credit ratings from 2018 or 2015 to look at either\n    recent information or information corresponding to other, earlier data\n    points in this tool.\n</p>\n<div class="pct-note"><p>\n    <strong>Note:</strong> Pew collected ratings on general obligation issuance as of September\n    2018 and September 2015. If the state does not issue GO bonds, the rating\n    on the senior-most tax-backed issuance was used instead. In addition to\n    S&amp;P, there are two other major credit rating agencies: Moody’s and\n    Fitch. There is little variation in ratings among the three agencies.\n</p></div>\n<div class="pct-endnotes">\n    \n    <div id="edn1">\n        <p>\n 1. \n            The Pew Charitable Trusts, “Strategies for Managing State Debt”\n            (2017),\n            <a\n                href="http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt"\n            >\n                http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt</a>.\n        </p>\n    </div>\n    <div id="edn2">\n        <p>\n 2. \n            Ibid.\n        </p>\n    </div>\n    <div id="edn3">\n        <p>\n 3. \n            Research on state borrowing practices has found that debt limits\n            decrease the centralization of state debt as states borrow through\n            other entities to circumvent these limits. See Beverly S. Bunch,\n            “The Effect of Constitutional Debt Limits on State Governments’ Use\n            of Public Authorities,” <cite>Public Choice </cite>68, no. 1-3 (1991):\n            57-69,\n            <a href="https://link.springer.com/article/10.1007/BF00173819">\n                https://link.springer.com/article/10.1007/BF00173819</a>\n            ; Rhonda Riherd Trautman, “The Impact of State Debt Management on\n            Debt Activity,” <cite>Public Budgeting &amp; Finance </cite>15, no. 2\n            (1995): 33-51,\n            <a href="https://doi.org/10.1111/1540-5850.01038">\n                https://doi.org/10.1111/1540-5850.01038</a>.\n        </p>\n    </div>\n    <div id="edn4">\n        <p>\n 4. \n            For more detail on how we collected these data, see The Pew\n            Charitable Trusts, “Strategies for Managing State Debt,”\n            methodology.\n        </p>\n    </div>\n    <div id="edn5">\n        <p>\n 5. \n            For a discussion of the relationship between debt limits and local\n            borrowing, see D. Roderick Kiewiet and Kristin Szakaly,\n            “Constitutional Limitations on Borrowing: An Analysis of State\nBonded Indebtedness,”            <cite>The Journal of Law, Economics &amp; Organization </cite>12, no. 1\n            (1996): 62-97,\n            <a\n                href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents"\n            >\n                https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents</a>.\n        </p>\n    </div>\n    <div id="edn6">\n        <p>\n 6. \n            One study found that as economic volatility increases, states\n            prefer to pay for infrastructure projects with cash rather than\n            through financing. Wen Wang, Yilin Hou, and William Duncome,\n            “Determinants of Pay-as-You-Go Financing of Capital Projects:\n            Evidence From the States,” <cite>Public Budgeting &amp; Finance </cite>\n            27, no. 4 (2007): 18-42,\n            <a href="https://doi.org/10.1111/j.1540-5850.2007.00892.x">\n                https://doi.org/10.1111/j.1540-5850.2007.00892.x</a>.\n        </p>\n    </div>\n    <div id="edn7">\n        <p>\n 7. \n            The Pew Charitable Trusts, “Tax Revenue Volatility Varies Across\n            States, Revenue Streams,” accessed Sept. 10, 2018,\n            <a\n                href="http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6"\n            >\n                http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6</a>.\n        </p>\n    </div>\n    <div id="edn8">\n        <p>\n 8. \n            Ronald C. Fisher and Robert W. Wassmer, “The Issuance of State and\nLocal Debt During the United States Great Recession,”            <cite>National Tax Journal</cite> 67, no. 1 (2014): 113-50,\n            <a\n                href="https://ideas.repec.org/a/ntj/journl/v67y2014i1p113-150.html"\n            >\n                https://ideas.repec.org/a/ntj/journl/v67y2014i1p113-150.html</a>\n            ; Ronald C. Fisher and Robert W. Wassmer, “An Analysis of\nState-Local Government Capital Expenditure During the 2000s,”            <cite>Public Budgeting &amp; Finance</cite> 35, no. 1 (2015): 3-28,\n            <a\n                href="https://onlinelibrary.wiley.com/doi/abs/10.1111/pbaf.12062"\n            >\n                https://onlinelibrary.wiley.com/doi/abs/10.1111/pbaf.12062</a>.\n        </p>\n    </div>\n    <div id="edn9">\n        <p>\n 9. \n            The National Bureau of Economic Research, “US Business Cycle\n            Expansions and Contractions,” Sept. 20, 2010,\n            <a href="http://www.nber.org/cycles.html">\n                http://www.nber.org/cycles.html</a>.\n        </p>\n    </div>\n    <div id="edn10">\n        <p>\n 10. \n            Jennifer Weiner, “Assessing the Affordability of State Debt,” New\n            England Public Policy Center at the Federal Reserve Bank of Boston\n            (2013),\n            <a\n                href="https://www.bostonfed.org/publications/new-england-public-policy-center-research-report/2013/assessing-the-affordability-of-state-debt.aspx"\n            >\n                https://www.bostonfed.org/publications/new-england-public-policy-center-research-report/2013/assessing-the-affordability-of-state-debt.aspx</a>.\n        </p>\n    </div>\n    <div id="edn11">\n        <p>\n 11. \n            In CAFRs, states report debt service payments from a variety of\n            funds. Using this information to construct a comparable measure of\n            debt service as a share of general fund revenue requires a detailed\n            understanding of each state’s reporting practices.\n        </p>\n    </div>\n    <div id="edn12">\n        <p>\n 12. \n            Jennifer Weiner, “A Guide to State Debt Affordability Studies:\n            Common Elements and Best Practices,” New England Public Policy\n            Center at the Federal Reserve Bank of Boston (2013),\n            <a\n                href="https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx"\n            >\n                https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx</a>\n            ; Charles Brecher, Kurt Richwerger, and Marcia Van Wagner, “An\nApproach to Measuring the Affordability of State Debt,”            <cite>Public Budgeting &amp; Finance</cite> 23, no. 4 (2003): 65-85,\n            <a\n                href="https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x"\n            >\n                https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x</a>.\n        </p>\n    </div>\n    <div id="edn13">\n        <p>\n 13. \n            W. Bartley Hildreth and Gerald J. Miller, “Debt and the Local\n            Economy: Problems in Benchmarking Local Government Debt\n            Affordability,” <cite>Public Budgeting &amp; Finance</cite> 22, no. 4\n            (2003): 99-113,\n            <a href="https://doi.org/10.1111/1540-5850.00091">\n                https://doi.org/10.1111/1540-5850.00091</a>.\n        </p>\n    </div>\n    <div id="edn14">\n        <p>\n 14. \n            Component units are entities that are legally separate from a state\n            but perform state functions. They typically include bodies such as\n            housing authorities, economic development corporations, and\n            universities.\n        </p>\n    </div>\n    <div id="edn15">\n        <p>\n 15. \n            Weiner, “A Guide.”\n        </p>\n    </div>\n    <div id="edn16">\n        <p>\n 16. \n            Bo Zhao and Wen Wang, “Transparency in State Debt Disclosure,” New\n            England Public Policy Center at the Federal Reserve Bank of Boston\n            (2017),\n            <a\n                href="https://www.bostonfed.org/publications/research-department-working-paper/2017/transparency-in-state-debt-disclosure.aspx"\n            >\n                https://www.bostonfed.org/publications/research-department-working-paper/2017/transparency-in-state-debt-disclosure.aspx</a>.\n        </p>\n    </div>\n</div>\n\n    </div>\n    </section>'},function(e,t){e.exports='<footer>\n\t\t<div>\n\t\t\t<p><strong>Download resources:</strong>\n\t\t\t\t\t<a class="pct-download" href="">Resource 1</a>\n\t\t\t\t\t<a class="pct-download" href="">Resource 2</a>\n\t\t\t\t</p></div>\n</footer>'},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){e.exports={autoComplete_wrapper:"autoComplete_wrapper",autoComplete:"autoComplete",autoComplete_results_list:"autoComplete_results_list",autoComplete_result:"autoComplete_result",autoComplete_highlighted:"autoComplete_highlighted"}},function(e,t,n){},function(e,t,n){"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return i(e,[{key:"init",value:function(e){var t=this;if(void 0===e||"object"!==(void 0===e?"undefined":r(e)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof e.encode||"function"!=typeof e.decode||!Array.isArray(e.views)||"object"!==r(e.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=e.encode,this.decodeHash=e.decode,this.viewPromises=e.views.map(function(e){return e.isReady}),this.PS=e.PS,Promise.all(this.viewPromises).then(function(){t.decodeHash()}),this.PS.setSubs(e.subscriptions.map(function(e){return[e,function(e,n){t.hashChange.call(t,e,n)}]}))}},{key:"hashChange",value:function(e,t){this.setStateObj(e,t),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(e,t){this.stateObj[e]=t}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),e}();t.default=a},function(e,t,n){e.exports={static:"src-css--static"}},function(e,t,n){"use strict";n.r(t);var r=n(6);function i(){}function a(e,t){var n=new i;if(e instanceof i)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var r,a=-1,o=e.length;if(null==t)for(;++a<o;)n.set(a,e[a]);else for(;++a<o;)n.set(t(r=e[a],a,e),r)}else if(e)for(var s in e)n.set(s,e[s]);return n}i.prototype=a.prototype={constructor:i,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var o=a,s=function(){var e,t,n,r=[],i=[];function a(n,i,s,p){if(i>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var l,c,d,u=-1,h=n.length,f=r[i++],m=o(),g=s();++u<h;)(d=m.get(l=f(c=n[u])+""))?d.push(c):m.set(l,[c]);return m.each(function(e,t){p(g,t,a(e,i,s,p))}),g}return n={object:function(e){return a(e,0,p,l)},map:function(e){return a(e,0,c,d)},entries:function(e){return function e(n,a){if(++a>r.length)return n;var o,s=i[a-1];return null!=t&&a>=r.length?o=n.entries():(o=[],n.each(function(t,n){o.push({key:n,values:e(t,a)})})),null!=s?o.sort(function(e,t){return s(e.key,t.key)}):o}(a(e,0,c,d),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return i[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function p(){return{}}function l(e,t,n){e[t]=n}function c(){return o()}function d(e,t,n){e.set(t,n)}function u(){}var h=o.prototype;function f(e,t){var n=new u;if(e instanceof u)e.each(function(e){n.add(e)});else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)n.add(e[r]);else for(;++r<i;)n.add(t(e[r],r,e))}return n}u.prototype=f.prototype={constructor:u,has:h.has,add:function(e){return this["$"+(e+="")]=e,this},remove:h.remove,clear:h.clear,values:h.keys,size:h.size,empty:h.empty,each:h.each};var m=n(11),g=n.n(m),b=n(5),v=n(12),y=n.n(v),w=n(13),x=n(14),C=n(15),k=n(2),S=n.n(k),E=(n(31),n(3)),_=n.n(E),O=(n(32),n(1)),T=n.n(O);class A extends S.a{prerender(){var e=super.prerender();return this.matches=[],this.matches[0]=this.model.data.find(e=>e.code===this.data.comparison[0]),this.matches[1]=this.model.data.find(e=>e.code===this.data.comparison[1]),this.prerendered&&this.rerender,e}update(e,t){this.matches[e]=this.model.data.find(e=>e.code===t)}}class L extends A{prerender(){var e=super.prerender();return this.prerendered&&!this.rerender?e:(console.log(this.model.dict,this.data.field),e.innerHTML=this.returnTemplate(0)+this.returnTemplate(1),e)}update(e,t){var n=parseInt(e.split(".")[1]);console.log(n),super.update(n,t),console.log(this,n),this.el.children[n].fadeInContent(this.returnTemplate(n))}returnTemplate(e){return`<p class="${T.a.chartLabel} ${T.a.chartLabelText}">${this.matches[e].state}: <span class="${T.a["compareColor"+(e+1)]}">${void 0!==this.model.dict[this.data.field]?this.model.dict[this.data.field][[this.matches[e][this.data.field]]]:this.matches[e][this.data.field]}</span></p>`}}var P=n(9),D=n.n(P);class R extends S.a{prerender(){var e=super.prerender();return this.prerendered&&!this.rerender?e:(e.classList.add(D.a.bar,D.a["barColor"+this.data.color]),e.style.transform=`scaleX(${this.linearScale(this.data.d,this.data.field)})`,e)}linearScale(e,t){var n=this.model.types.find(e=>e.field===t);return.01+.99*((e[t]-n.min)/n.spread)}update(){console.log(this),this.el.style.transform=`scaleX(${this.linearScale(this.data.d,this.data.field)})`}}class I extends A{prerender(){var e=super.prerender();return this.bars=[],[0,1].forEach(e=>{this.bars.push(this.parent.parent.createComponent(this.model,R,`div.js-bar-compare-${this.data.field}-${e}`,{parent:this,data:{d:this.matches[e],field:this.data.field,color:e+1}}))}),this.children.push(...this.bars),this.prerendered&&!this.rerender?e:(e.innerHTML=this.returnTemplate(),e)}returnTemplate(){return` \n                        <div class="${T.a.chartContainer}">\n                            ${this.partialTemplate(0)}\n                            ${this.partialTemplate(1)}\n                        </div>\n                       `}partialTemplate(e){return`\n                <p class="${T.a.chartLabel} ${T.a["chartLabel"+(e+1)]}">\n                    ${this.matches[e].state}\n                </p>\n                <div class="${T.a.barContainer} ${T.a["barContainer"+(e+1)]}">\n                    ${this.bars[e].el.outerHTML}                        \n                    <div class="${T.a.dataLabel}" style="transform: translateX(${(100*this.bars[e].linearScale(this.matches[e],this.data.field)).toFixed(1)}%)">\n                        ${this.formatValue(this.matches[e],this.data.field)}\n                    </div>\n                </div>\n        `}linearScale(e,t){var n=this.model.types.find(e=>e.field===t);return(e[t]-n.min)/n.spread}formatValue(e,t){var n,r=this.model.types.find(e=>e.field===t).type,i=e[t];switch(console.log(i),r){case"number":n=i.toLocaleString("en-US",{minimumFractionDigits:1});break;case"currency":n=i.toLocaleString("en-US",{style:r,currency:"USD"});break;case"percent":n=i.toLocaleString("en-US",{style:r,minimumFractionDigits:1});break;default:n="[unformatted]"+i}return n}update(e,t){var n=parseInt(e.split(".")[1]),r=this.el.querySelectorAll("."+T.a.dataLabel)[n];super.update(n,t),console.log(this),this.el.querySelectorAll("."+T.a.chartLabel)[n].fadeInContent(this.matches[n].state),this.children[n].data.d=this.matches[n],this.children[n].update(n),r.fadeInContent(this.formatValue(this.matches[n],this.data.field)),r.style.transform=`translateX(${(100*this.children[n].linearScale(this.matches[n],this.data.field)).toFixed(1)}%)`}}var M=n(16),B=n.n(M),j=n(7),H=n.n(j),F=n(17);function N(){return(N=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var z="undefined"!=typeof window,W=z&&navigator.userAgent,q=/MSIE |Trident\//.test(W),Y=/UCBrowser\//.test(W),U=z&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,$={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:[0,20],distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",updateDuration:0,wait:null,zIndex:9999},X=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],G={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow"},V=z?Element.prototype:{},K=V.matches||V.matchesSelector||V.webkitMatchesSelector||V.mozMatchesSelector||V.msMatchesSelector;function J(e){return[].slice.call(e)}function Q(e,t){return(V.closest||function(e){for(var t=this;t;){if(K.call(t,e))return t;t=t.parentElement}}).call(e,t)}function Z(e,t){for(;e;){if(t(e))return e;e=e.parentElement}}function ee(e,t){return{}.hasOwnProperty.call(e,t)}function te(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?n:r}return e}function ne(e,t){var n;return function(){var r=this,i=arguments;clearTimeout(n),n=setTimeout(function(){return e.apply(r,i)},t)}}function re(e,t){return e&&e.modifiers&&e.modifiers[t]}function ie(e,t){return e.indexOf(t)>-1}function ae(e){return!(!e||!ee(e,"isVirtual"))||e instanceof Element}function oe(e,t){return"function"==typeof e?e.apply(null,t):e}function se(e,t){e.filter(function(e){return"flip"===e.name})[0].enabled=t}function pe(){return document.createElement("div")}function le(e,t){e.innerHTML=t instanceof Element?t.innerHTML:t}function ce(e,t){t.content instanceof Element?(le(e,""),e.appendChild(t.content)):e[t.allowHTML?"innerHTML":"textContent"]=t.content}function de(e){return{tooltip:e.querySelector(G.TOOLTIP),backdrop:e.querySelector(G.BACKDROP),content:e.querySelector(G.CONTENT),arrow:e.querySelector(G.ARROW)||e.querySelector(G.ROUND_ARROW)}}function ue(e){e.setAttribute("data-inertia","")}function he(e){var t=pe();return"round"===e?(t.className="tippy-roundarrow",le(t,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):t.className="tippy-arrow",t}function fe(){var e=pe();return e.className="tippy-backdrop",e.setAttribute("data-state","hidden"),e}function me(e,t){e.setAttribute("tabindex","-1"),t.setAttribute("data-interactive","")}function ge(e,t){e.forEach(function(e){e&&(e.style.transitionDuration="".concat(t,"ms"))})}function be(e,t,n){var r=Y&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";e[t+"EventListener"](r,n)}function ve(e){var t=e.getAttribute("x-placement");return t?t.split("-")[0]:""}function ye(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function we(e,t,n){n.split(" ").forEach(function(n){e.classList[t](n+"-theme")})}function xe(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.checkHideOnClick,n=e.exclude,r=e.duration;J(document.querySelectorAll(G.POPPER)).forEach(function(e){var i=e._tippy;!i||t&&!0!==i.props.hideOnClick||n&&e===n.popper||i.hide(r)})}var Ce={passive:!0},ke=4,Se=!1;function Ee(){Se||(Se=!0,U&&document.body.classList.add("tippy-iOS"),window.performance&&document.addEventListener("mousemove",Oe))}var _e=0;function Oe(){var e=performance.now();e-_e<20&&(Se=!1,document.removeEventListener("mousemove",Oe),U||document.body.classList.remove("tippy-iOS")),_e=e}function Te(e){var t=e.target;if(!(t instanceof Element))return xe();var n=Q(t,G.POPPER);if(!(n&&n._tippy&&n._tippy.props.interactive)){var r=Z(t,function(e){return e._tippy&&e._tippy.reference===e});if(r){var i=r._tippy,a=ie(i.props.trigger,"click");if(Se||a)return xe({exclude:i,checkHideOnClick:!0});if(!0!==i.props.hideOnClick||a)return;i.clearDelayTimeouts()}xe({checkHideOnClick:!0})}}function Ae(){var e=document.activeElement;e&&e.blur&&e._tippy&&e.blur()}var Le=Object.keys($);function Pe(e,t){var n=N({},t,{content:oe(t.content,[e])},t.ignoreAttributes?{}:function(e){return Le.reduce(function(t,n){var r=(e.getAttribute("data-tippy-".concat(n))||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})}(e));return(n.arrow||Y)&&(n.animateFill=!1),n}function De(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;Object.keys(e).forEach(function(e){if(!ee(t,e))throw new Error("[tippy]: `".concat(e,"` is not a valid option"))})}var Re=1;function Ie(e,t){var n=Pe(e,t);if(!n.multiple&&e._tippy)return null;var r={},i=null,a=0,o=0,s=!1,p=function(){},l=[],c=n.interactiveDebounce>0?ne(C,n.interactiveDebounce):C,d=null,u=Re++,h=function(e,t){var n=pe();n.className="tippy-popper",n.id="tippy-".concat(e),n.style.zIndex=t.zIndex,t.role&&n.setAttribute("role",t.role);var r=pe();r.className="tippy-tooltip",r.style.maxWidth=t.maxWidth+("number"==typeof t.maxWidth?"px":""),r.setAttribute("data-size",t.size),r.setAttribute("data-animation",t.animation),r.setAttribute("data-state","hidden"),we(r,"add",t.theme);var i=pe();return i.className="tippy-content",i.setAttribute("data-state","hidden"),t.interactive&&me(n,r),t.arrow&&r.appendChild(he(t.arrowType)),t.animateFill&&(r.appendChild(fe()),r.setAttribute("data-animatefill","")),t.inertia&&ue(r),ce(i,t),r.appendChild(i),n.appendChild(r),n}(u,n);h.addEventListener("mouseenter",function(e){m.props.interactive&&m.state.isVisible&&"mouseenter"===r.type&&b(e)}),h.addEventListener("mouseleave",function(){m.props.interactive&&"mouseenter"===r.type&&document.addEventListener("mousemove",c)});var f,m={id:u,reference:e,popper:h,popperChildren:de(h),popperInstance:null,props:n,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:M,set:B,setContent:function(e){B({content:e})},show:j,hide:H,enable:function(){m.state.isEnabled=!0},disable:function(){m.state.isEnabled=!1},destroy:z};return D(),n.lazy||(T(),m.popperInstance.disableEventListeners()),n.showOnInit&&b(),n.a11y&&!n.target&&((f=e)instanceof Element&&(!K.call(f,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")||f.hasAttribute("disabled")))&&e.setAttribute("tabindex","0"),e._tippy=m,h._tippy=m,m;function g(e){var t=i=e,n=t.clientX,r=t.clientY;if(m.popperInstance){var a=ve(m.popper),o=m.props.arrow?ke+("round"===m.props.arrowType?18:16):ke,s=ie(["top","bottom"],a),p=ie(["left","right"],a),l=s?Math.max(o,n):n,c=p?Math.max(o,r):r;s&&l>o&&(l=Math.min(n,window.innerWidth-o)),p&&c>o&&(c=Math.min(r,window.innerHeight-o));var d=m.reference.getBoundingClientRect(),u=m.props.followCursor,h="horizontal"===u,f="vertical"===u;m.popperInstance.reference={getBoundingClientRect:function(){return{width:0,height:0,top:h?d.top:c,bottom:h?d.bottom:c,left:f?d.left:l,right:f?d.right:l}},clientWidth:0,clientHeight:0},m.popperInstance.scheduleUpdate(),"initial"===u&&m.state.isVisible&&y()}}function b(e){if(M(),!m.state.isVisible){if(m.props.target)return function(e){var n=Q(e.target,m.props.target);n&&!n._tippy&&(Ie(n,N({},m.props,{content:oe(t.content,[n]),appendTo:t.appendTo,target:"",showOnInit:!0})),b(e))}(e);if(s=!0,m.props.wait)return m.props.wait(m,e);A()&&!m.state.isMounted&&document.addEventListener("mousemove",g);var n=te(m.props.delay,0,$.delay);n?a=setTimeout(function(){j()},n):j()}}function v(){if(M(),!m.state.isVisible)return y();s=!1;var e=te(m.props.delay,1,$.delay);e?o=setTimeout(function(){m.state.isVisible&&H()},e):H()}function y(){document.removeEventListener("mousemove",g)}function w(){document.body.removeEventListener("mouseleave",v),document.removeEventListener("mousemove",c)}function x(e){m.state.isEnabled&&!O(e)&&(m.state.isVisible||(r=e,e instanceof MouseEvent&&(i=e)),"click"===e.type&&!1!==m.props.hideOnClick&&m.state.isVisible?v():b(e))}function C(e){var t=Z(e.target,function(e){return e._tippy}),n=Q(e.target,G.POPPER)===m.popper,r=t===m.reference;n||r||function(e,t,n,r){if(!e)return!0;var i=n.clientX,a=n.clientY,o=r.interactiveBorder,s=r.distance,p=t.top-a>("top"===e?o+s:o),l=a-t.bottom>("bottom"===e?o+s:o),c=t.left-i>("left"===e?o+s:o),d=i-t.right>("right"===e?o+s:o);return p||l||c||d}(ve(m.popper),m.popper.getBoundingClientRect(),e,m.props)&&(w(),v())}function k(e){if(!O(e))return m.props.interactive?(document.body.addEventListener("mouseleave",v),void document.addEventListener("mousemove",c)):void v()}function S(e){e.target===m.reference&&(m.props.interactive&&e.relatedTarget&&m.popper.contains(e.relatedTarget)||v())}function E(e){Q(e.target,m.props.target)&&b(e)}function _(e){Q(e.target,m.props.target)&&v()}function O(e){var t="ontouchstart"in window,n=ie(e.type,"touch"),r=m.props.touchHold;return t&&Se&&r&&!n||Se&&!r&&n}function T(){var e=m.props.popperOptions,t=m.popperChildren,n=t.tooltip,r=t.arrow;m.popperInstance=new F.a(m.reference,m.popper,N({placement:m.props.placement},e,{modifiers:N({},e?e.modifiers:{},{preventOverflow:N({boundariesElement:m.props.boundary,padding:ke},re(e,"preventOverflow")),arrow:N({element:r,enabled:!!r},re(e,"arrow")),flip:N({enabled:m.props.flip,padding:m.props.distance+ke,behavior:m.props.flipBehavior},re(e,"flip")),offset:N({offset:m.props.offset},re(e,"offset"))}),onUpdate:function(t){m.props.flip&&!m.props.flipOnUpdate&&(t.flipped&&(m.popperInstance.options.placement=t.placement),se(m.popperInstance.modifiers,!1));var r=ve(m.popper),i=n.style;i.top="",i.bottom="",i.left="",i.right="",i[r]=-(m.props.distance-10)+"px";var a={top:ke,bottom:ke,left:ke,right:ke};a[r]=ke+m.props.distance,m.popperInstance.modifiers.filter(function(e){return"preventOverflow"===e.name})[0].padding=a,e&&e.onUpdate&&e.onUpdate(t)}}))}function A(){return m.props.followCursor&&!Se&&"focus"!==r.type}function L(e,t){function n(e){e.target===r&&(be(r,"remove",n),t())}if(0===e)return t();var r=m.popperChildren.tooltip;be(r,"remove",p),be(r,"add",n),p=n}function P(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];m.reference.addEventListener(e,t,n),l.push({eventType:e,handler:t,options:n})}function D(){m.props.touchHold&&!m.props.target&&(P("touchstart",x,Ce),P("touchend",k,Ce)),m.props.trigger.trim().split(" ").forEach(function(e){if("manual"!==e)if(m.props.target)switch(e){case"mouseenter":P("mouseover",E),P("mouseout",_);break;case"focus":P("focusin",E),P("focusout",_);break;case"click":P(e,E)}else switch(P(e,x),e){case"mouseenter":P("mouseleave",k);break;case"focus":P(q?"focusout":"blur",S)}})}function R(){l.forEach(function(e){var t=e.eventType,n=e.handler,r=e.options;m.reference.removeEventListener(t,n,r)}),l=[]}function I(){return[m.popperChildren.tooltip,m.popperChildren.backdrop,m.popperChildren.content]}function M(){clearTimeout(a),clearTimeout(o)}function B(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};De(e,$);var t=m.props,n=Pe(m.reference,N({},m.props,e,{ignoreAttributes:!0}));n.ignoreAttributes=ee(e,"ignoreAttributes")?e.ignoreAttributes:t.ignoreAttributes,m.props=n,(ee(e,"trigger")||ee(e,"touchHold"))&&(R(),D()),ee(e,"interactiveDebounce")&&(w(),c=ne(C,e.interactiveDebounce)),function(e,t,n){var r=de(e),i=r.tooltip,a=r.content,o=r.backdrop,s=r.arrow;e.style.zIndex=n.zIndex,i.setAttribute("data-size",n.size),i.setAttribute("data-animation",n.animation),i.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?e.setAttribute("role",n.role):e.removeAttribute("role"),t.content!==n.content&&ce(a,n),!t.animateFill&&n.animateFill?(i.appendChild(fe()),i.setAttribute("data-animatefill","")):t.animateFill&&!n.animateFill&&(i.removeChild(o),i.removeAttribute("data-animatefill")),!t.arrow&&n.arrow?i.appendChild(he(n.arrowType)):t.arrow&&!n.arrow&&i.removeChild(s),t.arrow&&n.arrow&&t.arrowType!==n.arrowType&&i.replaceChild(he(n.arrowType),s),!t.interactive&&n.interactive?me(e,i):t.interactive&&!n.interactive&&function(e,t){e.removeAttribute("tabindex"),t.removeAttribute("data-interactive")}(e,i),!t.inertia&&n.inertia?ue(i):t.inertia&&!n.inertia&&function(e){e.removeAttribute("data-inertia")}(i),t.theme!==n.theme&&(we(i,"remove",t.theme),we(i,"add",n.theme))}(m.popper,t,n),m.popperChildren=de(m.popper),m.popperInstance&&(m.popperInstance.update(),X.some(function(t){return ee(e,t)})&&(m.popperInstance.destroy(),T(),m.state.isVisible||m.popperInstance.disableEventListeners(),m.props.followCursor&&i&&g(i)))}function j(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:te(m.props.duration,0,$.duration[0]);if(!m.state.isDestroyed&&m.state.isEnabled&&(!Se||m.props.touch))return ee(m.reference,"isVirtual")||document.documentElement.contains(m.reference)?void(m.reference.hasAttribute("disabled")||!1!==m.props.onShow(m)&&(m.popper.style.visibility="visible",m.state.isVisible=!0,m.props.interactive&&m.reference.classList.add("tippy-active"),ge([m.popper,m.popperChildren.tooltip,m.popperChildren.backdrop],0),function(e){var t=!(A()||"initial"===m.props.followCursor&&Se);m.popperInstance?(A()||(m.popperInstance.scheduleUpdate(),t&&m.popperInstance.enableEventListeners()),se(m.popperInstance.modifiers,m.props.flip)):(T(),t||m.popperInstance.disableEventListeners()),m.popperInstance.reference=m.reference;var n=m.popperChildren.arrow;if(A()){n&&(n.style.margin="0");var a=te(m.props.delay,0,$.delay);r.type&&g(a&&i?i:r)}else n&&(n.style.margin="");Se&&i&&"initial"===m.props.followCursor&&(g(i),n&&(n.style.margin="0")),function(e,t){var n=e.popper,r=e.options,i=r.onCreate,a=r.onUpdate;r.onCreate=r.onUpdate=function(e){!function(e){e.offsetHeight}(n),t(),a(e),r.onCreate=i,r.onUpdate=a}}(m.popperInstance,e);var o=m.props.appendTo;(d="parent"===o?m.reference.parentNode:oe(o,[m.reference])).contains(m.popper)||(d.appendChild(m.popper),m.props.onMount(m),m.state.isMounted=!0)}(function(){m.state.isVisible&&(A()||m.popperInstance.update(),ge([m.popper],n.updateDuration),ge(I(),e),m.popperChildren.backdrop&&(m.popperChildren.content.style.transitionDelay=Math.round(e/12)+"ms"),m.props.sticky&&(ge([m.popper],q?0:m.props.updateDuration),function e(){m.popperInstance&&m.popperInstance.scheduleUpdate(),m.state.isMounted?requestAnimationFrame(e):ge([m.popper],0)}()),ye(I(),"visible"),function(e,t){L(e,t)}(e,function(){m.popperChildren.tooltip.classList.add("tippy-notransition"),m.props.aria&&m.reference.setAttribute("aria-".concat(m.props.aria),m.popper.id),m.props.onShown(m),m.state.isShown=!0}))}))):z()}function H(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:te(m.props.duration,1,$.duration[1]);!m.state.isDestroyed&&m.state.isEnabled&&!1!==m.props.onHide(m)&&(m.popperChildren.tooltip.classList.remove("tippy-notransition"),m.props.interactive&&m.reference.classList.remove("tippy-active"),m.popper.style.visibility="hidden",m.state.isVisible=!1,m.state.isShown=!1,ge(I(),e),ye(I(),"hidden"),function(e,t){L(e,function(){!m.state.isVisible&&d&&d.contains(m.popper)&&t()})}(e,function(){s||y(),m.props.aria&&m.reference.removeAttribute("aria-".concat(m.props.aria)),m.popperInstance.disableEventListeners(),m.popperInstance.options.placement=m.props.placement,d.removeChild(m.popper),m.props.onHidden(m),m.state.isMounted=!1}))}function z(e){m.state.isDestroyed||(m.state.isMounted&&H(0),R(),delete m.reference._tippy,m.props.target&&e&&J(m.reference.querySelectorAll(m.props.target)).forEach(function(e){e._tippy&&e._tippy.destroy()}),m.popperInstance&&m.popperInstance.destroy(),m.state.isDestroyed=!0)}}var Me=!1;function Be(e,t){De(t,$),Me||(document.addEventListener("click",Te,!0),document.addEventListener("touchstart",Ee,Ce),window.addEventListener("blur",Ae),Me=!0);var n,r=N({},$,t);n=e,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(e){var t={isVirtual:!0,attributes:e.attributes||{},setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},hasAttribute:function(t){return t in e.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){delete e.classList.classNames[t]},contains:function(t){return t in e.classList.classNames}}};for(var n in t)e[n]=t[n]}(e);var i=function(e){if(ae(e))return[e];if(e instanceof NodeList)return J(e);if(Array.isArray(e))return e;try{return J(document.querySelectorAll(e))}catch(e){return[]}}(e).reduce(function(e,t){var n=t&&Ie(t,r);return n&&e.push(n),e},[]);return ae(e)?i[0]:i}Be.version="4.0.4",Be.defaults=$,Be.setDefaults=function(e){Object.keys(e).forEach(function(t){$[t]=e[t]})},Be.hideAll=xe,Be.group=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.delay,r=void 0===n?e[0].props.delay:n,i=t.duration,a=void 0===i?0:i,o=!1;function s(e){o=e,d()}function p(t){t._originalProps.onShow(t),e.forEach(function(e){e.set({duration:a}),e.hide()}),s(!0)}function l(e){e._originalProps.onHide(e),s(!1)}function c(e){e._originalProps.onShown(e),e.set({duration:e._originalProps.duration})}function d(){e.forEach(function(e){e.set({onShow:p,onShown:c,onHide:l,delay:o?[0,Array.isArray(r)?r[1]:r]:r,duration:o?a:e._originalProps.duration})})}e.forEach(function(e){e._originalProps={duration:e.props.duration,onHide:e.props.onHide,onShow:e.props.onShow,onShown:e.props.onShown}}),d()},z&&setTimeout(function(){J(document.querySelectorAll("[data-tippy]")).forEach(function(e){var t=e.getAttribute("data-tippy");t&&Be(e,{content:t})})}),function(e){if(z){var t=document.createElement("style");t.type="text/css",t.textContent=e;var n=document.head,r=n.firstChild;r?n.insertBefore(t,r):n.appendChild(t)}}('.tippy-iOS{cursor:pointer!important}.tippy-notransition{transition:none}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;will-change:transform;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}');var je=Be;const He=["US","AL"];class Fe extends S.a{prerender(){this.comparisons=[],this.model.groups.forEach((e,t)=>{this.model.typesNested[t].values.forEach(e=>{var t;t="text"===e.type?this.parent.createComponent(this.model,L,`div.js-text-compare-${e.field}`,{rerenderOnDataMismatch:!0,parent:this,data:{comparison:He,field:e.field}}):this.parent.createComponent(this.model,I,`div.js-text-compare-${e.field}`,{rerenderOnDataMismatch:!0,parent:this,data:{comparison:He,field:e.field}}),this.comparisons.push(t)})}),this.children.push(...this.comparisons);var e=super.prerender();if(this.prerendered&&!this.rerender)return e;var t=0;return this.model.groups.forEach((n,r)=>{var i=document.createElement("div");i.classList.add(_.a[n.cleanString()]),i.insertAdjacentHTML("afterbegin",`<h3 class="${_.a.groupHeader}">${n}</h3>`);var a=document.createElement("div");a.classList.add(_.a.typeContainer,_.a[n.cleanString()]),this.model.typesNested[r].values.forEach(e=>{var n=document.createElement("div");n.classList.add(_.a.typeDiv,_.a[e.field]),n.insertAdjacentHTML("afterbegin",`<h4 class="${_.a.typeHeader} ${e.tooltip?_.a.withTooltip:"withoutTooltip"}" data-tippy-content="${e.tooltip||""}">${e.label}</h4>`),n.appendChild(this.comparisons[t].el),t++,a.appendChild(n)}),i.appendChild(a),e.appendChild(i)}),e}init(){this.initializeAutocompletes(),this.initializeTooltips(),H.a.setSubs([["compare",(e,t)=>{this.update(e,t)}]])}initializeTooltips(){var e=document.querySelectorAll("."+_.a.withTooltip);je(e)}update(e,t){console.log(this),this.comparisons.forEach(n=>{n.update(e,t)})}initializeAutocompletes(){var e=this.model.data.map(e=>({state:e.state,code:e.code}));console.log(e),[0,1].forEach(t=>{var n=document.querySelector("#compare-input-"+t),r=document.querySelector("#autoComplete_wrapper-"+t);n.classList.add("autoComplete",_.a["autoComplete"+t]),r.classList.add(_.a["autoComplete_wrapper-"+t]),this.children.push(new B.a({data:{src:e,key:"state"},selector:"#compare-input-"+t,placeHolder:"Select state",searchEngine:"strict",resultsList:{container:()=>"autoComplete_results_list",destination:document.querySelector("#compare-input-"+t),position:"afterend"},highlight:!0,onSelection:e=>{console.log(e,this),b.stateModule.setState("compare."+t,e.selection.code),n.value=e.selection.state}})),n.value=this.model.data.find(e=>e.code===He[t]).state,console.log(this.children)})}}var Ne=n(4),ze=n.n(Ne),We=n(0),qe=n.n(We),Ye=n(18),Ue=n.n(Ye),$e=n(19);class Xe extends $e.Dropdown{constructor(e,t){var n=[],r=t.data.type;t.data.data.forEach(e=>{n.push({value:e.field,name:isNaN(+e.label)?e.label:"Credit rating "+e.label,selected:!!e.isDefaultSelection})}),t.data=n.sort(function(e,t){return e.name<t.name?-1:e.name>t.name?1:e.name>=t.name?0:NaN}),"group"===r&&t.data.unshift({value:null,name:"— None —",selected:!0}),super(...arguments),this.dropdownType=r}prerender(){var e=super.prerender();return this.prerendered&&!this.rerender?e:(e.classList.add(Ue.a.dropdown),e)}init(){console.log("init dropdown",this),this.el.addEventListener("change",e=>{console.log(e,this),b.stateModule.setState(this.dropdownType,e.target.value)})}}class Ge extends S.a{prerender(){var e=super.prerender(),t=[{label:"Select field:",data:this.model.types.filter(e=>"text"!==e.type),type:"field"},{label:"Group by:",data:this.model.types.filter(e=>"text"===e.type),type:"group"}];if(this.dropdowns=[],t.forEach(e=>{this.dropdowns.push(this.parent.parent.createComponent(this.model,Xe,`select.js-dropdown-${e.label.cleanString()}`,{parent:this,data:e}))}),this.children.push(...this.dropdowns),this.prerendered&&!this.rerender)return e;var n=document.createElement("div");return n.classList.add(qe.a.dropdownWrapper),t.forEach((e,t)=>{var r=document.createElement("div"),i=document.createElement("label"),a=this.dropdowns[t];i.classList.add(qe.a.dropdownOuter),i.innerText=e.label,r.classList.add(qe.a.dropdownInner),r.appendChild(a.el),i.appendChild(r),n.appendChild(i)}),e.appendChild(n),e.insertAdjacentHTML("beforeend",`\n            <div id="explainer-wrapper">\n                <div id="field-explainer"></div>\n                <div id="group-explainer"></div>\n            </div>\n            <div class="flex">\n                <p class="${qe.a.label} ${qe.a.labelSort} flex"><span>Sort by:</span> <span><a class="${qe.a.sortBy} ${qe.a.sortActive}" data-sort="alpha" href="#">A–Z</a> | <a class="${qe.a.sortBy}" data-sort="asc" href="#">Low–High</a> | <a class="${qe.a.sortBy}" data-sort="desc" href="#">High–Low</a></span></p>\n                <p class="${qe.a.label} ${qe.a.labelHighlight}">Select a state to highlight | <a id="clear-all-highlight" href="#">Clear all</a></p>\n            </div>\n        `),e}init(){this.children.forEach(e=>{e.init()}),document.querySelectorAll("."+qe.a.sortBy).forEach(e=>{e.addEventListener("click",t=>{t.preventDefault(),document.querySelector("."+qe.a.sortActive).classList.remove(qe.a.sortActive),e.classList.add(qe.a.sortActive),b.stateModule.setState("sort",e.dataset.sort)})})}}var Ve=n(20),Ke=n.n(Ve),Je=n(8),Qe=n.n(Je),Ze=n(21),et=n.n(Ze),tt=n(22),nt=n.n(tt),rt=n(23),it=n.n(rt),at=n(24),ot=n.n(at),st=n(25),pt=n.n(st),lt=n(26),ct=n.n(lt);function dt(e=null){return null===e?function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?-1:t[e]>n[e]?1:t[e]>=n[e]?0:NaN}}function ut(e=null){return null===e?function(e,t){return e<t?1:e>t?-1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?1:t[e]>n[e]?-1:t[e]>=n[e]?0:NaN}}class ht extends S.a{prerender(){var e=super.prerender();if(this.field="debt_percent_SPI",this.bars=[],this.barContainers=[],this.lastPositions={},this.highlightedBars={},this.explainerText={centralization:Ke.a,credit2015:Qe.a,credit2018:Qe.a,debt_limit_type:et.a,debt_per_capita:nt.a,debt_percent_SPI:it.a,ten_year_pop_growth:ot.a,revenue_volatility:pt.a,state_local_division:ct.a},this.groupByFn=null!==this.groupBy?e=>e[this.groupBy]:e=>null!==e,this.selections=this.parent.createComponent(this.model,Ge,"div.js-fifty-state-selections",{parent:this}),this.sortValueKey="state",this.sortValuesFn=dt,this.groupBy="null",this.nestData(),this.pushBars(),this.children.push(this.selections,...this.bars),this.prerendered&&!this.rerender)return e;this.renderSelections(),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.updateExplainerText("field",this.field,!0);var t=this.renderCharts();return e.appendChild(t),e}nestData(){this.nestedData=s().key(this.groupByFn).sortKeys(dt()).sortValues(this.sortValuesFn(this.sortValueKey)).entries(this.model.data)}pushBars(){this.bars.length=0,this.barContainers.length=0,this.nestedData.forEach(e=>{e.values.forEach(e=>{this.bars.push(this.parent.createComponent(this.model,R,`div.bar-state-${e.code}`,{parent:this,data:{d:e,field:this.field,color:2}})),this.barContainers.push(this.parent.createComponent(this.model,S.a,`div#barContainer-${e.code}`))})})}renderSelections(){this.container.appendChild(this.selections.el)}renderCharts(){var e=document.createElement("div"),t=0;return e.classList.add("js-fifty-chart-container"),this.nestedData.forEach(n=>{var r=document.createElement("div");r.classList.add(ze.a.groupDiv),r.innerHTML="null"!==this.groupBy?`<h3 class="${ze.a.groupHeader}">${void 0!==this.model.dict[this.groupBy]?this.model.dict[this.groupBy][n.key]:n.key}</h3>`:"",n.values.forEach(e=>{var n=this.barContainers[t].el;n.classList.add(ze.a.barContainer),this.highlightedBars[n.id]&&n.classList.add(ze.a.isHighlighted);var i=document.createElement("p");i.classList.add(ze.a.barLabel),i.innerHTML=e.state,n.appendChild(i),n.appendChild(this.bars[t].el),r.appendChild(n),t++}),e.appendChild(r)}),e}invertPositions(){this.barContainers.forEach(e=>{var t=e.el.getBoundingClientRect(),n=this.firstPositions[e.el.id].top-t.top;e.el.style.transitionDuration="0",e.el.style.transform=`translateY(${n}px)`,setTimeout(function(){e.el.style.transitionDuration="0.8s",e.el.style.transform="translateY(0)"})})}init(){H.a.setSubs([["field",(e,t)=>{this.updateBars(e,t),this.updateExplainerText(e,t)}],["group",(e,t)=>{this.updateGroups(e,t),this.updateExplainerText(e,t)}],["sort",(e,t)=>{this.sortBars(e,t)}],["resize",()=>{this.adjustExplainerTextHeight()}]]),this.children.forEach(e=>{e.init()}),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.initHighlightBars(),this.initClearAllHighlights()}updateExplainerText(e,t,n){var r,i;"field"===e&&(this.field=t,i=this.explainerText[this.field]||"",r=this.fieldExplainer),"group"===e&&(this.groupBy=t,i=this.explainerText[this.groupBy]||"",r=this.groupExplainer),n||(this.explainerWrapper.style.height=this.explainerWrapper.offsetHeight+"px"),r.fadeInContent(i).then(()=>{this.adjustExplainerTextHeight()})}adjustExplainerTextHeight(){var e=[this.fieldExplainer,this.groupExplainer].reduce((e,t)=>{var n=t.querySelector("p"),r=n?window.getComputedStyle(t.querySelector("p")):null;return r?+e+n.offsetHeight+parseInt(r["margin-top"])+parseInt(r["margin-bottom"]):+e},0);this.explainerWrapper.style.height=e+"px"}initHighlightBars(){document.querySelectorAll("."+ze.a.barContainer).forEach(e=>{e.addEventListener("click",()=>{this.highlightedBars[e.id]=!this.highlightedBars[e.id],e.classList.toggle(ze.a.isHighlighted)})})}initClearAllHighlights(){document.querySelector("#clear-all-highlight").addEventListener("click",e=>{e.preventDefault(),document.querySelectorAll("."+ze.a.barContainer).forEach(e=>{e.classList.remove(ze.a.isHighlighted),this.highlightedBars={}})})}updateBars(e,t){this.field=t,this.bars.forEach(e=>{e.data.field=t,e.update()}),console.log(this.sortValueKey),"state"!==this.sortValueKey&&(this.sortValueKey=t,setTimeout(this.FLIP.bind(this),500))}recordFirstPositions(){this.firstPositions=this.barContainers.reduce((e,t)=>(e[t.el.id]=t.el.getBoundingClientRect(),e),{})}FLIP(){this.recordFirstPositions(),this.nestData(),this.el.innerHTML="",this.pushBars(),this.el.appendChild(this.renderCharts()),this.initHighlightBars(),this.invertPositions()}updateGroups(e,t){this.groupBy=t,this.FLIP()}sortBars(e,t){this.sortValueKey="alpha"===t?"state":this.field,this.sortValuesFn="desc"===t?ut:dt,this.FLIP()}}var ft=n(27),mt=n.n(ft),gt=n(28),bt=n.n(gt),vt=n(29),yt=n.n(vt);Object(r.publishWindowResize)(b.stateModule);const wt={groups:w,types:x,dict:C},xt=[];function Ct(){return new Promise((e,t)=>{var n=this.el;g.a.parse(""+y.a,{download:!0,dynamicTyping:!0,header:!0,fastMode:!0,skipEmptyLines:!0,beforeFirstChunk(e){var t=e.hashCode();window.IS_PRERENDERING?n.setAttribute("data-data-hash",t):t.toString()!==n.getAttribute("data-data-hash")&&(n.setAttribute("data-data-mismatch",!0),console.log("data mismatch"),wt.isMismatched=!0)},complete:t=>{xt.length=0;var n=t.data;wt.data=n,wt.types.forEach(e=>{if("text"!==e.type){let t=n.map(t=>t[e.field]).filter(e=>null!==e);e.max=Math.max(...t),e.min=Math.min(...t),e.spread=e.max-e.min}}),wt.typesNested=s().key(e=>e.group).entries(wt.types),console.log(wt),xt.push(this.createComponent(wt,Fe,"div#comparison-view",{renderToSelector:"#section-comparison .js-inner-content",rerenderOnDataMismatch:!0,parent:this}),this.createComponent(wt,ht,"div#fifty-state-view",{renderToSelector:"#section-states .js-inner-content",rerenderOnDataMismatch:!0,parent:this})),e(!0)},error:function(e){t(e)}})})}n(36);const kt=new class extends mt.a{prerender(){console.log("prerender"),this.el.insertAdjacentHTML("beforeend",bt.a),this.el.insertAdjacentHTML("beforeend",yt.a),Ct.call(this).then(()=>{console.log(wt),xt.forEach(e=>{e.container.appendChild(e.el)})})}init(){console.log("init"),super.init(),this.attachSectionOpenClose(),Ct.call(this).then(()=>{xt.forEach(e=>{e.init(this)})})}attachSectionOpenClose(){function e(){console.log(this.parentNode),this.parentNode.querySelector(".js-inner-content").classList.toggle("pct-hide"),this.classList.toggle("pct-is-closed"),this.blur()}document.querySelectorAll("#pew-app section > h2").forEach(t=>{t.addEventListener("click",e),t.addEventListener("keyup",function(t){13===t.keyCode&&e.call(this)})})}}("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&kt.prerender(),kt.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
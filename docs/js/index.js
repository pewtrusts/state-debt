!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1);var o=function(){function e(t,n){var r=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"!=typeof t)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=t,this.model=n.model,this.parent=n.parent,this.renderToSelector=n.renderToSelector,this.container=i.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.el=this.prerender(arguments),this.isReady=new Promise(function(e,t){r.resolve=e,r.reject=t})}return r(e,[{key:"prerender",value:function(){var e=i.DOMHelpers.q(this.selector);return e&&!this.rerender?(this.prerendered=!0,e):e?(e.innerHTML="",e):i.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GTMPush=function(e){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:e})},t.publishWindowResize=function(e){var t;window.addEventListener("resize",function(){t||(t=setTimeout(function(){e.setState("resize",document.documentElement.clientWidth),t=null},350))},!1)};t.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(e,t){var n=this,r=t||0;return t&&(this.style.transition="opacity "+t+"s ease-in-out"),new Promise(function(t){var i=window.getComputedStyle(n).getPropertyValue("transition-duration")||r,o=1e3*parseFloat(i);n.fadeOutContent(),setTimeout(function(){n.innerHTML=e,n.classList.remove("no-opacity"),t(!0)},o)})})),t.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(e,t){if(this.length<=e)return this;var n=this.substr(0,e-1);return(t?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var e,t=0;if(0===this.length)return t;for(e=0;e<this.length;e++)t=(t<<5)-t+this.charCodeAt(e),t|=0;return t})),t.DOMHelpers={c:function(e){if(-1!==e.indexOf(".")||-1!==e.indexOf("#")){var t=e.match(/\.([^#.]*)/g)||[],n=e.match(/#([^.]*)/),r=e.match(/^([^.#]+)/),i=document.createElement(r[0]);return t.forEach(function(e){i.classList.add(e.replace(".",""))}),null!==n&&i.setAttribute("id",n[1]),i}return document.createElement(e)},q:function(e){return document.querySelector(e)},qa:function(e){return document.querySelectorAll(e)}}},function(e,t,n){const r=n(3),i={};function o(){console.log(i)}Array.prototype.compare=Array.prototype.compare||function(e){if(this.length!=e.length)return!1;if(0===this.length&&0===e.length)return!0;console.log("in compare"),console.log(this);for(var t=0;t<e.length;t++)if(this[t]!==e[t])return!1;return!0},t.stateModule={logState:o,getState:function(e){return void 0!==i[e]?i[e][0]:void 0},getPreviousState:function(e){return void 0!==i[e]&&void 0!==i[e][1]?i[e][1]:void 0},setState:function(e,t){void 0===i[e]?(i[e]=[t],r.publish(e,t),o()):("string"==typeof t||"number"==typeof t?i[e][0]!==t:!Array.isArray(t)||!Array.isArray(i[e][0])||!t.compare(i[e][0]))&&(i[e].unshift(t),r.publish(e,t),o(),i[e].length>2&&(i[e].length=2))}}},function(e,t,n){(function(e){!function(n,r){"use strict";var i={};n.PubSub=i;var o=n.define;!function(e){var t={},n=-1;function r(e){var t;for(t in e)if(e.hasOwnProperty(t))return!0;return!1}function i(e,t,n){try{e(t,n)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function o(e,t,n){e(t,n)}function a(e,n,r,a){var s,l=t[n],p=a?o:i;if(t.hasOwnProperty(n))for(s in l)l.hasOwnProperty(s)&&p(l[s],e,r)}function s(e,n,i,o){var s=function(e,t,n){return function(){var r=String(e),i=r.lastIndexOf(".");for(a(e,e,t,n);-1!==i;)r=r.substr(0,i),i=r.lastIndexOf("."),a(e,r,t,n)}}(e="symbol"==typeof e?e.toString():e,n,o),l=function(e){var n=String(e),i=Boolean(t.hasOwnProperty(n)&&r(t[n])),o=n.lastIndexOf(".");for(;!i&&-1!==o;)n=n.substr(0,o),o=n.lastIndexOf("."),i=Boolean(t.hasOwnProperty(n)&&r(t[n]));return i}(e);return!!l&&(!0===i?s():setTimeout(s,0),!0)}e.publish=function(t,n){return s(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return s(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,r){if("function"!=typeof r)return!1;e="symbol"==typeof e?e.toString():e,t.hasOwnProperty(e)||(t[e]={});var i="uid_"+String(++n);return t[e][i]=r,i},e.subscribeOnce=function(t,n){var r=e.subscribe(t,function(){e.unsubscribe(r),n.apply(this,arguments)});return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)t.hasOwnProperty(n)&&0===n.indexOf(e)&&delete t[n]},e.unsubscribe=function(n){var r,i,o,a="string"==typeof n&&(t.hasOwnProperty(n)||function(e){var n;for(n in t)if(t.hasOwnProperty(n)&&0===n.indexOf(e))return!0;return!1}(n)),s=!a&&"string"==typeof n,l="function"==typeof n,p=!1;if(!a){for(r in t)if(t.hasOwnProperty(r)){if(i=t[r],s&&i[n]){delete i[n],p=n;break}if(l)for(o in i)i.hasOwnProperty(o)&&i[o]===n&&(delete i[o],p=!0)}return p}e.clearSubscriptions(n)}}(i),"function"==typeof o&&o.amd?o(function(){return i}):(void 0!==e&&e.exports&&(t=e.exports=i),t.PubSub=i,e.exports=t=i)}("object"==typeof window&&window||this)}).call(this,n(14)(e))},function(e,t,n){e.exports={compareColor1:"src-components-comparison--compareColor1",compareColor2:"src-components-comparison--compareColor2",chartContainer:"src-components-comparison--chartContainer",chartLabel:"src-components-comparison--chartLabel",chartLabelText:"src-components-comparison--chartLabelText",chartLabel1:"src-components-comparison--chartLabel1",chartLabel2:"src-components-comparison--chartLabel2",barContainer:"src-components-comparison--barContainer",barContainer1:"src-components-comparison--barContainer1",barContainer2:"src-components-comparison--barContainer2",dataLabel:"src-components-comparison--dataLabel"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r};var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),i(t,[{key:"prerender",value:function(){var e=this,n=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.matches=[],this.matches[0]=this.model.data.find(function(t){return t.code===e.data.comparison[0]}),this.matches[1]=this.model.data.find(function(t){return t.code===e.data.comparison[1]}),this.prerendered&&this.rerender,n}},{key:"update",value:function(e,t){this.matches[e]=this.model.data.find(function(e){return e.code===t})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(25)),o=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"prerender",value:function(){var e=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(e.classList.add(i.default.bar,i.default["barColor"+this.data.color]),e.style.transform="translateX("+100*this.placeZero(this.data.field)+"%) scaleX("+this.linearScale(this.data.d,this.data.field)+")",e)}},{key:"linearScale",value:function(e,t){var n=this.model.types.find(function(e){return e.field===t}),r=(e[t]-n.min)/n.spread,i=this.placeZero(t),o=n.crossesZero?0:.01;return o+r*(1-o)-i}},{key:"placeZero",value:function(e){var t=this.model.types.find(function(t){return t.field===e}),n=(0-t.min)/t.spread;return n>0?n:0}},{key:"update",value:function(){console.log("THIS",this),this.el.style.cssText="transform: translateX("+100*this.placeZero(this.data.field)+"%) scaleX("+this.linearScale(this.data.d,this.data.field)+");",console.log(this.el.style.transform)}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatValue=function(e,t){var n,r=this.model.types.find(function(e){return e.field===t}),i=r.type,o=void 0!==r.decimals?r.decimals:"number"===i?1:"currency"===i?2:"percent"===i?1:void 0,a=e[t];switch(i){case"number":n=a.toLocaleString("en-US",{minimumFractionDigits:o});break;case"currency":n=0===o?Math.round(a).toLocaleString("en-US",{style:i,currency:"USD"}).slice(0,-3):a.toLocaleString("en-US",{style:i,currency:"USD"});break;case"percent":n=a.toLocaleString("en-US",{style:i,minimumFractionDigits:o});break;default:n="[unformatted]"+a}return n}},function(e,t,n){var r=n(27),i=n(3),o={};function a(e,t){var n=r(t.toString());return{token:"sub"+r(e+t),fn:n}}e.exports={logSubs:function(){console.log(o)},setSubs:function(e){e.forEach(function(e){var t=e[0],n=e[1],r=a(t,n);if(void 0===o[r.fn]&&(o[r.fn]={}),void 0!==o[r.fn][t])throw"Subscription token is already in use.";o[r.fn][t]=i.subscribe(t,n)})},cancelSub:function(e,t){var n=a(e,t);if(void 0===o[n.fn]||void 0===o[n.fn][e])throw"Subscription does not exist.";i.unsubscribe(o[n.fn][e]),delete o[n.fn][e],0===Object.keys(o[n.fn]).length&&delete o[n.fn]}}},function(e,t,n){"use strict";n.r(t);function r(){}function i(e,t){var n=new r;if(e instanceof r)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var i,o=-1,a=e.length;if(null==t)for(;++o<a;)n.set(o,e[o]);else for(;++o<a;)n.set(t(i=e[o],o,e),i)}else if(e)for(var s in e)n.set(s,e[s]);return n}r.prototype=i.prototype={constructor:r,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var o=i,a=function(){var e,t,n,r=[],i=[];function a(n,i,s,l){if(i>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var p,c,u,d=-1,f=n.length,h=r[i++],m=o(),v=s();++d<f;)(u=m.get(p=h(c=n[d])+""))?u.push(c):m.set(p,[c]);return m.each(function(e,t){l(v,t,a(e,i,s,l))}),v}return n={object:function(e){return a(e,0,s,l)},map:function(e){return a(e,0,p,c)},entries:function(e){return function e(n,o){if(++o>r.length)return n;var a,s=i[o-1];return null!=t&&o>=r.length?a=n.entries():(a=[],n.each(function(t,n){a.push({key:n,values:e(t,o)})})),null!=s?a.sort(function(e,t){return s(e.key,t.key)}):a}(a(e,0,p,c),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return i[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function s(){return{}}function l(e,t,n){e[t]=n}function p(){return o()}function c(e,t,n){e.set(t,n)}function u(){}var d=o.prototype;function f(e,t){var n=new u;if(e instanceof u)e.each(function(e){n.add(e)});else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)n.add(e[r]);else for(;++r<i;)n.add(t(e[r],r,e))}return n}u.prototype=f.prototype={constructor:u,has:d.has,add:function(e){return this["$"+(e+="")]=e,this},remove:d.remove,clear:d.clear,values:d.keys,size:d.size,empty:d.empty,each:d.each};var h=f,m=function(e){var t=[];for(var n in e)t.push(n);return t},v=function(e){var t=[];for(var n in e)t.push(e[n]);return t},b=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t};n.d(t,"nest",function(){return a}),n.d(t,"set",function(){return h}),n.d(t,"map",function(){return o}),n.d(t,"keys",function(){return m}),n.d(t,"values",function(){return v}),n.d(t,"entries",function(){return b})},function(e,t,n){"use strict";(function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.7
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,o=0;o<r.length;o+=1)if(n&&navigator.userAgent.indexOf(r[o])>=0){i=1;break}var a=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},i))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function l(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function p(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=l(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:c(p(e))}var u=n&&!(!window.MSInputMethodContext||!document.documentMode),d=n&&/MSIE 10/.test(navigator.userAgent);function f(e){return 11===e?u:10===e?d:u||d}function h(e){if(!e)return document.documentElement;for(var t=f(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===l(n,"position")?h(n):n:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function v(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,s,l=o.commonAncestorContainer;if(e!==l&&t!==l||r.contains(i))return"BODY"===(s=(a=l).nodeName)||"HTML"!==s&&h(a.firstElementChild)!==a?h(l):l;var p=m(e);return p.host?v(p.host,t):v(e,m(t).host)}function b(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function y(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function g(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],f(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function w(e){var t=e.body,n=e.documentElement,r=f(10)&&getComputedStyle(n);return{height:g("Height",t,n,r),width:g("Width",t,n,r)}}var x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),k=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function C(e){return O({},e,{right:e.left+e.width,bottom:e.top+e.height})}function S(e){var t={};try{if(f(10)){t=e.getBoundingClientRect();var n=b(e,"top"),r=b(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?w(e.ownerDocument):{},a=o.width||e.clientWidth||i.right-i.left,s=o.height||e.clientHeight||i.bottom-i.top,p=e.offsetWidth-a,c=e.offsetHeight-s;if(p||c){var u=l(e);p-=y(u,"x"),c-=y(u,"y"),i.width-=p,i.height-=c}return C(i)}function E(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=f(10),i="HTML"===t.nodeName,o=S(e),a=S(t),s=c(e),p=l(t),u=parseFloat(p.borderTopWidth,10),d=parseFloat(p.borderLeftWidth,10);n&&i&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var h=C({top:o.top-a.top-u,left:o.left-a.left-d,width:o.width,height:o.height});if(h.marginTop=0,h.marginLeft=0,!r&&i){var m=parseFloat(p.marginTop,10),v=parseFloat(p.marginLeft,10);h.top-=u-m,h.bottom-=u-m,h.left-=d-v,h.right-=d-v,h.marginTop=m,h.marginLeft=v}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=b(t,"top"),i=b(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}(h,t)),h}function T(e){if(!e||!e.parentElement||f())return document.documentElement;for(var t=e.parentElement;t&&"none"===l(t,"transform");)t=t.parentElement;return t||document.documentElement}function P(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=i?T(e):v(e,t);if("viewport"===r)o=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=E(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:b(n),s=t?0:b(n,"left");return C({top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:o})}(a,i);else{var s=void 0;"scrollParent"===r?"BODY"===(s=c(p(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===r?e.ownerDocument.documentElement:r;var u=E(s,a,i);if("HTML"!==s.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===l(t,"position"))return!0;var r=p(t);return!!r&&e(r)}(a))o=u;else{var d=w(e.ownerDocument),f=d.height,h=d.width;o.top+=u.top-u.marginTop,o.bottom=f+u.top,o.left+=u.left-u.marginLeft,o.right=h+u.left}}var m="number"==typeof(n=n||0);return o.left+=m?n:n.left||0,o.top+=m?n:n.top||0,o.right-=m?n:n.right||0,o.bottom-=m?n:n.bottom||0,o}function A(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=P(n,r,o,i),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map(function(e){return O({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),p=l.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=p.length>0?p[0].key:l[0].key,u=e.split("-")[1];return c+(u?"-"+u:"")}function L(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return E(n,r?T(t):v(t,n),r)}function j(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function D(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function M(e,t,n){n=n.split("-")[0];var r=j(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",l=o?"height":"width",p=o?"width":"height";return i[a]=t[a]+t[l]/2-r[l]/2,i[s]=n===s?t[s]-r[p]:t[D(s)],i}function I(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function R(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=I(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&s(n)&&(t.offsets.popper=C(t.offsets.popper),t.offsets.reference=C(t.offsets.reference),t=n(t,e))}),t}function B(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function N(e){var t=e.ownerDocument;return t?t.defaultView:window}function F(e,t,n,r){n.updateBound=r,N(e).addEventListener("resize",n.updateBound,{passive:!0});var i=c(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,a=o?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),o||e(c(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function z(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,N(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function q(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function W(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&q(t[n])&&(r="px"),e.style[n]=t[n]+r})}var U=n&&/Firefox/i.test(navigator.userAgent);function Y(e,t,n){var r=I(e,function(e){return e.name===t}),i=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!i){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var X=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],V=X.slice(3);function G(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=V.indexOf(e),r=V.slice(n+1).concat(V.slice(0,n));return t?r.reverse():r}var K={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Z(e,t,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(I(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,p=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(p=p.map(function(e,r){var i=(1===r?!o:o)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return C(s)[t]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(e,i,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){q(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))})}),i}var $={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",p=s?"width":"height",c={start:k({},l,o[l]),end:k({},l,o[l]+o[p]-a[p])};e.offsets.popper=O({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,o=i.popper,a=i.reference,s=r.split("-")[0],l=void 0;return l=q(+n)?[+n,0]:Z(n,o,a,s),"left"===s?(o.top+=l[0],o.left-=l[1]):"right"===s?(o.top+=l[0],o.left+=l[1]):"top"===s?(o.left+=l[0],o.top-=l[1]):"bottom"===s&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||h(e.instance.popper);e.instance.reference===n&&(n=h(n));var r=H("transform"),i=e.instance.popper.style,o=i.top,a=i.left,s=i[r];i.top="",i.left="",i[r]="";var l=P(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);i.top=o,i.left=a,i[r]=s,t.boundaries=l;var p=t.priority,c=e.offsets.popper,u={primary:function(e){var n=c[e];return c[e]<l[e]&&!t.escapeWithReference&&(n=Math.max(c[e],l[e])),k({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>l[e]&&!t.escapeWithReference&&(r=Math.min(c[n],l[e]-("right"===e?c.width:c.height))),k({},n,r)}};return p.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=O({},c,u[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",l=a?"left":"top",p=a?"width":"height";return n[s]<o(r[l])&&(e.offsets.popper[l]=o(r[l])-n[p]),n[l]>o(r[s])&&(e.offsets.popper[l]=o(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!Y(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,a=o.popper,s=o.reference,p=-1!==["left","right"].indexOf(i),c=p?"height":"width",u=p?"Top":"Left",d=u.toLowerCase(),f=p?"left":"top",h=p?"bottom":"right",m=j(r)[c];s[h]-m<a[d]&&(e.offsets.popper[d]-=a[d]-(s[h]-m)),s[d]+m>a[h]&&(e.offsets.popper[d]+=s[d]+m-a[h]),e.offsets.popper=C(e.offsets.popper);var v=s[d]+s[c]/2-m/2,b=l(e.instance.popper),y=parseFloat(b["margin"+u],10),g=parseFloat(b["border"+u+"Width"],10),w=v-e.offsets.popper[d]-y-g;return w=Math.max(Math.min(a[c]-m,w),0),e.arrowElement=r,e.offsets.arrow=(k(n={},d,Math.round(w)),k(n,f,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(B(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=P(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],i=D(r),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case K.FLIP:a=[r,i];break;case K.CLOCKWISE:a=G(r);break;case K.COUNTERCLOCKWISE:a=G(r,!0);break;default:a=t.behavior}return a.forEach(function(s,l){if(r!==s||a.length===l+1)return e;r=e.placement.split("-")[0],i=D(r);var p=e.offsets.popper,c=e.offsets.reference,u=Math.floor,d="left"===r&&u(p.right)>u(c.left)||"right"===r&&u(p.left)<u(c.right)||"top"===r&&u(p.bottom)>u(c.top)||"bottom"===r&&u(p.top)<u(c.bottom),f=u(p.left)<u(n.left),h=u(p.right)>u(n.right),m=u(p.top)<u(n.top),v=u(p.bottom)>u(n.bottom),b="left"===r&&f||"right"===r&&h||"top"===r&&m||"bottom"===r&&v,y=-1!==["top","bottom"].indexOf(r),g=!!t.flipVariations&&(y&&"start"===o&&f||y&&"end"===o&&h||!y&&"start"===o&&m||!y&&"end"===o&&v);(d||b||g)&&(e.flipped=!0,(d||b)&&(r=a[l+1]),g&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=r+(o?"-"+o:""),e.offsets.popper=O({},e.offsets.popper,M(e.instance.popper,e.offsets.reference,e.placement)),e=R(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(s?i[a?"width":"height"]:0),e.placement=D(t),e.offsets.popper=C(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!Y(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=I(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=I(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,s=h(e.instance.popper),l=S(s),p={position:i.position},c=function(e,t){var n=e.offsets,r=n.popper,i=n.reference,o=Math.round,a=Math.floor,s=function(e){return e},l=o(i.width),p=o(r.width),c=-1!==["left","right"].indexOf(e.placement),u=-1!==e.placement.indexOf("-"),d=t?c||u||l%2==p%2?o:a:s,f=t?o:s;return{left:d(l%2==1&&p%2==1&&!u&&t?r.left-1:r.left),top:f(r.top),bottom:f(r.bottom),right:d(r.right)}}(e,window.devicePixelRatio<2||!U),u="bottom"===n?"top":"bottom",d="right"===r?"left":"right",f=H("transform"),m=void 0,v=void 0;if(v="bottom"===u?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-l.height+c.bottom:c.top,m="right"===d?"HTML"===s.nodeName?-s.clientWidth+c.right:-l.width+c.right:c.left,a&&f)p[f]="translate3d("+m+"px, "+v+"px, 0)",p[u]=0,p[d]=0,p.willChange="transform";else{var b="bottom"===u?-1:1,y="right"===d?-1:1;p[u]=v*b,p[d]=m*y,p.willChange=u+", "+d}var g={"x-placement":e.placement};return e.attributes=O({},g,e.attributes),e.styles=O({},p,e.styles),e.arrowStyles=O({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return W(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&W(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var o=L(i,t,e,n.positionFixed),a=A(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),W(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},J=function(){function e(t,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=a(this.update.bind(this)),this.options=O({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(O({},e.Defaults.modifiers,i.modifiers)).forEach(function(t){r.options.modifiers[t]=O({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return O({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return _(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=L(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=A(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=M(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=R(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,B(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return z.call(this)}}]),e}();J.Utils=("undefined"!=typeof window?window:e).PopperUtils,J.placements=X,J.Defaults=$,t.a=J}).call(this,n(29))},function(e,t,n){"use strict";n(1);var r,i=n(12),o=(r=i)&&r.__esModule?r:{default:r};n(50);var a=new o.default("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&a.prerender(),a.init()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(9)),o=b(n(13)),a=n(2),s=n(1),l=b(n(15)),p=b(n(16)),c=b(n(17)),u=b(n(18)),d=b(n(19)),f=b(n(30)),h=b(n(46)),m=b(n(48)),v=b(n(49));function b(e){return e&&e.__esModule?e:{default:e}}function y(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(0,s.publishWindowResize)(a.stateModule);var g={groups:p.default,types:c.default,dict:u.default},w=[];function x(){var e=this;return new Promise(function(t,n){var r=e.el;o.default.parse(""+l.default,{download:!0,dynamicTyping:!0,header:!0,fastMode:!0,skipEmptyLines:!0,beforeFirstChunk:function(e){var t=e.hashCode();window.IS_PRERENDERING?r.setAttribute("data-data-hash",t):t.toString()!==r.getAttribute("data-data-hash")&&(r.setAttribute("data-data-mismatch",!0),console.log("data mismatch"),g.isMismatched=!0)},complete:function(n){w.length=0;var r=n.data;g.data=r,g.types.forEach(function(e){if("text"!==e.type){var t=r.map(function(t){return t[e.field]}).filter(function(e){return null!==e});e.max=Math.max.apply(Math,y(t)),e.min=Math.min.apply(Math,y(t)),e.spread=e.max-e.min,e.crossesZero=e.max*e.min<=0}}),g.typesNested=i.nest().key(function(e){return e.group}).entries(g.types),console.log(g),w.push(e.createComponent(g,d.default,"div#comparison-view",{renderToSelector:"#section-comparison .js-inner-content",rerenderOnDataMismatch:!0,parent:e}),e.createComponent(g,f.default,"div#fifty-state-view",{renderToSelector:"#section-states .js-inner-content",rerenderOnDataMismatch:!0,parent:e})),t(!0)},error:function(e){n(e)}})})}var _=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,h.default),r(t,[{key:"prerender",value:function(){console.log("prerender"),this.el.insertAdjacentHTML("beforeend",m.default),this.el.insertAdjacentHTML("beforeend",v.default),x.call(this).then(function(){console.log(g),w.forEach(function(e){e.container.appendChild(e.el)})})}},{key:"init",value:function(){var e=this;console.log("init"),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this),this.attachSectionOpenClose(),this.initStaticAnchorLinks(),x.call(this).then(function(){w.forEach(function(t){t.init(e)})})}},{key:"initStaticAnchorLinks",value:function(){document.querySelectorAll(".pct-static-anchor").forEach(function(e){var t=document.querySelector("#"+e.href.split("#")[1]);e.addEventListener("click",function(e){e.preventDefault(),t.scrollIntoView({behavior:"smooth"})})})}},{key:"attachSectionOpenClose",value:function(){function e(){console.log(this.parentNode),this.parentNode.querySelector(".js-inner-content").classList.toggle("pct-hide"),this.classList.toggle("pct-is-closed"),this.blur()}document.querySelectorAll("#pew-app section > h2").forEach(function(t){t.addEventListener("click",e),t.addEventListener("keyup",function(t){13===t.keyCode&&e.call(this)})})}}]),t}();t.default=_},function(e,t,n){var r,i,o;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),i=[],void 0===(o="function"==typeof(r=function(){"use strict";var e,t,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},r=!n.document&&!!n.postMessage,i=r&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),o=!1,a={},s=0,l={parse:function(t,r){var i=(r=r||{}).dynamicTyping||!1;if(k(i)&&(r.dynamicTypingFunction=i,i={}),r.dynamicTyping=i,r.transform=!!k(r.transform)&&r.transform,r.worker&&l.WORKERS_SUPPORTED){var p=function(){if(!l.WORKERS_SUPPORTED)return!1;if(!o&&null===l.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var t=l.SCRIPT_PATH||e;t+=(-1!==t.indexOf("?")?"&":"?")+"papaworker";var r=new n.Worker(t);return r.onmessage=y,r.id=s++,a[r.id]=r}();return p.userStep=r.step,p.userChunk=r.chunk,p.userComplete=r.complete,p.userError=r.error,r.step=k(r.step),r.chunk=k(r.chunk),r.complete=k(r.complete),r.error=k(r.error),delete r.worker,void p.postMessage({input:t,config:r,workerId:p.id})}var c=null;return l.NODE_STREAM_INPUT,"string"==typeof t?c=r.download?new u(r):new f(r):!0===t.readable&&k(t.read)&&k(t.on)?c=new h(r):(n.File&&t instanceof File||t instanceof Object)&&(c=new d(r)),c.stream(t)},unparse:function(e,t){var n=!1,r=!0,i=",",o="\r\n",a='"',s=!1;"object"==typeof t&&("string"!=typeof t.delimiter||l.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(i=t.delimiter),("boolean"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(s=t.skipEmptyLines),"string"==typeof t.newline&&(o=t.newline),"string"==typeof t.quoteChar&&(a=t.quoteChar),"boolean"==typeof t.header&&(r=t.header));var p=new RegExp(v(a),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,s);if("object"==typeof e[0])return u(c(e[0]),e,s)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:c(e.data[0])),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],s);throw"exception: Unable to serialize unrecognized input";function c(e){if("object"!=typeof e)return[];var t=[];for(var n in e)t.push(n);return t}function u(e,t,n){var a="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var s=Array.isArray(e)&&0<e.length,l=!Array.isArray(t[0]);if(s&&r){for(var p=0;p<e.length;p++)0<p&&(a+=i),a+=d(e[p],p);0<t.length&&(a+=o)}for(var c=0;c<t.length;c++){var u=s?e.length:t[c].length,f=!1,h=s?0===Object.keys(t[c]).length:0===t[c].length;if(n&&!s&&(f="greedy"===n?""===t[c].join("").trim():1===t[c].length&&0===t[c][0].length),"greedy"===n&&s){for(var m=[],v=0;v<u;v++){var b=l?e[v]:v;m.push(t[c][b])}f=""===m.join("").trim()}if(!f){for(var y=0;y<u;y++){0<y&&!h&&(a+=i);var g=s&&l?e[y]:y;a+=d(t[c][g],y)}c<t.length-1&&(!n||0<u&&!h)&&(a+=o)}}return a}function d(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);e=e.toString().replace(p,a+a);var r="boolean"==typeof n&&n||Array.isArray(n)&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(-1<e.indexOf(t[n]))return!0;return!1}(e,l.BAD_DELIMITERS)||-1<e.indexOf(i)||" "===e.charAt(0)||" "===e.charAt(e.length-1);return r?a+e+a:e}}};if(l.RECORD_SEP=String.fromCharCode(30),l.UNIT_SEP=String.fromCharCode(31),l.BYTE_ORDER_MARK="\ufeff",l.BAD_DELIMITERS=["\r","\n",'"',l.BYTE_ORDER_MARK],l.WORKERS_SUPPORTED=!r&&!!n.Worker,l.SCRIPT_PATH=null,l.NODE_STREAM_INPUT=1,l.LocalChunkSize=10485760,l.RemoteChunkSize=5242880,l.DefaultDelimiter=",",l.Parser=b,l.ParserHandle=m,l.NetworkStreamer=u,l.FileStreamer=d,l.StringStreamer=f,l.ReadableStreamStreamer=h,n.jQuery){var p=n.jQuery;p.fn.parse=function(e){var t=e.config||{},r=[];return this.each(function(e){if("INPUT"!==p(this).prop("tagName").toUpperCase()||"file"!==p(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var i=0;i<this.files.length;i++)r.push({file:this.files[i],inputElem:this,instanceConfig:p.extend({},t)})}),i(),this;function i(){if(0!==r.length){var t,n,i,a=r[0];if(k(e.before)){var s=e.before(a.file,a.inputElem);if("object"==typeof s){if("abort"===s.action)return t=a.file,n=a.inputElem,i=s.reason,void(k(e.error)&&e.error({name:"AbortError"},t,n,i));if("skip"===s.action)return void o();"object"==typeof s.config&&(a.instanceConfig=p.extend(a.instanceConfig,s.config))}else if("skip"===s)return void o()}var c=a.instanceConfig.complete;a.instanceConfig.complete=function(e){k(c)&&c(e,a.file,a.inputElem),o()},l.parse(a.file,a.instanceConfig)}else k(e.complete)&&e.complete()}function o(){r.splice(0,1),i()}}}function c(e){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=x(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new m(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&k(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1;var o=this._partialLine+e;this._partialLine="";var a=this._handle.parse(o,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=a.meta.cursor;this._finished||(this._partialLine=o.substring(s-this._baseIndex),this._baseIndex=s),a&&a.data&&(this._rowCount+=a.data.length);var p=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(i)n.postMessage({results:a,workerId:l.WORKER_ID,finished:p});else if(k(this._config.chunk)&&!t){if(this._config.chunk(a,this._handle),this._handle.paused()||this._handle.aborted())return;a=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(a.data),this._completeResults.errors=this._completeResults.errors.concat(a.errors),this._completeResults.meta=a.meta),this._completed||!p||!k(this._config.complete)||a&&a.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),p||a&&a.meta.paused||this._nextChunk(),a}},this._sendError=function(e){k(this._config.error)?this._config.error(e):i&&this._config.error&&n.postMessage({workerId:l.WORKER_ID,error:e,finished:!1})}}function u(e){var t;(e=e||{}).chunkSize||(e.chunkSize=l.RemoteChunkSize),c.call(this,e),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),r||(t.onload=_(this._chunkLoaded,this),t.onerror=_(this._chunkError,this)),t.open("GET",this._input,!r),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var n in e)t.setRequestHeader(n,e[n])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+i),t.setRequestHeader("If-None-Match","webkit-no-cache")}try{t.send()}catch(e){this._chunkError(e.message)}r&&0===t.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var e;4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(e=t.getResponseHeader("Content-Range"))?-1:parseInt(e.substr(e.lastIndexOf("/")+1))),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(new Error(n))}}function d(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=l.LocalChunkSize),c.call(this,e);var r="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,r?((t=new FileReader).onload=_(this._chunkLoaded,this),t.onerror=_(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var i=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,i)}var o=t.readAsText(e,this._config.encoding);r||this._chunkLoaded({target:{result:o}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function f(e){var t;c.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,n=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(n)}}}function h(e){c.call(this,e=e||{});var t=[],n=!0,r=!1;this.pause=function(){c.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){c.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):n=!0},this._streamData=_(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=_(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=_(function(){this._streamCleanUp(),r=!0,this._streamData("")},this),this._streamCleanUp=_(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function m(e){var t,n,r,i=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,o=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,a=this,s=0,p=0,c=!1,u=!1,d=[],f={data:[],errors:[],meta:{}};if(k(e.step)){var h=e.step;e.step=function(t){if(f=t,g())y();else{if(y(),0===f.data.length)return;s+=t.data.length,e.preview&&s>e.preview?n.abort():h(f,a)}}}function m(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function y(){if(f&&r&&(_("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+l.DefaultDelimiter+"'"),r=!1),e.skipEmptyLines)for(var t=0;t<f.data.length;t++)m(f.data[t])&&f.data.splice(t--,1);return g()&&function(){if(f){for(var t=0;g()&&t<f.data.length;t++)for(var n=0;n<f.data[t].length;n++){var r=f.data[t][n];e.trimHeaders&&(r=r.trim()),d.push(r)}f.data.splice(0,1)}}(),function(){if(!f||!e.header&&!e.dynamicTyping&&!e.transform)return f;for(var t=0;t<f.data.length;t++){var n,r=e.header?{}:[];for(n=0;n<f.data[t].length;n++){var i=n,o=f.data[t][n];e.header&&(i=n>=d.length?"__parsed_extra":d[n]),e.transform&&(o=e.transform(o,i)),o=w(i,o),"__parsed_extra"===i?(r[i]=r[i]||[],r[i].push(o)):r[i]=o}f.data[t]=r,e.header&&(n>d.length?_("FieldMismatch","TooManyFields","Too many fields: expected "+d.length+" fields but parsed "+n,p+t):n<d.length&&_("FieldMismatch","TooFewFields","Too few fields: expected "+d.length+" fields but parsed "+n,p+t))}return e.header&&f.meta&&(f.meta.fields=d),p+=f.data.length,f}()}function g(){return e.header&&0===d.length}function w(t,n){return r=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[r]&&(e.dynamicTyping[r]=e.dynamicTypingFunction(r)),!0===(e.dynamicTyping[r]||e.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(i.test(n)?parseFloat(n):o.test(n)?new Date(n):""===n?null:n):n;var r}function _(e,t,n,r){f.errors.push({type:e,code:t,message:n,row:r})}this.parse=function(i,o,a){var s=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substr(0,1048576);var n=new RegExp(v(t)+"([^]*?)"+v(t),"gm"),r=(e=e.replace(n,"")).split("\r"),i=e.split("\n"),o=1<i.length&&i[0].length<r[0].length;if(1===r.length||o)return"\n";for(var a=0,s=0;s<r.length;s++)"\n"===r[s][0]&&a++;return a>=r.length/2?"\r\n":"\r"}(i,s)),r=!1,e.delimiter)k(e.delimiter)&&(e.delimiter=e.delimiter(i),f.meta.delimiter=e.delimiter);else{var p=function(t,n,r,i){for(var o,a,s,p=[",","\t","|",";",l.RECORD_SEP,l.UNIT_SEP],c=0;c<p.length;c++){var u=p[c],d=0,f=0,h=0;s=void 0;for(var v=new b({comments:i,delimiter:u,newline:n,preview:10}).parse(t),y=0;y<v.data.length;y++)if(r&&m(v.data[y]))h++;else{var g=v.data[y].length;f+=g,void 0!==s?1<g&&(d+=Math.abs(g-s),s=g):s=0}0<v.data.length&&(f/=v.data.length-h),(void 0===a||a<d)&&1.99<f&&(a=d,o=u)}return{successful:!!(e.delimiter=o),bestDelimiter:o}}(i,e.newline,e.skipEmptyLines,e.comments);p.successful?e.delimiter=p.bestDelimiter:(r=!0,e.delimiter=l.DefaultDelimiter),f.meta.delimiter=e.delimiter}var u=x(e);return e.preview&&e.header&&u.preview++,t=i,n=new b(u),f=n.parse(t,o,a),y(),c?{meta:{paused:!0}}:f||{meta:{paused:!1}}},this.paused=function(){return c},this.pause=function(){c=!0,n.abort(),t=t.substr(n.getCharIndex())},this.resume=function(){c=!1,a.streamer.parseChunk(t,!0)},this.aborted=function(){return u},this.abort=function(){u=!0,n.abort(),f.meta.aborted=!0,k(e.complete)&&e.complete(f),t=""}}function v(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function b(e){var t,n=(e=e||{}).delimiter,r=e.newline,i=e.comments,o=e.step,a=e.preview,s=e.fastMode,p=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(p=e.escapeChar),("string"!=typeof n||-1<l.BAD_DELIMITERS.indexOf(n))&&(n=","),i===n)throw"Comment character same as delimiter";!0===i?i="#":("string"!=typeof i||-1<l.BAD_DELIMITERS.indexOf(i))&&(i=!1),"\n"!==r&&"\r"!==r&&"\r\n"!==r&&(r="\n");var c=0,u=!1;this.parse=function(e,l,d){if("string"!=typeof e)throw"Input must be a string";var f=e.length,h=n.length,m=r.length,b=i.length,y=k(o),g=[],w=[],x=[],_=c=0;if(!e)return R();if(s||!1!==s&&-1===e.indexOf(t)){for(var O=e.split(r),C=0;C<O.length;C++){if(x=O[C],c+=x.length,C!==O.length-1)c+=r.length;else if(d)return R();if(!i||x.substr(0,b)!==i){if(y){if(g=[],j(x.split(n)),B(),u)return R()}else j(x.split(n));if(a&&a<=C)return g=g.slice(0,a),R(!0)}}return R()}for(var S,E=e.indexOf(n,c),T=e.indexOf(r,c),P=new RegExp(v(p)+v(t),"g");;)if(e[c]!==t)if(i&&0===x.length&&e.substr(c,b)===i){if(-1===T)return R();c=T+m,T=e.indexOf(r,c),E=e.indexOf(n,c)}else if(-1!==E&&(E<T||-1===T))x.push(e.substring(c,E)),c=E+h,E=e.indexOf(n,c);else{if(-1===T)break;if(x.push(e.substring(c,T)),I(T+m),y&&(B(),u))return R();if(a&&g.length>=a)return R(!0)}else for(S=c,c++;;){if(-1===(S=e.indexOf(t,S+1)))return d||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:g.length,index:c}),M();if(S===f-1)return M(e.substring(c,S).replace(P,t));if(t!==p||e[S+1]!==p){if(t===p||0===S||e[S-1]!==p){var A=D(-1===T?E:Math.min(E,T));if(e[S+1+A]===n){x.push(e.substring(c,S).replace(P,t)),c=S+1+A+h,E=e.indexOf(n,c),T=e.indexOf(r,c);break}var L=D(T);if(e.substr(S+1+L,m)===r){if(x.push(e.substring(c,S).replace(P,t)),I(S+1+L+m),E=e.indexOf(n,c),y&&(B(),u))return R();if(a&&g.length>=a)return R(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:g.length,index:c}),S++}}else S++}return M();function j(e){g.push(e),_=c}function D(t){var n=0;if(-1!==t){var r=e.substring(S+1,t);r&&""===r.trim()&&(n=r.length)}return n}function M(t){return d||(void 0===t&&(t=e.substr(c)),x.push(t),c=f,j(x),y&&B()),R()}function I(t){c=t,j(x),x=[],T=e.indexOf(r,c)}function R(e){return{data:g,errors:w,meta:{delimiter:n,linebreak:r,aborted:u,truncated:!!e,cursor:_+(l||0)}}}function B(){o(R()),g=[],w=[]}},this.abort=function(){u=!0},this.getCharIndex=function(){return c}}function y(e){var t=e.data,n=a[t.workerId],r=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var i={abort:function(){r=!0,g(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(k(n.userStep)){for(var o=0;o<t.results.data.length&&(n.userStep({data:[t.results.data[o]],errors:t.results.errors,meta:t.results.meta},i),!r);o++);delete t.results}else k(n.userChunk)&&(n.userChunk(t.results,i,t.file),delete t.results)}t.finished&&!r&&g(t.workerId,t.results)}function g(e,t){var n=a[e];k(n.userComplete)&&n.userComplete(t),n.terminate(),delete a[e]}function w(){throw"Not implemented."}function x(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var n in e)t[n]=x(e[n]);return t}function _(e,t){return function(){e.apply(t,arguments)}}function k(e){return"function"==typeof e}return i?n.onmessage=function(e){var t=e.data;if(void 0===l.WORKER_ID&&t&&(l.WORKER_ID=t.workerId),"string"==typeof t.input)n.postMessage({workerId:l.WORKER_ID,results:l.parse(t.input,t.config),finished:!0});else if(n.File&&t.input instanceof File||t.input instanceof Object){var r=l.parse(t.input,t.config);r&&n.postMessage({workerId:l.WORKER_ID,results:r,finished:!0})}}:l.WORKERS_SUPPORTED&&(t=document.getElementsByTagName("script"),e=t.length?t[t.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){o=!0},!0):o=!0),(u.prototype=Object.create(c.prototype)).constructor=u,(d.prototype=Object.create(c.prototype)).constructor=d,(f.prototype=Object.create(f.prototype)).constructor=f,(h.prototype=Object.create(c.prototype)).constructor=h,l})?r.apply(t,i):r)||(e.exports=o)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){e.exports=n.p+"data/data.csv?v=0bf4a1"},function(e){e.exports=["Borrowing Practices","Fiscal Conditions and Infrastructure Needs","Debt Levels","Credit Rating"]},function(e){e.exports=[{field:"debt_limit_type",type:"text",group:1,order:1,label:"General Obligation Debt Limit Type",tooltip:"The kind of limit the state has on GO borrowing, one of the most common types of debt issued by states. These limits affect how states borrow."},{field:"centralization",type:"percent",group:1,order:2,label:"Centralization",tooltip:"The degree to which borrowing is done by the state itself rather than by a component unit—a legally separate entity such as a housing or turnpike authority. Higher values mean the state is more centralized."},{field:"state_local_division",type:"percent",group:1,order:3,label:"State-Local Borrowing Division",tooltip:"The share of combined state and local debt issued by local governments. States where local governments borrow less tend to have higher debt levels."},{field:"revenue_volatility",type:"number",group:2,order:1,label:"Revenue Volatility",tooltip:"A measure of variation in tax collections. Low scores mean that revenue levels are similar from year to year, while high scores indicate that revenue varies more. More volatile states should plan for greater uncertainty."},{field:"ten_year_pop_growth",type:"percent",group:2,order:2,label:"Population Growth",tooltip:"The 10-year population growth rate from 2008 to 2017. Growing populations are associated with greater infrastructure investment."},{field:"debt_per_capita",type:"currency",decimals:0,group:3,order:1,label:"Debt per Capita",tooltip:"Total debt relative to a state’s population."},{field:"debt_percent_SPI",type:"percent",group:3,order:2,label:"Debt as a Percentage of SPI",tooltip:"Total debt relative to state personal income, a measure of economic resources.",isDefaultSelection:!0},{field:"credit2015",type:"text",group:4,order:1,label:2015,tooltip:"Standard & Poor’s general obligation credit rating."},{field:"credit2018",type:"text",group:4,order:2,label:2018,tooltip:"Standard & Poor’s general obligation credit rating."},{field:"census",type:"text",group:null,order:null,label:"Census region and division",tooltip:null}]},function(e){e.exports={census:["N/A","Northeast—New England","Northeast—Middle Atlantic","Midwest—East North Central","Midwest—West North Central","South—South Atlantic","South—East South Central","South—West South Central","West—Mountain","West—Pacific"],credit2018:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"],credit2015:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=d(n(0));n(20);var o=d(n(21));n(22);var a=n(2),s=d(n(23)),l=d(n(24)),p=d(n(26)),c=d(n(8)),u=d(n(28));function d(e){return e&&e.__esModule?e:{default:e}}var f=["US","AL"],h=0,m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,[{key:"prerender",value:function(){var e,n=this;this.comparisons=[],this.model.groups.forEach(function(e,t){n.model.typesNested[t].values.forEach(function(e){var t;t="text"===e.type?n.parent.createComponent(n.model,s.default,"div.js-text-compare-"+e.field,{rerenderOnDataMismatch:!0,parent:n,data:{comparison:f,field:e.field}}):n.parent.createComponent(n.model,l.default,"div.js-text-compare-"+e.field,{rerenderOnDataMismatch:!0,parent:n,data:{comparison:f,field:e.field}}),n.comparisons.push(t)})}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.comparisons));var r=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.prerendered&&!this.rerender)return r;var i=0;return this.model.groups.forEach(function(e,t){var a=document.createElement("div");a.classList.add(o.default[e.cleanString()]),a.insertAdjacentHTML("afterbegin",'<h3 class="'+o.default.groupHeader+'">'+e+"</h3>");var s=document.createElement("div");s.classList.add(o.default.typeContainer,o.default[e.cleanString()]),n.model.typesNested[t].values.forEach(function(e){var t=document.createElement("div");t.classList.add(o.default.typeDiv,o.default[e.field]),t.insertAdjacentHTML("afterbegin",'<h4 class="'+o.default.typeHeader+" "+(e.tooltip?o.default.withTooltip:"withoutTooltip")+'" data-field="'+e.field+'" data-content="'+(e.tooltip?e.tooltip:"")+'">'+e.label+"</h4>"),t.appendChild(n.comparisons[i].el),i++,s.appendChild(t)}),a.appendChild(s),r.appendChild(a)}),r}},{key:"init",value:function(){var e=this;this.initializeAutocompletes(),this.initializeTooltips(),c.default.setSubs([["compare",function(t,n){e.update(t,n)}]])}},{key:"initializeTooltips",value:function(){var e=document.querySelectorAll("."+o.default.withTooltip);function t(){window.scrollTo({top:h,behavior:"smooth"}),this.removeEventListener("click",t),this.classList.remove(o.default.showGoBack)}(0,u.default)(e,{interactive:!0,content:function(e){var n,r,i=document.createElement("div");return i.textContent=e.dataset.content+" ",i.appendChild((n=e.dataset.field,r=document.createElement("a"),"credit2015"!==n&&"credit2018"!==n||(n="credit_rating"),r.innerText="more",r.href="#"+n,r.addEventListener("click",function(e){e.preventDefault(),h=window.pageYOffset;var r=document.querySelector(".js-"+n);r.scrollIntoView({behavior:"smooth",block:"center"}),document.querySelectorAll("."+o.default.showGoBack).forEach(function(e){e.classList.remove(o.default.showGoBack)}),r.classList.add(o.default.showGoBack),r.addEventListener("click",t)}),r)),i}})}},{key:"update",value:function(e,t){console.log(this),this.comparisons.forEach(function(n){n.update(e,t)})}},{key:"initializeAutocompletes",value:function(){var e=this,t=this.model.data.map(function(e){return{state:e.state,code:e.code}}),n=[!1,!1];function r(e){console.log(this,e),"mouseenter"===e.type&&this.focus(),"click"===e.type&&(console.log(this.parentNode.parentNode),this.parentNode.parentNode.focus())}function i(e){var r=a.stateModule.getState("compare."+e)||f[e],i=this.parentNode.querySelectorAll(".autoComplete_results_list li");console.log(r),this.value=t.find(function(e){return e.code===r}).state,i[0]&&(i[0].parentNode.innerHTML=""),n[e]=!1}[0,1].forEach(function(s){var l=document.querySelector("#compare-input-"+s),c=document.querySelector("#autoComplete_wrapper-"+s);l.addEventListener("click",function(e){e.stopPropagation()}),document.body.addEventListener("click",function(){console.log(n),n[s]&&i.call(l,s)}),l.classList.add("autoComplete",o.default["autoComplete"+s]),c.classList.add(o.default["autoComplete_wrapper-"+s]),l.addEventListener("keyup",function(){n[s]=!0,this.parentNode.querySelectorAll(".autoComplete_results_list li").forEach(function(e){console.log(e),e.addEventListener("mouseenter",r),e.addEventListener("mouseleave",r)})}),l.addEventListener("keydown",function(e){var r=this;console.log(e,this);var o=this.parentNode.querySelectorAll(".autoComplete_results_list li");9===e.keyCode&&1===o.length&&(this.value!==o[0].dataset.result?(e.preventDefault(),this.value=o[0].dataset.result):i.call(this,s)),9===e.keyCode&&(o.length>1||0===o.length)&&i.call(this,s),13===e.keyCode&&1===o.length&&(this.value=o[0].dataset.result,a.stateModule.setState("compare."+s,t.find(function(e){return e.state===r.value}).code),o[0].parentNode.innerHTML="",n[s]=!1)}),e.children.push(new p.default({data:{src:t,key:"state"},highlight:!0,onSelection:function(t){console.log(t,e),a.stateModule.setState("compare."+s,t.selection.code),l.value=t.selection.state,l.focus(),n[s]=!1},placeHolder:"Select state",resultsList:{container:function(){return"autoComplete_results_list"},destination:document.querySelector("#compare-input-"+s),position:"afterend"},searchEngine:"strict",selector:"#compare-input-"+s,threshold:2})),function(e){var t=document.querySelector("#autoComplete_wrapper-"+e+" .autoComplete_results_list");new MutationObserver(function(e,t){console.log(e,t),e.forEach(function(e){e.addedNodes.forEach(function(e){e.addEventListener("mouseenter",r),e.setAttribute("tabindex",0)})})}).observe(t,{attributes:!1,childList:!0,subtree:!1})}(s),l.setAttribute("value",e.model.data.find(function(e){return e.code===f[s]}).state),console.log(e.children)})}}]),t}();t.default=m},function(e,t,n){e.exports={autoComplete_wrapper:"autoComplete_wrapper",autoComplete:"autoComplete",autoComplete_results_list:"autoComplete_results_list",autoComplete_result:"autoComplete_result",autoComplete_highlighted:"autoComplete_highlighted"}},function(e,t,n){e.exports={groupHeader:"src-views-state-comparison--groupHeader",typeContainer:"src-views-state-comparison--typeContainer","credit-rating":"src-views-state-comparison--credit-rating",typeDiv:"src-views-state-comparison--typeDiv",typeHeader:"src-views-state-comparison--typeHeader",debt_limit_type:"src-views-state-comparison--debt_limit_type",credit2015:"src-views-state-comparison--credit2015",credit2018:"src-views-state-comparison--credit2018",autoComplete0:"src-views-state-comparison--autoComplete0","autoComplete_wrapper-0":"src-views-state-comparison--autoComplete_wrapper-0",autoComplete1:"src-views-state-comparison--autoComplete1","autoComplete_wrapper-1":"src-views-state-comparison--autoComplete_wrapper-1",withTooltip:"src-views-state-comparison--withTooltip",showGoBack:"src-views-state-comparison--showGoBack"}},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=s(n(4)),a=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(console.log(this.model.dict,this.data.field),e.innerHTML=this.returnTemplate(0)+this.returnTemplate(1),e)}},{key:"update",value:function(e,n){var r=parseInt(e.split(".")[1]);console.log(r),i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"update",this).call(this,r,n),console.log(this,r),this.el.children[r].fadeInContent(this.returnTemplate(r))}},{key:"returnTemplate",value:function(e){return'<p class="'+o.default.chartLabel+" "+o.default.chartLabelText+'">'+this.matches[e].state+': <span class="'+o.default["compareColor"+(e+1)]+'">'+(void 0!==this.model.dict[this.data.field]?this.model.dict[this.data.field][[this.matches[e][this.data.field]]]:this.matches[e][this.data.field])+"</span></p>"}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=p(n(4)),a=p(n(5)),s=p(n(6)),l=n(7);function p(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.bars=[],[0,1].forEach(function(e){n.bars.push(n.parent.parent.createComponent(n.model,s.default,"div.js-bar-compare-"+n.data.field+"-"+e,{parent:n,data:{d:n.matches[e],field:n.data.field,color:e+1}}))}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.bars)),this.prerendered&&!this.rerender?r:(r.innerHTML=this.returnTemplate(),r)}},{key:"returnTemplate",value:function(){return' \n                        <div class="'+o.default.chartContainer+'">\n                            '+this.partialTemplate(0)+"\n                            "+this.partialTemplate(1)+"\n                        </div>\n                       "}},{key:"returnTranslateValue",value:function(e){var t=this;return this.bars[e].data.d[this.bars[e].data.field]<0&&this.model.types.find(function(n){return n.field===t.bars[e].data.field}).crossesZero?(100*this.bars[e].placeZero(this.bars[e].data.field)).toFixed(1)+"%":(100*(this.bars[e].linearScale(this.matches[e],this.data.field)+this.bars[e].placeZero(this.bars[e].data.field))).toFixed(1)+"%"}},{key:"partialTemplate",value:function(e){return'\n                <p class="'+o.default.chartLabel+" "+o.default["chartLabel"+(e+1)]+'">\n                    '+this.matches[e].state+'\n                </p>\n                <div class="'+o.default.barContainer+" "+o.default["barContainer"+(e+1)]+'">\n                    '+this.bars[e].el.outerHTML+'                        \n                    <div class="'+o.default.dataLabel+'" style="transform: translateX('+this.returnTranslateValue.call(this,e)+')">\n                        '+this.formatValue(this.matches[e],this.data.field).replace("-","–")+"\n                    </div>\n                </div>\n        "}},{key:"linearScale",value:function(e,t){var n=this.model.types.find(function(e){return e.field===t});return(e[t]-n.min)/n.spread}},{key:"formatValue",value:function(){return l.formatValue.apply(this,arguments)}},{key:"update",value:function(e,n){console.log(e,n);var r=parseInt(e.split(".")[1]),a=this.el.querySelectorAll("."+o.default.dataLabel)[r];i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"update",this).call(this,r,n),console.log(this),this.el.querySelectorAll("."+o.default.chartLabel)[r].fadeInContent(this.matches[r].state),this.children[r].data.d=this.matches[r],this.children[r].update(r),console.log("HERE—",this.children[r].data.d),a.fadeInContent(this.formatValue(this.matches[r],this.data.field).replace("-","–")),a.style.transform="translateX("+this.returnTranslateValue.call(this,r)+")"}}]),t}();t.default=c},function(e,t,n){e.exports={bar:"src-components-bar--bar",barColor1:"src-components-bar--barColor1",barColor2:"src-components-bar--barColor2"}},function(e,t,n){e.exports=function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t={resultsList:"autoComplete_results_list",result:"autoComplete_result",highlight:"autoComplete_highlighted"},n=function(e){return"string"==typeof e?document.querySelector(e):e()},r=function(e){return e.innerHTML=""},i={getInput:n,createResultsList:function(e){var n=document.createElement("ul");return e.container&&(t.resultsList=e.container(n)||t.resultsList),n.classList.add(t.resultsList),e.destination.insertAdjacentElement(e.position,n),n},highlight:function(e){return"<span class=".concat(t.highlight,">").concat(e,"</span>")},addResultsToList:function(e,n,r,i){n.forEach(function(o,a){var s=document.createElement("li"),l=n[a].source[r]||n[a].source;s.setAttribute("data-result",l),s.setAttribute("class",t.result),s.setAttribute("tabindex","1"),s.innerHTML=i?i(o,s):o.match||o,e.appendChild(s)})},navigation:function(e,t){var r=n(e),i=t.firstChild;document.onkeydown=function(e){var n=document.activeElement;switch(e.keyCode){case 38:n!==i&&n!==r?n.previousSibling.focus():n===i&&r.focus();break;case 40:n===r&&t.childNodes.length>0?i.focus():n!==t.lastChild&&n.nextSibling.focus()}}},clearResults:r,getSelection:function(e,i,o,a,s){var l=i.querySelectorAll(".".concat(t.result));Object.keys(l).forEach(function(p){["mousedown","keydown"].forEach(function(c){l[p].addEventListener(c,function(l){"mousedown"!==c&&13!==l.keyCode||(o({event:l,query:n(e).value,results:a.map(function(e){return e.source}),selection:a.find(function(e){var n=e.source[s]||e.source;return n===l.target.closest(".".concat(t.result)).getAttribute("data-result")}).source}),r(i))})})})}};return function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.selector=e.selector||"#autoComplete",this.data={src:function(){return"function"==typeof e.data.src?e.data.src():e.data.src},key:e.data.key},this.searchEngine="loose"===e.searchEngine?"loose":"strict",this.threshold=e.threshold||0,this.resultsList=i.createResultsList({container:!(!e.resultsList||!e.resultsList.container)&&e.resultsList.container,destination:e.resultsList&&e.resultsList.destination?e.resultsList.destination:i.getInput(this.selector),position:e.resultsList&&e.resultsList.position?e.resultsList.position:"afterend"}),this.placeHolder=e.placeHolder,this.maxResults=e.maxResults||5,this.resultItem=e.resultItem,this.highlight=e.highlight||!1,this.onSelection=e.onSelection,this.init()}return n=t,(r=[{key:"search",value:function(e,t){var n=this.highlight,r=t.toLowerCase();if("loose"===this.searchEngine){e=e.replace(/ /g,"");for(var o=[],a=0,s=0;s<r.length;s++){var l=r[s];a<e.length&&l===e[a]&&(l=n?i.highlight(l):l,a++),o.push(l)}return a===e.length&&o.join("")}if(console.log(r),r.includes(e)){if(n){var p=i.getInput(this.selector).value.toLowerCase();return r.replace(p,i.highlight(p))}return r}}},{key:"listMatchedResults",value:function(e){var t=this,n=[],r=i.getInput(this.selector).value.toLowerCase();e.filter(function(e){var i=t.search(r,e[t.data.key]||e);i&&n.push({match:i,source:e})});var o=n.slice(0,this.maxResults);return i.addResultsToList(this.resultsList,o,this.data.key,this.resultItem),i.navigation(this.selector,this.resultsList),o}},{key:"ignite",value:function(e){var t=this,n=this.selector,r=i.getInput(n),o=this.placeHolder,a=this.onSelection;o&&r.setAttribute("placeholder",o),r.onkeyup=function(){var o=t.resultsList;if(i.clearResults(o),r.value.length>t.threshold&&r.value.replace(/ /g,"").length){var s=t.listMatchedResults(e);a&&i.getSelection(n,o,a,s,t.data.key)}}}},{key:"init",value:function(){var e=this,t=this.data.src();t instanceof Promise?t.then(function(t){return e.ignite(t)}):this.ignite(t)}}])&&e(n.prototype,r),o&&e(n,o),t;var n,r,o}()}()},function(e,t,n){"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},function(e,t,n){"use strict";n.r(t);var r=n(10);
/**!
* tippy.js v4.0.4
* (c) 2017-2019 atomiks
* MIT License
*/function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var o="undefined"!=typeof window,a=o&&navigator.userAgent,s=/MSIE |Trident\//.test(a),l=/UCBrowser\//.test(a),p=o&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,c={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:[0,20],distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",updateDuration:0,wait:null,zIndex:9999},u=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],d={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow"},f=o?Element.prototype:{},h=f.matches||f.matchesSelector||f.webkitMatchesSelector||f.mozMatchesSelector||f.msMatchesSelector;function m(e){return[].slice.call(e)}function v(e,t){return(f.closest||function(e){for(var t=this;t;){if(h.call(t,e))return t;t=t.parentElement}}).call(e,t)}function b(e,t){for(;e;){if(t(e))return e;e=e.parentElement}}function y(e,t){return{}.hasOwnProperty.call(e,t)}function g(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?n:r}return e}function w(e,t){var n;return function(){var r=this,i=arguments;clearTimeout(n),n=setTimeout(function(){return e.apply(r,i)},t)}}function x(e,t){return e&&e.modifiers&&e.modifiers[t]}function _(e,t){return e.indexOf(t)>-1}function k(e){return!(!e||!y(e,"isVirtual"))||e instanceof Element}function O(e,t){return"function"==typeof e?e.apply(null,t):e}function C(e,t){e.filter(function(e){return"flip"===e.name})[0].enabled=t}function S(){return document.createElement("div")}function E(e,t){e.innerHTML=t instanceof Element?t.innerHTML:t}function T(e,t){t.content instanceof Element?(E(e,""),e.appendChild(t.content)):e[t.allowHTML?"innerHTML":"textContent"]=t.content}function P(e){return{tooltip:e.querySelector(d.TOOLTIP),backdrop:e.querySelector(d.BACKDROP),content:e.querySelector(d.CONTENT),arrow:e.querySelector(d.ARROW)||e.querySelector(d.ROUND_ARROW)}}function A(e){e.setAttribute("data-inertia","")}function L(e){var t=S();return"round"===e?(t.className="tippy-roundarrow",E(t,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):t.className="tippy-arrow",t}function j(){var e=S();return e.className="tippy-backdrop",e.setAttribute("data-state","hidden"),e}function D(e,t){e.setAttribute("tabindex","-1"),t.setAttribute("data-interactive","")}function M(e,t){e.forEach(function(e){e&&(e.style.transitionDuration="".concat(t,"ms"))})}function I(e,t,n){var r=l&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";e[t+"EventListener"](r,n)}function R(e){var t=e.getAttribute("x-placement");return t?t.split("-")[0]:""}function B(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function H(e,t,n){n.split(" ").forEach(function(n){e.classList[t](n+"-theme")})}function N(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.checkHideOnClick,n=e.exclude,r=e.duration;m(document.querySelectorAll(d.POPPER)).forEach(function(e){var i=e._tippy;!i||t&&!0!==i.props.hideOnClick||n&&e===n.popper||i.hide(r)})}var F={passive:!0},z=4,q=!1;function W(){q||(q=!0,p&&document.body.classList.add("tippy-iOS"),window.performance&&document.addEventListener("mousemove",Y))}var U=0;function Y(){var e=performance.now();e-U<20&&(q=!1,document.removeEventListener("mousemove",Y),p||document.body.classList.remove("tippy-iOS")),U=e}function X(e){var t=e.target;if(!(t instanceof Element))return N();var n=v(t,d.POPPER);if(!(n&&n._tippy&&n._tippy.props.interactive)){var r=b(t,function(e){return e._tippy&&e._tippy.reference===e});if(r){var i=r._tippy,o=_(i.props.trigger,"click");if(q||o)return N({exclude:i,checkHideOnClick:!0});if(!0!==i.props.hideOnClick||o)return;i.clearDelayTimeouts()}N({checkHideOnClick:!0})}}function V(){var e=document.activeElement;e&&e.blur&&e._tippy&&e.blur()}var G=Object.keys(c);function K(e,t){var n=i({},t,{content:O(t.content,[e])},t.ignoreAttributes?{}:function(e){return G.reduce(function(t,n){var r=(e.getAttribute("data-tippy-".concat(n))||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})}(e));return(n.arrow||l)&&(n.animateFill=!1),n}function Z(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;Object.keys(e).forEach(function(e){if(!y(t,e))throw new Error("[tippy]: `".concat(e,"` is not a valid option"))})}var $=1;function J(e,t){var n=K(e,t);if(!n.multiple&&e._tippy)return null;var o={},a=null,l=0,p=0,f=!1,k=function(){},E=[],N=n.interactiveDebounce>0?w(ie,n.interactiveDebounce):ie,W=null,U=$++,Y=function(e,t){var n=S();n.className="tippy-popper",n.id="tippy-".concat(e),n.style.zIndex=t.zIndex,t.role&&n.setAttribute("role",t.role);var r=S();r.className="tippy-tooltip",r.style.maxWidth=t.maxWidth+("number"==typeof t.maxWidth?"px":""),r.setAttribute("data-size",t.size),r.setAttribute("data-animation",t.animation),r.setAttribute("data-state","hidden"),H(r,"add",t.theme);var i=S();return i.className="tippy-content",i.setAttribute("data-state","hidden"),t.interactive&&D(n,r),t.arrow&&r.appendChild(L(t.arrowType)),t.animateFill&&(r.appendChild(j()),r.setAttribute("data-animatefill","")),t.inertia&&A(r),T(i,t),r.appendChild(i),n.appendChild(r),n}(U,n);Y.addEventListener("mouseenter",function(e){V.props.interactive&&V.state.isVisible&&"mouseenter"===o.type&&Q(e)}),Y.addEventListener("mouseleave",function(){V.props.interactive&&"mouseenter"===o.type&&document.addEventListener("mousemove",N)});var X,V={id:U,reference:e,popper:Y,popperChildren:P(Y),popperInstance:null,props:n,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:be,set:ye,setContent:function(e){ye({content:e})},show:ge,hide:we,enable:function(){V.state.isEnabled=!0},disable:function(){V.state.isEnabled=!1},destroy:xe};return he(),n.lazy||(ce(),V.popperInstance.disableEventListeners()),n.showOnInit&&Q(),n.a11y&&!n.target&&((X=e)instanceof Element&&(!h.call(X,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")||X.hasAttribute("disabled")))&&e.setAttribute("tabindex","0"),e._tippy=V,Y._tippy=V,V;function G(e){var t=a=e,n=t.clientX,r=t.clientY;if(V.popperInstance){var i=R(V.popper),o=V.props.arrow?z+("round"===V.props.arrowType?18:16):z,s=_(["top","bottom"],i),l=_(["left","right"],i),p=s?Math.max(o,n):n,c=l?Math.max(o,r):r;s&&p>o&&(p=Math.min(n,window.innerWidth-o)),l&&c>o&&(c=Math.min(r,window.innerHeight-o));var u=V.reference.getBoundingClientRect(),d=V.props.followCursor,f="horizontal"===d,h="vertical"===d;V.popperInstance.reference={getBoundingClientRect:function(){return{width:0,height:0,top:f?u.top:c,bottom:f?u.bottom:c,left:h?u.left:p,right:h?u.right:p}},clientWidth:0,clientHeight:0},V.popperInstance.scheduleUpdate(),"initial"===d&&V.state.isVisible&&te()}}function Q(e){if(be(),!V.state.isVisible){if(V.props.target)return function(e){var n=v(e.target,V.props.target);n&&!n._tippy&&(J(n,i({},V.props,{content:O(t.content,[n]),appendTo:t.appendTo,target:"",showOnInit:!0})),Q(e))}(e);if(f=!0,V.props.wait)return V.props.wait(V,e);ue()&&!V.state.isMounted&&document.addEventListener("mousemove",G);var n=g(V.props.delay,0,c.delay);n?l=setTimeout(function(){ge()},n):ge()}}function ee(){if(be(),!V.state.isVisible)return te();f=!1;var e=g(V.props.delay,1,c.delay);e?p=setTimeout(function(){V.state.isVisible&&we()},e):we()}function te(){document.removeEventListener("mousemove",G)}function ne(){document.body.removeEventListener("mouseleave",ee),document.removeEventListener("mousemove",N)}function re(e){V.state.isEnabled&&!pe(e)&&(V.state.isVisible||(o=e,e instanceof MouseEvent&&(a=e)),"click"===e.type&&!1!==V.props.hideOnClick&&V.state.isVisible?ee():Q(e))}function ie(e){var t=b(e.target,function(e){return e._tippy}),n=v(e.target,d.POPPER)===V.popper,r=t===V.reference;n||r||function(e,t,n,r){if(!e)return!0;var i=n.clientX,o=n.clientY,a=r.interactiveBorder,s=r.distance,l=t.top-o>("top"===e?a+s:a),p=o-t.bottom>("bottom"===e?a+s:a),c=t.left-i>("left"===e?a+s:a),u=i-t.right>("right"===e?a+s:a);return l||p||c||u}(R(V.popper),V.popper.getBoundingClientRect(),e,V.props)&&(ne(),ee())}function oe(e){if(!pe(e))return V.props.interactive?(document.body.addEventListener("mouseleave",ee),void document.addEventListener("mousemove",N)):void ee()}function ae(e){e.target===V.reference&&(V.props.interactive&&e.relatedTarget&&V.popper.contains(e.relatedTarget)||ee())}function se(e){v(e.target,V.props.target)&&Q(e)}function le(e){v(e.target,V.props.target)&&ee()}function pe(e){var t="ontouchstart"in window,n=_(e.type,"touch"),r=V.props.touchHold;return t&&q&&r&&!n||q&&!r&&n}function ce(){var e=V.props.popperOptions,t=V.popperChildren,n=t.tooltip,o=t.arrow;V.popperInstance=new r.a(V.reference,V.popper,i({placement:V.props.placement},e,{modifiers:i({},e?e.modifiers:{},{preventOverflow:i({boundariesElement:V.props.boundary,padding:z},x(e,"preventOverflow")),arrow:i({element:o,enabled:!!o},x(e,"arrow")),flip:i({enabled:V.props.flip,padding:V.props.distance+z,behavior:V.props.flipBehavior},x(e,"flip")),offset:i({offset:V.props.offset},x(e,"offset"))}),onUpdate:function(t){V.props.flip&&!V.props.flipOnUpdate&&(t.flipped&&(V.popperInstance.options.placement=t.placement),C(V.popperInstance.modifiers,!1));var r=R(V.popper),i=n.style;i.top="",i.bottom="",i.left="",i.right="",i[r]=-(V.props.distance-10)+"px";var o={top:z,bottom:z,left:z,right:z};o[r]=z+V.props.distance,V.popperInstance.modifiers.filter(function(e){return"preventOverflow"===e.name})[0].padding=o,e&&e.onUpdate&&e.onUpdate(t)}}))}function ue(){return V.props.followCursor&&!q&&"focus"!==o.type}function de(e,t){function n(e){e.target===r&&(I(r,"remove",n),t())}if(0===e)return t();var r=V.popperChildren.tooltip;I(r,"remove",k),I(r,"add",n),k=n}function fe(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];V.reference.addEventListener(e,t,n),E.push({eventType:e,handler:t,options:n})}function he(){V.props.touchHold&&!V.props.target&&(fe("touchstart",re,F),fe("touchend",oe,F)),V.props.trigger.trim().split(" ").forEach(function(e){if("manual"!==e)if(V.props.target)switch(e){case"mouseenter":fe("mouseover",se),fe("mouseout",le);break;case"focus":fe("focusin",se),fe("focusout",le);break;case"click":fe(e,se)}else switch(fe(e,re),e){case"mouseenter":fe("mouseleave",oe);break;case"focus":fe(s?"focusout":"blur",ae)}})}function me(){E.forEach(function(e){var t=e.eventType,n=e.handler,r=e.options;V.reference.removeEventListener(t,n,r)}),E=[]}function ve(){return[V.popperChildren.tooltip,V.popperChildren.backdrop,V.popperChildren.content]}function be(){clearTimeout(l),clearTimeout(p)}function ye(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Z(e,c);var t=V.props,n=K(V.reference,i({},V.props,e,{ignoreAttributes:!0}));n.ignoreAttributes=y(e,"ignoreAttributes")?e.ignoreAttributes:t.ignoreAttributes,V.props=n,(y(e,"trigger")||y(e,"touchHold"))&&(me(),he()),y(e,"interactiveDebounce")&&(ne(),N=w(ie,e.interactiveDebounce)),function(e,t,n){var r=P(e),i=r.tooltip,o=r.content,a=r.backdrop,s=r.arrow;e.style.zIndex=n.zIndex,i.setAttribute("data-size",n.size),i.setAttribute("data-animation",n.animation),i.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?e.setAttribute("role",n.role):e.removeAttribute("role"),t.content!==n.content&&T(o,n),!t.animateFill&&n.animateFill?(i.appendChild(j()),i.setAttribute("data-animatefill","")):t.animateFill&&!n.animateFill&&(i.removeChild(a),i.removeAttribute("data-animatefill")),!t.arrow&&n.arrow?i.appendChild(L(n.arrowType)):t.arrow&&!n.arrow&&i.removeChild(s),t.arrow&&n.arrow&&t.arrowType!==n.arrowType&&i.replaceChild(L(n.arrowType),s),!t.interactive&&n.interactive?D(e,i):t.interactive&&!n.interactive&&function(e,t){e.removeAttribute("tabindex"),t.removeAttribute("data-interactive")}(e,i),!t.inertia&&n.inertia?A(i):t.inertia&&!n.inertia&&function(e){e.removeAttribute("data-inertia")}(i),t.theme!==n.theme&&(H(i,"remove",t.theme),H(i,"add",n.theme))}(V.popper,t,n),V.popperChildren=P(V.popper),V.popperInstance&&(V.popperInstance.update(),u.some(function(t){return y(e,t)})&&(V.popperInstance.destroy(),ce(),V.state.isVisible||V.popperInstance.disableEventListeners(),V.props.followCursor&&a&&G(a)))}function ge(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:g(V.props.duration,0,c.duration[0]);if(!V.state.isDestroyed&&V.state.isEnabled&&(!q||V.props.touch))return y(V.reference,"isVirtual")||document.documentElement.contains(V.reference)?void(V.reference.hasAttribute("disabled")||!1!==V.props.onShow(V)&&(V.popper.style.visibility="visible",V.state.isVisible=!0,V.props.interactive&&V.reference.classList.add("tippy-active"),M([V.popper,V.popperChildren.tooltip,V.popperChildren.backdrop],0),function(e){var t=!(ue()||"initial"===V.props.followCursor&&q);V.popperInstance?(ue()||(V.popperInstance.scheduleUpdate(),t&&V.popperInstance.enableEventListeners()),C(V.popperInstance.modifiers,V.props.flip)):(ce(),t||V.popperInstance.disableEventListeners()),V.popperInstance.reference=V.reference;var n=V.popperChildren.arrow;if(ue()){n&&(n.style.margin="0");var r=g(V.props.delay,0,c.delay);o.type&&G(r&&a?a:o)}else n&&(n.style.margin="");q&&a&&"initial"===V.props.followCursor&&(G(a),n&&(n.style.margin="0")),function(e,t){var n=e.popper,r=e.options,i=r.onCreate,o=r.onUpdate;r.onCreate=r.onUpdate=function(e){!function(e){e.offsetHeight}(n),t(),o(e),r.onCreate=i,r.onUpdate=o}}(V.popperInstance,e);var i=V.props.appendTo;(W="parent"===i?V.reference.parentNode:O(i,[V.reference])).contains(V.popper)||(W.appendChild(V.popper),V.props.onMount(V),V.state.isMounted=!0)}(function(){V.state.isVisible&&(ue()||V.popperInstance.update(),M([V.popper],n.updateDuration),M(ve(),e),V.popperChildren.backdrop&&(V.popperChildren.content.style.transitionDelay=Math.round(e/12)+"ms"),V.props.sticky&&(M([V.popper],s?0:V.props.updateDuration),function e(){V.popperInstance&&V.popperInstance.scheduleUpdate(),V.state.isMounted?requestAnimationFrame(e):M([V.popper],0)}()),B(ve(),"visible"),function(e,t){de(e,t)}(e,function(){V.popperChildren.tooltip.classList.add("tippy-notransition"),V.props.aria&&V.reference.setAttribute("aria-".concat(V.props.aria),V.popper.id),V.props.onShown(V),V.state.isShown=!0}))}))):xe()}function we(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:g(V.props.duration,1,c.duration[1]);!V.state.isDestroyed&&V.state.isEnabled&&!1!==V.props.onHide(V)&&(V.popperChildren.tooltip.classList.remove("tippy-notransition"),V.props.interactive&&V.reference.classList.remove("tippy-active"),V.popper.style.visibility="hidden",V.state.isVisible=!1,V.state.isShown=!1,M(ve(),e),B(ve(),"hidden"),function(e,t){de(e,function(){!V.state.isVisible&&W&&W.contains(V.popper)&&t()})}(e,function(){f||te(),V.props.aria&&V.reference.removeAttribute("aria-".concat(V.props.aria)),V.popperInstance.disableEventListeners(),V.popperInstance.options.placement=V.props.placement,W.removeChild(V.popper),V.props.onHidden(V),V.state.isMounted=!1}))}function xe(e){V.state.isDestroyed||(V.state.isMounted&&we(0),me(),delete V.reference._tippy,V.props.target&&e&&m(V.reference.querySelectorAll(V.props.target)).forEach(function(e){e._tippy&&e._tippy.destroy()}),V.popperInstance&&V.popperInstance.destroy(),V.state.isDestroyed=!0)}}var Q=!1;function ee(e,t){Z(t,c),Q||(document.addEventListener("click",X,!0),document.addEventListener("touchstart",W,F),window.addEventListener("blur",V),Q=!0);var n,r=i({},c,t);n=e,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(e){var t={isVirtual:!0,attributes:e.attributes||{},setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},hasAttribute:function(t){return t in e.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){delete e.classList.classNames[t]},contains:function(t){return t in e.classList.classNames}}};for(var n in t)e[n]=t[n]}(e);var o=function(e){if(k(e))return[e];if(e instanceof NodeList)return m(e);if(Array.isArray(e))return e;try{return m(document.querySelectorAll(e))}catch(e){return[]}}(e).reduce(function(e,t){var n=t&&J(t,r);return n&&e.push(n),e},[]);return k(e)?o[0]:o}ee.version="4.0.4",ee.defaults=c,ee.setDefaults=function(e){Object.keys(e).forEach(function(t){c[t]=e[t]})},ee.hideAll=N,ee.group=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.delay,r=void 0===n?e[0].props.delay:n,i=t.duration,o=void 0===i?0:i,a=!1;function s(e){a=e,u()}function l(t){t._originalProps.onShow(t),e.forEach(function(e){e.set({duration:o}),e.hide()}),s(!0)}function p(e){e._originalProps.onHide(e),s(!1)}function c(e){e._originalProps.onShown(e),e.set({duration:e._originalProps.duration})}function u(){e.forEach(function(e){e.set({onShow:l,onShown:c,onHide:p,delay:a?[0,Array.isArray(r)?r[1]:r]:r,duration:a?o:e._originalProps.duration})})}e.forEach(function(e){e._originalProps={duration:e.props.duration,onHide:e.props.onHide,onShow:e.props.onShow,onShown:e.props.onShown}}),u()},o&&setTimeout(function(){m(document.querySelectorAll("[data-tippy]")).forEach(function(e){var t=e.getAttribute("data-tippy");t&&ee(e,{content:t})})}),function(e){if(o){var t=document.createElement("style");t.type="text/css",t.textContent=e;var n=document.head,r=n.firstChild;r?n.insertBefore(t,r):n.appendChild(t)}}('.tippy-iOS{cursor:pointer!important}.tippy-notransition{transition:none}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;will-change:transform;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}'),t.default=ee},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=g(n(0)),o=g(n(31)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(9)),s=g(n(6)),l=g(n(32)),p=g(n(8)),c=n(7),u=g(n(38)),d=g(n(39)),f=g(n(40)),h=g(n(41)),m=g(n(42)),v=g(n(43)),b=g(n(44)),y=g(n(45));function g(e){return e&&e.__esModule?e:{default:e}}var w=" For more information, please see &ldquo;About the Data&rdquo; below.</p>";function x(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return null===e?function(e,t){return console.log(e,t),e="N/A"===e?"!":e,t="N/A"===t?"!":t,(e=isNaN(+e)?e:+e)<(t=isNaN(+t)?t:+t)?-1:e>t?1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?-1:t[e]>n[e]?1:t[e]>=n[e]?0:NaN}}function _(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return null===e?function(e,t){return e<t?1:e>t?-1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?1:t[e]>n[e]?-1:t[e]>=n[e]?0:NaN}}var k=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.field="debt_percent_SPI",this.bars=[],this.barContainers=[],this.lastPositions={},this.highlightedBars={},this.explainerText={centralization:u.default,credit2015:d.default,credit2018:d.default,debt_limit_type:f.default,debt_per_capita:h.default,debt_percent_SPI:m.default,ten_year_pop_growth:v.default,revenue_volatility:b.default,state_local_division:y.default},this.groupByFn=null!==this.groupBy?function(e){return e[n.groupBy]}:function(e){return null!==e},this.selections=this.parent.createComponent(this.model,l.default,"div.js-fifty-state-selections",{parent:this}),this.sortValueKey="state",this.sortValuesFn=x,this.groupBy="null",this.nestData(),this.pushBars(),(e=this.children).push.apply(e,[this.selections].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.bars))),this.prerendered&&!this.rerender)return r;this.renderSelections(),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.updateExplainerText("field",this.field,!0);var i=this.renderCharts();return r.appendChild(i),r}},{key:"nestData",value:function(){this.nestedData=a.nest().key(this.groupByFn).sortKeys(x()).sortValues(this.sortValuesFn(this.sortValueKey)).entries(this.model.data),console.log(this.nestedData)}},{key:"pushBars",value:function(){var e=this;this.bars.length=0,this.barContainers.length=0,this.nestedData.forEach(function(t){t.values.forEach(function(t){e.bars.push(e.parent.createComponent(e.model,s.default,"div.bar-state-"+t.code,{parent:e,data:{d:t,field:e.field,color:2}})),e.barContainers.push(e.parent.createComponent(e.model,i.default,"div#barContainer-"+t.code))})})}},{key:"renderSelections",value:function(){this.container.appendChild(this.selections.el)}},{key:"renderCharts",value:function(){var e=this,t=document.createElement("div"),n=0;return t.classList.add("js-fifty-chart-container"),this.nestedData.forEach(function(r){var i=document.createElement("div");i.classList.add(o.default.groupDiv),i.innerHTML="null"!==e.groupBy?'<h3 class="'+o.default.groupHeader+'">'+(void 0!==e.model.dict[e.groupBy]?e.model.dict[e.groupBy][r.key]:r.key)+"</h3>":"",r.values.forEach(function(t){var r=e.barContainers[n].el;r.classList.add(o.default.barContainer),e.highlightedBars[r.id]&&r.classList.add(o.default.isHighlighted);var a=document.createElement("p"),s=document.createElement("div");a.classList.add(o.default.barLabel),a.innerHTML=t.state,s.classList.add(o.default.placeHolder),r.appendChild(a),r.appendChild(e.bars[n].el),r.appendChild(s),r.insertAdjacentHTML("beforeend",e.returnDataLabel(n)),i.appendChild(r),n++}),t.appendChild(i)}),t}},{key:"returnDataLabel",value:function(e){return'<div class="'+o.default.dataLabel+'" style="transform: translateX('+this.returnTranslateValue(e)+')">\n                    '+this.formatValue(this.bars[e].data.d,this.bars[e].data.field)+"\n                </div>"}},{key:"returnTranslateValue",value:function(e){var t=this;return this.bars[e].data.d[this.bars[e].data.field]<0&&this.model.types.find(function(n){return n.field===t.bars[e].data.field}).crossesZero?(100*this.bars[e].placeZero(this.bars[e].data.field)).toFixed(1)+"%":(100*(this.bars[e].linearScale(this.bars[e].data.d,this.bars[e].data.field)+this.bars[e].placeZero(this.bars[e].data.field))).toFixed(1)+"%"}},{key:"formatValue",value:function(){return c.formatValue.apply(this,arguments)}},{key:"invertPositions",value:function(){var e=this;this.barContainers.forEach(function(t){var n=t.el.getBoundingClientRect(),r=e.firstPositions[t.el.id].top-n.top;t.el.style.transitionDuration="0",t.el.style.transform="translateY("+r+"px)",window.requestAnimationFrame(function(){t.el.style.transitionDuration="0.8s",t.el.style.transform="translateY(0)"})})}},{key:"init",value:function(){var e=this;p.default.setSubs([["field",function(t,n){e.updateBars(t,n),e.updateDataLabels(t,n),e.updateExplainerText(t,n)}],["group",function(t,n){e.updateGroups(t,n),e.updateExplainerText(t,n)}],["sort",function(t,n){e.sortBars(t,n)}],["resize",function(){e.adjustExplainerTextHeight()}]]),this.children.forEach(function(e){e.init()}),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.initHighlightBars(),this.initClearAllHighlights()}},{key:"updateExplainerText",value:function(e,t,n){var r,i,o=this;"field"===e&&(this.field=t,i=this.explainerText[this.field].replace("</p>",w)||"",r=this.fieldExplainer),"group"===e&&(this.groupBy=t,i=this.explainerText[this.groupBy].replace("</p>",w)||"",r=this.groupExplainer),n||(this.explainerWrapper.style.height=this.explainerWrapper.offsetHeight+"px"),r.fadeInContent(i).then(function(){o.adjustExplainerTextHeight()})}},{key:"adjustExplainerTextHeight",value:function(){var e=[this.fieldExplainer,this.groupExplainer].reduce(function(e,t){var n=t.querySelector("p"),r=n?window.getComputedStyle(t.querySelector("p")):null;return r?+e+n.offsetHeight+parseInt(r["margin-top"])+parseInt(r["margin-bottom"]):+e},0);this.explainerWrapper.style.height=e+"px"}},{key:"initHighlightBars",value:function(){var e=this;document.querySelectorAll("."+o.default.barContainer).forEach(function(t){t.addEventListener("click",function(){e.highlightedBars[t.id]=!e.highlightedBars[t.id],t.classList.toggle(o.default.isHighlighted)})})}},{key:"initClearAllHighlights",value:function(){var e=this;document.querySelector("#clear-all-highlight").addEventListener("click",function(t){t.preventDefault(),document.querySelectorAll("."+o.default.barContainer).forEach(function(t){t.classList.remove(o.default.isHighlighted),e.highlightedBars={}})})}},{key:"updateDataLabels",value:function(){var e=this;this.barContainers.forEach(function(t,n){var r=t.el.querySelector("."+o.default.dataLabel);r.fadeInContent(e.formatValue(e.bars[n].data.d,e.bars[n].data.field).replace("-","–")),window.requestAnimationFrame(function(){console.log(e.bars[n].data.d),r.style.transform="translateX("+e.returnTranslateValue(n)+")"})})}},{key:"updateBars",value:function(e,t){this.field=t,this.bars.forEach(function(e){e.data.field=t,e.update()}),console.log(this.sortValueKey),"state"!==this.sortValueKey&&(this.sortValueKey=t,setTimeout(this.FLIP.bind(this),500))}},{key:"recordFirstPositions",value:function(){this.firstPositions=this.barContainers.reduce(function(e,t){return e[t.el.id]=t.el.getBoundingClientRect(),e},{})}},{key:"FLIP",value:function(){this.recordFirstPositions(),this.nestData(),this.el.innerHTML="",this.pushBars(),this.el.appendChild(this.renderCharts()),this.initHighlightBars(),this.invertPositions()}},{key:"updateGroups",value:function(e,t){this.groupBy=t,console.log(this.groupBy),this.FLIP()}},{key:"sortBars",value:function(e,t){this.sortValueKey="alpha"===t?"state":this.field,this.sortValuesFn="desc"===t?_:x,this.FLIP()}}]),t}();t.default=k},function(e,t,n){e.exports={groupHeader:"src-views-fifty-state--groupHeader",barLabel:"src-views-fifty-state--barLabel",groupDiv:"src-views-fifty-state--groupDiv",barContainer:"src-views-fifty-state--barContainer",isHighlighted:"src-views-fifty-state--isHighlighted",dataLabel:"src-views-fifty-state--dataLabel",placeHolder:"src-views-fifty-state--placeHolder"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=l(n(0)),o=l(n(33)),a=l(n(34)),s=n(2);function l(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this),i=[{label:"Select field:",data:this.model.types.filter(function(e){return"text"!==e.type}),type:"field"},{label:"Group by:",data:this.model.types.filter(function(e){return"text"===e.type}),type:"group"}];if(this.dropdowns=[],i.forEach(function(e){n.dropdowns.push(n.parent.parent.createComponent(n.model,a.default,"div.js-dropdown-"+e.label.cleanString(),{parent:n,data:e}))}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.dropdowns)),this.prerendered&&!this.rerender)return r;var s=document.createElement("div");return s.classList.add(o.default.dropdownWrapper),i.forEach(function(e,t){var r=document.createElement("div"),i=document.createElement("label"),a=n.dropdowns[t];i.classList.add(o.default.dropdownOuter),i.innerText=e.label,r.classList.add(o.default.dropdownInner),r.appendChild(a.el),i.appendChild(r),s.appendChild(i)}),r.appendChild(s),r.insertAdjacentHTML("beforeend",'\n            <div id="explainer-wrapper">\n                <div id="field-explainer"></div>\n                <div id="group-explainer"></div>\n            </div>\n            <div class="flex">\n                <p class="'+o.default.label+" "+o.default.labelSort+' flex"><span>Sort by:</span> <span><a class="'+o.default.sortBy+" "+o.default.sortActive+'" data-sort="alpha" href="#">A–Z</a> | <a class="'+o.default.sortBy+'" data-sort="asc" href="#">Low–High</a> | <a class="'+o.default.sortBy+'" data-sort="desc" href="#">High–Low</a></span></p>\n                <p class="'+o.default.label+" "+o.default.labelHighlight+'">Select a state to highlight | <a id="clear-all-highlight" href="#">Clear all</a></p>\n            </div>\n        '),r}},{key:"init",value:function(){this.children.forEach(function(e){e.init()}),document.querySelectorAll("."+o.default.sortBy).forEach(function(e){e.addEventListener("click",function(t){t.preventDefault(),document.querySelector("."+o.default.sortActive).classList.remove(o.default.sortActive),e.classList.add(o.default.sortActive),s.stateModule.setState("sort",e.dataset.sort)})})}}]),t}();t.default=p},function(e,t,n){e.exports={dropdownWrapper:"src-views-fifty-state-selections--dropdownWrapper",dropdownOuter:"src-views-fifty-state-selections--dropdownOuter",dropdownInner:"src-views-fifty-state-selections--dropdownInner",label:"src-views-fifty-state-selections--label",sortActive:"src-views-fifty-state-selections--sortActive",labelSort:"src-views-fifty-state-selections--labelSort",sortBy:"src-views-fifty-state-selections--sortBy"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},a=n(35),s=(r=a)&&r.__esModule?r:{default:r},l=n(36),p=n(2);var c=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=[],i=n.data.type;n.data.data.forEach(function(e){r.push({value:e.field,name:isNaN(+e.label)?e.label:"Credit rating "+e.label,selected:!!e.isDefaultSelection})}),n.data=r.sort(function(e,t){return e.name<t.name?-1:e.name>t.name?1:e.name>=t.name?0:NaN}),"group"===i&&n.data.unshift({value:null,name:"— None —",selected:!0});var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return o.dropdownType=i,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.Dropdown),i(t,[{key:"prerender",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(e.classList.add(s.default.dropdown),e)}},{key:"init",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this)}},{key:"onChange",value:function(){p.stateModule.setState(this.dropdownType,this.selectedOption.dataset.value)}}]),t}();t.default=c},function(e,t,n){e.exports={dropdown:"src-components-dropdown--dropdown"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=t.TextInput=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=n(1),a=l(n(0)),s=l(n(37));function l(e){return e&&e.__esModule?e:{default:e}}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.TextInput=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"input",n=arguments[1];return p(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return u(t,a.default),r(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered?e:(e.setAttribute("type","text"),e)}},{key:"init",value:function(){}}]),t}(),t.Dropdown=function(e){function t(e,n){p(this,t),console.log(e);var r,i,o=e.split(".")[0].split("#")[0];"div"!==o&&(e.split(".").length>1&&(r=e.split(".")[0].split("#")[0]),e.split("#").length>1&&(i=e.split("#")[0].split(".")[0]),console.log("Dropdown element must be a div; coercing . . ."),e=(o="div")+(void 0!==i?"#"+i:"")+(void 0!==r?"."+r:""));var a=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return a.options=a.el.querySelector("ul"),a.body=document.querySelector("body"),a._isOpen=!1,a}return u(t,a.default),r(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.prerendered)return e;var n=o.DOMHelpers.c("div.js-input-div"),r=o.DOMHelpers.c("ul");return this.data.forEach(function(e){var t=o.DOMHelpers.c("li");t.setAttribute("data-value",e.value),t.innerHTML=e.name,e.selected&&(t.classList.add("selected"),n.textContent=e.name),r.appendChild(t)}),e.appendChild(n),e.appendChild(r),e.classList.add(s.default.PCTDropdown),e.setAttribute("tabindex","0"),e}},{key:"init",value:function(){var e=this;console.log(this),this.input=this.el.querySelector(".js-input-div"),this.el.querySelectorAll("li").forEach(function(t){t.addEventListener("click",function(n){n.stopPropagation(),e.itemClickHandler(t)})}),this._selectedOption=this.el.querySelector("li.selected"),this.toBeSelected=this.el.querySelector("li.selected"),this.el.addEventListener("click",this.clickHandler.bind(this)),this.el.addEventListener("keydown",function(t){if(console.log(t.keyCode),9!==t.keyCode)return[32,38,40].indexOf(t.keyCode)>-1?(t.preventDefault(),void e.spaceAndArrowHandler.call(e,t)):void([13,27].indexOf(t.keyCode>-1)&&e.isOpen&&e.enterAndEscapeHandler.call(e,t));e.tabHandler.call(e,t)})}},{key:"itemClickHandler",value:function(e){this.toBeSelected.classList.remove("selected"),this.toBeSelected=e,this.toBeSelected.classList.add("selected"),this.selectedOption=this.toBeSelected}},{key:"enterAndEscapeHandler",value:function(e){27===e.keyCode?(console.log("escape key"),this.toBeSelected.classList.remove("selected"),this.selectedOption.classList.add("selected"),this.toBeSelected=this.selectedOption,this.isOpen=!1):this.selectedOption=this.toBeSelected}},{key:"spaceAndArrowHandler",value:function(e){if(32!==e.keyCode)if(this.isOpen){var t=38===e.keyCode?this.toBeSelected.previousElementSibling:this.toBeSelected.nextElementSibling;t&&(this.toBeSelected.classList.remove("selected"),this.toBeSelected=t,this.toBeSelected.classList.add("selected"))}else this.isOpen=!0;else this.isOpen||(this.isOpen=!0)}},{key:"tabHandler",value:function(e){this.isOpen&&e.preventDefault()}},{key:"clickHandler",value:function(e){!this.isOpen&&this.body.UIControlIsOpen||(e.stopPropagation(),this.isOpen=!this.isOpen)}},{key:"isOpen",set:function(e){function t(){this.isOpen=!1}this._isOpen=e,e?(this.el.classList.add(s.default.isOpen),this.body.UIControlIsOpen=!0,this.body.addEventListener("click",t.bind(this))):(this.el.classList.remove(s.default.isOpen),this.body.UIControlIsOpen=!1,this.body.removeEventListener("click",t.bind(this)))},get:function(){return this._isOpen}},{key:"selectedOption",set:function(e){this._selectedOption=e,this.isOpen=!1,this.input.textContent=this._selectedOption.innerText,this.onChange?this.onChange():console.log("Instance of Dropdown class needs an onChange method to handle selection of a new value")},get:function(){return this._selectedOption}}]),t}()},function(e,t,n){e.exports={PCTDropdown:"submodules-UI-js-inputs--PCTDropdown",isOpen:"submodules-UI-js-inputs--isOpen"}},function(e,t){e.exports="<p><strong>Centralization.</strong> The degree to which borrowing is done by the state itself rather than by component units. Higher values mean that borrowing in the state is more centralized.</p>\n"},function(e,t){e.exports="<p><strong>Credit rating:</strong> Standard &amp; Poor’s general obligation or issuer credit rating. </p>\n"},function(e,t){e.exports="<p><strong>General obligation (GO) debt limit type.</strong> The kind of limit the state has on GO borrowing, one of the most common types of debt issued by states. These limits affect how states borrow.</p>\n"},function(e,t){e.exports="<p><strong>Debt per capita.</strong> Total debt relative to a state’s population.</p>\n"},function(e,t){e.exports="<p><strong>Debt as a percentage of state personal income.</strong> Total debt relative to state personal income, a measure of economic resources.</p>\n"},function(e,t){e.exports="<p><strong>Population growth.</strong> The 10-year population growth rate from 2008 to 2017. Growing populations are associated with greater infrastructure investment.</p>\n"},function(e,t){e.exports="<p><strong>Revenue volatility.</strong> A measure of variation in tax collections. Low scores mean that revenue levels are similar from year to year, while high scores indicate that revenue varies more. More volatile states should plan for greater uncertainty. </p>\n"},function(e,t){e.exports="<p><strong>Division of borrowing between state and local governments.</strong> The share of combined state and local debt issued by local governments. States in which local governments borrow less tend to have higher state debt levels. </p>\n"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(47),s=(r=a)&&r.__esModule?r:{default:r};var l=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.el=document.querySelector(t),Object.keys(n).forEach(function(e){r[e]=n[e]})}return o(e,[{key:"init",value:function(e){this.needsRouter&&(this.router=new s.default,this.router.init(e)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var e=!1,t=document.body,n=0;function r(){new Date-n<500||e||(t.classList.add("has-hover"),e=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){e&&(t.classList.remove("has-hover"),e=!1)},!0),document.addEventListener("mousemove",r,!0),r()}},{key:"createComponent",value:function(e,t,n,r){var o=Object.create({children:[],data:null,model:e,parent:null,rerenderOnDataMismatch:!1});if(null!==r&&"object"===(void 0===r?"undefined":i(r)))for(var a in r)r.hasOwnProperty(a)&&(o[a]=r[a]);return new t(n,o)}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return i(e,[{key:"init",value:function(e){var t=this;if(void 0===e||"object"!==(void 0===e?"undefined":r(e)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof e.encode||"function"!=typeof e.decode||!Array.isArray(e.views)||"object"!==r(e.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=e.encode,this.decodeHash=e.decode,this.viewPromises=e.views.map(function(e){return e.isReady}),this.PS=e.PS,Promise.all(this.viewPromises).then(function(){t.decodeHash()}),this.PS.setSubs(e.subscriptions.map(function(e){return[e,function(e,n){t.hashChange.call(t,e,n)}]}))}},{key:"hashChange",value:function(e,t){this.setStateObj(e,t),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(e,t){this.stateObj[e]=t}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),e}();t.default=o},function(e,t){e.exports='<section id="section-overview">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">Overview</h2>\n    <div class="js-inner-content">\n    \n\t<p>\n        When state policymakers try to assess how much debt to take on for projects\n        such as roads, bridges, and schools, they often compare debt levels in\n        their state to those of others. Because no universal guidelines exist for\n        how much debt is affordable, many policymakers evaluate how their state\n        stacks up against others with a common credit rating or national median\n        debt levels.\n    </p>\n    <p>\n        But selecting a peer group based only on a common rating or using national\n        benchmarks overlooks many factors that influence borrowing levels. States\n        with growing populations, for example, tend to borrow more; a state’s\n        fiscal health affects the funds available for debt service; and policies\n        meant to limit state debt can influence how much local governments and\n        other state entities borrow for capital projects.\n    </p>\n    <p>\n        To address this gap, The Pew Charitable Trusts has created an interactive\n        tool to allow policymakers to compare states based on seven characteristics\n        related to debt. States can use these data to select more tailored peer\n        groups, giving them a deeper understanding of how states with similar\n        borrowing practices, constraints, and needs manage their borrowing.\n        Ultimately, these improved comparisons will help states make\n        better-informed decisions.\n    </p>\n    <p>\n        More information about these characteristics and why Pew chose them may be\n        found in the <a class="pct-static-anchor" id="about-the-data" href="#section-about">About the Data</a> section at the bottom of this page.\n    </p>\n    </div>\n    </section>\n<section id="section-comparison">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">State Comparison</h2>\n    <div class="js-inner-content">\n        <div class="compare-selection-wrapper">\n            <span class="compare-label">Compare</span><br />\n            <div class="flex flex-start flex-baseline autoComplete_outerWrapper">\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-0">\n                    <input autocomplete="off" type="text" id="compare-input-0">\n                </div>\n                <span>to</span>\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-1">\n                    <input autocomplete="off" type="text" id="compare-input-1">\n                </div>\n            </div>\n        </div>\n    </div>\n    </section>\n<section id="section-states">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">50-State Data</h2>\n    <div class="js-inner-content">\n    </div>\n    </section>\n<section id="section-about">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">About the Data</h2>\n    <div class="js-inner-content">\n    \n<p>\n    Pew researchers developed this list of characteristics by examining\n    relevant literature and consulting subject matter experts. The final set of\n    seven characteristics included in the tool was selected based on evidence\n    in the literature that the characteristics are related to state debt, the\n    feasibility of collecting the data used to construct the characteristic,\n    and a desire to avoid redundancy. Pew also limited the number of\n    characteristics to make the tool easy to use and understand.\n</p>\n<p>\n    The goal of this tool was not to create an exhaustive catalog of the\n    factors that may affect state borrowing levels, so states should not feel\n    the need to limit themselves to the data in it when selecting peers.\n    Instead, the tool is intended to help states consider these differences\n    when constructing peer groups.\n</p>\n<h3 class="static">\n    Borrowing practices\n</h3>\n<p>\n    How states borrow also affects how they should make comparisons: General\n    obligation (GO) debt limits, centralization, and the division of\n    state-local borrowing in a state can affect state borrowing practices.\n</p>\n<a name="debt_limit_type" id="debt_limit_type"></a>\n<h4 class="js-debt_limit_type">\n    General obligation debt limit type (2018)\n</h4>\n<p>\n    GO debt is one of the most common types issued by states. It carries a\n    state’s full faith and credit, the strongest possible pledge. As a result,\n    GO debt is typically a state’s highest rated and lowest cost since credit\n    rating agencies and bond purchasers strongly believe the state will repay\n    it.<sup>1</sup> \n</p>\n<p>\n    Not all states issue much GO debt. All but two have GO debt limits, which\n    vary in restrictiveness and structure. For example, Connecticut limits this\n    debt to 1.6 times total estimated general fund tax receipts, while Arizona\neffectively prohibits its issuance.<sup>2</sup> Comparing Connecticut\n    and Arizona, then, might not be appropriate because Connecticut has\n    significant GO debt and Arizona none. Connecticut’s debt will draw on the\n    state’s general fund in a way Arizona’s won’t. (GO debt is typically\n    supported by a state’s general fund.) Because analyzing the revenue streams\n    available for debt repayment is important, this is a key difference.\n</p>\n<p>\n    These limits sometimes apply to state debt beyond just GO borrowing. For\n    example, West Virginia’s limit applies to net tax-supported debt, which\n    includes GO.\n</p>\n<p>\n    Pew has classified each state’s limit for GO debt as one of the following\n    types:\n</p>\n<ul>\n    <li>\n        <strong>Constitutional amendment.</strong>\n        Three states—Alabama, Ohio, and West Virginia—require an amendment to\n        their constitutions to issue GO debt.\n    </li>\n    <li>\n        <strong>Metric.</strong>\n        In 11 states—Connecticut, Georgia, Hawaii, Mississippi, Nevada, New\n        Hampshire, North Dakota, Oregon, Tennessee, Utah, and Wisconsin—debt is\n        not allowed to exceed a certain metric-based threshold. Tennessee, for\n        example, caps debt service at 10 percent of combined revenues in its\n        general, debt service, and highway funds.\n    </li>\n    <li>\n        <strong>Metric-based with referendum to exceed.</strong>\n        North Carolina, Pennsylvania, and Wyoming use a metric to cap debt but\n        allow issuance above the cap with voter approval.\n    </li>\n    <li>\n        <strong>No limit.</strong>\n        Maryland and Vermont place no restrictions on GO debt.\n    </li>\n    <li>\n        <strong>Prohibition.</strong>\n        Arizona, Colorado, Indiana, and Nebraska prohibit GO debt. Indiana law\n        forbids any GO debt to be issued; the others authorize amounts so\n        low—$350,000 or less—as to be equivalent to prohibitions.\n    </li>\n    <li>\n        <strong>Referendum and/or supermajority.</strong>\n        Thirteen states—Alaska, Arkansas, California, Idaho, Iowa, Kansas,\n        Kentucky, Maine, Michigan, Minnesota, Missouri, Montana, and Rhode\n        Island—require some combination of voter approval and/or a legislative\n        supermajority (generally three-fifths or two-thirds) to issue debt.\n    </li>\n    <li>\n        <strong>Referendum and/or supermajority and metric.</strong>\n        Fourteen states—Delaware, Florida, Illinois, Louisiana, Massachusetts,\n        New Jersey, New Mexico, New York, Oklahoma, South Carolina, South\n        Dakota, Texas, Virginia, and Washington—require a referendum and/or\n        supermajority and have a metric-based cap on debt or debt service.\n    </li>\n</ul>\n<div class="pct-note"><p>\n    <strong>Note:</strong> The classification system is a variation on the approach taken in D.\n    Roderick Kiewiet and Kristin Szakaly, “Constitutional Limitations on\nBorrowing: An Analysis of State Bonded Indebtedness,”    <cite>The Journal of Law, Economics &amp; Organization</cite> 12, no. 1 (1996):\n    62-97,\n    <a href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents">\n        https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents</a>.\n</p>\n<p>\n    <strong>Source:</strong> Pew analysis of state constitutions and statutes\n</p></div>\n<a name="centralization" id="centralization"></a>\n<h4 class="js-centralization">\n    Centralization (fiscal year 2014)\n</h4>\n<p>\n    Another effect of Arizona’s prohibition on GO debt is decentralized debt\n    issuance.<sup>3</sup> This means\n    borrowing is done by entities other than the primary—meaning\n    state—government, including the independent agencies and authorities known\n    as component units. Centralization measures component unit debt as a share\n    of the total debt issued by both the primary government and its component\n    units.\n</p>\n<p>\n    Component unit debt generally relies less on state funds for repayment than\n    primary government debt. Often, lenders have no legal claim on state\n    general funds if the component unit defaults. As a result, state\n    comparisons based on total debt may be misleading. Montana and Delaware,\n    for example, have about the same total debt, but most of Montana’s debt is\n    held by component units and most of Delaware’s is held by the state.\n</p>\n<div class="pct-note"><p>\n    <strong>Note:</strong> To calculate centralization in a state, Pew first analyzed the\n    state’s comprehensive annual financial report to determine how much debt\n    was held by the primary government. That was then compared to a sum of the\n    debt of major component units as reported in their annual financial\n    statements.<sup>4</sup> \n</p></div>\n<a name="state_local_division" id="state_local_division"></a>\n<h4 class="js-state_local_division">\n    The state-local borrowing division (2015)\n</h4>\n<p>\n    One factor that influences state debt levels is the division of borrowing\n    between state and local governments. In some states, local governments are\n    responsible for paying for most capital projects within their\n    jurisdictions. In other places, the state is responsible for those\n    projects. Instead of a city or town bonding to finance them, the state\n    takes on this debt—increasing its overall borrowing. The division of\n    borrowing responsibility is related to the debt limit. Local governments in\n    Arizona, for example, borrow more than the state does because the state’s\nability to borrow is so restricted.<sup>5</sup> This tool measures the\n    state-local borrowing division as the share of total debt within a state\n    issued by local governments.\n</p>\n<div class="pct-note"><p>\n    <strong>Source:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances: 2015 Data Release” (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n</p></div>\n<p>\n    <strong></strong>\n</p>\n<h3 class="static">\n    Fiscal conditions and infrastructure needs\n</h3>\n<p>\n    Fiscal conditions may affect a state’s willingness to issue debt and\n    ability to repay it, while infrastructure needs might increase a state’s\n    demand for debt. Observing trends and variations among states in both\n    categories can allow officials to create more appropriate peer groups.\n</p>\n<a name="revenue_volatility" id="revenue_volatility"></a>\n<h4 class="js-revenue_volatility">\n    Revenue volatility (1997-2016)\n</h4>\n<p>\n    Revenue volatility is the annual fluctuation in tax collections and is\n    affected by each state’s mix of tax streams. It indicates whether a state\n    can expect to dedicate a relatively consistent share of its revenue to its\n    liabilities year to year or whether that share will show greater\n    fluctuation as revenue varies. States with stable revenue can plan debt\n    issuances and pay down debt more easily than states with uncertain tax\n    collections can.<sup>6</sup> States\n    with more volatile revenue may therefore wish to compare themselves to\n    states with similar concerns.\n</p>\n<p>\n    Pew used data from 1997 to 2016 to calculate a revenue volatility score for\n    each state. The score reflects variations in yearly percentage changes in\nrevenue between 1997 and 2016.<sup>7</sup> States have differing\n    levels of volatility because they have unique revenue mixes. Alaska has a\n    highly volatile revenue stream because much of its collections come from\n    unpredictable severance taxes on oil. Other states—such as South Dakota,\n    which earns more of its revenue from stable sources like personal income\n    taxes—have less volatility. A low volatility score means that revenue\n    levels were similar from year to year, and a high score indicates that\n    revenue grew or declined more dramatically.\n</p>\n<div class="pct-note"><p>\n    <strong>Source:</strong> The Pew Charitable Trusts, “Tax Revenue Volatility, FY 1997-2016,”\n    last modified Aug. 29, 2018,\n    <a\n        href="http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6"\n    >\n        http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6</a>\n</p></div>\n<a name="ten_year_pop_growth" id="ten_year_pop_growth"></a>\n<h4 class="js-ten_year_pop_growth">\n    Population growth (2008-17)\n</h4>\n<p>\n    Population growth drives infrastructure needs. More people means greater\n    pressure on a state’s infrastructure, necessitating improvements and new\n    construction. Research shows that as a state’s population grows, so too\ndoes its demand for, and in some cases spending on, capital construction.<sup>8</sup> \n</p>\n<p>\n    As a result, states with similar growth patterns may have similar demands\n    for infrastructure. For this reason, Pew used population growth as a proxy\n    for infrastructure demand, a metric for which exact, reliable sources are\n    scarce. Observing population growth can help identify peers and provides a\n    data point not often used in interstate debt comparisons.\n</p>\n<p>\n    Pew selected a 10-year population growth rate, measured as the increase or\n    decrease in state population between 2008 and 2017. Although no consensus\n    exists in academic literature regarding the appropriate time span for\n    examining population trends, this period captured the trough of the Great\n    Recession, the subsequent economic expansion, and the resulting demographic\n    and geographic shifts.<sup>9</sup> \n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances: 2015 Data Release” (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n    United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n    2017,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx</a>\n    ; U.S. Census Bureau, “Intercensal Estimates of the Resident Population for\n    the United States, Regions, States, and Puerto Rico: April 1, 2000 to July\n    1, 2010,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls</a>\n</p></div>\n<h3 class="static">\n    Debt levels (2015)\n</h3>\n<p>\n    Debt levels are a natural point of comparison and are influenced by the\n    preceding characteristics. While an absolute dollar amount provides useful\n    information, it does not put the amount of debt into context relative to\n    the state’s resources.<sup>10</sup> \n    Given size, population, and economic differences among states, a dollar\n    amount is also less useful for state comparisons. Instead, normalized\n    ratios allow states of various sizes to compare themselves. Consistent with\n    the best practices for understanding debt affordability, Pew’s tool\n    includes two ratios—debt per capita and debt as a percentage of state\n    personal income—to give a more complete measure of a state’s debt.\n    State-based analyses often use a ratio of debt service to revenue when\n    evaluating debt levels and setting limits. This ratio is not included in\nthis tool due to cross-state comparability issues.<sup>11</sup> \n</p>\n<a name="debt_per_capita" id="debt_per_capita"></a>\n<h4 class="js-debt_per_capita">\n    Debt per capita\n</h4>\n<p>\n    Because debt is repaid through revenue generally in the form of taxes or\n    user fees paid by residents, assessing debt relative to its repayment\n    source—the resident—is a common approach. Debt per capita, which measures\n    total debt against a state’s population, makes comparisons between states\n    of different sizes feasible and helps policymakers understand the debt\n    burden on individual residents.\n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances,” 2015 Data Release (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n    United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n    2017,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx</a>\n</p></div>\n<a name="debt_percent_SPI" id="debt_percent_SPI"></a>\n<h4 class="js-debt_percent_SPI">\n    Debt as a percentage of state personal income\n</h4>\n<p>\n    Another common practice, used by credit rating agencies and academics, is\n    to consider a state’s debt level relative to resources available for\n    repayment.<sup>12</sup> A ratio\n    comparing debt not only to population but to taxpayer earning power or\nwealth is therefore beneficial.<sup>13</sup> Debt as a percentage\n    of state personal income addresses this and is commonly used by states to\n    evaluate debt levels.\n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances,” 2015 Data Release (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Bureau of Economic Analysis, “SA1 Personal Income Summary: Personal\n    Income, Population, Per Capita Personal Income,”\n    https://www.bea.gov/data/income-saving/personal-income-by-state.\n</p></div>\n<aside class="pct-box">\n        <h4>Census Data vs. Moody’s Net Tax-Supported Debt Calculations</h4>\n    \n\t<p>\n\t    While debt affordability studies often use Moody’s Investors Service Inc.\n\t    calculations of state net tax-supported debt to compare borrowing, The Pew\n\t    Charitable Trusts used U.S. Census Bureau data for two reasons.\n\t</p>\n\t<p>\n\t    First, the Census Bureau captures a broader scope of debt than does\n\t    Moody’s, including some debt held by dependent agencies such as public\n\tauthorities and component units,<sup>14</sup> giving a more\n\t    accurate representation of the debt burden supported by a state’s\n\t    residents.<sup>15</sup> Second, the\n\t    bureau analyzes how closely the dependent agencies it includes in its\n\t    definition of state debt are fiscally or administratively tied to the\n\t    state. Because ultimate responsibility for a debt can be nebulous—and a\n\t    state may not support the liabilities of its more independent entities—this\n\tfurther ensures an accurate description of state debt.<sup>16</sup> \n\t</p>\n</aside>\n<a name="credit_rating" id="credit_rating"></a>\n<h3 class="js-credit_rating static">\n    Credit ratings (September 2018 and September 2015)\n</h3>\n<p>\n    This tool allows users to group states by Standard &amp; Poor’s credit\n    ratings to explore differences among those with similar credit profiles.\n    The user can select credit ratings from 2018 or 2015 to look at either\n    recent information or information corresponding to other, earlier data\n    points in this tool.\n</p>\n<div class="pct-note"><p>\n    <strong>Note:</strong> Pew collected ratings on general obligation issuance as of September\n    2018 and September 2015. If the state does not issue GO bonds, the rating\n    on the senior-most tax-backed issuance was used instead. In addition to\n    S&amp;P, there are two other major credit rating agencies: Moody’s and\n    Fitch. There is little variation in ratings among the three agencies.\n</p></div>\n<div class="pct-endnotes">\n    \n    <div id="edn1">\n        <p>\n 1. \n            The Pew Charitable Trusts, “Strategies for Managing State Debt”\n            (2017),\n            <a\n                href="http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt"\n            >\n                http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt</a>.\n        </p>\n    </div>\n    <div id="edn2">\n        <p>\n 2. \n            Ibid.\n        </p>\n    </div>\n    <div id="edn3">\n        <p>\n 3. \n            Research on state borrowing practices has found that debt limits\n            decrease the centralization of state debt as states borrow through\n            other entities to circumvent these limits. See Beverly S. Bunch,\n            “The Effect of Constitutional Debt Limits on State Governments’ Use\n            of Public Authorities,” <cite>Public Choice </cite>68, no. 1-3 (1991):\n            57-69,\n            <a href="https://link.springer.com/article/10.1007/BF00173819">\n                https://link.springer.com/article/10.1007/BF00173819</a>\n            ; Rhonda Riherd Trautman, “The Impact of State Debt Management on\n            Debt Activity,” <cite>Public Budgeting &amp; Finance </cite>15, no. 2\n            (1995): 33-51,\n            <a href="https://doi.org/10.1111/1540-5850.01038">\n                https://doi.org/10.1111/1540-5850.01038</a>.\n        </p>\n    </div>\n    <div id="edn4">\n        <p>\n 4. \n            For more detail on how we collected these data, see The Pew\n            Charitable Trusts, “Strategies for Managing State Debt,”\n            methodology.\n        </p>\n    </div>\n    <div id="edn5">\n        <p>\n 5. \n            For a discussion of the relationship between debt limits and local\n            borrowing, see D. Roderick Kiewiet and Kristin Szakaly,\n            “Constitutional Limitations on Borrowing: An Analysis of State\nBonded Indebtedness,”            <cite>The Journal of Law, Economics &amp; Organization </cite>12, no. 1\n            (1996): 62-97,\n            <a\n                href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents"\n            >\n                https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents</a>.\n        </p>\n    </div>\n    <div id="edn6">\n        <p>\n 6. \n            One study found that as economic volatility increases, states\n            prefer to pay for infrastructure projects with cash rather than\n            through financing. Wen Wang, Yilin Hou, and William Duncome,\n            “Determinants of Pay-as-You-Go Financing of Capital Projects:\n            Evidence From the States,” <cite>Public Budgeting &amp; Finance </cite>\n            27, no. 4 (2007): 18-42,\n            <a href="https://doi.org/10.1111/j.1540-5850.2007.00892.x">\n                https://doi.org/10.1111/j.1540-5850.2007.00892.x</a>.\n        </p>\n    </div>\n    <div id="edn7">\n        <p>\n 7. \n            The Pew Charitable Trusts, “Tax Revenue Volatility Varies Across\n            States, Revenue Streams,” accessed Sept. 10, 2018,\n            <a\n                href="http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6"\n            >\n                http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6</a>.\n        </p>\n    </div>\n    <div id="edn8">\n        <p>\n 8. \n            Ronald C. Fisher and Robert W. Wassmer, “The Issuance of State and\nLocal Debt During the United States Great Recession,”            <cite>National Tax Journal</cite> 67, no. 1 (2014): 113-50,\n            <a\n                href="https://ideas.repec.org/a/ntj/journl/v67y2014i1p113-150.html"\n            >\n                https://ideas.repec.org/a/ntj/journl/v67y2014i1p113-150.html</a>\n            ; Ronald C. Fisher and Robert W. Wassmer, “An Analysis of\nState-Local Government Capital Expenditure During the 2000s,”            <cite>Public Budgeting &amp; Finance</cite> 35, no. 1 (2015): 3-28,\n            <a\n                href="https://onlinelibrary.wiley.com/doi/abs/10.1111/pbaf.12062"\n            >\n                https://onlinelibrary.wiley.com/doi/abs/10.1111/pbaf.12062</a>.\n        </p>\n    </div>\n    <div id="edn9">\n        <p>\n 9. \n            The National Bureau of Economic Research, “US Business Cycle\n            Expansions and Contractions,” Sept. 20, 2010,\n            <a href="http://www.nber.org/cycles.html">\n                http://www.nber.org/cycles.html</a>.\n        </p>\n    </div>\n    <div id="edn10">\n        <p>\n 10. \n            Jennifer Weiner, “Assessing the Affordability of State Debt,” New\n            England Public Policy Center at the Federal Reserve Bank of Boston\n            (2013),\n            <a\n                href="https://www.bostonfed.org/publications/new-england-public-policy-center-research-report/2013/assessing-the-affordability-of-state-debt.aspx"\n            >\n                https://www.bostonfed.org/publications/new-england-public-policy-center-research-report/2013/assessing-the-affordability-of-state-debt.aspx</a>.\n        </p>\n    </div>\n    <div id="edn11">\n        <p>\n 11. \n            In CAFRs, states report debt service payments from a variety of\n            funds. Using this information to construct a comparable measure of\n            debt service as a share of general fund revenue requires a detailed\n            understanding of each state’s reporting practices.\n        </p>\n    </div>\n    <div id="edn12">\n        <p>\n 12. \n            Jennifer Weiner, “A Guide to State Debt Affordability Studies:\n            Common Elements and Best Practices,” New England Public Policy\n            Center at the Federal Reserve Bank of Boston (2013),\n            <a\n                href="https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx"\n            >\n                https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx</a>\n            ; Charles Brecher, Kurt Richwerger, and Marcia Van Wagner, “An\nApproach to Measuring the Affordability of State Debt,”            <cite>Public Budgeting &amp; Finance</cite> 23, no. 4 (2003): 65-85,\n            <a\n                href="https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x"\n            >\n                https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x</a>.\n        </p>\n    </div>\n    <div id="edn13">\n        <p>\n 13. \n            W. Bartley Hildreth and Gerald J. Miller, “Debt and the Local\n            Economy: Problems in Benchmarking Local Government Debt\n            Affordability,” <cite>Public Budgeting &amp; Finance</cite> 22, no. 4\n            (2003): 99-113,\n            <a href="https://doi.org/10.1111/1540-5850.00091">\n                https://doi.org/10.1111/1540-5850.00091</a>.\n        </p>\n    </div>\n    <div id="edn14">\n        <p>\n 14. \n            Component units are entities that are legally separate from a state\n            but perform state functions. They typically include bodies such as\n            housing authorities, economic development corporations, and\n            universities.\n        </p>\n    </div>\n    <div id="edn15">\n        <p>\n 15. \n            Weiner, “A Guide.”\n        </p>\n    </div>\n    <div id="edn16">\n        <p>\n 16. \n            Bo Zhao and Wen Wang, “Transparency in State Debt Disclosure,” New\n            England Public Policy Center at the Federal Reserve Bank of Boston\n            (2017),\n            <a\n                href="https://www.bostonfed.org/publications/research-department-working-paper/2017/transparency-in-state-debt-disclosure.aspx"\n            >\n                https://www.bostonfed.org/publications/research-department-working-paper/2017/transparency-in-state-debt-disclosure.aspx</a>.\n        </p>\n    </div>\n</div>\n\n    </div>\n    </section>'},function(e,t){e.exports='<footer>\n\t\t<div>\n\t\t\t<p><strong>Download resources:</strong>\n\t\t\t\t\t<a class="pct-download" href="">Resource 1</a>\n\t\t\t\t\t<a class="pct-download" href="">Resource 2</a>\n\t\t\t\t</p></div>\n</footer>'},function(e,t,n){e.exports={static:"src-css--static"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
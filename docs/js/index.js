!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GTMPush=function(e){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:e})},t.publishWindowResize=function(e){var t;window.addEventListener("resize",function(){t||(t=setTimeout(function(){e.setState("resize",document.documentElement.clientWidth),t=null},350))},!1)};t.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(e,t){var n=this,r=t||0;return t&&(this.style.transition="opacity "+t+"s ease-in-out"),new Promise(function(t){var o=window.getComputedStyle(n).getPropertyValue("transition-duration")||r,i=1e3*parseFloat(o);n.fadeOutContent(),setTimeout(function(){n.innerHTML=e,n.classList.remove("no-opacity"),t(!0)},i)})})),t.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(e,t){if(this.length<=e)return this;var n=this.substr(0,e-1);return(t?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var e,t=0;if(0===this.length)return t;for(e=0;e<this.length;e++)t=(t<<5)-t+this.charCodeAt(e),t|=0;return t})),t.DOMHelpers={c:function(e){if(-1!==e.indexOf(".")||-1!==e.indexOf("#")){var t=e.match(/\.([^#.]*)/g)||[],n=e.match(/#([^.]*)/),r=e.match(/^([^.#]+)/),o=document.createElement(r[0]);return t.forEach(function(e){o.classList.add(e.replace(".",""))}),null!==n&&o.setAttribute("id",n[1]),o}return document.createElement(e)},q:function(e){return document.querySelector(e)},qa:function(e){return document.querySelectorAll(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0);var i=function(){function e(t,n){var r=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"!=typeof t)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=t,this.model=n.model,this.parent=n.parent,this.renderToSelector=n.renderToSelector,this.container=o.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.el=this.prerender(arguments),this.isReady=new Promise(function(e,t){r.resolve=e,r.reject=t})}return r(e,[{key:"prerender",value:function(){var e=o.DOMHelpers.q(this.selector);return e&&!this.rerender?(this.prerendered=!0,e):e?(e.innerHTML="",e):o.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),e}();t.default=i},function(e,t,n){const r=n(3),o={};function i(){console.log(o)}Array.prototype.compare=Array.prototype.compare||function(e){if(this.length!=e.length)return!1;if(0===this.length&&0===e.length)return!0;console.log("in compare"),console.log(this);for(var t=0;t<e.length;t++)if(this[t]!==e[t])return!1;return!0},t.stateModule={logState:i,getState:function(e){return void 0!==o[e]?o[e][0]:void 0},getPreviousState:function(e){return void 0!==o[e]&&void 0!==o[e][1]?o[e][1]:void 0},setState:function(e,t){void 0===o[e]?(o[e]=[t],r.publish(e,t),i()):("string"==typeof t||"number"==typeof t?o[e][0]!==t:!Array.isArray(t)||!Array.isArray(o[e][0])||!t.compare(o[e][0]))&&(o[e].unshift(t),r.publish(e,t),i(),o[e].length>2&&(o[e].length=2))}}},function(e,t,n){(function(e){!function(n,r){"use strict";var o={};n.PubSub=o;var i=n.define;!function(e){var t={},n=-1;function r(e){var t;for(t in e)if(e.hasOwnProperty(t))return!0;return!1}function o(e,t,n){try{e(t,n)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function i(e,t,n){e(t,n)}function a(e,n,r,a){var s,l=t[n],p=a?i:o;if(t.hasOwnProperty(n))for(s in l)l.hasOwnProperty(s)&&p(l[s],e,r)}function s(e,n,o,i){var s=function(e,t,n){return function(){var r=String(e),o=r.lastIndexOf(".");for(a(e,e,t,n);-1!==o;)r=r.substr(0,o),o=r.lastIndexOf("."),a(e,r,t,n)}}(e="symbol"==typeof e?e.toString():e,n,i),l=function(e){var n=String(e),o=Boolean(t.hasOwnProperty(n)&&r(t[n])),i=n.lastIndexOf(".");for(;!o&&-1!==i;)n=n.substr(0,i),i=n.lastIndexOf("."),o=Boolean(t.hasOwnProperty(n)&&r(t[n]));return o}(e);return!!l&&(!0===o?s():setTimeout(s,0),!0)}e.publish=function(t,n){return s(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return s(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,r){if("function"!=typeof r)return!1;e="symbol"==typeof e?e.toString():e,t.hasOwnProperty(e)||(t[e]={});var o="uid_"+String(++n);return t[e][o]=r,o},e.subscribeOnce=function(t,n){var r=e.subscribe(t,function(){e.unsubscribe(r),n.apply(this,arguments)});return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)t.hasOwnProperty(n)&&0===n.indexOf(e)&&delete t[n]},e.unsubscribe=function(n){var r,o,i,a="string"==typeof n&&(t.hasOwnProperty(n)||function(e){var n;for(n in t)if(t.hasOwnProperty(n)&&0===n.indexOf(e))return!0;return!1}(n)),s=!a&&"string"==typeof n,l="function"==typeof n,p=!1;if(!a){for(r in t)if(t.hasOwnProperty(r)){if(o=t[r],s&&o[n]){delete o[n],p=n;break}if(l)for(i in o)o.hasOwnProperty(i)&&o[i]===n&&(delete o[i],p=!0)}return p}e.clearSubscriptions(n)}}(o),"function"==typeof i&&i.amd?i(function(){return o}):(void 0!==e&&e.exports&&(t=e.exports=o),t.PubSub=o,e.exports=t=o)}("object"==typeof window&&window||this)}).call(this,n(14)(e))},function(e,t,n){e.exports={compareColor1:"src-components-comparison--compareColor1",compareColor2:"src-components-comparison--compareColor2",chartContainer:"src-components-comparison--chartContainer",chartLabel:"src-components-comparison--chartLabel",chartLabelText:"src-components-comparison--chartLabelText",chartLabel1:"src-components-comparison--chartLabel1",chartLabel2:"src-components-comparison--chartLabel2",barContainer:"src-components-comparison--barContainer",barContainer1:"src-components-comparison--barContainer1",barContainer2:"src-components-comparison--barContainer2",dataLabel:"src-components-comparison--dataLabel"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r};var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),o(t,[{key:"prerender",value:function(){var e=this,n=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.matches=[],this.matches[0]=this.model.data.find(function(t){return t.code===e.data.comparison[0]}),this.matches[1]=this.model.data.find(function(t){return t.code===e.data.comparison[1]}),this.prerendered&&this.rerender,n}},{key:"update",value:function(e,t){this.matches[e]=this.model.data.find(function(e){return e.code===t})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(26)),i=a(n(1));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,[{key:"prerender",value:function(){var e=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(e.classList.add(o.default.bar,o.default["barColor"+this.data.color]),e.style.transform="translateX("+("FiftyStateView"===this.parent.name?100*this.placeZero(this.data.field)+"%":0)+") scaleX("+this.linearScale(this.data.d,this.data.field)+")",e)}},{key:"linearScale",value:function(e,t){var n=this.model.types.find(function(e){return e.field===t}),r="FiftyStateView"!==this.parent.name&&"percent"===n.type?e[t]/1:(e[t]-n.min)/n.spread,o=this.placeZero(t),i=n.crossesZero||"FiftyStateView"!==this.parent.name&&"percent"===n.type?0:.01;return"FiftyStateView"!==this.parent.name?i+r*(1-i):i+r*(1-i)-o}},{key:"placeZero",value:function(e){var t=this.model.types.find(function(t){return t.field===e}),n=(0-t.min)/t.spread;return n>0?n:0}},{key:"checkIfZero",value:function(){0===this.data.d[this.data.field]?this.el.parentNode.classList.add(o.default.isZero):this.el.parentNode.classList.remove(o.default.isZero)}},{key:"update",value:function(e){var t=this;this.el=document.querySelector(".js-bar-compare-"+this.data.field+"-"+e),this.checkIfZero(),window.requestAnimationFrame(function(){t.el.style.transform="translateX("+("FiftyStateView"===t.parent.name?100*t.placeZero(t.data.field)+"%":0)+") scaleX("+t.linearScale(t.data.d,t.data.field)+")"})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatValue=function(e,t){var n,r=this.model.types.find(function(e){return e.field===t}),o=r.type,i=void 0!==r.decimals?r.decimals:"number"===o?1:"currency"===o?2:"percent"===o?1:void 0,a=e[t];switch(o){case"number":n=a.toLocaleString("en-US",{minimumFractionDigits:i});break;case"currency":n=0===i?Math.round(a).toLocaleString("en-US",{style:o,currency:"USD"}).slice(0,-3):a.toLocaleString("en-US",{style:o,currency:"USD"});break;case"percent":n=a.toLocaleString("en-US",{style:o,minimumFractionDigits:i});break;default:n="[unformatted]"+a}return n}},function(e,t,n){var r=n(28),o=n(3),i={};function a(e,t){var n=r(t.toString());return{token:"sub"+r(e+t),fn:n}}e.exports={logSubs:function(){console.log(i)},setSubs:function(e){e.forEach(function(e){var t=e[0],n=e[1],r=a(t,n);if(void 0===i[r.fn]&&(i[r.fn]={}),void 0!==i[r.fn][t])throw"Subscription token is already in use.";i[r.fn][t]=o.subscribe(t,n)})},cancelSub:function(e,t){var n=a(e,t);if(void 0===i[n.fn]||void 0===i[n.fn][e])throw"Subscription does not exist.";o.unsubscribe(i[n.fn][e]),delete i[n.fn][e],0===Object.keys(i[n.fn]).length&&delete i[n.fn]}}},function(e,t,n){"use strict";n.r(t);function r(){}function o(e,t){var n=new r;if(e instanceof r)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var o,i=-1,a=e.length;if(null==t)for(;++i<a;)n.set(i,e[i]);else for(;++i<a;)n.set(t(o=e[i],i,e),o)}else if(e)for(var s in e)n.set(s,e[s]);return n}r.prototype=o.prototype={constructor:r,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var i=o,a=function(){var e,t,n,r=[],o=[];function a(n,o,s,l){if(o>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var p,c,u,d=-1,f=n.length,h=r[o++],m=i(),v=s();++d<f;)(u=m.get(p=h(c=n[d])+""))?u.push(c):m.set(p,[c]);return m.each(function(e,t){l(v,t,a(e,o,s,l))}),v}return n={object:function(e){return a(e,0,s,l)},map:function(e){return a(e,0,p,c)},entries:function(e){return function e(n,i){if(++i>r.length)return n;var a,s=o[i-1];return null!=t&&i>=r.length?a=n.entries():(a=[],n.each(function(t,n){a.push({key:n,values:e(t,i)})})),null!=s?a.sort(function(e,t){return s(e.key,t.key)}):a}(a(e,0,p,c),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return o[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function s(){return{}}function l(e,t,n){e[t]=n}function p(){return i()}function c(e,t,n){e.set(t,n)}function u(){}var d=i.prototype;function f(e,t){var n=new u;if(e instanceof u)e.each(function(e){n.add(e)});else if(e){var r=-1,o=e.length;if(null==t)for(;++r<o;)n.add(e[r]);else for(;++r<o;)n.add(t(e[r],r,e))}return n}u.prototype=f.prototype={constructor:u,has:d.has,add:function(e){return this["$"+(e+="")]=e,this},remove:d.remove,clear:d.clear,values:d.keys,size:d.size,empty:d.empty,each:d.each};var h=f,m=function(e){var t=[];for(var n in e)t.push(n);return t},v=function(e){var t=[];for(var n in e)t.push(e[n]);return t},y=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t};n.d(t,"nest",function(){return a}),n.d(t,"set",function(){return h}),n.d(t,"map",function(){return i}),n.d(t,"keys",function(){return m}),n.d(t,"values",function(){return v}),n.d(t,"entries",function(){return y})},function(e,t,n){"use strict";(function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.7
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],o=0,i=0;i<r.length;i+=1)if(n&&navigator.userAgent.indexOf(r[i])>=0){o=1;break}var a=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},o))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function l(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function p(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=l(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:c(p(e))}var u=n&&!(!window.MSInputMethodContext||!document.documentMode),d=n&&/MSIE 10/.test(navigator.userAgent);function f(e){return 11===e?u:10===e?d:u||d}function h(e){if(!e)return document.documentElement;for(var t=f(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===l(n,"position")?h(n):n:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function v(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,i=document.createRange();i.setStart(r,0),i.setEnd(o,0);var a,s,l=i.commonAncestorContainer;if(e!==l&&t!==l||r.contains(o))return"BODY"===(s=(a=l).nodeName)||"HTML"!==s&&h(a.firstElementChild)!==a?h(l):l;var p=m(e);return p.host?v(p.host,t):v(e,m(t).host)}function y(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function b(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function g(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],f(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function w(e){var t=e.body,n=e.documentElement,r=f(10)&&getComputedStyle(n);return{height:g("Height",t,n,r),width:g("Width",t,n,r)}}var _=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},x=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),k=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function O(e){return S({},e,{right:e.left+e.width,bottom:e.top+e.height})}function C(e){var t={};try{if(f(10)){t=e.getBoundingClientRect();var n=y(e,"top"),r=y(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},i="HTML"===e.nodeName?w(e.ownerDocument):{},a=i.width||e.clientWidth||o.right-o.left,s=i.height||e.clientHeight||o.bottom-o.top,p=e.offsetWidth-a,c=e.offsetHeight-s;if(p||c){var u=l(e);p-=b(u,"x"),c-=b(u,"y"),o.width-=p,o.height-=c}return O(o)}function E(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=f(10),o="HTML"===t.nodeName,i=C(e),a=C(t),s=c(e),p=l(t),u=parseFloat(p.borderTopWidth,10),d=parseFloat(p.borderLeftWidth,10);n&&o&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var h=O({top:i.top-a.top-u,left:i.left-a.left-d,width:i.width,height:i.height});if(h.marginTop=0,h.marginLeft=0,!r&&o){var m=parseFloat(p.marginTop,10),v=parseFloat(p.marginLeft,10);h.top-=u-m,h.bottom-=u-m,h.left-=d-v,h.right-=d-v,h.marginTop=m,h.marginLeft=v}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=y(t,"top"),o=y(t,"left"),i=n?-1:1;return e.top+=r*i,e.bottom+=r*i,e.left+=o*i,e.right+=o*i,e}(h,t)),h}function T(e){if(!e||!e.parentElement||f())return document.documentElement;for(var t=e.parentElement;t&&"none"===l(t,"transform");)t=t.parentElement;return t||document.documentElement}function L(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i={top:0,left:0},a=o?T(e):v(e,t);if("viewport"===r)i=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=E(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),i=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:y(n),s=t?0:y(n,"left");return O({top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:o,height:i})}(a,o);else{var s=void 0;"scrollParent"===r?"BODY"===(s=c(p(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===r?e.ownerDocument.documentElement:r;var u=E(s,a,o);if("HTML"!==s.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===l(t,"position"))return!0;var r=p(t);return!!r&&e(r)}(a))i=u;else{var d=w(e.ownerDocument),f=d.height,h=d.width;i.top+=u.top-u.marginTop,i.bottom=f+u.top,i.left+=u.left-u.marginLeft,i.right=h+u.left}}var m="number"==typeof(n=n||0);return i.left+=m?n:n.left||0,i.top+=m?n:n.top||0,i.right-=m?n:n.right||0,i.bottom-=m?n:n.bottom||0,i}function A(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=L(n,r,i,o),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map(function(e){return S({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),p=l.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=p.length>0?p[0].key:l[0].key,u=e.split("-")[1];return c+(u?"-"+u:"")}function P(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return E(n,r?T(t):v(t,n),r)}function j(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function D(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function M(e,t,n){n=n.split("-")[0];var r=j(e),o={width:r.width,height:r.height},i=-1!==["right","left"].indexOf(n),a=i?"top":"left",s=i?"left":"top",l=i?"height":"width",p=i?"width":"height";return o[a]=t[a]+t[l]/2-r[l]/2,o[s]=n===s?t[s]-r[p]:t[D(s)],o}function I(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function R(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=I(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&s(n)&&(t.offsets.popper=O(t.offsets.popper),t.offsets.reference=O(t.offsets.reference),t=n(t,e))}),t}function B(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],i=o?""+o+n:e;if(void 0!==document.body.style[i])return i}return null}function N(e){var t=e.ownerDocument;return t?t.defaultView:window}function F(e,t,n,r){n.updateBound=r,N(e).addEventListener("resize",n.updateBound,{passive:!0});var o=c(e);return function e(t,n,r,o){var i="BODY"===t.nodeName,a=i?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),i||e(c(a.parentNode),n,r,o),o.push(a)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function q(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,N(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function z(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function Y(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&z(t[n])&&(r="px"),e.style[n]=t[n]+r})}var W=n&&/Firefox/i.test(navigator.userAgent);function U(e,t,n){var r=I(e,function(e){return e.name===t}),o=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!o){var i="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return o}var X=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],V=X.slice(3);function G(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=V.indexOf(e),r=V.slice(n+1).concat(V.slice(0,n));return t?r.reverse():r}var K={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Z(e,t,n,r){var o=[0,0],i=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(I(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,p=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(p=p.map(function(e,r){var o=(1===r?!i:i)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+o[1],a=o[2];if(!i)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return O(s)[t]/100*i}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i;return i}(e,o,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){z(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))})}),o}var $={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,i=o.reference,a=o.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",p=s?"width":"height",c={start:k({},l,i[l]),end:k({},l,i[l]+i[p]-a[p])};e.offsets.popper=S({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,o=e.offsets,i=o.popper,a=o.reference,s=r.split("-")[0],l=void 0;return l=z(+n)?[+n,0]:Z(n,i,a,s),"left"===s?(i.top+=l[0],i.left-=l[1]):"right"===s?(i.top+=l[0],i.left+=l[1]):"top"===s?(i.left+=l[0],i.top-=l[1]):"bottom"===s&&(i.left+=l[0],i.top+=l[1]),e.popper=i,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||h(e.instance.popper);e.instance.reference===n&&(n=h(n));var r=H("transform"),o=e.instance.popper.style,i=o.top,a=o.left,s=o[r];o.top="",o.left="",o[r]="";var l=L(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=i,o.left=a,o[r]=s,t.boundaries=l;var p=t.priority,c=e.offsets.popper,u={primary:function(e){var n=c[e];return c[e]<l[e]&&!t.escapeWithReference&&(n=Math.max(c[e],l[e])),k({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>l[e]&&!t.escapeWithReference&&(r=Math.min(c[n],l[e]-("right"===e?c.width:c.height))),k({},n,r)}};return p.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=S({},c,u[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),s=a?"right":"bottom",l=a?"left":"top",p=a?"width":"height";return n[s]<i(r[l])&&(e.offsets.popper[l]=i(r[l])-n[p]),n[l]>i(r[s])&&(e.offsets.popper[l]=i(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!U(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],i=e.offsets,a=i.popper,s=i.reference,p=-1!==["left","right"].indexOf(o),c=p?"height":"width",u=p?"Top":"Left",d=u.toLowerCase(),f=p?"left":"top",h=p?"bottom":"right",m=j(r)[c];s[h]-m<a[d]&&(e.offsets.popper[d]-=a[d]-(s[h]-m)),s[d]+m>a[h]&&(e.offsets.popper[d]+=s[d]+m-a[h]),e.offsets.popper=O(e.offsets.popper);var v=s[d]+s[c]/2-m/2,y=l(e.instance.popper),b=parseFloat(y["margin"+u],10),g=parseFloat(y["border"+u+"Width"],10),w=v-e.offsets.popper[d]-b-g;return w=Math.max(Math.min(a[c]-m,w),0),e.arrowElement=r,e.offsets.arrow=(k(n={},d,Math.round(w)),k(n,f,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(B(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=L(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=D(r),i=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case K.FLIP:a=[r,o];break;case K.CLOCKWISE:a=G(r);break;case K.COUNTERCLOCKWISE:a=G(r,!0);break;default:a=t.behavior}return a.forEach(function(s,l){if(r!==s||a.length===l+1)return e;r=e.placement.split("-")[0],o=D(r);var p=e.offsets.popper,c=e.offsets.reference,u=Math.floor,d="left"===r&&u(p.right)>u(c.left)||"right"===r&&u(p.left)<u(c.right)||"top"===r&&u(p.bottom)>u(c.top)||"bottom"===r&&u(p.top)<u(c.bottom),f=u(p.left)<u(n.left),h=u(p.right)>u(n.right),m=u(p.top)<u(n.top),v=u(p.bottom)>u(n.bottom),y="left"===r&&f||"right"===r&&h||"top"===r&&m||"bottom"===r&&v,b=-1!==["top","bottom"].indexOf(r),g=!!t.flipVariations&&(b&&"start"===i&&f||b&&"end"===i&&h||!b&&"start"===i&&m||!b&&"end"===i&&v);(d||y||g)&&(e.flipped=!0,(d||y)&&(r=a[l+1]),g&&(i=function(e){return"end"===e?"start":"start"===e?"end":e}(i)),e.placement=r+(i?"-"+i:""),e.offsets.popper=S({},e.offsets.popper,M(e.instance.popper,e.offsets.reference,e.placement)),e=R(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,i=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return o[a?"left":"top"]=i[n]-(s?o[a?"width":"height"]:0),e.placement=D(t),e.offsets.popper=O(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!U(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=I(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,i=I(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==i?i:t.gpuAcceleration,s=h(e.instance.popper),l=C(s),p={position:o.position},c=function(e,t){var n=e.offsets,r=n.popper,o=n.reference,i=Math.round,a=Math.floor,s=function(e){return e},l=i(o.width),p=i(r.width),c=-1!==["left","right"].indexOf(e.placement),u=-1!==e.placement.indexOf("-"),d=t?c||u||l%2==p%2?i:a:s,f=t?i:s;return{left:d(l%2==1&&p%2==1&&!u&&t?r.left-1:r.left),top:f(r.top),bottom:f(r.bottom),right:d(r.right)}}(e,window.devicePixelRatio<2||!W),u="bottom"===n?"top":"bottom",d="right"===r?"left":"right",f=H("transform"),m=void 0,v=void 0;if(v="bottom"===u?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-l.height+c.bottom:c.top,m="right"===d?"HTML"===s.nodeName?-s.clientWidth+c.right:-l.width+c.right:c.left,a&&f)p[f]="translate3d("+m+"px, "+v+"px, 0)",p[u]=0,p[d]=0,p.willChange="transform";else{var y="bottom"===u?-1:1,b="right"===d?-1:1;p[u]=v*y,p[d]=m*b,p.willChange=u+", "+d}var g={"x-placement":e.placement};return e.attributes=S({},g,e.attributes),e.styles=S({},p,e.styles),e.arrowStyles=S({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return Y(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&Y(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var i=P(o,t,e,n.positionFixed),a=A(n.placement,i,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),Y(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},J=function(){function e(t,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};_(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=a(this.update.bind(this)),this.options=S({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(S({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){r.options.modifiers[t]=S({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return S({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}return x(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=P(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=A(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=M(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=R(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,B(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return q.call(this)}}]),e}();J.Utils=("undefined"!=typeof window?window:e).PopperUtils,J.placements=X,J.Defaults=$,t.a=J}).call(this,n(30))},function(e,t,n){"use strict";n(0);var r,o=n(12),i=(r=o)&&r.__esModule?r:{default:r};n(43);var a=new i.default("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&a.prerender(),a.init()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(9)),i=b(n(13)),a=n(2),s=n(0),l=b(n(15)),p=b(n(16)),c=b(n(17)),u=b(n(18)),d=b(n(19)),f=b(n(20)),h=b(n(31)),m=b(n(39)),v=b(n(41)),y=b(n(42));function b(e){return e&&e.__esModule?e:{default:e}}function g(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(0,s.publishWindowResize)(a.stateModule),l.default.polyfill();var w={groups:c.default,types:u.default,dict:d.default},_=[],x=0;function k(){var e=this;return new Promise(function(t,n){var r=e.el;i.default.parse(""+p.default,{download:!0,dynamicTyping:!0,header:!0,fastMode:!0,skipEmptyLines:!0,beforeFirstChunk:function(e){var t=e.hashCode();window.IS_PRERENDERING?r.setAttribute("data-data-hash",t):t.toString()!==r.getAttribute("data-data-hash")&&(r.setAttribute("data-data-mismatch",!0),console.log("data mismatch"),w.isMismatched=!0)},complete:function(n){_.length=0;var r=n.data;w.data=r,w.types.forEach(function(e){if("text"!==e.type){var t=r.map(function(t){return t[e.field]}).filter(function(e){return null!==e});e.max=Math.max.apply(Math,g(t)),e.min=Math.min.apply(Math,g(t)),e.spread=e.max-e.min,e.crossesZero=e.max*e.min<=0}}),w.typesNested=o.nest().key(function(e){return e.group}).entries(w.types),console.log(w),_.push(e.createComponent(w,f.default,"div#comparison-view",{renderToSelector:"#section-comparison .js-inner-content",rerenderOnDataMismatch:!0,parent:e}),e.createComponent(w,h.default,"div#fifty-state-view",{renderToSelector:"#fifty-state-container",rerenderOnDataMismatch:!0,parent:e})),t(!0)},error:function(e){n(e)}})})}var S=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,m.default),r(t,[{key:"prerender",value:function(){console.log("prerender"),this.el.insertAdjacentHTML("beforeend",v.default),this.el.insertAdjacentHTML("beforeend",y.default),k.call(this).then(function(){console.log(w),_.forEach(function(e){e.container.appendChild(e.el)})})}},{key:"init",value:function(){var e=this;console.log("init"),function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this),this.attachSectionOpenClose(),this.initStaticAnchorLinks(),k.call(this).then(function(){_.forEach(function(t){t.init(e)})})}},{key:"initStaticAnchorLinks",value:function(){document.querySelectorAll(".pct-static-anchor").forEach(function(e){var t=document.querySelector("#"+e.href.split("#")[1]);e.addEventListener("click",function(e){e.preventDefault(),window.scrollTo({top:t.getBoundingClientRect().top+window.pageYOffset-120,behavior:"smooth"})})})}},{key:"attachSectionOpenClose",value:function(){function e(){console.log(this.parentNode),this.parentNode.querySelector(".js-inner-content").classList.toggle("pct-hide"),this.classList.toggle("pct-is-closed"),this.blur(),(0,s.GTMPush)("StateDebt|OpenClose|"+this.innerText)}document.querySelectorAll("#pew-app section > h2").forEach(function(t){t.addEventListener("click",e),t.addEventListener("keyup",function(t){13===t.keyCode&&e.call(this)})})}},{key:"returnMoreLink",value:function(e){function t(){window.scrollTo({top:x,behavior:"smooth"}),this.removeEventListener("click",t),this.classList.remove("showGoBack")}console.log(e);var n=document.createElement("a");"credit2015"!==e&&"credit2018"!==e||(e="credit_rating");var r=document.querySelector(".js-"+e);return n.innerText="more",n.href="#"+e,n.addEventListener("click",function(n){if(n.preventDefault(),x=window.pageYOffset,r){(0,s.GTMPush)("StateDebt|MoreLink|"+e);var o=r.getBoundingClientRect().top+x-120;window.scrollTo({top:o,behavior:"smooth"}),document.querySelectorAll(".showGoBack").forEach(function(e){e.classList.remove("showGoBack")}),r.classList.add("showGoBack"),r.addEventListener("click",t)}}),r?n:null}}]),t}();t.default=S},function(e,t,n){var r,o,i;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),o=[],void 0===(i="function"==typeof(r=function(){"use strict";var e,t,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},r=!n.document&&!!n.postMessage,o=r&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),i=!1,a={},s=0,l={parse:function(t,r){var o=(r=r||{}).dynamicTyping||!1;if(k(o)&&(r.dynamicTypingFunction=o,o={}),r.dynamicTyping=o,r.transform=!!k(r.transform)&&r.transform,r.worker&&l.WORKERS_SUPPORTED){var p=function(){if(!l.WORKERS_SUPPORTED)return!1;if(!i&&null===l.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var t=l.SCRIPT_PATH||e;t+=(-1!==t.indexOf("?")?"&":"?")+"papaworker";var r=new n.Worker(t);return r.onmessage=b,r.id=s++,a[r.id]=r}();return p.userStep=r.step,p.userChunk=r.chunk,p.userComplete=r.complete,p.userError=r.error,r.step=k(r.step),r.chunk=k(r.chunk),r.complete=k(r.complete),r.error=k(r.error),delete r.worker,void p.postMessage({input:t,config:r,workerId:p.id})}var c=null;return l.NODE_STREAM_INPUT,"string"==typeof t?c=r.download?new u(r):new f(r):!0===t.readable&&k(t.read)&&k(t.on)?c=new h(r):(n.File&&t instanceof File||t instanceof Object)&&(c=new d(r)),c.stream(t)},unparse:function(e,t){var n=!1,r=!0,o=",",i="\r\n",a='"',s=!1;"object"==typeof t&&("string"!=typeof t.delimiter||l.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(o=t.delimiter),("boolean"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(s=t.skipEmptyLines),"string"==typeof t.newline&&(i=t.newline),"string"==typeof t.quoteChar&&(a=t.quoteChar),"boolean"==typeof t.header&&(r=t.header));var p=new RegExp(v(a),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,s);if("object"==typeof e[0])return u(c(e[0]),e,s)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:c(e.data[0])),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],s);throw"exception: Unable to serialize unrecognized input";function c(e){if("object"!=typeof e)return[];var t=[];for(var n in e)t.push(n);return t}function u(e,t,n){var a="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var s=Array.isArray(e)&&0<e.length,l=!Array.isArray(t[0]);if(s&&r){for(var p=0;p<e.length;p++)0<p&&(a+=o),a+=d(e[p],p);0<t.length&&(a+=i)}for(var c=0;c<t.length;c++){var u=s?e.length:t[c].length,f=!1,h=s?0===Object.keys(t[c]).length:0===t[c].length;if(n&&!s&&(f="greedy"===n?""===t[c].join("").trim():1===t[c].length&&0===t[c][0].length),"greedy"===n&&s){for(var m=[],v=0;v<u;v++){var y=l?e[v]:v;m.push(t[c][y])}f=""===m.join("").trim()}if(!f){for(var b=0;b<u;b++){0<b&&!h&&(a+=o);var g=s&&l?e[b]:b;a+=d(t[c][g],b)}c<t.length-1&&(!n||0<u&&!h)&&(a+=i)}}return a}function d(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);e=e.toString().replace(p,a+a);var r="boolean"==typeof n&&n||Array.isArray(n)&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(-1<e.indexOf(t[n]))return!0;return!1}(e,l.BAD_DELIMITERS)||-1<e.indexOf(o)||" "===e.charAt(0)||" "===e.charAt(e.length-1);return r?a+e+a:e}}};if(l.RECORD_SEP=String.fromCharCode(30),l.UNIT_SEP=String.fromCharCode(31),l.BYTE_ORDER_MARK="\ufeff",l.BAD_DELIMITERS=["\r","\n",'"',l.BYTE_ORDER_MARK],l.WORKERS_SUPPORTED=!r&&!!n.Worker,l.SCRIPT_PATH=null,l.NODE_STREAM_INPUT=1,l.LocalChunkSize=10485760,l.RemoteChunkSize=5242880,l.DefaultDelimiter=",",l.Parser=y,l.ParserHandle=m,l.NetworkStreamer=u,l.FileStreamer=d,l.StringStreamer=f,l.ReadableStreamStreamer=h,n.jQuery){var p=n.jQuery;p.fn.parse=function(e){var t=e.config||{},r=[];return this.each(function(e){if("INPUT"!==p(this).prop("tagName").toUpperCase()||"file"!==p(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var o=0;o<this.files.length;o++)r.push({file:this.files[o],inputElem:this,instanceConfig:p.extend({},t)})}),o(),this;function o(){if(0!==r.length){var t,n,o,a=r[0];if(k(e.before)){var s=e.before(a.file,a.inputElem);if("object"==typeof s){if("abort"===s.action)return t=a.file,n=a.inputElem,o=s.reason,void(k(e.error)&&e.error({name:"AbortError"},t,n,o));if("skip"===s.action)return void i();"object"==typeof s.config&&(a.instanceConfig=p.extend(a.instanceConfig,s.config))}else if("skip"===s)return void i()}var c=a.instanceConfig.complete;a.instanceConfig.complete=function(e){k(c)&&c(e,a.file,a.inputElem),i()},l.parse(a.file,a.instanceConfig)}else k(e.complete)&&e.complete()}function i(){r.splice(0,1),o()}}}function c(e){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=_(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new m(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&k(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1;var i=this._partialLine+e;this._partialLine="";var a=this._handle.parse(i,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=a.meta.cursor;this._finished||(this._partialLine=i.substring(s-this._baseIndex),this._baseIndex=s),a&&a.data&&(this._rowCount+=a.data.length);var p=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)n.postMessage({results:a,workerId:l.WORKER_ID,finished:p});else if(k(this._config.chunk)&&!t){if(this._config.chunk(a,this._handle),this._handle.paused()||this._handle.aborted())return;a=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(a.data),this._completeResults.errors=this._completeResults.errors.concat(a.errors),this._completeResults.meta=a.meta),this._completed||!p||!k(this._config.complete)||a&&a.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),p||a&&a.meta.paused||this._nextChunk(),a}},this._sendError=function(e){k(this._config.error)?this._config.error(e):o&&this._config.error&&n.postMessage({workerId:l.WORKER_ID,error:e,finished:!1})}}function u(e){var t;(e=e||{}).chunkSize||(e.chunkSize=l.RemoteChunkSize),c.call(this,e),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),r||(t.onload=x(this._chunkLoaded,this),t.onerror=x(this._chunkError,this)),t.open("GET",this._input,!r),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var n in e)t.setRequestHeader(n,e[n])}if(this._config.chunkSize){var o=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+o),t.setRequestHeader("If-None-Match","webkit-no-cache")}try{t.send()}catch(e){this._chunkError(e.message)}r&&0===t.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var e;4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(e=t.getResponseHeader("Content-Range"))?-1:parseInt(e.substr(e.lastIndexOf("/")+1))),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(new Error(n))}}function d(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=l.LocalChunkSize),c.call(this,e);var r="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,r?((t=new FileReader).onload=x(this._chunkLoaded,this),t.onerror=x(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var o=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,o)}var i=t.readAsText(e,this._config.encoding);r||this._chunkLoaded({target:{result:i}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function f(e){var t;c.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,n=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(n)}}}function h(e){c.call(this,e=e||{});var t=[],n=!0,r=!1;this.pause=function(){c.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){c.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):n=!0},this._streamData=x(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=x(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=x(function(){this._streamCleanUp(),r=!0,this._streamData("")},this),this._streamCleanUp=x(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function m(e){var t,n,r,o=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,i=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,a=this,s=0,p=0,c=!1,u=!1,d=[],f={data:[],errors:[],meta:{}};if(k(e.step)){var h=e.step;e.step=function(t){if(f=t,g())b();else{if(b(),0===f.data.length)return;s+=t.data.length,e.preview&&s>e.preview?n.abort():h(f,a)}}}function m(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function b(){if(f&&r&&(x("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+l.DefaultDelimiter+"'"),r=!1),e.skipEmptyLines)for(var t=0;t<f.data.length;t++)m(f.data[t])&&f.data.splice(t--,1);return g()&&function(){if(f){for(var t=0;g()&&t<f.data.length;t++)for(var n=0;n<f.data[t].length;n++){var r=f.data[t][n];e.trimHeaders&&(r=r.trim()),d.push(r)}f.data.splice(0,1)}}(),function(){if(!f||!e.header&&!e.dynamicTyping&&!e.transform)return f;for(var t=0;t<f.data.length;t++){var n,r=e.header?{}:[];for(n=0;n<f.data[t].length;n++){var o=n,i=f.data[t][n];e.header&&(o=n>=d.length?"__parsed_extra":d[n]),e.transform&&(i=e.transform(i,o)),i=w(o,i),"__parsed_extra"===o?(r[o]=r[o]||[],r[o].push(i)):r[o]=i}f.data[t]=r,e.header&&(n>d.length?x("FieldMismatch","TooManyFields","Too many fields: expected "+d.length+" fields but parsed "+n,p+t):n<d.length&&x("FieldMismatch","TooFewFields","Too few fields: expected "+d.length+" fields but parsed "+n,p+t))}return e.header&&f.meta&&(f.meta.fields=d),p+=f.data.length,f}()}function g(){return e.header&&0===d.length}function w(t,n){return r=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[r]&&(e.dynamicTyping[r]=e.dynamicTypingFunction(r)),!0===(e.dynamicTyping[r]||e.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(o.test(n)?parseFloat(n):i.test(n)?new Date(n):""===n?null:n):n;var r}function x(e,t,n,r){f.errors.push({type:e,code:t,message:n,row:r})}this.parse=function(o,i,a){var s=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substr(0,1048576);var n=new RegExp(v(t)+"([^]*?)"+v(t),"gm"),r=(e=e.replace(n,"")).split("\r"),o=e.split("\n"),i=1<o.length&&o[0].length<r[0].length;if(1===r.length||i)return"\n";for(var a=0,s=0;s<r.length;s++)"\n"===r[s][0]&&a++;return a>=r.length/2?"\r\n":"\r"}(o,s)),r=!1,e.delimiter)k(e.delimiter)&&(e.delimiter=e.delimiter(o),f.meta.delimiter=e.delimiter);else{var p=function(t,n,r,o){for(var i,a,s,p=[",","\t","|",";",l.RECORD_SEP,l.UNIT_SEP],c=0;c<p.length;c++){var u=p[c],d=0,f=0,h=0;s=void 0;for(var v=new y({comments:o,delimiter:u,newline:n,preview:10}).parse(t),b=0;b<v.data.length;b++)if(r&&m(v.data[b]))h++;else{var g=v.data[b].length;f+=g,void 0!==s?1<g&&(d+=Math.abs(g-s),s=g):s=0}0<v.data.length&&(f/=v.data.length-h),(void 0===a||a<d)&&1.99<f&&(a=d,i=u)}return{successful:!!(e.delimiter=i),bestDelimiter:i}}(o,e.newline,e.skipEmptyLines,e.comments);p.successful?e.delimiter=p.bestDelimiter:(r=!0,e.delimiter=l.DefaultDelimiter),f.meta.delimiter=e.delimiter}var u=_(e);return e.preview&&e.header&&u.preview++,t=o,n=new y(u),f=n.parse(t,i,a),b(),c?{meta:{paused:!0}}:f||{meta:{paused:!1}}},this.paused=function(){return c},this.pause=function(){c=!0,n.abort(),t=t.substr(n.getCharIndex())},this.resume=function(){c=!1,a.streamer.parseChunk(t,!0)},this.aborted=function(){return u},this.abort=function(){u=!0,n.abort(),f.meta.aborted=!0,k(e.complete)&&e.complete(f),t=""}}function v(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function y(e){var t,n=(e=e||{}).delimiter,r=e.newline,o=e.comments,i=e.step,a=e.preview,s=e.fastMode,p=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(p=e.escapeChar),("string"!=typeof n||-1<l.BAD_DELIMITERS.indexOf(n))&&(n=","),o===n)throw"Comment character same as delimiter";!0===o?o="#":("string"!=typeof o||-1<l.BAD_DELIMITERS.indexOf(o))&&(o=!1),"\n"!==r&&"\r"!==r&&"\r\n"!==r&&(r="\n");var c=0,u=!1;this.parse=function(e,l,d){if("string"!=typeof e)throw"Input must be a string";var f=e.length,h=n.length,m=r.length,y=o.length,b=k(i),g=[],w=[],_=[],x=c=0;if(!e)return R();if(s||!1!==s&&-1===e.indexOf(t)){for(var S=e.split(r),O=0;O<S.length;O++){if(_=S[O],c+=_.length,O!==S.length-1)c+=r.length;else if(d)return R();if(!o||_.substr(0,y)!==o){if(b){if(g=[],j(_.split(n)),B(),u)return R()}else j(_.split(n));if(a&&a<=O)return g=g.slice(0,a),R(!0)}}return R()}for(var C,E=e.indexOf(n,c),T=e.indexOf(r,c),L=new RegExp(v(p)+v(t),"g");;)if(e[c]!==t)if(o&&0===_.length&&e.substr(c,y)===o){if(-1===T)return R();c=T+m,T=e.indexOf(r,c),E=e.indexOf(n,c)}else if(-1!==E&&(E<T||-1===T))_.push(e.substring(c,E)),c=E+h,E=e.indexOf(n,c);else{if(-1===T)break;if(_.push(e.substring(c,T)),I(T+m),b&&(B(),u))return R();if(a&&g.length>=a)return R(!0)}else for(C=c,c++;;){if(-1===(C=e.indexOf(t,C+1)))return d||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:g.length,index:c}),M();if(C===f-1)return M(e.substring(c,C).replace(L,t));if(t!==p||e[C+1]!==p){if(t===p||0===C||e[C-1]!==p){var A=D(-1===T?E:Math.min(E,T));if(e[C+1+A]===n){_.push(e.substring(c,C).replace(L,t)),c=C+1+A+h,E=e.indexOf(n,c),T=e.indexOf(r,c);break}var P=D(T);if(e.substr(C+1+P,m)===r){if(_.push(e.substring(c,C).replace(L,t)),I(C+1+P+m),E=e.indexOf(n,c),b&&(B(),u))return R();if(a&&g.length>=a)return R(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:g.length,index:c}),C++}}else C++}return M();function j(e){g.push(e),x=c}function D(t){var n=0;if(-1!==t){var r=e.substring(C+1,t);r&&""===r.trim()&&(n=r.length)}return n}function M(t){return d||(void 0===t&&(t=e.substr(c)),_.push(t),c=f,j(_),b&&B()),R()}function I(t){c=t,j(_),_=[],T=e.indexOf(r,c)}function R(e){return{data:g,errors:w,meta:{delimiter:n,linebreak:r,aborted:u,truncated:!!e,cursor:x+(l||0)}}}function B(){i(R()),g=[],w=[]}},this.abort=function(){u=!0},this.getCharIndex=function(){return c}}function b(e){var t=e.data,n=a[t.workerId],r=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var o={abort:function(){r=!0,g(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(k(n.userStep)){for(var i=0;i<t.results.data.length&&(n.userStep({data:[t.results.data[i]],errors:t.results.errors,meta:t.results.meta},o),!r);i++);delete t.results}else k(n.userChunk)&&(n.userChunk(t.results,o,t.file),delete t.results)}t.finished&&!r&&g(t.workerId,t.results)}function g(e,t){var n=a[e];k(n.userComplete)&&n.userComplete(t),n.terminate(),delete a[e]}function w(){throw"Not implemented."}function _(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var n in e)t[n]=_(e[n]);return t}function x(e,t){return function(){e.apply(t,arguments)}}function k(e){return"function"==typeof e}return o?n.onmessage=function(e){var t=e.data;if(void 0===l.WORKER_ID&&t&&(l.WORKER_ID=t.workerId),"string"==typeof t.input)n.postMessage({workerId:l.WORKER_ID,results:l.parse(t.input,t.config),finished:!0});else if(n.File&&t.input instanceof File||t.input instanceof Object){var r=l.parse(t.input,t.config);r&&n.postMessage({workerId:l.WORKER_ID,results:r,finished:!0})}}:l.WORKERS_SUPPORTED&&(t=document.getElementsByTagName("script"),e=t.length?t[t.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){i=!0},!0):i=!0),(u.prototype=Object.create(c.prototype)).constructor=u,(d.prototype=Object.create(c.prototype)).constructor=d,(f.prototype=Object.create(f.prototype)).constructor=f,(h.prototype=Object.create(c.prototype)).constructor=h,l})?r.apply(t,o):r)||(e.exports=i)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){!function(){"use strict";e.exports={polyfill:function(){var e=window,t=document;if(!("scrollBehavior"in t.documentElement.style&&!0!==e.__forceSmoothScrollPolyfill__)){var n,r=e.HTMLElement||e.Element,o=468,i={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:r.prototype.scroll||l,scrollIntoView:r.prototype.scrollIntoView},a=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,s=(n=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(n)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==p(arguments[0])?h.call(e,t.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):i.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(p(arguments[0])?i.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):h.call(e,t.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},r.prototype.scroll=r.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==p(arguments[0])){var e=arguments[0].left,t=arguments[0].top;h.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===t?this.scrollTop:~~t)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},r.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==p(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},r.prototype.scrollIntoView=function(){if(!0!==p(arguments[0])){var n=function(e){for(;e!==t.body&&!1===d(e);)e=e.parentNode||e.host;return e}(this),r=n.getBoundingClientRect(),o=this.getBoundingClientRect();n!==t.body?(h.call(this,n,n.scrollLeft+o.left-r.left,n.scrollTop+o.top-r.top),"fixed"!==e.getComputedStyle(n).position&&e.scrollBy({left:r.left,top:r.top,behavior:"smooth"})):e.scrollBy({left:o.left,top:o.top,behavior:"smooth"})}else i.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function l(e,t){this.scrollLeft=e,this.scrollTop=t}function p(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function c(e,t){return"Y"===t?e.clientHeight+s<e.scrollHeight:"X"===t?e.clientWidth+s<e.scrollWidth:void 0}function u(t,n){var r=e.getComputedStyle(t,null)["overflow"+n];return"auto"===r||"scroll"===r}function d(e){var t=c(e,"Y")&&u(e,"Y"),n=c(e,"X")&&u(e,"X");return t||n}function f(t){var n,r,i,s,l=(a()-t.startTime)/o;s=l=l>1?1:l,n=.5*(1-Math.cos(Math.PI*s)),r=t.startX+(t.x-t.startX)*n,i=t.startY+(t.y-t.startY)*n,t.method.call(t.scrollable,r,i),r===t.x&&i===t.y||e.requestAnimationFrame(f.bind(e,t))}function h(n,r,o){var s,p,c,u,d=a();n===t.body?(s=e,p=e.scrollX||e.pageXOffset,c=e.scrollY||e.pageYOffset,u=i.scroll):(s=n,p=n.scrollLeft,c=n.scrollTop,u=l),f({scrollable:s,method:u,startTime:d,startX:p,startY:c,x:r,y:o})}}}}()},function(e,t,n){e.exports=n.p+"data/data.csv?v=ddda10"},function(e){e.exports=["Borrowing practices","Fiscal conditions and infrastructure needs","Debt levels","Credit rating"]},function(e){e.exports=[{field:"debt_limit_type",type:"text",group:1,order:1,label:"General obligation debt limit type",tooltip:"The kind of limit the state has on general obligation borrowing, one of the most common types of debt issued by states. These limits affect how states borrow."},{field:"centralization",type:"percent",group:1,order:2,label:"Centralization",tooltip:"The degree to which borrowing is done by the state itself rather than by component units. Higher values mean borrowing in the state is more centralized."},{field:"state_local_division",type:"percent",group:1,order:3,label:"State-local borrowing division",tooltip:"The share of combined state and local debt issued by local governments. States in which local governments borrow less tend to have higher state debt levels."},{field:"revenue_volatility",type:"number",group:2,order:1,label:"Revenue volatility",tooltip:"A measure of variation in tax collections. Low scores mean that revenue levels are similar from year to year, while high scores indicate that revenue varies more. More volatile states should plan for greater uncertainty. "},{field:"ten_year_pop_growth",type:"percent",group:2,order:2,label:"Population growth",tooltip:"The 10-year population growth rate from 2008 to 2017. Growing populations are associated with greater infrastructure investment. "},{field:"debt_per_capita",type:"currency",decimals:0,group:3,order:1,label:"Debt per capita",tooltip:"Total debt relative to a state’s population."},{field:"debt_percent_SPI",type:"percent",group:3,order:2,label:"Debt as a percentage of state personal income",tooltip:"Total debt relative to state personal income, a measure of economic resources.",isDefaultSelection:!0},{field:"credit2015",type:"text",group:4,order:1,label:2015,tooltip:"S&P Global Rating’s general obligation or issuer credit rating."},{field:"credit2018",type:"text",group:4,order:2,label:2018,tooltip:"S&P Global Rating’s general obligation or issuer credit rating."},{field:"census",type:"text",group:null,order:null,label:"Census region and division",tooltip:"Policymakers are often interested in understanding trends in neighboring states, but borrowing practices often differ widely among states with shared borders."}]},function(e){e.exports={census:["N/A","Northeast—New England","Northeast—Middle Atlantic","Midwest—East North Central","Midwest—West North Central","South—South Atlantic","South—East South Central","South—West South Central","West—Mountain","West—Pacific"],credit2018:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"],credit2015:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=f(n(1));n(21);var i=f(n(22));n(23);var a=n(2),s=f(n(24)),l=f(n(25)),p=f(n(27)),c=f(n(8)),u=f(n(29)),d=n(0);function f(e){return e&&e.__esModule?e:{default:e}}var h=["US","AL"],m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.comparisons=[],this.model.groups.forEach(function(e,t){n.model.typesNested[t].values.forEach(function(e){var t;t="text"===e.type?n.parent.createComponent(n.model,s.default,"div.js-text-compare-"+e.field,{rerenderOnDataMismatch:!0,parent:n,data:{comparison:h,field:e.field}}):n.parent.createComponent(n.model,l.default,"div.js-text-compare-"+e.field,{rerenderOnDataMismatch:!0,parent:n,data:{comparison:h,field:e.field}}),n.comparisons.push(t)})}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.comparisons)),this.prerendered&&!this.rerender)return r;var o=0;return this.model.groups.forEach(function(e,t){var a=document.createElement("div");a.classList.add(i.default[e.cleanString()]),a.insertAdjacentHTML("afterbegin",'<h3 class="'+i.default.groupHeader+'">'+e+"</h3>");var s=document.createElement("div");s.classList.add(i.default.typeContainer,i.default[e.cleanString()]),n.model.typesNested[t].values.forEach(function(e){var t=document.createElement("div");t.classList.add(i.default.typeDiv,i.default[e.field]),t.insertAdjacentHTML("afterbegin",'<h4 class="'+i.default.typeHeader+" "+(e.tooltip?i.default.withTooltip:"withoutTooltip")+'" data-field="'+e.field+'" data-content="'+(e.tooltip?e.tooltip:"")+'">'+e.label+"</h4>"),t.appendChild(n.comparisons[o].el),o++,s.appendChild(t)}),a.appendChild(s),r.appendChild(a)}),r}},{key:"randomize",value:function(){var e,t,n=this.model.data.map(function(e){return e.code}),r=n.indexOf("US");n.splice(r,1),a.stateModule.setState("compare.1",n[(e=0,t=n.length-1,Math.floor(Math.random()*(t-e+1)+e))])}},{key:"init",value:function(){var e=this;this.initializeAutocompletes(),this.initializeTooltips(),c.default.setSubs([["compare",function(t,n){e.update(t,n)}]]),window.IS_PRERENDERING||this.randomize()}},{key:"initializeTooltips",value:function(){var e=document.querySelectorAll("."+i.default.withTooltip),t=this;(0,u.default)(e,{interactive:!0,content:function(e){var n=document.createElement("div"),r=t.parent.returnMoreLink(e.dataset.field);return n.textContent=e.dataset.content+" ",r&&n.appendChild(t.parent.returnMoreLink(e.dataset.field)),n}})}},{key:"update",value:function(e,t){console.log(this,e,t),this.comparisons.forEach(function(n){n.update(e,t)}),document.querySelector("#compare-input-"+e.split(".")[1]).value=this.model.data.find(function(e){return e.code===t}).state}},{key:"initializeAutocompletes",value:function(){var e=this,t=this.model.data.map(function(e){return{state:e.state,code:e.code}}),n=[!1,!1];function r(e){console.log(this,e),"mouseenter"===e.type&&this.focus(),"click"===e.type&&(console.log(this.parentNode.parentNode),this.parentNode.parentNode.focus())}function o(e){var r=a.stateModule.getState("compare."+e)||h[e],o=this.parentNode.querySelectorAll(".autoComplete_results_list li");console.log(r),this.value=t.find(function(e){return e.code===r}).state,o[0]&&(o[0].parentNode.innerHTML=""),n[e]=!1}[0,1].forEach(function(s){var l=document.querySelector("#compare-input-"+s),c=document.querySelector("#autoComplete_wrapper-"+s);l.addEventListener("click",function(e){e.stopPropagation()}),document.body.addEventListener("click",function(){console.log(n),n[s]&&o.call(l,s)}),l.classList.add("autoComplete",i.default["autoComplete"+s]),c.classList.add(i.default["autoComplete_wrapper-"+s]),l.addEventListener("keyup",function(){n[s]=!0,this.parentNode.querySelectorAll(".autoComplete_results_list li").forEach(function(e){console.log(e),e.addEventListener("mouseenter",r),e.addEventListener("mouseleave",r)})}),l.addEventListener("keydown",function(e){var r=this;console.log(e,this);var i=this.parentNode.querySelectorAll(".autoComplete_results_list li");9===e.keyCode&&1===i.length&&(this.value!==i[0].dataset.result?(e.preventDefault(),this.value=i[0].dataset.result):o.call(this,s)),9===e.keyCode&&(i.length>1||0===i.length)&&o.call(this,s),13===e.keyCode&&1===i.length&&(this.value=i[0].dataset.result,a.stateModule.setState("compare."+s,t.find(function(e){return e.state===r.value}).code),i[0].parentNode.innerHTML="",n[s]=!1)}),e.children.push(new p.default({data:{src:t,key:"state"},highlight:!0,onSelection:function(t){console.log(t,e),(0,d.GTMPush)("StateDebt|Compare-"+s+"|"+t.selection.code),a.stateModule.setState("compare."+s,t.selection.code),l.value=t.selection.state,l.focus(),n[s]=!1},placeHolder:"Select state",resultsList:{container:function(){return"autoComplete_results_list"},destination:document.querySelector("#compare-input-"+s),position:"afterend"},searchEngine:"strict",selector:"#compare-input-"+s,threshold:2})),function(e){var t=document.querySelector("#autoComplete_wrapper-"+e+" .autoComplete_results_list");new MutationObserver(function(e,t){console.log(e,t),e.forEach(function(e){e.addedNodes.forEach(function(e){e.addEventListener("mouseenter",r),e.setAttribute("tabindex",0)})})}).observe(t,{attributes:!1,childList:!0,subtree:!1})}(s),l.setAttribute("value",e.model.data.find(function(e){return e.code===h[s]}).state),console.log(e.children)})}}]),t}();t.default=m},function(e,t,n){e.exports={autoComplete_wrapper:"autoComplete_wrapper",autoComplete:"autoComplete",autoComplete_results_list:"autoComplete_results_list",autoComplete_result:"autoComplete_result",autoComplete_highlighted:"autoComplete_highlighted"}},function(e,t,n){e.exports={groupHeader:"src-views-state-comparison--groupHeader",typeContainer:"src-views-state-comparison--typeContainer","credit-rating":"src-views-state-comparison--credit-rating",typeDiv:"src-views-state-comparison--typeDiv",typeHeader:"src-views-state-comparison--typeHeader",debt_limit_type:"src-views-state-comparison--debt_limit_type",credit2015:"src-views-state-comparison--credit2015",credit2018:"src-views-state-comparison--credit2018",autoComplete0:"src-views-state-comparison--autoComplete0","autoComplete_wrapper-0":"src-views-state-comparison--autoComplete_wrapper-0",autoComplete1:"src-views-state-comparison--autoComplete1","autoComplete_wrapper-1":"src-views-state-comparison--autoComplete_wrapper-1",withTooltip:"src-views-state-comparison--withTooltip"}},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=s(n(4)),a=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"prerender",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(console.log(this.model.dict,this.data.field),e.innerHTML=this.returnTemplate(0)+this.returnTemplate(1),e)}},{key:"update",value:function(e,n){var r=parseInt(e.split(".")[1]);console.log(r),o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"update",this).call(this,r,n),console.log(this,r),this.el.children[r].fadeInContent(this.returnTemplate(r))}},{key:"returnTemplate",value:function(e){return'<p class="'+i.default.chartLabel+" "+i.default.chartLabelText+'">'+this.matches[e].state+': <span class="'+i.default["compareColor"+(e+1)]+'">'+(void 0!==this.model.dict[this.data.field]?this.model.dict[this.data.field][[this.matches[e][this.data.field]]]:this.matches[e][this.data.field])+"</span></p>"}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=p(n(4)),a=p(n(5)),s=p(n(6)),l=n(7);function p(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.bars=[],[0,1].forEach(function(e){n.bars.push(n.parent.parent.createComponent(n.model,s.default,"div.js-bar-compare-"+n.data.field+"-"+e,{rerenderOnDataMismatch:!0,parent:n,data:{d:n.matches[e],field:n.data.field,color:e+1}}))}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.bars)),this.prerendered&&!this.rerender?r:(r.innerHTML=this.returnTemplate(),r)}},{key:"returnTemplate",value:function(){return' \n                        <div class="'+i.default.chartContainer+'">\n                            '+this.partialTemplate(0)+"\n                            "+this.partialTemplate(1)+"\n                        </div>\n                       "}},{key:"returnTranslateValue",value:function(e){var t=this;return this.bars[e].data.d[this.bars[e].data.field]<0&&this.model.types.find(function(n){return n.field===t.bars[e].data.field}).crossesZero?0:(100*this.bars[e].linearScale(this.matches[e],this.data.field)).toFixed(1)+"%"}},{key:"partialTemplate",value:function(e){return'\n                <p class="'+i.default.chartLabel+" "+i.default["chartLabel"+(e+1)]+'">\n                    '+this.matches[e].state+'\n                </p>\n                <div class="'+i.default.barContainer+" "+i.default["barContainer"+(e+1)]+'">\n                    '+this.bars[e].el.outerHTML+'                        \n                    <div class="'+i.default.dataLabel+'" style="transform: translateX('+this.returnTranslateValue.call(this,e)+')">\n                        '+this.formatValue(this.matches[e],this.data.field).replace("-","–")+"\n                    </div>\n                </div>\n        "}},{key:"linearScale",value:function(e,t){var n=this.model.types.find(function(e){return e.field===t});return(e[t]-n.min)/n.spread}},{key:"formatValue",value:function(){return l.formatValue.apply(this,arguments)}},{key:"update",value:function(e,n){console.log(e,n);var r=parseInt(e.split(".")[1]),a=this.el.querySelectorAll("."+i.default.dataLabel)[r];o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"update",this).call(this,r,n),console.log(this),this.el.querySelectorAll("."+i.default.chartLabel)[r].fadeInContent(this.matches[r].state),this.children[r].data.d=this.matches[r],this.children[r].update(r),console.log("HERE—",this.children[r].data.d),a.fadeInContent(this.formatValue(this.matches[r],this.data.field).replace("-","–")),a.style.transform="translateX("+this.returnTranslateValue.call(this,r)+")"}}]),t}();t.default=c},function(e,t,n){e.exports={bar:"src-components-bar--bar",barColor1:"src-components-bar--barColor1",barColor2:"src-components-bar--barColor2",isZero:"src-components-bar--isZero"}},function(e,t,n){e.exports=function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t={resultsList:"autoComplete_results_list",result:"autoComplete_result",highlight:"autoComplete_highlighted"},n=function(e){return"string"==typeof e?document.querySelector(e):e()},r=function(e){return e.innerHTML=""},o={getInput:n,createResultsList:function(e){var n=document.createElement("ul");return e.container&&(t.resultsList=e.container(n)||t.resultsList),n.classList.add(t.resultsList),e.destination.insertAdjacentElement(e.position,n),n},highlight:function(e){return"<span class=".concat(t.highlight,">").concat(e,"</span>")},addResultsToList:function(e,n,r,o){n.forEach(function(i,a){var s=document.createElement("li"),l=n[a].source[r]||n[a].source;s.setAttribute("data-result",l),s.setAttribute("class",t.result),s.setAttribute("tabindex","1"),s.innerHTML=o?o(i,s):i.match||i,e.appendChild(s)})},navigation:function(e,t){var r=n(e),o=t.firstChild;document.onkeydown=function(e){var n=document.activeElement;switch(e.keyCode){case 38:n!==o&&n!==r?n.previousSibling.focus():n===o&&r.focus();break;case 40:n===r&&t.childNodes.length>0?o.focus():n!==t.lastChild&&n.nextSibling.focus()}}},clearResults:r,getSelection:function(e,o,i,a,s){var l=o.querySelectorAll(".".concat(t.result));Object.keys(l).forEach(function(p){["mousedown","keydown"].forEach(function(c){l[p].addEventListener(c,function(l){"mousedown"!==c&&13!==l.keyCode||(i({event:l,query:n(e).value,results:a.map(function(e){return e.source}),selection:a.find(function(e){var n=e.source[s]||e.source;return n===l.target.closest(".".concat(t.result)).getAttribute("data-result")}).source}),r(o))})})})}};return function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.selector=e.selector||"#autoComplete",this.data={src:function(){return"function"==typeof e.data.src?e.data.src():e.data.src},key:e.data.key},this.searchEngine="loose"===e.searchEngine?"loose":"strict",this.threshold=e.threshold||0,this.resultsList=o.createResultsList({container:!(!e.resultsList||!e.resultsList.container)&&e.resultsList.container,destination:e.resultsList&&e.resultsList.destination?e.resultsList.destination:o.getInput(this.selector),position:e.resultsList&&e.resultsList.position?e.resultsList.position:"afterend"}),this.placeHolder=e.placeHolder,this.maxResults=e.maxResults||5,this.resultItem=e.resultItem,this.highlight=e.highlight||!1,this.onSelection=e.onSelection,this.init()}return n=t,(r=[{key:"search",value:function(e,t){var n=this.highlight,r=t.toLowerCase();if("loose"===this.searchEngine){e=e.replace(/ /g,"");for(var i=[],a=0,s=0;s<r.length;s++){var l=r[s];a<e.length&&l===e[a]&&(l=n?o.highlight(l):l,a++),i.push(l)}return a===e.length&&i.join("")}if(r.includes(e)){if(n){var p=o.getInput(this.selector).value.toLowerCase();return r.replace(p,o.highlight(p))}return r}}},{key:"listMatchedResults",value:function(e){var t=this,n=[],r=o.getInput(this.selector).value.toLowerCase();e.filter(function(e){var o=t.search(r,e[t.data.key]||e);o&&n.push({match:o,source:e})});var i=n.slice(0,this.maxResults);return o.addResultsToList(this.resultsList,i,this.data.key,this.resultItem),o.navigation(this.selector,this.resultsList),i}},{key:"ignite",value:function(e){var t=this,n=this.selector,r=o.getInput(n),i=this.placeHolder,a=this.onSelection;i&&r.setAttribute("placeholder",i),r.onkeyup=function(){var i=t.resultsList;if(o.clearResults(i),r.value.length>t.threshold&&r.value.replace(/ /g,"").length){var s=t.listMatchedResults(e);a&&o.getSelection(n,i,a,s,t.data.key)}}}},{key:"init",value:function(){var e=this,t=this.data.src();t instanceof Promise?t.then(function(t){return e.ignite(t)}):this.ignite(t)}}])&&e(n.prototype,r),i&&e(n,i),t;var n,r,i}()}()},function(e,t,n){"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},function(e,t,n){"use strict";n.r(t);var r=n(10);
/**!
* tippy.js v4.0.4
* (c) 2017-2019 atomiks
* MIT License
*/function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var i="undefined"!=typeof window,a=i&&navigator.userAgent,s=/MSIE |Trident\//.test(a),l=/UCBrowser\//.test(a),p=i&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,c={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:[0,20],distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",updateDuration:0,wait:null,zIndex:9999},u=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],d={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow"},f=i?Element.prototype:{},h=f.matches||f.matchesSelector||f.webkitMatchesSelector||f.mozMatchesSelector||f.msMatchesSelector;function m(e){return[].slice.call(e)}function v(e,t){return(f.closest||function(e){for(var t=this;t;){if(h.call(t,e))return t;t=t.parentElement}}).call(e,t)}function y(e,t){for(;e;){if(t(e))return e;e=e.parentElement}}function b(e,t){return{}.hasOwnProperty.call(e,t)}function g(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?n:r}return e}function w(e,t){var n;return function(){var r=this,o=arguments;clearTimeout(n),n=setTimeout(function(){return e.apply(r,o)},t)}}function _(e,t){return e&&e.modifiers&&e.modifiers[t]}function x(e,t){return e.indexOf(t)>-1}function k(e){return!(!e||!b(e,"isVirtual"))||e instanceof Element}function S(e,t){return"function"==typeof e?e.apply(null,t):e}function O(e,t){e.filter(function(e){return"flip"===e.name})[0].enabled=t}function C(){return document.createElement("div")}function E(e,t){e.innerHTML=t instanceof Element?t.innerHTML:t}function T(e,t){t.content instanceof Element?(E(e,""),e.appendChild(t.content)):e[t.allowHTML?"innerHTML":"textContent"]=t.content}function L(e){return{tooltip:e.querySelector(d.TOOLTIP),backdrop:e.querySelector(d.BACKDROP),content:e.querySelector(d.CONTENT),arrow:e.querySelector(d.ARROW)||e.querySelector(d.ROUND_ARROW)}}function A(e){e.setAttribute("data-inertia","")}function P(e){var t=C();return"round"===e?(t.className="tippy-roundarrow",E(t,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):t.className="tippy-arrow",t}function j(){var e=C();return e.className="tippy-backdrop",e.setAttribute("data-state","hidden"),e}function D(e,t){e.setAttribute("tabindex","-1"),t.setAttribute("data-interactive","")}function M(e,t){e.forEach(function(e){e&&(e.style.transitionDuration="".concat(t,"ms"))})}function I(e,t,n){var r=l&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";e[t+"EventListener"](r,n)}function R(e){var t=e.getAttribute("x-placement");return t?t.split("-")[0]:""}function B(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function H(e,t,n){n.split(" ").forEach(function(n){e.classList[t](n+"-theme")})}function N(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.checkHideOnClick,n=e.exclude,r=e.duration;m(document.querySelectorAll(d.POPPER)).forEach(function(e){var o=e._tippy;!o||t&&!0!==o.props.hideOnClick||n&&e===n.popper||o.hide(r)})}var F={passive:!0},q=4,z=!1;function Y(){z||(z=!0,p&&document.body.classList.add("tippy-iOS"),window.performance&&document.addEventListener("mousemove",U))}var W=0;function U(){var e=performance.now();e-W<20&&(z=!1,document.removeEventListener("mousemove",U),p||document.body.classList.remove("tippy-iOS")),W=e}function X(e){var t=e.target;if(!(t instanceof Element))return N();var n=v(t,d.POPPER);if(!(n&&n._tippy&&n._tippy.props.interactive)){var r=y(t,function(e){return e._tippy&&e._tippy.reference===e});if(r){var o=r._tippy,i=x(o.props.trigger,"click");if(z||i)return N({exclude:o,checkHideOnClick:!0});if(!0!==o.props.hideOnClick||i)return;o.clearDelayTimeouts()}N({checkHideOnClick:!0})}}function V(){var e=document.activeElement;e&&e.blur&&e._tippy&&e.blur()}var G=Object.keys(c);function K(e,t){var n=o({},t,{content:S(t.content,[e])},t.ignoreAttributes?{}:function(e){return G.reduce(function(t,n){var r=(e.getAttribute("data-tippy-".concat(n))||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})}(e));return(n.arrow||l)&&(n.animateFill=!1),n}function Z(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;Object.keys(e).forEach(function(e){if(!b(t,e))throw new Error("[tippy]: `".concat(e,"` is not a valid option"))})}var $=1;function J(e,t){var n=K(e,t);if(!n.multiple&&e._tippy)return null;var i={},a=null,l=0,p=0,f=!1,k=function(){},E=[],N=n.interactiveDebounce>0?w(oe,n.interactiveDebounce):oe,Y=null,W=$++,U=function(e,t){var n=C();n.className="tippy-popper",n.id="tippy-".concat(e),n.style.zIndex=t.zIndex,t.role&&n.setAttribute("role",t.role);var r=C();r.className="tippy-tooltip",r.style.maxWidth=t.maxWidth+("number"==typeof t.maxWidth?"px":""),r.setAttribute("data-size",t.size),r.setAttribute("data-animation",t.animation),r.setAttribute("data-state","hidden"),H(r,"add",t.theme);var o=C();return o.className="tippy-content",o.setAttribute("data-state","hidden"),t.interactive&&D(n,r),t.arrow&&r.appendChild(P(t.arrowType)),t.animateFill&&(r.appendChild(j()),r.setAttribute("data-animatefill","")),t.inertia&&A(r),T(o,t),r.appendChild(o),n.appendChild(r),n}(W,n);U.addEventListener("mouseenter",function(e){V.props.interactive&&V.state.isVisible&&"mouseenter"===i.type&&Q(e)}),U.addEventListener("mouseleave",function(){V.props.interactive&&"mouseenter"===i.type&&document.addEventListener("mousemove",N)});var X,V={id:W,reference:e,popper:U,popperChildren:L(U),popperInstance:null,props:n,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:ye,set:be,setContent:function(e){be({content:e})},show:ge,hide:we,enable:function(){V.state.isEnabled=!0},disable:function(){V.state.isEnabled=!1},destroy:_e};return he(),n.lazy||(ce(),V.popperInstance.disableEventListeners()),n.showOnInit&&Q(),n.a11y&&!n.target&&((X=e)instanceof Element&&(!h.call(X,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")||X.hasAttribute("disabled")))&&e.setAttribute("tabindex","0"),e._tippy=V,U._tippy=V,V;function G(e){var t=a=e,n=t.clientX,r=t.clientY;if(V.popperInstance){var o=R(V.popper),i=V.props.arrow?q+("round"===V.props.arrowType?18:16):q,s=x(["top","bottom"],o),l=x(["left","right"],o),p=s?Math.max(i,n):n,c=l?Math.max(i,r):r;s&&p>i&&(p=Math.min(n,window.innerWidth-i)),l&&c>i&&(c=Math.min(r,window.innerHeight-i));var u=V.reference.getBoundingClientRect(),d=V.props.followCursor,f="horizontal"===d,h="vertical"===d;V.popperInstance.reference={getBoundingClientRect:function(){return{width:0,height:0,top:f?u.top:c,bottom:f?u.bottom:c,left:h?u.left:p,right:h?u.right:p}},clientWidth:0,clientHeight:0},V.popperInstance.scheduleUpdate(),"initial"===d&&V.state.isVisible&&te()}}function Q(e){if(ye(),!V.state.isVisible){if(V.props.target)return function(e){var n=v(e.target,V.props.target);n&&!n._tippy&&(J(n,o({},V.props,{content:S(t.content,[n]),appendTo:t.appendTo,target:"",showOnInit:!0})),Q(e))}(e);if(f=!0,V.props.wait)return V.props.wait(V,e);ue()&&!V.state.isMounted&&document.addEventListener("mousemove",G);var n=g(V.props.delay,0,c.delay);n?l=setTimeout(function(){ge()},n):ge()}}function ee(){if(ye(),!V.state.isVisible)return te();f=!1;var e=g(V.props.delay,1,c.delay);e?p=setTimeout(function(){V.state.isVisible&&we()},e):we()}function te(){document.removeEventListener("mousemove",G)}function ne(){document.body.removeEventListener("mouseleave",ee),document.removeEventListener("mousemove",N)}function re(e){V.state.isEnabled&&!pe(e)&&(V.state.isVisible||(i=e,e instanceof MouseEvent&&(a=e)),"click"===e.type&&!1!==V.props.hideOnClick&&V.state.isVisible?ee():Q(e))}function oe(e){var t=y(e.target,function(e){return e._tippy}),n=v(e.target,d.POPPER)===V.popper,r=t===V.reference;n||r||function(e,t,n,r){if(!e)return!0;var o=n.clientX,i=n.clientY,a=r.interactiveBorder,s=r.distance,l=t.top-i>("top"===e?a+s:a),p=i-t.bottom>("bottom"===e?a+s:a),c=t.left-o>("left"===e?a+s:a),u=o-t.right>("right"===e?a+s:a);return l||p||c||u}(R(V.popper),V.popper.getBoundingClientRect(),e,V.props)&&(ne(),ee())}function ie(e){if(!pe(e))return V.props.interactive?(document.body.addEventListener("mouseleave",ee),void document.addEventListener("mousemove",N)):void ee()}function ae(e){e.target===V.reference&&(V.props.interactive&&e.relatedTarget&&V.popper.contains(e.relatedTarget)||ee())}function se(e){v(e.target,V.props.target)&&Q(e)}function le(e){v(e.target,V.props.target)&&ee()}function pe(e){var t="ontouchstart"in window,n=x(e.type,"touch"),r=V.props.touchHold;return t&&z&&r&&!n||z&&!r&&n}function ce(){var e=V.props.popperOptions,t=V.popperChildren,n=t.tooltip,i=t.arrow;V.popperInstance=new r.a(V.reference,V.popper,o({placement:V.props.placement},e,{modifiers:o({},e?e.modifiers:{},{preventOverflow:o({boundariesElement:V.props.boundary,padding:q},_(e,"preventOverflow")),arrow:o({element:i,enabled:!!i},_(e,"arrow")),flip:o({enabled:V.props.flip,padding:V.props.distance+q,behavior:V.props.flipBehavior},_(e,"flip")),offset:o({offset:V.props.offset},_(e,"offset"))}),onUpdate:function(t){V.props.flip&&!V.props.flipOnUpdate&&(t.flipped&&(V.popperInstance.options.placement=t.placement),O(V.popperInstance.modifiers,!1));var r=R(V.popper),o=n.style;o.top="",o.bottom="",o.left="",o.right="",o[r]=-(V.props.distance-10)+"px";var i={top:q,bottom:q,left:q,right:q};i[r]=q+V.props.distance,V.popperInstance.modifiers.filter(function(e){return"preventOverflow"===e.name})[0].padding=i,e&&e.onUpdate&&e.onUpdate(t)}}))}function ue(){return V.props.followCursor&&!z&&"focus"!==i.type}function de(e,t){function n(e){e.target===r&&(I(r,"remove",n),t())}if(0===e)return t();var r=V.popperChildren.tooltip;I(r,"remove",k),I(r,"add",n),k=n}function fe(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];V.reference.addEventListener(e,t,n),E.push({eventType:e,handler:t,options:n})}function he(){V.props.touchHold&&!V.props.target&&(fe("touchstart",re,F),fe("touchend",ie,F)),V.props.trigger.trim().split(" ").forEach(function(e){if("manual"!==e)if(V.props.target)switch(e){case"mouseenter":fe("mouseover",se),fe("mouseout",le);break;case"focus":fe("focusin",se),fe("focusout",le);break;case"click":fe(e,se)}else switch(fe(e,re),e){case"mouseenter":fe("mouseleave",ie);break;case"focus":fe(s?"focusout":"blur",ae)}})}function me(){E.forEach(function(e){var t=e.eventType,n=e.handler,r=e.options;V.reference.removeEventListener(t,n,r)}),E=[]}function ve(){return[V.popperChildren.tooltip,V.popperChildren.backdrop,V.popperChildren.content]}function ye(){clearTimeout(l),clearTimeout(p)}function be(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Z(e,c);var t=V.props,n=K(V.reference,o({},V.props,e,{ignoreAttributes:!0}));n.ignoreAttributes=b(e,"ignoreAttributes")?e.ignoreAttributes:t.ignoreAttributes,V.props=n,(b(e,"trigger")||b(e,"touchHold"))&&(me(),he()),b(e,"interactiveDebounce")&&(ne(),N=w(oe,e.interactiveDebounce)),function(e,t,n){var r=L(e),o=r.tooltip,i=r.content,a=r.backdrop,s=r.arrow;e.style.zIndex=n.zIndex,o.setAttribute("data-size",n.size),o.setAttribute("data-animation",n.animation),o.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?e.setAttribute("role",n.role):e.removeAttribute("role"),t.content!==n.content&&T(i,n),!t.animateFill&&n.animateFill?(o.appendChild(j()),o.setAttribute("data-animatefill","")):t.animateFill&&!n.animateFill&&(o.removeChild(a),o.removeAttribute("data-animatefill")),!t.arrow&&n.arrow?o.appendChild(P(n.arrowType)):t.arrow&&!n.arrow&&o.removeChild(s),t.arrow&&n.arrow&&t.arrowType!==n.arrowType&&o.replaceChild(P(n.arrowType),s),!t.interactive&&n.interactive?D(e,o):t.interactive&&!n.interactive&&function(e,t){e.removeAttribute("tabindex"),t.removeAttribute("data-interactive")}(e,o),!t.inertia&&n.inertia?A(o):t.inertia&&!n.inertia&&function(e){e.removeAttribute("data-inertia")}(o),t.theme!==n.theme&&(H(o,"remove",t.theme),H(o,"add",n.theme))}(V.popper,t,n),V.popperChildren=L(V.popper),V.popperInstance&&(V.popperInstance.update(),u.some(function(t){return b(e,t)})&&(V.popperInstance.destroy(),ce(),V.state.isVisible||V.popperInstance.disableEventListeners(),V.props.followCursor&&a&&G(a)))}function ge(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:g(V.props.duration,0,c.duration[0]);if(!V.state.isDestroyed&&V.state.isEnabled&&(!z||V.props.touch))return b(V.reference,"isVirtual")||document.documentElement.contains(V.reference)?void(V.reference.hasAttribute("disabled")||!1!==V.props.onShow(V)&&(V.popper.style.visibility="visible",V.state.isVisible=!0,V.props.interactive&&V.reference.classList.add("tippy-active"),M([V.popper,V.popperChildren.tooltip,V.popperChildren.backdrop],0),function(e){var t=!(ue()||"initial"===V.props.followCursor&&z);V.popperInstance?(ue()||(V.popperInstance.scheduleUpdate(),t&&V.popperInstance.enableEventListeners()),O(V.popperInstance.modifiers,V.props.flip)):(ce(),t||V.popperInstance.disableEventListeners()),V.popperInstance.reference=V.reference;var n=V.popperChildren.arrow;if(ue()){n&&(n.style.margin="0");var r=g(V.props.delay,0,c.delay);i.type&&G(r&&a?a:i)}else n&&(n.style.margin="");z&&a&&"initial"===V.props.followCursor&&(G(a),n&&(n.style.margin="0")),function(e,t){var n=e.popper,r=e.options,o=r.onCreate,i=r.onUpdate;r.onCreate=r.onUpdate=function(e){!function(e){e.offsetHeight}(n),t(),i(e),r.onCreate=o,r.onUpdate=i}}(V.popperInstance,e);var o=V.props.appendTo;(Y="parent"===o?V.reference.parentNode:S(o,[V.reference])).contains(V.popper)||(Y.appendChild(V.popper),V.props.onMount(V),V.state.isMounted=!0)}(function(){V.state.isVisible&&(ue()||V.popperInstance.update(),M([V.popper],n.updateDuration),M(ve(),e),V.popperChildren.backdrop&&(V.popperChildren.content.style.transitionDelay=Math.round(e/12)+"ms"),V.props.sticky&&(M([V.popper],s?0:V.props.updateDuration),function e(){V.popperInstance&&V.popperInstance.scheduleUpdate(),V.state.isMounted?requestAnimationFrame(e):M([V.popper],0)}()),B(ve(),"visible"),function(e,t){de(e,t)}(e,function(){V.popperChildren.tooltip.classList.add("tippy-notransition"),V.props.aria&&V.reference.setAttribute("aria-".concat(V.props.aria),V.popper.id),V.props.onShown(V),V.state.isShown=!0}))}))):_e()}function we(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:g(V.props.duration,1,c.duration[1]);!V.state.isDestroyed&&V.state.isEnabled&&!1!==V.props.onHide(V)&&(V.popperChildren.tooltip.classList.remove("tippy-notransition"),V.props.interactive&&V.reference.classList.remove("tippy-active"),V.popper.style.visibility="hidden",V.state.isVisible=!1,V.state.isShown=!1,M(ve(),e),B(ve(),"hidden"),function(e,t){de(e,function(){!V.state.isVisible&&Y&&Y.contains(V.popper)&&t()})}(e,function(){f||te(),V.props.aria&&V.reference.removeAttribute("aria-".concat(V.props.aria)),V.popperInstance.disableEventListeners(),V.popperInstance.options.placement=V.props.placement,Y.removeChild(V.popper),V.props.onHidden(V),V.state.isMounted=!1}))}function _e(e){V.state.isDestroyed||(V.state.isMounted&&we(0),me(),delete V.reference._tippy,V.props.target&&e&&m(V.reference.querySelectorAll(V.props.target)).forEach(function(e){e._tippy&&e._tippy.destroy()}),V.popperInstance&&V.popperInstance.destroy(),V.state.isDestroyed=!0)}}var Q=!1;function ee(e,t){Z(t,c),Q||(document.addEventListener("click",X,!0),document.addEventListener("touchstart",Y,F),window.addEventListener("blur",V),Q=!0);var n,r=o({},c,t);n=e,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(e){var t={isVirtual:!0,attributes:e.attributes||{},setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},hasAttribute:function(t){return t in e.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){delete e.classList.classNames[t]},contains:function(t){return t in e.classList.classNames}}};for(var n in t)e[n]=t[n]}(e);var i=function(e){if(k(e))return[e];if(e instanceof NodeList)return m(e);if(Array.isArray(e))return e;try{return m(document.querySelectorAll(e))}catch(e){return[]}}(e).reduce(function(e,t){var n=t&&J(t,r);return n&&e.push(n),e},[]);return k(e)?i[0]:i}ee.version="4.0.4",ee.defaults=c,ee.setDefaults=function(e){Object.keys(e).forEach(function(t){c[t]=e[t]})},ee.hideAll=N,ee.group=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.delay,r=void 0===n?e[0].props.delay:n,o=t.duration,i=void 0===o?0:o,a=!1;function s(e){a=e,u()}function l(t){t._originalProps.onShow(t),e.forEach(function(e){e.set({duration:i}),e.hide()}),s(!0)}function p(e){e._originalProps.onHide(e),s(!1)}function c(e){e._originalProps.onShown(e),e.set({duration:e._originalProps.duration})}function u(){e.forEach(function(e){e.set({onShow:l,onShown:c,onHide:p,delay:a?[0,Array.isArray(r)?r[1]:r]:r,duration:a?i:e._originalProps.duration})})}e.forEach(function(e){e._originalProps={duration:e.props.duration,onHide:e.props.onHide,onShow:e.props.onShow,onShown:e.props.onShown}}),u()},i&&setTimeout(function(){m(document.querySelectorAll("[data-tippy]")).forEach(function(e){var t=e.getAttribute("data-tippy");t&&ee(e,{content:t})})}),function(e){if(i){var t=document.createElement("style");t.type="text/css",t.textContent=e;var n=document.head,r=n.firstChild;r?n.insertBefore(t,r):n.appendChild(t)}}('.tippy-iOS{cursor:pointer!important}.tippy-notransition{transition:none}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;will-change:transform;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}'),t.default=ee},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=d(n(1)),i=d(n(32)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(9)),s=d(n(6)),l=d(n(33)),p=d(n(8)),c=n(0),u=n(7);function d(e){return e&&e.__esModule?e:{default:e}}function f(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return null===e?function(e,t){return console.log(e,t),e="N/A"===e?"!":e,t="N/A"===t?"!":t,(e=isNaN(+e)?e:+e)<(t=isNaN(+t)?t:+t)?-1:e>t?1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?-1:t[e]>n[e]?1:t[e]>=n[e]?0:NaN}}function h(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return null===e?function(e,t){return e<t?1:e>t?-1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?1:t[e]>n[e]?-1:t[e]>=n[e]?0:NaN}}var m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.name="FiftyStateView",this.field="debt_percent_SPI",this.bars=[],this.barContainers=[],this.lastPositions={},this.highlightedBars={},this.groupByFn=null!==this.groupBy?function(e){return e[n.groupBy]}:function(e){return null!==e},this.selections=this.parent.createComponent(this.model,l.default,"div.js-fifty-state-selections",{parent:this,rerenderOnDataMismatch:!0,renderToSelector:"#selections-container"}),this.sortValueKey="state",this.sortValuesFn=f,this.groupBy="null",this.nestData(),this.pushBars(),(e=this.children).push.apply(e,[this.selections].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.bars))),this.prerendered&&!this.rerender)return r;this.renderSelections(),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.updateExplainerText("field",this.field,!0);var o=this.renderCharts();return r.appendChild(o),r}},{key:"nestData",value:function(){this.nestedData=a.nest().key(this.groupByFn).sortKeys(f()).sortValues(this.sortValuesFn(this.sortValueKey)).entries(this.model.data),console.log(this.nestedData)}},{key:"pushBars",value:function(){var e=this;this.bars.length=0,this.barContainers.length=0,this.nestedData.forEach(function(t){t.values.forEach(function(t){e.bars.push(e.parent.createComponent(e.model,s.default,"div.bar-state-"+t.code,{parent:e,data:{d:t,field:e.field,color:2}})),e.barContainers.push(e.parent.createComponent(e.model,o.default,"div#barContainer-"+t.code))})})}},{key:"renderSelections",value:function(){this.selections.container.appendChild(this.selections.el)}},{key:"renderCharts",value:function(){var e=this,t=document.createElement("div"),n=0;return t.classList.add("js-fifty-chart-container"),this.nestedData.forEach(function(r){var o=document.createElement("div");o.classList.add(i.default.groupDiv),o.innerHTML="null"!==e.groupBy?'<h3 class="'+i.default.groupHeader+'">'+(void 0!==e.model.dict[e.groupBy]?e.model.dict[e.groupBy][r.key]:r.key)+"</h3>":"",r.values.forEach(function(t){var r=e.barContainers[n].el;r.classList.add(i.default.barContainer),e.highlightedBars[r.id]&&r.classList.add(i.default.isHighlighted);var a=document.createElement("p"),s=document.createElement("div"),l=document.createElement("div");l.classList.add(i.default.barInnerContainer),a.classList.add(i.default.barLabel),a.innerHTML=t.state,s.classList.add(i.default.placeHolder),r.appendChild(a),l.appendChild(e.bars[n].el),r.appendChild(l),r.appendChild(s),r.insertAdjacentHTML("beforeend",e.returnDataLabel(n)),o.appendChild(r),n++}),t.appendChild(o)}),this.bars.forEach(function(e){e.checkIfZero()}),t}},{key:"returnDataLabel",value:function(e){return'<div class="'+i.default.dataLabel+'" style="transform: translateX('+this.returnTranslateValue(e)+')">\n                    '+this.formatValue(this.bars[e].data.d,this.bars[e].data.field).replace("-","–")+"\n                </div>"}},{key:"returnTranslateValue",value:function(e){var t=this;return this.bars[e].data.d[this.bars[e].data.field]<0&&this.model.types.find(function(n){return n.field===t.bars[e].data.field}).crossesZero?(100*this.bars[e].placeZero(this.bars[e].data.field)).toFixed(1)+"%":(100*(this.bars[e].linearScale(this.bars[e].data.d,this.bars[e].data.field)+this.bars[e].placeZero(this.bars[e].data.field))).toFixed(1)+"%"}},{key:"formatValue",value:function(){return u.formatValue.apply(this,arguments)}},{key:"invertPositions",value:function(){var e=this;this.barContainers.forEach(function(t){var n=t.el.getBoundingClientRect(),r=e.firstPositions[t.el.id].top-n.top;t.el.style.transitionDuration="0",t.el.style.transform="translateY("+r+"px)",window.requestAnimationFrame(function(){t.el.style.transitionDuration="0.8s",t.el.style.transform="translateY(0)"})})}},{key:"init",value:function(){var e=this;p.default.setSubs([["field",function(t,n){e.updateBars(t,n),e.updateDataLabels(t,n),e.updateExplainerText(t,n)}],["group",function(t,n){e.updateGroups(t,n),e.updateExplainerText(t,n)}],["sort",function(t,n){e.sortBars(t,n)}],["resize",function(){e.adjustExplainerTextHeight()}]]),this.children.forEach(function(e){e.init()}),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.initHighlightBars(),this.initClearAllHighlights()}},{key:"updateExplainerText",value:function(e,t,n){var r=this;console.log(e,t,this);var o,a=this.model.types.find(function(e){return e.field===t}),s=a?"<p><strong>"+(isNaN(a.label)?a.label:"Credit rating "+a.label)+".</strong> "+a.tooltip+" </p>":"";"field"===e&&(this.field=t,o=this.fieldExplainer),"group"===e&&(this.groupBy=t,o=this.groupExplainer),n||(this.explainerWrapper.style.height=this.explainerWrapper.offsetHeight+"px"),o.fadeInContent(s).then(function(){var e=r.parent.returnMoreLink(t);e&&(e.classList.add(i.default.moreLink),o.lastChild.appendChild(e)),r.adjustExplainerTextHeight(),console.log(o.lastChild)})}},{key:"adjustExplainerTextHeight",value:function(){var e=[this.fieldExplainer,this.groupExplainer].reduce(function(e,t){var n=t.querySelector("p"),r=n?window.getComputedStyle(t.querySelector("p")):null;return r?+e+n.offsetHeight+parseInt(r["margin-top"])+parseInt(r["margin-bottom"]):+e},0);this.explainerWrapper.style.height=e+"px"}},{key:"initHighlightBars",value:function(){var e=this;document.querySelectorAll("."+i.default.barContainer).forEach(function(t){t.addEventListener("click",function(){e.highlightedBars[t.id]=!e.highlightedBars[t.id],e.highlightedBars[t.id]&&(0,c.GTMPush)("StateDebt|FiftyState|Highlight|"+t.id),t.classList.toggle(i.default.isHighlighted)})})}},{key:"initClearAllHighlights",value:function(){var e=this;document.querySelector("#clear-all-highlight").addEventListener("click",function(t){t.preventDefault(),document.querySelectorAll("."+i.default.barContainer).forEach(function(t){t.classList.remove(i.default.isHighlighted),e.highlightedBars={}}),(0,c.GTMPush)("StateDebt|FiftyState|RemoveHighlights")})}},{key:"updateDataLabels",value:function(){var e=this;this.barContainers.forEach(function(t,n){var r=t.el.querySelector("."+i.default.dataLabel);r.fadeInContent(e.formatValue(e.bars[n].data.d,e.bars[n].data.field).replace("-","–")),window.requestAnimationFrame(function(){console.log(e.bars[n].data.d),r.style.transform="translateX("+e.returnTranslateValue(n)+")"})})}},{key:"updateBars",value:function(e,t){this.field=t,this.bars.forEach(function(e){e.data.field=t,e.update()}),console.log(this.sortValueKey),"state"!==this.sortValueKey&&(this.sortValueKey=t,setTimeout(this.FLIP.bind(this),500))}},{key:"recordFirstPositions",value:function(){this.firstPositions=this.barContainers.reduce(function(e,t){return e[t.el.id]=t.el.getBoundingClientRect(),e},{})}},{key:"FLIP",value:function(){this.recordFirstPositions(),this.nestData(),this.el.innerHTML="",this.pushBars(),this.el.appendChild(this.renderCharts()),this.initHighlightBars(),this.invertPositions()}},{key:"updateGroups",value:function(e,t){this.groupBy=t,console.log(this.groupBy),this.FLIP()}},{key:"sortBars",value:function(e,t){this.sortValueKey="alpha"===t?"state":this.field,this.sortValuesFn="desc"===t?h:f,this.FLIP()}}]),t}();t.default=m},function(e,t,n){e.exports={groupHeader:"src-views-fifty-state--groupHeader",barLabel:"src-views-fifty-state--barLabel",groupDiv:"src-views-fifty-state--groupDiv",barContainer:"src-views-fifty-state--barContainer",isHighlighted:"src-views-fifty-state--isHighlighted",barInnerContainer:"src-views-fifty-state--barInnerContainer",dataLabel:"src-views-fifty-state--dataLabel",placeHolder:"src-views-fifty-state--placeHolder",moreLink:"src-views-fifty-state--moreLink"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=p(n(1)),i=p(n(34)),a=p(n(35)),s=n(2),l=n(0);function p(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this),o=[{label:"Select field:",data:this.model.types.filter(function(e){return"text"!==e.type}),type:"field"},{label:"Group by:",data:this.model.types.filter(function(e){return"text"===e.type}),type:"group"}];if(this.dropdowns=[],o.forEach(function(e){n.dropdowns.push(n.parent.parent.createComponent(n.model,a.default,"div.js-dropdown-"+e.label.cleanString(),{parent:n,data:e,rerenderOnDataMismatch:!0}))}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.dropdowns)),this.prerendered&&!this.rerender)return r;var s=document.createElement("div");return s.classList.add(i.default.dropdownWrapper),o.forEach(function(e,t){console.log(e);var r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("label"),l=n.dropdowns[t];l.el.querySelector(".js-input-div").id="label-dropdown-"+e.type+"-value",l.el.setAttribute("aria-labelledby","label-dropdown-"+e.type+" label-dropdown-"+e.type+"-value"),l.el.querySelector("ul").setAttribute("aria-controls","fifty-state-view"),o.classList.add(i.default.dropdownOuter),a.innerText=e.label,a.setAttribute("id","label-dropdown-"+e.type),r.classList.add(i.default.dropdownInner),r.appendChild(l.el),o.appendChild(a),o.appendChild(r),s.appendChild(o)}),r.appendChild(s),r.insertAdjacentHTML("beforeend",'\n            <div id="explainer-wrapper">\n                <div id="field-explainer"></div>\n                <div id="group-explainer"></div>\n            </div>\n            <div class="flex">\n                <p class="'+i.default.label+" "+i.default.labelSort+' flex"><span>Sort by:</span> <span><a class="'+i.default.sortBy+" "+i.default.sortActive+'" data-sort="alpha" href="#">A–Z</a> | <a class="'+i.default.sortBy+'" data-sort="asc" href="#">Low–High</a> | <a class="'+i.default.sortBy+'" data-sort="desc" href="#">High–Low</a></span></p>\n                <p class="'+i.default.label+" "+i.default.labelHighlight+'">Select a state to highlight | <a id="clear-all-highlight" href="#">Clear all</a></p>\n            </div>\n        '),r}},{key:"init",value:function(){this.children.forEach(function(e){e.init()}),document.querySelectorAll("."+i.default.sortBy).forEach(function(e){e.addEventListener("click",function(t){t.preventDefault(),document.querySelector("."+i.default.sortActive).classList.remove(i.default.sortActive),e.classList.add(i.default.sortActive),(0,l.GTMPush)("StateDebt|FiftyState|Sort|"+e.dataset.sort),s.stateModule.setState("sort",e.dataset.sort)})})}}]),t}();t.default=c},function(e,t,n){e.exports={dropdownWrapper:"src-views-fifty-state-selections--dropdownWrapper",dropdownOuter:"src-views-fifty-state-selections--dropdownOuter",dropdownInner:"src-views-fifty-state-selections--dropdownInner",label:"src-views-fifty-state-selections--label",sortActive:"src-views-fifty-state-selections--sortActive",labelSort:"src-views-fifty-state-selections--labelSort",sortBy:"src-views-fifty-state-selections--sortBy"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(36),s=(r=a)&&r.__esModule?r:{default:r},l=n(37),p=n(2),c=n(0);var u=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=[],o=n.data.type;n.data.data.forEach(function(e){r.push({value:e.field,name:isNaN(+e.label)?e.label:"Credit rating "+e.label,selected:!!e.isDefaultSelection})}),n.data=r.sort(function(e,t){return e.name<t.name?-1:e.name>t.name?1:e.name>=t.name?0:NaN}),"group"===o&&n.data.unshift({value:null,name:"— None —",selected:!0});var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return i.dropdownType=o,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.Dropdown),o(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(e.classList.add(s.default.dropdown),e)}},{key:"init",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this)}},{key:"onChange",value:function(){(0,c.GTMPush)("StateDebt|FiftyState|"+this.dropdownType+"|"+this.selectedOption.dataset.value),p.stateModule.setState(this.dropdownType,this.selectedOption.dataset.value)}}]),t}();t.default=u},function(e,t,n){e.exports={dropdown:"src-components-dropdown--dropdown"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=t.TextInput=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=n(0),a=l(n(1)),s=l(n(38));function l(e){return e&&e.__esModule?e:{default:e}}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.TextInput=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"input",n=arguments[1];return p(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return u(t,a.default),r(t,[{key:"prerender",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered?e:(e.setAttribute("type","text"),e)}},{key:"init",value:function(){}}]),t}(),t.Dropdown=function(e){function t(e,n){p(this,t),console.log(e);var r,o,i=e.split(".")[0].split("#")[0];"div"!==i&&(e.split(".").length>1&&(r=e.split(".")[0].split("#")[0]),e.split("#").length>1&&(o=e.split("#")[0].split(".")[0]),console.log("Dropdown element must be a div; coercing . . ."),e=(i="div")+(void 0!==o?"#"+o:"")+(void 0!==r?"."+r:""));var a=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return a.options=a.el.querySelector("ul"),a.body=document.querySelector("body"),a._isOpen=!1,a}return u(t,a.default),r(t,[{key:"prerender",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.prerendered)return e;e.setAttribute("aria-haspopup","listbox"),e.setAttribute("aria-expanded","false"),e.setAttribute("role","button");var n=i.DOMHelpers.c("div.js-input-div"),r=i.DOMHelpers.c("ul");return console.log(this),r.setAttribute("aria-role","listbox"),this.data.forEach(function(e){var t=i.DOMHelpers.c("li");t.setAttribute("data-value",e.value),t.setAttribute("aria-role","option"),t.innerHTML=e.name,t.id="dropdown-item-"+e.value,e.selected&&(t.setAttribute("aria-selected","true"),t.classList.add("selected"),n.textContent=e.name,r.setAttribute("aria-activedescendant",t.id)),r.appendChild(t)}),e.appendChild(n),e.appendChild(r),e.classList.add(s.default.PCTDropdown),e.setAttribute("tabindex","0"),e}},{key:"init",value:function(){var e=this;console.log(this),this.input=this.el.querySelector(".js-input-div"),this.el.querySelectorAll("li").forEach(function(t){t.addEventListener("click",function(n){n.stopPropagation(),e.itemClickHandler(t)})}),this._selectedOption=this.el.querySelector("li.selected"),this.toBeSelected=this.el.querySelector("li.selected"),this.el.addEventListener("click",this.clickHandler.bind(this)),this.el.addEventListener("keydown",function(t){if(console.log(t.keyCode),9!==t.keyCode)return[32,38,40].indexOf(t.keyCode)>-1?(t.preventDefault(),void e.spaceAndArrowHandler.call(e,t)):void([13,27].indexOf(t.keyCode>-1)&&e.isOpen&&e.enterAndEscapeHandler.call(e,t));e.tabHandler.call(e,t)})}},{key:"itemClickHandler",value:function(e){console.log(this,e),this.toBeSelected.classList.remove("selected"),this.toBeSelected.removeAttribute("aria-selected"),this.toBeSelected=e,this.toBeSelected.classList.add("selected"),this.toBeSelected.setAttribute("aria-selected","true"),this.options.setAttribute("aria-activedescendant",e.id),this.selectedOption=this.toBeSelected}},{key:"enterAndEscapeHandler",value:function(e){27===e.keyCode?(console.log("escape key"),this.toBeSelected.classList.remove("selected"),this.selectedOption.classList.add("selected"),this.toBeSelected=this.selectedOption,this.isOpen=!1):this.selectedOption=this.toBeSelected}},{key:"spaceAndArrowHandler",value:function(e){if(32!==e.keyCode)if(this.isOpen){var t=38===e.keyCode?this.toBeSelected.previousElementSibling:this.toBeSelected.nextElementSibling;t&&(this.toBeSelected.classList.remove("selected"),this.toBeSelected=t,this.toBeSelected.classList.add("selected"))}else this.isOpen=!0;else this.isOpen||(this.isOpen=!0)}},{key:"tabHandler",value:function(e){this.isOpen&&e.preventDefault()}},{key:"clickHandler",value:function(e){!this.isOpen&&this.body.UIControlIsOpen||(e.stopPropagation(),this.isOpen=!this.isOpen)}},{key:"isOpen",set:function(e){function t(){this.isOpen=!1}this._isOpen=e,e?(this.el.classList.add(s.default.isOpen),this.el.setAttribute("aria-expanded",!0),this.body.UIControlIsOpen=!0,this.body.addEventListener("click",t.bind(this))):(this.el.classList.remove(s.default.isOpen),this.el.setAttribute("aria-expanded",!1),this.body.UIControlIsOpen=!1,this.body.removeEventListener("click",t.bind(this)))},get:function(){return this._isOpen}},{key:"selectedOption",set:function(e){this._selectedOption=e,this.isOpen=!1,this.input.textContent=this._selectedOption.innerText,this.onChange?this.onChange():console.log("Instance of Dropdown class needs an onChange method to handle selection of a new value")},get:function(){return this._selectedOption}}]),t}()},function(e,t,n){e.exports={PCTDropdown:"submodules-UI-js-inputs--PCTDropdown",isOpen:"submodules-UI-js-inputs--isOpen"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(40),s=(r=a)&&r.__esModule?r:{default:r};var l=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.el=document.querySelector(t),Object.keys(n).forEach(function(e){r[e]=n[e]})}return i(e,[{key:"init",value:function(e){this.needsRouter&&(this.router=new s.default,this.router.init(e)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var e=!1,t=document.body,n=0;function r(){new Date-n<500||e||(t.classList.add("has-hover"),e=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){e&&(t.classList.remove("has-hover"),e=!1)},!0),document.addEventListener("mousemove",r,!0),r()}},{key:"createComponent",value:function(e,t,n,r){var i=Object.create({children:[],data:null,model:e,parent:null,rerenderOnDataMismatch:!1});if(null!==r&&"object"===(void 0===r?"undefined":o(r)))for(var a in r)r.hasOwnProperty(a)&&(i[a]=r[a]);return new t(n,i)}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return o(e,[{key:"init",value:function(e){var t=this;if(void 0===e||"object"!==(void 0===e?"undefined":r(e)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof e.encode||"function"!=typeof e.decode||!Array.isArray(e.views)||"object"!==r(e.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=e.encode,this.decodeHash=e.decode,this.viewPromises=e.views.map(function(e){return e.isReady}),this.PS=e.PS,Promise.all(this.viewPromises).then(function(){t.decodeHash()}),this.PS.setSubs(e.subscriptions.map(function(e){return[e,function(e,n){t.hashChange.call(t,e,n)}]}))}},{key:"hashChange",value:function(e,t){this.setStateObj(e,t),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(e,t){this.stateObj[e]=t}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),e}();t.default=i},function(e,t){e.exports='<section id="section-overview">\n    <h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">Overview</h2>\n    <div class="js-inner-content">\n        <p>\n            Because no universal guidelines exist for how much debt state governments\n            can afford, when policymakers try to assess how much borrowing to take on\n            for projects such as roads, bridges, and schools, they often compare debt\n            levels in their state to those of others. To make these comparisons, many\n            policymakers evaluate how their state stacks up against geographic\n            neighbors or other states with a common credit rating.\n        </p>\n        <p>\n            But selecting a peer group based only on these traits overlooks many\n            factors that influence borrowing levels. States with growing populations, for example, may wish to borrow more\n            to ensure that their infrastructure adequately serves residents’ needs.\n            Similarly, having a debt limit or other constraining budget policy can\n            influence the share of borrowing taken on by state governments or\n            localities.\n        </p>\n        <p>\n            This interactive tool allows users to compare debt levels across more\n            tailored peer groups, including comparing states with similar borrowing\n            practices, constraints, and needs. The tool includes key measures that may\n            influence borrowing levels, such as debt limit policies; the degree to\n            which borrowing is conducted by the state itself, compared to component\n            units such as independent agencies and authorities; and the division of\n            borrowing between the state and local governments. The tool also includes\n            traits that states more commonly consider when choosing peers, such as\n            credit ratings and geographic proximity.\n        </p>\n        <p>\n            In the <a class="pct-static-anchor" id="state-comparison" href="#section-comparison">“State comparison” section</a>, users can compare these data, including\n            debt levels, for any two states, or any state to the U.S. median. In the\n            section labeled <a class="pct-static-anchor" id="fifty-state" href="#section-states">“50-state data,”</a> users can sort and group all 50 states\n            using multiple criteria, allowing users to identify groupings using a mix\n            of measures. Information about the measures and the underlying data may be\n            found in the <a class="pct-static-anchor" id="fifty-state" href="#section-about">“About the data” section</a> at the bottom of this page.\n        </p>\n        <p>\n            States can use these data to select more appropriate peer groups, giving\n            them a deeper understanding of how similarly positioned states manage their\n            borrowing.\n        </p>\n    </div>\n</section>\n<section id="section-comparison">\n    <h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">State Comparison</h2>\n    <div class="js-inner-content">\n        <div class="compare-selection-wrapper">\n            <span class="compare-label">Compare</span><br />\n            <div class="flex flex-start flex-baseline autoComplete_outerWrapper">\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-0">\n                    <input autocomplete="off" type="text" id="compare-input-0">\n                </div>\n                <span>to</span>\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-1">\n                    <input autocomplete="off" type="text" id="compare-input-1">\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n<section id="section-states">\n    <h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">50-State Data</h2>\n    <div class="js-inner-content">\n        <div id="selections-container"></div>\n        <div id="fifty-state-container"></div>\n    </div>\n</section>\n<section id="section-about">\n    <h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">About the Data</h2>\n    <div class="js-inner-content">\n        <p>\n            The measures were selected based on evidence in the debt affordability and\n            management literature that they relate to state debt levels, the\n            feasibility of collecting the data, and a desire to avoid redundancy.<sup>1</sup> Pew also limited the\n            number of measures to make the tool easy to use and understand.\n        </p>\n        <p>\n            This tool is not intended to be an exhaustive catalog of the factors that\n            might affect state borrowing levels. Instead, the tool is intended to help\n            states consider relevant criteria when constructing peer groups.\n        </p>\n        <p>\n            Each measure is described below.\n        </p>\n        <a name="debt_limit_type" id="debt_limit_type"></a>\n        <h3 class="js-debt_limit_type">\n            General obligation debt limit type (2018)\n        </h3>\n        <p>\n            General obligation (GO) debt is backed by a state’s full faith and credit,\n            the strongest possible pledge. As a result, GO debt is typically a state’s\n            highest rated and lowest cost form of debt.<sup>2</sup>\n        </p>\n        <p>\n            All but two states have legal GO debt limits, which vary in restrictiveness\n            and structure. For example, Connecticut limits this debt to 1.6 times its\n            total estimated general fund tax receipts, while Arizona effectively\n            prohibits its issuance.<sup>3</sup>\n        </p>\n        <p>\n            Pew has classified each state’s limit for GO debt as one of the following\n            types:\n        </p>\n        <ul>\n            <li>\n                <strong>Constitutional amendment.</strong>\n                Three states—Alabama, Ohio, and West Virginia—require an amendment to\n                their constitutions to issue GO debt.\n            </li>\n            <li>\n                <strong>Metric.</strong>\n                In 11 states—Connecticut, Georgia, Hawaii, Mississippi, Nevada, New\n                Hampshire, North Dakota, Oregon, Tennessee, Utah, and Wisconsin—debt or\n                annual debt service is not allowed to exceed a certain metric-based\n                threshold. Tennessee, for example, caps debt service at 10 percent of\n                combined revenues in its general, debt service, and highway funds.\n            </li>\n            <li>\n                <strong>Metric-based with referendum to exceed.</strong>\n                North Carolina, Pennsylvania, and Wyoming use a metric to cap debt but\n                allow issuance above the cap with voter approval.\n            </li>\n            <li>\n                <strong>No limit.</strong>\n                Maryland and Vermont place no restrictions on GO debt.\n            </li>\n            <li>\n                <strong>Prohibition.</strong>\n                Arizona, Colorado, Indiana, and Nebraska effectively prohibit GO debt.\n                Indiana law forbids any GO debt to be issued; the others authorize\n                amounts so low—$350,000 or less—as to be equivalent to prohibitions.\n            </li>\n            <li>\n                <strong>Referendum and/or supermajority.</strong>\n                Thirteen states—Alaska, Arkansas, California, Idaho, Iowa, Kansas,\n                Kentucky, Maine, Michigan, Minnesota, Missouri, Montana, and Rhode\n                Island—require some combination of voter approval and/or a legislative\n                supermajority (generally, three-fifths or two-thirds) to issue debt.\n            </li>\n            <li>\n                <strong>Referendum and/or supermajority and metric.</strong>\n                Fourteen states—Delaware, Florida, Illinois, Louisiana, Massachusetts,\n                New Jersey, New Mexico, New York, Oklahoma, South Carolina, South\n                Dakota, Texas, Virginia, and Washington—require a referendum and/or\n                supermajority and have a metric-based cap on debt or debt service.\n            </li>\n        </ul>\n        <div class="pct-note">\n            <p>\n                <strong>Note:</strong> The classification system is a variation on the approach taken in D.\n                Roderick Kiewiet and Kristin Szakaly, “Constitutional Limitations on\n                Borrowing: An Analysis of State Bonded Indebtedness,” <em>The Journal of Law, Economics &amp; Organization</em> 12, no. 1 (1996):\n                62-97,\n                <a href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents">\n                    https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents\n                </a>\n                .\n            </p>\n            <p>\n                <strong>Source:</strong> Pew analysis of state constitutions and statutes\n            </p>\n        </div>\n        <a name="centralization" id="centralization"></a>\n        <h3 class="js-centralization">\n            Centralization (fiscal year 2014)\n        </h3>\n        <p>\n            In some states, component units of government, such as independent agencies\n            and authorities, conduct much of the borrowing, rather than the primary\n            state government. Centralization measures primary government debt as a\n            share of the total debt issued by the primary government and its component\n            units. Across the states, centralization ranges from 0 percent—meaning that\n            all borrowing is by entities other than the primary government—to 100\n            percent, meaning the primary government does all of the borrowing.\n        </p>\n        <p>\n            Component unit debt generally relies less on state general funds for\n            repayment than primary government debt does. Often, lenders have no legal\n            claim on state general funds if a component unit defaults. As a result,\n            state comparisons based only on total debt may be misleading. Montana and\n            Delaware, for example, have about the same total debt, but most of\n            Montana’s debt is held by component units and most of Delaware’s is held by\n            the state. When comparing measures of “total debt,” choosing peers based on\n            the degree of centralization of debt may provide more appropriate\n            comparisons.\n        </p>\n        <p>\n            <strong>Note:</strong> To calculate centralization in a state, Pew calculated primary\n            government debt from states’ 2014 comprehensive annual financial reports.\n            It then calculated debt held by major component units, as reported in their\n            annual financial statements. Adding the two sums created a measure of\n            “total debt,” from which the percentage held by the primary\n            government—centralization—was determined.<sup>4</sup>\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Source:</strong> Pew analysis of fiscal year 2014 state comprehensive financial\n                annual reports\n            </p>\n        </div>\n        <a name="state_local_division" id="state_local_division"></a>\n        <h3 class="js-state_local_division">\n            The state-local borrowing division (2015)\n        </h3>\n        <p>\n            In some states, local governments are responsible for paying for most\n            capital projects within their jurisdictions. In others, the state\n            government is responsible for those projects, increasing its overall\n            borrowing. The division of borrowing responsibility is related to the debt\n            limit: In general, local governments in states with highly restrictive\n            state debt limits have higher debt levels.<sup>5</sup> This measure compares\n            local government borrowing to the combined debt held by the state and local\n            governments. Higher numbers indicate a greater share of total debt is held\n            by local governments. The state-local borrowing division ranges from 17.9\n            percent to 88 percent.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Source:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n                State and Local Government Finances: 2015 Data Release” (2018),\n                <a href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html">\n                    https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html\n                </a>\n            </p>\n        </div>\n        <a name="revenue_volatility" id="revenue_volatility"></a>\n        <h3 class="js-revenue_volatility">\n            Revenue volatility (1998-2017)\n        </h3>\n        <p>\n            Revenue volatility is the annual fluctuation in tax collections and is\n            affected by several factors, including a state’s mix of tax streams. The\n            score reflects the standard deviation of yearly percentage change in total\n            tax revenue between 1998 and 2017.<sup>6</sup> Pew controlled for the\n            effects of tax policy changes using the National Conference of State\n            Legislatures’ State Tax Actions Report.\n        </p>\n        <p>\n            A low volatility score means that revenue levels were similar from year to\n            year, and a high score indicates that revenue grew or declined more\n            dramatically. The scores range from 2.7 to 37.6. States with more volatile\n            revenue face shared budget challenges. When revenues drop, fixed costs—such\n            as debt service—may crowd out operating spending.<sup>7</sup>\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Sources:</strong> Pew’s calculation of volatility scores is based on data from the\n                U.S. Census Bureau’s Annual Survey of\n                <a href="https://www.census.gov/programs-surveys/stc.html">\n                    State Government Tax Collections\n                </a>\n                historical data series for 1997 to 2017, and the National Conference of\n                State Legislatures’ “\n                <a href="http://www.ncsl.org/research/fiscal-policy/state-tax-actions-database.aspx">\n                    State Tax Actions” reports\n                </a>\n                for 1997 to 2016. For additional information about the methodology and\n                underlying data, please see: The Pew Charitable Trusts, “Tax Revenue\n                Volatility, FY 1998-2017,” last modified Aug. 29, 2018,\n                <a href="http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6">\n                    http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6\n                </a>\n            </p>\n        </div>\n        <a name="ten_year_pop_growth" id="ten_year_pop_growth"></a>\n        <h3 class="js-ten_year_pop_growth">\n            Population growth (2008-17)\n        </h3>\n        <p>\n            Research has found that population growth in a state is associated with\n            an increase in borrowing.\n            <sup>8</sup>\n            From 2008 to 2017, state populations shrank or grew within a range of -1.3\n            percent to 16.5 percent.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n                State and Local Government Finances: 2015 Data Release” (2018),\n                <a href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html">\n                    https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html\n                </a>\n                ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n                United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n                2017,” Table 1,\n                <a href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx">\n                    https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx\n                </a>\n                ; U.S. Census Bureau, “Intercensal Estimates of the Resident Population for\n                the United States, Regions, States, and Puerto Rico: April 1, 2000 to July\n                1, 2010,” Table 1,\n                <a href="https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls">\n                    https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls\n                </a>\n            </p>\n        </div>\n        <h3 class="static">\n            Debt levels (2015)\n        </h3>\n        <p>\n            States compare their debt levels to peers through a variety of measures,\n            including total outstanding debt and metrics that normalize debt levels by\n            population or wealth to create a level scale across states of various\n            sizes. Pew’s tool includes two ratios: debt per capita and debt as a\n            percentage of state personal income. States often use a ratio of debt\n            service to revenue when they evaluate debt levels and set limits. This\n            ratio is not included in this tool due to cross-state comparability\n            challenges.<sup>9</sup>\n        </p>\n        <aside class="pct-box">\n            <h4>\n                <strong>\n                    Measuring State Debt: U.S. Census Data vs. Moody’s Net Tax-Supported\n                    Debt Calculations\n                </strong>\n            </h4>\n            <p>\n                The two measures of state debt levels included in this tool—debt per capita\n                and debt as a percentage of state personal income—rely on U.S. Census\n                Bureau data. These data capture a broad scope of debt, including some\n                obligations held by component units, such as independent agencies and\n                public authorities that “operate separately or somewhat autonomously from\n                the central state government but where the state government maintains\n                administrative or fiscal control over their activities.”<sup>10</sup> These measures are\n                intended to capture a broad universe of debt related to state government\n                activities across the 50 states.\n            </p>\n            <p>\n                States’ own debt affordability studies often use Moody’s Investors Service\n                Inc. calculations of state net tax-supported debt, which do not include\n                self-supporting (debt paid for from specified pledged revenue) or component\n                unit debt, to compare borrowing levels. Instead, these measures capture\n                obligations supported by state funds that might otherwise be available to\n                fund other state priorities.\n            </p>\n            <p>\n                There are tradeoffs associated with any definition of state debt. This\n                tool relies on a broader definition of long-term bonded debt to inform\n                examinations of the breadth of state functions relying on debt\n                financing. This definition may not be appropriate for all analyses.\n            </p>\n        </aside>\n        <a name="debt_per_capita" id="debt_per_capita"></a>\n        <h3 class="js-debt_per_capita">\n            Debt per capita\n        </h3>\n        <p>\n            Debt per capita, which measures total debt against a state’s\n            population, facilitates comparisons between states of different sizes.\n            It also helps policymakers understand the debt burden on individual\n            residents, who provide much of the revenue states use to repay debt in the\n            form of taxes and user fees. The range of debt per capita is $870 to\n            $11,059.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n                State and Local Government Finances: 2015 Data Release” (2018),\n                <a href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html">\n                    https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html\n                </a>\n                ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n                United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n                2017,” Table 1,\n                <a href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx">\n                    https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx\n                </a>\n            </p>\n        </div>\n        <a name="debt_percent_SPI" id="debt_percent_SPI"></a>\n        <h3 class="js-debt_percent_SPI">\n            Debt as a percentage of state personal income\n        </h3>\n        <p>\n            Considering a state’s debt level relative to its available resources for\n            repayment is a common practice used by states, credit rating agencies, and\n            academics.<sup>11</sup> State\n            personal income is one measure of a state’s ability to service debt. Debt\n            as a percentage of personal income ranges from 1.9 percent to 17.6 percent.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n                State and Local Government Finances: 2015 Data Release” (2018),\n                <a href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html">\n                    https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html\n                </a>\n                ; U.S. Bureau of Economic Analysis, “SA1 Personal Income Summary: Personal\n                Income, Population, Per Capita Personal Income,”\n                https://www.bea.gov/data/income-saving/personal-income-by-state\n            </p>\n        </div>\n        <a name="credit_rating" id="credit_rating"></a>\n        <h3 class="js-credit_rating static">\n            Credit ratings (September 2018 and September 2015)\n        </h3>\n        <p>\n            This tool allows users to group states by S&amp;P Global Ratings’ credit\n            ratings to compare those with similar credit profiles. The user can select\n            credit ratings from 2018 or 2015 to look at either recent information or\n            information corresponding to other data points in this tool.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Note:</strong> Pew collected ratings on general obligation issuance as of September\n                2018 and September 2015.\n                If the state does not issue GO bonds, the rating on the senior-most\n                tax-backed issuance was used instead.\n            </p>\n            <p>\n                <strong>Source:</strong> S&amp;P Global Ratings, state briefs,\n                <a href="https://www.spratings.com/en_US/topic/-/render/topic-detail/u-s-states">\n                    https://www.spratings.com/en_US/topic/-/render/topic-detail/u-s-states\n                </a>\n            </p>\n        </div>\n        <a name="census_region" id="census_region"></a>\n        <h3 class="js-census static">\n            Census region and division\n        </h3>\n        <p>\n            This tool allows users to group states by U.S. Census region and subregion\n            (“division”) to make geographical comparisons. There are four regions and\n            nine divisions. Although geography alone is not always a useful benchmark,\n            state officials often wish to understand more about their neighbors’\n            conditions.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Source:</strong> U.S. Census Bureau, “Census Regions and Divisions of the United\n                States,”\n                <a href="https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf">\n                    https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf\n                </a>\n            </p>\n        </div>\n        <h1>\n        </h1>\n        <br clear="all" />\n        <p>\n            <strong></strong>\n        </p>\n        <div class="pct-endnotes">\n            <div id="edn1">\n                <p>\n                    1.\n                    The literature reviewed included Robert W. Wassmer and Ronald C.\n                    Fisher, “State and Local Government Debt, 1992-2008,” <em>State Tax Notes</em>, Aug. 15, 2011: 427-436; and W. Bartley\n                    Hildreth and Gerald J. Miller, “Debt and Local Economy: Problems in\n                    Benchmarking Local Government Debt Affordability,” <em>Public Budgeting &amp; Finance</em> 22, no. 4 (2002): 99-113.\n                </p>\n            </div>\n            <div id="edn2">\n                <p>\n                    2.\n                    The Pew Charitable Trusts, “Strategies for Managing State Debt”\n                    (2017),\n                    <a href="http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt">\n                        http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt\n                    </a>\n                    .\n                </p>\n            </div>\n            <div id="edn3">\n                <p>\n                    3.\n                    Ibid.\n                </p>\n            </div>\n            <div id="edn4">\n                <p>\n                    4.\n                    For more detail on these data, see The Pew Charitable Trusts,\n                    “Strategies for Managing State Debt,” methodology.\n                </p>\n            </div>\n            <div id="edn5">\n                <p>\n                    5.\n                    For a discussion of the relationship between debt limits and local\n                    borrowing, see D. Roderick Kiewiet and Kristin Szakaly,\n                    “Constitutional Limitations on Borrowing: An Analysis of State\n                    Bonded Indebtedness,” <em>The Journal of Law, Economics &amp; Organization </em>12, no. 1\n                    (1996): 62-97,\n                    <a href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents">\n                        https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents\n                    </a>\n                    .\n                </p>\n            </div>\n            <div id="edn6">\n                <p>\n                    6.\n                    The Pew Charitable Trusts, “Tax Revenue Volatility Varies Across\n                    States, Revenue Streams,” accessed Sept. 10, 2018,\n                    <a href="http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6">\n                        http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6\n                    </a>\n                    .\n                </p>\n            </div>\n            <div id="edn7">\n                <p>\n                    7.\n                    One study found that as economic volatility increases, states\n                    prefer to pay for infrastructure projects with cash rather than\n                    through financing. Wen Wang, Yilin Hou, and William Duncome,\n                    “Determinants of Pay-as-You-Go Financing of Capital Projects:\n                    Evidence From the States,” <em>Public Budgeting &amp; Finance </em>\n                    27, no. 4 (2007): 18-42,\n                    <a href="https://doi.org/10.1111/j.1540-5850.2007.00892.x">\n                        https://doi.org/10.1111/j.1540-5850.2007.00892.x\n                    </a>\n                    .\n                </p>\n            </div>\n            <div id="edn8">\n                <p>\n                    8.\n                    Roy Bahl and William Duncombe, “State and Local Debt Burdens in the\n                    1980s: A Study in Contrast,” <em>Public Administration Review</em>\n                    53, No. 1 (1993): 31-40.\n                </p>\n            </div>\n            <div id="edn9">\n                <p>\n                    9.\n                    States do not use uniform definitions of debt service in their\n                    comprehensive annual financial reports. Each reports debt service\n                    from a unique combination of disparate funds. Using these sources\n                    to create a comparable cross-state measure of debt service to\n                    revenues is therefore difficult without a detailed understanding of\n                    each state’s reporting practices. As a result, many cross-state\n                    comparisons of debt service to revenues are inexact.\n                </p>\n            </div>\n            <div id="edn10">\n                <p>\n                    10.\n                    U.S. Census Bureau, “Annual Survey of State Government Finances,”\n                    <a href="https://www.census.gov/econ/overview/go1500.html">\n                        https://www.census.gov/econ/overview/go1500.html\n                    </a>\n                    . Examples of component units, which are legally separate entities\n                    from the primary state government but perform key functions,\n                    include housing authorities, economic development corporations, and\n                    universities.\n                </p>\n            </div>\n            <div id="edn11">\n                <p>\n                    11.\n                    Jennifer Weiner, “A Guide to State Debt Affordability Studies:\n                    Common Elements and Best Practices,” New England Public Policy\n                    Center at the Federal Reserve Bank of Boston (2013),\n                    <a href="https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx">\n                        https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx\n                    </a>\n                    ; Charles Brecher, Kurt Richwerger, and Marcia Van Wagner, “An\n                    Approach to Measuring the Affordability of State Debt,” <em>Public Budgeting &amp; Finance</em> 23, no. 4 (2003): 65-85,\n                    <a href="https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x">\n                        https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x\n                    </a>\n                    .\n                </p>\n            </div>\n        </div>\n    </div>\n</section>'},function(e,t){e.exports='<footer>\n\t\t<div>\n\t\t\t<p><strong>Download resources:</strong>\n\t\t\t\t\t<a class="pct-download" href="">[placeholder]</a>\n\t\t\t\t\t<a class="pct-download" href="">[placeholder]</a>\n\t\t\t\t</p></div>\n</footer>'},function(e,t,n){e.exports={static:"src-css--static"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VVElMUy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zdWJtb2R1bGVzL1VJLWpzL2VsZW1lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0YXRlZnVsLWRlYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YnN1Yi1qcy9zcmMvcHVic3ViLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbXBhcmlzb24vc3R5bGVzLnNjc3M/MDFmNyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb21wYXJpc29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Jhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWV0aG9kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVic3ViLXNldHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9uZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0ZS1kZWJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXBhcGFyc2UvcGFwYXBhcnNlLm1pbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbW9vdGhzY3JvbGwtcG9seWZpbGwvZGlzdC9zbW9vdGhzY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RhdGEvZGF0YS5jc3YiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRlLWNvbXBhcmlzb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9hdXRvQ29tcGxldGUuanMvZGlzdC9jc3MvYXV0b0NvbXBsZXRlLmNzcz85OTU3Iiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0ZS1jb21wYXJpc29uL3N0eWxlcy5zY3NzPzNjZTgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29tcGFyaXNvbi90ZXh0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbXBhcmlzb24vY2hhcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmFyL3N0eWxlcy5zY3NzPzJjYWUiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9hdXRvQ29tcGxldGUuanMvZGlzdC9qcy9hdXRvQ29tcGxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy1oYXNoL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aXBweS5qcy9lc20vaW5kZXguYWxsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2ZpZnR5LXN0YXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9maWZ0eS1zdGF0ZS9zdHlsZXMuc2Nzcz84MWMwIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9maWZ0eS1zdGF0ZS9zZWxlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9maWZ0eS1zdGF0ZS9zZWxlY3Rpb25zL3N0eWxlcy5zY3NzPzZiNmMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vc3R5bGVzLnNjc3M/ZWNmZSIsIndlYnBhY2s6Ly8vLi9zdWJtb2R1bGVzL1VJLWpzL2lucHV0cy9pbnB1dHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VSS1qcy9pbnB1dHMvc3R5bGVzLnNjc3M/NGM2NCIsIndlYnBhY2s6Ly8vLi9zdWJtb2R1bGVzL1BDVEFwcC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zdWJtb2R1bGVzL1JPVVRSL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9wYXJ0aWFscy9zZWN0aW9ucy5odG1sIiwid2VicGFjazovLy8uL3NyYy9wYXJ0aWFscy9mb290ZXIuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3N0eWxlcy5zY3NzPzM4MjkiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJHVE1QdXNoIiwiZXZlbnRMYWJlbCIsImRhdGFMYXllciIsInB1c2giLCJldmVudCIsImV2ZW50RGF0YSIsInB1Ymxpc2hXaW5kb3dSZXNpemUiLCJTIiwicmVzaXplVGltZW91dCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRUaW1lb3V0Iiwic2V0U3RhdGUiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiRmFkZUluVGV4dCIsIkhUTUxFbGVtZW50IiwiZmFkZU91dENvbnRlbnQiLCJ0aGlzIiwiY2xhc3NMaXN0IiwiYWRkIiwiZmFkZUluQ29udGVudCIsImNvbnRlbnQiLCJfdGhpcyIsImR1cmF0aW9uUyIsInN0eWxlIiwidHJhbnNpdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiZHVyYXRpb25TdHIiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImR1cmF0aW9uIiwicGFyc2VGbG9hdCIsImlubmVySFRNTCIsInJlbW92ZSIsIlN0cmluZ0hlbHBlcnMiLCJTdHJpbmciLCJjbGVhblN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsInJlbW92ZVVuZGVyc2NvcmVzIiwidW5kb0NhbWVsQ2FzZSIsInRydW5jIiwidXNlV29yZEJvdW5kYXJ5IiwibGVuZ3RoIiwic3ViU3RyaW5nIiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJoYXNoQ29kZSIsImhhc2giLCJjaGFyQ29kZUF0IiwiRE9NSGVscGVycyIsImluZGV4T2YiLCJjbGFzc1N0cmluZ3MiLCJtYXRjaCIsImlkU3RyaW5nIiwiZWxTdHJpbmciLCJlbCIsImNyZWF0ZUVsZW1lbnQiLCJmb3JFYWNoIiwia2xhc3MiLCJzZXRBdHRyaWJ1dGUiLCJxIiwicXVlcnlTZWxlY3RvciIsInFhIiwicXVlcnlTZWxlY3RvckFsbCIsIl9VdGlscyIsIkVsZW1lbnQiLCJzZWxlY3RvciIsIm9wdGlvbnMiLCJfY2xhc3NDYWxsQ2hlY2siLCJtb2RlbCIsInBhcmVudCIsInJlbmRlclRvU2VsZWN0b3IiLCJjb250YWluZXIiLCIkZCIsImNoaWxkcmVuIiwicmVyZW5kZXIiLCJyZXJlbmRlck9uRGF0YU1pc21hdGNoIiwiaXNNaXNtYXRjaGVkIiwiZGF0YSIsInByZXJlbmRlciIsImFyZ3VtZW50cyIsImlzUmVhZHkiLCJyZWplY3QiLCJleGlzdGluZyIsInByZXJlbmRlcmVkIiwiUHViU3ViIiwic3RhdGUiLCJfbG9nU3RhdGUiLCJjb25zb2xlIiwibG9nIiwiQXJyYXkiLCJjb21wYXJlIiwidGVzdEFyciIsInN0YXRlTW9kdWxlIiwibG9nU3RhdGUiLCJnZXRTdGF0ZSIsInVuZGVmaW5lZCIsImdldFByZXZpb3VzU3RhdGUiLCJwdWJsaXNoIiwiaXNBcnJheSIsInVuc2hpZnQiLCJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsIm1lc3NhZ2VzIiwibGFzdFVpZCIsImhhc0tleXMiLCJvYmoiLCJjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyIsInN1YnNjcmliZXIiLCJtZXNzYWdlIiwiZXgiLCJ0aHJvd0V4Y2VwdGlvbiIsImNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMiLCJkZWxpdmVyTWVzc2FnZSIsIm9yaWdpbmFsTWVzc2FnZSIsIm1hdGNoZWRNZXNzYWdlIiwiaW1tZWRpYXRlRXhjZXB0aW9ucyIsInN1YnNjcmliZXJzIiwiY2FsbFN1YnNjcmliZXIiLCJzeW5jIiwiZGVsaXZlciIsInRvcGljIiwicG9zaXRpb24iLCJjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uIiwidG9TdHJpbmciLCJoYXNTdWJzY3JpYmVycyIsImZvdW5kIiwiQm9vbGVhbiIsIm1lc3NhZ2VIYXNTdWJzY3JpYmVycyIsInB1Ymxpc2hTeW5jIiwic3Vic2NyaWJlIiwiZnVuYyIsInRva2VuIiwic3Vic2NyaWJlT25jZSIsInVuc3Vic2NyaWJlIiwiYXBwbHkiLCJjbGVhckFsbFN1YnNjcmlwdGlvbnMiLCJjbGVhclN1YnNjcmlwdGlvbnMiLCJpc1RvcGljIiwiZGVzY2VuZGFudFRvcGljRXhpc3RzIiwiaXNUb2tlbiIsImlzRnVuY3Rpb24iLCJyZXN1bHQiLCJhbWQiLCJjb21wYXJlQ29sb3IxIiwiY29tcGFyZUNvbG9yMiIsImNoYXJ0Q29udGFpbmVyIiwiY2hhcnRMYWJlbCIsImNoYXJ0TGFiZWxUZXh0IiwiY2hhcnRMYWJlbDEiLCJjaGFydExhYmVsMiIsImJhckNvbnRhaW5lciIsImJhckNvbnRhaW5lcjEiLCJiYXJDb250YWluZXIyIiwiZGF0YUxhYmVsIiwiX2VsZW1lbnQiLCJDb21wYXJpc29uIiwiX3RoaXMyIiwiZGl2IiwibWF0Y2hlcyIsImZpbmQiLCJjb2RlIiwiY29tcGFyaXNvbiIsImluZGV4IiwiQmFyIiwiYmFyIiwiY29sb3IiLCJ0cmFuc2Zvcm0iLCJwbGFjZVplcm8iLCJmaWVsZCIsImxpbmVhclNjYWxlIiwidHlwZU9iamVjdCIsInR5cGVzIiwic2NhbGUiLCJ0eXBlIiwibWluIiwic3ByZWFkIiwiemVyb1BsYWNlbWVudCIsIm9mZnNldCIsImNyb3NzZXNaZXJvIiwicmF3IiwicGFyZW50Tm9kZSIsImlzWmVybyIsIm1zZyIsImNoZWNrSWZaZXJvIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZm9ybWF0VmFsdWUiLCJmb3JtYXR0ZWRWYWx1ZVN0cmluZyIsIm1ldGFEYXRhIiwiZGVjaW1hbHMiLCJ0b0xvY2FsZVN0cmluZyIsIm1pbmltdW1GcmFjdGlvbkRpZ2l0cyIsIk1hdGgiLCJyb3VuZCIsImN1cnJlbmN5Iiwic2xpY2UiLCJzdWJzY3JpcHRpb25zIiwiY3JlYXRlVG9rZW4iLCJmblJlZiIsImZ1bmN0aW9uSGFzaCIsImZuIiwibG9nU3VicyIsInNldFN1YnMiLCJzdWJzQXJyYXkiLCJwYWlyIiwidG9rZW5PYmoiLCJjYW5jZWxTdWIiLCJrZXlzIiwiTWFwIiwibWFwIiwiZiIsImVhY2giLCJzZXQiLCJjb25zdHJ1Y3RvciIsImhhcyIsImNsZWFyIiwidmFsdWVzIiwiZW50cmllcyIsInNpemUiLCJlbXB0eSIsInNyY19tYXAiLCJzcmNfbmVzdCIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJuZXN0Iiwic29ydEtleXMiLCJhcnJheSIsImRlcHRoIiwiY3JlYXRlUmVzdWx0Iiwic2V0UmVzdWx0Iiwic29ydCIsImtleVZhbHVlIiwidmFsdWVzQnlLZXkiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJzb3J0S2V5IiwidiIsImsiLCJhIiwiYiIsIm9yZGVyIiwiU2V0IiwicHJvdG8iLCJzcmNfc2V0Iiwic3JjX2tleXMiLCJzcmNfdmFsdWVzIiwic3JjX2VudHJpZXMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiZ2xvYmFsIiwiaXNCcm93c2VyIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidGltZW91dER1cmF0aW9uIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZGVib3VuY2UiLCJjYWxsZWQiLCJ0aGVuIiwic2NoZWR1bGVkIiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZWxlbWVudCIsIm5vZGVUeXBlIiwiY3NzIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZ2V0UGFyZW50Tm9kZSIsIm5vZGVOYW1lIiwiaG9zdCIsImdldFNjcm9sbFBhcmVudCIsImJvZHkiLCJfZ2V0U3R5bGVDb21wdXRlZFByb3AiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInRlc3QiLCJpc0lFMTEiLCJNU0lucHV0TWV0aG9kQ29udGV4dCIsImRvY3VtZW50TW9kZSIsImlzSUUxMCIsImlzSUUiLCJ2ZXJzaW9uIiwiZ2V0T2Zmc2V0UGFyZW50Iiwibm9PZmZzZXRQYXJlbnQiLCJvZmZzZXRQYXJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJnZXRSb290Iiwibm9kZSIsImZpbmRDb21tb25PZmZzZXRQYXJlbnQiLCJlbGVtZW50MSIsImVsZW1lbnQyIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwic3RhcnQiLCJlbmQiLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsImNvbnRhaW5zIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJlbGVtZW50MXJvb3QiLCJnZXRTY3JvbGwiLCJ1cHBlclNpZGUiLCJodG1sIiwic2Nyb2xsaW5nRWxlbWVudCIsImdldEJvcmRlcnNTaXplIiwic3R5bGVzIiwiYXhpcyIsInNpZGVBIiwic2lkZUIiLCJnZXRTaXplIiwiY29tcHV0ZWRTdHlsZSIsIm1heCIsInBhcnNlSW50IiwiZ2V0V2luZG93U2l6ZXMiLCJoZWlnaHQiLCJ3aWR0aCIsImNsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJzb3VyY2UiLCJnZXRDbGllbnRSZWN0Iiwib2Zmc2V0cyIsInJpZ2h0IiwibGVmdCIsImJvdHRvbSIsInRvcCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlY3QiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiZSIsInNpemVzIiwiY2xpZW50SGVpZ2h0IiwiaG9yaXpTY3JvbGxiYXIiLCJvZmZzZXRXaWR0aCIsInZlcnRTY3JvbGxiYXIiLCJvZmZzZXRIZWlnaHQiLCJnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUiLCJmaXhlZFBvc2l0aW9uIiwiaXNIVE1MIiwiY2hpbGRyZW5SZWN0IiwicGFyZW50UmVjdCIsInNjcm9sbFBhcmVudCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsInN1YnRyYWN0IiwibW9kaWZpZXIiLCJpbmNsdWRlU2Nyb2xsIiwiZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJnZXRCb3VuZGFyaWVzIiwicG9wcGVyIiwicmVmZXJlbmNlIiwicGFkZGluZyIsImJvdW5kYXJpZXNFbGVtZW50IiwiYm91bmRhcmllcyIsImV4Y2x1ZGVTY3JvbGwiLCJyZWxhdGl2ZU9mZnNldCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSIsImJvdW5kYXJpZXNOb2RlIiwiaXNGaXhlZCIsIl9nZXRXaW5kb3dTaXplcyIsImlzUGFkZGluZ051bWJlciIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicGxhY2VtZW50IiwicmVmUmVjdCIsInJlY3RzIiwic29ydGVkQXJlYXMiLCJhcmVhIiwiX3JlZiIsImZpbHRlcmVkQXJlYXMiLCJmaWx0ZXIiLCJfcmVmMiIsImNvbXB1dGVkUGxhY2VtZW50IiwidmFyaWF0aW9uIiwic3BsaXQiLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwiZ2V0T3V0ZXJTaXplcyIsIngiLCJtYXJnaW5Cb3R0b20iLCJ5IiwibWFyZ2luUmlnaHQiLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsIm1hdGNoZWQiLCJnZXRQb3BwZXJPZmZzZXRzIiwicmVmZXJlbmNlT2Zmc2V0cyIsInBvcHBlclJlY3QiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJhcnIiLCJjaGVjayIsInJ1bk1vZGlmaWVycyIsIm1vZGlmaWVycyIsImVuZHMiLCJwcm9wIiwiZmluZEluZGV4IiwiY3VyIiwid2FybiIsImVuYWJsZWQiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwicHJlZml4IiwidG9DaGVjayIsImdldFdpbmRvdyIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVCb3VuZCIsInBhc3NpdmUiLCJzY3JvbGxFbGVtZW50IiwiYXR0YWNoVG9TY3JvbGxQYXJlbnRzIiwiY2FsbGJhY2siLCJzY3JvbGxQYXJlbnRzIiwiaXNCb2R5IiwiZXZlbnRzRW5hYmxlZCIsImRpc2FibGVFdmVudExpc3RlbmVycyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2NoZWR1bGVVcGRhdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJpc0Zpbml0ZSIsInNldFN0eWxlcyIsInVuaXQiLCJpc0ZpcmVmb3giLCJpc01vZGlmaWVyUmVxdWlyZWQiLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJyZXF1ZXN0aW5nIiwiaXNSZXF1aXJlZCIsIl9yZXF1ZXN0aW5nIiwicmVxdWVzdGVkIiwicGxhY2VtZW50cyIsInZhbGlkUGxhY2VtZW50cyIsImNsb2Nrd2lzZSIsImNvdW50ZXIiLCJjb25jYXQiLCJyZXZlcnNlIiwiQkVIQVZJT1JTIiwiRkxJUCIsIkNMT0NLV0lTRSIsIkNPVU5URVJDTE9DS1dJU0UiLCJwYXJzZU9mZnNldCIsImJhc2VQbGFjZW1lbnQiLCJ1c2VIZWlnaHQiLCJmcmFnbWVudHMiLCJmcmFnIiwidHJpbSIsImRpdmlkZXIiLCJzZWFyY2giLCJzcGxpdFJlZ2V4Iiwib3BzIiwib3AiLCJtZXJnZVdpdGhQcmV2aW91cyIsInJlZHVjZSIsInN0ciIsInRvVmFsdWUiLCJpbmRleDIiLCJEZWZhdWx0cyIsInBvc2l0aW9uRml4ZWQiLCJyZW1vdmVPbkRlc3Ryb3kiLCJvbkNyZWF0ZSIsIm9uVXBkYXRlIiwic2hpZnQiLCJzaGlmdHZhcmlhdGlvbiIsIl9kYXRhJG9mZnNldHMiLCJpc1ZlcnRpY2FsIiwic2lkZSIsInNoaWZ0T2Zmc2V0cyIsInByZXZlbnRPdmVyZmxvdyIsInRyYW5zZm9ybVByb3AiLCJwb3BwZXJTdHlsZXMiLCJwcmlvcml0eSIsInByaW1hcnkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwic2Vjb25kYXJ5Iiwia2VlcFRvZ2V0aGVyIiwiZmxvb3IiLCJvcFNpZGUiLCJhcnJvdyIsIl9kYXRhJG9mZnNldHMkYXJyb3ciLCJhcnJvd0VsZW1lbnQiLCJsZW4iLCJzaWRlQ2FwaXRhbGl6ZWQiLCJhbHRTaWRlIiwiYXJyb3dFbGVtZW50U2l6ZSIsImNlbnRlciIsInBvcHBlck1hcmdpblNpZGUiLCJwb3BwZXJCb3JkZXJTaWRlIiwic2lkZVZhbHVlIiwiZmxpcCIsImZsaXBwZWQiLCJvcmlnaW5hbFBsYWNlbWVudCIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwiYmVoYXZpb3IiLCJzdGVwIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb24iLCJmbGlwVmFyaWF0aW9ucyIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImhpZGUiLCJib3VuZCIsImF0dHJpYnV0ZXMiLCJjb21wdXRlU3R5bGUiLCJsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24iLCJncHVBY2NlbGVyYXRpb24iLCJvZmZzZXRQYXJlbnRSZWN0Iiwic2hvdWxkUm91bmQiLCJub1JvdW5kIiwicmVmZXJlbmNlV2lkdGgiLCJwb3BwZXJXaWR0aCIsImlzVmFyaWF0aW9uIiwiaG9yaXpvbnRhbFRvSW50ZWdlciIsInZlcnRpY2FsVG9JbnRlZ2VyIiwiZ2V0Um91bmRlZE9mZnNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwicHJlZml4ZWRQcm9wZXJ0eSIsIndpbGxDaGFuZ2UiLCJpbnZlcnRUb3AiLCJpbnZlcnRMZWZ0IiwieC1wbGFjZW1lbnQiLCJhcnJvd1N0eWxlcyIsImFwcGx5U3R5bGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJvbkxvYWQiLCJtb2RpZmllck9wdGlvbnMiLCJQb3BwZXIiLCJ1cGRhdGUiLCJpc0Rlc3Ryb3llZCIsImlzQ3JlYXRlZCIsImpxdWVyeSIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlQ2hpbGQiLCJVdGlscyIsIlBvcHBlclV0aWxzIiwiX3N0YXRlRGVidCIsIkFwcCIsIlN0YXRlRGVidCIsIm5lZWRzUm91dGVyIiwiSVNfUFJFUkVOREVSSU5HIiwiaW5pdCIsImQzIiwiX3N0YXRlZnVsRGVhZCIsInNtb290aHNjcm9sbCIsInBvbHlmaWxsIiwiZ3JvdXBzIiwiZGljdCIsInZpZXdzIiwic2Nyb2xsUG9zaXRpb24iLCJnZXRSdW50aW1lRGF0YSIsImFwcENvbnRhaW5lciIsIlBhcGEiLCJwYXJzZSIsImRvd25sb2FkIiwiZHluYW1pY1R5cGluZyIsImhlYWRlciIsImZhc3RNb2RlIiwic2tpcEVtcHR5TGluZXMiLCJiZWZvcmVGaXJzdENodW5rIiwiY2h1bmsiLCJkYXRhSGFzaCIsImdldEF0dHJpYnV0ZSIsImNvbXBsZXRlIiwicmVzcG9uc2UiLCJkYXRhQXJyYXkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJ0eXBlc05lc3RlZCIsImdyb3VwIiwiY3JlYXRlQ29tcG9uZW50IiwiQ29tcGFyaXNvblZpZXciLCJGaWZ0eVN0YXRlVmlldyIsImVycm9yIiwiUENUQXBwIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwic2VjdGlvbnMiLCJmb290ZXIiLCJ2aWV3IiwiYXBwZW5kQ2hpbGQiLCJfdGhpczMiLCJfZ2V0IiwiX19wcm90b19fIiwiZ2V0UHJvdG90eXBlT2YiLCJhdHRhY2hTZWN0aW9uT3BlbkNsb3NlIiwiaW5pdFN0YXRpY0FuY2hvckxpbmtzIiwibGluayIsImhyZWYiLCJwcmV2ZW50RGVmYXVsdCIsInNjcm9sbFRvIiwicGFnZVlPZmZzZXQiLCJ0b2dnbGVTZWN0aW9uIiwidG9nZ2xlIiwiYmx1ciIsImlubmVyVGV4dCIsImhlYWRpbmciLCJrZXlDb2RlIiwic2Nyb2xsQmFjayIsImhlYWRlclBvc2l0aW9uIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwic2VsZiIsInBvc3RNZXNzYWdlIiwibG9jYXRpb24iLCJoIiwidSIsInoiLCJkeW5hbWljVHlwaW5nRnVuY3Rpb24iLCJ3b3JrZXIiLCJXT1JLRVJTX1NVUFBPUlRFRCIsIlNDUklQVF9QQVRIIiwiRXJyb3IiLCJXb3JrZXIiLCJvbm1lc3NhZ2UiLCJpZCIsInVzZXJTdGVwIiwidXNlckNodW5rIiwidXNlckNvbXBsZXRlIiwidXNlckVycm9yIiwiaW5wdXQiLCJjb25maWciLCJ3b3JrZXJJZCIsIk5PREVfU1RSRUFNX0lOUFVUIiwiXyIsInJlYWRhYmxlIiwicmVhZCIsIm9uIiwiZyIsIkZpbGUiLCJzdHJlYW0iLCJ1bnBhcnNlIiwiZGVsaW1pdGVyIiwiQkFEX0RFTElNSVRFUlMiLCJxdW90ZXMiLCJuZXdsaW5lIiwicXVvdGVDaGFyIiwiUmVnRXhwIiwiTSIsIkpTT04iLCJmaWVsZHMiLCJtZXRhIiwiam9pbiIsIkRhdGUiLCJzdHJpbmdpZnkiLCJSRUNPUkRfU0VQIiwiZnJvbUNoYXJDb2RlIiwiVU5JVF9TRVAiLCJCWVRFX09SREVSX01BUksiLCJMb2NhbENodW5rU2l6ZSIsIlJlbW90ZUNodW5rU2l6ZSIsIkRlZmF1bHREZWxpbWl0ZXIiLCJQYXJzZXIiLCJQYXJzZXJIYW5kbGUiLCJOZXR3b3JrU3RyZWFtZXIiLCJGaWxlU3RyZWFtZXIiLCJTdHJpbmdTdHJlYW1lciIsIlJlYWRhYmxlU3RyZWFtU3RyZWFtZXIiLCJqUXVlcnkiLCJhdHRyIiwiRmlsZVJlYWRlciIsImZpbGVzIiwiZmlsZSIsImlucHV0RWxlbSIsImluc3RhbmNlQ29uZmlnIiwiZXh0ZW5kIiwiYmVmb3JlIiwiYWN0aW9uIiwicmVhc29uIiwic3BsaWNlIiwiX2hhbmRsZSIsIl9maW5pc2hlZCIsIl9jb21wbGV0ZWQiLCJfaW5wdXQiLCJfYmFzZUluZGV4IiwiX3BhcnRpYWxMaW5lIiwiX3Jvd0NvdW50IiwiX3N0YXJ0IiwiX25leHRDaHVuayIsImlzRmlyc3RDaHVuayIsIl9jb21wbGV0ZVJlc3VsdHMiLCJlcnJvcnMiLCJFIiwiY2h1bmtTaXplIiwic3RyZWFtZXIiLCJfY29uZmlnIiwicGFyc2VDaHVuayIsInBhdXNlZCIsImFib3J0ZWQiLCJjdXJzb3IiLCJzdWJzdHJpbmciLCJwcmV2aWV3IiwicmVzdWx0cyIsIldPUktFUl9JRCIsImZpbmlzaGVkIiwiX3NlbmRFcnJvciIsIl9yZWFkQ2h1bmsiLCJfY2h1bmtMb2FkZWQiLCJYTUxIdHRwUmVxdWVzdCIsIndpdGhDcmVkZW50aWFscyIsIm9ubG9hZCIsInciLCJvbmVycm9yIiwiX2NodW5rRXJyb3IiLCJvcGVuIiwiZG93bmxvYWRSZXF1ZXN0SGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwic3RhdHVzIiwicmVhZHlTdGF0ZSIsImdldFJlc3BvbnNlSGVhZGVyIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIndlYmtpdFNsaWNlIiwibW96U2xpY2UiLCJGaWxlUmVhZGVyU3luYyIsInJlYWRBc1RleHQiLCJlbmNvZGluZyIsInBhdXNlIiwicmVzdW1lIiwiX3N0cmVhbURhdGEiLCJfc3RyZWFtRW5kIiwiX3N0cmVhbUVycm9yIiwiX2NoZWNrSXNGaW5pc2hlZCIsIl9zdHJlYW1DbGVhblVwIiwicmVtb3ZlTGlzdGVuZXIiLCJhYm9ydCIsInRyaW1IZWFkZXJzIiwicm93IiwiY29tbWVudHMiLCJhYnMiLCJzdWNjZXNzZnVsIiwiYmVzdERlbGltaXRlciIsImdldENoYXJJbmRleCIsIk8iLCJUIiwiSSIsIkEiLCJEIiwiTCIsImVzY2FwZUNoYXIiLCJQIiwiRiIsIkMiLCJSIiwibGluZWJyZWFrIiwidHJ1bmNhdGVkIiwidGVybWluYXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzcmMiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsIl9fZm9yY2VTbW9vdGhTY3JvbGxQb2x5ZmlsbF9fIiwiU0NST0xMX1RJTUUiLCJvcmlnaW5hbCIsInNjcm9sbCIsInNjcm9sbEJ5IiwiZWxlbWVudFNjcm9sbCIsInNjcm9sbEludG9WaWV3Iiwibm93IiwicGVyZm9ybWFuY2UiLCJST1VORElOR19UT0xFUkFOQ0UiLCJzaG91bGRCYWlsT3V0Iiwic21vb3RoU2Nyb2xsIiwic2Nyb2xsWCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsWSIsIlN5bnRheEVycm9yIiwic2Nyb2xsYWJsZVBhcmVudCIsImlzU2Nyb2xsYWJsZSIsImZpbmRTY3JvbGxhYmxlUGFyZW50IiwicGFyZW50UmVjdHMiLCJjbGllbnRSZWN0cyIsImZpcnN0QXJnIiwiaGFzU2Nyb2xsYWJsZVNwYWNlIiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsV2lkdGgiLCJjYW5PdmVyZmxvdyIsIm92ZXJmbG93VmFsdWUiLCJpc1Njcm9sbGFibGVZIiwiaXNTY3JvbGxhYmxlWCIsImNvbnRleHQiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiZWxhcHNlZCIsInN0YXJ0VGltZSIsImNvcyIsIlBJIiwic3RhcnRYIiwic3RhcnRZIiwibWV0aG9kIiwic2Nyb2xsYWJsZSIsImluaXRpYWxDb21wYXJlIiwiX2NoaWxkcmVuIiwiY29tcGFyaXNvbnMiLCJDb21wYXJpc29uVGV4dCIsIkNvbXBhcmlzb25DaGFydCIsImNvbXBvdW5kSW5kZXgiLCJncm91cERpdiIsImdyb3VwSGVhZGVyIiwidHlwZUNvbnRhaW5lciIsInR5cGVEaXYiLCJ0eXBlSGVhZGVyIiwidG9vbHRpcCIsIndpdGhUb29sdGlwIiwibGFiZWwiLCJzdGF0ZXMiLCJyYW5kb20iLCJfdGhpczQiLCJpbml0aWFsaXplQXV0b2NvbXBsZXRlcyIsImluaXRpYWxpemVUb29sdGlwcyIsIlBTIiwicmFuZG9taXplIiwiZWxzIiwiX3RpcHB5MiIsImRlZmF1bHQiLCJpbnRlcmFjdGl2ZSIsInJldHVybk1vcmVMaW5rIiwiZGF0YXNldCIsInRleHRDb250ZW50IiwiX3RoaXM2IiwiYXV0b0NvbXBsZXRlc0FyZURpcnR5Iiwic3VnZ2VzdGlvbk1vdXNlSGFuZGxlciIsImZvY3VzIiwicmV2ZXJ0VG9QcmV2aW91cyIsImN1cnJlbnRTdGF0ZUFiYnIiLCJzdWdnZXN0aW9ucyIsIndyYXBwZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJzdWdnZXN0aW9uIiwiX3RoaXM1IiwiQXV0b0NvbXBsZXRlIiwiaGlnaGxpZ2h0Iiwib25TZWxlY3Rpb24iLCJmZWVkYmFjayIsInNlbGVjdGlvbiIsInBsYWNlSG9sZGVyIiwicmVzdWx0c0xpc3QiLCJkZXN0aW5hdGlvbiIsInNlYXJjaEVuZ2luZSIsInRocmVzaG9sZCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbkxpc3QiLCJvYnNlcnZlciIsIm11dGF0aW9uIiwiYWRkZWROb2RlcyIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwic2V0TXV0YXRpb25PYnNlcnZlciIsImF1dG9Db21wbGV0ZV93cmFwcGVyIiwiYXV0b0NvbXBsZXRlIiwiYXV0b0NvbXBsZXRlX3Jlc3VsdHNfbGlzdCIsImF1dG9Db21wbGV0ZV9yZXN1bHQiLCJhdXRvQ29tcGxldGVfaGlnaGxpZ2h0ZWQiLCJjcmVkaXQtcmF0aW5nIiwiZGVidF9saW1pdF90eXBlIiwiY3JlZGl0MjAxNSIsImNyZWRpdDIwMTgiLCJhdXRvQ29tcGxldGUwIiwiYXV0b0NvbXBsZXRlX3dyYXBwZXItMCIsImF1dG9Db21wbGV0ZTEiLCJhdXRvQ29tcGxldGVfd3JhcHBlci0xIiwicmV0dXJuVGVtcGxhdGUiLCJfbWV0aG9kcyIsImJhcnMiLCJwYXJ0aWFsVGVtcGxhdGUiLCJ0b0ZpeGVkIiwib3V0ZXJIVE1MIiwicmV0dXJuVHJhbnNsYXRlVmFsdWUiLCJiYXJDb2xvcjEiLCJiYXJDb2xvcjIiLCJfZGVmaW5lUHJvcGVydGllcyIsInNlbGVjdCIsImdldElucHV0IiwiY2xlYXJSZXN1bHRzIiwiYXV0b0NvbXBsZXRlVmlldyIsImNyZWF0ZVJlc3VsdHNMaXN0IiwicmVuZGVyUmVzdWx0cyIsImluc2VydEFkamFjZW50RWxlbWVudCIsImFkZFJlc3VsdHNUb0xpc3QiLCJkYXRhU3JjIiwiZGF0YUtleSIsInJlY29yZCIsInJlc3VsdFZhbHVlIiwibmF2aWdhdGlvbiIsImZpcnN0IiwiZmlyc3RDaGlsZCIsIm9ua2V5ZG93biIsImFjdGl2ZSIsImFjdGl2ZUVsZW1lbnQiLCJwcmV2aW91c1NpYmxpbmciLCJjaGlsZE5vZGVzIiwibGFzdENoaWxkIiwibmV4dFNpYmxpbmciLCJnZXRTZWxlY3Rpb24iLCJyZXN1bHRzVmFsdWVzIiwiZXZlbnRUeXBlIiwicXVlcnkiLCJyZXNWYWx1ZSIsImNsb3Nlc3QiLCJtYXhSZXN1bHRzIiwicmVzdWx0SXRlbSIsInJlY29yZExvd2VyQ2FzZSIsInNlYXJjaFBvc2l0aW9uIiwibnVtYmVyIiwicmVjb3JkQ2hhciIsImluY2x1ZGVzIiwiaW5wdXRWYWx1ZSIsInJlc0xpc3QiLCJsaXN0Iiwib25rZXl1cCIsImxpc3RNYXRjaGVkUmVzdWx0cyIsImlnbml0ZSIsInBvcHBlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwidWEiLCJpc1VDQnJvd3NlciIsImlzSU9TIiwicGxhdGZvcm0iLCJNU1N0cmVhbSIsImExMXkiLCJhbGxvd0hUTUwiLCJhbmltYXRlRmlsbCIsImFuaW1hdGlvbiIsImFwcGVuZFRvIiwiYXJpYSIsImFycm93VHlwZSIsImJvdW5kYXJ5IiwiZGVsYXkiLCJkaXN0YW5jZSIsImZsaXBCZWhhdmlvciIsImZsaXBPblVwZGF0ZSIsImZvbGxvd0N1cnNvciIsImhpZGVPbkNsaWNrIiwiaWdub3JlQXR0cmlidXRlcyIsImluZXJ0aWEiLCJpbnRlcmFjdGl2ZUJvcmRlciIsImludGVyYWN0aXZlRGVib3VuY2UiLCJsYXp5IiwibWF4V2lkdGgiLCJtdWx0aXBsZSIsIm9uSGlkZGVuIiwib25IaWRlIiwib25Nb3VudCIsIm9uU2hvdyIsIm9uU2hvd24iLCJwb3BwZXJPcHRpb25zIiwicm9sZSIsInNob3dPbkluaXQiLCJzdGlja3kiLCJ0aGVtZSIsInRvdWNoIiwidG91Y2hIb2xkIiwidHJpZ2dlciIsInVwZGF0ZUR1cmF0aW9uIiwid2FpdCIsInpJbmRleCIsIlBPUFBFUl9JTlNUQU5DRV9ERVBFTkRFTkNJRVMiLCJTZWxlY3RvcnMiLCJQT1BQRVIiLCJUT09MVElQIiwiQ09OVEVOVCIsIkJBQ0tEUk9QIiwiQVJST1ciLCJST1VORF9BUlJPVyIsImVsZW1lbnRQcm90byIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiYXJyYXlGcm9tIiwicGFyZW50U2VsZWN0b3IiLCJjbG9zZXN0Q2FsbGJhY2siLCJnZXRWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsIm1zIiwidGltZW91dElkIiwiX2FyZ3VtZW50cyIsImNsZWFyVGltZW91dCIsImdldE1vZGlmaWVyIiwiaXNTaW5ndWxhciIsImV2YWx1YXRlVmFsdWUiLCJhcmdzIiwic2V0RmxpcE1vZGlmaWVyRW5hYmxlZCIsInNldElubmVySFRNTCIsInNldENvbnRlbnQiLCJjb250ZW50RWwiLCJnZXRDaGlsZHJlbiIsImJhY2tkcm9wIiwiYWRkSW5lcnRpYSIsImNyZWF0ZUFycm93RWxlbWVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUJhY2tkcm9wRWxlbWVudCIsImFkZEludGVyYWN0aXZlIiwiYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0b2dnbGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIiLCJsaXN0ZW5lciIsImV2ZW50TmFtZSIsIndlYmtpdFRyYW5zaXRpb24iLCJnZXRQb3BwZXJQbGFjZW1lbnQiLCJmdWxsUGxhY2VtZW50Iiwic2V0VmlzaWJpbGl0eVN0YXRlIiwidG9nZ2xlVGhlbWUiLCJ0aGVtZU5hbWUiLCJoaWRlQWxsIiwiY2hlY2tIaWRlT25DbGljayIsImV4Y2x1ZGUiLCJfdGlwcHkiLCJQQVNTSVZFIiwiUEFERElORyIsImlzVXNpbmdUb3VjaCIsIm9uRG9jdW1lbnRUb3VjaCIsIm9uRG9jdW1lbnRNb3VzZU1vdmUiLCJsYXN0TW91c2VNb3ZlVGltZSIsIm9uRG9jdW1lbnRDbGljayIsImlzQ2xpY2tUcmlnZ2VyIiwiY2xlYXJEZWxheVRpbWVvdXRzIiwib25XaW5kb3dCbHVyIiwiZXZhbHVhdGVQcm9wcyIsIm91dCIsImFjYyIsInZhbHVlQXNTdHJpbmciLCJnZXREYXRhQXR0cmlidXRlT3B0aW9ucyIsInZhbGlkYXRlT3B0aW9ucyIsImRlZmF1bHRzIiwib3B0aW9uIiwiaWRDb3VudGVyIiwiY3JlYXRlVGlwcHkiLCJjb2xsZWN0aW9uUHJvcHMiLCJsYXN0VHJpZ2dlckV2ZW50IiwibGFzdE1vdXNlTW92ZUV2ZW50Iiwic2hvd1RpbWVvdXRJZCIsImhpZGVUaW1lb3V0SWQiLCJpc1NjaGVkdWxlZFRvU2hvdyIsInRyYW5zaXRpb25FbmRMaXN0ZW5lciIsImxpc3RlbmVycyIsImRlYm91bmNlZE9uTW91c2VNb3ZlIiwib25Nb3VzZU1vdmUiLCJjcmVhdGVQb3BwZXJFbGVtZW50IiwiaXNWaXNpYmxlIiwic2NoZWR1bGVTaG93IiwicG9wcGVyQ2hpbGRyZW4iLCJwb3BwZXJJbnN0YW5jZSIsImlzRW5hYmxlZCIsImlzTW91bnRlZCIsImlzU2hvd24iLCJzaG93IiwiZW5hYmxlIiwiZGlzYWJsZSIsImRlc3Ryb3kiLCJhZGRUcmlnZ2Vyc1RvUmVmZXJlbmNlIiwiY3JlYXRlUG9wcGVySW5zdGFuY2UiLCJoYXNBdHRyaWJ1dGUiLCJwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yIiwiX2xhc3RNb3VzZU1vdmVFdmVudCIsImNsaWVudFgiLCJjbGllbnRZIiwiaXNWZXJ0aWNhbFBsYWNlbWVudCIsImlzSG9yaXpvbnRhbFBsYWNlbWVudCIsImlzSG9yaXpvbnRhbCIsInJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyIiwidGFyZ2V0RWwiLCJjcmVhdGVEZWxlZ2F0ZUNoaWxkVGlwcHkiLCJoYXNGb2xsb3dDdXJzb3JCZWhhdmlvciIsInNjaGVkdWxlSGlkZSIsImNsZWFudXBPbGRNb3VzZUxpc3RlbmVycyIsIm9uVHJpZ2dlciIsImlzRXZlbnRMaXN0ZW5lclN0b3BwZWQiLCJNb3VzZUV2ZW50IiwicmVmZXJlbmNlVGhlQ3Vyc29ySXNPdmVyIiwiaXNDdXJzb3JPdmVyUG9wcGVyIiwiaXNDdXJzb3JPdmVyUmVmZXJlbmNlIiwicG9wcGVyUGxhY2VtZW50IiwiZXhjZWVkc1RvcCIsImV4Y2VlZHNCb3R0b20iLCJleGNlZWRzTGVmdCIsImV4Y2VlZHNSaWdodCIsImlzQ3Vyc29yT3V0c2lkZUludGVyYWN0aXZlQm9yZGVyIiwib25Nb3VzZUxlYXZlIiwib25CbHVyIiwicmVsYXRlZFRhcmdldCIsIm9uRGVsZWdhdGVTaG93Iiwib25EZWxlZ2F0ZUhpZGUiLCJzdXBwb3J0c1RvdWNoIiwiaXNUb3VjaEV2ZW50IiwiX2luc3RhbmNlJHBvcHBlckNoaWxkIiwib25UcmFuc2l0aW9uRW5kIiwiaGFuZGxlciIsInJlbW92ZVRyaWdnZXJzRnJvbVJlZmVyZW5jZSIsImdldElubmVyRWxlbWVudHMiLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJfZ2V0Q2hpbGRyZW4iLCJyZXBsYWNlQ2hpbGQiLCJyZW1vdmVJbnRlcmFjdGl2ZSIsInJlbW92ZUluZXJ0aWEiLCJ1cGRhdGVQb3BwZXJFbGVtZW50IiwidmlzaWJpbGl0eSIsInNob3VsZEVuYWJsZUxpc3RlbmVycyIsIm1hcmdpbiIsInJlZmxvdyIsImFmdGVyUG9wcGVyUG9zaXRpb25VcGRhdGVzIiwibW91bnQiLCJ0cmFuc2l0aW9uRGVsYXkiLCJ1cGRhdGVQb3NpdGlvbiIsIm9uVHJhbnNpdGlvbmVkSW4iLCJvblRyYW5zaXRpb25lZE91dCIsImRlc3Ryb3lUYXJnZXRJbnN0YW5jZXMiLCJjaGlsZCIsImdsb2JhbEV2ZW50TGlzdGVuZXJzQm91bmQiLCJ0aXBweSIsInRhcmdldHMiLCJ2aXJ0dWFsUmVmZXJlbmNlIiwicG9seWZpbGxzIiwiaXNWaXJ0dWFsIiwiY2xhc3NOYW1lcyIsInBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXMiLCJpbnN0YW5jZXMiLCJOb2RlTGlzdCIsImdldEFycmF5T2ZFbGVtZW50cyIsInNldERlZmF1bHRzIiwicGFydGlhbERlZmF1bHRzIiwiX3JlZiRkZWxheSIsIl9yZWYkZHVyYXRpb24iLCJpc0FueVRpcHB5T3BlbiIsInNldElzQW55VGlwcHlPcGVuIiwidXBkYXRlSW5zdGFuY2VzIiwiX29yaWdpbmFsUHJvcHMiLCJoZWFkIiwiaW5zZXJ0QmVmb3JlIiwiaW5qZWN0Q1NTIiwiRnVuY3Rpb24iLCJhc2NlbmRpbmciLCJOYU4iLCJkZXNjZW5kaW5nIiwiYmFyQ29udGFpbmVycyIsImxhc3RQb3NpdGlvbnMiLCJoaWdobGlnaHRlZEJhcnMiLCJncm91cEJ5Rm4iLCJncm91cEJ5Iiwic2VsZWN0aW9ucyIsIlNlbGVjdGlvbnMiLCJzb3J0VmFsdWVLZXkiLCJzb3J0VmFsdWVzRm4iLCJuZXN0RGF0YSIsInB1c2hCYXJzIiwicmVuZGVyU2VsZWN0aW9ucyIsImV4cGxhaW5lcldyYXBwZXIiLCJmaWVsZEV4cGxhaW5lciIsImdyb3VwRXhwbGFpbmVyIiwidXBkYXRlRXhwbGFpbmVyVGV4dCIsImNoYXJ0cyIsInJlbmRlckNoYXJ0cyIsIm5lc3RlZERhdGEiLCJpc0hpZ2hsaWdodGVkIiwiYmFySW5uZXJDb250YWluZXIiLCJiYXJMYWJlbCIsInJldHVybkRhdGFMYWJlbCIsImxhc3RQb3NpdGlvbiIsImRlbHRhWSIsImZpcnN0UG9zaXRpb25zIiwiX3RoaXM3IiwidXBkYXRlQmFycyIsInVwZGF0ZURhdGFMYWJlbHMiLCJ1cGRhdGVHcm91cHMiLCJzb3J0QmFycyIsImFkanVzdEV4cGxhaW5lclRleHRIZWlnaHQiLCJpbml0SGlnaGxpZ2h0QmFycyIsImluaXRDbGVhckFsbEhpZ2hsaWdodHMiLCJjYWxsZWRGcm9tUHJlcmVuZGVyIiwiX3RoaXM4IiwibW9yZUxpbmsiLCJjb21wdXRlZFN0eWxlcyIsIl90aGlzOSIsIl90aGlzMTAiLCJfdGhpczExIiwicmVjb3JkRmlyc3RQb3NpdGlvbnMiLCJpbnZlcnRQb3NpdGlvbnMiLCJkcm9wZG93bkRhdGEiLCJkcm9wZG93bnMiLCJUaGlzRHJvcGRvd24iLCJkcm9wZG93bldyYXBwZXIiLCJkcm9wZG93bklubmVyIiwiZHJvcGRvd25PdXRlciIsImRyb3Bkb3duTGFiZWwiLCJkcm9wZG93biIsImxhYmVsU29ydCIsInNvcnRCeSIsInNvcnRBY3RpdmUiLCJsYWJlbEhpZ2hsaWdodCIsIl9zdHlsZXMiLCJfaW5wdXRzIiwiX2RhdGEiLCJkcm9wZG93blR5cGUiLCJzZWxlY3RlZCIsImlzRGVmYXVsdFNlbGVjdGlvbiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiRHJvcGRvd24iLCJzZWxlY3RlZE9wdGlvbiIsIlRleHRJbnB1dCIsIl9pc09wZW4iLCJvcHRpb25zTGlzdCIsIlBDVERyb3Bkb3duIiwiaXRlbSIsIml0ZW1DbGlja0hhbmRsZXIiLCJfc2VsZWN0ZWRPcHRpb24iLCJ0b0JlU2VsZWN0ZWQiLCJjbGlja0hhbmRsZXIiLCJzcGFjZUFuZEFycm93SGFuZGxlciIsImlzT3BlbiIsImVudGVyQW5kRXNjYXBlSGFuZGxlciIsInRhYkhhbmRsZXIiLCJuZXh0IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsIlVJQ29udHJvbElzT3BlbiIsImJvb2wiLCJib2R5Q2xpY2tIYW5kbGVyIiwib25DaGFuZ2UiLCJfUm91dGVyIiwicm91dGVyT3B0aW9ucyIsInJvdXRlciIsIlJvdXRlciIsImRpc2FibGVIb3Zlck9uVG91Y2giLCJoYXNIb3ZlckNsYXNzIiwibGFzdFRvdWNoVGltZSIsImVuYWJsZUhvdmVyIiwiY29tcG9uZW50IiwiX29wdGlvbnMiLCJfdHlwZW9mIiwiZW5jb2RlIiwiZGVjb2RlIiwic3RhdGVPYmoiLCJoYXNoU3RhdGUiLCJkZWNvZGVIYXNoIiwidmlld1Byb21pc2VzIiwiYWxsIiwiaGFzaENoYW5nZSIsInNldFN0YXRlT2JqIiwicmVwbGFjZVN0YXRlIiwiaGlzdG9yeSIsImhhc2hTdHJpbmciLCJzdGF0aWMiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FB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QUFjaHFCLFFBQXNDLFdBQTVCeXFCLEVBQU9ULEVBQWN6WixJQUN6SixLQUFNLHVMQUVWbDBCLEtBQUt1dUMsU0FBVyxHQUNoQnZ1QyxLQUFLd3VDLFVBQVliLEVBQWNVLE9BQy9CcnVDLEtBQUt5dUMsV0FBYWQsRUFBY1csT0FDaEN0dUMsS0FBSzB1QyxhQUFlZixFQUFjaHFCLE1BQU14WCxJQUFJLFNBQUFFLEdBQUEsT0FBUUEsRUFBS25JLFVBQ3pEbEUsS0FBS2swQixHQUFLeVosRUFBY3paLEdBRXhCenpCLFFBQVFrdUMsSUFBSTN1QyxLQUFLMHVDLGNBQWN0L0IsS0FBSyxXQUVoQy9PLEVBQUtvdUMsZUFFVHp1QyxLQUFLazBCLEdBQUd0b0IsUUFBUStoQyxFQUFjcmlDLGNBQWNhLElBQUksU0FBQUUsR0FLNUMsTUFKVSxDQUFDQSxFQUFNLFNBQUM1QixFQUFJMUcsR0FDbEIxRCxFQUFLdXVDLFdBQVc1eEMsS0FBS3FELEVBQUtvSyxFQUFJMUcsMkNBTS9CMEcsRUFBSTFHLEdBQ1gvRCxLQUFLNnVDLFlBQVlwa0MsRUFBSTFHLEdBQ3JCL0QsS0FBS3d1QyxZQUNMeHVDLEtBQUs4dUMsbURBRUdya0MsRUFBSzFHLEdBQ2IvRCxLQUFLdXVDLFNBQVM5akMsR0FBTzFHLHlDQUlyQnpFLE9BQU95dkMsUUFBUUQsYUFBYTl1QyxLQUFLdXVDLFNBQVMsR0FBR3Z1QyxLQUFLZ3ZDLCtCQTNDckNuQixpQkNBckJqeEMsRUFBQUQsUUFBQSwycCtCQ0FBQyxFQUFBRCxRQUFBLCtPQ0NBQyxFQUFBRCxRQUFBLENBQWtCc3lDLE9BQUEiLCJmaWxlIjoianMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTEpO1xuIiwiLyogZ2xvYmFsIGRhdGFMYXllciAqL1xuZXhwb3J0IGZ1bmN0aW9uIEdUTVB1c2goZXZlbnRMYWJlbCkge1xuICAgIGlmIChkYXRhTGF5ZXIpIHtcbiAgICAgICAgZGF0YUxheWVyLnB1c2goeyAnZXZlbnQnOiAnSW50ZXJhY3RpdmUgQ2xpY2snLCAnZXZlbnREYXRhJzogZXZlbnRMYWJlbCB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaFdpbmRvd1Jlc2l6ZShTKSB7IC8vIG5lZWQgdG8gcGFzcyBpbiB0aGUgU3RhdGVNb2R1bGVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemVUaHJvdHRsZXIsIGZhbHNlKTtcblxuICAgIHZhciByZXNpemVUaW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gcmVzaXplVGhyb3R0bGVyKCkgeyAvLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3Jlc2l6ZSNzZXRUaW1lb3V0XG4gICAgICAgIC8vIGlnbm9yZSByZXNpemUgZXZlbnRzIGFzIGxvbmcgYXMgYW4gYWN0dWFsUmVzaXplSGFuZGxlciBleGVjdXRpb24gaXMgaW4gdGhlIHF1ZXVlXG4gICAgICAgIGlmICghcmVzaXplVGltZW91dCkge1xuICAgICAgICAgICAgcmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYWN0dWFsUmVzaXplSGFuZGxlcigpO1xuICAgICAgICAgICAgICAgIHJlc2l6ZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgfSwgMzUwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFjdHVhbFJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAgIFxuICAgICAgICBTLnNldFN0YXRlKCdyZXNpemUnLCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBGYWRlSW5UZXh0ID0gKGZ1bmN0aW9uKCl7XG4gICAgSFRNTEVsZW1lbnQucHJvdG90eXBlLmZhZGVPdXRDb250ZW50ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnbm8tb3BhY2l0eScpO1xuICAgIH07XG4gICAgSFRNTEVsZW1lbnQucHJvdG90eXBlLmZhZGVJbkNvbnRlbnQgPSBmdW5jdGlvbihjb250ZW50LCBzKXtcbiAgICAgICAgdmFyIGR1cmF0aW9uUyA9IHMgfHwgMDtcbiAgICAgICAgaWYgKCBzICl7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLnRyYW5zaXRpb24gPSAnb3BhY2l0eSAnICsgcyArICdzIGVhc2UtaW4tb3V0JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvblN0ciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMpLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zaXRpb24tZHVyYXRpb24nKSB8fCBkdXJhdGlvblMsXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBwYXJzZUZsb2F0KGR1cmF0aW9uU3RyKSAqIDEwMDA7XG4gICAgICAgICAgICB0aGlzLmZhZGVPdXRDb250ZW50KCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVySFRNTCA9IGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCduby1vcGFjaXR5Jyk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pKCk7XG5leHBvcnQgY29uc3QgU3RyaW5nSGVscGVycyA9IChmdW5jdGlvbigpe1xuICAgIFN0cmluZy5wcm90b3R5cGUuY2xlYW5TdHJpbmcgPSBmdW5jdGlvbigpIHsgLy8gbG93ZXJjYXNlIGFuZCByZW1vdmUgcHVuY3R1YXRpb24gYW5kIHJlcGxhY2Ugc3BhY2VzIHdpdGggaHlwaGVuczsgZGVsZXRlIHB1bmN0dWF0aW9uXG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL1sgL10vZywnLScpLnJlcGxhY2UoL1snXCLigJ3igJnigJzigJgsLiE/OygpJjpdL2csJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgfTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUucmVtb3ZlVW5kZXJzY29yZXMgPSBmdW5jdGlvbigpIHsgXG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL18vZywnICcpO1xuICAgIH07XG5cbiAgICBTdHJpbmcucHJvdG90eXBlLnVuZG9DYW1lbENhc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvKFtBLVpdKS9nLCAnICQxJykudG9Mb3dlckNhc2UoKTtcbiAgICB9O1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS50cnVuYyA9IFN0cmluZy5wcm90b3R5cGUudHJ1bmMgfHwgLy8gaHQgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzExOTk0MjBcbiAgICAgICAgIGZ1bmN0aW9uKCBuLCB1c2VXb3JkQm91bmRhcnkgKXtcbiAgICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPD0gbikgeyByZXR1cm4gdGhpczsgfVxuICAgICAgICAgICAgIHZhciBzdWJTdHJpbmcgPSB0aGlzLnN1YnN0cigwLCBuLTEpO1xuICAgICAgICAgICAgIHJldHVybiAodXNlV29yZEJvdW5kYXJ5IFxuICAgICAgICAgICAgICAgID8gc3ViU3RyaW5nLnN1YnN0cigwLCBzdWJTdHJpbmcubGFzdEluZGV4T2YoJyAnKSkgXG4gICAgICAgICAgICAgICAgOiBzdWJTdHJpbmcpICsgXCIuLi5cIjtcbiAgICAgICAgICB9O1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS5oYXNoQ29kZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhhc2ggPSAwLCBpLCBjaHI7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBoYXNoO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hyICAgPSB0aGlzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XG4gICAgICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9O1xufSkoKVxuXG5leHBvcnQgY29uc3QgRE9NSGVscGVycyA9IHtcbiBjOiAgKHMpID0+IHtcbiAgICAgXG4gICAgIGlmICggcy5pbmRleE9mKCcuJykgIT09IC0xIHx8IHMuaW5kZXhPZignIycpICE9PSAtMSApe1xuICAgICAgICAgbGV0IGNsYXNzU3RyaW5ncyA9IHMubWF0Y2goL1xcLihbXiMuXSopL2cpIHx8IFtdO1xuICAgICAgICAgbGV0IGlkU3RyaW5nID0gcy5tYXRjaCgvIyhbXi5dKikvKTtcbiAgICAgICAgIGxldCBlbFN0cmluZyA9IHMubWF0Y2goL14oW14uI10rKS8pO1xuICAgICAgICAgXG4gICAgICAgICBcbiAgICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxTdHJpbmdbMF0pO1xuICAgICAgICAgY2xhc3NTdHJpbmdzLmZvckVhY2goa2xhc3MgPT4ge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChrbGFzcy5yZXBsYWNlKCcuJywnJykpO1xuICAgICAgICAgfSk7XG4gICAgICAgICBpZiAoIGlkU3RyaW5nICE9PSBudWxsICl7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWRTdHJpbmdbMV0pO1xuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIGVsO1xuICAgICB9XG4gICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHMpO1xuIH0sXG4gcTogIChzKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHMpLFxuIHFhOiAocykgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzKVxufVxuIiwiaW1wb3J0IHsgRE9NSGVscGVycyBhcyAkZCB9IGZyb20gJ0BVdGlscyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvciwgb3B0aW9ucyl7XG4gICAgICAgIGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJyApe1xuICAgICAgICAgICAgdGhyb3cgYEZpcnN0IHBhcmFtZXRlciBtdXN0IGJlIGEgc3RyaW5nIHJlZmVyZW5jaW5nIHRoZSBDU1MtbGlrZSBzZWxlY3RvciBvZiB0aGUgZWxlbWVudCB0byBiZSBjcmVhdGVkIFxuICAgICAgICAgICAgICAgICAgICAoXCJkaXYjZGl2SUQuZGl2Q2xhc3NcIikuYDtcbiAgICAgICAgfSBcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDsgLy8gcGFyZW50IGlzIGEgSlMgb2JqZWN0XG4gICAgICAgIHRoaXMucmVuZGVyVG9TZWxlY3RvciA9IG9wdGlvbnMucmVuZGVyVG9TZWxlY3RvcjtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSAkZC5xKHRoaXMucmVuZGVyVG9TZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBvcHRpb25zLmNoaWxkcmVuO1xuICAgICAgICB0aGlzLnJlcmVuZGVyID0gKCBvcHRpb25zLnJlcmVuZGVyT25EYXRhTWlzbWF0Y2ggJiYgb3B0aW9ucy5tb2RlbC5pc01pc21hdGNoZWQgKTtcbiAgICAgICAgdGhpcy5kYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5lbCA9IHRoaXMucHJlcmVuZGVyKGFyZ3VtZW50cyk7IC8vIHdpbGwgY2FsbCB0aGUgaW5zdGFuY2UncyBwcmVyZW5kZXJcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgfVxuICAgIHByZXJlbmRlcigpe1xuICAgICAgICBcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gJGQucSh0aGlzLnNlbGVjdG9yKTtcbiAgICAgICAgaWYgKCBleGlzdGluZyAmJiAhdGhpcy5yZXJlbmRlciApIHtcbiAgICAgICAgICAgICAgICAvLyBpZSBpcyBleGlzdGluZyBhbmQgbm8gbmVlZCB0byByZXJlbmRlclxuICAgICAgICAgICAgdGhpcy5wcmVyZW5kZXJlZCA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfSBlbHNlIGlmICggZXhpc3RpbmcgKSB7IC8vIGllIGlzIGV4aXN0aW5nIGJ1dCB0aGVyZSBpcyBhIG5lZWQgdG8gcmVyZW5kZXJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhpc3RpbmcuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVsID0gJGQuYyh0aGlzLnNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIFxuICAgIH1cbn0iLCJjb25zdCBQdWJTdWIgPSByZXF1aXJlKCdwdWJzdWItanMnKTtcbmNvbnN0IHN0YXRlID0ge307XG5cbi8vYXJyYXkuY29tcGFyZShvdGhlckFycmF5KSAvL0hUIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYyMjkxOTcvaG93LXRvLWtub3ctaWYtdHdvLWFycmF5cy1oYXZlLXRoZS1zYW1lLXZhbHVlc1xuQXJyYXkucHJvdG90eXBlLmNvbXBhcmUgPSBBcnJheS5wcm90b3R5cGUuY29tcGFyZSB8fCBmdW5jdGlvbih0ZXN0QXJyKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoICE9IHRlc3RBcnIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwICYmIHRlc3RBcnIubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICBjb25zb2xlLmxvZyhcImluIGNvbXBhcmVcIik7XG4gICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXN0QXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzW2ldICE9PSB0ZXN0QXJyW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfbG9nU3RhdGUoKXtcbiAgICBjb25zb2xlLmxvZyhzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIF9nZXRTdGF0ZShwcm9wZXJ0eSl7XG4gICAgcmV0dXJuICggc3RhdGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQgKSA/IHN0YXRlW3Byb3BlcnR5XVswXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX2dldFByZXZpb3VzU3RhdGUocHJvcGVydHkpe1xuICAgIHJldHVybiAoIHN0YXRlW3Byb3BlcnR5XSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlW3Byb3BlcnR5XVsxXSAhPT0gdW5kZWZpbmVkICkgPyBzdGF0ZVtwcm9wZXJ0eV1bMV0gOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF9zZXRTdGF0ZShrZXksdmFsdWUpIHsgXG5cbiAgICBpZiAoIHN0YXRlW2tleV0gPT09IHVuZGVmaW5lZCkgeyAvLyBpZSBmaXJzdCB0aW1lIHN0YXRlIHByb3BlcnR5IGlzIGJlaW5nIGRlZmluZWRcbiAgICAgICAgc3RhdGVba2V5XSA9IFt2YWx1ZV07XG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKGtleSwgdmFsdWUpO1xuICAgICAgICBfbG9nU3RhdGUoKTtcbiAgICB9IGVsc2UgeyAvLyBub3QgdGhlIGZpcnN0IHRpbWUgdGhlIHByb3BlcnR5IGlzIGJlaW5nIGRlZmluZWRcbiAgICAvL0lmIGl0J3MgYSBzdHJpbmcgb3IgYXJyYXkgYW5kIHZhbHVlcyBhcmUgdGhlIHNhbWUsIHN0YXRlQ2hhbmdlZD1GYWxzZStcbiAgICAgICAgdmFyIHN0YXRlQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHN0YXRlQ2hhbmdlZCA9IChzdGF0ZVtrZXldWzBdICE9PSB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgQXJyYXkuaXNBcnJheShzdGF0ZVtrZXldWzBdKSkge1xuICAgICAgICAgICAgc3RhdGVDaGFuZ2VkID0gIXZhbHVlLmNvbXBhcmUoc3RhdGVba2V5XVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZUNoYW5nZWQgPSB0cnVlOyAvL2Fzc3VtZSBpdCdzIGNoYW5nZWQgaWYgd2UgY2FuJ3QgdmVyaWZ5XG4gICAgICAgIH0gICAgICAgICAgICAgIFxuICAgICAgICAvL09ubHkgcHVibGlzaCBpZiB3ZSd2ZSBjaGFuZ2VkIHN0YXRlXG4gICAgICAgIGlmICggc3RhdGVDaGFuZ2VkICkgeyBcbiAgICAgICAgICAgIHN0YXRlW2tleV0udW5zaGlmdCh2YWx1ZSk7XG4gICAgICAgICAgICBQdWJTdWIucHVibGlzaChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIF9sb2dTdGF0ZSgpO1xuICAgICAgICAgICAgaWYgKCBzdGF0ZVtrZXldLmxlbmd0aCA+IDIgKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVba2V5XS5sZW5ndGggPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnRzLnN0YXRlTW9kdWxlID0ge1xuICAgIGxvZ1N0YXRlOiBfbG9nU3RhdGUsXG4gICAgZ2V0U3RhdGU6IF9nZXRTdGF0ZSxcbiAgICBnZXRQcmV2aW91c1N0YXRlOiBfZ2V0UHJldmlvdXNTdGF0ZSxcbiAgICBzZXRTdGF0ZTogX3NldFN0YXRlXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEwLDIwMTEsMjAxMiwyMDEzLDIwMTQgTW9yZ2FuIFJvZGVyaWNrIGh0dHA6Ly9yb2Rlcmljay5ka1xuICogTGljZW5zZTogTUlUIC0gaHR0cDovL21yZ25yZHJjay5taXQtbGljZW5zZS5vcmdcbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbXJvZGVyaWNrL1B1YlN1YkpTXG4gKi9cblxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgUHViU3ViID0ge307XG4gICAgcm9vdC5QdWJTdWIgPSBQdWJTdWI7XG5cbiAgICB2YXIgZGVmaW5lID0gcm9vdC5kZWZpbmU7XG5cbiAgICBmYWN0b3J5KFB1YlN1Yik7XG5cbiAgICAvLyBBTUQgc3VwcG9ydFxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpe1xuICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBQdWJTdWI7IH0pO1xuXG4gICAgICAgIC8vIENvbW1vbkpTIGFuZCBOb2RlLmpzIG1vZHVsZSBzdXBwb3J0XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpe1xuICAgICAgICBpZiAobW9kdWxlICE9PSB1bmRlZmluZWQgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IFB1YlN1YjsgLy8gTm9kZS5qcyBzcGVjaWZpYyBgbW9kdWxlLmV4cG9ydHNgXG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0cy5QdWJTdWIgPSBQdWJTdWI7IC8vIENvbW1vbkpTIG1vZHVsZSAxLjEuMSBzcGVjXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFB1YlN1YjsgLy8gQ29tbW9uSlNcbiAgICB9XG5cbn0oKCB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cgKSB8fCB0aGlzLCBmdW5jdGlvbiAoUHViU3ViKXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgbWVzc2FnZXMgPSB7fSxcbiAgICAgICAgbGFzdFVpZCA9IC0xO1xuXG4gICAgZnVuY3Rpb24gaGFzS2V5cyhvYmope1xuICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgIGZvciAoa2V5IGluIG9iail7XG4gICAgICAgICAgICBpZiAoIG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpICl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHRocm93cyB0aGUgcGFzc2VkIGV4Y2VwdGlvbiwgZm9yIHVzZSBhcyBhcmd1bWVudCBmb3Igc2V0VGltZW91dFxuICAgICAqIEBhbGlhcyB0aHJvd0V4Y2VwdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IGV4IEFuIEVycm9yIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm93RXhjZXB0aW9uKCBleCApe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcmVUaHJvd0V4Y2VwdGlvbigpe1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIoIG1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgfSBjYXRjaCggZXggKXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIHRocm93RXhjZXB0aW9uKCBleCApLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgc3Vic2NyaWJlciggbWVzc2FnZSwgZGF0YSApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGl2ZXJNZXNzYWdlKCBvcmlnaW5hbE1lc3NhZ2UsIG1hdGNoZWRNZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHZhciBzdWJzY3JpYmVycyA9IG1lc3NhZ2VzW21hdGNoZWRNZXNzYWdlXSxcbiAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyID0gaW1tZWRpYXRlRXhjZXB0aW9ucyA/IGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMgOiBjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyxcbiAgICAgICAgICAgIHM7XG5cbiAgICAgICAgaWYgKCAhbWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIG1hdGNoZWRNZXNzYWdlICkgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHMgaW4gc3Vic2NyaWJlcnMpe1xuICAgICAgICAgICAgaWYgKCBzdWJzY3JpYmVycy5oYXNPd25Qcm9wZXJ0eShzKSl7XG4gICAgICAgICAgICAgICAgY2FsbFN1YnNjcmliZXIoIHN1YnNjcmliZXJzW3NdLCBvcmlnaW5hbE1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGl2ZXJOYW1lc3BhY2VkKCl7XG4gICAgICAgICAgICB2YXIgdG9waWMgPSBTdHJpbmcoIG1lc3NhZ2UgKSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcblxuICAgICAgICAgICAgLy8gZGVsaXZlciB0aGUgbWVzc2FnZSBhcyBpdCBpcyBub3dcbiAgICAgICAgICAgIGRlbGl2ZXJNZXNzYWdlKG1lc3NhZ2UsIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyB0cmltIHRoZSBoaWVyYXJjaHkgYW5kIGRlbGl2ZXIgbWVzc2FnZSB0byBlYWNoIGxldmVsXG4gICAgICAgICAgICB3aGlsZSggcG9zaXRpb24gIT09IC0xICl7XG4gICAgICAgICAgICAgICAgdG9waWMgPSB0b3BpYy5zdWJzdHIoIDAsIHBvc2l0aW9uICk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICAgICAgICAgIGRlbGl2ZXJNZXNzYWdlKCBtZXNzYWdlLCB0b3BpYywgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lc3NhZ2VIYXNTdWJzY3JpYmVycyggbWVzc2FnZSApe1xuICAgICAgICB2YXIgdG9waWMgPSBTdHJpbmcoIG1lc3NhZ2UgKSxcbiAgICAgICAgICAgIGZvdW5kID0gQm9vbGVhbihtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggdG9waWMgKSAmJiBoYXNLZXlzKG1lc3NhZ2VzW3RvcGljXSkpLFxuICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG5cbiAgICAgICAgd2hpbGUgKCAhZm91bmQgJiYgcG9zaXRpb24gIT09IC0xICl7XG4gICAgICAgICAgICB0b3BpYyA9IHRvcGljLnN1YnN0ciggMCwgcG9zaXRpb24gKTtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoICcuJyApO1xuICAgICAgICAgICAgZm91bmQgPSBCb29sZWFuKG1lc3NhZ2VzLmhhc093blByb3BlcnR5KCB0b3BpYyApICYmIGhhc0tleXMobWVzc2FnZXNbdG9waWNdKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgc3luYywgaW1tZWRpYXRlRXhjZXB0aW9ucyApe1xuICAgICAgICBtZXNzYWdlID0gKHR5cGVvZiBtZXNzYWdlID09PSAnc3ltYm9sJykgPyBtZXNzYWdlLnRvU3RyaW5nKCkgOiBtZXNzYWdlO1xuXG4gICAgICAgIHZhciBkZWxpdmVyID0gY3JlYXRlRGVsaXZlcnlGdW5jdGlvbiggbWVzc2FnZSwgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApLFxuICAgICAgICAgICAgaGFzU3Vic2NyaWJlcnMgPSBtZXNzYWdlSGFzU3Vic2NyaWJlcnMoIG1lc3NhZ2UgKTtcblxuICAgICAgICBpZiAoICFoYXNTdWJzY3JpYmVycyApe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBzeW5jID09PSB0cnVlICl7XG4gICAgICAgICAgICBkZWxpdmVyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCBkZWxpdmVyLCAwICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIHRoZSBtZXNzYWdlLCBwYXNzaW5nIHRoZSBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAYWxpYXMgcHVibGlzaFxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gcHVibGlzaFxuICAgICAqIEBwYXJhbSB7fSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgdG8gc3Vic2NyaWJlcnNcbiAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9XG4gICAgICovXG4gICAgUHViU3ViLnB1Ymxpc2ggPSBmdW5jdGlvbiggbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICByZXR1cm4gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgZmFsc2UsIFB1YlN1Yi5pbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2hlcyB0aGUgdGhlIG1lc3NhZ2Ugc3luY2hyb25vdXNseSwgcGFzc2luZyB0aGUgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHB1Ymxpc2hTeW5jXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBwdWJsaXNoXG4gICAgICogQHBhcmFtIHt9IGRhdGEgVGhlIGRhdGEgdG8gcGFzcyB0byBzdWJzY3JpYmVyc1xuICAgICAqIEByZXR1cm4geyBCb29sZWFuIH1cbiAgICAgKi9cbiAgICBQdWJTdWIucHVibGlzaFN5bmMgPSBmdW5jdGlvbiggbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICByZXR1cm4gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgdHJ1ZSwgUHViU3ViLmltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0aGUgcGFzc2VkIGZ1bmN0aW9uIHRvIHRoZSBwYXNzZWQgbWVzc2FnZS4gRXZlcnkgcmV0dXJuZWQgdG9rZW4gaXMgdW5pcXVlIGFuZCBzaG91bGQgYmUgc3RvcmVkIGlmIHlvdSBuZWVkIHRvIHVuc3Vic2NyaWJlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHN1YnNjcmliZVxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gc3Vic2NyaWJlIHRvXG4gICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gYSBuZXcgbWVzc2FnZSBpcyBwdWJsaXNoZWRcbiAgICAgKiBAcmV0dXJuIHsgU3RyaW5nIH1cbiAgICAgKi9cbiAgICBQdWJTdWIuc3Vic2NyaWJlID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGZ1bmMgKXtcbiAgICAgICAgaWYgKCB0eXBlb2YgZnVuYyAhPT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBtZXNzYWdlID0gKHR5cGVvZiBtZXNzYWdlID09PSAnc3ltYm9sJykgPyBtZXNzYWdlLnRvU3RyaW5nKCkgOiBtZXNzYWdlO1xuXG4gICAgICAgIC8vIG1lc3NhZ2UgaXMgbm90IHJlZ2lzdGVyZWQgeWV0XG4gICAgICAgIGlmICggIW1lc3NhZ2VzLmhhc093blByb3BlcnR5KCBtZXNzYWdlICkgKXtcbiAgICAgICAgICAgIG1lc3NhZ2VzW21lc3NhZ2VdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmb3JjaW5nIHRva2VuIGFzIFN0cmluZywgdG8gYWxsb3cgZm9yIGZ1dHVyZSBleHBhbnNpb25zIHdpdGhvdXQgYnJlYWtpbmcgdXNhZ2VcbiAgICAgICAgLy8gYW5kIGFsbG93IGZvciBlYXN5IHVzZSBhcyBrZXkgbmFtZXMgZm9yIHRoZSAnbWVzc2FnZXMnIG9iamVjdFxuICAgICAgICB2YXIgdG9rZW4gPSAndWlkXycgKyBTdHJpbmcoKytsYXN0VWlkKTtcbiAgICAgICAgbWVzc2FnZXNbbWVzc2FnZV1bdG9rZW5dID0gZnVuYztcbiAgICAgICAgXG4gICAgICAgIC8vIHJldHVybiB0b2tlbiBmb3IgdW5zdWJzY3JpYmluZ1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2Ugb25jZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzdWJzY3JpYmUgdG9cbiAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhIG5ldyBtZXNzYWdlIGlzIHB1Ymxpc2hlZFxuICAgICAqIEByZXR1cm4geyBQdWJTdWIgfVxuICAgICAqL1xuICAgIFB1YlN1Yi5zdWJzY3JpYmVPbmNlID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGZ1bmMgKXtcbiAgICAgICAgdmFyIHRva2VuID0gUHViU3ViLnN1YnNjcmliZSggbWVzc2FnZSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIGJlZm9yZSBmdW5jIGFwcGx5LCB1bnN1YnNjcmliZSBtZXNzYWdlXG4gICAgICAgICAgICBQdWJTdWIudW5zdWJzY3JpYmUoIHRva2VuICk7XG4gICAgICAgICAgICBmdW5jLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQdWJTdWI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgc3Vic2NyaXB0aW9uc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyQWxsU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyQWxsU3Vic2NyaXB0aW9ucygpe1xuICAgICAgICBtZXNzYWdlcyA9IHt9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBzdWJzY3JpcHRpb25zIGJ5IHRoZSB0b3BpY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyU3Vic2NyaXB0aW9ucyh0b3BpYyl7XG4gICAgICAgIHZhciBtO1xuICAgICAgICBmb3IgKG0gaW4gbWVzc2FnZXMpe1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2VzLmhhc093blByb3BlcnR5KG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDApe1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlc1ttXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHN1YnNjcmlwdGlvbnNcbiAgICAgKlxuICAgICAqIC0gV2hlbiBwYXNzZWQgYSB0b2tlbiwgcmVtb3ZlcyBhIHNwZWNpZmljIHN1YnNjcmlwdGlvbi5cbiAgICAgKlxuXHQgKiAtIFdoZW4gcGFzc2VkIGEgZnVuY3Rpb24sIHJlbW92ZXMgYWxsIHN1YnNjcmlwdGlvbnMgZm9yIHRoYXQgZnVuY3Rpb25cbiAgICAgKlxuXHQgKiAtIFdoZW4gcGFzc2VkIGEgdG9waWMsIHJlbW92ZXMgYWxsIHN1YnNjcmlwdGlvbnMgZm9yIHRoYXQgdG9waWMgKGhpZXJhcmNoeSlcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIHN1YnNjcmliZU9uY2VcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfCBGdW5jdGlvbiB9IHZhbHVlIEEgdG9rZW4sIGZ1bmN0aW9uIG9yIHRvcGljIHRvIHVuc3Vic2NyaWJlIGZyb21cbiAgICAgKiBAZXhhbXBsZSAvLyBVbnN1YnNjcmliaW5nIHdpdGggYSB0b2tlblxuICAgICAqIHZhciB0b2tlbiA9IFB1YlN1Yi5zdWJzY3JpYmUoJ215dG9waWMnLCBteUZ1bmMpO1xuICAgICAqIFB1YlN1Yi51bnN1YnNjcmliZSh0b2tlbik7XG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyB3aXRoIGEgZnVuY3Rpb25cbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUobXlGdW5jKTtcbiAgICAgKiBAZXhhbXBsZSAvLyBVbnN1YnNjcmliaW5nIGZyb20gYSB0b3BpY1xuICAgICAqIFB1YlN1Yi51bnN1YnNjcmliZSgnbXl0b3BpYycpO1xuICAgICAqL1xuICAgIFB1YlN1Yi51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgdmFyIGRlc2NlbmRhbnRUb3BpY0V4aXN0cyA9IGZ1bmN0aW9uKHRvcGljKSB7XG4gICAgICAgICAgICAgICAgdmFyIG07XG4gICAgICAgICAgICAgICAgZm9yICggbSBpbiBtZXNzYWdlcyApe1xuICAgICAgICAgICAgICAgICAgICBpZiAoIG1lc3NhZ2VzLmhhc093blByb3BlcnR5KG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDAgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgZGVzY2VuZGFudCBvZiB0aGUgdG9waWMgZXhpc3RzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNUb3BpYyAgICA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgKCBtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgfHwgZGVzY2VuZGFudFRvcGljRXhpc3RzKHZhbHVlKSApLFxuICAgICAgICAgICAgaXNUb2tlbiAgICA9ICFpc1RvcGljICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycsXG4gICAgICAgICAgICBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2UsXG4gICAgICAgICAgICBtLCBtZXNzYWdlLCB0O1xuXG4gICAgICAgIGlmIChpc1RvcGljKXtcbiAgICAgICAgICAgIFB1YlN1Yi5jbGVhclN1YnNjcmlwdGlvbnModmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICggbSBpbiBtZXNzYWdlcyApe1xuICAgICAgICAgICAgaWYgKCBtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggbSApICl7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzW21dO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBpc1Rva2VuICYmIG1lc3NhZ2VbdmFsdWVdICl7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlW3ZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRva2VucyBhcmUgdW5pcXVlLCBzbyB3ZSBjYW4ganVzdCBzdG9wIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdCBpbiBtZXNzYWdlICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5oYXNPd25Qcm9wZXJ0eSh0KSAmJiBtZXNzYWdlW3RdID09PSB2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VbdF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn0pKTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJjb21wYXJlQ29sb3IxXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1jb21wYXJlQ29sb3IxXCIsXCJjb21wYXJlQ29sb3IyXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1jb21wYXJlQ29sb3IyXCIsXCJjaGFydENvbnRhaW5lclwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tY2hhcnRDb250YWluZXJcIixcImNoYXJ0TGFiZWxcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWNoYXJ0TGFiZWxcIixcImNoYXJ0TGFiZWxUZXh0XCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1jaGFydExhYmVsVGV4dFwiLFwiY2hhcnRMYWJlbDFcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWNoYXJ0TGFiZWwxXCIsXCJjaGFydExhYmVsMlwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tY2hhcnRMYWJlbDJcIixcImJhckNvbnRhaW5lclwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tYmFyQ29udGFpbmVyXCIsXCJiYXJDb250YWluZXIxXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1iYXJDb250YWluZXIxXCIsXCJiYXJDb250YWluZXIyXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1iYXJDb250YWluZXIyXCIsXCJkYXRhTGFiZWxcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWRhdGFMYWJlbFwifTsiLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudC8nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wYXJpc29uIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIHZhciBkaXYgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgdGhpcy5tYXRjaGVzID0gW107XG4gICAgICAgIHRoaXMubWF0Y2hlc1swXSA9IHRoaXMubW9kZWwuZGF0YS5maW5kKGQgPT4gZC5jb2RlID09PSB0aGlzLmRhdGEuY29tcGFyaXNvblswXSk7XG4gICAgICAgIHRoaXMubWF0Y2hlc1sxXSA9IHRoaXMubW9kZWwuZGF0YS5maW5kKGQgPT4gZC5jb2RlID09PSB0aGlzLmRhdGEuY29tcGFyaXNvblsxXSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cbiAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICB9XG4gICAgdXBkYXRlKGluZGV4LGRhdGEpe1xuICAgICAgICB0aGlzLm1hdGNoZXNbaW5kZXhdID0gdGhpcy5tb2RlbC5kYXRhLmZpbmQoZCA9PiBkLmNvZGUgPT09IGRhdGEpO1xuICAgIH1cblxufSIsImltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IEVsZW1lbnQgZnJvbSAnQFVJL2VsZW1lbnQnO1xuXG4gZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFyIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgXG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIHZhciBkaXYgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZGl2O1xuICAgICAgICB9XG4gICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKHMuYmFyLCBzWydiYXJDb2xvcicgKyB0aGlzLmRhdGEuY29sb3JdKTtcbiAgICAgICAgZGl2LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7dGhpcy5wYXJlbnQubmFtZSA9PT0gJ0ZpZnR5U3RhdGVWaWV3JyA/IHRoaXMucGxhY2VaZXJvKHRoaXMuZGF0YS5maWVsZCkgKiAxMDAgKyAnJScgOiAwfSkgc2NhbGVYKCR7dGhpcy5saW5lYXJTY2FsZSh0aGlzLmRhdGEuZCwgdGhpcy5kYXRhLmZpZWxkKX0pYDtcblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cbiAgICBsaW5lYXJTY2FsZShtYXRjaCwgZmllbGQpe1xuICAgICAgICB2YXIgdHlwZU9iamVjdCA9IHRoaXMubW9kZWwudHlwZXMuZmluZCh0ID0+IHQuZmllbGQgPT09IGZpZWxkKSxcbiAgICAgICAgICAgIC8vbWF4ID0gTWF0aC5tYXgodHlwZU9iamVjdC5tYXgsIDEwMCksXG4gICAgICAgICAgICAvL21pbiA9IE1hdGgubWluKHR5cGVPYmplY3QubWluLCAwKSxcbiAgICAgICAgICAgIHNjYWxlID0gdGhpcy5wYXJlbnQubmFtZSAhPT0gJ0ZpZnR5U3RhdGVWaWV3JyAmJiB0eXBlT2JqZWN0LnR5cGUgPT09ICdwZXJjZW50JyA/IG1hdGNoW2ZpZWxkXSAvIDEgOiAoIG1hdGNoW2ZpZWxkXSAtIHR5cGVPYmplY3QubWluICkgLyB0eXBlT2JqZWN0LnNwcmVhZCxcbiAgICAgICAgICAgIHplcm9QbGFjZW1lbnQgPSB0aGlzLnBsYWNlWmVybyhmaWVsZCksXG4gICAgICAgICAgICBvZmZzZXQgPSB0eXBlT2JqZWN0LmNyb3NzZXNaZXJvIHx8ICggdGhpcy5wYXJlbnQubmFtZSAhPT0gJ0ZpZnR5U3RhdGVWaWV3JyAmJiB0eXBlT2JqZWN0LnR5cGUgPT09ICdwZXJjZW50JyApID8gMCA6IC4wMSxcbiAgICAgICAgICAgIGFkanVzdGVkID0gdGhpcy5wYXJlbnQubmFtZSAhPT0gJ0ZpZnR5U3RhdGVWaWV3JyA/IG9mZnNldCArICggc2NhbGUgKiAoIDEgLSBvZmZzZXQpICkgOiBvZmZzZXQgKyAoIHNjYWxlICogKCAxIC0gb2Zmc2V0KSApIC0gemVyb1BsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIGFkanVzdGVkO1xuICAgIH1cbiAgICBwbGFjZVplcm8oZmllbGQpe1xuICAgICAgICB2YXIgdHlwZU9iamVjdCA9IHRoaXMubW9kZWwudHlwZXMuZmluZCh0ID0+IHQuZmllbGQgPT09IGZpZWxkKSxcbiAgICAgICAgICAgIHJhdyA9ICggMCAtIHR5cGVPYmplY3QubWluICkgLyB0eXBlT2JqZWN0LnNwcmVhZDtcbiAgICAgICAgcmV0dXJuIHJhdyA+IDAgPyByYXcgOiAwO1xuICAgIH1cbiAgICBjaGVja0lmWmVybygpe1xuICAgICAgICBpZiAoIHRoaXMuZGF0YS5kW3RoaXMuZGF0YS5maWVsZF0gPT09IDAgKXtcbiAgICAgICAgICAgIHRoaXMuZWwucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKHMuaXNaZXJvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWwucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKHMuaXNaZXJvKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGUobXNnKXtcbiAgICAgICAgdGhpcy5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5qcy1iYXItY29tcGFyZS0ke3RoaXMuZGF0YS5maWVsZH0tJHttc2d9YCk7XG4gICAgICAgIHRoaXMuY2hlY2tJZlplcm8oKTtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7dGhpcy5wYXJlbnQubmFtZSA9PT0gJ0ZpZnR5U3RhdGVWaWV3JyA/IHRoaXMucGxhY2VaZXJvKHRoaXMuZGF0YS5maWVsZCkgKiAxMDAgKyAnJScgOiAwfSkgc2NhbGVYKCR7dGhpcy5saW5lYXJTY2FsZSh0aGlzLmRhdGEuZCwgdGhpcy5kYXRhLmZpZWxkKX0pYDtcbiAgICAgICAgfSk7ICAgICAgIFxuICAgIH1cblxufSIsImV4cG9ydCBmdW5jdGlvbiBmb3JtYXRWYWx1ZShtYXRjaCwgZmllbGQpe1xuICAgIHZhciBtZXRhRGF0YSA9IHRoaXMubW9kZWwudHlwZXMuZmluZChkID0+IGQuZmllbGQgPT09IGZpZWxkKSxcbiAgICAgICAgc3R5bGUgPSBtZXRhRGF0YS50eXBlLFxuICAgICAgICBkZWNpbWFscyA9IG1ldGFEYXRhLmRlY2ltYWxzICE9PSB1bmRlZmluZWQgPyBtZXRhRGF0YS5kZWNpbWFscyA6IHN0eWxlID09PSAnbnVtYmVyJyA/IDEgOiBzdHlsZSA9PT0gJ2N1cnJlbmN5JyA/IDIgOiBzdHlsZSA9PT0gJ3BlcmNlbnQnID8gMSA6IHVuZGVmaW5lZCxcbiAgICAgICAgdmFsdWUgPSBtYXRjaFtmaWVsZF0sXG4gICAgICAgIGZvcm1hdHRlZFZhbHVlU3RyaW5nO1xuICAgIHN3aXRjaChzdHlsZSl7XG4gICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZVN0cmluZyA9IHZhbHVlLnRvTG9jYWxlU3RyaW5nKCdlbi1VUycsIHttaW5pbXVtRnJhY3Rpb25EaWdpdHM6IGRlY2ltYWxzfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY3VycmVuY3knOlxuICAgICAgICAgICAgaWYgKCBkZWNpbWFscyA9PT0gMCApe1xuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlU3RyaW5nID0gTWF0aC5yb3VuZCh2YWx1ZSkudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywge3N0eWxlLGN1cnJlbmN5OidVU0QnfSkuc2xpY2UoMCwtMyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlU3RyaW5nID0gdmFsdWUudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywge3N0eWxlLGN1cnJlbmN5OidVU0QnfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncGVyY2VudCc6XG4gICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZVN0cmluZyA9IHZhbHVlLnRvTG9jYWxlU3RyaW5nKCdlbi1VUycsIHtzdHlsZSwgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBkZWNpbWFsc30pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZVN0cmluZyA9ICdbdW5mb3JtYXR0ZWRdJyArIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXR0ZWRWYWx1ZVN0cmluZztcbn0iLCJ2YXIgaGFzaCA9IHJlcXVpcmUoXCJzdHJpbmctaGFzaFwiKTtcbnZhciBQdWJTdWIgPSByZXF1aXJlKFwicHVic3ViLWpzXCIpO1xudmFyIHN1YnNjcmlwdGlvbnMgPSB7fTtcbmZ1bmN0aW9uIGxvZ1N1YnMoKSB7XG4gICAgY29uc29sZS5sb2coc3Vic2NyaXB0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRva2VuKHRvcGljLCBmblJlZil7XG4gICAgdmFyIGZ1bmN0aW9uSGFzaCA9IGhhc2goZm5SZWYudG9TdHJpbmcoKSk7XG4gICAgdmFyIHN0ciA9IHRvcGljICsgZm5SZWY7XG4gICAgdmFyIHRva2VuID0gJ3N1YicgKyBoYXNoKHN0cik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9rZW46IHRva2VuLFxuICAgICAgICBmbjogZnVuY3Rpb25IYXNoXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gc2V0U3VicyhzdWJzQXJyYXkpIHsgLy8gc3Vic0FycmF5IGlzIGFycmF5IG9mIHRvcGljL2Z1bmN0aW9uIHBhaXIgYXJyYXlzXG4gICAgc3Vic0FycmF5LmZvckVhY2goZnVuY3Rpb24ocGFpcil7XG4gICAgICAgIHZhciB0b3BpYyA9IHBhaXJbMF0sXG4gICAgICAgICAgICBmblJlZiA9IHBhaXJbMV0sXG4gICAgICAgICAgICB0b2tlbk9iaiA9IGNyZWF0ZVRva2VuKHRvcGljLGZuUmVmKTtcbiAgICAgICAgXG4gICAgICAgIGlmICggc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl0gPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXVt0b3BpY10gPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXSA9IFB1YlN1Yi5zdWJzY3JpYmUodG9waWMsZm5SZWYpOyAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyAnU3Vic2NyaXB0aW9uIHRva2VuIGlzIGFscmVhZHkgaW4gdXNlLic7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2FuY2VsU3ViKHRvcGljLGZuUmVmKSB7IC8vIGZvciBjYW5jZWxpbmcgc2luZ2xlIHN1YnNjcmlwdGlvblxuICAgIHZhciB0b2tlbk9iaiA9IGNyZWF0ZVRva2VuKHRvcGljLGZuUmVmKTtcbiAgICBpZiAoIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dICE9PSB1bmRlZmluZWQgJiYgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl1bdG9waWNdICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgIFB1YlN1Yi51bnN1YnNjcmliZSggc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl1bdG9waWNdICk7XG4gICAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXVt0b3BpY107XG4gICAgICAgIGlmICggT2JqZWN0LmtleXMoc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl0pLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93ICdTdWJzY3JpcHRpb24gZG9lcyBub3QgZXhpc3QuJztcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGxvZ1N1YnM6bG9nU3VicyxcbiAgICBzZXRTdWJzOnNldFN1YnMsXG4gICAgY2FuY2VsU3ViOmNhbmNlbFN1YlxufTsiLCJleHBvcnQgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG5mdW5jdGlvbiBNYXAoKSB7fVxuXG5NYXAucHJvdG90eXBlID0gbWFwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hcCxcbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9LFxuICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9LFxuICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXAob2JqZWN0LCBmKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwO1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgLy8gSW5kZXggYXJyYXkgYnkgbnVtZXJpYyBpbmRleCBvciBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxuICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgICAgbztcblxuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChmKG8gPSBvYmplY3RbaV0sIGksIG9iamVjdCksIG8pO1xuICB9XG5cbiAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICBlbHNlIGlmIChvYmplY3QpIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwO1xuIiwiaW1wb3J0IG1hcCBmcm9tIFwiLi9tYXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrZXlzID0gW10sXG4gICAgICBzb3J0S2V5cyA9IFtdLFxuICAgICAgc29ydFZhbHVlcyxcbiAgICAgIHJvbGx1cCxcbiAgICAgIG5lc3Q7XG5cbiAgZnVuY3Rpb24gYXBwbHkoYXJyYXksIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkge1xuICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkge1xuICAgICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgYXJyYXkuc29ydChzb3J0VmFsdWVzKTtcbiAgICAgIHJldHVybiByb2xsdXAgIT0gbnVsbCA/IHJvbGx1cChhcnJheSkgOiBhcnJheTtcbiAgICB9XG5cbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBrZXkgPSBrZXlzW2RlcHRoKytdLFxuICAgICAgICBrZXlWYWx1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHZhbHVlc0J5S2V5ID0gbWFwKCksXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUmVzdWx0KCk7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlcyA9IHZhbHVlc0J5S2V5LmdldChrZXlWYWx1ZSA9IGtleSh2YWx1ZSA9IGFycmF5W2ldKSArIFwiXCIpKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWVzQnlLZXkuZWFjaChmdW5jdGlvbih2YWx1ZXMsIGtleSkge1xuICAgICAgc2V0UmVzdWx0KHJlc3VsdCwga2V5LCBhcHBseSh2YWx1ZXMsIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgIGlmICgrK2RlcHRoID4ga2V5cy5sZW5ndGgpIHJldHVybiBtYXA7XG4gICAgdmFyIGFycmF5LCBzb3J0S2V5ID0gc29ydEtleXNbZGVwdGggLSAxXTtcbiAgICBpZiAocm9sbHVwICE9IG51bGwgJiYgZGVwdGggPj0ga2V5cy5sZW5ndGgpIGFycmF5ID0gbWFwLmVudHJpZXMoKTtcbiAgICBlbHNlIGFycmF5ID0gW10sIG1hcC5lYWNoKGZ1bmN0aW9uKHYsIGspIHsgYXJyYXkucHVzaCh7a2V5OiBrLCB2YWx1ZXM6IGVudHJpZXModiwgZGVwdGgpfSk7IH0pO1xuICAgIHJldHVybiBzb3J0S2V5ICE9IG51bGwgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTsgfSkgOiBhcnJheTtcbiAgfVxuXG4gIHJldHVybiBuZXN0ID0ge1xuICAgIG9iamVjdDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVPYmplY3QsIHNldE9iamVjdCk7IH0sXG4gICAgbWFwOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTsgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gZW50cmllcyhhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApLCAwKTsgfSxcbiAgICBrZXk6IGZ1bmN0aW9uKGQpIHsga2V5cy5wdXNoKGQpOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0S2V5czogZnVuY3Rpb24ob3JkZXIpIHsgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0VmFsdWVzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0VmFsdWVzID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHJvbGx1cDogZnVuY3Rpb24oZikgeyByb2xsdXAgPSBmOyByZXR1cm4gbmVzdDsgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gc2V0T2JqZWN0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBtYXAoKTtcbn1cblxuZnVuY3Rpb24gc2V0TWFwKG1hcCwga2V5LCB2YWx1ZSkge1xuICBtYXAuc2V0KGtleSwgdmFsdWUpO1xufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIG1hcCwgcHJlZml4fSBmcm9tIFwiLi9tYXBcIjtcblxuZnVuY3Rpb24gU2V0KCkge31cblxudmFyIHByb3RvID0gbWFwLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZXQsXG4gIGhhczogcHJvdG8uaGFzLFxuICBhZGQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgKz0gXCJcIjtcbiAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgY2xlYXI6IHByb3RvLmNsZWFyLFxuICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gIHNpemU6IHByb3RvLnNpemUsXG4gIGVtcHR5OiBwcm90by5lbXB0eSxcbiAgZWFjaDogcHJvdG8uZWFjaFxufTtcblxuZnVuY3Rpb24gc2V0KG9iamVjdCwgZikge1xuICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgU2V0KSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSkgeyBzZXQuYWRkKHZhbHVlKTsgfSk7XG5cbiAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aDtcbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWFwKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBtYXApIGtleXMucHVzaChrZXkpO1xuICByZXR1cm4ga2V5cztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIgdmFsdWVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBtYXApIHZhbHVlcy5wdXNoKG1hcFtrZXldKTtcbiAgcmV0dXJuIHZhbHVlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIgZW50cmllcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSBlbnRyaWVzLnB1c2goe2tleToga2V5LCB2YWx1ZTogbWFwW2tleV19KTtcbiAgcmV0dXJuIGVudHJpZXM7XG59XG4iLCJleHBvcnQge2RlZmF1bHQgYXMgbmVzdH0gZnJvbSBcIi4vbmVzdFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHNldH0gZnJvbSBcIi4vc2V0XCI7XG5leHBvcnQge2RlZmF1bHQgYXMgbWFwfSBmcm9tIFwiLi9tYXBcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBrZXlzfSBmcm9tIFwiLi9rZXlzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdmFsdWVzfSBmcm9tIFwiLi92YWx1ZXNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBlbnRyaWVzfSBmcm9tIFwiLi9lbnRyaWVzXCI7XG4iLCIvKiohXG4gKiBAZmlsZU92ZXJ2aWV3IEtpY2thc3MgbGlicmFyeSB0byBjcmVhdGUgYW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuXG4gKiBAdmVyc2lvbiAxLjE0LjdcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxudmFyIGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcbnZhciB0aW1lb3V0RHVyYXRpb24gPSAwO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBsb25nZXJUaW1lb3V0QnJvd3NlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgdGltZW91dER1cmF0aW9uID0gMTtcbiAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xudmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgY3NzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50Tm9kZSBvciB0aGUgaG9zdCBvZiB0aGUgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gc2Nyb2xsIHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXRcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICBjYXNlICdIVE1MJzpcbiAgICBjYXNlICdCT0RZJzpcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keTtcbiAgfVxuXG4gIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuXG4gIHZhciBfZ2V0U3R5bGVDb21wdXRlZFByb3AgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dZO1xuXG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxudmFyIGlzSUUxMSA9IGlzQnJvd3NlciAmJiAhISh3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBpc0lFMTAgPSBpc0Jyb3dzZXIgJiYgL01TSUUgMTAvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgYnJvd3NlciBpcyBJbnRlcm5ldCBFeHBsb3JlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFXG4gKi9cbmZ1bmN0aW9uIGlzSUUodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiA9PT0gMTEpIHtcbiAgICByZXR1cm4gaXNJRTExO1xuICB9XG4gIGlmICh2ZXJzaW9uID09PSAxMCkge1xuICAgIHJldHVybiBpc0lFMTA7XG4gIH1cbiAgcmV0dXJuIGlzSUUxMSB8fCBpc0lFMTA7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0IHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgdmFyIG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgbnVsbDtcbiAgLy8gU2tpcCBoaWRkZW4gZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbiBvZmZzZXRQYXJlbnRcbiAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xuXG4gIGlmICghbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gLm9mZnNldFBhcmVudCB3aWxsIHJldHVybiB0aGUgY2xvc2VzdCBUSCwgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChbJ1RIJywgJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5mdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgdmFyIHN0YXJ0ID0gb3JkZXIgPyBlbGVtZW50MSA6IGVsZW1lbnQyO1xuICB2YXIgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIHZhciBjb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcblxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5mdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7XG5cbiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkge1xuICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbi8qXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xuICogUmVzdWx0IG9mIGBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHlgIG9uIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyAtIGB4YCBvciBgeWBcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcbiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUEgKyAnV2lkdGgnXSwgMTApICsgcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQiArICdXaWR0aCddLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gTWF0aC5tYXgoYm9keVsnb2Zmc2V0JyArIGF4aXNdLCBib2R5WydzY3JvbGwnICsgYXhpc10sIGh0bWxbJ2NsaWVudCcgKyBheGlzXSwgaHRtbFsnb2Zmc2V0JyArIGF4aXNdLCBodG1sWydzY3JvbGwnICsgYXhpc10sIGlzSUUoMTApID8gcGFyc2VJbnQoaHRtbFsnb2Zmc2V0JyArIGF4aXNdKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCcpXSkgOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoZG9jdW1lbnQpIHtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHtcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHRcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIHRyeSB7XG4gICAgaWYgKGlzSUUoMTApKSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0O1xuICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcblxuICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzXG4gIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKGVsZW1lbnQub3duZXJEb2N1bWVudCkgOiB7fTtcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQucmlnaHQgLSByZXN1bHQubGVmdDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuYm90dG9tIC0gcmVzdWx0LnRvcDtcblxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIHZhciB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgICBob3JpelNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd4Jyk7XG4gICAgdmVydFNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd5Jyk7XG5cbiAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7XG4gICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICB9XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBpc0lFMTAgPSBpc0lFKDEwKTtcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgdmFyIHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCwgMTApO1xuICB2YXIgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoLCAxMCk7XG5cbiAgLy8gSW4gY2FzZXMgd2hlcmUgdGhlIHBhcmVudCBpcyBmaXhlZCwgd2UgbXVzdCBpZ25vcmUgbmVnYXRpdmUgc2Nyb2xsIGluIG9mZnNldCBjYWxjXG4gIGlmIChmaXhlZFBvc2l0aW9uICYmIGlzSFRNTCkge1xuICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApO1xuICAgIHBhcmVudFJlY3QubGVmdCA9IE1hdGgubWF4KHBhcmVudFJlY3QubGVmdCwgMCk7XG4gIH1cbiAgdmFyIG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0XG4gIH0pO1xuICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7XG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XG5cbiAgLy8gU3VidHJhY3QgbWFyZ2lucyBvZiBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBpdCdzIGJlaW5nIHVzZWQgYXMgcGFyZW50XG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xuICAvLyBkaWZmZXJlbnRseSB3aGVuIG1hcmdpbnMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoZSBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpblxuICAvLyB0aGUgYm94IG9mIHRoZSBkb2N1bWVudEVsZW1lbnQsIGluIHRoZSBvdGhlciBjYXNlcyBub3QuXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AsIDEwKTtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQsIDEwKTtcblxuICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMuYm90dG9tIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcblxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxuICAgIG9mZnNldHMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gIH1cblxuICBpZiAoaXNJRTEwICYmICFmaXhlZFBvc2l0aW9uID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudCkgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJykge1xuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcbiAgdmFyIGV4Y2x1ZGVTY3JvbGwgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG5cbiAgdmFyIHNjcm9sbFRvcCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwpIDogMDtcbiAgdmFyIHNjcm9sbExlZnQgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sLCAnbGVmdCcpIDogMDtcblxuICB2YXIgb2Zmc2V0ID0ge1xuICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLFxuICAgIGxlZnQ6IHNjcm9sbExlZnQgLSByZWxhdGl2ZU9mZnNldC5sZWZ0ICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luTGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkKHBhcmVudE5vZGUpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBwYXJlbnQgb2YgYW4gZWxlbWVudCB0aGF0IGhhcyBhIHRyYW5zZm9ybWVkIHByb3BlcnR5IGRlZmluZWRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IGZpcnN0IHRyYW5zZm9ybWVkIHBhcmVudCBvciBkb2N1bWVudEVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzSUUoKSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgdmFyIGVsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB3aGlsZSAoZWwgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsLCAndHJhbnNmb3JtJykgPT09ICdub25lJykge1xuICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWwgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xufVxuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkUG9zaXRpb24gLSBJcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5mdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcblxuICB2YXIgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG5cbiAgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2VcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7XG4gICAgYm91bmRhcmllcyA9IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcbiAgICB2YXIgYm91bmRhcmllc05vZGUgPSB2b2lkIDA7XG4gICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTtcbiAgICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd3aW5kb3cnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBib3VuZGFyaWVzRWxlbWVudDtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0cyA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShib3VuZGFyaWVzTm9kZSwgb2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcblxuICAgIC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvblxuICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmICFpc0ZpeGVkKG9mZnNldFBhcmVudCkpIHtcbiAgICAgIHZhciBfZ2V0V2luZG93U2l6ZXMgPSBnZXRXaW5kb3dTaXplcyhwb3BwZXIub3duZXJEb2N1bWVudCksXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcbiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDtcblxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBwYWRkaW5nID0gcGFkZGluZyB8fCAwO1xuICB2YXIgaXNQYWRkaW5nTnVtYmVyID0gdHlwZW9mIHBhZGRpbmcgPT09ICdudW1iZXInO1xuICBib3VuZGFyaWVzLmxlZnQgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcubGVmdCB8fCAwO1xuICBib3VuZGFyaWVzLnRvcCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy50b3AgfHwgMDtcbiAgYm91bmRhcmllcy5yaWdodCAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5yaWdodCB8fCAwO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5ib3R0b20gfHwgMDtcblxuICByZXR1cm4gYm91bmRhcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0QXJlYShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcblxuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQocGxhY2VtZW50LCByZWZSZWN0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIHBhZGRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7XG5cbiAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCdhdXRvJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpO1xuXG4gIHZhciByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH0sXG4gICAgYm90dG9tOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5ib3R0b20gLSByZWZSZWN0LmJvdHRvbVxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNvcnRlZEFyZWFzID0gT2JqZWN0LmtleXMocmVjdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGtleToga2V5XG4gICAgfSwgcmVjdHNba2V5XSwge1xuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKVxuICAgIH0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIuYXJlYSAtIGEuYXJlYTtcbiAgfSk7XG5cbiAgdmFyIGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodDtcbiAgICByZXR1cm4gd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0O1xuICB9KTtcblxuICB2YXIgY29tcHV0ZWRQbGFjZW1lbnQgPSBmaWx0ZXJlZEFyZWFzLmxlbmd0aCA+IDAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleSA6IHNvcnRlZEFyZWFzWzBdLmtleTtcblxuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgcmV0dXJuIGNvbXB1dGVkUGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7RWxlbWVudH0gZml4ZWRQb3NpdGlvbiAtIGlzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHZhciBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wIHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tIHx8IDApO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCB8fCAwKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHhcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgdmFyIHBvcHBlck9mZnNldHMgPSB7XG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIHZhciBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cblxuLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJvcCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoZnVuY3Rpb24gKGN1cikge1xuICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICB2YXIgbWF0Y2ggPSBmaW5kKGFyciwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIHZhciBmbiA9IG1vZGlmaWVyWydmdW5jdGlvbiddIHx8IG1vZGlmaWVyLmZuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIGlmIChtb2RpZmllci5lbmFibGVkICYmIGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAvLyBBZGQgcHJvcGVydGllcyB0byBvZmZzZXRzIHRvIG1ha2UgdGhlbSBhIGNvbXBsZXRlIGNsaWVudFJlY3Qgb2JqZWN0XG4gICAgICAvLyB3ZSBkbyB0aGlzIGJlZm9yZSBlYWNoIG1vZGlmaWVyIHRvIG1ha2Ugc3VyZSB0aGUgcHJldmlvdXMgb25lIGRvZXNuJ3RcbiAgICAgIC8vIG1lc3Mgd2l0aCB0aGVzZSB2YWx1ZXNcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSk7XG5cbiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge31cbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHModGhpcy5zdGF0ZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQodGhpcy5vcHRpb25zLnBsYWNlbWVudCwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICAvLyBzdG9yZSB0aGUgY29tcHV0ZWQgcGxhY2VtZW50IGluc2lkZSBgb3JpZ2luYWxQbGFjZW1lbnRgXG4gIGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICBkYXRhLnBvc2l0aW9uRml4ZWQgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZDtcblxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0UG9wcGVyT2Zmc2V0cyh0aGlzLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBpcyBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XG4gIHJldHVybiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkO1xuICAgIHJldHVybiBlbmFibGVkICYmIG5hbWUgPT09IG1vZGlmaWVyTmFtZTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdG9DaGVjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIHBvcHBlci5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXR5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge1dpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KGVsZW1lbnQpIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uXG4gKiB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4gSXQgYWxzbyB3b24ndCB0cmlnZ2VyIGBvblVwZGF0ZWAgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtCb29sZWFufSBzaG91bGRSb3VuZCAtIElmIHRoZSBvZmZzZXRzIHNob3VsZCBiZSByb3VuZGVkIGF0IGFsbFxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBvcHBlcidzIHBvc2l0aW9uIG9mZnNldHMgcm91bmRlZFxuICpcbiAqIFRoZSB0YWxlIG9mIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcuIEl0J3Mgc3RpbGwgbm90IDEwMCUgcGVyZmVjdCwgYnV0IGFzXG4gKiBnb29kIGFzIGl0IGNhbiBiZSB3aXRoaW4gcmVhc29uLlxuICogRGlzY3Vzc2lvbiBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9wdWxsLzcxNVxuICpcbiAqIExvdyBEUEkgc2NyZWVucyBjYXVzZSBhIHBvcHBlciB0byBiZSBibHVycnkgaWYgbm90IHVzaW5nIGZ1bGwgcGl4ZWxzIChTYWZhcmlcbiAqIGFzIHdlbGwgb24gSGlnaCBEUEkgc2NyZWVucykuXG4gKlxuICogRmlyZWZveCBwcmVmZXJzIG5vIHJvdW5kaW5nIGZvciBwb3NpdGlvbmluZyBhbmQgZG9lcyBub3QgaGF2ZSBibHVycmluZXNzIG9uXG4gKiBoaWdoIERQSSBzY3JlZW5zLlxuICpcbiAqIE9ubHkgaG9yaXpvbnRhbCBwbGFjZW1lbnQgYW5kIGxlZnQvcmlnaHQgdmFsdWVzIG5lZWQgdG8gYmUgY29uc2lkZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgc2hvdWxkUm91bmQpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4gIHZhciBub1JvdW5kID0gZnVuY3Rpb24gbm9Sb3VuZCh2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgdmFyIHJlZmVyZW5jZVdpZHRoID0gcm91bmQocmVmZXJlbmNlLndpZHRoKTtcbiAgdmFyIHBvcHBlcldpZHRoID0gcm91bmQocG9wcGVyLndpZHRoKTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoZGF0YS5wbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIGlzVmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuaW5kZXhPZignLScpICE9PSAtMTtcbiAgdmFyIHNhbWVXaWR0aFBhcml0eSA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gcG9wcGVyV2lkdGggJSAyO1xuICB2YXIgYm90aE9kZFdpZHRoID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSAxICYmIHBvcHBlcldpZHRoICUgMiA9PT0gMTtcblxuICB2YXIgaG9yaXpvbnRhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiBpc1ZlcnRpY2FsIHx8IGlzVmFyaWF0aW9uIHx8IHNhbWVXaWR0aFBhcml0eSA/IHJvdW5kIDogZmxvb3I7XG4gIHZhciB2ZXJ0aWNhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiByb3VuZDtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IGhvcml6b250YWxUb0ludGVnZXIoYm90aE9kZFdpZHRoICYmICFpc1ZhcmlhdGlvbiAmJiBzaG91bGRSb3VuZCA/IHBvcHBlci5sZWZ0IC0gMSA6IHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IGhvcml6b250YWxUb0ludGVnZXIocG9wcGVyLnJpZ2h0KVxuICB9O1xufVxuXG52YXIgaXNGaXJlZm94ID0gaXNCcm93c2VyICYmIC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIHggPSBvcHRpb25zLngsXG4gICAgICB5ID0gb3B0aW9ucy55O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcblxuICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJztcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7XG4gIH1cbiAgdmFyIGdwdUFjY2VsZXJhdGlvbiA9IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvblxuICB9O1xuXG4gIHZhciBvZmZzZXRzID0gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPCAyIHx8ICFpc0ZpcmVmb3gpO1xuXG4gIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIHZhciBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICB2YXIgbGVmdCA9IHZvaWQgMCxcbiAgICAgIHRvcCA9IHZvaWQgMDtcbiAgaWYgKHNpZGVBID09PSAnYm90dG9tJykge1xuICAgIC8vIHdoZW4gb2Zmc2V0UGFyZW50IGlzIDxodG1sPiB0aGUgcG9zaXRpb25pbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIChleGNsdWRpbmcgdGhlIHNjcm9sbGJhcilcbiAgICAvLyBhbmQgbm90IHRoZSBib3R0b20gb2YgdGhlIGh0bWwgZWxlbWVudFxuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRvcCA9IG9mZnNldHMudG9wO1xuICB9XG4gIGlmIChzaWRlQiA9PT0gJ3JpZ2h0Jykge1xuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnRcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpO1xuICBkYXRhLmFycm93U3R5bGVzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5hcnJvdywgZGF0YS5hcnJvd1N0eWxlcyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChtb2RpZmllcnMsIHJlcXVlc3RpbmdOYW1lLCByZXF1ZXN0ZWROYW1lKSB7XG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lO1xuICB9KTtcblxuICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7XG4gICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7XG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzJGFycm93O1xuXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1bmN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSwgMTApO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10sIDEwKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgc2lkZSwgTWF0aC5yb3VuZChzaWRlVmFsdWUpKSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgYWx0U2lkZSwgJycpLCBfZGF0YSRvZmZzZXRzJGFycm93KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tZW5kYCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXNldHMgdGhlIHBvcHBlcidzIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGRvY3VtZW50IHNpemUgY2FuIGJlIGNhbGN1bGF0ZWQgZXhjbHVkaW5nXG4gIC8vIHRoZSBzaXplIG9mIHRoZSBwb3BwZXIgZWxlbWVudCBpdHNlbGZcbiAgdmFyIHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cbiAgdmFyIHRvcCA9IHBvcHBlclN0eWxlcy50b3AsXG4gICAgICBsZWZ0ID0gcG9wcGVyU3R5bGVzLmxlZnQsXG4gICAgICB0cmFuc2Zvcm0gPSBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF07XG5cbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcbiAgcG9wcGVyU3R5bGVzLnRvcCA9IHRvcDtcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0O1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICB2YXIgY2hlY2sgPSB7XG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xuICB9KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XG5cbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLFxuICAgICAgZW5kOiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBzaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0LWxlc3MsIGludGVycHJldGVkIGFzIHBpeGVsc1xuICAgKiAtIGAlYCBvciBgJXJgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiAtIGB2d2AsIENTUyB2aWV3cG9ydCB3aWR0aCB1bml0XG4gICAqIC0gYHZoYCwgQ1NTIHZpZXdwb3J0IGhlaWdodCB1bml0XG4gICAqXG4gICAqIEZvciBsZW5ndGggaXMgaW50ZW5kZWQgdGhlIG1haW4gYXhpcyByZWxhdGl2ZSB0byB0aGUgcGxhY2VtZW50IG9mIHRoZSBwb3BwZXIuPGJyIC8+XG4gICAqIFRoaXMgbWVhbnMgdGhhdCBpZiB0aGUgcGxhY2VtZW50IGlzIGB0b3BgIG9yIGBib3R0b21gLCB0aGUgbGVuZ3RoIHdpbGwgYmUgdGhlXG4gICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGBoZWlnaHRgLlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gWW91IGNhbiByZWFkIG1vcmUgb24gdGhpcyBhdCB0aGlzIFtpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MykuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEEgc2NlbmFyaW8gZXhpc3RzIHdoZXJlIHRoZSByZWZlcmVuY2UgaXRzZWxmIGlzIG5vdCB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuPGJyIC8+XG4gICAqIFdlIGNhbiBzYXkgaXQgaGFzIFwiZXNjYXBlZCB0aGUgYm91bmRhcmllc1wiIOKAlCBvciBqdXN0IFwiZXNjYXBlZFwiLjxiciAvPlxuICAgKiBJbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBkZWNpZGUgd2hldGhlciB0aGUgcG9wcGVyIHNob3VsZCBlaXRoZXI6XG4gICAqXG4gICAqIC0gZGV0YWNoIGZyb20gdGhlIHJlZmVyZW5jZSBhbmQgcmVtYWluIFwidHJhcHBlZFwiIGluIHRoZSBib3VuZGFyaWVzLCBvclxuICAgKiAtIGlmIGl0IHNob3VsZCBpZ25vcmUgdGhlIGJvdW5kYXJ5IGFuZCBcImVzY2FwZSB3aXRoIGl0cyByZWZlcmVuY2VcIlxuICAgKlxuICAgKiBXaGVuIGBlc2NhcGVXaXRoUmVmZXJlbmNlYCBpcyBzZXQgdG9gdHJ1ZWAgYW5kIHJlZmVyZW5jZSBpcyBjb21wbGV0ZWx5XG4gICAqIG91dHNpZGUgaXRzIGJvdW5kYXJpZXMsIHRoZSBwb3BwZXIgd2lsbCBvdmVyZmxvdyAob3IgY29tcGxldGVseSBsZWF2ZSlcbiAgICogdGhlIGJvdW5kYXJpZXMgaW4gb3JkZXIgdG8gcmVtYWluIGF0dGFjaGVkIHRvIHRoZSBlZGdlIG9mIHRoZSByZWZlcmVuY2UuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAzMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gICAgLyoqXG4gICAgICogQHByb3Age0FycmF5fSBbcHJpb3JpdHk9WydsZWZ0JywncmlnaHQnLCd0b3AnLCdib3R0b20nXV1cbiAgICAgKiBQb3BwZXIgd2lsbCB0cnkgdG8gcHJldmVudCBvdmVyZmxvdyBmb2xsb3dpbmcgdGhlc2UgcHJpb3JpdGllcyBieSBkZWZhdWx0LFxuICAgICAqIHRoZW4sIGl0IGNvdWxkIG92ZXJmbG93IG9uIHRoZSBsZWZ0IGFuZCBvbiB0b3Agb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwcmlvcml0eTogWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBBbW91bnQgb2YgcGl4ZWwgdXNlZCB0byBkZWZpbmUgYSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvdW5kYXJpZXNcbiAgICAgKiBhbmQgdGhlIHBvcHBlci4gVGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgYWx3YXlzIGhhcyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLiBDYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNoIG90aGVyXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXNwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgaXQgcG9pbnRzIHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcy4gWW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVuY3Rpb24gYXJlIG5lZWRlZC5cbiAgICpcbiAgICogSXQgaGFzIG5vIGVmZmVjdCBpZiBubyBgYXJyb3dFbGVtZW50YCBpcyBwcm92aWRlZC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFycm93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXJyb3csXG4gICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi9cbiAgICBlbGVtZW50OiAnW3gtYXJyb3ddJ1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGZsaXAgdGhlIHBvcHBlcidzIHBsYWNlbWVudCB3aGVuIGl0IHN0YXJ0cyB0byBvdmVybGFwIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudC5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKlxuICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGxcbiAgICogcmVzdGFydCBpdCBpZiBpdCBkZXRlY3RzIHRoZSBuZWVkIHRvIGZsaXAgdGhlIHBsYWNlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGZsaXA6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA2MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBmbGlwLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8QXJyYXl9IGJlaGF2aW9yPSdmbGlwJ1xuICAgICAqIFRoZSBiZWhhdmlvciB1c2VkIHRvIGNoYW5nZSB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LiBJdCBjYW4gYmUgb25lIG9mXG4gICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkXG4gICAgICogcGxhY2VtZW50cyAod2l0aCBvcHRpb25hbCB2YXJpYXRpb25zKVxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLlxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBga2VlcFRvZ2V0aGVyYCBpcyBlbmFibGVkKVxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAndmlld3BvcnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lclxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGhpZGUgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXRzaWRlIG9mIHRoZVxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxuICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpc1xuICAgKiBvdXQgb2YgYm91bmRhcmllcy5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaGlkZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDgwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGhpZGVcbiAgfSxcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgZWxlbWVudCB0byBnZXRzXG4gICAqIHByb3Blcmx5IHBvc2l0aW9uZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIG1vZGlmaWVyIHdpbGwgbm90IHRvdWNoIHRoZSBET00sIGl0IGp1c3QgcHJlcGFyZXMgdGhlIHN0eWxlc1xuICAgKiBzbyB0aGF0IGBhcHBseVN0eWxlYCBtb2RpZmllciBjYW4gYXBwbHkgaXQuIFRoaXMgc2VwYXJhdGlvbiBpcyB1c2VmdWxcbiAgICogaW4gY2FzZSB5b3UgbmVlZCB0byByZXBsYWNlIGBhcHBseVN0eWxlYCB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLlxuICAgKlxuICAgKiBUaGlzIG1vZGlmaWVyIGhhcyBgODUwYCBhcyBgb3JkZXJgIHZhbHVlIHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICogd2l0aCBwcmV2aW91cyB2ZXJzaW9ucyBvZiBQb3BwZXIuanMuIEV4cGVjdCB0aGUgbW9kaWZpZXJzIG9yZGVyaW5nIG1ldGhvZFxuICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIG1ham9yIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgY29tcHV0ZVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTg1MCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODUwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogY29tcHV0ZVN0eWxlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nYm90dG9tJ11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFggYXhpcyAoYGJvdHRvbWAgb3IgYHRvcGApLiBBS0EgWCBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gXG4gICAgICovXG4gICAgeDogJ2JvdHRvbScsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2xlZnQnXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWSBheGlzIChgbGVmdGAgb3IgYHJpZ2h0YCkuIEFLQSBZIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YFxuICAgICAqL1xuICAgIHk6ICdyaWdodCdcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3VyIG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZFxuICB9XG59O1xuXG4vKipcbiAqIFRoZSBgZGF0YU9iamVjdGAgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBpbmZvcm1hdGlvbiB1c2VkIGJ5IFBvcHBlci5qcy5cbiAqIFRoaXMgb2JqZWN0IGlzIHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGRhdGEuYXJyb3dFbGVtZW50IE5vZGUgdXNlZCBhcyBhcnJvdyBieSBhcnJvdyBtb2RpZmllclxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuc3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYXJyb3dTdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgYXJyb3cuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5ib3VuZGFyaWVzIE9mZnNldHMgb2YgdGhlIHBvcHBlciBib3VuZGFyaWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzIFRoZSBtZWFzdXJlbWVudHMgb2YgcG9wcGVyLCByZWZlcmVuY2UgYW5kIGFycm93IGVsZW1lbnRzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucmVmZXJlbmNlIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5hcnJvd10gYHRvcGAgYW5kIGBsZWZ0YCBvZmZzZXRzLCBvbmx5IG9uZSBvZiB0aGVtIHdpbGwgYmUgZGlmZmVyZW50IGZyb20gMFxuICovXG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz5cbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIHVzaW5nIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2YgUG9wcGVyLmpzLjxiciAvPlxuICogVG8gb3ZlcnJpZGUgYW4gb3B0aW9uLCBzaW1wbHkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZVxuICogc3RydWN0dXJlIG9mIHRoZSBgb3B0aW9uc2Agb2JqZWN0LCBhcyB0aGUgM3JkIGFyZ3VtZW50LiBGb3IgZXhhbXBsZTpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWYsIHBvcCwge1xuICogICBtb2RpZmllcnM6IHtcbiAqICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogZmFsc2UgfVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgRGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBQb3BwZXIncyBwbGFjZW1lbnQuXG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHBvcHBlciB0byBwb3NpdGlvbiBpdCBzZWxmIGluICdmaXhlZCcgbW9kZVxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZVxuICAgKi9cbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlXG4gICAqL1xuICBldmVudHNFbmFibGVkOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcG9wcGVyIHdoZW5cbiAgICogeW91IGNhbGwgdGhlIGBkZXN0cm95YCBtZXRob2QuXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcbiAgICovXG4gIHJlbW92ZU9uRGVzdHJveTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgY3JlYXRlZC48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25DcmVhdGV9XG4gICAqL1xuICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7fSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyB1cGRhdGVkLiBUaGlzIGNhbGxiYWNrIGlzIG5vdCBjYWxsZWRcbiAgICogb24gdGhlIGluaXRpYWxpemF0aW9uL2NyZWF0aW9uIG9mIHRoZSBwb3BwZXIsIGJ1dCBvbmx5IG9uIHN1YnNlcXVlbnRcbiAgICogdXBkYXRlcy48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25VcGRhdGV9XG4gICAqL1xuICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7fSxcblxuICAvKipcbiAgICogTGlzdCBvZiBtb2RpZmllcnMgdXNlZCB0byBtb2RpZnkgdGhlIG9mZnNldHMgYmVmb3JlIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci5cbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanMuXG4gICAqIEBwcm9wIHttb2RpZmllcnN9XG4gICAqL1xuICBtb2RpZmllcnM6IG1vZGlmaWVyc1xufTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgb25DcmVhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uVXBkYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vLyBVdGlsc1xuLy8gTWV0aG9kc1xudmFyIFBvcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlLlxuICAgKiBAY2xhc3MgUG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzLnVwZGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcbiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSQkMSgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYW4gdXBkYXRlLiBJdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlLlxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuXG5Qb3BwZXIuVXRpbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLlBvcHBlclV0aWxzO1xuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsIi8qIGdsb2JhbCBwcm9jZXNzICovXG4vKmVzbGludCBuby11bnVzZWQtdmFyczogW1wiZXJyb3JcIiwgeyBcInZhcnNJZ25vcmVQYXR0ZXJuXCI6IFwiU3RyaW5nSGVscGVyc3xGYWRlSW5UZXh0XCIgfV0qLyAvL2FsbG93IFN0cmluZ0hlbHBlcnMgdG8gYmUgaXBvcnRlZCAoZGVmaW5lZCkgYW5kIG5vdCBiZWluZyBleHBsaWNpdGx5IGNhbGxlZFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyB3aXRob3V0IHRyaWdnZXJpbmcgZXNsaW50IGVycm9yXG5pbXBvcnQgeyBTdHJpbmdIZWxwZXJzLCBGYWRlSW5UZXh0IH0gZnJvbSAnQFV0aWxzJzsgLy8gc3RyaW5nIGhlbHBlcnMgaXMgYW4gSUlGRVxuaW1wb3J0IFN0YXRlRGVidCBmcm9tICcuL3N0YXRlLWRlYnQuanMnO1xuaW1wb3J0ICcuL2Nzcy9zdHlsZXMuc2Nzcyc7XG5cblxuY29uc3QgY29udGFpbmVyID0gJyNwZXctYXBwJztcbmNvbnN0IEFwcCA9IG5ldyBTdGF0ZURlYnQoY29udGFpbmVyLCB7IC8vIFN0YXRlRGVidCBleHRlbmRzIFBDVEFwcC1qcy4gUENUQXBwLWpzJ3MgY29uc3RydWN0b3IgbWV0aG9kIGlzIGNhbGxlZCwgcDEgY29udGFpdW5lciwgcDIgb3B0aW9uc1xuXHRuZWVkc1JvdXRlcjogZmFsc2Vcbn0pO1xuaWYgKCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyB8fCB3aW5kb3cuSVNfUFJFUkVOREVSSU5HICl7IC8vIHByb2Nlc3MgZGV2ZWxvcG1lbnQgbWVhbnMgdXNpbmcgV2ViUGFjayBkZXYgc2VydmVyLiB3aW5kb3cgaXMgcHJlcmVuZGVyaW5nIG1lYW5zIGluXG5cdEFwcC5wcmVyZW5kZXIoKTtcbn1cbkFwcC5pbml0KCk7IiwiLyogZ2xvYmFsIFBVQkxJQ1BBVEggcHJvY2VzcyBtb2R1bGUgKi9cbi8vdXRpbHNcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzLWNvbGxlY3Rpb24nO1xuaW1wb3J0IFBhcGEgZnJvbSAncGFwYXBhcnNlJztcbmltcG9ydCB7IHN0YXRlTW9kdWxlIGFzIFMgfSBmcm9tICdzdGF0ZWZ1bC1kZWFkJztcbi8vaW1wb3J0IFBTIGZyb20gJ3B1YnN1Yi1zZXR0ZXInO1xuaW1wb3J0IHsgcHVibGlzaFdpbmRvd1Jlc2l6ZSB9IGZyb20gJ0BVdGlscyc7XG5pbXBvcnQgc21vb3Roc2Nyb2xsIGZyb20gJ3Ntb290aHNjcm9sbC1wb2x5ZmlsbCc7XG5pbXBvcnQgeyBHVE1QdXNoIH0gZnJvbSAnQFV0aWxzJztcblxuLy9kYXRhICggQ1NWcyBsb2FkZWQgYnkgZmlsZS1sb2FkZXIgZm9yIHVzZSBieSBQYXBhcGFyc2UgYXQgYnVpbGQgYW5kIHJ1bnRpbWUuIHRoYXQncyBzZXQgaW4gd2VicGFjay5jb21tb24uanMgKVxuaW1wb3J0IGRhdGEgZnJvbSAnLi9kYXRhL2RhdGEuY3N2JztcbmltcG9ydCBncm91cHMgZnJvbSAnLi9kYXRhL2dyb3Vwcy5qc29uJztcbmltcG9ydCB0eXBlcyBmcm9tICcuL2RhdGEvdHlwZXMuanNvbic7XG5pbXBvcnQgZGljdCBmcm9tICcuL2RhdGEvZGljdGlvbmFyeS5qc29uJztcblxuLy92aWV3c1xuaW1wb3J0IENvbXBhcmlzb25WaWV3IGZyb20gJy4vdmlld3Mvc3RhdGUtY29tcGFyaXNvbi8nO1xuaW1wb3J0IEZpZnR5U3RhdGVWaWV3IGZyb20gJy4vdmlld3MvZmlmdHktc3RhdGUvJztcblxuLy8gYXBwIHByb3RvdHlwZVxuaW1wb3J0IFBDVEFwcCBmcm9tICdAQXBwJztcblxuLy9zdGF0aWMgY29udGVudFxuaW1wb3J0IHNlY3Rpb25zIGZyb20gJy4vcGFydGlhbHMvc2VjdGlvbnMuaHRtbCc7XG5pbXBvcnQgZm9vdGVyIGZyb20gJy4vcGFydGlhbHMvZm9vdGVyLmh0bWwnO1xuXG5wdWJsaXNoV2luZG93UmVzaXplKFMpO1xuXG5zbW9vdGhzY3JvbGwucG9seWZpbGwoKTtcblxuY29uc3QgbW9kZWwgPSB7XG4gICAgZ3JvdXBzLFxuICAgIHR5cGVzLFxuICAgIGRpY3Rcbn07XG5cbmNvbnN0IHZpZXdzID0gW107XG5cbnZhciBzY3JvbGxQb3NpdGlvbiA9IDA7XG5cbmZ1bmN0aW9uIGdldFJ1bnRpbWVEYXRhKCl7XG4gICAgdmFyIHB1YmxpY1BhdGggPSAnJztcbiAgICBpZiAoIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgJiYgIXdpbmRvdy5JU19QUkVSRU5ERVJJTkcgKXsgLy8gcHJvZHVjdGlvbiBidWlsZCBuZWVkcyB0byBrbm93IHRoZSBwdWJsaWMgcGF0aCBvZiBhc3NldHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGRldiBhbmQgcHJldmlldywgYXNzZXRzIGFyZSBhIGNoaWxkIG9mIHJvb3Q7IGZvciBidWlsZCB0aGV5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFyZSBpbiBzb21lIGRpc3RhbnQgcGF0aCBvbiBzaXRlY29yZVxuICAgICAgICBwdWJsaWNQYXRoID0gUFVCTElDUEFUSDsgLy8gVE9ETzogc2V0IFBVQkxJQ1BBVEggdXNpbmcgZGVmaW5lIHBsdWdpbiBpbiB3ZWJwYWNrLmJ1aWxkLmpzXG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHZhciBhcHBDb250YWluZXIgPSB0aGlzLmVsO1xuICAgICAgICBQYXBhLnBhcnNlKHB1YmxpY1BhdGggKyBkYXRhLCB7XG4gICAgICAgICAgICBkb3dubG9hZDogdHJ1ZSxcbiAgICAgICAgICAgIGR5bmFtaWNUeXBpbmc6IHRydWUsXG4gICAgICAgICAgICBoZWFkZXI6IHRydWUsXG4gICAgICAgICAgICBmYXN0TW9kZTogdHJ1ZSwgLy8gbm8gc3RyaW5nIGVzY2FwZXNcbiAgICAgICAgICAgIHNraXBFbXB0eUxpbmVzOiB0cnVlLFxuICAgICAgICAgICAgYmVmb3JlRmlyc3RDaHVuayhjaHVuayl7IC8vIG9uIHByZXJlbmRlciwgZG8gc2ltcGxlIGhhc2ggb2YgQ1NWIGNvbnRlbnRzIGFuZCBhcHBlbmQgYXMgYXR0cmlidXRlIG9mIHRoZSBhcHAgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXQgcnVudGltZSwgZG8gc2FtZSBoYXNoIG9mIGNzdiBjb250ZW50cyBhbmQgY29tcGFyZSB0byBvcmlnaW5hbC4gaWYgaGFzaGVzIG1hdGNoLCBhcHAgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnRpbnVlIG5vcm1hbGx5LiBpZiBtaXNtYXRjaGVkLCBhcHAgd2lsbCByZXJlbmRlciBhbGwgY29tcG9uZW50cyBiYXNlZCBvbiB0aGUgbmV3IGRhdGEuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBhbGxvd3MgZm9yIGBob3RgIHVwZGF0aW5nIG9mIHRoZSBtYWluIGRhdGEgZmlsZSB3aXRob3V0IHJlYnVpbGRpbmcgdGhlIGRpc3QvIGZvbGRlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBgbW9kZWwuaXNNaXNtYXRjaGAgd2lsbCBiZSBzZXQgdG8gYHRydWVgIGFuZCB0aGUgcHJlcmVuZGVyaW5nIGZ1bmN0aW9ucyB3aWxsIGNoZWNrIHRoYXQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgcmVzcG9uZCBhY2NvcmRpbmdseVxuXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFIYXNoID0gY2h1bmsuaGFzaENvZGUoKTsgLy8gaGFzaENvZGUgaXMgaGVscGVyIGZ1bmN0aW9uIGZyb20gdXRpbHMsIGltcG9ydGVkIGFuZCBJSUZFJ2QgaW4gaW5kZXguanNcbiAgICAgICAgICAgICAgICBpZiAoIHdpbmRvdy5JU19QUkVSRU5ERVJJTkcgKXtcbiAgICAgICAgICAgICAgICAgICAgYXBwQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS1kYXRhLWhhc2gnLCBkYXRhSGFzaCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdkZXZlbG9wbWVudCcgJiYgZGF0YUhhc2gudG9TdHJpbmcoKSAhPT0gYXBwQ29udGFpbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS1kYXRhLWhhc2gnKSApe1xuICAgICAgICAgICAgICAgICAgICBhcHBDb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLWRhdGEtbWlzbWF0Y2gnLHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGF0YSBtaXNtYXRjaCcpO1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC5pc01pc21hdGNoZWQgPSB0cnVlOyAvLyBTRVQgSEVSRSBGT1IgREVCVUdHSU5HIFBVUlBPU0VTLiBORUVEIFRPIE1PVkUgQkFDSyBVUFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wbGV0ZTogcmVzcG9uc2UgPT4geyAvLyBhcnJvdyBmdW5jdGlvbiBoZXJlIHRvIGtlZXAgYHRoaXNgIGNvbnRleHQgYXMgU3RhdGVEZWJ0XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmlld3MubGVuZ3RoID0gMDsgIC8vIEhFUkUgWU9VIE5FRUQgVE8gTkVTVCBCWSBVU0lORyBUSEUgVEhFIEdST1VQIFRIQVQgVEhFIFZBTFVFIE1BUFMgVE9cbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgLyogY29tcGxldGUgbW9kZWwgYmFzZWQgb24gZmV0Y2hlZCBkYXRhICovXG4gICAgICAgICAgICAgICAgbW9kZWwuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgbW9kZWwudHlwZXMuZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0eXBlLnR5cGUgIT09ICd0ZXh0Jyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YUFycmF5ID0gZGF0YS5tYXAoZCA9PiBkW3R5cGUuZmllbGRdKS5maWx0ZXIoZCA9PiBkICE9PSBudWxsKTsgXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLm1heCA9IE1hdGgubWF4KC4uLmRhdGFBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLm1pbiA9IE1hdGgubWluKC4uLmRhdGFBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLnNwcmVhZCA9IHR5cGUubWF4IC0gdHlwZS5taW47XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLmNyb3NzZXNaZXJvID0gdHlwZS5tYXggKiB0eXBlLm1pbiA8PSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbW9kZWwudHlwZXNOZXN0ZWQgPSBkMy5uZXN0KCkua2V5KGQgPT4gZC5ncm91cCkuZW50cmllcyhtb2RlbC50eXBlcyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobW9kZWwpO1xuICAgICAgICAgICAgICAgIC8vIC4uLi5cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8qIHB1c2ggdmlld3Mgbm93IHRoYXQgbW9kZWwgaXMgY29tcGxldGUgKi9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2aWV3cy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudChtb2RlbCwgQ29tcGFyaXNvblZpZXcsICdkaXYjY29tcGFyaXNvbi12aWV3Jywge3JlbmRlclRvU2VsZWN0b3I6ICcjc2VjdGlvbi1jb21wYXJpc29uIC5qcy1pbm5lci1jb250ZW50JywgcmVyZW5kZXJPbkRhdGFNaXNtYXRjaDogdHJ1ZSwgcGFyZW50OiB0aGlzfSksICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQobW9kZWwsIEZpZnR5U3RhdGVWaWV3LCAnZGl2I2ZpZnR5LXN0YXRlLXZpZXcnLCB7cmVuZGVyVG9TZWxlY3RvcjogJyNmaWZ0eS1zdGF0ZS1jb250YWluZXInLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXN9KSAgXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXRlRGVidCBleHRlbmRzIFBDVEFwcCB7XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwcmVyZW5kZXInKTtcbiAgICAgICAgdGhpcy5lbC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIHNlY3Rpb25zKTtcbiAgICAgICAgdGhpcy5lbC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGZvb3Rlcik7XG4gICAgICAgIC8vdGhpcy53YXNQcmVyZW5kZXJlZCA9IGZhbHNlO1xuICAgICAgICBnZXRSdW50aW1lRGF0YS5jYWxsKHRoaXMpLnRoZW4oKCkgPT4geyAvLyBiaW5kIFN0YXRlRGVidCBhcyBjb250ZXh0IGB0aGlzYCBmb3IgZ2V0UnVudGltZURhdGEgc28gdGhhdCBpdCBjYW4gYWNjZWVzcyB0aGlzLmVsLCBldGNcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1vZGVsKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmlld3MuZm9yRWFjaCh2aWV3ID0+IHtcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRhaW5lci5hcHBlbmRDaGlsZCh2aWV3LmVsKTsgLy8gZGlmZmVyZW50IGhlcmUgZnJvbSBDYXBlVG93bjogdmlld3MgYXJlbid0IGFwcGVuZGVkIHRvIGFwcCBjb250YWluZXI7IHNvbWUgc3RhdGljIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXMgcHJlc2VudCBhbHJlYWR5LiB2aWV3cyBhcHBlbmRlZCB0byAqdGhlaXIqIGNvbnRhaW5lcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy90aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdyZW5kZXJlZCcpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICBjb25zb2xlLmxvZygnaW5pdCcpO1xuICAgICAgICBzdXBlci5pbml0KCk7XG4gICAgICAgIHRoaXMuYXR0YWNoU2VjdGlvbk9wZW5DbG9zZSgpO1xuICAgICAgICB0aGlzLmluaXRTdGF0aWNBbmNob3JMaW5rcygpO1xuICAgICAgICBnZXRSdW50aW1lRGF0YS5jYWxsKHRoaXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdmlld3MuZm9yRWFjaCh2aWV3ID0+IHtcbiAgICAgICAgICAgICAgIHZpZXcuaW5pdCh0aGlzKTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgaWYgKCBtb2R1bGUuaG90ICl7XG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBtb2R1bGUuaG90LmFjY2VwdCgnLi92aWV3cy9zdGF0ZS1jb21wYXJpc29uJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhY2NlcHQhJywgYXJndW1lbnRzLCB0aGF0KTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VjdGlvbi1jb21wYXJpc29uIC5qcy1pbm5lci1jb250ZW50JykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gdGhhdC5jcmVhdGVDb21wb25lbnQobW9kZWwsIENvbXBhcmlzb25WaWV3LCAnZGl2I2NvbXBhcmlzb24tdmlldycsIHtyZW5kZXJUb1NlbGVjdG9yOiAnI3NlY3Rpb24tY29tcGFyaXNvbiAuanMtaW5uZXItY29udGVudCcsIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IHRydWV9KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQuY29udGFpbmVyLmFwcGVuZENoaWxkKHJlcGxhY2VtZW50LmVsKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdFN0YXRpY0FuY2hvckxpbmtzKCl7XG4gICAgICAgIHZhciBsaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wY3Qtc3RhdGljLWFuY2hvcicpO1xuICAgICAgICBsaW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgbGluay5ocmVmLnNwbGl0KCcjJylbMV0pO1xuICAgICAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgLSAxMjAsXG4gICAgICAgICAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGF0dGFjaFNlY3Rpb25PcGVuQ2xvc2UoKXtcbiAgICAgICAgZnVuY3Rpb24gdG9nZ2xlU2VjdGlvbigpe1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuanMtaW5uZXItY29udGVudCcpLmNsYXNzTGlzdC50b2dnbGUoJ3BjdC1oaWRlJyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC50b2dnbGUoJ3BjdC1pcy1jbG9zZWQnKTtcbiAgICAgICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgICAgICAgR1RNUHVzaChgU3RhdGVEZWJ0fE9wZW5DbG9zZXwke3RoaXMuaW5uZXJUZXh0fWApO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNwZXctYXBwIHNlY3Rpb24gPiBoMicpLmZvckVhY2goaGVhZGluZyA9PiB7XG4gICAgICAgICAgICBoZWFkaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlU2VjdGlvbik7XG4gICAgICAgICAgICBoZWFkaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpe1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVTZWN0aW9uLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm5Nb3JlTGluayhmaWVsZCl7XG4gICAgICAgIGNvbnNvbGUubG9nKGZpZWxkKTtcbiAgICAgICAgZnVuY3Rpb24gc2Nyb2xsQmFjaygpe1xuICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKHtcbiAgICAgICAgICAgICAgICB0b3A6IHNjcm9sbFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2Nyb2xsQmFjayk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3dHb0JhY2snKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgaWYgKCBmaWVsZCA9PT0gJ2NyZWRpdDIwMTUnIHx8IGZpZWxkID09PSAnY3JlZGl0MjAxOCcgKXtcbiAgICAgICAgICAgIGZpZWxkID0gJ2NyZWRpdF9yYXRpbmcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtJyArIGZpZWxkKTtcbiAgICAgICAgbGluay5pbm5lclRleHQgPSAnbW9yZSc7XG4gICAgICAgIGxpbmsuaHJlZiA9ICcjJyArIGZpZWxkO1xuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBzY3JvbGxQb3NpdGlvbiA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgICAgIGlmICggaGVhZGVyICl7XG4gICAgICAgICAgICAgICAgR1RNUHVzaChgU3RhdGVEZWJ0fE1vcmVMaW5rfCR7ZmllbGR9YCk7XG4gICAgICAgICAgICAgICAgbGV0IGhlYWRlclBvc2l0aW9uID0gaGVhZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIHNjcm9sbFBvc2l0aW9uIC0gMTIwO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbyh7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogaGVhZGVyUG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaG93R29CYWNrJykuZm9yRWFjaChmdW5jdGlvbihlYWNoKXtcbiAgICAgICAgICAgICAgICAgICAgZWFjaC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93R29CYWNrJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaGVhZGVyLmNsYXNzTGlzdC5hZGQoJ3Nob3dHb0JhY2snKTtcbiAgICAgICAgICAgICAgICBoZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzY3JvbGxCYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBoZWFkZXIgPyBsaW5rIDogbnVsbDtcbiAgICB9XG59IiwiLyogQGxpY2Vuc2VcblBhcGEgUGFyc2VcbnY0LjYuM1xuaHR0cHM6Ly9naXRodWIuY29tL21ob2x0L1BhcGFQYXJzZVxuTGljZW5zZTogTUlUXG4qL1xuQXJyYXkuaXNBcnJheXx8KEFycmF5LmlzQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSksZnVuY3Rpb24oZSx0KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPXQoKTplLlBhcGE9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHMsZSxmPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09Zj9mOnt9LG49IWYuZG9jdW1lbnQmJiEhZi5wb3N0TWVzc2FnZSxvPW4mJi8oXFw/fCYpcGFwYXdvcmtlcig9fCZ8JCkvLnRlc3QoZi5sb2NhdGlvbi5zZWFyY2gpLGE9ITEsaD17fSx1PTAsaz17cGFyc2U6ZnVuY3Rpb24oZSx0KXt2YXIgcj0odD10fHx7fSkuZHluYW1pY1R5cGluZ3x8ITE7eihyKSYmKHQuZHluYW1pY1R5cGluZ0Z1bmN0aW9uPXIscj17fSk7aWYodC5keW5hbWljVHlwaW5nPXIsdC50cmFuc2Zvcm09ISF6KHQudHJhbnNmb3JtKSYmdC50cmFuc2Zvcm0sdC53b3JrZXImJmsuV09SS0VSU19TVVBQT1JURUQpe3ZhciBpPWZ1bmN0aW9uKCl7aWYoIWsuV09SS0VSU19TVVBQT1JURUQpcmV0dXJuITE7aWYoIWEmJm51bGw9PT1rLlNDUklQVF9QQVRIKXRocm93IG5ldyBFcnJvcihcIlNjcmlwdCBwYXRoIGNhbm5vdCBiZSBkZXRlcm1pbmVkIGF1dG9tYXRpY2FsbHkgd2hlbiBQYXBhIFBhcnNlIGlzIGxvYWRlZCBhc3luY2hyb25vdXNseS4gWW91IG5lZWQgdG8gc2V0IFBhcGEuU0NSSVBUX1BBVEggbWFudWFsbHkuXCIpO3ZhciBlPWsuU0NSSVBUX1BBVEh8fHM7ZSs9KC0xIT09ZS5pbmRleE9mKFwiP1wiKT9cIiZcIjpcIj9cIikrXCJwYXBhd29ya2VyXCI7dmFyIHQ9bmV3IGYuV29ya2VyKGUpO3JldHVybiB0Lm9ubWVzc2FnZT1tLHQuaWQ9dSsrLGhbdC5pZF09dH0oKTtyZXR1cm4gaS51c2VyU3RlcD10LnN0ZXAsaS51c2VyQ2h1bms9dC5jaHVuayxpLnVzZXJDb21wbGV0ZT10LmNvbXBsZXRlLGkudXNlckVycm9yPXQuZXJyb3IsdC5zdGVwPXoodC5zdGVwKSx0LmNodW5rPXoodC5jaHVuayksdC5jb21wbGV0ZT16KHQuY29tcGxldGUpLHQuZXJyb3I9eih0LmVycm9yKSxkZWxldGUgdC53b3JrZXIsdm9pZCBpLnBvc3RNZXNzYWdlKHtpbnB1dDplLGNvbmZpZzp0LHdvcmtlcklkOmkuaWR9KX12YXIgbj1udWxsO2suTk9ERV9TVFJFQU1fSU5QVVQsXCJzdHJpbmdcIj09dHlwZW9mIGU/bj10LmRvd25sb2FkP25ldyBjKHQpOm5ldyBfKHQpOiEwPT09ZS5yZWFkYWJsZSYmeihlLnJlYWQpJiZ6KGUub24pP249bmV3IGcodCk6KGYuRmlsZSYmZSBpbnN0YW5jZW9mIEZpbGV8fGUgaW5zdGFuY2VvZiBPYmplY3QpJiYobj1uZXcgcCh0KSk7cmV0dXJuIG4uc3RyZWFtKGUpfSx1bnBhcnNlOmZ1bmN0aW9uKGUsdCl7dmFyIGk9ITEsZz0hMCxtPVwiLFwiLHk9XCJcXHJcXG5cIixuPSdcIicscj0hMTshZnVuY3Rpb24oKXtpZihcIm9iamVjdFwiIT10eXBlb2YgdClyZXR1cm47XCJzdHJpbmdcIiE9dHlwZW9mIHQuZGVsaW1pdGVyfHxrLkJBRF9ERUxJTUlURVJTLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4tMSE9PXQuZGVsaW1pdGVyLmluZGV4T2YoZSl9KS5sZW5ndGh8fChtPXQuZGVsaW1pdGVyKTsoXCJib29sZWFuXCI9PXR5cGVvZiB0LnF1b3Rlc3x8QXJyYXkuaXNBcnJheSh0LnF1b3RlcykpJiYoaT10LnF1b3Rlcyk7XCJib29sZWFuXCIhPXR5cGVvZiB0LnNraXBFbXB0eUxpbmVzJiZcInN0cmluZ1wiIT10eXBlb2YgdC5za2lwRW1wdHlMaW5lc3x8KHI9dC5za2lwRW1wdHlMaW5lcyk7XCJzdHJpbmdcIj09dHlwZW9mIHQubmV3bGluZSYmKHk9dC5uZXdsaW5lKTtcInN0cmluZ1wiPT10eXBlb2YgdC5xdW90ZUNoYXImJihuPXQucXVvdGVDaGFyKTtcImJvb2xlYW5cIj09dHlwZW9mIHQuaGVhZGVyJiYoZz10LmhlYWRlcil9KCk7dmFyIHM9bmV3IFJlZ0V4cChNKG4pLFwiZ1wiKTtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9SlNPTi5wYXJzZShlKSk7aWYoQXJyYXkuaXNBcnJheShlKSl7aWYoIWUubGVuZ3RofHxBcnJheS5pc0FycmF5KGVbMF0pKXJldHVybiBvKG51bGwsZSxyKTtpZihcIm9iamVjdFwiPT10eXBlb2YgZVswXSlyZXR1cm4gbyhhKGVbMF0pLGUscil9ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYoZS5kYXRhPUpTT04ucGFyc2UoZS5kYXRhKSksQXJyYXkuaXNBcnJheShlLmRhdGEpJiYoZS5maWVsZHN8fChlLmZpZWxkcz1lLm1ldGEmJmUubWV0YS5maWVsZHMpLGUuZmllbGRzfHwoZS5maWVsZHM9QXJyYXkuaXNBcnJheShlLmRhdGFbMF0pP2UuZmllbGRzOmEoZS5kYXRhWzBdKSksQXJyYXkuaXNBcnJheShlLmRhdGFbMF0pfHxcIm9iamVjdFwiPT10eXBlb2YgZS5kYXRhWzBdfHwoZS5kYXRhPVtlLmRhdGFdKSksbyhlLmZpZWxkc3x8W10sZS5kYXRhfHxbXSxyKTt0aHJvd1wiZXhjZXB0aW9uOiBVbmFibGUgdG8gc2VyaWFsaXplIHVucmVjb2duaXplZCBpbnB1dFwiO2Z1bmN0aW9uIGEoZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUpcmV0dXJuW107dmFyIHQ9W107Zm9yKHZhciByIGluIGUpdC5wdXNoKHIpO3JldHVybiB0fWZ1bmN0aW9uIG8oZSx0LHIpe3ZhciBpPVwiXCI7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPUpTT04ucGFyc2UoZSkpLFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1KU09OLnBhcnNlKHQpKTt2YXIgbj1BcnJheS5pc0FycmF5KGUpJiYwPGUubGVuZ3RoLHM9IUFycmF5LmlzQXJyYXkodFswXSk7aWYobiYmZyl7Zm9yKHZhciBhPTA7YTxlLmxlbmd0aDthKyspMDxhJiYoaSs9bSksaSs9dihlW2FdLGEpOzA8dC5sZW5ndGgmJihpKz15KX1mb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIGg9bj9lLmxlbmd0aDp0W29dLmxlbmd0aCx1PSExLGY9bj8wPT09T2JqZWN0LmtleXModFtvXSkubGVuZ3RoOjA9PT10W29dLmxlbmd0aDtpZihyJiYhbiYmKHU9XCJncmVlZHlcIj09PXI/XCJcIj09PXRbb10uam9pbihcIlwiKS50cmltKCk6MT09PXRbb10ubGVuZ3RoJiYwPT09dFtvXVswXS5sZW5ndGgpLFwiZ3JlZWR5XCI9PT1yJiZuKXtmb3IodmFyIGQ9W10sbD0wO2w8aDtsKyspe3ZhciBjPXM/ZVtsXTpsO2QucHVzaCh0W29dW2NdKX11PVwiXCI9PT1kLmpvaW4oXCJcIikudHJpbSgpfWlmKCF1KXtmb3IodmFyIHA9MDtwPGg7cCsrKXswPHAmJiFmJiYoaSs9bSk7dmFyIF89biYmcz9lW3BdOnA7aSs9dih0W29dW19dLHApfW88dC5sZW5ndGgtMSYmKCFyfHwwPGgmJiFmKSYmKGkrPXkpfX1yZXR1cm4gaX1mdW5jdGlvbiB2KGUsdCl7aWYobnVsbD09ZSlyZXR1cm5cIlwiO2lmKGUuY29uc3RydWN0b3I9PT1EYXRlKXJldHVybiBKU09OLnN0cmluZ2lmeShlKS5zbGljZSgxLDI1KTtlPWUudG9TdHJpbmcoKS5yZXBsYWNlKHMsbituKTt2YXIgcj1cImJvb2xlYW5cIj09dHlwZW9mIGkmJml8fEFycmF5LmlzQXJyYXkoaSkmJmlbdF18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspaWYoLTE8ZS5pbmRleE9mKHRbcl0pKXJldHVybiEwO3JldHVybiExfShlLGsuQkFEX0RFTElNSVRFUlMpfHwtMTxlLmluZGV4T2YobSl8fFwiIFwiPT09ZS5jaGFyQXQoMCl8fFwiIFwiPT09ZS5jaGFyQXQoZS5sZW5ndGgtMSk7cmV0dXJuIHI/bitlK246ZX19fTtpZihrLlJFQ09SRF9TRVA9U3RyaW5nLmZyb21DaGFyQ29kZSgzMCksay5VTklUX1NFUD1TdHJpbmcuZnJvbUNoYXJDb2RlKDMxKSxrLkJZVEVfT1JERVJfTUFSSz1cIlxcdWZlZmZcIixrLkJBRF9ERUxJTUlURVJTPVtcIlxcclwiLFwiXFxuXCIsJ1wiJyxrLkJZVEVfT1JERVJfTUFSS10say5XT1JLRVJTX1NVUFBPUlRFRD0hbiYmISFmLldvcmtlcixrLlNDUklQVF9QQVRIPW51bGwsay5OT0RFX1NUUkVBTV9JTlBVVD0xLGsuTG9jYWxDaHVua1NpemU9MTA0ODU3NjAsay5SZW1vdGVDaHVua1NpemU9NTI0Mjg4MCxrLkRlZmF1bHREZWxpbWl0ZXI9XCIsXCIsay5QYXJzZXI9dixrLlBhcnNlckhhbmRsZT1yLGsuTmV0d29ya1N0cmVhbWVyPWMsay5GaWxlU3RyZWFtZXI9cCxrLlN0cmluZ1N0cmVhbWVyPV8say5SZWFkYWJsZVN0cmVhbVN0cmVhbWVyPWcsZi5qUXVlcnkpe3ZhciBkPWYualF1ZXJ5O2QuZm4ucGFyc2U9ZnVuY3Rpb24obyl7dmFyIHI9by5jb25maWd8fHt9LGg9W107cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtpZighKFwiSU5QVVRcIj09PWQodGhpcykucHJvcChcInRhZ05hbWVcIikudG9VcHBlckNhc2UoKSYmXCJmaWxlXCI9PT1kKHRoaXMpLmF0dHIoXCJ0eXBlXCIpLnRvTG93ZXJDYXNlKCkmJmYuRmlsZVJlYWRlcil8fCF0aGlzLmZpbGVzfHwwPT09dGhpcy5maWxlcy5sZW5ndGgpcmV0dXJuITA7Zm9yKHZhciB0PTA7dDx0aGlzLmZpbGVzLmxlbmd0aDt0KyspaC5wdXNoKHtmaWxlOnRoaXMuZmlsZXNbdF0saW5wdXRFbGVtOnRoaXMsaW5zdGFuY2VDb25maWc6ZC5leHRlbmQoe30scil9KX0pLGUoKSx0aGlzO2Z1bmN0aW9uIGUoKXtpZigwIT09aC5sZW5ndGgpe3ZhciBlLHQscixpLG49aFswXTtpZih6KG8uYmVmb3JlKSl7dmFyIHM9by5iZWZvcmUobi5maWxlLG4uaW5wdXRFbGVtKTtpZihcIm9iamVjdFwiPT10eXBlb2Ygcyl7aWYoXCJhYm9ydFwiPT09cy5hY3Rpb24pcmV0dXJuIGU9XCJBYm9ydEVycm9yXCIsdD1uLmZpbGUscj1uLmlucHV0RWxlbSxpPXMucmVhc29uLHZvaWQoeihvLmVycm9yKSYmby5lcnJvcih7bmFtZTplfSx0LHIsaSkpO2lmKFwic2tpcFwiPT09cy5hY3Rpb24pcmV0dXJuIHZvaWQgdSgpO1wib2JqZWN0XCI9PXR5cGVvZiBzLmNvbmZpZyYmKG4uaW5zdGFuY2VDb25maWc9ZC5leHRlbmQobi5pbnN0YW5jZUNvbmZpZyxzLmNvbmZpZykpfWVsc2UgaWYoXCJza2lwXCI9PT1zKXJldHVybiB2b2lkIHUoKX12YXIgYT1uLmluc3RhbmNlQ29uZmlnLmNvbXBsZXRlO24uaW5zdGFuY2VDb25maWcuY29tcGxldGU9ZnVuY3Rpb24oZSl7eihhKSYmYShlLG4uZmlsZSxuLmlucHV0RWxlbSksdSgpfSxrLnBhcnNlKG4uZmlsZSxuLmluc3RhbmNlQ29uZmlnKX1lbHNlIHooby5jb21wbGV0ZSkmJm8uY29tcGxldGUoKX1mdW5jdGlvbiB1KCl7aC5zcGxpY2UoMCwxKSxlKCl9fX1mdW5jdGlvbiBsKGUpe3RoaXMuX2hhbmRsZT1udWxsLHRoaXMuX2ZpbmlzaGVkPSExLHRoaXMuX2NvbXBsZXRlZD0hMSx0aGlzLl9pbnB1dD1udWxsLHRoaXMuX2Jhc2VJbmRleD0wLHRoaXMuX3BhcnRpYWxMaW5lPVwiXCIsdGhpcy5fcm93Q291bnQ9MCx0aGlzLl9zdGFydD0wLHRoaXMuX25leHRDaHVuaz1udWxsLHRoaXMuaXNGaXJzdENodW5rPSEwLHRoaXMuX2NvbXBsZXRlUmVzdWx0cz17ZGF0YTpbXSxlcnJvcnM6W10sbWV0YTp7fX0sZnVuY3Rpb24oZSl7dmFyIHQ9RShlKTt0LmNodW5rU2l6ZT1wYXJzZUludCh0LmNodW5rU2l6ZSksZS5zdGVwfHxlLmNodW5rfHwodC5jaHVua1NpemU9bnVsbCk7dGhpcy5faGFuZGxlPW5ldyByKHQpLCh0aGlzLl9oYW5kbGUuc3RyZWFtZXI9dGhpcykuX2NvbmZpZz10fS5jYWxsKHRoaXMsZSksdGhpcy5wYXJzZUNodW5rPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5pc0ZpcnN0Q2h1bmsmJnoodGhpcy5fY29uZmlnLmJlZm9yZUZpcnN0Q2h1bmspKXt2YXIgcj10aGlzLl9jb25maWcuYmVmb3JlRmlyc3RDaHVuayhlKTt2b2lkIDAhPT1yJiYoZT1yKX10aGlzLmlzRmlyc3RDaHVuaz0hMTt2YXIgaT10aGlzLl9wYXJ0aWFsTGluZStlO3RoaXMuX3BhcnRpYWxMaW5lPVwiXCI7dmFyIG49dGhpcy5faGFuZGxlLnBhcnNlKGksdGhpcy5fYmFzZUluZGV4LCF0aGlzLl9maW5pc2hlZCk7aWYoIXRoaXMuX2hhbmRsZS5wYXVzZWQoKSYmIXRoaXMuX2hhbmRsZS5hYm9ydGVkKCkpe3ZhciBzPW4ubWV0YS5jdXJzb3I7dGhpcy5fZmluaXNoZWR8fCh0aGlzLl9wYXJ0aWFsTGluZT1pLnN1YnN0cmluZyhzLXRoaXMuX2Jhc2VJbmRleCksdGhpcy5fYmFzZUluZGV4PXMpLG4mJm4uZGF0YSYmKHRoaXMuX3Jvd0NvdW50Kz1uLmRhdGEubGVuZ3RoKTt2YXIgYT10aGlzLl9maW5pc2hlZHx8dGhpcy5fY29uZmlnLnByZXZpZXcmJnRoaXMuX3Jvd0NvdW50Pj10aGlzLl9jb25maWcucHJldmlldztpZihvKWYucG9zdE1lc3NhZ2Uoe3Jlc3VsdHM6bix3b3JrZXJJZDprLldPUktFUl9JRCxmaW5pc2hlZDphfSk7ZWxzZSBpZih6KHRoaXMuX2NvbmZpZy5jaHVuaykmJiF0KXtpZih0aGlzLl9jb25maWcuY2h1bmsobix0aGlzLl9oYW5kbGUpLHRoaXMuX2hhbmRsZS5wYXVzZWQoKXx8dGhpcy5faGFuZGxlLmFib3J0ZWQoKSlyZXR1cm47bj12b2lkIDAsdGhpcy5fY29tcGxldGVSZXN1bHRzPXZvaWQgMH1yZXR1cm4gdGhpcy5fY29uZmlnLnN0ZXB8fHRoaXMuX2NvbmZpZy5jaHVua3x8KHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5kYXRhPXRoaXMuX2NvbXBsZXRlUmVzdWx0cy5kYXRhLmNvbmNhdChuLmRhdGEpLHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5lcnJvcnM9dGhpcy5fY29tcGxldGVSZXN1bHRzLmVycm9ycy5jb25jYXQobi5lcnJvcnMpLHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5tZXRhPW4ubWV0YSksdGhpcy5fY29tcGxldGVkfHwhYXx8IXoodGhpcy5fY29uZmlnLmNvbXBsZXRlKXx8biYmbi5tZXRhLmFib3J0ZWR8fCh0aGlzLl9jb25maWcuY29tcGxldGUodGhpcy5fY29tcGxldGVSZXN1bHRzLHRoaXMuX2lucHV0KSx0aGlzLl9jb21wbGV0ZWQ9ITApLGF8fG4mJm4ubWV0YS5wYXVzZWR8fHRoaXMuX25leHRDaHVuaygpLG59fSx0aGlzLl9zZW5kRXJyb3I9ZnVuY3Rpb24oZSl7eih0aGlzLl9jb25maWcuZXJyb3IpP3RoaXMuX2NvbmZpZy5lcnJvcihlKTpvJiZ0aGlzLl9jb25maWcuZXJyb3ImJmYucG9zdE1lc3NhZ2Uoe3dvcmtlcklkOmsuV09SS0VSX0lELGVycm9yOmUsZmluaXNoZWQ6ITF9KX19ZnVuY3Rpb24gYyhlKXt2YXIgaTsoZT1lfHx7fSkuY2h1bmtTaXplfHwoZS5jaHVua1NpemU9ay5SZW1vdGVDaHVua1NpemUpLGwuY2FsbCh0aGlzLGUpLHRoaXMuX25leHRDaHVuaz1uP2Z1bmN0aW9uKCl7dGhpcy5fcmVhZENodW5rKCksdGhpcy5fY2h1bmtMb2FkZWQoKX06ZnVuY3Rpb24oKXt0aGlzLl9yZWFkQ2h1bmsoKX0sdGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7dGhpcy5faW5wdXQ9ZSx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fcmVhZENodW5rPWZ1bmN0aW9uKCl7aWYodGhpcy5fZmluaXNoZWQpdGhpcy5fY2h1bmtMb2FkZWQoKTtlbHNle2lmKGk9bmV3IFhNTEh0dHBSZXF1ZXN0LHRoaXMuX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMmJihpLndpdGhDcmVkZW50aWFscz10aGlzLl9jb25maWcud2l0aENyZWRlbnRpYWxzKSxufHwoaS5vbmxvYWQ9dyh0aGlzLl9jaHVua0xvYWRlZCx0aGlzKSxpLm9uZXJyb3I9dyh0aGlzLl9jaHVua0Vycm9yLHRoaXMpKSxpLm9wZW4oXCJHRVRcIix0aGlzLl9pbnB1dCwhbiksdGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnMpe3ZhciBlPXRoaXMuX2NvbmZpZy5kb3dubG9hZFJlcXVlc3RIZWFkZXJzO2Zvcih2YXIgdCBpbiBlKWkuc2V0UmVxdWVzdEhlYWRlcih0LGVbdF0pfWlmKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpe3ZhciByPXRoaXMuX3N0YXJ0K3RoaXMuX2NvbmZpZy5jaHVua1NpemUtMTtpLnNldFJlcXVlc3RIZWFkZXIoXCJSYW5nZVwiLFwiYnl0ZXM9XCIrdGhpcy5fc3RhcnQrXCItXCIrciksaS5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLFwid2Via2l0LW5vLWNhY2hlXCIpfXRyeXtpLnNlbmQoKX1jYXRjaChlKXt0aGlzLl9jaHVua0Vycm9yKGUubWVzc2FnZSl9biYmMD09PWkuc3RhdHVzP3RoaXMuX2NodW5rRXJyb3IoKTp0aGlzLl9zdGFydCs9dGhpcy5fY29uZmlnLmNodW5rU2l6ZX19LHRoaXMuX2NodW5rTG9hZGVkPWZ1bmN0aW9uKCl7ND09PWkucmVhZHlTdGF0ZSYmKGkuc3RhdHVzPDIwMHx8NDAwPD1pLnN0YXR1cz90aGlzLl9jaHVua0Vycm9yKCk6KHRoaXMuX2ZpbmlzaGVkPSF0aGlzLl9jb25maWcuY2h1bmtTaXplfHx0aGlzLl9zdGFydD5mdW5jdGlvbihlKXt2YXIgdD1lLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1SYW5nZVwiKTtpZihudWxsPT09dClyZXR1cm4tMTtyZXR1cm4gcGFyc2VJbnQodC5zdWJzdHIodC5sYXN0SW5kZXhPZihcIi9cIikrMSkpfShpKSx0aGlzLnBhcnNlQ2h1bmsoaS5yZXNwb25zZVRleHQpKSl9LHRoaXMuX2NodW5rRXJyb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9aS5zdGF0dXNUZXh0fHxlO3RoaXMuX3NlbmRFcnJvcihuZXcgRXJyb3IodCkpfX1mdW5jdGlvbiBwKGUpe3ZhciBpLG47KGU9ZXx8e30pLmNodW5rU2l6ZXx8KGUuY2h1bmtTaXplPWsuTG9jYWxDaHVua1NpemUpLGwuY2FsbCh0aGlzLGUpO3ZhciBzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBGaWxlUmVhZGVyO3RoaXMuc3RyZWFtPWZ1bmN0aW9uKGUpe3RoaXMuX2lucHV0PWUsbj1lLnNsaWNlfHxlLndlYmtpdFNsaWNlfHxlLm1velNsaWNlLHM/KChpPW5ldyBGaWxlUmVhZGVyKS5vbmxvYWQ9dyh0aGlzLl9jaHVua0xvYWRlZCx0aGlzKSxpLm9uZXJyb3I9dyh0aGlzLl9jaHVua0Vycm9yLHRoaXMpKTppPW5ldyBGaWxlUmVhZGVyU3luYyx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fbmV4dENodW5rPWZ1bmN0aW9uKCl7dGhpcy5fZmluaXNoZWR8fHRoaXMuX2NvbmZpZy5wcmV2aWV3JiYhKHRoaXMuX3Jvd0NvdW50PHRoaXMuX2NvbmZpZy5wcmV2aWV3KXx8dGhpcy5fcmVhZENodW5rKCl9LHRoaXMuX3JlYWRDaHVuaz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX2lucHV0O2lmKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpe3ZhciB0PU1hdGgubWluKHRoaXMuX3N0YXJ0K3RoaXMuX2NvbmZpZy5jaHVua1NpemUsdGhpcy5faW5wdXQuc2l6ZSk7ZT1uLmNhbGwoZSx0aGlzLl9zdGFydCx0KX12YXIgcj1pLnJlYWRBc1RleHQoZSx0aGlzLl9jb25maWcuZW5jb2RpbmcpO3N8fHRoaXMuX2NodW5rTG9hZGVkKHt0YXJnZXQ6e3Jlc3VsdDpyfX0pfSx0aGlzLl9jaHVua0xvYWRlZD1mdW5jdGlvbihlKXt0aGlzLl9zdGFydCs9dGhpcy5fY29uZmlnLmNodW5rU2l6ZSx0aGlzLl9maW5pc2hlZD0hdGhpcy5fY29uZmlnLmNodW5rU2l6ZXx8dGhpcy5fc3RhcnQ+PXRoaXMuX2lucHV0LnNpemUsdGhpcy5wYXJzZUNodW5rKGUudGFyZ2V0LnJlc3VsdCl9LHRoaXMuX2NodW5rRXJyb3I9ZnVuY3Rpb24oKXt0aGlzLl9zZW5kRXJyb3IoaS5lcnJvcil9fWZ1bmN0aW9uIF8oZSl7dmFyIHI7bC5jYWxsKHRoaXMsZT1lfHx7fSksdGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7cmV0dXJuIHI9ZSx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fbmV4dENodW5rPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2ZpbmlzaGVkKXt2YXIgZT10aGlzLl9jb25maWcuY2h1bmtTaXplLHQ9ZT9yLnN1YnN0cigwLGUpOnI7cmV0dXJuIHI9ZT9yLnN1YnN0cihlKTpcIlwiLHRoaXMuX2ZpbmlzaGVkPSFyLHRoaXMucGFyc2VDaHVuayh0KX19fWZ1bmN0aW9uIGcoZSl7bC5jYWxsKHRoaXMsZT1lfHx7fSk7dmFyIHQ9W10scj0hMCxpPSExO3RoaXMucGF1c2U9ZnVuY3Rpb24oKXtsLnByb3RvdHlwZS5wYXVzZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5faW5wdXQucGF1c2UoKX0sdGhpcy5yZXN1bWU9ZnVuY3Rpb24oKXtsLnByb3RvdHlwZS5yZXN1bWUuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2lucHV0LnJlc3VtZSgpfSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXt0aGlzLl9pbnB1dD1lLHRoaXMuX2lucHV0Lm9uKFwiZGF0YVwiLHRoaXMuX3N0cmVhbURhdGEpLHRoaXMuX2lucHV0Lm9uKFwiZW5kXCIsdGhpcy5fc3RyZWFtRW5kKSx0aGlzLl9pbnB1dC5vbihcImVycm9yXCIsdGhpcy5fc3RyZWFtRXJyb3IpfSx0aGlzLl9jaGVja0lzRmluaXNoZWQ9ZnVuY3Rpb24oKXtpJiYxPT09dC5sZW5ndGgmJih0aGlzLl9maW5pc2hlZD0hMCl9LHRoaXMuX25leHRDaHVuaz1mdW5jdGlvbigpe3RoaXMuX2NoZWNrSXNGaW5pc2hlZCgpLHQubGVuZ3RoP3RoaXMucGFyc2VDaHVuayh0LnNoaWZ0KCkpOnI9ITB9LHRoaXMuX3N0cmVhbURhdGE9dyhmdW5jdGlvbihlKXt0cnl7dC5wdXNoKFwic3RyaW5nXCI9PXR5cGVvZiBlP2U6ZS50b1N0cmluZyh0aGlzLl9jb25maWcuZW5jb2RpbmcpKSxyJiYocj0hMSx0aGlzLl9jaGVja0lzRmluaXNoZWQoKSx0aGlzLnBhcnNlQ2h1bmsodC5zaGlmdCgpKSl9Y2F0Y2goZSl7dGhpcy5fc3RyZWFtRXJyb3IoZSl9fSx0aGlzKSx0aGlzLl9zdHJlYW1FcnJvcj13KGZ1bmN0aW9uKGUpe3RoaXMuX3N0cmVhbUNsZWFuVXAoKSx0aGlzLl9zZW5kRXJyb3IoZSl9LHRoaXMpLHRoaXMuX3N0cmVhbUVuZD13KGZ1bmN0aW9uKCl7dGhpcy5fc3RyZWFtQ2xlYW5VcCgpLGk9ITAsdGhpcy5fc3RyZWFtRGF0YShcIlwiKX0sdGhpcyksdGhpcy5fc3RyZWFtQ2xlYW5VcD13KGZ1bmN0aW9uKCl7dGhpcy5faW5wdXQucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsdGhpcy5fc3RyZWFtRGF0YSksdGhpcy5faW5wdXQucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIix0aGlzLl9zdHJlYW1FbmQpLHRoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIix0aGlzLl9zdHJlYW1FcnJvcil9LHRoaXMpfWZ1bmN0aW9uIHIoZyl7dmFyIGEsbyxoLGk9L15cXHMqLT8oXFxkKlxcLj9cXGQrfFxcZCtcXC4/XFxkKikoZVstK10/XFxkKyk/XFxzKiQvaSxuPS8oXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSl8KFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSl8KFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSkvLHQ9dGhpcyxyPTAscz0wLHU9ITEsZT0hMSxmPVtdLGQ9e2RhdGE6W10sZXJyb3JzOltdLG1ldGE6e319O2lmKHooZy5zdGVwKSl7dmFyIGw9Zy5zdGVwO2cuc3RlcD1mdW5jdGlvbihlKXtpZihkPWUscCgpKWMoKTtlbHNle2lmKGMoKSwwPT09ZC5kYXRhLmxlbmd0aClyZXR1cm47cis9ZS5kYXRhLmxlbmd0aCxnLnByZXZpZXcmJnI+Zy5wcmV2aWV3P28uYWJvcnQoKTpsKGQsdCl9fX1mdW5jdGlvbiBtKGUpe3JldHVyblwiZ3JlZWR5XCI9PT1nLnNraXBFbXB0eUxpbmVzP1wiXCI9PT1lLmpvaW4oXCJcIikudHJpbSgpOjE9PT1lLmxlbmd0aCYmMD09PWVbMF0ubGVuZ3RofWZ1bmN0aW9uIGMoKXtpZihkJiZoJiYoeShcIkRlbGltaXRlclwiLFwiVW5kZXRlY3RhYmxlRGVsaW1pdGVyXCIsXCJVbmFibGUgdG8gYXV0by1kZXRlY3QgZGVsaW1pdGluZyBjaGFyYWN0ZXI7IGRlZmF1bHRlZCB0byAnXCIray5EZWZhdWx0RGVsaW1pdGVyK1wiJ1wiKSxoPSExKSxnLnNraXBFbXB0eUxpbmVzKWZvcih2YXIgZT0wO2U8ZC5kYXRhLmxlbmd0aDtlKyspbShkLmRhdGFbZV0pJiZkLmRhdGEuc3BsaWNlKGUtLSwxKTtyZXR1cm4gcCgpJiZmdW5jdGlvbigpe2lmKCFkKXJldHVybjtmb3IodmFyIGU9MDtwKCkmJmU8ZC5kYXRhLmxlbmd0aDtlKyspZm9yKHZhciB0PTA7dDxkLmRhdGFbZV0ubGVuZ3RoO3QrKyl7dmFyIHI9ZC5kYXRhW2VdW3RdO2cudHJpbUhlYWRlcnMmJihyPXIudHJpbSgpKSxmLnB1c2gocil9ZC5kYXRhLnNwbGljZSgwLDEpfSgpLGZ1bmN0aW9uKCl7aWYoIWR8fCFnLmhlYWRlciYmIWcuZHluYW1pY1R5cGluZyYmIWcudHJhbnNmb3JtKXJldHVybiBkO2Zvcih2YXIgZT0wO2U8ZC5kYXRhLmxlbmd0aDtlKyspe3ZhciB0LHI9Zy5oZWFkZXI/e306W107Zm9yKHQ9MDt0PGQuZGF0YVtlXS5sZW5ndGg7dCsrKXt2YXIgaT10LG49ZC5kYXRhW2VdW3RdO2cuaGVhZGVyJiYoaT10Pj1mLmxlbmd0aD9cIl9fcGFyc2VkX2V4dHJhXCI6Zlt0XSksZy50cmFuc2Zvcm0mJihuPWcudHJhbnNmb3JtKG4saSkpLG49XyhpLG4pLFwiX19wYXJzZWRfZXh0cmFcIj09PWk/KHJbaV09cltpXXx8W10scltpXS5wdXNoKG4pKTpyW2ldPW59ZC5kYXRhW2VdPXIsZy5oZWFkZXImJih0PmYubGVuZ3RoP3koXCJGaWVsZE1pc21hdGNoXCIsXCJUb29NYW55RmllbGRzXCIsXCJUb28gbWFueSBmaWVsZHM6IGV4cGVjdGVkIFwiK2YubGVuZ3RoK1wiIGZpZWxkcyBidXQgcGFyc2VkIFwiK3QscytlKTp0PGYubGVuZ3RoJiZ5KFwiRmllbGRNaXNtYXRjaFwiLFwiVG9vRmV3RmllbGRzXCIsXCJUb28gZmV3IGZpZWxkczogZXhwZWN0ZWQgXCIrZi5sZW5ndGgrXCIgZmllbGRzIGJ1dCBwYXJzZWQgXCIrdCxzK2UpKX1nLmhlYWRlciYmZC5tZXRhJiYoZC5tZXRhLmZpZWxkcz1mKTtyZXR1cm4gcys9ZC5kYXRhLmxlbmd0aCxkfSgpfWZ1bmN0aW9uIHAoKXtyZXR1cm4gZy5oZWFkZXImJjA9PT1mLmxlbmd0aH1mdW5jdGlvbiBfKGUsdCl7cmV0dXJuIHI9ZSxnLmR5bmFtaWNUeXBpbmdGdW5jdGlvbiYmdm9pZCAwPT09Zy5keW5hbWljVHlwaW5nW3JdJiYoZy5keW5hbWljVHlwaW5nW3JdPWcuZHluYW1pY1R5cGluZ0Z1bmN0aW9uKHIpKSwhMD09PShnLmR5bmFtaWNUeXBpbmdbcl18fGcuZHluYW1pY1R5cGluZyk/XCJ0cnVlXCI9PT10fHxcIlRSVUVcIj09PXR8fFwiZmFsc2VcIiE9PXQmJlwiRkFMU0VcIiE9PXQmJihpLnRlc3QodCk/cGFyc2VGbG9hdCh0KTpuLnRlc3QodCk/bmV3IERhdGUodCk6XCJcIj09PXQ/bnVsbDp0KTp0O3ZhciByfWZ1bmN0aW9uIHkoZSx0LHIsaSl7ZC5lcnJvcnMucHVzaCh7dHlwZTplLGNvZGU6dCxtZXNzYWdlOnIscm93Oml9KX10aGlzLnBhcnNlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaT1nLnF1b3RlQ2hhcnx8J1wiJztpZihnLm5ld2xpbmV8fChnLm5ld2xpbmU9ZnVuY3Rpb24oZSx0KXtlPWUuc3Vic3RyKDAsMTA0ODU3Nik7dmFyIHI9bmV3IFJlZ0V4cChNKHQpK1wiKFteXSo/KVwiK00odCksXCJnbVwiKSxpPShlPWUucmVwbGFjZShyLFwiXCIpKS5zcGxpdChcIlxcclwiKSxuPWUuc3BsaXQoXCJcXG5cIikscz0xPG4ubGVuZ3RoJiZuWzBdLmxlbmd0aDxpWzBdLmxlbmd0aDtpZigxPT09aS5sZW5ndGh8fHMpcmV0dXJuXCJcXG5cIjtmb3IodmFyIGE9MCxvPTA7bzxpLmxlbmd0aDtvKyspXCJcXG5cIj09PWlbb11bMF0mJmErKztyZXR1cm4gYT49aS5sZW5ndGgvMj9cIlxcclxcblwiOlwiXFxyXCJ9KGUsaSkpLGg9ITEsZy5kZWxpbWl0ZXIpeihnLmRlbGltaXRlcikmJihnLmRlbGltaXRlcj1nLmRlbGltaXRlcihlKSxkLm1ldGEuZGVsaW1pdGVyPWcuZGVsaW1pdGVyKTtlbHNle3ZhciBuPWZ1bmN0aW9uKGUsdCxyLGkpe2Zvcih2YXIgbixzLGEsbz1bXCIsXCIsXCJcXHRcIixcInxcIixcIjtcIixrLlJFQ09SRF9TRVAsay5VTklUX1NFUF0saD0wO2g8by5sZW5ndGg7aCsrKXt2YXIgdT1vW2hdLGY9MCxkPTAsbD0wO2E9dm9pZCAwO2Zvcih2YXIgYz1uZXcgdih7Y29tbWVudHM6aSxkZWxpbWl0ZXI6dSxuZXdsaW5lOnQscHJldmlldzoxMH0pLnBhcnNlKGUpLHA9MDtwPGMuZGF0YS5sZW5ndGg7cCsrKWlmKHImJm0oYy5kYXRhW3BdKSlsKys7ZWxzZXt2YXIgXz1jLmRhdGFbcF0ubGVuZ3RoO2QrPV8sdm9pZCAwIT09YT8xPF8mJihmKz1NYXRoLmFicyhfLWEpLGE9Xyk6YT0wfTA8Yy5kYXRhLmxlbmd0aCYmKGQvPWMuZGF0YS5sZW5ndGgtbCksKHZvaWQgMD09PXN8fHM8ZikmJjEuOTk8ZCYmKHM9ZixuPXUpfXJldHVybntzdWNjZXNzZnVsOiEhKGcuZGVsaW1pdGVyPW4pLGJlc3REZWxpbWl0ZXI6bn19KGUsZy5uZXdsaW5lLGcuc2tpcEVtcHR5TGluZXMsZy5jb21tZW50cyk7bi5zdWNjZXNzZnVsP2cuZGVsaW1pdGVyPW4uYmVzdERlbGltaXRlcjooaD0hMCxnLmRlbGltaXRlcj1rLkRlZmF1bHREZWxpbWl0ZXIpLGQubWV0YS5kZWxpbWl0ZXI9Zy5kZWxpbWl0ZXJ9dmFyIHM9RShnKTtyZXR1cm4gZy5wcmV2aWV3JiZnLmhlYWRlciYmcy5wcmV2aWV3KyssYT1lLG89bmV3IHYocyksZD1vLnBhcnNlKGEsdCxyKSxjKCksdT97bWV0YTp7cGF1c2VkOiEwfX06ZHx8e21ldGE6e3BhdXNlZDohMX19fSx0aGlzLnBhdXNlZD1mdW5jdGlvbigpe3JldHVybiB1fSx0aGlzLnBhdXNlPWZ1bmN0aW9uKCl7dT0hMCxvLmFib3J0KCksYT1hLnN1YnN0cihvLmdldENoYXJJbmRleCgpKX0sdGhpcy5yZXN1bWU9ZnVuY3Rpb24oKXt1PSExLHQuc3RyZWFtZXIucGFyc2VDaHVuayhhLCEwKX0sdGhpcy5hYm9ydGVkPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LHRoaXMuYWJvcnQ9ZnVuY3Rpb24oKXtlPSEwLG8uYWJvcnQoKSxkLm1ldGEuYWJvcnRlZD0hMCx6KGcuY29tcGxldGUpJiZnLmNvbXBsZXRlKGQpLGE9XCJcIn19ZnVuY3Rpb24gTShlKXtyZXR1cm4gZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZyxcIlxcXFwkJlwiKX1mdW5jdGlvbiB2KGUpe3ZhciBTLE89KGU9ZXx8e30pLmRlbGltaXRlcix4PWUubmV3bGluZSxUPWUuY29tbWVudHMsST1lLnN0ZXAsQT1lLnByZXZpZXcsRD1lLmZhc3RNb2RlLEw9Uz12b2lkIDA9PT1lLnF1b3RlQ2hhcj8nXCInOmUucXVvdGVDaGFyO2lmKHZvaWQgMCE9PWUuZXNjYXBlQ2hhciYmKEw9ZS5lc2NhcGVDaGFyKSwoXCJzdHJpbmdcIiE9dHlwZW9mIE98fC0xPGsuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihPKSkmJihPPVwiLFwiKSxUPT09Tyl0aHJvd1wiQ29tbWVudCBjaGFyYWN0ZXIgc2FtZSBhcyBkZWxpbWl0ZXJcIjshMD09PVQ/VD1cIiNcIjooXCJzdHJpbmdcIiE9dHlwZW9mIFR8fC0xPGsuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihUKSkmJihUPSExKSxcIlxcblwiIT09eCYmXCJcXHJcIiE9PXgmJlwiXFxyXFxuXCIhPT14JiYoeD1cIlxcblwiKTt2YXIgUD0wLEY9ITE7dGhpcy5wYXJzZT1mdW5jdGlvbihpLHQscil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGkpdGhyb3dcIklucHV0IG11c3QgYmUgYSBzdHJpbmdcIjt2YXIgbj1pLmxlbmd0aCxlPU8ubGVuZ3RoLHM9eC5sZW5ndGgsYT1ULmxlbmd0aCxvPXooSSksaD1bXSx1PVtdLGY9W10sZD1QPTA7aWYoIWkpcmV0dXJuIEMoKTtpZihEfHwhMSE9PUQmJi0xPT09aS5pbmRleE9mKFMpKXtmb3IodmFyIGw9aS5zcGxpdCh4KSxjPTA7YzxsLmxlbmd0aDtjKyspe2lmKGY9bFtjXSxQKz1mLmxlbmd0aCxjIT09bC5sZW5ndGgtMSlQKz14Lmxlbmd0aDtlbHNlIGlmKHIpcmV0dXJuIEMoKTtpZighVHx8Zi5zdWJzdHIoMCxhKSE9PVQpe2lmKG8pe2lmKGg9W10sayhmLnNwbGl0KE8pKSxSKCksRilyZXR1cm4gQygpfWVsc2UgayhmLnNwbGl0KE8pKTtpZihBJiZBPD1jKXJldHVybiBoPWguc2xpY2UoMCxBKSxDKCEwKX19cmV0dXJuIEMoKX1mb3IodmFyIHAsXz1pLmluZGV4T2YoTyxQKSxnPWkuaW5kZXhPZih4LFApLG09bmV3IFJlZ0V4cChNKEwpK00oUyksXCJnXCIpOzspaWYoaVtQXSE9PVMpaWYoVCYmMD09PWYubGVuZ3RoJiZpLnN1YnN0cihQLGEpPT09VCl7aWYoLTE9PT1nKXJldHVybiBDKCk7UD1nK3MsZz1pLmluZGV4T2YoeCxQKSxfPWkuaW5kZXhPZihPLFApfWVsc2UgaWYoLTEhPT1fJiYoXzxnfHwtMT09PWcpKWYucHVzaChpLnN1YnN0cmluZyhQLF8pKSxQPV8rZSxfPWkuaW5kZXhPZihPLFApO2Vsc2V7aWYoLTE9PT1nKWJyZWFrO2lmKGYucHVzaChpLnN1YnN0cmluZyhQLGcpKSx3KGcrcyksbyYmKFIoKSxGKSlyZXR1cm4gQygpO2lmKEEmJmgubGVuZ3RoPj1BKXJldHVybiBDKCEwKX1lbHNlIGZvcihwPVAsUCsrOzspe2lmKC0xPT09KHA9aS5pbmRleE9mKFMscCsxKSkpcmV0dXJuIHJ8fHUucHVzaCh7dHlwZTpcIlF1b3Rlc1wiLGNvZGU6XCJNaXNzaW5nUXVvdGVzXCIsbWVzc2FnZTpcIlF1b3RlZCBmaWVsZCB1bnRlcm1pbmF0ZWRcIixyb3c6aC5sZW5ndGgsaW5kZXg6UH0pLEUoKTtpZihwPT09bi0xKXJldHVybiBFKGkuc3Vic3RyaW5nKFAscCkucmVwbGFjZShtLFMpKTtpZihTIT09THx8aVtwKzFdIT09TCl7aWYoUz09PUx8fDA9PT1wfHxpW3AtMV0hPT1MKXt2YXIgeT1iKC0xPT09Zz9fOk1hdGgubWluKF8sZykpO2lmKGlbcCsxK3ldPT09Tyl7Zi5wdXNoKGkuc3Vic3RyaW5nKFAscCkucmVwbGFjZShtLFMpKSxQPXArMSt5K2UsXz1pLmluZGV4T2YoTyxQKSxnPWkuaW5kZXhPZih4LFApO2JyZWFrfXZhciB2PWIoZyk7aWYoaS5zdWJzdHIocCsxK3Yscyk9PT14KXtpZihmLnB1c2goaS5zdWJzdHJpbmcoUCxwKS5yZXBsYWNlKG0sUykpLHcocCsxK3YrcyksXz1pLmluZGV4T2YoTyxQKSxvJiYoUigpLEYpKXJldHVybiBDKCk7aWYoQSYmaC5sZW5ndGg+PUEpcmV0dXJuIEMoITApO2JyZWFrfXUucHVzaCh7dHlwZTpcIlF1b3Rlc1wiLGNvZGU6XCJJbnZhbGlkUXVvdGVzXCIsbWVzc2FnZTpcIlRyYWlsaW5nIHF1b3RlIG9uIHF1b3RlZCBmaWVsZCBpcyBtYWxmb3JtZWRcIixyb3c6aC5sZW5ndGgsaW5kZXg6UH0pLHArK319ZWxzZSBwKyt9cmV0dXJuIEUoKTtmdW5jdGlvbiBrKGUpe2gucHVzaChlKSxkPVB9ZnVuY3Rpb24gYihlKXt2YXIgdD0wO2lmKC0xIT09ZSl7dmFyIHI9aS5zdWJzdHJpbmcocCsxLGUpO3ImJlwiXCI9PT1yLnRyaW0oKSYmKHQ9ci5sZW5ndGgpfXJldHVybiB0fWZ1bmN0aW9uIEUoZSl7cmV0dXJuIHJ8fCh2b2lkIDA9PT1lJiYoZT1pLnN1YnN0cihQKSksZi5wdXNoKGUpLFA9bixrKGYpLG8mJlIoKSksQygpfWZ1bmN0aW9uIHcoZSl7UD1lLGsoZiksZj1bXSxnPWkuaW5kZXhPZih4LFApfWZ1bmN0aW9uIEMoZSl7cmV0dXJue2RhdGE6aCxlcnJvcnM6dSxtZXRhOntkZWxpbWl0ZXI6TyxsaW5lYnJlYWs6eCxhYm9ydGVkOkYsdHJ1bmNhdGVkOiEhZSxjdXJzb3I6ZCsodHx8MCl9fX1mdW5jdGlvbiBSKCl7SShDKCkpLGg9W10sdT1bXX19LHRoaXMuYWJvcnQ9ZnVuY3Rpb24oKXtGPSEwfSx0aGlzLmdldENoYXJJbmRleD1mdW5jdGlvbigpe3JldHVybiBQfX1mdW5jdGlvbiBtKGUpe3ZhciB0PWUuZGF0YSxyPWhbdC53b3JrZXJJZF0saT0hMTtpZih0LmVycm9yKXIudXNlckVycm9yKHQuZXJyb3IsdC5maWxlKTtlbHNlIGlmKHQucmVzdWx0cyYmdC5yZXN1bHRzLmRhdGEpe3ZhciBuPXthYm9ydDpmdW5jdGlvbigpe2k9ITAseSh0LndvcmtlcklkLHtkYXRhOltdLGVycm9yczpbXSxtZXRhOnthYm9ydGVkOiEwfX0pfSxwYXVzZTpiLHJlc3VtZTpifTtpZih6KHIudXNlclN0ZXApKXtmb3IodmFyIHM9MDtzPHQucmVzdWx0cy5kYXRhLmxlbmd0aCYmKHIudXNlclN0ZXAoe2RhdGE6W3QucmVzdWx0cy5kYXRhW3NdXSxlcnJvcnM6dC5yZXN1bHRzLmVycm9ycyxtZXRhOnQucmVzdWx0cy5tZXRhfSxuKSwhaSk7cysrKTtkZWxldGUgdC5yZXN1bHRzfWVsc2UgeihyLnVzZXJDaHVuaykmJihyLnVzZXJDaHVuayh0LnJlc3VsdHMsbix0LmZpbGUpLGRlbGV0ZSB0LnJlc3VsdHMpfXQuZmluaXNoZWQmJiFpJiZ5KHQud29ya2VySWQsdC5yZXN1bHRzKX1mdW5jdGlvbiB5KGUsdCl7dmFyIHI9aFtlXTt6KHIudXNlckNvbXBsZXRlKSYmci51c2VyQ29tcGxldGUodCksci50ZXJtaW5hdGUoKSxkZWxldGUgaFtlXX1mdW5jdGlvbiBiKCl7dGhyb3dcIk5vdCBpbXBsZW1lbnRlZC5cIn1mdW5jdGlvbiBFKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm4gZTt2YXIgdD1BcnJheS5pc0FycmF5KGUpP1tdOnt9O2Zvcih2YXIgciBpbiBlKXRbcl09RShlW3JdKTtyZXR1cm4gdH1mdW5jdGlvbiB3KGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7ZS5hcHBseSh0LGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHooZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX1yZXR1cm4gbz9mLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgdD1lLmRhdGE7dm9pZCAwPT09ay5XT1JLRVJfSUQmJnQmJihrLldPUktFUl9JRD10LndvcmtlcklkKTtpZihcInN0cmluZ1wiPT10eXBlb2YgdC5pbnB1dClmLnBvc3RNZXNzYWdlKHt3b3JrZXJJZDprLldPUktFUl9JRCxyZXN1bHRzOmsucGFyc2UodC5pbnB1dCx0LmNvbmZpZyksZmluaXNoZWQ6ITB9KTtlbHNlIGlmKGYuRmlsZSYmdC5pbnB1dCBpbnN0YW5jZW9mIEZpbGV8fHQuaW5wdXQgaW5zdGFuY2VvZiBPYmplY3Qpe3ZhciByPWsucGFyc2UodC5pbnB1dCx0LmNvbmZpZyk7ciYmZi5wb3N0TWVzc2FnZSh7d29ya2VySWQ6ay5XT1JLRVJfSUQscmVzdWx0czpyLGZpbmlzaGVkOiEwfSl9fTprLldPUktFUlNfU1VQUE9SVEVEJiYoZT1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKSxzPWUubGVuZ3RoP2VbZS5sZW5ndGgtMV0uc3JjOlwiXCIsZG9jdW1lbnQuYm9keT9kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLGZ1bmN0aW9uKCl7YT0hMH0sITApOmE9ITApLChjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSkuY29uc3RydWN0b3I9YywocC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShsLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPXAsKF8ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoXy5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1fLChnLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSkuY29uc3RydWN0b3I9ZyxrfSk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyogc21vb3Roc2Nyb2xsIHYwLjQuNCAtIDIwMTkgLSBEdXN0YW4gS2FzdGVuLCBKZXJlbWlhcyBNZW5pY2hlbGxpIC0gTUlUIExpY2Vuc2UgKi9cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBwb2x5ZmlsbFxuICBmdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgICAvLyBhbGlhc2VzXG4gICAgdmFyIHcgPSB3aW5kb3c7XG4gICAgdmFyIGQgPSBkb2N1bWVudDtcblxuICAgIC8vIHJldHVybiBpZiBzY3JvbGwgYmVoYXZpb3IgaXMgc3VwcG9ydGVkIGFuZCBwb2x5ZmlsbCBpcyBub3QgZm9yY2VkXG4gICAgaWYgKFxuICAgICAgJ3Njcm9sbEJlaGF2aW9yJyBpbiBkLmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJlxuICAgICAgdy5fX2ZvcmNlU21vb3RoU2Nyb2xsUG9seWZpbGxfXyAhPT0gdHJ1ZVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGdsb2JhbHNcbiAgICB2YXIgRWxlbWVudCA9IHcuSFRNTEVsZW1lbnQgfHwgdy5FbGVtZW50O1xuICAgIHZhciBTQ1JPTExfVElNRSA9IDQ2ODtcblxuICAgIC8vIG9iamVjdCBnYXRoZXJpbmcgb3JpZ2luYWwgc2Nyb2xsIG1ldGhvZHNcbiAgICB2YXIgb3JpZ2luYWwgPSB7XG4gICAgICBzY3JvbGw6IHcuc2Nyb2xsIHx8IHcuc2Nyb2xsVG8sXG4gICAgICBzY3JvbGxCeTogdy5zY3JvbGxCeSxcbiAgICAgIGVsZW1lbnRTY3JvbGw6IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCB8fCBzY3JvbGxFbGVtZW50LFxuICAgICAgc2Nyb2xsSW50b1ZpZXc6IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3XG4gICAgfTtcblxuICAgIC8vIGRlZmluZSB0aW1pbmcgbWV0aG9kXG4gICAgdmFyIG5vdyA9XG4gICAgICB3LnBlcmZvcm1hbmNlICYmIHcucGVyZm9ybWFuY2Uubm93XG4gICAgICAgID8gdy5wZXJmb3JtYW5jZS5ub3cuYmluZCh3LnBlcmZvcm1hbmNlKVxuICAgICAgICA6IERhdGUubm93O1xuXG4gICAgLyoqXG4gICAgICogaW5kaWNhdGVzIGlmIGEgdGhlIGN1cnJlbnQgYnJvd3NlciBpcyBtYWRlIGJ5IE1pY3Jvc29mdFxuICAgICAqIEBtZXRob2QgaXNNaWNyb3NvZnRCcm93c2VyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJBZ2VudFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWljcm9zb2Z0QnJvd3Nlcih1c2VyQWdlbnQpIHtcbiAgICAgIHZhciB1c2VyQWdlbnRQYXR0ZXJucyA9IFsnTVNJRSAnLCAnVHJpZGVudC8nLCAnRWRnZS8nXTtcblxuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodXNlckFnZW50UGF0dGVybnMuam9pbignfCcpKS50ZXN0KHVzZXJBZ2VudCk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBJRSBoYXMgcm91bmRpbmcgYnVnIHJvdW5kaW5nIGRvd24gY2xpZW50SGVpZ2h0IGFuZCBjbGllbnRXaWR0aCBhbmRcbiAgICAgKiByb3VuZGluZyB1cCBzY3JvbGxIZWlnaHQgYW5kIHNjcm9sbFdpZHRoIGNhdXNpbmcgZmFsc2UgcG9zaXRpdmVzXG4gICAgICogb24gaGFzU2Nyb2xsYWJsZVNwYWNlXG4gICAgICovXG4gICAgdmFyIFJPVU5ESU5HX1RPTEVSQU5DRSA9IGlzTWljcm9zb2Z0QnJvd3Nlcih3Lm5hdmlnYXRvci51c2VyQWdlbnQpID8gMSA6IDA7XG5cbiAgICAvKipcbiAgICAgKiBjaGFuZ2VzIHNjcm9sbCBwb3NpdGlvbiBpbnNpZGUgYW4gZWxlbWVudFxuICAgICAqIEBtZXRob2Qgc2Nyb2xsRWxlbWVudFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNjcm9sbEVsZW1lbnQoeCwgeSkge1xuICAgICAgdGhpcy5zY3JvbGxMZWZ0ID0geDtcbiAgICAgIHRoaXMuc2Nyb2xsVG9wID0geTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm5zIHJlc3VsdCBvZiBhcHBseWluZyBlYXNlIG1hdGggZnVuY3Rpb24gdG8gYSBudW1iZXJcbiAgICAgKiBAbWV0aG9kIGVhc2VcbiAgICAgKiBAcGFyYW0ge051bWJlcn0ga1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZWFzZShrKSB7XG4gICAgICByZXR1cm4gMC41ICogKDEgLSBNYXRoLmNvcyhNYXRoLlBJICogaykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhIHNtb290aCBiZWhhdmlvciBzaG91bGQgYmUgYXBwbGllZFxuICAgICAqIEBtZXRob2Qgc2hvdWxkQmFpbE91dFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gZmlyc3RBcmdcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG91bGRCYWlsT3V0KGZpcnN0QXJnKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGZpcnN0QXJnID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBmaXJzdEFyZyAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgZmlyc3RBcmcuYmVoYXZpb3IgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBmaXJzdEFyZy5iZWhhdmlvciA9PT0gJ2F1dG8nIHx8XG4gICAgICAgIGZpcnN0QXJnLmJlaGF2aW9yID09PSAnaW5zdGFudCdcbiAgICAgICkge1xuICAgICAgICAvLyBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gb2JqZWN0L251bGxcbiAgICAgICAgLy8gb3IgYmVoYXZpb3IgaXMgYXV0bywgaW5zdGFudCBvciB1bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZmlyc3RBcmcgPT09ICdvYmplY3QnICYmIGZpcnN0QXJnLmJlaGF2aW9yID09PSAnc21vb3RoJykge1xuICAgICAgICAvLyBmaXJzdCBhcmd1bWVudCBpcyBhbiBvYmplY3QgYW5kIGJlaGF2aW9yIGlzIHNtb290aFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIHRocm93IGVycm9yIHdoZW4gYmVoYXZpb3IgaXMgbm90IHN1cHBvcnRlZFxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ2JlaGF2aW9yIG1lbWJlciBvZiBTY3JvbGxPcHRpb25zICcgK1xuICAgICAgICAgIGZpcnN0QXJnLmJlaGF2aW9yICtcbiAgICAgICAgICAnIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciBlbnVtZXJhdGlvbiBTY3JvbGxCZWhhdmlvci4nXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhbiBlbGVtZW50IGhhcyBzY3JvbGxhYmxlIHNwYWNlIGluIHRoZSBwcm92aWRlZCBheGlzXG4gICAgICogQG1ldGhvZCBoYXNTY3JvbGxhYmxlU3BhY2VcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF4aXNcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNTY3JvbGxhYmxlU3BhY2UoZWwsIGF4aXMpIHtcbiAgICAgIGlmIChheGlzID09PSAnWScpIHtcbiAgICAgICAgcmV0dXJuIGVsLmNsaWVudEhlaWdodCArIFJPVU5ESU5HX1RPTEVSQU5DRSA8IGVsLnNjcm9sbEhlaWdodDtcbiAgICAgIH1cblxuICAgICAgaWYgKGF4aXMgPT09ICdYJykge1xuICAgICAgICByZXR1cm4gZWwuY2xpZW50V2lkdGggKyBST1VORElOR19UT0xFUkFOQ0UgPCBlbC5zY3JvbGxXaWR0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYW4gZWxlbWVudCBoYXMgYSBzY3JvbGxhYmxlIG92ZXJmbG93IHByb3BlcnR5IGluIHRoZSBheGlzXG4gICAgICogQG1ldGhvZCBjYW5PdmVyZmxvd1xuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXhpc1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbk92ZXJmbG93KGVsLCBheGlzKSB7XG4gICAgICB2YXIgb3ZlcmZsb3dWYWx1ZSA9IHcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbClbJ292ZXJmbG93JyArIGF4aXNdO1xuXG4gICAgICByZXR1cm4gb3ZlcmZsb3dWYWx1ZSA9PT0gJ2F1dG8nIHx8IG92ZXJmbG93VmFsdWUgPT09ICdzY3JvbGwnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhbiBlbGVtZW50IGNhbiBiZSBzY3JvbGxlZCBpbiBlaXRoZXIgYXhpc1xuICAgICAqIEBtZXRob2QgaXNTY3JvbGxhYmxlXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBheGlzXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTY3JvbGxhYmxlKGVsKSB7XG4gICAgICB2YXIgaXNTY3JvbGxhYmxlWSA9IGhhc1Njcm9sbGFibGVTcGFjZShlbCwgJ1knKSAmJiBjYW5PdmVyZmxvdyhlbCwgJ1knKTtcbiAgICAgIHZhciBpc1Njcm9sbGFibGVYID0gaGFzU2Nyb2xsYWJsZVNwYWNlKGVsLCAnWCcpICYmIGNhbk92ZXJmbG93KGVsLCAnWCcpO1xuXG4gICAgICByZXR1cm4gaXNTY3JvbGxhYmxlWSB8fCBpc1Njcm9sbGFibGVYO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZpbmRzIHNjcm9sbGFibGUgcGFyZW50IG9mIGFuIGVsZW1lbnRcbiAgICAgKiBAbWV0aG9kIGZpbmRTY3JvbGxhYmxlUGFyZW50XG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEByZXR1cm5zIHtOb2RlfSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRTY3JvbGxhYmxlUGFyZW50KGVsKSB7XG4gICAgICB3aGlsZSAoZWwgIT09IGQuYm9keSAmJiBpc1Njcm9sbGFibGUoZWwpID09PSBmYWxzZSkge1xuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGUgfHwgZWwuaG9zdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNlbGYgaW52b2tlZCBmdW5jdGlvbiB0aGF0LCBnaXZlbiBhIGNvbnRleHQsIHN0ZXBzIHRocm91Z2ggc2Nyb2xsaW5nXG4gICAgICogQG1ldGhvZCBzdGVwXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0ZXAoY29udGV4dCkge1xuICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHZhciBjdXJyZW50WDtcbiAgICAgIHZhciBjdXJyZW50WTtcbiAgICAgIHZhciBlbGFwc2VkID0gKHRpbWUgLSBjb250ZXh0LnN0YXJ0VGltZSkgLyBTQ1JPTExfVElNRTtcblxuICAgICAgLy8gYXZvaWQgZWxhcHNlZCB0aW1lcyBoaWdoZXIgdGhhbiBvbmVcbiAgICAgIGVsYXBzZWQgPSBlbGFwc2VkID4gMSA/IDEgOiBlbGFwc2VkO1xuXG4gICAgICAvLyBhcHBseSBlYXNpbmcgdG8gZWxhcHNlZCB0aW1lXG4gICAgICB2YWx1ZSA9IGVhc2UoZWxhcHNlZCk7XG5cbiAgICAgIGN1cnJlbnRYID0gY29udGV4dC5zdGFydFggKyAoY29udGV4dC54IC0gY29udGV4dC5zdGFydFgpICogdmFsdWU7XG4gICAgICBjdXJyZW50WSA9IGNvbnRleHQuc3RhcnRZICsgKGNvbnRleHQueSAtIGNvbnRleHQuc3RhcnRZKSAqIHZhbHVlO1xuXG4gICAgICBjb250ZXh0Lm1ldGhvZC5jYWxsKGNvbnRleHQuc2Nyb2xsYWJsZSwgY3VycmVudFgsIGN1cnJlbnRZKTtcblxuICAgICAgLy8gc2Nyb2xsIG1vcmUgaWYgd2UgaGF2ZSBub3QgcmVhY2hlZCBvdXIgZGVzdGluYXRpb25cbiAgICAgIGlmIChjdXJyZW50WCAhPT0gY29udGV4dC54IHx8IGN1cnJlbnRZICE9PSBjb250ZXh0LnkpIHtcbiAgICAgICAgdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcC5iaW5kKHcsIGNvbnRleHQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzY3JvbGxzIHdpbmRvdyBvciBlbGVtZW50IHdpdGggYSBzbW9vdGggYmVoYXZpb3JcbiAgICAgKiBAbWV0aG9kIHNtb290aFNjcm9sbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fE5vZGV9IGVsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc21vb3RoU2Nyb2xsKGVsLCB4LCB5KSB7XG4gICAgICB2YXIgc2Nyb2xsYWJsZTtcbiAgICAgIHZhciBzdGFydFg7XG4gICAgICB2YXIgc3RhcnRZO1xuICAgICAgdmFyIG1ldGhvZDtcbiAgICAgIHZhciBzdGFydFRpbWUgPSBub3coKTtcblxuICAgICAgLy8gZGVmaW5lIHNjcm9sbCBjb250ZXh0XG4gICAgICBpZiAoZWwgPT09IGQuYm9keSkge1xuICAgICAgICBzY3JvbGxhYmxlID0gdztcbiAgICAgICAgc3RhcnRYID0gdy5zY3JvbGxYIHx8IHcucGFnZVhPZmZzZXQ7XG4gICAgICAgIHN0YXJ0WSA9IHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0O1xuICAgICAgICBtZXRob2QgPSBvcmlnaW5hbC5zY3JvbGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY3JvbGxhYmxlID0gZWw7XG4gICAgICAgIHN0YXJ0WCA9IGVsLnNjcm9sbExlZnQ7XG4gICAgICAgIHN0YXJ0WSA9IGVsLnNjcm9sbFRvcDtcbiAgICAgICAgbWV0aG9kID0gc2Nyb2xsRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgLy8gc2Nyb2xsIGxvb3Bpbmcgb3ZlciBhIGZyYW1lXG4gICAgICBzdGVwKHtcbiAgICAgICAgc2Nyb2xsYWJsZTogc2Nyb2xsYWJsZSxcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lLFxuICAgICAgICBzdGFydFg6IHN0YXJ0WCxcbiAgICAgICAgc3RhcnRZOiBzdGFydFksXG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE9SSUdJTkFMIE1FVEhPRFMgT1ZFUlJJREVTXG4gICAgLy8gdy5zY3JvbGwgYW5kIHcuc2Nyb2xsVG9cbiAgICB3LnNjcm9sbCA9IHcuc2Nyb2xsVG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIGFjdGlvbiB3aGVuIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkXG4gICAgICBpZiAoYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pID09PSB0cnVlKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbC5jYWxsKFxuICAgICAgICAgIHcsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMF0ubGVmdFxuICAgICAgICAgICAgOiB0eXBlb2YgYXJndW1lbnRzWzBdICE9PSAnb2JqZWN0J1xuICAgICAgICAgICAgICA/IGFyZ3VtZW50c1swXVxuICAgICAgICAgICAgICA6IHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgIC8vIHVzZSB0b3AgcHJvcCwgc2Vjb25kIGFyZ3VtZW50IGlmIHByZXNlbnQgb3IgZmFsbGJhY2sgdG8gc2Nyb2xsWVxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMF0udG9wXG4gICAgICAgICAgICA6IGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gYXJndW1lbnRzWzFdXG4gICAgICAgICAgICAgIDogdy5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXRcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICB3LFxuICAgICAgICBkLmJvZHksXG4gICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLmxlZnRcbiAgICAgICAgICA6IHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0LFxuICAgICAgICBhcmd1bWVudHNbMF0udG9wICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLnRvcFxuICAgICAgICAgIDogdy5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXRcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIHcuc2Nyb2xsQnlcbiAgICB3LnNjcm9sbEJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBvcmlnaW5hbC5zY3JvbGxCeS5jYWxsKFxuICAgICAgICAgIHcsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMF0ubGVmdFxuICAgICAgICAgICAgOiB0eXBlb2YgYXJndW1lbnRzWzBdICE9PSAnb2JqZWN0JyA/IGFyZ3VtZW50c1swXSA6IDAsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGFyZ3VtZW50c1swXS50b3BcbiAgICAgICAgICAgIDogYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgdyxcbiAgICAgICAgZC5ib2R5LFxuICAgICAgICB+fmFyZ3VtZW50c1swXS5sZWZ0ICsgKHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0KSxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0udG9wICsgKHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0KVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsIGFuZCBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxUb1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCA9IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbFRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBpZiBvbmUgbnVtYmVyIGlzIHBhc3NlZCwgdGhyb3cgZXJyb3IgdG8gbWF0Y2ggRmlyZWZveCBpbXBsZW1lbnRhdGlvblxuICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ251bWJlcicgJiYgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1ZhbHVlIGNvdWxkIG5vdCBiZSBjb252ZXJ0ZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9yaWdpbmFsLmVsZW1lbnRTY3JvbGwuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIC8vIHVzZSBsZWZ0IHByb3AsIGZpcnN0IG51bWJlciBhcmd1bWVudCBvciBmYWxsYmFjayB0byBzY3JvbGxMZWZ0XG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS5sZWZ0XG4gICAgICAgICAgICA6IHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdvYmplY3QnID8gfn5hcmd1bWVudHNbMF0gOiB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgICAgLy8gdXNlIHRvcCBwcm9wLCBzZWNvbmQgYXJndW1lbnQgb3IgZmFsbGJhY2sgdG8gc2Nyb2xsVG9wXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLnRvcFxuICAgICAgICAgICAgOiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IH5+YXJndW1lbnRzWzFdIDogdGhpcy5zY3JvbGxUb3BcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBsZWZ0ID0gYXJndW1lbnRzWzBdLmxlZnQ7XG4gICAgICB2YXIgdG9wID0gYXJndW1lbnRzWzBdLnRvcDtcblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHR5cGVvZiBsZWZ0ID09PSAndW5kZWZpbmVkJyA/IHRoaXMuc2Nyb2xsTGVmdCA6IH5+bGVmdCxcbiAgICAgICAgdHlwZW9mIHRvcCA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLnNjcm9sbFRvcCA6IH5+dG9wXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxCeVxuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSA9PT0gdHJ1ZSkge1xuICAgICAgICBvcmlnaW5hbC5lbGVtZW50U2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLmxlZnQgKyB0aGlzLnNjcm9sbExlZnRcbiAgICAgICAgICAgIDogfn5hcmd1bWVudHNbMF0gKyB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLnRvcCArIHRoaXMuc2Nyb2xsVG9wXG4gICAgICAgICAgICA6IH5+YXJndW1lbnRzWzFdICsgdGhpcy5zY3JvbGxUb3BcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2Nyb2xsKHtcbiAgICAgICAgbGVmdDogfn5hcmd1bWVudHNbMF0ubGVmdCArIHRoaXMuc2Nyb2xsTGVmdCxcbiAgICAgICAgdG9wOiB+fmFyZ3VtZW50c1swXS50b3AgKyB0aGlzLnNjcm9sbFRvcCxcbiAgICAgICAgYmVoYXZpb3I6IGFyZ3VtZW50c1swXS5iZWhhdmlvclxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3XG4gICAgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkgPT09IHRydWUpIHtcbiAgICAgICAgb3JpZ2luYWwuc2Nyb2xsSW50b1ZpZXcuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGFyZ3VtZW50c1swXVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgdmFyIHNjcm9sbGFibGVQYXJlbnQgPSBmaW5kU2Nyb2xsYWJsZVBhcmVudCh0aGlzKTtcbiAgICAgIHZhciBwYXJlbnRSZWN0cyA9IHNjcm9sbGFibGVQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgY2xpZW50UmVjdHMgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAoc2Nyb2xsYWJsZVBhcmVudCAhPT0gZC5ib2R5KSB7XG4gICAgICAgIC8vIHJldmVhbCBlbGVtZW50IGluc2lkZSBwYXJlbnRcbiAgICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBzY3JvbGxhYmxlUGFyZW50LFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQuc2Nyb2xsTGVmdCArIGNsaWVudFJlY3RzLmxlZnQgLSBwYXJlbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQuc2Nyb2xsVG9wICsgY2xpZW50UmVjdHMudG9wIC0gcGFyZW50UmVjdHMudG9wXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gcmV2ZWFsIHBhcmVudCBpbiB2aWV3cG9ydCB1bmxlc3MgaXMgZml4ZWRcbiAgICAgICAgaWYgKHcuZ2V0Q29tcHV0ZWRTdHlsZShzY3JvbGxhYmxlUGFyZW50KS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICAgIHcuc2Nyb2xsQnkoe1xuICAgICAgICAgICAgbGVmdDogcGFyZW50UmVjdHMubGVmdCxcbiAgICAgICAgICAgIHRvcDogcGFyZW50UmVjdHMudG9wLFxuICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJldmVhbCBlbGVtZW50IGluIHZpZXdwb3J0XG4gICAgICAgIHcuc2Nyb2xsQnkoe1xuICAgICAgICAgIGxlZnQ6IGNsaWVudFJlY3RzLmxlZnQsXG4gICAgICAgICAgdG9wOiBjbGllbnRSZWN0cy50b3AsXG4gICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gY29tbW9uanNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHsgcG9seWZpbGw6IHBvbHlmaWxsIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gZ2xvYmFsXG4gICAgcG9seWZpbGwoKTtcbiAgfVxuXG59KCkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGF0YS9kYXRhLmNzdj92PWRkZGExMFwiOyIsImltcG9ydCBFbGVtZW50IGZyb20gJ0BVSS9lbGVtZW50JztcbmltcG9ydCAnQEF1dG9Db21wbGV0ZS9jc3MvYXV0b0NvbXBsZXRlLmNzcyc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCAnLi90aXBweS1zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG5pbXBvcnQgQ29tcGFyaXNvblRleHQgZnJvbSAnQFByb2plY3QvY29tcG9uZW50cy9jb21wYXJpc29uL3RleHQnO1xuaW1wb3J0IENvbXBhcmlzb25DaGFydCBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2NvbXBhcmlzb24vY2hhcnQnO1xuaW1wb3J0IEF1dG9Db21wbGV0ZSBmcm9tICdAQXV0b0NvbXBsZXRlL2pzL2F1dG9Db21wbGV0ZS5qcyc7XG5pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG5pbXBvcnQgdGlwcHkgZnJvbSAndGlwcHkuanMnO1xuaW1wb3J0IHsgR1RNUHVzaCB9IGZyb20gJ0BVdGlscyc7XG5cbmNvbnN0IGluaXRpYWxDb21wYXJlID0gWydVUycsJ0FMJ107XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGFyaXNvbiBleHRlbmRzIEVsZW1lbnQge1xuICAgIHByZXJlbmRlcigpeyAvLyB0aGlzIHByZXJlbmRlciBpcyBjYWxsZWQgYXMgcGFydCBvZiB0aGUgc3VwZXIgY29uc3RydWN0b3JcbiAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIHZpZXcgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiBcbiAgICAgICAgdGhpcy5jb21wYXJpc29ucyA9IFtdO1xuICAgICAgICAvLyBmaXJzdCBsb29wIHRocm91Z2ggdG8gaW5zdGFudGlhdGUgdGhlIENvbXBhcmlzb25zLiBpZiBwcmVyZW5kZXJlZCwgY29tcGFyaXNvbi5lbCB3aWxsIGJlIHRoZSByZW5kZXJzIGh0bWwuIGlmIG5vdCwgaXQgd2lsbCBiZSBjcmVhdGVkXG4gICAgICAgIHRoaXMubW9kZWwuZ3JvdXBzLmZvckVhY2goKGdyb3VwLCBpKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLnR5cGVzTmVzdGVkW2ldLnZhbHVlcy5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgdmFyIGNvbXBhcmlzb247XG4gICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS50eXBlID09PSAndGV4dCcgKXtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyaXNvbiA9IHRoaXMucGFyZW50LmNyZWF0ZUNvbXBvbmVudCh0aGlzLm1vZGVsLCBDb21wYXJpc29uVGV4dCwgYGRpdi5qcy10ZXh0LWNvbXBhcmUtJHt2YWx1ZS5maWVsZH1gLCB7cmVyZW5kZXJPbkRhdGFNaXNtYXRjaDogdHJ1ZSwgcGFyZW50OiB0aGlzLCBkYXRhOiB7Y29tcGFyaXNvbjogaW5pdGlhbENvbXBhcmUsIGZpZWxkOiB2YWx1ZS5maWVsZH19KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gdGhpcy5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIENvbXBhcmlzb25DaGFydCwgYGRpdi5qcy10ZXh0LWNvbXBhcmUtJHt2YWx1ZS5maWVsZH1gLCB7cmVyZW5kZXJPbkRhdGFNaXNtYXRjaDogdHJ1ZSwgcGFyZW50OiB0aGlzLCBkYXRhOiB7Y29tcGFyaXNvbjogaW5pdGlhbENvbXBhcmUsIGZpZWxkOiB2YWx1ZS5maWVsZH19KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jb21wYXJpc29ucy5wdXNoKGNvbXBhcmlzb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goLi4udGhpcy5jb21wYXJpc29ucyk7XG5cbiAgICAgICAgLy90aGVuIGVpdGhlciByZXR1cm4gdGhlIHByZW5kZXJlZCBET00gZWxlbWVudCBvciBjcmVhdGUgaXQsIGFwcGVuZGluZyB0aGUgRE9NIGVsZW1lbnRzIGZyb20gdGhlIGNvbXBhcmlzb25zIGluc3RhbnRpYXRlZCBhYm92ZSBcblxuICAgICAgICAvL3RoaXMuY2hpbGRyZW4gPSBbXTsgYWxyZWFkeSBzZXQgYXMgcGFydCBvZiBjcmVhdGVDb21wb25lbnQgbWV0aG9kXG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXc7IC8vIGlmIHByZXJlbmRlcmVkIGFuZCBubyBuZWVkIHRvIHJlbmRlciAobm8gZGF0YSBtaXNtYXRjaClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGNvbXBvdW5kSW5kZXggPSAwO1xuICAgICAgICB0aGlzLm1vZGVsLmdyb3Vwcy5mb3JFYWNoKChncm91cCwgaSkgPT4ge1xuICAgICAgICAgICAgdmFyIGdyb3VwRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBncm91cERpdi5jbGFzc0xpc3QuYWRkKHNbZ3JvdXAuY2xlYW5TdHJpbmcoKV0pO1xuICAgICAgICAgICAgZ3JvdXBEaXYuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgYDxoMyBjbGFzcz1cIiR7cy5ncm91cEhlYWRlcn1cIj4ke2dyb3VwfTwvaDM+YCk7XG4gICAgICAgICAgICB2YXIgdHlwZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdHlwZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMudHlwZUNvbnRhaW5lciwgc1tncm91cC5jbGVhblN0cmluZygpXSk7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLnR5cGVzTmVzdGVkW2ldLnZhbHVlcy5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgdHlwZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOyBcbiAgICAgICAgICAgICAgICB0eXBlRGl2LmNsYXNzTGlzdC5hZGQocy50eXBlRGl2LCBzW3ZhbHVlLmZpZWxkXSk7XG4gICAgICAgICAgICAgICAgdHlwZURpdi5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBgPGg0IGNsYXNzPVwiJHtzLnR5cGVIZWFkZXJ9ICR7IHZhbHVlLnRvb2x0aXAgPyBzLndpdGhUb29sdGlwIDogJ3dpdGhvdXRUb29sdGlwJyB9XCIgZGF0YS1maWVsZD1cIiR7dmFsdWUuZmllbGR9XCIgZGF0YS1jb250ZW50PVwiJHt2YWx1ZS50b29sdGlwID8gdmFsdWUudG9vbHRpcCA6ICcnfVwiPiR7dmFsdWUubGFiZWx9PC9oND5gKTtcbiAgICAgICAgICAgICAgICB0eXBlRGl2LmFwcGVuZENoaWxkKHRoaXMuY29tcGFyaXNvbnNbY29tcG91bmRJbmRleF0uZWwpO1xuICAgICAgICAgICAgICAgIGNvbXBvdW5kSW5kZXgrKztcbiAgICAgICAgICAgICAgICB0eXBlQ29udGFpbmVyLmFwcGVuZENoaWxkKHR5cGVEaXYpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGdyb3VwRGl2LmFwcGVuZENoaWxkKHR5cGVDb250YWluZXIpO1xuICAgICAgICAgICAgdmlldy5hcHBlbmRDaGlsZChncm91cERpdik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG4gICAgcmFuZG9taXplKCl7XG4gICAgICAgIGZ1bmN0aW9uIHJhbmRvbUludEZyb21JbnRlcnZhbChtaW4sbWF4KXsgLy8gbWluIGFuZCBtYXggaW5jbHVkZWQgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzcyMjgzMjJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKG1heC1taW4rMSkrbWluKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RhdGVzID0gdGhpcy5tb2RlbC5kYXRhLm1hcChkID0+IGQuY29kZSk7XG4gICAgICAgIHZhciBpbmRleCA9IHN0YXRlcy5pbmRleE9mKCdVUycpO1xuICAgICAgICBzdGF0ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgUy5zZXRTdGF0ZSgnY29tcGFyZS4xJywgc3RhdGVzW3JhbmRvbUludEZyb21JbnRlcnZhbCgwLCBzdGF0ZXMubGVuZ3RoIC0xKV0pO1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUF1dG9jb21wbGV0ZXMoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplVG9vbHRpcHMoKTtcbiAgICAgICAgUFMuc2V0U3VicyhbXG4gICAgICAgICAgICBbJ2NvbXBhcmUnLCAobXNnLGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShtc2csIGRhdGEpOyAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgfV1cbiAgICAgICAgXSk7XG4gICAgICAgIGlmICggIXdpbmRvdy5JU19QUkVSRU5ERVJJTkcgKXtcbiAgICAgICAgIC8vICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgIHRoaXMucmFuZG9taXplKCk7XG4gICAgICAgICAvLyAgIH0sMTAwMCk7XG4gICAgICAgICB9XG4gICAgfVxuICAgIGluaXRpYWxpemVUb29sdGlwcygpe1xuICAgICAgICB2YXIgZWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLndpdGhUb29sdGlwKSxcbiAgICAgICAgICAgIF90aGlzID0gdGhpcztcbiAgICAgICAgXG4gICAgICAgIHRpcHB5KGVscyx7XG4gICAgICAgICAgICBpbnRlcmFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRlbnQocmVmZXJlbmNlKXtcbiAgICAgICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmsgPSBfdGhpcy5wYXJlbnQucmV0dXJuTW9yZUxpbmsocmVmZXJlbmNlLmRhdGFzZXQuZmllbGQpO1xuICAgICAgICAgICAgICAgIGRpdi50ZXh0Q29udGVudCA9IHJlZmVyZW5jZS5kYXRhc2V0LmNvbnRlbnQgKyAnICc7XG4gICAgICAgICAgICAgICAgaWYgKCBsaW5rICkge1xuICAgICAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoX3RoaXMucGFyZW50LnJldHVybk1vcmVMaW5rKHJlZmVyZW5jZS5kYXRhc2V0LmZpZWxkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGUobXNnLGRhdGEpe1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLCBtc2csIGRhdGEpO1xuICAgICAgICB0aGlzLmNvbXBhcmlzb25zLmZvckVhY2goY29tcGFyaXNvbiA9PiB7XG4gICAgICAgICAgICBjb21wYXJpc29uLnVwZGF0ZShtc2csIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbXBhcmUtaW5wdXQtJyArIG1zZy5zcGxpdCgnLicpWzFdKTtcbiAgICAgICAgaW5wdXQudmFsdWUgPSB0aGlzLm1vZGVsLmRhdGEuZmluZChkID0+IGQuY29kZSA9PT0gZGF0YSkuc3RhdGU7XG4gICAgfVxuICAgIGluaXRpYWxpemVBdXRvY29tcGxldGVzKCl7XG4gICAgICAgIFxuICAgICAgICB2YXIgc3JjID0gdGhpcy5tb2RlbC5kYXRhLm1hcChkID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZC5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogZC5jb2RlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAga2V5ID0gJ3N0YXRlJztcbiAgICAgICAgdmFyIGF1dG9Db21wbGV0ZXNBcmVEaXJ0eSA9IFtmYWxzZSxmYWxzZV07XG4gICAgICAgIGZ1bmN0aW9uIHN1Z2dlc3Rpb25Nb3VzZUhhbmRsZXIoZSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLGUpO1xuICAgICAgICAgICAgaWYgKCBlLnR5cGUgPT09ICdtb3VzZWVudGVyJyApe1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggZS50eXBlID09PSAnY2xpY2snICl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5wYXJlbnROb2RlLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5wYXJlbnROb2RlLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmV2ZXJ0VG9QcmV2aW91cyhpbmRleCl7IC8vIHRoaXMgaW4gdGhlIGlucHV0IGVsZW1lbnRcbiAgICAgICAgICAgIHZhciBjdXJyZW50U3RhdGVBYmJyID0gUy5nZXRTdGF0ZSgnY29tcGFyZS4nICsgaW5kZXgpIHx8IGluaXRpYWxDb21wYXJlW2luZGV4XTtcbiAgICAgICAgICAgIHZhciBzdWdnZXN0aW9ucyA9IHRoaXMucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcuYXV0b0NvbXBsZXRlX3Jlc3VsdHNfbGlzdCBsaScpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coY3VycmVudFN0YXRlQWJicik7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gc3JjLmZpbmQocyA9PiBzLmNvZGUgPT09IGN1cnJlbnRTdGF0ZUFiYnIpLnN0YXRlO1xuICAgICAgICAgICAgaWYgKCBzdWdnZXN0aW9uc1swXSApe1xuICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zWzBdLnBhcmVudE5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdXRvQ29tcGxldGVzQXJlRGlydHlbaW5kZXhdID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuXG4gICAgICAgIGZ1bmN0aW9uIHNldE11dGF0aW9uT2JzZXJ2ZXIoaW5kZXgpe1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhdXRvQ29tcGxldGVfd3JhcHBlci0nICsgaW5kZXggKyAnIC5hdXRvQ29tcGxldGVfcmVzdWx0c19saXN0Jyk7XG4gICAgICAgICAgICB2YXIgY29uZmlnID0geyBhdHRyaWJ1dGVzOiBmYWxzZSwgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiBmYWxzZSB9O1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24obXV0YXRpb25MaXN0LCBvYnNlcnZlcil7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobXV0YXRpb25MaXN0LCBvYnNlcnZlcik7XG4gICAgICAgICAgICAgICAgbXV0YXRpb25MaXN0LmZvckVhY2gobXV0YXRpb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgc3VnZ2VzdGlvbk1vdXNlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywwKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvKiAgICBpZiAoIG11dGF0aW9uTGlzdFttdXRhdGlvbkxpc3QubGVuZ3RoIC0gMV0udGFyZ2V0LmNoaWxkcmVuLmxlbmd0aCA+IDAgJiYgIWJvZHlIYXNFdmVudExpc3RlbmVyICl7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYm9keSBjbGljaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJ0VG9QcmV2aW91cy5jYWxsKG11dGF0aW9uLnRhcmdldC5wYXJlbnROb2RlLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spO1xuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgWzAsMV0uZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29tcGFyZS1pbnB1dC0nICsgaW5kZXgpLFxuICAgICAgICAgICAgICAgIHdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXV0b0NvbXBsZXRlX3dyYXBwZXItJyArIGluZGV4KTtcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXV0b0NvbXBsZXRlc0FyZURpcnR5KTtcbiAgICAgICAgICAgICAgICBpZiAoYXV0b0NvbXBsZXRlc0FyZURpcnR5W2luZGV4XSl7XG4gICAgICAgICAgICAgICAgICAgIHJldmVydFRvUHJldmlvdXMuY2FsbChpbnB1dCwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pOyBcbiAgICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ2F1dG9Db21wbGV0ZScsIHNbJ2F1dG9Db21wbGV0ZScgKyBpbmRleF0pO1xuICAgICAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKHNbJ2F1dG9Db21wbGV0ZV93cmFwcGVyLScgKyBpbmRleF0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZXNBcmVEaXJ0eVtpbmRleF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBzdWdnZXN0aW9ucyA9IHRoaXMucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcuYXV0b0NvbXBsZXRlX3Jlc3VsdHNfbGlzdCBsaScpO1xuICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zLmZvckVhY2goc3VnZ2VzdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN1Z2dlc3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHN1Z2dlc3Rpb25Nb3VzZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICBzdWdnZXN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBzdWdnZXN0aW9uTW91c2VIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgdmFyIHN1Z2dlc3Rpb25zID0gdGhpcy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hdXRvQ29tcGxldGVfcmVzdWx0c19saXN0IGxpJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCBlLmtleUNvZGUgPT09IDkgJiYgc3VnZ2VzdGlvbnMubGVuZ3RoID09PSAxICkgeyAvLyB0YWIga2V5XG4gICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy52YWx1ZSAhPT0gc3VnZ2VzdGlvbnNbMF0uZGF0YXNldC5yZXN1bHQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBzdWdnZXN0aW9uc1swXS5kYXRhc2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldmVydFRvUHJldmlvdXMuY2FsbCh0aGlzLCBpbmRleCk7ICAgXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIGUua2V5Q29kZSA9PT0gOSAmJiAoIHN1Z2dlc3Rpb25zLmxlbmd0aCA+IDEgIHx8IHN1Z2dlc3Rpb25zLmxlbmd0aCA9PT0gMCApICkgeyAvLyB0YWIga2V5XG4gICAgICAgICAgICAgICAgICAgIHJldmVydFRvUHJldmlvdXMuY2FsbCh0aGlzLCBpbmRleCk7ICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICggZS5rZXlDb2RlID09PSAxMyAmJiBzdWdnZXN0aW9ucy5sZW5ndGggPT09IDEpIHsgLy8gZW50ZXIga2V5XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBzdWdnZXN0aW9uc1swXS5kYXRhc2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgUy5zZXRTdGF0ZSgnY29tcGFyZS4nICsgaW5kZXgsIHNyYy5maW5kKHMgPT4gcy5zdGF0ZSA9PT0gdGhpcy52YWx1ZSkuY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zWzBdLnBhcmVudE5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZXNBcmVEaXJ0eVtpbmRleF0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzLmJsdXIoKTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IEF1dG9Db21wbGV0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHQ6IHRydWUsICAgICAgICAgICAgICAgICAgICAgICAvLyBIaWdobGlnaHQgbWF0Y2hpbmcgcmVzdWx0cyAgICAgIHwgKE9wdGlvbmFsKVxuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdGlvbjogZmVlZGJhY2sgPT4geyAgICAgICAgICAgICAvLyBBY3Rpb24gc2NyaXB0IG9uU2VsZWN0aW9uIGV2ZW50IHwgKE9wdGlvbmFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZmVlZGJhY2ssIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgR1RNUHVzaChgU3RhdGVEZWJ0fENvbXBhcmUtJHtpbmRleH18JHtmZWVkYmFjay5zZWxlY3Rpb24uY29kZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFMuc2V0U3RhdGUoJ2NvbXBhcmUuJyArIGluZGV4LCBmZWVkYmFjay5zZWxlY3Rpb24uY29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGZlZWRiYWNrLnNlbGVjdGlvbi5zdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGVzQXJlRGlydHlbaW5kZXhdID0gZmFsc2U7XG4gIC8vICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCBmZWVkYmFjay5zZWxlY3Rpb24uc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwbGFjZUhvbGRlcjogJ1NlbGVjdCBzdGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHNMaXN0OiB7ICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW5kZXJlZCByZXN1bHRzIGxpc3Qgb2JqZWN0ICAgICAgfCAoT3B0aW9uYWwpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6ICgpID0+ICdhdXRvQ29tcGxldGVfcmVzdWx0c19saXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29tcGFyZS1pbnB1dC0nICsgaW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhZnRlcmVuZCdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoRW5naW5lOiBcInN0cmljdFwiLCAgICAgICAgICAgICAgLy8gU2VhcmNoIEVuZ2luZSB0eXBlL21vZGUgICAgICAgICAgIHwgKE9wdGlvbmFsKVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJyNjb21wYXJlLWlucHV0LScgKyBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkOiAyLCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pbi4gQ2hhcnMgbGVuZ3RoIHRvIHN0YXJ0IEVuZ2luZSB8IChPcHRpb25hbClcbiAgICAgICAgICAgICAgICAgICAgLy9tYXhSZXN1bHRzOiA1LCAgICAgICAgICAgICAgICAgICAgICAgICAvXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBzZXRNdXRhdGlvbk9ic2VydmVyKGluZGV4KTtcbiAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCB0aGlzLm1vZGVsLmRhdGEuZmluZChkID0+IGQuY29kZSA9PT0gaW5pdGlhbENvbXBhcmVbaW5kZXhdKS5zdGF0ZSk7XG4gICAgICAgICAgICAvL2lucHV0LnZhbHVlID0gdGhpcy5tb2RlbC5kYXRhLmZpbmQoZCA9PiBkLmNvZGUgPT09IGluaXRpYWxDb21wYXJlW2luZGV4XSkuc3RhdGU7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmNoaWxkcmVuKTtcbiAgICAgICAgfSk7XG4gICAgfVxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJhdXRvQ29tcGxldGVfd3JhcHBlclwiOlwiYXV0b0NvbXBsZXRlX3dyYXBwZXJcIixcImF1dG9Db21wbGV0ZVwiOlwiYXV0b0NvbXBsZXRlXCIsXCJhdXRvQ29tcGxldGVfcmVzdWx0c19saXN0XCI6XCJhdXRvQ29tcGxldGVfcmVzdWx0c19saXN0XCIsXCJhdXRvQ29tcGxldGVfcmVzdWx0XCI6XCJhdXRvQ29tcGxldGVfcmVzdWx0XCIsXCJhdXRvQ29tcGxldGVfaGlnaGxpZ2h0ZWRcIjpcImF1dG9Db21wbGV0ZV9oaWdobGlnaHRlZFwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiZ3JvdXBIZWFkZXJcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS1ncm91cEhlYWRlclwiLFwidHlwZUNvbnRhaW5lclwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLXR5cGVDb250YWluZXJcIixcImNyZWRpdC1yYXRpbmdcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS1jcmVkaXQtcmF0aW5nXCIsXCJ0eXBlRGl2XCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tdHlwZURpdlwiLFwidHlwZUhlYWRlclwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLXR5cGVIZWFkZXJcIixcImRlYnRfbGltaXRfdHlwZVwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWRlYnRfbGltaXRfdHlwZVwiLFwiY3JlZGl0MjAxNVwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWNyZWRpdDIwMTVcIixcImNyZWRpdDIwMThcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS1jcmVkaXQyMDE4XCIsXCJhdXRvQ29tcGxldGUwXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tYXV0b0NvbXBsZXRlMFwiLFwiYXV0b0NvbXBsZXRlX3dyYXBwZXItMFwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWF1dG9Db21wbGV0ZV93cmFwcGVyLTBcIixcImF1dG9Db21wbGV0ZTFcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS1hdXRvQ29tcGxldGUxXCIsXCJhdXRvQ29tcGxldGVfd3JhcHBlci0xXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tYXV0b0NvbXBsZXRlX3dyYXBwZXItMVwiLFwid2l0aFRvb2x0aXBcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS13aXRoVG9vbHRpcFwifTsiLCJpbXBvcnQgcyBmcm9tICcuLy4uL3N0eWxlcy5zY3NzJztcbmltcG9ydCBDb21wYXJpc29uIGZyb20gJy4uLyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBhcmlzb25UZXh0IGV4dGVuZHMgQ29tcGFyaXNvbiB7XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIHZhciBkaXYgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZGl2O1xuICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm1vZGVsLmRpY3QsIHRoaXMuZGF0YS5maWVsZCk7XG4gICAgICAgIGRpdi5pbm5lckhUTUwgPSB0aGlzLnJldHVyblRlbXBsYXRlKDApICsgdGhpcy5yZXR1cm5UZW1wbGF0ZSgxKTtcbiAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICB9XG4gICAgdXBkYXRlKG1zZywgZGF0YSl7IC8vIHNvbWUgaGVyZSBjb3VsZCBiZSBpbiB0aGUgc3VwZXJcbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQobXNnLnNwbGl0KCcuJylbMV0pO1xuICAgICAgICBjb25zb2xlLmxvZyhpbmRleCk7XG4gICAgICAgIHN1cGVyLnVwZGF0ZShpbmRleCxkYXRhKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcywgaW5kZXgpO1xuICAgICAgICB0aGlzLmVsLmNoaWxkcmVuW2luZGV4XS5mYWRlSW5Db250ZW50KHRoaXMucmV0dXJuVGVtcGxhdGUoaW5kZXgpKTtcbiAgICAgICAgLy90aGlzLmVsLmlubmVySFRNTCA9IHRoaXMucmV0dXJuVGVtcGxhdGUoaW5kZXgpO1xuXG4gICAgfVxuICAgIHJldHVyblRlbXBsYXRlKGkpe1xuICAgICAgICByZXR1cm4gYDxwIGNsYXNzPVwiJHtzLmNoYXJ0TGFiZWx9ICR7cy5jaGFydExhYmVsVGV4dH1cIj4ke3RoaXMubWF0Y2hlc1tpXS5zdGF0ZX06IDxzcGFuIGNsYXNzPVwiJHtzWydjb21wYXJlQ29sb3InICsgKGkgKzEpXX1cIj4ke3RoaXMubW9kZWwuZGljdFt0aGlzLmRhdGEuZmllbGRdICE9PSB1bmRlZmluZWQgPyB0aGlzLm1vZGVsLmRpY3RbdGhpcy5kYXRhLmZpZWxkXVtbdGhpcy5tYXRjaGVzW2ldW3RoaXMuZGF0YS5maWVsZF1dXSA6IHRoaXMubWF0Y2hlc1tpXVt0aGlzLmRhdGEuZmllbGRdfTwvc3Bhbj48L3A+YDtcbiAgICB9XG59XG4gIiwiaW1wb3J0IHMgZnJvbSAnLi8uLi9zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgQ29tcGFyaXNvbiBmcm9tICcuLi8nO1xuaW1wb3J0IEJhciBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2Jhcic7XG5pbXBvcnQgeyBmb3JtYXRWYWx1ZSB9IGZyb20gJ0BQcm9qZWN0L21ldGhvZHMnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBhcmlzb25DaGFydCBleHRlbmRzIENvbXBhcmlzb24ge1xuICAgIHByZXJlbmRlcigpe1xuICAgICAgICB2YXIgZGl2ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIHRoaXMuYmFycyA9IFtdO1xuICAgICAgICBbMCwxXS5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmFycy5wdXNoKHRoaXMucGFyZW50LnBhcmVudC5jcmVhdGVDb21wb25lbnQodGhpcy5tb2RlbCwgQmFyLCBgZGl2LmpzLWJhci1jb21wYXJlLSR7dGhpcy5kYXRhLmZpZWxkfS0ke2luZGV4fWAsIHtyZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXMsIGRhdGE6IHtkOiB0aGlzLm1hdGNoZXNbaW5kZXhdLCBmaWVsZDogdGhpcy5kYXRhLmZpZWxkLCBjb2xvcjogaW5kZXggKyAxfX0pKVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKC4uLnRoaXMuYmFycyk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGRpdjtcbiAgICAgICAgfVxuXG4gICAgICAgIFxuICAgICAgICBkaXYuaW5uZXJIVE1MID0gdGhpcy5yZXR1cm5UZW1wbGF0ZSgpO1xuICAgICAgICBcblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cbiAgICByZXR1cm5UZW1wbGF0ZSgpe1xuICAgICAgICByZXR1cm4gYCBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke3MuY2hhcnRDb250YWluZXJ9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHt0aGlzLnBhcnRpYWxUZW1wbGF0ZSgwKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke3RoaXMucGFydGlhbFRlbXBsYXRlKDEpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgIGA7XG4gICAgfVxuICAgIHJldHVyblRyYW5zbGF0ZVZhbHVlKGluZGV4KXtcbiAgICAgICAgaWYgKCB0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZFt0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZmllbGRdIDwgMCAmJiB0aGlzLm1vZGVsLnR5cGVzLmZpbmQodCA9PiB0LmZpZWxkID09PSB0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZmllbGQpLmNyb3NzZXNaZXJvICl7XG4gICAgICAgICAgICByZXR1cm4gMDsgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgJHsoIHRoaXMuYmFyc1tpbmRleF0ubGluZWFyU2NhbGUodGhpcy5tYXRjaGVzW2luZGV4XSwgdGhpcy5kYXRhLmZpZWxkKSAqIDEwMCkudG9GaXhlZCgxKSB9JWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFydGlhbFRlbXBsYXRlKGluZGV4KXtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cIiR7cy5jaGFydExhYmVsfSAke3NbJ2NoYXJ0TGFiZWwnICsgKGluZGV4ICsgMSldfVwiPlxuICAgICAgICAgICAgICAgICAgICAke3RoaXMubWF0Y2hlc1tpbmRleF0uc3RhdGV9XG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke3MuYmFyQ29udGFpbmVyfSAke3NbJ2JhckNvbnRhaW5lcicgKyAoaW5kZXggKyAxKV19XCI+XG4gICAgICAgICAgICAgICAgICAgICR7dGhpcy5iYXJzW2luZGV4XS5lbC5vdXRlckhUTUx9ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke3MuZGF0YUxhYmVsfVwiIHN0eWxlPVwidHJhbnNmb3JtOiB0cmFuc2xhdGVYKCR7dGhpcy5yZXR1cm5UcmFuc2xhdGVWYWx1ZS5jYWxsKHRoaXMsIGluZGV4KX0pXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAke3RoaXMuZm9ybWF0VmFsdWUodGhpcy5tYXRjaGVzW2luZGV4XSwgdGhpcy5kYXRhLmZpZWxkKS5yZXBsYWNlKCctJywn4oCTJyl9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgIH1cbiAgICBsaW5lYXJTY2FsZShtYXRjaCwgZmllbGQpe1xuICAgICAgICB2YXIgdHlwZU9iamVjdCA9IHRoaXMubW9kZWwudHlwZXMuZmluZCh0ID0+IHQuZmllbGQgPT09IGZpZWxkKSxcbiAgICAgICAgICAgIHNjYWxlID0gKCBtYXRjaFtmaWVsZF0gLSB0eXBlT2JqZWN0Lm1pbiApIC8gdHlwZU9iamVjdC5zcHJlYWQ7XG5cbiAgICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH1cbiAgICBmb3JtYXRWYWx1ZSgpe1xuICAgICAgICByZXR1cm4gZm9ybWF0VmFsdWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO1xuICAgIH1cbiAgICB1cGRhdGUobXNnLCBkYXRhKXtcbiAgICAgICAgY29uc29sZS5sb2cobXNnLGRhdGEpO1xuICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludChtc2cuc3BsaXQoJy4nKVsxXSksXG4gICAgICAgICAgICBkYXRhTGFiZWwgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5kYXRhTGFiZWwpW2luZGV4XTtcbiAgICAgICAgc3VwZXIudXBkYXRlKGluZGV4LGRhdGEpO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgICAgIC8vIHVwZGF0ZSBsYWJlbFxuICAgICAgICB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5jaGFydExhYmVsKVtpbmRleF0uZmFkZUluQ29udGVudCh0aGlzLm1hdGNoZXNbaW5kZXhdLnN0YXRlKTtcbiAgICAgICAgXG4gICAgICAgIC8vdXBkYXRlIGJhcnNcbiAgICAgICAgdGhpcy5jaGlsZHJlbltpbmRleF0uZGF0YS5kID0gdGhpcy5tYXRjaGVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbltpbmRleF0udXBkYXRlKGluZGV4KTtcbiAgICAgICAgY29uc29sZS5sb2coJ0hFUkXigJQnLHRoaXMuY2hpbGRyZW5baW5kZXhdLmRhdGEuZCk7XG4gICAgICAgIC8vdXBkYXRlIGRhdGFMYWJlbFxuICAgICAgICBkYXRhTGFiZWwuZmFkZUluQ29udGVudCh0aGlzLmZvcm1hdFZhbHVlKHRoaXMubWF0Y2hlc1tpbmRleF0sIHRoaXMuZGF0YS5maWVsZCkucmVwbGFjZSgnLScsJ+KAkycpKTtcbiAgICAgICAgZGF0YUxhYmVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7dGhpcy5yZXR1cm5UcmFuc2xhdGVWYWx1ZS5jYWxsKHRoaXMsIGluZGV4KX0pYDtcbiAgICB9XG59XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiYmFyXCI6XCJzcmMtY29tcG9uZW50cy1iYXItLWJhclwiLFwiYmFyQ29sb3IxXCI6XCJzcmMtY29tcG9uZW50cy1iYXItLWJhckNvbG9yMVwiLFwiYmFyQ29sb3IyXCI6XCJzcmMtY29tcG9uZW50cy1iYXItLWJhckNvbG9yMlwiLFwiaXNaZXJvXCI6XCJzcmMtY29tcG9uZW50cy1iYXItLWlzWmVyb1wifTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIChnbG9iYWwuYXV0b0NvbXBsZXRlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cblxuICB2YXIgZGF0YUF0dHJpYnV0ZSA9IFwiZGF0YS1yZXN1bHRcIjtcbiAgdmFyIHNlbGVjdCA9IHtcbiAgICByZXN1bHRzTGlzdDogXCJhdXRvQ29tcGxldGVfcmVzdWx0c19saXN0XCIsXG4gICAgcmVzdWx0OiBcImF1dG9Db21wbGV0ZV9yZXN1bHRcIixcbiAgICBoaWdobGlnaHQ6IFwiYXV0b0NvbXBsZXRlX2hpZ2hsaWdodGVkXCJcbiAgfTtcbiAgdmFyIGdldElucHV0ID0gZnVuY3Rpb24gZ2V0SW5wdXQoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBzZWxlY3RvcigpO1xuICB9O1xuICB2YXIgY3JlYXRlUmVzdWx0c0xpc3QgPSBmdW5jdGlvbiBjcmVhdGVSZXN1bHRzTGlzdChyZW5kZXJSZXN1bHRzKSB7XG4gICAgdmFyIHJlc3VsdHNMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgIGlmIChyZW5kZXJSZXN1bHRzLmNvbnRhaW5lcikge1xuICAgICAgc2VsZWN0LnJlc3VsdHNMaXN0ID0gcmVuZGVyUmVzdWx0cy5jb250YWluZXIocmVzdWx0c0xpc3QpIHx8IHNlbGVjdC5yZXN1bHRzTGlzdDtcbiAgICB9XG4gICAgcmVzdWx0c0xpc3QuY2xhc3NMaXN0LmFkZChzZWxlY3QucmVzdWx0c0xpc3QpO1xuICAgIHJlbmRlclJlc3VsdHMuZGVzdGluYXRpb24uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KHJlbmRlclJlc3VsdHMucG9zaXRpb24sIHJlc3VsdHNMaXN0KTtcbiAgICByZXR1cm4gcmVzdWx0c0xpc3Q7XG4gIH07XG4gIHZhciBoaWdobGlnaHQgPSBmdW5jdGlvbiBoaWdobGlnaHQodmFsdWUpIHtcbiAgICByZXR1cm4gXCI8c3BhbiBjbGFzcz1cIi5jb25jYXQoc2VsZWN0LmhpZ2hsaWdodCwgXCI+XCIpLmNvbmNhdCh2YWx1ZSwgXCI8L3NwYW4+XCIpO1xuICB9O1xuICB2YXIgYWRkUmVzdWx0c1RvTGlzdCA9IGZ1bmN0aW9uIGFkZFJlc3VsdHNUb0xpc3QocmVzdWx0c0xpc3QsIGRhdGFTcmMsIGRhdGFLZXksIGNhbGxiYWNrKSB7XG4gICAgZGF0YVNyYy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCwgcmVjb3JkKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgdmFyIHJlc3VsdFZhbHVlID0gZGF0YVNyY1tyZWNvcmRdLnNvdXJjZVtkYXRhS2V5XSB8fCBkYXRhU3JjW3JlY29yZF0uc291cmNlO1xuICAgICAgcmVzdWx0LnNldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlLCByZXN1bHRWYWx1ZSk7XG4gICAgICByZXN1bHQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc2VsZWN0LnJlc3VsdCk7XG4gICAgICByZXN1bHQuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCIxXCIpO1xuICAgICAgcmVzdWx0LmlubmVySFRNTCA9IGNhbGxiYWNrID8gY2FsbGJhY2soZXZlbnQsIHJlc3VsdCkgOiBldmVudC5tYXRjaCB8fCBldmVudDtcbiAgICAgIHJlc3VsdHNMaXN0LmFwcGVuZENoaWxkKHJlc3VsdCk7XG4gICAgfSk7XG4gIH07XG4gIHZhciBuYXZpZ2F0aW9uID0gZnVuY3Rpb24gbmF2aWdhdGlvbihzZWxlY3RvciwgcmVzdWx0c0xpc3QpIHtcbiAgICB2YXIgaW5wdXQgPSBnZXRJbnB1dChzZWxlY3Rvcik7XG4gICAgdmFyIGZpcnN0ID0gcmVzdWx0c0xpc3QuZmlyc3RDaGlsZDtcbiAgICBkb2N1bWVudC5vbmtleWRvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBhY3RpdmUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgaWYgKGFjdGl2ZSAhPT0gZmlyc3QgJiYgYWN0aXZlICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgYWN0aXZlLnByZXZpb3VzU2libGluZy5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aXZlID09PSBmaXJzdCkge1xuICAgICAgICAgICAgaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgaWYgKGFjdGl2ZSA9PT0gaW5wdXQgJiYgcmVzdWx0c0xpc3QuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmaXJzdC5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aXZlICE9PSByZXN1bHRzTGlzdC5sYXN0Q2hpbGQpIHtcbiAgICAgICAgICAgIGFjdGl2ZS5uZXh0U2libGluZy5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICB2YXIgY2xlYXJSZXN1bHRzID0gZnVuY3Rpb24gY2xlYXJSZXN1bHRzKHJlc3VsdHNMaXN0KSB7XG4gICAgcmV0dXJuIHJlc3VsdHNMaXN0LmlubmVySFRNTCA9IFwiXCI7XG4gIH07XG4gIHZhciBnZXRTZWxlY3Rpb24gPSBmdW5jdGlvbiBnZXRTZWxlY3Rpb24oZmllbGQsIHJlc3VsdHNMaXN0LCBjYWxsYmFjaywgcmVzdWx0c1ZhbHVlcywgZGF0YUtleSkge1xuICAgIHZhciByZXN1bHRzID0gcmVzdWx0c0xpc3QucXVlcnlTZWxlY3RvckFsbChcIi5cIi5jb25jYXQoc2VsZWN0LnJlc3VsdCkpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdHMpLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgW1wibW91c2Vkb3duXCIsIFwia2V5ZG93blwiXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudFR5cGUpIHtcbiAgICAgICAgcmVzdWx0c1tzZWxlY3Rpb25dLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnRUeXBlID09PSBcIm1vdXNlZG93blwiIHx8IGV2ZW50LmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICBjYWxsYmFjayh7XG4gICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgcXVlcnk6IGdldElucHV0KGZpZWxkKS52YWx1ZSxcbiAgICAgICAgICAgICAgcmVzdWx0czogcmVzdWx0c1ZhbHVlcy5tYXAoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQuc291cmNlO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgc2VsZWN0aW9uOiByZXN1bHRzVmFsdWVzLmZpbmQoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc1ZhbHVlID0gdmFsdWUuc291cmNlW2RhdGFLZXldIHx8IHZhbHVlLnNvdXJjZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzVmFsdWUgPT09IGV2ZW50LnRhcmdldC5jbG9zZXN0KFwiLlwiLmNvbmNhdChzZWxlY3QucmVzdWx0KSkuZ2V0QXR0cmlidXRlKGRhdGFBdHRyaWJ1dGUpO1xuICAgICAgICAgICAgICB9KS5zb3VyY2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2xlYXJSZXN1bHRzKHJlc3VsdHNMaXN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIHZhciBhdXRvQ29tcGxldGVWaWV3ID0ge1xuICAgIGdldElucHV0OiBnZXRJbnB1dCxcbiAgICBjcmVhdGVSZXN1bHRzTGlzdDogY3JlYXRlUmVzdWx0c0xpc3QsXG4gICAgaGlnaGxpZ2h0OiBoaWdobGlnaHQsXG4gICAgYWRkUmVzdWx0c1RvTGlzdDogYWRkUmVzdWx0c1RvTGlzdCxcbiAgICBuYXZpZ2F0aW9uOiBuYXZpZ2F0aW9uLFxuICAgIGNsZWFyUmVzdWx0czogY2xlYXJSZXN1bHRzLFxuICAgIGdldFNlbGVjdGlvbjogZ2V0U2VsZWN0aW9uXG4gIH07XG5cbiAgdmFyIGF1dG9Db21wbGV0ZSA9XG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBhdXRvQ29tcGxldGUoY29uZmlnKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgYXV0b0NvbXBsZXRlKTtcbiAgICAgIHRoaXMuc2VsZWN0b3IgPSBjb25maWcuc2VsZWN0b3IgfHwgXCIjYXV0b0NvbXBsZXRlXCI7XG4gICAgICB0aGlzLmRhdGEgPSB7XG4gICAgICAgIHNyYzogZnVuY3Rpb24gc3JjKCkge1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgY29uZmlnLmRhdGEuc3JjID09PSBcImZ1bmN0aW9uXCIgPyBjb25maWcuZGF0YS5zcmMoKSA6IGNvbmZpZy5kYXRhLnNyYztcbiAgICAgICAgfSxcbiAgICAgICAga2V5OiBjb25maWcuZGF0YS5rZXlcbiAgICAgIH07XG4gICAgICB0aGlzLnNlYXJjaEVuZ2luZSA9IGNvbmZpZy5zZWFyY2hFbmdpbmUgPT09IFwibG9vc2VcIiA/IFwibG9vc2VcIiA6IFwic3RyaWN0XCI7XG4gICAgICB0aGlzLnRocmVzaG9sZCA9IGNvbmZpZy50aHJlc2hvbGQgfHwgMDtcbiAgICAgIHRoaXMucmVzdWx0c0xpc3QgPSBhdXRvQ29tcGxldGVWaWV3LmNyZWF0ZVJlc3VsdHNMaXN0KHtcbiAgICAgICAgY29udGFpbmVyOiBjb25maWcucmVzdWx0c0xpc3QgJiYgY29uZmlnLnJlc3VsdHNMaXN0LmNvbnRhaW5lciA/IGNvbmZpZy5yZXN1bHRzTGlzdC5jb250YWluZXIgOiBmYWxzZSxcbiAgICAgICAgZGVzdGluYXRpb246IGNvbmZpZy5yZXN1bHRzTGlzdCAmJiBjb25maWcucmVzdWx0c0xpc3QuZGVzdGluYXRpb24gPyBjb25maWcucmVzdWx0c0xpc3QuZGVzdGluYXRpb24gOiBhdXRvQ29tcGxldGVWaWV3LmdldElucHV0KHRoaXMuc2VsZWN0b3IpLFxuICAgICAgICBwb3NpdGlvbjogY29uZmlnLnJlc3VsdHNMaXN0ICYmIGNvbmZpZy5yZXN1bHRzTGlzdC5wb3NpdGlvbiA/IGNvbmZpZy5yZXN1bHRzTGlzdC5wb3NpdGlvbiA6IFwiYWZ0ZXJlbmRcIlxuICAgICAgfSk7XG4gICAgICB0aGlzLnBsYWNlSG9sZGVyID0gY29uZmlnLnBsYWNlSG9sZGVyO1xuICAgICAgdGhpcy5tYXhSZXN1bHRzID0gY29uZmlnLm1heFJlc3VsdHMgfHwgNTtcbiAgICAgIHRoaXMucmVzdWx0SXRlbSA9IGNvbmZpZy5yZXN1bHRJdGVtO1xuICAgICAgdGhpcy5oaWdobGlnaHQgPSBjb25maWcuaGlnaGxpZ2h0IHx8IGZhbHNlO1xuICAgICAgdGhpcy5vblNlbGVjdGlvbiA9IGNvbmZpZy5vblNlbGVjdGlvbjtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cbiAgICBfY3JlYXRlQ2xhc3MoYXV0b0NvbXBsZXRlLCBbe1xuICAgICAga2V5OiBcInNlYXJjaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlYXJjaChxdWVyeSwgcmVjb3JkKSB7XG4gICAgICAgIHZhciBoaWdobGlnaHQgPSB0aGlzLmhpZ2hsaWdodDtcbiAgICAgICAgdmFyIHJlY29yZExvd2VyQ2FzZSA9IHJlY29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodGhpcy5zZWFyY2hFbmdpbmUgPT09IFwibG9vc2VcIikge1xuICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkucmVwbGFjZSgvIC9nLCBcIlwiKTtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBbXTtcbiAgICAgICAgICB2YXIgc2VhcmNoUG9zaXRpb24gPSAwO1xuICAgICAgICAgIGZvciAodmFyIG51bWJlciA9IDA7IG51bWJlciA8IHJlY29yZExvd2VyQ2FzZS5sZW5ndGg7IG51bWJlcisrKSB7XG4gICAgICAgICAgICB2YXIgcmVjb3JkQ2hhciA9IHJlY29yZExvd2VyQ2FzZVtudW1iZXJdO1xuICAgICAgICAgICAgaWYgKHNlYXJjaFBvc2l0aW9uIDwgcXVlcnkubGVuZ3RoICYmIHJlY29yZENoYXIgPT09IHF1ZXJ5W3NlYXJjaFBvc2l0aW9uXSkge1xuICAgICAgICAgICAgICByZWNvcmRDaGFyID0gaGlnaGxpZ2h0ID8gYXV0b0NvbXBsZXRlVmlldy5oaWdobGlnaHQocmVjb3JkQ2hhcikgOiByZWNvcmRDaGFyO1xuICAgICAgICAgICAgICBzZWFyY2hQb3NpdGlvbisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWF0Y2gucHVzaChyZWNvcmRDaGFyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlYXJjaFBvc2l0aW9uICE9PSBxdWVyeS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmpvaW4oXCJcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHJlY29yZExvd2VyQ2FzZS5pbmNsdWRlcyhxdWVyeSkpIHtcbiAgICAgICAgICAgIGlmIChoaWdobGlnaHQpIHtcbiAgICAgICAgICAgICAgdmFyIGlucHV0VmFsdWUgPSBhdXRvQ29tcGxldGVWaWV3LmdldElucHV0KHRoaXMuc2VsZWN0b3IpLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgIHJldHVybiByZWNvcmRMb3dlckNhc2UucmVwbGFjZShpbnB1dFZhbHVlLCBhdXRvQ29tcGxldGVWaWV3LmhpZ2hsaWdodChpbnB1dFZhbHVlKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkTG93ZXJDYXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsaXN0TWF0Y2hlZFJlc3VsdHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0TWF0Y2hlZFJlc3VsdHMoZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzTGlzdCA9IFtdO1xuICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IGF1dG9Db21wbGV0ZVZpZXcuZ2V0SW5wdXQodGhpcy5zZWxlY3RvcikudmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgZGF0YS5maWx0ZXIoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IF90aGlzLnNlYXJjaChpbnB1dFZhbHVlLCByZWNvcmRbX3RoaXMuZGF0YS5rZXldIHx8IHJlY29yZCk7XG4gICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICByZXNMaXN0LnB1c2goe1xuICAgICAgICAgICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICAgICAgICAgIHNvdXJjZTogcmVjb3JkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbGlzdCA9IHJlc0xpc3Quc2xpY2UoMCwgdGhpcy5tYXhSZXN1bHRzKTtcbiAgICAgICAgYXV0b0NvbXBsZXRlVmlldy5hZGRSZXN1bHRzVG9MaXN0KHRoaXMucmVzdWx0c0xpc3QsIGxpc3QsIHRoaXMuZGF0YS5rZXksIHRoaXMucmVzdWx0SXRlbSk7XG4gICAgICAgIGF1dG9Db21wbGV0ZVZpZXcubmF2aWdhdGlvbih0aGlzLnNlbGVjdG9yLCB0aGlzLnJlc3VsdHNMaXN0KTtcbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlnbml0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlnbml0ZShkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yO1xuICAgICAgICB2YXIgaW5wdXQgPSBhdXRvQ29tcGxldGVWaWV3LmdldElucHV0KHNlbGVjdG9yKTtcbiAgICAgICAgdmFyIHBsYWNlSG9sZGVyID0gdGhpcy5wbGFjZUhvbGRlcjtcbiAgICAgICAgdmFyIG9uU2VsZWN0aW9uID0gdGhpcy5vblNlbGVjdGlvbjtcbiAgICAgICAgaWYgKHBsYWNlSG9sZGVyKSB7XG4gICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIiwgcGxhY2VIb2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0Lm9ua2V5dXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdHNMaXN0ID0gX3RoaXMyLnJlc3VsdHNMaXN0O1xuICAgICAgICAgIHZhciBjbGVhclJlc3VsdHMgPSBhdXRvQ29tcGxldGVWaWV3LmNsZWFyUmVzdWx0cyhyZXN1bHRzTGlzdCk7XG4gICAgICAgICAgaWYgKGlucHV0LnZhbHVlLmxlbmd0aCA+IF90aGlzMi50aHJlc2hvbGQgJiYgaW5wdXQudmFsdWUucmVwbGFjZSgvIC9nLCBcIlwiKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBsaXN0ID0gX3RoaXMyLmxpc3RNYXRjaGVkUmVzdWx0cyhkYXRhKTtcbiAgICAgICAgICAgIGlmIChvblNlbGVjdGlvbikge1xuICAgICAgICAgICAgICBhdXRvQ29tcGxldGVWaWV3LmdldFNlbGVjdGlvbihzZWxlY3RvciwgcmVzdWx0c0xpc3QsIG9uU2VsZWN0aW9uLCBsaXN0LCBfdGhpczIuZGF0YS5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgICB2YXIgZGF0YVNyYyA9IHRoaXMuZGF0YS5zcmMoKTtcbiAgICAgICAgaWYgKGRhdGFTcmMgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgZGF0YVNyYy50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLmlnbml0ZShkYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmlnbml0ZShkYXRhU3JjKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gYXV0b0NvbXBsZXRlO1xuICB9KCk7XG5cbiAgcmV0dXJuIGF1dG9Db21wbGV0ZTtcblxufSkpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICB2YXIgaGFzaCA9IDUzODEsXG4gICAgICBpICAgID0gc3RyLmxlbmd0aDtcblxuICB3aGlsZShpKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuXG4gIC8qIEphdmFTY3JpcHQgZG9lcyBiaXR3aXNlIG9wZXJhdGlvbnMgKGxpa2UgWE9SLCBhYm92ZSkgb24gMzItYml0IHNpZ25lZFxuICAgKiBpbnRlZ2Vycy4gU2luY2Ugd2Ugd2FudCB0aGUgcmVzdWx0cyB0byBiZSBhbHdheXMgcG9zaXRpdmUsIGNvbnZlcnQgdGhlXG4gICAqIHNpZ25lZCBpbnQgdG8gYW4gdW5zaWduZWQgYnkgZG9pbmcgYW4gdW5zaWduZWQgYml0c2hpZnQuICovXG4gIHJldHVybiBoYXNoID4+PiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2g7XG4iLCIvKiohXG4qIHRpcHB5LmpzIHY0LjAuNFxuKiAoYykgMjAxNy0yMDE5IGF0b21pa3NcbiogTUlUIExpY2Vuc2VcbiovXG5pbXBvcnQgUG9wcGVyIGZyb20gJ3BvcHBlci5qcyc7XG5cbnZhciBjc3MgPSBcIi50aXBweS1pT1N7Y3Vyc29yOnBvaW50ZXIhaW1wb3J0YW50fS50aXBweS1ub3RyYW5zaXRpb257dHJhbnNpdGlvbjpub25lfS50aXBweS1wb3BwZXJ7dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4xNjUsLjg0LC40NCwxKTttYXgtd2lkdGg6Y2FsYygxMDAlIC0gOHB4KTtwb2ludGVyLWV2ZW50czpub25lO291dGxpbmU6MH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcHtib3JkZXItcmFkaXVzOjQwJSA0MCUgMCAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gLnRpcHB5LXJvdW5kYXJyb3d7Ym90dG9tOi03cHg7Ym90dG9tOi02LjVweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDA7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMDttYXJnaW46MCAzcHh9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1hcnJvd3tib3JkZXItdG9wOjhweCBzb2xpZCAjMzMzO2JvcmRlci1yaWdodDo4cHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWxlZnQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvdHRvbTotN3B4O21hcmdpbjowIDNweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDA7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcHstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46MCAyNSU7dHJhbnNmb3JtLW9yaWdpbjowIDI1JX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC01NSUpO3RyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTUlKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlLC00NSUpO3RyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC01MCUsLTQ1JSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgtMTBweCkgcm90YXRlWCgwKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoLTEwcHgpIHJvdGF0ZVgoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMCkgcm90YXRlWCg2MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDApIHJvdGF0ZVgoNjBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KSBzY2FsZSgxKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoLjUpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KSBzY2FsZSguNSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3B7Ym9yZGVyLXJhZGl1czowIDAgMzAlIDMwJX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1yb3VuZGFycm93e3RvcDotN3B4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo1MCUgMTAwJTt0cmFuc2Zvcm0tb3JpZ2luOjUwJSAxMDAlO21hcmdpbjowIDNweH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1yb3VuZGFycm93IHN2Z3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYXJyb3d7Ym9yZGVyLWJvdHRvbTo4cHggc29saWQgIzMzMztib3JkZXItcmlnaHQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1sZWZ0OjhweCBzb2xpZCB0cmFuc3BhcmVudDt0b3A6LTdweDttYXJnaW46MCAzcHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAxMDAlO3RyYW5zZm9ybS1vcmlnaW46NTAlIDEwMCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjAgLTUwJTt0cmFuc2Zvcm0tb3JpZ2luOjAgLTUwJX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC00NSUpO3RyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNDUlKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlKTt0cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlKTtvcGFjaXR5OjB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3A7dHJhbnNmb3JtLW9yaWdpbjp0b3B9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMTBweCkgcm90YXRlWCgwKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMTBweCkgcm90YXRlWCgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgwKSByb3RhdGVYKC02MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDApIHJvdGF0ZVgoLTYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3A7dHJhbnNmb3JtLW9yaWdpbjp0b3B9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSgxKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSgxKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSguNSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWJhY2tkcm9we2JvcmRlci1yYWRpdXM6NTAlIDAgMCA1MCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LXJvdW5kYXJyb3d7cmlnaHQ6LTEycHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjMzLjMzMzMzMzMzJSA1MCU7dHJhbnNmb3JtLW9yaWdpbjozMy4zMzMzMzMzMyUgNTAlO21hcmdpbjozcHggMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWFycm93e2JvcmRlci1sZWZ0OjhweCBzb2xpZCAjMzMzO2JvcmRlci10b3A6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206OHB4IHNvbGlkIHRyYW5zcGFyZW50O3JpZ2h0Oi03cHg7bWFyZ2luOjNweCAwOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjowIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjAgNTAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1iYWNrZHJvcHstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDA7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTAlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWJhY2tkcm9wW2RhdGEtc3RhdGU9aGlkZGVuXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC03NSUsLTUwJSk7dHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTc1JSwtNTAlKTtvcGFjaXR5OjB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQ7dHJhbnNmb3JtLW9yaWdpbjpyaWdodH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoLTEwcHgpIHJvdGF0ZVkoMCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKC0xMHB4KSByb3RhdGVZKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgwKSByb3RhdGVZKC02MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKDApIHJvdGF0ZVkoLTYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0O3RyYW5zZm9ybS1vcmlnaW46cmlnaHR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpIHNjYWxlKDEpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KSBzY2FsZSgxKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCkgc2NhbGUoLjUpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KSBzY2FsZSguNSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1iYWNrZHJvcHtib3JkZXItcmFkaXVzOjAgNTAlIDUwJSAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktcm91bmRhcnJvd3tsZWZ0Oi0xMnB4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo2Ni42NjY2NjY2NiUgNTAlO3RyYW5zZm9ybS1vcmlnaW46NjYuNjY2NjY2NjYlIDUwJTttYXJnaW46M3B4IDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1yb3VuZGFycm93IHN2Z3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYXJyb3d7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCAjMzMzO2JvcmRlci10b3A6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206OHB4IHNvbGlkIHRyYW5zcGFyZW50O2xlZnQ6LTdweDttYXJnaW46M3B4IDA7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjEwMCUgNTAlO3RyYW5zZm9ybS1vcmlnaW46MTAwJSA1MCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1iYWNrZHJvcHstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46LTUwJSAwO3RyYW5zZm9ybS1vcmlnaW46LTUwJSAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTAlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtMjUlLC01MCUpO3RyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC0yNSUsLTUwJSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgxMHB4KSByb3RhdGVZKDApO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgxMHB4KSByb3RhdGVZKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMCkgcm90YXRlWSg2MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKDApIHJvdGF0ZVkoNjBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0O3RyYW5zZm9ybS1vcmlnaW46bGVmdH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCkgc2NhbGUoMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KSBzY2FsZSguNSl9LnRpcHB5LXRvb2x0aXB7cG9zaXRpb246cmVsYXRpdmU7Y29sb3I6I2ZmZjtib3JkZXItcmFkaXVzOi4yNXJlbTtmb250LXNpemU6Ljg3NXJlbTtwYWRkaW5nOi4zMTI1cmVtIC41NjI1cmVtO2xpbmUtaGVpZ2h0OjEuNDt0ZXh0LWFsaWduOmNlbnRlcjt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07YmFja2dyb3VuZC1jb2xvcjojMzMzfS50aXBweS10b29sdGlwW2RhdGEtc2l6ZT1zbWFsbF17cGFkZGluZzouMTg3NXJlbSAuMzc1cmVtO2ZvbnQtc2l6ZTouNzVyZW19LnRpcHB5LXRvb2x0aXBbZGF0YS1zaXplPWxhcmdlXXtwYWRkaW5nOi4zNzVyZW0gLjc1cmVtO2ZvbnQtc2l6ZToxcmVtfS50aXBweS10b29sdGlwW2RhdGEtYW5pbWF0ZWZpbGxde292ZXJmbG93OmhpZGRlbjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS50aXBweS10b29sdGlwW2RhdGEtaW50ZXJhY3RpdmVdLC50aXBweS10b29sdGlwW2RhdGEtaW50ZXJhY3RpdmVdIHBhdGh7cG9pbnRlci1ldmVudHM6YXV0b30udGlwcHktdG9vbHRpcFtkYXRhLWluZXJ0aWFdW2RhdGEtc3RhdGU9dmlzaWJsZV17dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC41NCwxLjUsLjM4LDEuMTEpfS50aXBweS10b29sdGlwW2RhdGEtaW5lcnRpYV1bZGF0YS1zdGF0ZT1oaWRkZW5de3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2V9LnRpcHB5LWFycm93LC50aXBweS1yb3VuZGFycm93e3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjA7aGVpZ2h0OjB9LnRpcHB5LXJvdW5kYXJyb3d7d2lkdGg6MThweDtoZWlnaHQ6N3B4O2ZpbGw6IzMzMztwb2ludGVyLWV2ZW50czpub25lfS50aXBweS1iYWNrZHJvcHtwb3NpdGlvbjphYnNvbHV0ZTt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07YmFja2dyb3VuZC1jb2xvcjojMzMzO2JvcmRlci1yYWRpdXM6NTAlO3dpZHRoOmNhbGMoMTEwJSArIDJyZW0pO2xlZnQ6NTAlO3RvcDo1MCU7ei1pbmRleDotMTt0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoLjQ2LC4xLC41MiwuOTgpOy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47YmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW59LnRpcHB5LWJhY2tkcm9wOmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7ZmxvYXQ6bGVmdDtwYWRkaW5nLXRvcDoxMDAlfS50aXBweS1iYWNrZHJvcCsudGlwcHktY29udGVudHt0cmFuc2l0aW9uLXByb3BlcnR5Om9wYWNpdHk7d2lsbC1jaGFuZ2U6b3BhY2l0eX0udGlwcHktYmFja2Ryb3ArLnRpcHB5LWNvbnRlbnRbZGF0YS1zdGF0ZT12aXNpYmxlXXtvcGFjaXR5OjF9LnRpcHB5LWJhY2tkcm9wKy50aXBweS1jb250ZW50W2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjB9XCI7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbnZhciB2ZXJzaW9uID0gXCI0LjAuNFwiO1xuXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgdWEgPSBpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudDtcbnZhciBpc0lFID0gL01TSUUgfFRyaWRlbnRcXC8vLnRlc3QodWEpO1xudmFyIGlzVUNCcm93c2VyID0gL1VDQnJvd3NlclxcLy8udGVzdCh1YSk7XG52YXIgaXNJT1MgPSAvLyBAdHMtaWdub3JlXG5pc0Jyb3dzZXIgJiYgL2lQaG9uZXxpUGFkfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSAmJiAhd2luZG93Lk1TU3RyZWFtO1xuXG52YXIgRGVmYXVsdHMgPSB7XG4gIGExMXk6IHRydWUsXG4gIGFsbG93SFRNTDogdHJ1ZSxcbiAgYW5pbWF0ZUZpbGw6IHRydWUsXG4gIGFuaW1hdGlvbjogJ3NoaWZ0LWF3YXknLFxuICBhcHBlbmRUbzogZnVuY3Rpb24gYXBwZW5kVG8oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH0sXG4gIGFyaWE6ICdkZXNjcmliZWRieScsXG4gIGFycm93OiBmYWxzZSxcbiAgYXJyb3dUeXBlOiAnc2hhcnAnLFxuICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXG4gIGNvbnRlbnQ6ICcnLFxuICBkZWxheTogWzAsIDIwXSxcbiAgZGlzdGFuY2U6IDEwLFxuICBkdXJhdGlvbjogWzMyNSwgMjc1XSxcbiAgZmxpcDogdHJ1ZSxcbiAgZmxpcEJlaGF2aW9yOiAnZmxpcCcsXG4gIGZsaXBPblVwZGF0ZTogZmFsc2UsXG4gIGZvbGxvd0N1cnNvcjogZmFsc2UsXG4gIGhpZGVPbkNsaWNrOiB0cnVlLFxuICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgaW5lcnRpYTogZmFsc2UsXG4gIGludGVyYWN0aXZlOiBmYWxzZSxcbiAgaW50ZXJhY3RpdmVCb3JkZXI6IDIsXG4gIGludGVyYWN0aXZlRGVib3VuY2U6IDAsXG4gIGxhenk6IHRydWUsXG4gIG1heFdpZHRoOiAzNTAsXG4gIG11bHRpcGxlOiBmYWxzZSxcbiAgb2Zmc2V0OiAwLFxuICBvbkhpZGRlbjogZnVuY3Rpb24gb25IaWRkZW4oKSB7fSxcbiAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7fSxcbiAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHt9LFxuICBvblNob3c6IGZ1bmN0aW9uIG9uU2hvdygpIHt9LFxuICBvblNob3duOiBmdW5jdGlvbiBvblNob3duKCkge30sXG4gIHBsYWNlbWVudDogJ3RvcCcsXG4gIHBvcHBlck9wdGlvbnM6IHt9LFxuICByb2xlOiAndG9vbHRpcCcsXG4gIHNob3dPbkluaXQ6IGZhbHNlLFxuICBzaXplOiAncmVndWxhcicsXG4gIHN0aWNreTogZmFsc2UsXG4gIHRhcmdldDogJycsXG4gIHRoZW1lOiAnZGFyaycsXG4gIHRvdWNoOiB0cnVlLFxuICB0b3VjaEhvbGQ6IGZhbHNlLFxuICB0cmlnZ2VyOiAnbW91c2VlbnRlciBmb2N1cycsXG4gIHVwZGF0ZUR1cmF0aW9uOiAwLFxuICB3YWl0OiBudWxsLFxuICB6SW5kZXg6IDk5OTlcbiAgLyoqXG4gICAqIElmIHRoZSBzZXQoKSBtZXRob2QgZW5jb3VudGVycyBvbmUgb2YgdGhlc2UsIHRoZSBwb3BwZXJJbnN0YW5jZSBtdXN0IGJlXG4gICAqIHJlY3JlYXRlZFxuICAgKi9cblxufTtcbnZhciBQT1BQRVJfSU5TVEFOQ0VfREVQRU5ERU5DSUVTID0gWydhcnJvdycsICdhcnJvd1R5cGUnLCAnYm91bmRhcnknLCAnZGlzdGFuY2UnLCAnZmxpcCcsICdmbGlwQmVoYXZpb3InLCAnZmxpcE9uVXBkYXRlJywgJ29mZnNldCcsICdwbGFjZW1lbnQnLCAncG9wcGVyT3B0aW9ucyddO1xuXG52YXIgU2VsZWN0b3JzID0ge1xuICBQT1BQRVI6ICcudGlwcHktcG9wcGVyJyxcbiAgVE9PTFRJUDogJy50aXBweS10b29sdGlwJyxcbiAgQ09OVEVOVDogJy50aXBweS1jb250ZW50JyxcbiAgQkFDS0RST1A6ICcudGlwcHktYmFja2Ryb3AnLFxuICBBUlJPVzogJy50aXBweS1hcnJvdycsXG4gIFJPVU5EX0FSUk9XOiAnLnRpcHB5LXJvdW5kYXJyb3cnXG59O1xuXG52YXIgZWxlbWVudFByb3RvID0gaXNCcm93c2VyID8gRWxlbWVudC5wcm90b3R5cGUgOiB7fTtcbnZhciBtYXRjaGVzID0gZWxlbWVudFByb3RvLm1hdGNoZXMgfHwgZWxlbWVudFByb3RvLm1hdGNoZXNTZWxlY3RvciB8fCBlbGVtZW50UHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnRQcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudFByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yO1xuLyoqXG4gKiBQb255ZmlsbCBmb3IgQXJyYXkuZnJvbSAtIGNvbnZlcnRzIGl0ZXJhYmxlIHZhbHVlcyB0byBhbiBhcnJheVxuICogQHBhcmFtIHtBcnJheUxpa2V9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnlbXX1cbiAqL1xuXG5mdW5jdGlvbiBhcnJheUZyb20odmFsdWUpIHtcbiAgcmV0dXJuIFtdLnNsaWNlLmNhbGwodmFsdWUpO1xufVxuLyoqXG4gKiBQb255ZmlsbCBmb3IgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gcGFyZW50U2VsZWN0b3JcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBwYXJlbnRTZWxlY3Rvcikge1xuICByZXR1cm4gKGVsZW1lbnRQcm90by5jbG9zZXN0IHx8IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgIHZhciBlbCA9IHRoaXM7XG5cbiAgICB3aGlsZSAoZWwpIHtcbiAgICAgIGlmIChtYXRjaGVzLmNhbGwoZWwsIHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG5cbiAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgICB9XG4gIH0pLmNhbGwoZWxlbWVudCwgcGFyZW50U2VsZWN0b3IpO1xufVxuLyoqXG4gKiBXb3JrcyBsaWtlIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QsIGJ1dCB1c2VzIGEgY2FsbGJhY2sgaW5zdGVhZFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuXG5mdW5jdGlvbiBjbG9zZXN0Q2FsbGJhY2soZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICBpZiAoY2FsbGJhY2soZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBcImJhcmVcIiB2aXJ0dWFsIGVsZW1lbnQgKGJlZm9yZSBtdXRhdGlvbnMgZG9uZVxuICogYnkgYHBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXMoKWApLiBKU0RPTSBlbGVtZW50cyBzaG93IHVwIGFzXG4gKiBbb2JqZWN0IE9iamVjdF0sIHdlIGNhbiBjaGVjayBpZiB0aGUgdmFsdWUgaXMgXCJlbGVtZW50LWxpa2VcIiBpZiBpdCBoYXNcbiAqIGBhZGRFdmVudExpc3RlbmVyYFxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzQmFyZVZpcnR1YWxFbGVtZW50KHZhbHVlKSB7XG4gIHJldHVybiB7fS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgIXZhbHVlLmFkZEV2ZW50TGlzdGVuZXI7XG59XG4vKipcbiAqIFNhZmUgLmhhc093blByb3BlcnR5IGNoZWNrLCBmb3IgcHJvdG90eXBlLWxlc3Mgb2JqZWN0c1xuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIGtleSkge1xuICByZXR1cm4ge30uaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgZWxlbWVudHMgYmFzZWQgb24gdGhlIHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd8RWxlbWVudHxFbGVtZW50W118Tm9kZUxpc3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtFbGVtZW50W119XG4gKi9cblxuZnVuY3Rpb24gZ2V0QXJyYXlPZkVsZW1lbnRzKHZhbHVlKSB7XG4gIGlmIChpc1Npbmd1bGFyKHZhbHVlKSkge1xuICAgIHJldHVybiBbdmFsdWVdO1xuICB9XG5cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcbiAgICByZXR1cm4gYXJyYXlGcm9tKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGFycmF5RnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHZhbHVlIGF0IGEgZ2l2ZW4gaW5kZXggZGVwZW5kaW5nIG9uIGlmIGl0J3MgYW4gYXJyYXkgb3IgbnVtYmVyXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHthbnl9IFtkZWZhdWx0VmFsdWVdXG4gKi9cblxuZnVuY3Rpb24gZ2V0VmFsdWUodmFsdWUsIGluZGV4LCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFyIHYgPSB2YWx1ZVtpbmRleF07XG4gICAgcmV0dXJuIHYgPT0gbnVsbCA/IGRlZmF1bHRWYWx1ZSA6IHY7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIERlYm91bmNlIHV0aWxpdHlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqL1xuXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgbXMpIHtcbiAgdmFyIHRpbWVvdXRJZDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBfYXJndW1lbnRzID0gYXJndW1lbnRzO1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7IC8vIEB0cy1pZ25vcmVcblxuICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KF90aGlzLCBfYXJndW1lbnRzKTtcbiAgICB9LCBtcyk7XG4gIH07XG59XG4vKipcbiAqIFByZXZlbnRzIGVycm9ycyBmcm9tIGJlaW5nIHRocm93biB3aGlsZSBhY2Nlc3NpbmcgbmVzdGVkIG1vZGlmaWVyIG9iamVjdHNcbiAqIGluIGBwb3BwZXJPcHRpb25zYFxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGdldE1vZGlmaWVyKG9iaiwga2V5KSB7XG4gIHJldHVybiBvYmogJiYgb2JqLm1vZGlmaWVycyAmJiBvYmoubW9kaWZpZXJzW2tleV07XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYW4gYXJyYXkgb3Igc3RyaW5nIGluY2x1ZGVzIGEgdmFsdWVcbiAqIEBwYXJhbSB7YW55W118U3RyaW5nfSBhXG4gKiBAcGFyYW0ge2FueX0gYlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpbmNsdWRlcyhhLCBiKSB7XG4gIHJldHVybiBhLmluZGV4T2YoYikgPiAtMTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgdmFsdWUgaXMgc2luZ3VsYXItbGlrZVxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzU2luZ3VsYXIodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIGhhc093blByb3BlcnR5KHZhbHVlLCAnaXNWaXJ0dWFsJykpIHx8IHZhbHVlIGluc3RhbmNlb2YgRWxlbWVudDtcbn1cbi8qKlxuICogRmlyZWZveCBleHRlbnNpb25zIGRvbid0IGFsbG93IHNldHRpbmcgLmlubmVySFRNTCBkaXJlY3RseSwgdGhpcyB3aWxsIHRyaWNrIGl0XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gaW5uZXJIVE1MKCkge1xuICByZXR1cm4gJ2lubmVySFRNTCc7XG59XG4vKipcbiAqIEV2YWx1YXRlcyBhIGZ1bmN0aW9uIGlmIG9uZSwgb3IgcmV0dXJucyB0aGUgdmFsdWVcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHthbnlbXX0gYXJnc1xuICogQHJldHVybiB7YW55fVxuICovXG5cbmZ1bmN0aW9uIGV2YWx1YXRlVmFsdWUodmFsdWUsIGFyZ3MpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLmFwcGx5KG51bGwsIGFyZ3MpIDogdmFsdWU7XG59XG4vKipcbiAqIFNldHMgYSBwb3BwZXJJbnN0YW5jZSBgZmxpcGAgbW9kaWZpZXIncyBlbmFibGVkIHN0YXRlXG4gKiBAcGFyYW0ge09iamVjdFtdfSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgdmFsdWUpIHtcbiAgbW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBtLm5hbWUgPT09ICdmbGlwJztcbiAgfSlbMF0uZW5hYmxlZCA9IHZhbHVlO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGVsZW1lbnQgY2FuIHJlY2VpdmUgZm9jdXNcbiAqIEFsd2F5cyByZXR1cm5zIHRydWUgZm9yIHZpcnR1YWwgb2JqZWN0c1xuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGNhblJlY2VpdmVGb2N1cyhlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgRWxlbWVudCA/IG1hdGNoZXMuY2FsbChlbGVtZW50LCAnYVtocmVmXSxhcmVhW2hyZWZdLGJ1dHRvbixkZXRhaWxzLGlucHV0LHRleHRhcmVhLHNlbGVjdCxpZnJhbWUsW3RhYmluZGV4XScpICYmICFlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSA6IHRydWU7XG59XG4vKipcbiAqIFJldHVybnMgYSBuZXcgYGRpdmAgZWxlbWVudFxuICogQHJldHVybiB7SFRNTERpdkVsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gZGl2KCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgaW5uZXJIVE1MIG9mIGFuIGVsZW1lbnQgd2hpbGUgdHJpY2tpbmcgbGludGVycyAmIG1pbmlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fFN0cmluZ30gaHRtbFxuICovXG5cbmZ1bmN0aW9uIHNldElubmVySFRNTChlbGVtZW50LCBodG1sKSB7XG4gIGVsZW1lbnRbaW5uZXJIVE1MKCldID0gaHRtbCBpbnN0YW5jZW9mIEVsZW1lbnQgPyBodG1sW2lubmVySFRNTCgpXSA6IGh0bWw7XG59XG4vKipcbiAqIFNldHMgdGhlIGNvbnRlbnQgb2YgYSB0b29sdGlwXG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBjb250ZW50RWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICovXG5cbmZ1bmN0aW9uIHNldENvbnRlbnQoY29udGVudEVsLCBwcm9wcykge1xuICBpZiAocHJvcHMuY29udGVudCBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICBzZXRJbm5lckhUTUwoY29udGVudEVsLCAnJyk7XG4gICAgY29udGVudEVsLmFwcGVuZENoaWxkKHByb3BzLmNvbnRlbnQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnRlbnRFbFtwcm9wcy5hbGxvd0hUTUwgPyAnaW5uZXJIVE1MJyA6ICd0ZXh0Q29udGVudCddID0gcHJvcHMuY29udGVudDtcbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjaGlsZCBlbGVtZW50cyBvZiBhIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBwb3BwZXJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBnZXRDaGlsZHJlbihwb3BwZXIpIHtcbiAgcmV0dXJuIHtcbiAgICB0b29sdGlwOiBwb3BwZXIucXVlcnlTZWxlY3RvcihTZWxlY3RvcnMuVE9PTFRJUCksXG4gICAgYmFja2Ryb3A6IHBvcHBlci5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5CQUNLRFJPUCksXG4gICAgY29udGVudDogcG9wcGVyLnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3JzLkNPTlRFTlQpLFxuICAgIGFycm93OiBwb3BwZXIucXVlcnlTZWxlY3RvcihTZWxlY3RvcnMuQVJST1cpIHx8IHBvcHBlci5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5ST1VORF9BUlJPVylcbiAgfTtcbn1cbi8qKlxuICogQWRkcyBgZGF0YS1pbmVydGlhYCBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqL1xuXG5mdW5jdGlvbiBhZGRJbmVydGlhKHRvb2x0aXApIHtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW5lcnRpYScsICcnKTtcbn1cbi8qKlxuICogUmVtb3ZlcyBgZGF0YS1pbmVydGlhYCBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqL1xuXG5mdW5jdGlvbiByZW1vdmVJbmVydGlhKHRvb2x0aXApIHtcbiAgdG9vbHRpcC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtaW5lcnRpYScpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycm93IGVsZW1lbnQgYW5kIHJldHVybnMgaXRcbiAqIEBwYXJhbSB7U3RyaW5nfSBhcnJvd1R5cGVcbiAqIEByZXR1cm4ge0hUTUxEaXZFbGVtZW50fVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUFycm93RWxlbWVudChhcnJvd1R5cGUpIHtcbiAgdmFyIGFycm93ID0gZGl2KCk7XG5cbiAgaWYgKGFycm93VHlwZSA9PT0gJ3JvdW5kJykge1xuICAgIGFycm93LmNsYXNzTmFtZSA9ICd0aXBweS1yb3VuZGFycm93JztcbiAgICBzZXRJbm5lckhUTUwoYXJyb3csICc8c3ZnIHZpZXdCb3g9XCIwIDAgMTggN1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTAgN3MyLjAyMS0uMDE1IDUuMjUzLTQuMjE4QzYuNTg0IDEuMDUxIDcuNzk3LjAwNyA5IDBjMS4yMDMtLjAwNyAyLjQxNiAxLjAzNSAzLjc2MSAyLjc4MkMxNi4wMTIgNy4wMDUgMTggNyAxOCA3SDB6XCIvPjwvc3ZnPicpO1xuICB9IGVsc2Uge1xuICAgIGFycm93LmNsYXNzTmFtZSA9ICd0aXBweS1hcnJvdyc7XG4gIH1cblxuICByZXR1cm4gYXJyb3c7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBiYWNrZHJvcCBlbGVtZW50IGFuZCByZXR1cm5zIGl0XG4gKiBAcmV0dXJuIHtIVE1MRGl2RWxlbWVudH1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCYWNrZHJvcEVsZW1lbnQoKSB7XG4gIHZhciBiYWNrZHJvcCA9IGRpdigpO1xuICBiYWNrZHJvcC5jbGFzc05hbWUgPSAndGlwcHktYmFja2Ryb3AnO1xuICBiYWNrZHJvcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG4gIHJldHVybiBiYWNrZHJvcDtcbn1cbi8qKlxuICogQWRkcyBpbnRlcmFjdGl2ZS1yZWxhdGVkIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gdG9vbHRpcFxuICovXG5cbmZ1bmN0aW9uIGFkZEludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCkge1xuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1pbnRlcmFjdGl2ZScsICcnKTtcbn1cbi8qKlxuICogUmVtb3ZlcyBpbnRlcmFjdGl2ZS1yZWxhdGVkIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gdG9vbHRpcFxuICovXG5cbmZ1bmN0aW9uIHJlbW92ZUludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCkge1xuICBwb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICB0b29sdGlwLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbnRlcmFjdGl2ZScpO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNpdGlvbiBkdXJhdGlvbiB0byBhIGxpc3Qgb2YgZWxlbWVudHNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnRbXX0gZWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihlbHMsIHZhbHVlKSB7XG4gIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCJcIi5jb25jYXQodmFsdWUsIFwibXNcIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogQWRkL3JlbW92ZSB0cmFuc2l0aW9uZW5kIGxpc3RlbmVyIGZyb20gdG9vbHRpcFxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gdG9vbHRpcFxuICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXJcbiAqL1xuXG5mdW5jdGlvbiB0b2dnbGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIodG9vbHRpcCwgYWN0aW9uLCBsaXN0ZW5lcikge1xuICAvLyBVQyBCcm93c2VyIGhhc24ndCBhZG9wdGVkIHRoZSBgdHJhbnNpdGlvbmVuZGAgZXZlbnQgZGVzcGl0ZSBzdXBwb3J0aW5nXG4gIC8vIHVucHJlZml4ZWQgdHJhbnNpdGlvbnMuLi5cbiAgdmFyIGV2ZW50TmFtZSA9IGlzVUNCcm93c2VyICYmIGRvY3VtZW50LmJvZHkuc3R5bGUud2Via2l0VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkID8gJ3dlYmtpdFRyYW5zaXRpb25FbmQnIDogJ3RyYW5zaXRpb25lbmQnO1xuICB0b29sdGlwW2FjdGlvbiArICdFdmVudExpc3RlbmVyJ10oZXZlbnROYW1lLCBsaXN0ZW5lcik7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHBvcHBlcidzIHBsYWNlbWVudCwgaWdub3Jpbmcgc2hpZnRpbmcgKHRvcC1zdGFydCwgZXRjKVxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gcG9wcGVyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gZ2V0UG9wcGVyUGxhY2VtZW50KHBvcHBlcikge1xuICB2YXIgZnVsbFBsYWNlbWVudCA9IHBvcHBlci5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gIHJldHVybiBmdWxsUGxhY2VtZW50ID8gZnVsbFBsYWNlbWVudC5zcGxpdCgnLScpWzBdIDogJyc7XG59XG4vKipcbiAqIFNldHMgdGhlIHZpc2liaWxpdHkgc3RhdGUgdG8gZWxlbWVudHMgc28gdGhleSBjYW4gYmVnaW4gdG8gdHJhbnNpdGlvblxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudFtdfSBlbHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZVxuICovXG5cbmZ1bmN0aW9uIHNldFZpc2liaWxpdHlTdGF0ZShlbHMsIHN0YXRlKSB7XG4gIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgc3RhdGUpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFRyaWdnZXJzIHJlZmxvd1xuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gcG9wcGVyXG4gKi9cblxuZnVuY3Rpb24gcmVmbG93KHBvcHBlcikge1xuICB2b2lkIHBvcHBlci5vZmZzZXRIZWlnaHQ7XG59XG4vKipcbiAqIEFkZHMvcmVtb3ZlcyB0aGVtZSBmcm9tIHRvb2x0aXAncyBjbGFzc0xpc3RcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqIEBwYXJhbSB7U3RyaW5nfSBhY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSB0aGVtZVxuICovXG5cbmZ1bmN0aW9uIHRvZ2dsZVRoZW1lKHRvb2x0aXAsIGFjdGlvbiwgdGhlbWUpIHtcbiAgdGhlbWUuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uICh0aGVtZU5hbWUpIHtcbiAgICB0b29sdGlwLmNsYXNzTGlzdFthY3Rpb25dKHRoZW1lTmFtZSArICctdGhlbWUnKTtcbiAgfSk7XG59XG4vKipcbiAqIENvbnN0cnVjdHMgdGhlIHBvcHBlciBlbGVtZW50IGFuZCByZXR1cm5zIGl0XG4gKiBAcGFyYW0ge051bWJlcn0gaWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7SFRNTERpdkVsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUG9wcGVyRWxlbWVudChpZCwgcHJvcHMpIHtcbiAgdmFyIHBvcHBlciA9IGRpdigpO1xuICBwb3BwZXIuY2xhc3NOYW1lID0gJ3RpcHB5LXBvcHBlcic7XG4gIHBvcHBlci5pZCA9IFwidGlwcHktXCIuY29uY2F0KGlkKTtcbiAgcG9wcGVyLnN0eWxlLnpJbmRleCA9IHByb3BzLnpJbmRleDtcblxuICBpZiAocHJvcHMucm9sZSkge1xuICAgIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCBwcm9wcy5yb2xlKTtcbiAgfVxuXG4gIHZhciB0b29sdGlwID0gZGl2KCk7XG4gIHRvb2x0aXAuY2xhc3NOYW1lID0gJ3RpcHB5LXRvb2x0aXAnO1xuICB0b29sdGlwLnN0eWxlLm1heFdpZHRoID0gcHJvcHMubWF4V2lkdGggKyAodHlwZW9mIHByb3BzLm1heFdpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJyk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBwcm9wcy5zaXplKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0aW9uJywgcHJvcHMuYW5pbWF0aW9uKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG4gIHRvZ2dsZVRoZW1lKHRvb2x0aXAsICdhZGQnLCBwcm9wcy50aGVtZSk7XG4gIHZhciBjb250ZW50ID0gZGl2KCk7XG4gIGNvbnRlbnQuY2xhc3NOYW1lID0gJ3RpcHB5LWNvbnRlbnQnO1xuICBjb250ZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0ZScsICdoaWRkZW4nKTtcblxuICBpZiAocHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICBhZGRJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApO1xuICB9XG5cbiAgaWYgKHByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5hcHBlbmRDaGlsZChjcmVhdGVBcnJvd0VsZW1lbnQocHJvcHMuYXJyb3dUeXBlKSk7XG4gIH1cblxuICBpZiAocHJvcHMuYW5pbWF0ZUZpbGwpIHtcbiAgICB0b29sdGlwLmFwcGVuZENoaWxkKGNyZWF0ZUJhY2tkcm9wRWxlbWVudCgpKTtcbiAgICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRlZmlsbCcsICcnKTtcbiAgfVxuXG4gIGlmIChwcm9wcy5pbmVydGlhKSB7XG4gICAgYWRkSW5lcnRpYSh0b29sdGlwKTtcbiAgfVxuXG4gIHNldENvbnRlbnQoY29udGVudCwgcHJvcHMpO1xuICB0b29sdGlwLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICBwb3BwZXIuYXBwZW5kQ2hpbGQodG9vbHRpcCk7XG4gIHJldHVybiBwb3BwZXI7XG59XG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvcHBlciBlbGVtZW50IGJhc2VkIG9uIHRoZSBuZXcgcHJvcHNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IHByZXZQcm9wc1xuICogQHBhcmFtIHtPYmplY3R9IG5leHRQcm9wc1xuICovXG5cbmZ1bmN0aW9uIHVwZGF0ZVBvcHBlckVsZW1lbnQocG9wcGVyLCBwcmV2UHJvcHMsIG5leHRQcm9wcykge1xuICB2YXIgX2dldENoaWxkcmVuID0gZ2V0Q2hpbGRyZW4ocG9wcGVyKSxcbiAgICAgIHRvb2x0aXAgPSBfZ2V0Q2hpbGRyZW4udG9vbHRpcCxcbiAgICAgIGNvbnRlbnQgPSBfZ2V0Q2hpbGRyZW4uY29udGVudCxcbiAgICAgIGJhY2tkcm9wID0gX2dldENoaWxkcmVuLmJhY2tkcm9wLFxuICAgICAgYXJyb3cgPSBfZ2V0Q2hpbGRyZW4uYXJyb3c7XG5cbiAgcG9wcGVyLnN0eWxlLnpJbmRleCA9IG5leHRQcm9wcy56SW5kZXg7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBuZXh0UHJvcHMuc2l6ZSk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGlvbicsIG5leHRQcm9wcy5hbmltYXRpb24pO1xuICB0b29sdGlwLnN0eWxlLm1heFdpZHRoID0gbmV4dFByb3BzLm1heFdpZHRoICsgKHR5cGVvZiBuZXh0UHJvcHMubWF4V2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnKTtcblxuICBpZiAobmV4dFByb3BzLnJvbGUpIHtcbiAgICBwb3BwZXIuc2V0QXR0cmlidXRlKCdyb2xlJywgbmV4dFByb3BzLnJvbGUpO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKTtcbiAgfVxuXG4gIGlmIChwcmV2UHJvcHMuY29udGVudCAhPT0gbmV4dFByb3BzLmNvbnRlbnQpIHtcbiAgICBzZXRDb250ZW50KGNvbnRlbnQsIG5leHRQcm9wcyk7XG4gIH0gLy8gYW5pbWF0ZUZpbGxcblxuXG4gIGlmICghcHJldlByb3BzLmFuaW1hdGVGaWxsICYmIG5leHRQcm9wcy5hbmltYXRlRmlsbCkge1xuICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQoY3JlYXRlQmFja2Ryb3BFbGVtZW50KCkpO1xuICAgIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGVmaWxsJywgJycpO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5hbmltYXRlRmlsbCAmJiAhbmV4dFByb3BzLmFuaW1hdGVGaWxsKSB7XG4gICAgdG9vbHRpcC5yZW1vdmVDaGlsZChiYWNrZHJvcCk7XG4gICAgdG9vbHRpcC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0ZWZpbGwnKTtcbiAgfSAvLyBhcnJvd1xuXG5cbiAgaWYgKCFwcmV2UHJvcHMuYXJyb3cgJiYgbmV4dFByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5hcHBlbmRDaGlsZChjcmVhdGVBcnJvd0VsZW1lbnQobmV4dFByb3BzLmFycm93VHlwZSkpO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5hcnJvdyAmJiAhbmV4dFByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5yZW1vdmVDaGlsZChhcnJvdyk7XG4gIH0gLy8gYXJyb3dUeXBlXG5cblxuICBpZiAocHJldlByb3BzLmFycm93ICYmIG5leHRQcm9wcy5hcnJvdyAmJiBwcmV2UHJvcHMuYXJyb3dUeXBlICE9PSBuZXh0UHJvcHMuYXJyb3dUeXBlKSB7XG4gICAgdG9vbHRpcC5yZXBsYWNlQ2hpbGQoY3JlYXRlQXJyb3dFbGVtZW50KG5leHRQcm9wcy5hcnJvd1R5cGUpLCBhcnJvdyk7XG4gIH0gLy8gaW50ZXJhY3RpdmVcblxuXG4gIGlmICghcHJldlByb3BzLmludGVyYWN0aXZlICYmIG5leHRQcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgIGFkZEludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCk7XG4gIH0gZWxzZSBpZiAocHJldlByb3BzLmludGVyYWN0aXZlICYmICFuZXh0UHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICByZW1vdmVJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApO1xuICB9IC8vIGluZXJ0aWFcblxuXG4gIGlmICghcHJldlByb3BzLmluZXJ0aWEgJiYgbmV4dFByb3BzLmluZXJ0aWEpIHtcbiAgICBhZGRJbmVydGlhKHRvb2x0aXApO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5pbmVydGlhICYmICFuZXh0UHJvcHMuaW5lcnRpYSkge1xuICAgIHJlbW92ZUluZXJ0aWEodG9vbHRpcCk7XG4gIH0gLy8gdGhlbWVcblxuXG4gIGlmIChwcmV2UHJvcHMudGhlbWUgIT09IG5leHRQcm9wcy50aGVtZSkge1xuICAgIHRvZ2dsZVRoZW1lKHRvb2x0aXAsICdyZW1vdmUnLCBwcmV2UHJvcHMudGhlbWUpO1xuICAgIHRvZ2dsZVRoZW1lKHRvb2x0aXAsICdhZGQnLCBuZXh0UHJvcHMudGhlbWUpO1xuICB9XG59XG4vKipcbiAqIFJ1bnMgdGhlIGNhbGxiYWNrIGFmdGVyIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBoYXMgYmVlbiB1cGRhdGVkXG4gKiB1cGRhdGUoKSBpcyBkZWJvdW5jZWQgd2l0aCBQcm9taXNlLnJlc29sdmUoKSBvciBzZXRUaW1lb3V0KClcbiAqIHNjaGVkdWxlVXBkYXRlKCkgaXMgdXBkYXRlKCkgd3JhcHBlZCBpbiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKVxuICogQHBhcmFtIHtPYmplY3R9IHBvcHBlckluc3RhbmNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5cbmZ1bmN0aW9uIGFmdGVyUG9wcGVyUG9zaXRpb25VcGRhdGVzKHBvcHBlckluc3RhbmNlLCBjYWxsYmFjaykge1xuICB2YXIgcG9wcGVyID0gcG9wcGVySW5zdGFuY2UucG9wcGVyLFxuICAgICAgb3B0aW9ucyA9IHBvcHBlckluc3RhbmNlLm9wdGlvbnM7XG4gIHZhciBvbkNyZWF0ZSA9IG9wdGlvbnMub25DcmVhdGUsXG4gICAgICBvblVwZGF0ZSA9IG9wdGlvbnMub25VcGRhdGU7XG5cbiAgb3B0aW9ucy5vbkNyZWF0ZSA9IG9wdGlvbnMub25VcGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJlZmxvdyhwb3BwZXIpO1xuICAgIGNhbGxiYWNrKCk7XG4gICAgb25VcGRhdGUoZGF0YSk7XG4gICAgb3B0aW9ucy5vbkNyZWF0ZSA9IG9uQ3JlYXRlO1xuICAgIG9wdGlvbnMub25VcGRhdGUgPSBvblVwZGF0ZTtcbiAgfTtcbn1cbi8qKlxuICogSGlkZXMgYWxsIHZpc2libGUgcG9wcGVycyBvbiB0aGUgZG9jdW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cblxuZnVuY3Rpb24gaGlkZUFsbCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgY2hlY2tIaWRlT25DbGljayA9IF9yZWYuY2hlY2tIaWRlT25DbGljayxcbiAgICAgIGV4Y2x1ZGUgPSBfcmVmLmV4Y2x1ZGUsXG4gICAgICBkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb247XG5cbiAgYXJyYXlGcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3JzLlBPUFBFUikpLmZvckVhY2goZnVuY3Rpb24gKHBvcHBlcikge1xuICAgIHZhciBpbnN0YW5jZSA9IHBvcHBlci5fdGlwcHk7XG5cbiAgICBpZiAoaW5zdGFuY2UgJiYgKGNoZWNrSGlkZU9uQ2xpY2sgPyBpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayA9PT0gdHJ1ZSA6IHRydWUpICYmICghZXhjbHVkZSB8fCBwb3BwZXIgIT09IGV4Y2x1ZGUucG9wcGVyKSkge1xuICAgICAgaW5zdGFuY2UuaGlkZShkdXJhdGlvbik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgbW91c2UgY3Vyc29yIGlzIG91dHNpZGUgb2YgdGhlIHBvcHBlcidzIGludGVyYWN0aXZlIGJvcmRlclxuICogcmVnaW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gcG9wcGVyUGxhY2VtZW50XG4gKiBAcGFyYW0ge0NsaWVudFJlY3R9IHBvcHBlclJlY3RcbiAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc0N1cnNvck91dHNpZGVJbnRlcmFjdGl2ZUJvcmRlcihwb3BwZXJQbGFjZW1lbnQsIHBvcHBlclJlY3QsIGV2ZW50LCBwcm9wcykge1xuICBpZiAoIXBvcHBlclBsYWNlbWVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHggPSBldmVudC5jbGllbnRYLFxuICAgICAgeSA9IGV2ZW50LmNsaWVudFk7XG4gIHZhciBpbnRlcmFjdGl2ZUJvcmRlciA9IHByb3BzLmludGVyYWN0aXZlQm9yZGVyLFxuICAgICAgZGlzdGFuY2UgPSBwcm9wcy5kaXN0YW5jZTtcbiAgdmFyIGV4Y2VlZHNUb3AgPSBwb3BwZXJSZWN0LnRvcCAtIHkgPiAocG9wcGVyUGxhY2VtZW50ID09PSAndG9wJyA/IGludGVyYWN0aXZlQm9yZGVyICsgZGlzdGFuY2UgOiBpbnRlcmFjdGl2ZUJvcmRlcik7XG4gIHZhciBleGNlZWRzQm90dG9tID0geSAtIHBvcHBlclJlY3QuYm90dG9tID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ2JvdHRvbScgPyBpbnRlcmFjdGl2ZUJvcmRlciArIGRpc3RhbmNlIDogaW50ZXJhY3RpdmVCb3JkZXIpO1xuICB2YXIgZXhjZWVkc0xlZnQgPSBwb3BwZXJSZWN0LmxlZnQgLSB4ID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ2xlZnQnID8gaW50ZXJhY3RpdmVCb3JkZXIgKyBkaXN0YW5jZSA6IGludGVyYWN0aXZlQm9yZGVyKTtcbiAgdmFyIGV4Y2VlZHNSaWdodCA9IHggLSBwb3BwZXJSZWN0LnJpZ2h0ID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IGludGVyYWN0aXZlQm9yZGVyICsgZGlzdGFuY2UgOiBpbnRlcmFjdGl2ZUJvcmRlcik7XG4gIHJldHVybiBleGNlZWRzVG9wIHx8IGV4Y2VlZHNCb3R0b20gfHwgZXhjZWVkc0xlZnQgfHwgZXhjZWVkc1JpZ2h0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSBvZmZzZXQsIHRha2luZyBpbnRvIGFjY291bnQgdGhlIGRlZmF1bHQgb2Zmc2V0IGR1ZSB0b1xuICogdGhlIHRyYW5zZm9ybTogdHJhbnNsYXRlKCkgcnVsZSAoMTBweCkgaW4gQ1NTXG4gKiBAcGFyYW0ge051bWJlcn0gZGlzdGFuY2VcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBnZXRPZmZzZXREaXN0YW5jZUluUHgoZGlzdGFuY2UpIHtcbiAgcmV0dXJuIC0oZGlzdGFuY2UgLSAxMCkgKyAncHgnO1xufVxuXG52YXIgUEFTU0lWRSA9IHtcbiAgcGFzc2l2ZTogdHJ1ZVxufTtcbnZhciBQQURESU5HID0gNDtcblxudmFyIGlzVXNpbmdUb3VjaCA9IGZhbHNlO1xuZnVuY3Rpb24gb25Eb2N1bWVudFRvdWNoKCkge1xuICBpZiAoaXNVc2luZ1RvdWNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaXNVc2luZ1RvdWNoID0gdHJ1ZTtcblxuICBpZiAoaXNJT1MpIHtcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3RpcHB5LWlPUycpO1xuICB9XG5cbiAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpO1xuICB9XG59XG52YXIgbGFzdE1vdXNlTW92ZVRpbWUgPSAwO1xuZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlTW92ZSgpIHtcbiAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpOyAvLyBDaHJvbWUgNjArIGlzIDEgbW91c2Vtb3ZlIHBlciBhbmltYXRpb24gZnJhbWUsIHVzZSAyMG1zIHRpbWUgZGlmZmVyZW5jZVxuXG4gIGlmIChub3cgLSBsYXN0TW91c2VNb3ZlVGltZSA8IDIwKSB7XG4gICAgaXNVc2luZ1RvdWNoID0gZmFsc2U7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Eb2N1bWVudE1vdXNlTW92ZSk7XG5cbiAgICBpZiAoIWlzSU9TKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ3RpcHB5LWlPUycpO1xuICAgIH1cbiAgfVxuXG4gIGxhc3RNb3VzZU1vdmVUaW1lID0gbm93O1xufVxuZnVuY3Rpb24gb25Eb2N1bWVudENsaWNrKF9yZWYpIHtcbiAgdmFyIHRhcmdldCA9IF9yZWYudGFyZ2V0O1xuXG4gIC8vIFNpbXVsYXRlZCBldmVudHMgZGlzcGF0Y2hlZCBvbiB0aGUgZG9jdW1lbnRcbiAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkpIHtcbiAgICByZXR1cm4gaGlkZUFsbCgpO1xuICB9IC8vIENsaWNrZWQgb24gYW4gaW50ZXJhY3RpdmUgcG9wcGVyXG5cblxuICB2YXIgcG9wcGVyID0gY2xvc2VzdCh0YXJnZXQsIFNlbGVjdG9ycy5QT1BQRVIpOyAvLyBAdHMtaWdub3JlXG5cbiAgaWYgKHBvcHBlciAmJiBwb3BwZXIuX3RpcHB5ICYmIHBvcHBlci5fdGlwcHkucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ2xpY2tlZCBvbiBhIHJlZmVyZW5jZVxuXG5cbiAgdmFyIHJlZmVyZW5jZSA9IGNsb3Nlc3RDYWxsYmFjayh0YXJnZXQsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuX3RpcHB5ICYmIGVsZW1lbnQuX3RpcHB5LnJlZmVyZW5jZSA9PT0gZWxlbWVudDtcbiAgfSk7XG5cbiAgaWYgKHJlZmVyZW5jZSkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgaW5zdGFuY2UgPSByZWZlcmVuY2UuX3RpcHB5O1xuICAgIHZhciBpc0NsaWNrVHJpZ2dlciA9IGluY2x1ZGVzKGluc3RhbmNlLnByb3BzLnRyaWdnZXIsICdjbGljaycpO1xuXG4gICAgaWYgKGlzVXNpbmdUb3VjaCB8fCBpc0NsaWNrVHJpZ2dlcikge1xuICAgICAgcmV0dXJuIGhpZGVBbGwoe1xuICAgICAgICBleGNsdWRlOiBpbnN0YW5jZSxcbiAgICAgICAgY2hlY2tIaWRlT25DbGljazogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmhpZGVPbkNsaWNrICE9PSB0cnVlIHx8IGlzQ2xpY2tUcmlnZ2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5zdGFuY2UuY2xlYXJEZWxheVRpbWVvdXRzKCk7XG4gIH1cblxuICBoaWRlQWxsKHtcbiAgICBjaGVja0hpZGVPbkNsaWNrOiB0cnVlXG4gIH0pO1xufVxuZnVuY3Rpb24gb25XaW5kb3dCbHVyKCkge1xuICB2YXIgX2RvY3VtZW50ID0gZG9jdW1lbnQsXG4gICAgICBhY3RpdmVFbGVtZW50ID0gX2RvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7IC8vIEB0cy1pZ25vcmVcblxuICBpZiAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50LmJsdXIgJiYgYWN0aXZlRWxlbWVudC5fdGlwcHkpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cbn1cbi8qKlxuICogQWRkcyB0aGUgbmVlZGVkIGdsb2JhbCBldmVudCBsaXN0ZW5lcnNcbiAqL1xuXG5mdW5jdGlvbiBiaW5kR2xvYmFsRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25Eb2N1bWVudENsaWNrLCB0cnVlKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uRG9jdW1lbnRUb3VjaCwgUEFTU0lWRSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgb25XaW5kb3dCbHVyKTtcbn1cblxudmFyIGtleXMgPSBPYmplY3Qua2V5cyhEZWZhdWx0cyk7XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIG9wdGlvbmFsIHByb3BzIGZyb20gZGF0YS10aXBweS0qIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gZ2V0RGF0YUF0dHJpYnV0ZU9wdGlvbnMocmVmZXJlbmNlKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICB2YXIgdmFsdWVBc1N0cmluZyA9IChyZWZlcmVuY2UuZ2V0QXR0cmlidXRlKFwiZGF0YS10aXBweS1cIi5jb25jYXQoa2V5KSkgfHwgJycpLnRyaW0oKTtcblxuICAgIGlmICghdmFsdWVBc1N0cmluZykge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGFjY1trZXldID0gdmFsdWVBc1N0cmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYWNjW2tleV0gPSBKU09OLnBhcnNlKHZhbHVlQXNTdHJpbmcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBhY2Nba2V5XSA9IHZhbHVlQXNTdHJpbmc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuLyoqXG4gKiBQb2x5ZmlsbHMgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIChwbGFpbiBvYmplY3QpIHdpdGggRWxlbWVudC5wcm90b3R5cGUgcHJvcHNcbiAqIE11dGF0aW5nIGJlY2F1c2UgRE9NIGVsZW1lbnRzIGFyZSBtdXRhdGVkLCBhZGRzIGBfdGlwcHlgIHByb3BlcnR5XG4gKiBAcGFyYW0ge09iamVjdH0gdmlydHVhbFJlZmVyZW5jZVxuICovXG5cbmZ1bmN0aW9uIHBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXModmlydHVhbFJlZmVyZW5jZSkge1xuICB2YXIgcG9seWZpbGxzID0ge1xuICAgIGlzVmlydHVhbDogdHJ1ZSxcbiAgICBhdHRyaWJ1dGVzOiB2aXJ0dWFsUmVmZXJlbmNlLmF0dHJpYnV0ZXMgfHwge30sXG4gICAgc2V0QXR0cmlidXRlOiBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSkge1xuICAgICAgdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcbiAgICB9LFxuICAgIGdldEF0dHJpYnV0ZTogZnVuY3Rpb24gZ2V0QXR0cmlidXRlKGtleSkge1xuICAgICAgcmV0dXJuIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlc1trZXldO1xuICAgIH0sXG4gICAgcmVtb3ZlQXR0cmlidXRlOiBmdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUoa2V5KSB7XG4gICAgICBkZWxldGUgdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzW2tleV07XG4gICAgfSxcbiAgICBoYXNBdHRyaWJ1dGU6IGZ1bmN0aW9uIGhhc0F0dHJpYnV0ZShrZXkpIHtcbiAgICAgIHJldHVybiBrZXkgaW4gdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICBjbGFzc0xpc3Q6IHtcbiAgICAgIGNsYXNzTmFtZXM6IHt9LFxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQoa2V5KSB7XG4gICAgICAgIHZpcnR1YWxSZWZlcmVuY2UuY2xhc3NMaXN0LmNsYXNzTmFtZXNba2V5XSA9IHRydWU7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoa2V5KSB7XG4gICAgICAgIGRlbGV0ZSB2aXJ0dWFsUmVmZXJlbmNlLmNsYXNzTGlzdC5jbGFzc05hbWVzW2tleV07XG4gICAgICB9LFxuICAgICAgY29udGFpbnM6IGZ1bmN0aW9uIGNvbnRhaW5zKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5IGluIHZpcnR1YWxSZWZlcmVuY2UuY2xhc3NMaXN0LmNsYXNzTmFtZXM7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwb2x5ZmlsbHMpIHtcbiAgICB2aXJ0dWFsUmVmZXJlbmNlW2tleV0gPSBwb2x5ZmlsbHNba2V5XTtcbiAgfVxufVxuXG4vKipcbiAqIEV2YWx1YXRlcyB0aGUgcHJvcHMgb2JqZWN0IGJ5IG1lcmdpbmcgZGF0YSBhdHRyaWJ1dGVzIGFuZFxuICogZGlzYWJsaW5nIGNvbmZsaWN0aW5nIG9wdGlvbnMgd2hlcmUgbmVjZXNzYXJ5XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gZXZhbHVhdGVQcm9wcyhyZWZlcmVuY2UsIHByb3BzKSB7XG4gIHZhciBvdXQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb250ZW50OiBldmFsdWF0ZVZhbHVlKHByb3BzLmNvbnRlbnQsIFtyZWZlcmVuY2VdKVxuICB9LCBwcm9wcy5pZ25vcmVBdHRyaWJ1dGVzID8ge30gOiBnZXREYXRhQXR0cmlidXRlT3B0aW9ucyhyZWZlcmVuY2UpKTtcblxuICBpZiAob3V0LmFycm93IHx8IGlzVUNCcm93c2VyKSB7XG4gICAgb3V0LmFuaW1hdGVGaWxsID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBWYWxpZGF0ZXMgYW4gb2JqZWN0IG9mIG9wdGlvbnMgd2l0aCB0aGUgdmFsaWQgZGVmYXVsdCBwcm9wcyBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdHNcbiAqL1xuXG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGRlZmF1bHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkoZGVmYXVsdHMsIG9wdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlt0aXBweV06IGBcIi5jb25jYXQob3B0aW9uLCBcImAgaXMgbm90IGEgdmFsaWQgb3B0aW9uXCIpKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgaWRDb3VudGVyID0gMTtcbi8qKlxuICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIFRpcHB5IG9iamVjdC4gV2UncmUgdXNpbmcgYSBjbG9zdXJlIHBhdHRlcm4gaW5zdGVhZCBvZlxuICogYSBjbGFzcyBzbyB0aGF0IHRoZSBleHBvc2VkIG9iamVjdCBBUEkgaXMgY2xlYW4gd2l0aG91dCBwcml2YXRlIG1lbWJlcnNcbiAqIHByZWZpeGVkIHdpdGggYF9gLlxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2xsZWN0aW9uUHJvcHNcbiAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVUaXBweShyZWZlcmVuY2UsIGNvbGxlY3Rpb25Qcm9wcykge1xuICB2YXIgcHJvcHMgPSBldmFsdWF0ZVByb3BzKHJlZmVyZW5jZSwgY29sbGVjdGlvblByb3BzKTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBzaG91bGRuJ3QgaGF2ZSBtdWx0aXBsZSB0aXBweXMsIHJldHVybiBudWxsIGVhcmx5XG4gIC8vIEB0cy1pZ25vcmVcblxuICBpZiAoIXByb3BzLm11bHRpcGxlICYmIHJlZmVyZW5jZS5fdGlwcHkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PSDwn5SSIFByaXZhdGUgbWVtYmVycyDwn5SSID09PT09PT09PT09PT09PT09PT09PT09ICovXG4gIC8vIFRoZSBsYXN0IHRyaWdnZXIgZXZlbnQgb2JqZWN0IHRoYXQgY2F1c2VkIHRoZSB0aXBweSB0byBzaG93XG5cblxuICB2YXIgbGFzdFRyaWdnZXJFdmVudCA9IHt9OyAvLyBUaGUgbGFzdCBtb3VzZW1vdmUgZXZlbnQgb2JqZWN0IGNyZWF0ZWQgYnkgdGhlIGRvY3VtZW50IG1vdXNlbW92ZSBldmVudFxuXG4gIHZhciBsYXN0TW91c2VNb3ZlRXZlbnQgPSBudWxsOyAvLyBUaW1lb3V0IGNyZWF0ZWQgYnkgdGhlIHNob3cgZGVsYXlcblxuICB2YXIgc2hvd1RpbWVvdXRJZCA9IDA7IC8vIFRpbWVvdXQgY3JlYXRlZCBieSB0aGUgaGlkZSBkZWxheVxuXG4gIHZhciBoaWRlVGltZW91dElkID0gMDsgLy8gRmxhZyB0byBkZXRlcm1pbmUgaWYgdGhlIHRpcHB5IGlzIHNjaGVkdWxlZCB0byBzaG93IGR1ZSB0byB0aGUgc2hvdyB0aW1lb3V0XG5cbiAgdmFyIGlzU2NoZWR1bGVkVG9TaG93ID0gZmFsc2U7IC8vIFRoZSBjdXJyZW50IGB0cmFuc2l0aW9uZW5kYCBjYWxsYmFjayByZWZlcmVuY2VcblxuICB2YXIgdHJhbnNpdGlvbkVuZExpc3RlbmVyID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZExpc3RlbmVyKCkge307IC8vIEFycmF5IG9mIGV2ZW50IGxpc3RlbmVycyBjdXJyZW50bHkgYXR0YWNoZWQgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG5cblxuICB2YXIgbGlzdGVuZXJzID0gW107IC8vIFByaXZhdGUgb25Nb3VzZU1vdmUgaGFuZGxlciByZWZlcmVuY2UsIGRlYm91bmNlZCBvciBub3RcblxuICB2YXIgZGVib3VuY2VkT25Nb3VzZU1vdmUgPSBwcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlID4gMCA/IGRlYm91bmNlKG9uTW91c2VNb3ZlLCBwcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlKSA6IG9uTW91c2VNb3ZlOyAvLyBOb2RlIHRoZSB0aXBweSBpcyBjdXJyZW50bHkgYXBwZW5kZWQgdG9cblxuICB2YXIgcGFyZW50Tm9kZSA9IG51bGw7XG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09IPCflJEgUHVibGljIG1lbWJlcnMg8J+UkSA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuICAvLyBpZCB1c2VkIGZvciB0aGUgYGFyaWEtZGVzY3JpYmVkYnlgIC8gYGFyaWEtbGFiZWxsZWRieWAgYXR0cmlidXRlXG5cbiAgdmFyIGlkID0gaWRDb3VudGVyKys7IC8vIFBvcHBlciBlbGVtZW50IHJlZmVyZW5jZVxuXG4gIHZhciBwb3BwZXIgPSBjcmVhdGVQb3BwZXJFbGVtZW50KGlkLCBwcm9wcyk7IC8vIFByZXZlbnQgYSB0aXBweSB3aXRoIGEgZGVsYXkgZnJvbSBoaWRpbmcgaWYgdGhlIGN1cnNvciBsZWZ0IHRoZW4gcmV0dXJuZWRcbiAgLy8gYmVmb3JlIGl0IHN0YXJ0ZWQgaGlkaW5nXG5cbiAgcG9wcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlICYmIGxhc3RUcmlnZ2VyRXZlbnQudHlwZSA9PT0gJ21vdXNlZW50ZXInKSB7XG4gICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHBvcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBsYXN0VHJpZ2dlckV2ZW50LnR5cGUgPT09ICdtb3VzZWVudGVyJykge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgIH1cbiAgfSk7IC8vIFBvcHBlciBlbGVtZW50IGNoaWxkcmVuOiB7IGFycm93LCBiYWNrZHJvcCwgY29udGVudCwgdG9vbHRpcCB9XG5cbiAgdmFyIHBvcHBlckNoaWxkcmVuID0gZ2V0Q2hpbGRyZW4ocG9wcGVyKTtcbiAgdmFyIHN0YXRlID0ge1xuICAgIC8vIElzIHRoZSBpbnN0YW5jZSBjdXJyZW50bHkgZW5hYmxlZD9cbiAgICBpc0VuYWJsZWQ6IHRydWUsXG4gICAgLy8gSXMgdGhlIHRpcHB5IGN1cnJlbnRseSBzaG93aW5nIGFuZCBub3QgdHJhbnNpdGlvbmluZyBvdXQ/XG4gICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAvLyBIYXMgdGhlIGluc3RhbmNlIGJlZW4gZGVzdHJveWVkP1xuICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAvLyBJcyB0aGUgdGlwcHkgY3VycmVudGx5IG1vdW50ZWQgdG8gdGhlIERPTT9cbiAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgIC8vIEhhcyB0aGUgdGlwcHkgZmluaXNoZWQgdHJhbnNpdGlvbmluZyBpbj9cbiAgICBpc1Nob3duOiBmYWxzZSAvLyBQb3BwZXIuanMgaW5zdGFuY2UgZm9yIHRoZSB0aXBweSBpcyBsYXppbHkgY3JlYXRlZFxuXG4gIH07XG4gIHZhciBwb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gIHZhciBpbnN0YW5jZSA9IHtcbiAgICAvLyBwcm9wZXJ0aWVzXG4gICAgaWQ6IGlkLFxuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgIHBvcHBlcjogcG9wcGVyLFxuICAgIHBvcHBlckNoaWxkcmVuOiBwb3BwZXJDaGlsZHJlbixcbiAgICBwb3BwZXJJbnN0YW5jZTogcG9wcGVySW5zdGFuY2UsXG4gICAgcHJvcHM6IHByb3BzLFxuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAvLyBtZXRob2RzXG4gICAgY2xlYXJEZWxheVRpbWVvdXRzOiBjbGVhckRlbGF5VGltZW91dHMsXG4gICAgc2V0OiBzZXQsXG4gICAgc2V0Q29udGVudDogc2V0Q29udGVudCQkMSxcbiAgICBzaG93OiBzaG93LFxuICAgIGhpZGU6IGhpZGUsXG4gICAgZW5hYmxlOiBlbmFibGUsXG4gICAgZGlzYWJsZTogZGlzYWJsZSxcbiAgICBkZXN0cm95OiBkZXN0cm95XG4gIH07XG4gIGFkZFRyaWdnZXJzVG9SZWZlcmVuY2UoKTtcblxuICBpZiAoIXByb3BzLmxhenkpIHtcbiAgICBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgaWYgKHByb3BzLnNob3dPbkluaXQpIHtcbiAgICBzY2hlZHVsZVNob3coKTtcbiAgfSAvLyBFbnN1cmUgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGNhbiByZWNlaXZlIGZvY3VzIChhbmQgaXMgbm90IGEgZGVsZWdhdGUpXG5cblxuICBpZiAocHJvcHMuYTExeSAmJiAhcHJvcHMudGFyZ2V0ICYmICFjYW5SZWNlaXZlRm9jdXMocmVmZXJlbmNlKSkge1xuICAgIHJlZmVyZW5jZS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcbiAgfSAvLyBJbnN0YWxsIHNob3J0Y3V0c1xuICAvLyBAdHMtaWdub3JlXG5cblxuICByZWZlcmVuY2UuX3RpcHB5ID0gaW5zdGFuY2U7IC8vIEB0cy1pZ25vcmVcblxuICBwb3BwZXIuX3RpcHB5ID0gaW5zdGFuY2U7XG4gIHJldHVybiBpbnN0YW5jZTtcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT0g8J+UkiBQcml2YXRlIG1ldGhvZHMg8J+UkiA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qKlxuICAgKiBQb3NpdGlvbnMgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIG5lYXIgdGhlIGN1cnNvclxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IoZXZlbnQpIHtcbiAgICB2YXIgX2xhc3RNb3VzZU1vdmVFdmVudCA9IGxhc3RNb3VzZU1vdmVFdmVudCA9IGV2ZW50LFxuICAgICAgICBjbGllbnRYID0gX2xhc3RNb3VzZU1vdmVFdmVudC5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gX2xhc3RNb3VzZU1vdmVFdmVudC5jbGllbnRZO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRW5zdXJlIHZpcnR1YWwgcmVmZXJlbmNlIGlzIHBhZGRlZCB0byBwcmV2ZW50IHRvb2x0aXAgZnJvbVxuICAgIC8vIG92ZXJmbG93aW5nLiBNYXliZSBQb3BwZXIuanMgaXNzdWU/XG5cblxuICAgIHZhciBwbGFjZW1lbnQgPSBnZXRQb3BwZXJQbGFjZW1lbnQoaW5zdGFuY2UucG9wcGVyKTtcbiAgICB2YXIgcGFkZGluZyA9IGluc3RhbmNlLnByb3BzLmFycm93ID8gUEFERElORyArIChpbnN0YW5jZS5wcm9wcy5hcnJvd1R5cGUgPT09ICdyb3VuZCcgPyAxOCA6IDE2KSA6IFBBRERJTkc7XG4gICAgdmFyIGlzVmVydGljYWxQbGFjZW1lbnQgPSBpbmNsdWRlcyhbJ3RvcCcsICdib3R0b20nXSwgcGxhY2VtZW50KTtcbiAgICB2YXIgaXNIb3Jpem9udGFsUGxhY2VtZW50ID0gaW5jbHVkZXMoWydsZWZ0JywgJ3JpZ2h0J10sIHBsYWNlbWVudCk7IC8vIFRvcCAvIGxlZnQgYm91bmRhcnlcblxuICAgIHZhciB4ID0gaXNWZXJ0aWNhbFBsYWNlbWVudCA/IE1hdGgubWF4KHBhZGRpbmcsIGNsaWVudFgpIDogY2xpZW50WDtcbiAgICB2YXIgeSA9IGlzSG9yaXpvbnRhbFBsYWNlbWVudCA/IE1hdGgubWF4KHBhZGRpbmcsIGNsaWVudFkpIDogY2xpZW50WTsgLy8gQm90dG9tIC8gcmlnaHQgYm91bmRhcnlcblxuICAgIGlmIChpc1ZlcnRpY2FsUGxhY2VtZW50ICYmIHggPiBwYWRkaW5nKSB7XG4gICAgICB4ID0gTWF0aC5taW4oY2xpZW50WCwgd2luZG93LmlubmVyV2lkdGggLSBwYWRkaW5nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNIb3Jpem9udGFsUGxhY2VtZW50ICYmIHkgPiBwYWRkaW5nKSB7XG4gICAgICB5ID0gTWF0aC5taW4oY2xpZW50WSwgd2luZG93LmlubmVySGVpZ2h0IC0gcGFkZGluZyk7XG4gICAgfVxuXG4gICAgdmFyIHJlY3QgPSBpbnN0YW5jZS5yZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdmFyIGZvbGxvd0N1cnNvciA9IGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvcjtcbiAgICB2YXIgaXNIb3Jpem9udGFsID0gZm9sbG93Q3Vyc29yID09PSAnaG9yaXpvbnRhbCc7XG4gICAgdmFyIGlzVmVydGljYWwgPSBmb2xsb3dDdXJzb3IgPT09ICd2ZXJ0aWNhbCc7XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UucmVmZXJlbmNlID0ge1xuICAgICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0OiBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgIHRvcDogaXNIb3Jpem9udGFsID8gcmVjdC50b3AgOiB5LFxuICAgICAgICAgIGJvdHRvbTogaXNIb3Jpem9udGFsID8gcmVjdC5ib3R0b20gOiB5LFxuICAgICAgICAgIGxlZnQ6IGlzVmVydGljYWwgPyByZWN0LmxlZnQgOiB4LFxuICAgICAgICAgIHJpZ2h0OiBpc1ZlcnRpY2FsID8gcmVjdC5yaWdodCA6IHhcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBjbGllbnRXaWR0aDogMCxcbiAgICAgIGNsaWVudEhlaWdodDogMFxuICAgIH07XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcblxuICAgIGlmIChmb2xsb3dDdXJzb3IgPT09ICdpbml0aWFsJyAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSB0aXBweSBpbnN0YW5jZSBmb3IgYSBkZWxlZ2F0ZSB3aGVuIGl0J3MgYmVlbiB0cmlnZ2VyZWRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBjcmVhdGVEZWxlZ2F0ZUNoaWxkVGlwcHkoZXZlbnQpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIHRhcmdldEVsID0gY2xvc2VzdChldmVudC50YXJnZXQsIGluc3RhbmNlLnByb3BzLnRhcmdldCk7IC8vIEB0cy1pZ25vcmVcblxuICAgIGlmICh0YXJnZXRFbCAmJiAhdGFyZ2V0RWwuX3RpcHB5KSB7XG4gICAgICBjcmVhdGVUaXBweSh0YXJnZXRFbCwgX2V4dGVuZHMoe30sIGluc3RhbmNlLnByb3BzLCB7XG4gICAgICAgIGNvbnRlbnQ6IGV2YWx1YXRlVmFsdWUoY29sbGVjdGlvblByb3BzLmNvbnRlbnQsIFt0YXJnZXRFbF0pLFxuICAgICAgICBhcHBlbmRUbzogY29sbGVjdGlvblByb3BzLmFwcGVuZFRvLFxuICAgICAgICB0YXJnZXQ6ICcnLFxuICAgICAgICBzaG93T25Jbml0OiB0cnVlXG4gICAgICB9KSk7XG4gICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0dXAgYmVmb3JlIHNob3coKSBpcyBpbnZva2VkIChkZWxheXMsIGV0Yy4pXG4gICAqIEBwYXJhbSB7RXZlbnR9IFtldmVudF1cbiAgICovXG5cblxuICBmdW5jdGlvbiBzY2hlZHVsZVNob3coZXZlbnQpIHtcbiAgICBjbGVhckRlbGF5VGltZW91dHMoKTtcblxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElzIGEgZGVsZWdhdGUsIGNyZWF0ZSBhbiBpbnN0YW5jZSBmb3IgdGhlIGNoaWxkIHRhcmdldFxuXG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMudGFyZ2V0KSB7XG4gICAgICByZXR1cm4gY3JlYXRlRGVsZWdhdGVDaGlsZFRpcHB5KGV2ZW50KTtcbiAgICB9XG5cbiAgICBpc1NjaGVkdWxlZFRvU2hvdyA9IHRydWU7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMud2FpdCkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLnByb3BzLndhaXQoaW5zdGFuY2UsIGV2ZW50KTtcbiAgICB9IC8vIElmIHRoZSB0b29sdGlwIGhhcyBhIGRlbGF5LCB3ZSBuZWVkIHRvIGJlIGxpc3RlbmluZyB0byB0aGUgbW91c2Vtb3ZlIGFzXG4gICAgLy8gc29vbiBhcyB0aGUgdHJpZ2dlciBldmVudCBpcyBmaXJlZCwgc28gdGhhdCBpdCdzIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uXG4gICAgLy8gdXBvbiBtb3VudC5cbiAgICAvLyBFZGdlIGNhc2U6IGlmIHRoZSB0b29sdGlwIGlzIHN0aWxsIG1vdW50ZWQsIGJ1dCB0aGVuIHNjaGVkdWxlU2hvdygpIGlzXG4gICAgLy8gY2FsbGVkLCBpdCBjYXVzZXMgYSBqdW1wLlxuXG5cbiAgICBpZiAoaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSAmJiAhaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKTtcbiAgICB9XG5cbiAgICB2YXIgZGVsYXkgPSBnZXRWYWx1ZShpbnN0YW5jZS5wcm9wcy5kZWxheSwgMCwgRGVmYXVsdHMuZGVsYXkpO1xuXG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBzaG93VGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNob3coKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0dXAgYmVmb3JlIGhpZGUoKSBpcyBpbnZva2VkIChkZWxheXMsIGV0Yy4pXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVIaWRlKCkge1xuICAgIGNsZWFyRGVsYXlUaW1lb3V0cygpO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybiByZW1vdmVGb2xsb3dDdXJzb3JMaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIGlzU2NoZWR1bGVkVG9TaG93ID0gZmFsc2U7XG4gICAgdmFyIGRlbGF5ID0gZ2V0VmFsdWUoaW5zdGFuY2UucHJvcHMuZGVsYXksIDEsIERlZmF1bHRzLmRlbGF5KTtcblxuICAgIGlmIChkZWxheSkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaGlkZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGZvbGxvdyBjdXJzb3IgbGlzdGVuZXJcbiAgICovXG5cblxuICBmdW5jdGlvbiByZW1vdmVGb2xsb3dDdXJzb3JMaXN0ZW5lcigpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYW5zIHVwIG9sZCBsaXN0ZW5lcnNcbiAgICovXG5cblxuICBmdW5jdGlvbiBjbGVhbnVwT2xkTW91c2VMaXN0ZW5lcnMoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgc2NoZWR1bGVIaWRlKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkZWJvdW5jZWRPbk1vdXNlTW92ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgdXBvbiB0cmlnZ2VyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25UcmlnZ2VyKGV2ZW50KSB7XG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQgfHwgaXNFdmVudExpc3RlbmVyU3RvcHBlZChldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgbGFzdFRyaWdnZXJFdmVudCA9IGV2ZW50O1xuXG4gICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGxhc3RNb3VzZU1vdmVFdmVudCA9IGV2ZW50O1xuICAgICAgfVxuICAgIH0gLy8gVG9nZ2xlIHNob3cvaGlkZSB3aGVuIGNsaWNraW5nIGNsaWNrLXRyaWdnZXJlZCB0b29sdGlwc1xuXG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJyAmJiBpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayAhPT0gZmFsc2UgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICBzY2hlZHVsZUhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVTaG93KGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIHVzZWQgZm9yIGludGVyYWN0aXZlIHRvb2x0aXBzIHRvIGRldGVjdCB3aGVuIHRoZXkgc2hvdWxkXG4gICAqIGhpZGVcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgdmFyIHJlZmVyZW5jZVRoZUN1cnNvcklzT3ZlciA9IGNsb3Nlc3RDYWxsYmFjayggLy8gQHRzLWlnbm9yZVxuICAgIGV2ZW50LnRhcmdldCwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gZWwuX3RpcHB5O1xuICAgIH0pO1xuICAgIHZhciBpc0N1cnNvck92ZXJQb3BwZXIgPSAvLyBAdHMtaWdub3JlXG4gICAgY2xvc2VzdChldmVudC50YXJnZXQsIFNlbGVjdG9ycy5QT1BQRVIpID09PSBpbnN0YW5jZS5wb3BwZXI7XG4gICAgdmFyIGlzQ3Vyc29yT3ZlclJlZmVyZW5jZSA9IHJlZmVyZW5jZVRoZUN1cnNvcklzT3ZlciA9PT0gaW5zdGFuY2UucmVmZXJlbmNlO1xuXG4gICAgaWYgKGlzQ3Vyc29yT3ZlclBvcHBlciB8fCBpc0N1cnNvck92ZXJSZWZlcmVuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNDdXJzb3JPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIoZ2V0UG9wcGVyUGxhY2VtZW50KGluc3RhbmNlLnBvcHBlciksIGluc3RhbmNlLnBvcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgZXZlbnQsIGluc3RhbmNlLnByb3BzKSkge1xuICAgICAgY2xlYW51cE9sZE1vdXNlTGlzdGVuZXJzKCk7XG4gICAgICBzY2hlZHVsZUhpZGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgdXBvbiBtb3VzZWxlYXZlXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoZXZlbnQpIHtcbiAgICBpZiAoaXNFdmVudExpc3RlbmVyU3RvcHBlZChldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHNjaGVkdWxlSGlkZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkZWJvdW5jZWRPbk1vdXNlTW92ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVIaWRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgdXBvbiBibHVyXG4gICAqIEBwYXJhbSB7Rm9jdXNFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkJsdXIoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBpbnN0YW5jZS5yZWZlcmVuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgZXZlbnQucmVsYXRlZFRhcmdldCAmJiAvLyBAdHMtaWdub3JlXG4gICAgaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVIaWRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgd2hlbiBhIGNoaWxkIHRhcmdldCBpcyB0cmlnZ2VyZWRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkRlbGVnYXRlU2hvdyhldmVudCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoY2xvc2VzdChldmVudC50YXJnZXQsIGluc3RhbmNlLnByb3BzLnRhcmdldCkpIHtcbiAgICAgIHNjaGVkdWxlU2hvdyhldmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lciBpbnZva2VkIHdoZW4gYSBjaGlsZCB0YXJnZXQgc2hvdWxkIGhpZGVcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkRlbGVnYXRlSGlkZShldmVudCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoY2xvc2VzdChldmVudC50YXJnZXQsIGluc3RhbmNlLnByb3BzLnRhcmdldCkpIHtcbiAgICAgIHNjaGVkdWxlSGlkZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBhbiBldmVudCBsaXN0ZW5lciBzaG91bGQgc3RvcCBmdXJ0aGVyIGV4ZWN1dGlvbiBkdWUgdG8gdGhlXG4gICAqIGB0b3VjaEhvbGRgIG9wdGlvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGlzRXZlbnRMaXN0ZW5lclN0b3BwZWQoZXZlbnQpIHtcbiAgICB2YXIgc3VwcG9ydHNUb3VjaCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdztcbiAgICB2YXIgaXNUb3VjaEV2ZW50ID0gaW5jbHVkZXMoZXZlbnQudHlwZSwgJ3RvdWNoJyk7XG4gICAgdmFyIHRvdWNoSG9sZCA9IGluc3RhbmNlLnByb3BzLnRvdWNoSG9sZDtcbiAgICByZXR1cm4gc3VwcG9ydHNUb3VjaCAmJiBpc1VzaW5nVG91Y2ggJiYgdG91Y2hIb2xkICYmICFpc1RvdWNoRXZlbnQgfHwgaXNVc2luZ1RvdWNoICYmICF0b3VjaEhvbGQgJiYgaXNUb3VjaEV2ZW50O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBwb3BwZXIgaW5zdGFuY2UgZm9yIHRoZSBpbnN0YW5jZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlckluc3RhbmNlKCkge1xuICAgIHZhciBwb3BwZXJPcHRpb25zID0gaW5zdGFuY2UucHJvcHMucG9wcGVyT3B0aW9ucztcbiAgICB2YXIgX2luc3RhbmNlJHBvcHBlckNoaWxkID0gaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4sXG4gICAgICAgIHRvb2x0aXAgPSBfaW5zdGFuY2UkcG9wcGVyQ2hpbGQudG9vbHRpcCxcbiAgICAgICAgYXJyb3cgPSBfaW5zdGFuY2UkcG9wcGVyQ2hpbGQuYXJyb3c7XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UgPSBuZXcgUG9wcGVyKGluc3RhbmNlLnJlZmVyZW5jZSwgaW5zdGFuY2UucG9wcGVyLCBfZXh0ZW5kcyh7XG4gICAgICBwbGFjZW1lbnQ6IGluc3RhbmNlLnByb3BzLnBsYWNlbWVudFxuICAgIH0sIHBvcHBlck9wdGlvbnMsIHtcbiAgICAgIG1vZGlmaWVyczogX2V4dGVuZHMoe30sIHBvcHBlck9wdGlvbnMgPyBwb3BwZXJPcHRpb25zLm1vZGlmaWVycyA6IHt9LCB7XG4gICAgICAgIHByZXZlbnRPdmVyZmxvdzogX2V4dGVuZHMoe1xuICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiBpbnN0YW5jZS5wcm9wcy5ib3VuZGFyeSxcbiAgICAgICAgICBwYWRkaW5nOiBQQURESU5HXG4gICAgICAgIH0sIGdldE1vZGlmaWVyKHBvcHBlck9wdGlvbnMsICdwcmV2ZW50T3ZlcmZsb3cnKSksXG4gICAgICAgIGFycm93OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgZWxlbWVudDogYXJyb3csXG4gICAgICAgICAgZW5hYmxlZDogISFhcnJvd1xuICAgICAgICB9LCBnZXRNb2RpZmllcihwb3BwZXJPcHRpb25zLCAnYXJyb3cnKSksXG4gICAgICAgIGZsaXA6IF9leHRlbmRzKHtcbiAgICAgICAgICBlbmFibGVkOiBpbnN0YW5jZS5wcm9wcy5mbGlwLFxuICAgICAgICAgIC8vIFRoZSB0b29sdGlwIGlzIG9mZnNldCBieSAxMHB4IGZyb20gdGhlIHBvcHBlciBpbiBDU1MsXG4gICAgICAgICAgLy8gd2UgbmVlZCB0byBhY2NvdW50IGZvciBpdHMgZGlzdGFuY2VcbiAgICAgICAgICBwYWRkaW5nOiBpbnN0YW5jZS5wcm9wcy5kaXN0YW5jZSArIFBBRERJTkcsXG4gICAgICAgICAgYmVoYXZpb3I6IGluc3RhbmNlLnByb3BzLmZsaXBCZWhhdmlvclxuICAgICAgICB9LCBnZXRNb2RpZmllcihwb3BwZXJPcHRpb25zLCAnZmxpcCcpKSxcbiAgICAgICAgb2Zmc2V0OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgb2Zmc2V0OiBpbnN0YW5jZS5wcm9wcy5vZmZzZXRcbiAgICAgICAgfSwgZ2V0TW9kaWZpZXIocG9wcGVyT3B0aW9ucywgJ29mZnNldCcpKVxuICAgICAgfSksXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSkge1xuICAgICAgICBpZiAoaW5zdGFuY2UucHJvcHMuZmxpcCAmJiAhaW5zdGFuY2UucHJvcHMuZmxpcE9uVXBkYXRlKSB7XG4gICAgICAgICAgaWYgKGRhdGEuZmxpcHBlZCkge1xuICAgICAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5wbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKGluc3RhbmNlLnBvcHBlckluc3RhbmNlLm1vZGlmaWVycywgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRQb3BwZXJQbGFjZW1lbnQoaW5zdGFuY2UucG9wcGVyKTtcbiAgICAgICAgdmFyIHN0eWxlcyA9IHRvb2x0aXAuc3R5bGU7IC8vIEFjY291bnQgZm9yIHRoZSBgZGlzdGFuY2VgIG9mZnNldFxuXG4gICAgICAgIHN0eWxlcy50b3AgPSAnJztcbiAgICAgICAgc3R5bGVzLmJvdHRvbSA9ICcnO1xuICAgICAgICBzdHlsZXMubGVmdCA9ICcnO1xuICAgICAgICBzdHlsZXMucmlnaHQgPSAnJztcbiAgICAgICAgc3R5bGVzW2Jhc2VQbGFjZW1lbnRdID0gZ2V0T2Zmc2V0RGlzdGFuY2VJblB4KGluc3RhbmNlLnByb3BzLmRpc3RhbmNlKTsgLy8gQXZvaWQgX2RlZmluZVByb3BlcnR5IGhlbHBlciBmdW5jdGlvbiBjcmVhdGVkIGJ5IEJhYmVsXG5cbiAgICAgICAgdmFyIHBhZGRpbmcgPSB7XG4gICAgICAgICAgdG9wOiBQQURESU5HLFxuICAgICAgICAgIGJvdHRvbTogUEFERElORyxcbiAgICAgICAgICBsZWZ0OiBQQURESU5HLFxuICAgICAgICAgIHJpZ2h0OiBQQURESU5HXG4gICAgICAgIH07XG4gICAgICAgIHBhZGRpbmdbYmFzZVBsYWNlbWVudF0gPSBQQURESU5HICsgaW5zdGFuY2UucHJvcHMuZGlzdGFuY2U7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLm1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgICAgICAgfSlbMF0ucGFkZGluZyA9IHBhZGRpbmc7XG5cbiAgICAgICAgaWYgKHBvcHBlck9wdGlvbnMgJiYgcG9wcGVyT3B0aW9ucy5vblVwZGF0ZSkge1xuICAgICAgICAgIHBvcHBlck9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIE1vdW50cyB0aGUgdG9vbHRpcCB0byB0aGUgRE9NLCBjYWxsYmFjayB0byBzaG93IHRvb2x0aXAgaXMgcnVuICoqYWZ0ZXIqKlxuICAgKiBwb3BwZXIncyBwb3NpdGlvbiBoYXMgdXBkYXRlZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG1vdW50KGNhbGxiYWNrKSB7XG4gICAgdmFyIHNob3VsZEVuYWJsZUxpc3RlbmVycyA9ICFoYXNGb2xsb3dDdXJzb3JCZWhhdmlvcigpICYmICEoaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yID09PSAnaW5pdGlhbCcgJiYgaXNVc2luZ1RvdWNoKTtcblxuICAgIGlmICghaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIGNyZWF0ZVBvcHBlckluc3RhbmNlKCk7XG5cbiAgICAgIGlmICghc2hvdWxkRW5hYmxlTGlzdGVuZXJzKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkpIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcblxuICAgICAgICBpZiAoc2hvdWxkRW5hYmxlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKGluc3RhbmNlLnBvcHBlckluc3RhbmNlLm1vZGlmaWVycywgaW5zdGFuY2UucHJvcHMuZmxpcCk7XG4gICAgfSAvLyBJZiB0aGUgaW5zdGFuY2UgcHJldmlvdXNseSBoYWQgZm9sbG93Q3Vyc29yIGJlaGF2aW9yLCBpdCB3aWxsIGJlXG4gICAgLy8gcG9zaXRpb25lZCBpbmNvcnJlY3RseSBpZiB0cmlnZ2VyZWQgYnkgYGZvY3VzYCBhZnRlcndhcmRzLlxuICAgIC8vIFVwZGF0ZSB0aGUgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIHJlYWwgRE9NIGVsZW1lbnRcblxuXG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UucmVmZXJlbmNlID0gaW5zdGFuY2UucmVmZXJlbmNlO1xuICAgIHZhciBhcnJvdyA9IGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmFycm93O1xuXG4gICAgaWYgKGhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkpIHtcbiAgICAgIGlmIChhcnJvdykge1xuICAgICAgICBhcnJvdy5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWxheSA9IGdldFZhbHVlKGluc3RhbmNlLnByb3BzLmRlbGF5LCAwLCBEZWZhdWx0cy5kZWxheSk7XG5cbiAgICAgIGlmIChsYXN0VHJpZ2dlckV2ZW50LnR5cGUpIHtcbiAgICAgICAgcG9zaXRpb25WaXJ0dWFsUmVmZXJlbmNlTmVhckN1cnNvcihkZWxheSAmJiBsYXN0TW91c2VNb3ZlRXZlbnQgPyBsYXN0TW91c2VNb3ZlRXZlbnQgOiBsYXN0VHJpZ2dlckV2ZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFycm93KSB7XG4gICAgICBhcnJvdy5zdHlsZS5tYXJnaW4gPSAnJztcbiAgICB9IC8vIEFsbG93IGZvbGxvd0N1cnNvcjogJ2luaXRpYWwnIG9uIHRvdWNoIGRldmljZXNcblxuXG4gICAgaWYgKGlzVXNpbmdUb3VjaCAmJiBsYXN0TW91c2VNb3ZlRXZlbnQgJiYgaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yID09PSAnaW5pdGlhbCcpIHtcbiAgICAgIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IobGFzdE1vdXNlTW92ZUV2ZW50KTtcblxuICAgICAgaWYgKGFycm93KSB7XG4gICAgICAgIGFycm93LnN0eWxlLm1hcmdpbiA9ICcwJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhZnRlclBvcHBlclBvc2l0aW9uVXBkYXRlcyhpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSwgY2FsbGJhY2spO1xuICAgIHZhciBhcHBlbmRUbyA9IGluc3RhbmNlLnByb3BzLmFwcGVuZFRvO1xuICAgIHBhcmVudE5vZGUgPSBhcHBlbmRUbyA9PT0gJ3BhcmVudCcgPyBpbnN0YW5jZS5yZWZlcmVuY2UucGFyZW50Tm9kZSA6IGV2YWx1YXRlVmFsdWUoYXBwZW5kVG8sIFtpbnN0YW5jZS5yZWZlcmVuY2VdKTtcblxuICAgIGlmICghcGFyZW50Tm9kZS5jb250YWlucyhpbnN0YW5jZS5wb3BwZXIpKSB7XG4gICAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKGluc3RhbmNlLnBvcHBlcik7XG4gICAgICBpbnN0YW5jZS5wcm9wcy5vbk1vdW50KGluc3RhbmNlKTtcbiAgICAgIGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBpbnN0YW5jZSBpcyBpbiBgZm9sbG93Q3Vyc29yYCBtb2RlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciAmJiAhaXNVc2luZ1RvdWNoICYmIGxhc3RUcmlnZ2VyRXZlbnQudHlwZSAhPT0gJ2ZvY3VzJztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdG9vbHRpcCdzIHBvc2l0aW9uIG9uIGVhY2ggYW5pbWF0aW9uIGZyYW1lXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gbWFrZVN0aWNreSgpIHtcbiAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihbaW5zdGFuY2UucG9wcGVyXSwgaXNJRSA/IDAgOiBpbnN0YW5jZS5wcm9wcy51cGRhdGVEdXJhdGlvbik7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpIHtcbiAgICAgIGlmIChpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGVQb3NpdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihbaW5zdGFuY2UucG9wcGVyXSwgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlUG9zaXRpb24oKTtcbiAgfVxuICAvKipcbiAgICogSW52b2tlcyBhIGNhbGxiYWNrIG9uY2UgdGhlIHRvb2x0aXAgaGFzIGZ1bGx5IHRyYW5zaXRpb25lZCBvdXRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uZWRPdXQoZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJiBwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuY29udGFpbnMoaW5zdGFuY2UucG9wcGVyKSkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnZva2VzIGEgY2FsbGJhY2sgb25jZSB0aGUgdG9vbHRpcCBoYXMgZnVsbHkgdHJhbnNpdGlvbmVkIGluXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbmVkSW4oZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBjYWxsYmFjayk7XG4gIH1cbiAgLyoqXG4gICAqIEludm9rZXMgYSBjYWxsYmFjayBvbmNlIHRoZSB0b29sdGlwJ3MgQ1NTIHRyYW5zaXRpb24gZW5kc1xuICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG5cblxuICBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLyoqXG4gICAgICogTGlzdGVuZXIgYWRkZWQgYXMgdGhlIGB0cmFuc2l0aW9uZW5kYCBoYW5kbGVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRvb2x0aXApIHtcbiAgICAgICAgdG9nZ2xlVHJhbnNpdGlvbkVuZExpc3RlbmVyKHRvb2x0aXAsICdyZW1vdmUnLCBsaXN0ZW5lcik7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSAvLyBNYWtlIGNhbGxiYWNrIHN5bmNocm9ub3VzIGlmIGR1cmF0aW9uIGlzIDBcbiAgICAvLyBgdHJhbnNpdGlvbmVuZGAgd29uJ3QgZmlyZSBvdGhlcndpc2VcblxuXG4gICAgaWYgKGR1cmF0aW9uID09PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICB2YXIgdG9vbHRpcCA9IGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXA7XG4gICAgdG9nZ2xlVHJhbnNpdGlvbkVuZExpc3RlbmVyKHRvb2x0aXAsICdyZW1vdmUnLCB0cmFuc2l0aW9uRW5kTGlzdGVuZXIpO1xuICAgIHRvZ2dsZVRyYW5zaXRpb25FbmRMaXN0ZW5lcih0b29sdGlwLCAnYWRkJywgbGlzdGVuZXIpO1xuICAgIHRyYW5zaXRpb25FbmRMaXN0ZW5lciA9IGxpc3RlbmVyO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSByZWZlcmVuY2UgYW5kIHN0b3JlcyBpdCBpbiBgbGlzdGVuZXJzYFxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRUeXBlXG4gICAqIEBwYXJhbSB7RXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdH0gaGFuZGxlclxuICAgKiBAcGFyYW0ge09iamVjdHxCb29sZWFufSBvcHRpb25zXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb24oZXZlbnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgIGluc3RhbmNlLnJlZmVyZW5jZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgbGlzdGVuZXJzLnB1c2goe1xuICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgcmVmZXJlbmNlIGJhc2VkIG9uIHRoZSBgdHJpZ2dlcmAgcHJvcFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGFkZFRyaWdnZXJzVG9SZWZlcmVuY2UoKSB7XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnRvdWNoSG9sZCAmJiAhaW5zdGFuY2UucHJvcHMudGFyZ2V0KSB7XG4gICAgICBvbigndG91Y2hzdGFydCcsIG9uVHJpZ2dlciwgUEFTU0lWRSk7XG4gICAgICBvbigndG91Y2hlbmQnLCBvbk1vdXNlTGVhdmUsIFBBU1NJVkUpO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnByb3BzLnRyaWdnZXIudHJpbSgpLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XG4gICAgICBpZiAoZXZlbnRUeXBlID09PSAnbWFudWFsJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIE5vbi1kZWxlZ2F0ZXNcblxuXG4gICAgICBpZiAoIWluc3RhbmNlLnByb3BzLnRhcmdldCkge1xuICAgICAgICBvbihldmVudFR5cGUsIG9uVHJpZ2dlcik7XG5cbiAgICAgICAgc3dpdGNoIChldmVudFR5cGUpIHtcbiAgICAgICAgICBjYXNlICdtb3VzZWVudGVyJzpcbiAgICAgICAgICAgIG9uKCdtb3VzZWxlYXZlJywgb25Nb3VzZUxlYXZlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnZm9jdXMnOlxuICAgICAgICAgICAgb24oaXNJRSA/ICdmb2N1c291dCcgOiAnYmx1cicsIG9uQmx1cik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRGVsZWdhdGVzXG4gICAgICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XG4gICAgICAgICAgY2FzZSAnbW91c2VlbnRlcic6XG4gICAgICAgICAgICBvbignbW91c2VvdmVyJywgb25EZWxlZ2F0ZVNob3cpO1xuICAgICAgICAgICAgb24oJ21vdXNlb3V0Jywgb25EZWxlZ2F0ZUhpZGUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdmb2N1cyc6XG4gICAgICAgICAgICBvbignZm9jdXNpbicsIG9uRGVsZWdhdGVTaG93KTtcbiAgICAgICAgICAgIG9uKCdmb2N1c291dCcsIG9uRGVsZWdhdGVIaWRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgICAgb24oZXZlbnRUeXBlLCBvbkRlbGVnYXRlU2hvdyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSByZWZlcmVuY2VcbiAgICovXG5cblxuICBmdW5jdGlvbiByZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UoKSB7XG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBldmVudFR5cGUgPSBfcmVmLmV2ZW50VHlwZSxcbiAgICAgICAgICBoYW5kbGVyID0gX3JlZi5oYW5kbGVyLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gICAgICBpbnN0YW5jZS5yZWZlcmVuY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xuICAgIGxpc3RlbmVycyA9IFtdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGlubmVyIGVsZW1lbnRzIHVzZWQgaW4gc2hvdy9oaWRlIG1ldGhvZHNcbiAgICogQHJldHVybiB7SFRNTERpdkVsZW1lbnRbXX1cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRJbm5lckVsZW1lbnRzKCkge1xuICAgIHJldHVybiBbaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4udG9vbHRpcCwgaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uYmFja2Ryb3AsIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmNvbnRlbnRdO1xuICB9XG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09IPCflJEgUHVibGljIG1ldGhvZHMg8J+UkSA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRoZSBpbnN0YW5jZSB0byBhbGxvdyBpdCB0byBzaG93IG9yIGhpZGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGluc3RhbmNlIHRvIGRpc2FsbG93IGl0IHRvIHNob3cgb3IgaGlkZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBwZW5kaW5nIHRpbWVvdXRzIHJlbGF0ZWQgdG8gdGhlIGBkZWxheWAgcHJvcCBpZiBhbnlcbiAgICovXG5cblxuICBmdW5jdGlvbiBjbGVhckRlbGF5VGltZW91dHMoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHNob3dUaW1lb3V0SWQpO1xuICAgIGNsZWFyVGltZW91dChoaWRlVGltZW91dElkKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBuZXcgcHJvcHMgZm9yIHRoZSBpbnN0YW5jZSBhbmQgcmVkcmF3cyB0aGUgdG9vbHRpcFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHNldCgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMsIERlZmF1bHRzKTtcbiAgICB2YXIgcHJldlByb3BzID0gaW5zdGFuY2UucHJvcHM7XG4gICAgdmFyIG5leHRQcm9wcyA9IGV2YWx1YXRlUHJvcHMoaW5zdGFuY2UucmVmZXJlbmNlLCBfZXh0ZW5kcyh7fSwgaW5zdGFuY2UucHJvcHMsIG9wdGlvbnMsIHtcbiAgICAgIGlnbm9yZUF0dHJpYnV0ZXM6IHRydWVcbiAgICB9KSk7XG4gICAgbmV4dFByb3BzLmlnbm9yZUF0dHJpYnV0ZXMgPSBoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCAnaWdub3JlQXR0cmlidXRlcycpID8gb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzIDogcHJldlByb3BzLmlnbm9yZUF0dHJpYnV0ZXM7XG4gICAgaW5zdGFuY2UucHJvcHMgPSBuZXh0UHJvcHM7XG5cbiAgICBpZiAoaGFzT3duUHJvcGVydHkob3B0aW9ucywgJ3RyaWdnZXInKSB8fCBoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCAndG91Y2hIb2xkJykpIHtcbiAgICAgIHJlbW92ZVRyaWdnZXJzRnJvbVJlZmVyZW5jZSgpO1xuICAgICAgYWRkVHJpZ2dlcnNUb1JlZmVyZW5jZSgpO1xuICAgIH1cblxuICAgIGlmIChoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCAnaW50ZXJhY3RpdmVEZWJvdW5jZScpKSB7XG4gICAgICBjbGVhbnVwT2xkTW91c2VMaXN0ZW5lcnMoKTtcbiAgICAgIGRlYm91bmNlZE9uTW91c2VNb3ZlID0gZGVib3VuY2Uob25Nb3VzZU1vdmUsIG9wdGlvbnMuaW50ZXJhY3RpdmVEZWJvdW5jZSk7XG4gICAgfVxuXG4gICAgdXBkYXRlUG9wcGVyRWxlbWVudChpbnN0YW5jZS5wb3BwZXIsIHByZXZQcm9wcywgbmV4dFByb3BzKTtcbiAgICBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbiA9IGdldENoaWxkcmVuKGluc3RhbmNlLnBvcHBlcik7XG5cbiAgICBpZiAoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuXG4gICAgICBpZiAoUE9QUEVSX0lOU1RBTkNFX0RFUEVOREVOQ0lFUy5zb21lKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCBwcm9wKTtcbiAgICAgIH0pKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgY3JlYXRlUG9wcGVySW5zdGFuY2UoKTtcblxuICAgICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciAmJiBsYXN0TW91c2VNb3ZlRXZlbnQpIHtcbiAgICAgICAgICBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKGxhc3RNb3VzZU1vdmVFdmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNob3J0Y3V0IGZvciAuc2V0KHsgY29udGVudDogbmV3Q29udGVudCB9KVxuICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtZW50fEZ1bmN0aW9ufSBjb250ZW50XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2V0Q29udGVudCQkMShjb250ZW50KSB7XG4gICAgc2V0KHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2hvd3MgdGhlIHRvb2x0aXBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2hvdygpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGdldFZhbHVlKGluc3RhbmNlLnByb3BzLmR1cmF0aW9uLCAwLCBEZWZhdWx0cy5kdXJhdGlvblswXSk7XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgfHwgIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCB8fCBpc1VzaW5nVG91Y2ggJiYgIWluc3RhbmNlLnByb3BzLnRvdWNoKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBEZXN0cm95IHRvb2x0aXAgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG5vIGxvbmdlciBvbiB0aGUgRE9NXG5cblxuICAgIGlmICggLy8gQHRzLWlnbm9yZVxuICAgICFoYXNPd25Qcm9wZXJ0eShpbnN0YW5jZS5yZWZlcmVuY2UsICdpc1ZpcnR1YWwnKSAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGluc3RhbmNlLnJlZmVyZW5jZSkpIHtcbiAgICAgIHJldHVybiBkZXN0cm95KCk7XG4gICAgfSAvLyBEbyBub3Qgc2hvdyB0b29sdGlwIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBoYXMgYSBgZGlzYWJsZWRgIGF0dHJpYnV0ZVxuXG5cbiAgICBpZiAoaW5zdGFuY2UucmVmZXJlbmNlLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5vblNob3coaW5zdGFuY2UpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnBvcHBlci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA9IHRydWU7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGluc3RhbmNlLnJlZmVyZW5jZS5jbGFzc0xpc3QuYWRkKCd0aXBweS1hY3RpdmUnKTtcbiAgICB9IC8vIFByZXZlbnQgYSB0cmFuc2l0aW9uIGlmIHRoZSBwb3BwZXIgaXMgYXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudFxuXG5cbiAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihbaW5zdGFuY2UucG9wcGVyLCBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi50b29sdGlwLCBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi5iYWNrZHJvcF0sIDApO1xuICAgIG1vdW50KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gQXJyb3cgd2lsbCBzb21ldGltZXMgbm90IGJlIHBvc2l0aW9uZWQgY29ycmVjdGx5LiBGb3JjZSBhbm90aGVyIHVwZGF0ZVxuXG5cbiAgICAgIGlmICghaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSkge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24oW2luc3RhbmNlLnBvcHBlcl0sIHByb3BzLnVwZGF0ZUR1cmF0aW9uKTtcbiAgICAgIGFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKGdldElubmVyRWxlbWVudHMoKSwgZHVyYXRpb24pO1xuXG4gICAgICBpZiAoaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uYmFja2Ryb3ApIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uY29udGVudC5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSBNYXRoLnJvdW5kKGR1cmF0aW9uIC8gMTIpICsgJ21zJztcbiAgICAgIH1cblxuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLnN0aWNreSkge1xuICAgICAgICBtYWtlU3RpY2t5KCk7XG4gICAgICB9XG5cbiAgICAgIHNldFZpc2liaWxpdHlTdGF0ZShnZXRJbm5lckVsZW1lbnRzKCksICd2aXNpYmxlJyk7XG4gICAgICBvblRyYW5zaXRpb25lZEluKGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXAuY2xhc3NMaXN0LmFkZCgndGlwcHktbm90cmFuc2l0aW9uJyk7XG5cbiAgICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmFyaWEpIHtcbiAgICAgICAgICBpbnN0YW5jZS5yZWZlcmVuY2Uuc2V0QXR0cmlidXRlKFwiYXJpYS1cIi5jb25jYXQoaW5zdGFuY2UucHJvcHMuYXJpYSksIGluc3RhbmNlLnBvcHBlci5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnN0YW5jZS5wcm9wcy5vblNob3duKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhdGUuaXNTaG93biA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSGlkZXMgdGhlIHRvb2x0aXBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaGlkZSgpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGdldFZhbHVlKGluc3RhbmNlLnByb3BzLmR1cmF0aW9uLCAxLCBEZWZhdWx0cy5kdXJhdGlvblsxXSk7XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgfHwgIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5vbkhpZGUoaW5zdGFuY2UpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXAuY2xhc3NMaXN0LnJlbW92ZSgndGlwcHktbm90cmFuc2l0aW9uJyk7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGluc3RhbmNlLnJlZmVyZW5jZS5jbGFzc0xpc3QucmVtb3ZlKCd0aXBweS1hY3RpdmUnKTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5wb3BwZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzU2hvd24gPSBmYWxzZTtcbiAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihnZXRJbm5lckVsZW1lbnRzKCksIGR1cmF0aW9uKTtcbiAgICBzZXRWaXNpYmlsaXR5U3RhdGUoZ2V0SW5uZXJFbGVtZW50cygpLCAnaGlkZGVuJyk7XG4gICAgb25UcmFuc2l0aW9uZWRPdXQoZHVyYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaXNTY2hlZHVsZWRUb1Nob3cpIHtcbiAgICAgICAgcmVtb3ZlRm9sbG93Q3Vyc29yTGlzdGVuZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmFyaWEpIHtcbiAgICAgICAgaW5zdGFuY2UucmVmZXJlbmNlLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtXCIuY29uY2F0KGluc3RhbmNlLnByb3BzLmFyaWEpKTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5vcHRpb25zLnBsYWNlbWVudCA9IGluc3RhbmNlLnByb3BzLnBsYWNlbWVudDtcbiAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaW5zdGFuY2UucG9wcGVyKTtcbiAgICAgIGluc3RhbmNlLnByb3BzLm9uSGlkZGVuKGluc3RhbmNlKTtcbiAgICAgIGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgdG9vbHRpcFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtkZXN0cm95VGFyZ2V0SW5zdGFuY2VzXVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koZGVzdHJveVRhcmdldEluc3RhbmNlcykge1xuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgdGhlIHBvcHBlciBpcyBjdXJyZW50bHkgbW91bnRlZCB0byB0aGUgRE9NLCB3ZSB3YW50IHRvIGVuc3VyZSBpdCBnZXRzXG4gICAgLy8gaGlkZGVuIGFuZCB1bm1vdW50ZWQgaW5zdGFudGx5IHVwb24gZGVzdHJ1Y3Rpb25cblxuXG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgaGlkZSgwKTtcbiAgICB9XG5cbiAgICByZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UoKTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgZGVsZXRlIGluc3RhbmNlLnJlZmVyZW5jZS5fdGlwcHk7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMudGFyZ2V0ICYmIGRlc3Ryb3lUYXJnZXRJbnN0YW5jZXMpIHtcbiAgICAgIGFycmF5RnJvbShpbnN0YW5jZS5yZWZlcmVuY2UucXVlcnlTZWxlY3RvckFsbChpbnN0YW5jZS5wcm9wcy50YXJnZXQpKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQuX3RpcHB5KSB7XG4gICAgICAgICAgY2hpbGQuX3RpcHB5LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogR3JvdXBzIGFuIGFycmF5IG9mIGluc3RhbmNlcyBieSB0YWtpbmcgY29udHJvbCBvZiB0aGVpciBwcm9wcyBkdXJpbmdcbiAqIGNlcnRhaW4gbGlmZWN5Y2xlcy5cbiAqIEBwYXJhbSB7T2JqZWN0W119IGluc3RhbmNlc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZ3JvdXAoaW5zdGFuY2VzKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkZGVsYXkgPSBfcmVmLmRlbGF5LFxuICAgICAgZGVsYXkgPSBfcmVmJGRlbGF5ID09PSB2b2lkIDAgPyBpbnN0YW5jZXNbMF0ucHJvcHMuZGVsYXkgOiBfcmVmJGRlbGF5LFxuICAgICAgX3JlZiRkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb24sXG4gICAgICBkdXJhdGlvbiA9IF9yZWYkZHVyYXRpb24gPT09IHZvaWQgMCA/IDAgOiBfcmVmJGR1cmF0aW9uO1xuXG4gIHZhciBpc0FueVRpcHB5T3BlbiA9IGZhbHNlO1xuICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpbnN0YW5jZS5fb3JpZ2luYWxQcm9wcyA9IHtcbiAgICAgIGR1cmF0aW9uOiBpbnN0YW5jZS5wcm9wcy5kdXJhdGlvbixcbiAgICAgIG9uSGlkZTogaW5zdGFuY2UucHJvcHMub25IaWRlLFxuICAgICAgb25TaG93OiBpbnN0YW5jZS5wcm9wcy5vblNob3csXG4gICAgICBvblNob3duOiBpbnN0YW5jZS5wcm9wcy5vblNob3duXG4gICAgfTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2V0SXNBbnlUaXBweU9wZW4odmFsdWUpIHtcbiAgICBpc0FueVRpcHB5T3BlbiA9IHZhbHVlO1xuICAgIHVwZGF0ZUluc3RhbmNlcygpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25TaG93KGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMub25TaG93KGluc3RhbmNlKTtcblxuICAgIGluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2Uuc2V0KHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uXG4gICAgICB9KTtcbiAgICAgIGluc3RhbmNlLmhpZGUoKTtcbiAgICB9KTtcbiAgICBzZXRJc0FueVRpcHB5T3Blbih0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uSGlkZShpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLm9uSGlkZShpbnN0YW5jZSk7XG5cbiAgICBzZXRJc0FueVRpcHB5T3BlbihmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblNob3duKGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMub25TaG93bihpbnN0YW5jZSk7XG5cbiAgICBpbnN0YW5jZS5zZXQoe1xuICAgICAgZHVyYXRpb246IGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLmR1cmF0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVJbnN0YW5jZXMoKSB7XG4gICAgaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5zZXQoe1xuICAgICAgICBvblNob3c6IG9uU2hvdyxcbiAgICAgICAgb25TaG93bjogb25TaG93bixcbiAgICAgICAgb25IaWRlOiBvbkhpZGUsXG4gICAgICAgIGRlbGF5OiBpc0FueVRpcHB5T3BlbiA/IFswLCBBcnJheS5pc0FycmF5KGRlbGF5KSA/IGRlbGF5WzFdIDogZGVsYXldIDogZGVsYXksXG4gICAgICAgIGR1cmF0aW9uOiBpc0FueVRpcHB5T3BlbiA/IGR1cmF0aW9uIDogaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMuZHVyYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlSW5zdGFuY2VzKCk7XG59XG5cbnZhciBnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kID0gZmFsc2U7XG4vKipcbiAqIEV4cG9ydGVkIG1vZHVsZVxuICogQHBhcmFtIHtTdHJpbmd8RWxlbWVudHxFbGVtZW50W118Tm9kZUxpc3R8T2JqZWN0fSB0YXJnZXRzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIHRpcHB5KHRhcmdldHMsIG9wdGlvbnMpIHtcbiAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMsIERlZmF1bHRzKTtcblxuICBpZiAoIWdsb2JhbEV2ZW50TGlzdGVuZXJzQm91bmQpIHtcbiAgICBiaW5kR2xvYmFsRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICBnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0cywgb3B0aW9ucyk7IC8vIElmIHRoZXkgYXJlIHNwZWNpZnlpbmcgYSB2aXJ0dWFsIHBvc2l0aW9uaW5nIHJlZmVyZW5jZSwgd2UgbmVlZCB0byBwb2x5ZmlsbFxuICAvLyBzb21lIG5hdGl2ZSBET00gcHJvcHNcblxuXG4gIGlmIChpc0JhcmVWaXJ0dWFsRWxlbWVudCh0YXJnZXRzKSkge1xuICAgIHBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXModGFyZ2V0cyk7XG4gIH1cblxuICB2YXIgaW5zdGFuY2VzID0gZ2V0QXJyYXlPZkVsZW1lbnRzKHRhcmdldHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCByZWZlcmVuY2UpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSByZWZlcmVuY2UgJiYgY3JlYXRlVGlwcHkocmVmZXJlbmNlLCBwcm9wcyk7XG5cbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIGFjYy5wdXNoKGluc3RhbmNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSk7XG4gIHJldHVybiBpc1Npbmd1bGFyKHRhcmdldHMpID8gaW5zdGFuY2VzWzBdIDogaW5zdGFuY2VzO1xufVxuLyoqXG4gKiBTdGF0aWMgcHJvcHNcbiAqL1xuXG5cbnRpcHB5LnZlcnNpb24gPSB2ZXJzaW9uO1xudGlwcHkuZGVmYXVsdHMgPSBEZWZhdWx0cztcbi8qKlxuICogU3RhdGljIG1ldGhvZHNcbiAqL1xuXG50aXBweS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIChwYXJ0aWFsRGVmYXVsdHMpIHtcbiAgT2JqZWN0LmtleXMocGFydGlhbERlZmF1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBEZWZhdWx0c1trZXldID0gcGFydGlhbERlZmF1bHRzW2tleV07XG4gIH0pO1xufTtcblxudGlwcHkuaGlkZUFsbCA9IGhpZGVBbGw7XG50aXBweS5ncm91cCA9IGdyb3VwO1xuLyoqXG4gKiBBdXRvLWluaXQgdG9vbHRpcHMgZm9yIGVsZW1lbnRzIHdpdGggYSBgZGF0YS10aXBweT1cIi4uLlwiYCBhdHRyaWJ1dGVcbiAqL1xuXG5mdW5jdGlvbiBhdXRvSW5pdCgpIHtcbiAgYXJyYXlGcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRpcHB5XScpKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBjb250ZW50ID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXRpcHB5Jyk7XG5cbiAgICBpZiAoY29udGVudCkge1xuICAgICAgdGlwcHkoZWwsIHtcbiAgICAgICAgY29udGVudDogY29udGVudFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuaWYgKGlzQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGF1dG9Jbml0KTtcbn1cblxuLyoqXG4gKiBJbmplY3RzIGEgc3RyaW5nIG9mIENTUyBzdHlsZXMgdG8gYSBzdHlsZSBub2RlIGluIDxoZWFkPlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1xuICovXG5cbmZ1bmN0aW9uIGluamVjdENTUyhjc3MpIHtcbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgc3R5bGUudGV4dENvbnRlbnQgPSBjc3M7XG4gICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuICAgIHZhciBmaXJzdENoaWxkID0gaGVhZC5maXJzdENoaWxkO1xuXG4gICAgaWYgKGZpcnN0Q2hpbGQpIHtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBmaXJzdENoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICB9XG59XG5cbmluamVjdENTUyhjc3MpO1xuXG5leHBvcnQgZGVmYXVsdCB0aXBweTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmFsbC5qcy5tYXBcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwidmFyc0lnbm9yZVBhdHRlcm5cIjogXCJhc2NlbmRpbmd8ZGVzY2VuZGluZ1wiIH1dICovXG5cbmltcG9ydCBFbGVtZW50IGZyb20gJ0BVSS9lbGVtZW50JztcbmltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMtY29sbGVjdGlvbic7XG5pbXBvcnQgQmFyIGZyb20gJ0BQcm9qZWN0L2NvbXBvbmVudHMvYmFyJztcbmltcG9ydCBTZWxlY3Rpb25zIGZyb20gJy4vc2VsZWN0aW9ucyc7XG5pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG5pbXBvcnQgeyBHVE1QdXNoIH0gZnJvbSAnQFV0aWxzJztcblxuaW1wb3J0IHsgZm9ybWF0VmFsdWUgfSBmcm9tICdAUHJvamVjdC9tZXRob2RzJztcblxuLy8gcGFydGlhbHNcblxuZnVuY3Rpb24gYXNjZW5kaW5nKGtleSA9IG51bGwpIHtcbiAgICByZXR1cm4ga2V5ID09PSBudWxsID8gXG4gICAgICAgIGZ1bmN0aW9uKGEsYil7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhLGIpO1xuICAgICAgICAgICAgYSA9IGEgPT09ICdOL0EnID8gJyEnIDogYTsgLy8gdGhpcyBlbnN1cmVzIG4vYSBpcyBhbHdheXMgZmlyc3RcbiAgICAgICAgICAgIGIgPSBiID09PSAnTi9BJyA/ICchJyA6IGI7XG4gICAgICAgICAgICBhID0gIWlzTmFOKCthKSA/ICthIDogYTsgLy8gY29lcmNpbmcgc3RyaW5naWZpZWQgbnVtYmVycyBpbnRvIG51bWJlcnMgc28gdGhhdCBjb3JyZWN0IG9yZGVyIGNhbiBiZSB0YWtlblxuICAgICAgICAgICAgYiA9ICFpc05hTigrYikgPyArYiA6IGI7XG4gICAgICAgICAgICB2YXIgcnRuID0gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG4gICAgICAgICAgICByZXR1cm4gcnRuO1xuICAgICAgICB9IDpcbiAgICAgICAgZnVuY3Rpb24oYSxiKXtcbiAgICAgICAgICAgIHJldHVybiBhW2tleV0gPCBiW2tleV0gPyAtMSA6IGFba2V5XSA+IGJba2V5XSA/IDEgOiBhW2tleV0gPj0gYltrZXldID8gMCA6IE5hTjtcbiAgICAgICAgfVxufVxuZnVuY3Rpb24gZGVzY2VuZGluZyhrZXkgPSBudWxsKSB7XG4gICAgcmV0dXJuIGtleSA9PT0gbnVsbCA/IFxuICAgICAgICBmdW5jdGlvbihhLGIpe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gYSA8IGIgPyAxIDogYSA+IGIgPyAtMSA6IGEgPj0gYiA/IDAgOiBOYU47XG4gICAgICAgIH0gOlxuICAgICAgICBmdW5jdGlvbihhLGIpe1xuICAgICAgICAgICAgcmV0dXJuIGFba2V5XSA8IGJba2V5XSA/IDEgOiBhW2tleV0gPiBiW2tleV0gPyAtMSA6IGFba2V5XSA+PSBiW2tleV0gPyAwIDogTmFOO1xuICAgICAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWZ0eVN0YXRlVmlldyBleHRlbmRzIEVsZW1lbnQge1xuICAgIFxuICAgIHByZXJlbmRlcigpe1xuICAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIHZpZXcgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0ZpZnR5U3RhdGVWaWV3JztcbiAgICAgICAgdGhpcy5maWVsZCA9ICdkZWJ0X3BlcmNlbnRfU1BJJztcbiAgICAgICAgdGhpcy5iYXJzID0gW107XG4gICAgICAgIHRoaXMuYmFyQ29udGFpbmVycyA9IFtdO1xuICAgICAgICB0aGlzLmxhc3RQb3NpdGlvbnMgPSB7fTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRlZEJhcnMgPSB7fTtcbiAgICAgICAgdGhpcy5ncm91cEJ5Rm4gPSB0aGlzLmdyb3VwQnkgIT09IG51bGwgPyBkID0+IGRbdGhpcy5ncm91cEJ5XSA6IGQgPT4gZCAhPT0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gdGhpcy5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIFNlbGVjdGlvbnMsIGBkaXYuanMtZmlmdHktc3RhdGUtc2VsZWN0aW9uc2AsIHtwYXJlbnQ6IHRoaXMsIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IHRydWUsIHJlbmRlclRvU2VsZWN0b3I6ICcjc2VsZWN0aW9ucy1jb250YWluZXInfSk7XG4gICAgICAgIHRoaXMuc29ydFZhbHVlS2V5ID0gJ3N0YXRlJztcbiAgICAgICAgdGhpcy5zb3J0VmFsdWVzRm4gPSBhc2NlbmRpbmc7XG4gICAgICAgIHRoaXMuZ3JvdXBCeSA9ICdudWxsJztcbiAgICAgICAgdGhpcy5uZXN0RGF0YSgpOyAgICAgICAgXG4gICAgICAgIHRoaXMucHVzaEJhcnMoKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRoaXMuc2VsZWN0aW9ucywgLi4udGhpcy5iYXJzKTtcblxuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3OyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMucmVuZGVyU2VsZWN0aW9ucygpO1xuICAgICAgICB0aGlzLmV4cGxhaW5lcldyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZXhwbGFpbmVyLXdyYXBwZXInKTtcbiAgICAgICAgdGhpcy5maWVsZEV4cGxhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaWVsZC1leHBsYWluZXInKTtcbiAgICAgICAgdGhpcy5ncm91cEV4cGxhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNncm91cC1leHBsYWluZXInKTtcbiAgICAgICAgdGhpcy51cGRhdGVFeHBsYWluZXJUZXh0KCdmaWVsZCcsIHRoaXMuZmllbGQsIHRydWUpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGNoYXJ0cyA9IHRoaXMucmVuZGVyQ2hhcnRzKCk7XG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQoY2hhcnRzKTtcbiAgICAgICBcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIG5lc3REYXRhKCl7XG4gICAgICAgIHRoaXMubmVzdGVkRGF0YSA9IGQzLm5lc3QoKS5rZXkodGhpcy5ncm91cEJ5Rm4pLnNvcnRLZXlzKGFzY2VuZGluZygpKS5zb3J0VmFsdWVzKHRoaXMuc29ydFZhbHVlc0ZuKHRoaXMuc29ydFZhbHVlS2V5KSkuZW50cmllcyh0aGlzLm1vZGVsLmRhdGEpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm5lc3RlZERhdGEpO1xuICAgIH1cbiAgICBwdXNoQmFycygpe1xuICAgICAgICB0aGlzLmJhcnMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5iYXJDb250YWluZXJzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgdGhpcy5uZXN0ZWREYXRhLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgICAgICAgZ3JvdXAudmFsdWVzLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXJzLnB1c2godGhpcy5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIEJhciwgYGRpdi5iYXItc3RhdGUtJHtkLmNvZGV9YCwge3BhcmVudDogdGhpcywgZGF0YToge2QsZmllbGQ6IHRoaXMuZmllbGQsIGNvbG9yOjJ9fSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFyQ29udGFpbmVycy5wdXNoKHRoaXMucGFyZW50LmNyZWF0ZUNvbXBvbmVudCh0aGlzLm1vZGVsLCBFbGVtZW50LCBgZGl2I2JhckNvbnRhaW5lci0ke2QuY29kZX1gKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7IFxuICAgICAgICBcbiAgICB9XG4gICAgcmVuZGVyU2VsZWN0aW9ucygpe1xuICAgICAgICB0aGlzLnNlbGVjdGlvbnMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuc2VsZWN0aW9ucy5lbCk7XG4gICAgfVxuICAgIHJlbmRlckNoYXJ0cygpe1xuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdqcy1maWZ0eS1jaGFydC1jb250YWluZXInKTtcblxuICAgICAgICB0aGlzLm5lc3RlZERhdGEuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICAgICAgICB2YXIgZ3JvdXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGdyb3VwRGl2LmNsYXNzTGlzdC5hZGQocy5ncm91cERpdik7XG4gICAgICAgICAgICBncm91cERpdi5pbm5lckhUTUwgPSB0aGlzLmdyb3VwQnkgIT09ICdudWxsJyA/IGA8aDMgY2xhc3M9XCIke3MuZ3JvdXBIZWFkZXJ9XCI+JHt0aGlzLm1vZGVsLmRpY3RbdGhpcy5ncm91cEJ5XSAhPT0gdW5kZWZpbmVkID8gdGhpcy5tb2RlbC5kaWN0W3RoaXMuZ3JvdXBCeV1bZ3JvdXAua2V5XSA6IGdyb3VwLmtleX08L2gzPmAgOiAnJztcbiAgICAgICAgICAgIGdyb3VwLnZhbHVlcy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBiYXJDb250YWluZXIgPSB0aGlzLmJhckNvbnRhaW5lcnNbaW5kZXhdLmVsO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMuYmFyQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMuaGlnaGxpZ2h0ZWRCYXJzW2JhckNvbnRhaW5lci5pZF0gKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMuaXNIaWdobGlnaHRlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKSxcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VIb2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgICAgICAgICAgYmFySW5uZXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBiYXJJbm5lckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMuYmFySW5uZXJDb250YWluZXIpO1xuICAgICAgICAgICAgICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQocy5iYXJMYWJlbCk7XG4gICAgICAgICAgICAgICAgbGFiZWwuaW5uZXJIVE1MID0gZC5zdGF0ZTtcbiAgICAgICAgICAgICAgICBwbGFjZUhvbGRlci5jbGFzc0xpc3QuYWRkKHMucGxhY2VIb2xkZXIpO1xuICAgICAgICAgICAgICAgIGJhckNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICAgICAgICAgICAgYmFySW5uZXJDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5iYXJzW2luZGV4XS5lbCk7XG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKGJhcklubmVyQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQocGxhY2VIb2xkZXIpO1xuICAgICAgICAgICAgICAgIGJhckNvbnRhaW5lci5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIHRoaXMucmV0dXJuRGF0YUxhYmVsKGluZGV4KSk7XG4gICAgICAgICAgICAgICAgZ3JvdXBEaXYuYXBwZW5kQ2hpbGQoYmFyQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JvdXBEaXYpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmJhcnMuZm9yRWFjaChiYXIgPT4ge1xuICAgICAgICAgICAgYmFyLmNoZWNrSWZaZXJvKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cbiAgICByZXR1cm5EYXRhTGFiZWwoaW5kZXgpe1xuICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCIke3MuZGF0YUxhYmVsfVwiIHN0eWxlPVwidHJhbnNmb3JtOiB0cmFuc2xhdGVYKCR7dGhpcy5yZXR1cm5UcmFuc2xhdGVWYWx1ZShpbmRleCl9KVwiPlxuICAgICAgICAgICAgICAgICAgICAke3RoaXMuZm9ybWF0VmFsdWUodGhpcy5iYXJzW2luZGV4XS5kYXRhLmQsIHRoaXMuYmFyc1tpbmRleF0uZGF0YS5maWVsZCkucmVwbGFjZSgnLScsJ+KAkycpfVxuICAgICAgICAgICAgICAgIDwvZGl2PmA7XG4gICAgfVxuICAgIHJldHVyblRyYW5zbGF0ZVZhbHVlKGluZGV4KXtcbiAgICAgICAgaWYgKCB0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZFt0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZmllbGRdIDwgMCAmJiB0aGlzLm1vZGVsLnR5cGVzLmZpbmQodCA9PiB0LmZpZWxkID09PSB0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZmllbGQpLmNyb3NzZXNaZXJvICl7XG4gICAgICAgICAgICByZXR1cm4gYCR7KHRoaXMuYmFyc1tpbmRleF0ucGxhY2VaZXJvKHRoaXMuYmFyc1tpbmRleF0uZGF0YS5maWVsZCkgKiAxMDApLnRvRml4ZWQoMSl9JWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7KCAoIHRoaXMuYmFyc1tpbmRleF0ubGluZWFyU2NhbGUodGhpcy5iYXJzW2luZGV4XS5kYXRhLmQsIHRoaXMuYmFyc1tpbmRleF0uZGF0YS5maWVsZCkgKyB0aGlzLmJhcnNbaW5kZXhdLnBsYWNlWmVybyh0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZmllbGQpICkgKiAxMDApLnRvRml4ZWQoMSkgfSVgO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcm1hdFZhbHVlKCl7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBpbnZlcnRQb3NpdGlvbnMoKXtcbiAgICAgICAgdGhpcy5iYXJDb250YWluZXJzLmZvckVhY2goYmFyQ29udGFpbmVyID0+IHtcbiAgICAgICAgICAgIHZhciBsYXN0UG9zaXRpb24gPSBiYXJDb250YWluZXIuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICAgICAgZGVsdGFZID0gdGhpcy5maXJzdFBvc2l0aW9uc1tiYXJDb250YWluZXIuZWwuaWRdLnRvcCAtIGxhc3RQb3NpdGlvbi50b3A7XG4gICAgICAgICAgICBiYXJDb250YWluZXIuZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzAnO1xuICAgICAgICAgICAgYmFyQ29udGFpbmVyLmVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVZKCR7ZGVsdGFZfXB4KWA7XG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzAuOHMnO1xuICAgICAgICAgICAgICAgIGJhckNvbnRhaW5lci5lbC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgwKSc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cblxuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIFBTLnNldFN1YnMoW1xuICAgICAgICAgICAgWydmaWVsZCcsIChtc2csZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQmFycyhtc2csZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVEYXRhTGFiZWxzKG1zZyxkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUV4cGxhaW5lclRleHQobXNnLGRhdGEpO1xuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBbJ2dyb3VwJywgKG1zZyxkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVHcm91cHMobXNnLGRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRXhwbGFpbmVyVGV4dChtc2csZGF0YSk7XG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFsnc29ydCcsIChtc2csZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc29ydEJhcnMobXNnLGRhdGEpO1xuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBbJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkanVzdEV4cGxhaW5lclRleHRIZWlnaHQoKTtcbiAgICAgICAgICAgIH1dXG4gICAgICAgIF0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgIGNoaWxkLmluaXQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXhwbGFpbmVyV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNleHBsYWluZXItd3JhcHBlcicpO1xuICAgICAgICB0aGlzLmZpZWxkRXhwbGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ZpZWxkLWV4cGxhaW5lcicpO1xuICAgICAgICB0aGlzLmdyb3VwRXhwbGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2dyb3VwLWV4cGxhaW5lcicpO1xuICAgICAgICB0aGlzLmluaXRIaWdobGlnaHRCYXJzKCk7XG4gICAgICAgIHRoaXMuaW5pdENsZWFyQWxsSGlnaGxpZ2h0cygpO1xuICAgIH1cbiAgICB1cGRhdGVFeHBsYWluZXJUZXh0KG1zZyxkYXRhLCBjYWxsZWRGcm9tUHJlcmVuZGVyKXtcbiAgICAgICAgY29uc29sZS5sb2cobXNnLGRhdGEsIHRoaXMpO1xuICAgICAgICB2YXIgbWF0Y2ggPSB0aGlzLm1vZGVsLnR5cGVzLmZpbmQodCA9PiB0LmZpZWxkID09PSBkYXRhKSxcbiAgICAgICAgICAgIGNvbnRlbnQgPSBtYXRjaCA/IGA8cD48c3Ryb25nPiR7IWlzTmFOKG1hdGNoLmxhYmVsKSA/ICdDcmVkaXQgcmF0aW5nICcgKyBtYXRjaC5sYWJlbCA6IG1hdGNoLmxhYmVsIH0uPC9zdHJvbmc+ICR7bWF0Y2gudG9vbHRpcH0gPC9wPmAgOiAnJyxcbiAgICAgICAgICAgIGVsO1xuICAgICAgICBpZiAoIG1zZyA9PT0gJ2ZpZWxkJyApIHtcbiAgICAgICAgICAgIHRoaXMuZmllbGQgPSBkYXRhOyAvLyBzbyB0aGF0IHRoZSBvcmRlciBvZiBzdWJzIGRvZXNuJ3QgbWF0dGVyXG4gICAgICAgICAgICBlbCA9IHRoaXMuZmllbGRFeHBsYWluZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBtc2cgPT09ICdncm91cCcgKXtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBCeSA9IGRhdGE7IC8vIHNvIHRoYXQgdGhlIG9yZGVyIG9mIHN1YnMgZG9lc24ndCBtYXR0ZXJcbiAgICAgICAgICAgIGVsID0gdGhpcy5ncm91cEV4cGxhaW5lcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoICFjYWxsZWRGcm9tUHJlcmVuZGVyICkge1xuICAgICAgICAgICAgdGhpcy5leHBsYWluZXJXcmFwcGVyLnN0eWxlLmhlaWdodCA9IHRoaXMuZXhwbGFpbmVyV3JhcHBlci5vZmZzZXRIZWlnaHQgKyAncHgnOyAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbC5mYWRlSW5Db250ZW50KGNvbnRlbnQpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdmFyIGxpbmsgPSB0aGlzLnBhcmVudC5yZXR1cm5Nb3JlTGluayhkYXRhKTtcbiAgICAgICAgICAgIGlmICggbGluayApIHtcbiAgICAgICAgICAgICAgICBsaW5rLmNsYXNzTGlzdC5hZGQocy5tb3JlTGluayk7XG4gICAgICAgICAgICAgICAgZWwubGFzdENoaWxkLmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hZGp1c3RFeHBsYWluZXJUZXh0SGVpZ2h0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlbC5sYXN0Q2hpbGQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRqdXN0RXhwbGFpbmVyVGV4dEhlaWdodCgpe1xuICAgICAgICB2YXIgaW5uZXJIZWlnaHQgPSBbdGhpcy5maWVsZEV4cGxhaW5lciwgdGhpcy5ncm91cEV4cGxhaW5lcl0ucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgICAgICAgICAgdmFyIGVsID0gY3VyLnF1ZXJ5U2VsZWN0b3IoJ3AnKTtcbiAgICAgICAgICAgIHZhciBjb21wdXRlZFN0eWxlcyA9IGVsID8gd2luZG93LmdldENvbXB1dGVkU3R5bGUoY3VyLnF1ZXJ5U2VsZWN0b3IoJ3AnKSkgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGVkU3R5bGVzID8gK2FjYyArIGVsLm9mZnNldEhlaWdodCArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVzWydtYXJnaW4tdG9wJ10pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZXNbJ21hcmdpbi1ib3R0b20nXSkgOiArYWNjO1xuICAgICAgICB9LDApO1xuICAgICAgICB0aGlzLmV4cGxhaW5lcldyYXBwZXIuc3R5bGUuaGVpZ2h0ID0gaW5uZXJIZWlnaHQgKyAncHgnO1xuICAgIH1cbiAgICBpbml0SGlnaGxpZ2h0QmFycygpe1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMuYmFyQ29udGFpbmVyKS5mb3JFYWNoKGJhckNvbnRhaW5lciA9PiB7XG4gICAgICAgICAgICBiYXJDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRlZEJhcnNbYmFyQ29udGFpbmVyLmlkXSA9ICF0aGlzLmhpZ2hsaWdodGVkQmFyc1tiYXJDb250YWluZXIuaWRdO1xuICAgICAgICAgICAgICAgIGlmICggdGhpcy5oaWdobGlnaHRlZEJhcnNbYmFyQ29udGFpbmVyLmlkXSApe1xuICAgICAgICAgICAgICAgICAgICBHVE1QdXNoKGBTdGF0ZURlYnR8RmlmdHlTdGF0ZXxIaWdobGlnaHR8JHtiYXJDb250YWluZXIuaWR9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJhckNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKHMuaXNIaWdobGlnaHRlZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXRDbGVhckFsbEhpZ2hsaWdodHMoKXtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NsZWFyLWFsbC1oaWdobGlnaHQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMuYmFyQ29udGFpbmVyKS5mb3JFYWNoKGJhckNvbnRhaW5lciA9PiB7XG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUocy5pc0hpZ2hsaWdodGVkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodGVkQmFycyA9IHt9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBHVE1QdXNoKCdTdGF0ZURlYnR8RmlmdHlTdGF0ZXxSZW1vdmVIaWdobGlnaHRzJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGVEYXRhTGFiZWxzKCl7XG4gICAgICAgIHRoaXMuYmFyQ29udGFpbmVycy5mb3JFYWNoKChiYXJDb250YWluZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICB2YXIgZGF0YUxhYmVsID0gYmFyQ29udGFpbmVyLmVsLnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy5kYXRhTGFiZWwpO1xuICAgICAgICAgICAgZGF0YUxhYmVsLmZhZGVJbkNvbnRlbnQodGhpcy5mb3JtYXRWYWx1ZSh0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZCwgdGhpcy5iYXJzW2luZGV4XS5kYXRhLmZpZWxkKS5yZXBsYWNlKCctJywn4oCTJykpO1xuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5iYXJzW2luZGV4XS5kYXRhLmQpO1xuICAgICAgICAgICAgICAgIGRhdGFMYWJlbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RoaXMucmV0dXJuVHJhbnNsYXRlVmFsdWUoaW5kZXgpfSlgO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGVCYXJzKG1zZyxkYXRhKXtcbiAgICAgICAgdGhpcy5maWVsZCA9IGRhdGE7XG4gICAgICAgIHRoaXMuYmFycy5mb3JFYWNoKGJhciA9PiB7XG4gICAgICAgICAgICBiYXIuZGF0YS5maWVsZCA9IGRhdGE7XG4gICAgICAgICAgICBiYXIudXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnNvcnRWYWx1ZUtleSk7XG4gICAgICAgIGlmICggdGhpcy5zb3J0VmFsdWVLZXkgIT09ICdzdGF0ZScgKXtcbiAgICAgICAgICAgIHRoaXMuc29ydFZhbHVlS2V5ID0gZGF0YTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5GTElQLmJpbmQodGhpcyksNTAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWNvcmRGaXJzdFBvc2l0aW9ucygpe1xuICAgICAgICB0aGlzLmZpcnN0UG9zaXRpb25zID0gdGhpcy5iYXJDb250YWluZXJzLnJlZHVjZSgoYWNjLCBjdXIpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYWNjW2N1ci5lbC5pZF0gPSBjdXIuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LHt9KTtcbiAgICAgICAgXG4gICAgfVxuICAgIEZMSVAoKXtcbiAgICAgICAgdGhpcy5yZWNvcmRGaXJzdFBvc2l0aW9ucygpO1xuICAgICAgICB0aGlzLm5lc3REYXRhKCk7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gJyc7IFxuICAgICAgICB0aGlzLnB1c2hCYXJzKCk7ICAgICAgICBcbiAgICAgICAgdGhpcy5lbC5hcHBlbmRDaGlsZCh0aGlzLnJlbmRlckNoYXJ0cygpKTtcbiAgICAgICAgdGhpcy5pbml0SGlnaGxpZ2h0QmFycygpO1xuICAgICAgICB0aGlzLmludmVydFBvc2l0aW9ucygpO1xuICAgIH1cbiAgICB1cGRhdGVHcm91cHMobXNnLCBkYXRhKXtcbiAgICAgICAgdGhpcy5ncm91cEJ5ID0gZGF0YTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5ncm91cEJ5KTtcbiAgICAgICAgdGhpcy5GTElQKCk7XG4gICAgfVxuICAgIHNvcnRCYXJzKG1zZywgZGF0YSl7XG4gICAgICAgIHRoaXMuc29ydFZhbHVlS2V5ID0gZGF0YSA9PT0gJ2FscGhhJyA/ICdzdGF0ZScgOiB0aGlzLmZpZWxkO1xuICAgICAgICB0aGlzLnNvcnRWYWx1ZXNGbiA9IGRhdGEgPT09ICdkZXNjJyA/IGRlc2NlbmRpbmcgOiBhc2NlbmRpbmc7XG4gICAgICAgIHRoaXMuRkxJUCgpOyAgICBcbiAgICB9XG4gICAgXG59IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImdyb3VwSGVhZGVyXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtLWdyb3VwSGVhZGVyXCIsXCJiYXJMYWJlbFwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1iYXJMYWJlbFwiLFwiZ3JvdXBEaXZcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS0tZ3JvdXBEaXZcIixcImJhckNvbnRhaW5lclwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1iYXJDb250YWluZXJcIixcImlzSGlnaGxpZ2h0ZWRcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS0taXNIaWdobGlnaHRlZFwiLFwiYmFySW5uZXJDb250YWluZXJcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS0tYmFySW5uZXJDb250YWluZXJcIixcImRhdGFMYWJlbFwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1kYXRhTGFiZWxcIixcInBsYWNlSG9sZGVyXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtLXBsYWNlSG9sZGVyXCIsXCJtb3JlTGlua1wiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1tb3JlTGlua1wifTsiLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCBUaGlzRHJvcGRvd24gZnJvbSAnQFByb2plY3QvY29tcG9uZW50cy9kcm9wZG93bic7XG5pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG5pbXBvcnQgeyBHVE1QdXNoIH0gZnJvbSAnQFV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0aW9ucyBleHRlbmRzIEVsZW1lbnQge1xuICAgIHByZXJlbmRlcigpe1xuICAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIHZpZXcgPSBzdXBlci5wcmVyZW5kZXIoKSxcbiAgICAgICAgICAgIGRyb3Bkb3duRGF0YSA9IFsgLy8gVE9ETzogc290ciBmbiBuZWVkcyB0byBiZSBEUlllciwgYWRkIHRvIHV0aWxzIEFycmF5LnByb3RvdHlwZS5zb3J0QXNjZW5kaW5nIG9yIHN0XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTZWxlY3QgZmllbGQ6JyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLm1vZGVsLnR5cGVzLmZpbHRlcih0ID0+IHQudHlwZSAhPT0gJ3RleHQnKSwgXG4gICAgICAgICAgICAgICAgdHlwZTogJ2ZpZWxkJ1xuICAgICAgICAgICAgfSx7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdHcm91cCBieTonLCAvLyBBR0hHIFRPRE86IGRvIHRoZSBzb3J0IHVuZGVyIHRoZSBjb21wbmVudFxuICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMubW9kZWwudHlwZXMuZmlsdGVyKHQgPT4gdC50eXBlID09PSAndGV4dCcpLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdncm91cCdcbiAgICAgICAgICAgIH0vKix7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdIaWdobGlnaHQ6JyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLm1vZGVsLmRhdGEubWFwKGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGQuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBkLnN0YXRlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaGlnaGxpZ2h0J1xuICAgICAgICAgICAgfSovXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuZHJvcGRvd25zID0gW107XG4gICAgICAgIGRyb3Bkb3duRGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgdGhpcy5kcm9wZG93bnMucHVzaCh0aGlzLnBhcmVudC5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIFRoaXNEcm9wZG93biwgYGRpdi5qcy1kcm9wZG93bi0ke2QubGFiZWwuY2xlYW5TdHJpbmcoKX1gLCB7cGFyZW50OiB0aGlzLCBkYXRhOiBkLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlfSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKC4uLnRoaXMuZHJvcGRvd25zKTtcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldzsgLy8gaWYgcHJlcmVuZGVyZWQgYW5kIG5vIG5lZWQgdG8gcmVuZGVyIChubyBkYXRhIG1pc21hdGNoKVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRyb3Bkb3duV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkcm9wZG93bldyYXBwZXIuY2xhc3NMaXN0LmFkZChzLmRyb3Bkb3duV3JhcHBlcik7XG4gICAgICAgIGRyb3Bkb3duRGF0YS5mb3JFYWNoKChkLGkpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGQpO1xuICAgICAgICAgICAgdmFyIGRyb3Bkb3duSW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgICAgICBkcm9wZG93bk91dGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgICAgICAgICAgZHJvcGRvd25MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyksXG4gICAgICAgICAgICAgICAgZHJvcGRvd24gPSB0aGlzLmRyb3Bkb3duc1tpXTtcbiAgICAgICAgICAgIGRyb3Bkb3duLmVsLnF1ZXJ5U2VsZWN0b3IoJy5qcy1pbnB1dC1kaXYnKS5pZCA9IGBsYWJlbC1kcm9wZG93bi0ke2QudHlwZX0tdmFsdWVgO1xuICAgICAgICAgICAgZHJvcGRvd24uZWwuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCBgbGFiZWwtZHJvcGRvd24tJHtkLnR5cGV9IGxhYmVsLWRyb3Bkb3duLSR7ZC50eXBlfS12YWx1ZWApO1xuICAgICAgICAgICAgZHJvcGRvd24uZWwucXVlcnlTZWxlY3RvcigndWwnKS5zZXRBdHRyaWJ1dGUoJ2FyaWEtY29udHJvbHMnLCAnZmlmdHktc3RhdGUtdmlldycgKTtcbiAgICAgICAgICAgIGRyb3Bkb3duT3V0ZXIuY2xhc3NMaXN0LmFkZChzLmRyb3Bkb3duT3V0ZXIpO1xuICAgICAgICAgICAgZHJvcGRvd25MYWJlbC5pbm5lclRleHQgPSBkLmxhYmVsO1xuICAgICAgICAgICAgZHJvcGRvd25MYWJlbC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2xhYmVsLWRyb3Bkb3duLScgKyBkLnR5cGUpO1xuICAgICAgICAgICAgZHJvcGRvd25Jbm5lci5jbGFzc0xpc3QuYWRkKHMuZHJvcGRvd25Jbm5lcik7XG4gICAgICAgICAgICBkcm9wZG93bklubmVyLmFwcGVuZENoaWxkKGRyb3Bkb3duLmVsKTtcbiAgICAgICAgICAgIGRyb3Bkb3duT3V0ZXIuYXBwZW5kQ2hpbGQoZHJvcGRvd25MYWJlbCk7XG4gICAgICAgICAgICBkcm9wZG93bk91dGVyLmFwcGVuZENoaWxkKGRyb3Bkb3duSW5uZXIpO1xuICAgICAgICAgICAgZHJvcGRvd25XcmFwcGVyLmFwcGVuZENoaWxkKGRyb3Bkb3duT3V0ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmlldy5hcHBlbmRDaGlsZChkcm9wZG93bldyYXBwZXIpO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHZpZXcuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgXG4gICAgICAgICAgICA8ZGl2IGlkPVwiZXhwbGFpbmVyLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZmllbGQtZXhwbGFpbmVyXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImdyb3VwLWV4cGxhaW5lclwiPjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiJHtzLmxhYmVsfSAke3MubGFiZWxTb3J0fSBmbGV4XCI+PHNwYW4+U29ydCBieTo8L3NwYW4+IDxzcGFuPjxhIGNsYXNzPVwiJHtzLnNvcnRCeX0gJHtzLnNvcnRBY3RpdmV9XCIgZGF0YS1zb3J0PVwiYWxwaGFcIiBocmVmPVwiI1wiPkHigJNaPC9hPiB8IDxhIGNsYXNzPVwiJHtzLnNvcnRCeX1cIiBkYXRhLXNvcnQ9XCJhc2NcIiBocmVmPVwiI1wiPkxvd+KAk0hpZ2g8L2E+IHwgPGEgY2xhc3M9XCIke3Muc29ydEJ5fVwiIGRhdGEtc29ydD1cImRlc2NcIiBocmVmPVwiI1wiPkhpZ2jigJNMb3c8L2E+PC9zcGFuPjwvcD5cbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cIiR7cy5sYWJlbH0gJHtzLmxhYmVsSGlnaGxpZ2h0fVwiPlNlbGVjdCBhIHN0YXRlIHRvIGhpZ2hsaWdodCB8IDxhIGlkPVwiY2xlYXItYWxsLWhpZ2hsaWdodFwiIGhyZWY9XCIjXCI+Q2xlYXIgYWxsPC9hPjwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgKTtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgIGNoaWxkLmluaXQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5zb3J0QnkpLmZvckVhY2goZWFjaCA9PiB7XG4gICAgICAgICAgICBlYWNoLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLnNvcnRBY3RpdmUpLmNsYXNzTGlzdC5yZW1vdmUocy5zb3J0QWN0aXZlKTtcbiAgICAgICAgICAgICAgICBlYWNoLmNsYXNzTGlzdC5hZGQocy5zb3J0QWN0aXZlKTtcbiAgICAgICAgICAgICAgICBHVE1QdXNoKGBTdGF0ZURlYnR8RmlmdHlTdGF0ZXxTb3J0fCR7ZWFjaC5kYXRhc2V0LnNvcnR9YCk7XG4gICAgICAgICAgICAgICAgUy5zZXRTdGF0ZSgnc29ydCcsIGVhY2guZGF0YXNldC5zb3J0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImRyb3Bkb3duV3JhcHBlclwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnMtLWRyb3Bkb3duV3JhcHBlclwiLFwiZHJvcGRvd25PdXRlclwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnMtLWRyb3Bkb3duT3V0ZXJcIixcImRyb3Bkb3duSW5uZXJcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS1zZWxlY3Rpb25zLS1kcm9wZG93bklubmVyXCIsXCJsYWJlbFwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnMtLWxhYmVsXCIsXCJzb3J0QWN0aXZlXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtc2VsZWN0aW9ucy0tc29ydEFjdGl2ZVwiLFwibGFiZWxTb3J0XCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtc2VsZWN0aW9ucy0tbGFiZWxTb3J0XCIsXCJzb3J0QnlcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS1zZWxlY3Rpb25zLS1zb3J0QnlcIn07IiwiaW1wb3J0IHMgZnJvbSAnLi9zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgeyBEcm9wZG93biB9IGZyb20gJ0BVSS9pbnB1dHMvaW5wdXRzLmpzJztcbmltcG9ydCB7IHN0YXRlTW9kdWxlIGFzIFMgfSBmcm9tICdzdGF0ZWZ1bC1kZWFkJztcbmltcG9ydCB7IEdUTVB1c2ggfSBmcm9tICdAVXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaGlzRHJvcGRvd24gZXh0ZW5kcyBEcm9wZG93biB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIG9wdGlvbnMpe1xuICAgICAgICB2YXIgX2RhdGEgPSBbXTtcbiAgICAgICAgdmFyIGRyb3Bkb3duVHlwZSA9IG9wdGlvbnMuZGF0YS50eXBlO1xuICAgICAgICBvcHRpb25zLmRhdGEuZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgLyppZiAoIGRyb3Bkb3duVHlwZSA9PT0gJ2hpZ2hsaWdodCcgKXsgLy8gdHJhbnNmb3JtIHN0YXRlIGRhdGEgaW50byBmb3JtIERyb3Bkb3duIGNhbiB1c2VcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkKTtcbiAgICAgICAgICAgICAgICBfZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGQuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZC5zdGF0ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWUgZC50eXBlIGlzIGZpZWxkIG9yIGdyb3VwICovXG4gICAgICAgICAgICAgICAgX2RhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpc05hTigrZC5sYWJlbCkgPyBkLmxhYmVsIDogJ0NyZWRpdCByYXRpbmcgJyArIGQubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBkLmlzRGVmYXVsdFNlbGVjdGlvbiA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgLy8gICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgb3B0aW9ucy5kYXRhID0gX2RhdGEuc29ydChmdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICAgICAgICAgIHJldHVybiBhLm5hbWUgPCBiLm5hbWUgPyAtMSA6IGEubmFtZSA+IGIubmFtZSA/IDEgOiBhLm5hbWUgPj0gYi5uYW1lID8gMCA6IE5hTjtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICggZHJvcGRvd25UeXBlID09PSAnZ3JvdXAnICl7XG4gICAgICAgICAgICBvcHRpb25zLmRhdGEudW5zaGlmdCh7dmFsdWU6IG51bGwsIG5hbWU6ICfigJQgTm9uZSDigJQnLCBzZWxlY3RlZDogdHJ1ZX0pO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZHJvcGRvd25UeXBlID0gZHJvcGRvd25UeXBlO1xuICAgIH1cbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIGRyb3Bkb3duID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGRyb3Bkb3duOyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cbiAgICAgICAgZHJvcGRvd24uY2xhc3NMaXN0LmFkZChzLmRyb3Bkb3duKTtcbiAgICAgICAgLy9kcm9wZG93bi5zZXRBdHRyaWJ1dGUoJ2FyaWEtY29udHJvbHMnLCAnZmlmdHktc3RhdGUtdmlldycpO1xuICAgICAgICAvL2Ryb3Bkb3duLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGRyb3Bkb3duO1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIHN1cGVyLmluaXQoKTtcbiAgICAgICAgLypjb25zb2xlLmxvZygnaW5pdCBkcm9wZG93bicsIHRoaXMpO1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGUgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSwgdGhpcyk7XG4gICAgICAgICAgICBTLnNldFN0YXRlKHRoaXMuZHJvcGRvd25UeXBlLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH0pOyovXG4gICAgfVxuICAgIG9uQ2hhbmdlKCl7XG4gICAgICAgIEdUTVB1c2goYFN0YXRlRGVidHxGaWZ0eVN0YXRlfCR7dGhpcy5kcm9wZG93blR5cGV9fCR7dGhpcy5zZWxlY3RlZE9wdGlvbi5kYXRhc2V0LnZhbHVlfWApO1xuICAgICAgICBTLnNldFN0YXRlKHRoaXMuZHJvcGRvd25UeXBlLCB0aGlzLnNlbGVjdGVkT3B0aW9uLmRhdGFzZXQudmFsdWUpO1xuICAgIH1cbiAgICBcbn0iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiZHJvcGRvd25cIjpcInNyYy1jb21wb25lbnRzLWRyb3Bkb3duLS1kcm9wZG93blwifTsiLCJpbXBvcnQgeyBET01IZWxwZXJzIGFzICRkIH0gZnJvbSAnQFV0aWxzJztcbmltcG9ydCBFbGVtZW50IGZyb20gJy4vLi4vZWxlbWVudC8nO1xuaW1wb3J0IHMgZnJvbSAnLi9zdHlsZXMuc2Nzcyc7XG5cbmV4cG9ydCBjbGFzcyBUZXh0SW5wdXQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvciA9ICdpbnB1dCcsIG9wdGlvbnMpe1xuICAgICAgICBzdXBlcihzZWxlY3Rvciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHByZXJlbmRlcigpe1xuICAgICAgICB2YXIgaW5wdXQgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0OyBcbiAgICAgICAgfVxuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRHJvcGRvd24gZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvciwgb3B0aW9ucyl7XG4gICAgICAgIGNvbnNvbGUubG9nKHNlbGVjdG9yKTtcbiAgICAgICAgdmFyIGVsID0gc2VsZWN0b3Iuc3BsaXQoJy4nKVswXS5zcGxpdCgnIycpWzBdLFxuICAgICAgICAgICAga2xhc3MsXG4gICAgICAgICAgICBpZDtcblxuICAgICAgICBpZiAoIGVsICE9PSAnZGl2JyApIHtcbiAgICAgICAgICAgIGlmICggc2VsZWN0b3Iuc3BsaXQoJy4nKS5sZW5ndGggPiAxICl7XG4gICAgICAgICAgICAgICAga2xhc3MgPSBzZWxlY3Rvci5zcGxpdCgnLicpWzBdLnNwbGl0KCcjJylbMF07IFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBzZWxlY3Rvci5zcGxpdCgnIycpLmxlbmd0aCA+IDEgKXtcbiAgICAgICAgICAgICAgICBpZCA9IHNlbGVjdG9yLnNwbGl0KCcjJylbMF0uc3BsaXQoJy4nKVswXTsgXG4gICAgICAgICAgICB9ICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEcm9wZG93biBlbGVtZW50IG11c3QgYmUgYSBkaXY7IGNvZXJjaW5nIC4gLiAuJyk7XG4gICAgICAgICAgICBlbCA9ICdkaXYnO1xuICAgICAgICAgICAgc2VsZWN0b3IgPSBlbCArICggaWQgIT09IHVuZGVmaW5lZCA/ICcjJyArIGlkIDogJycgKSArICgga2xhc3MgIT09IHVuZGVmaW5lZCA/ICcuJyArIGtsYXNzIDogJycgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyKHNlbGVjdG9yLCBvcHRpb25zKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ3VsJyk7XG4gICAgICAgIHRoaXMuYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbiAgICAgICAgdGhpcy5faXNPcGVuID0gZmFsc2U7XG4gICAgfVxuICAgIHNldCBpc09wZW4oYm9vbCl7XG5cbiAgICAgICAgdGhpcy5faXNPcGVuID0gYm9vbDtcbiAgICAgICAgZnVuY3Rpb24gYm9keUNsaWNrSGFuZGxlcigpe1xuICAgICAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIGJvb2wgKXtcbiAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZChzLmlzT3Blbik7XG4gICAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5ib2R5LlVJQ29udHJvbElzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBib2R5Q2xpY2tIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKHMuaXNPcGVuKTtcbiAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5ib2R5LlVJQ29udHJvbElzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYm9keUNsaWNrSGFuZGxlci5iaW5kKHRoaXMpKTsgICBcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaXNPcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNPcGVuO1xuICAgIH1cbiAgICBzZXQgc2VsZWN0ZWRPcHRpb24oaXRlbSkge1xuICAgICAgICB0aGlzLl9zZWxlY3RlZE9wdGlvbiA9IGl0ZW07XG4gICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5wdXQudGV4dENvbnRlbnQgPSB0aGlzLl9zZWxlY3RlZE9wdGlvbi5pbm5lclRleHQ7XG5cbiAgICAgICAgaWYgKCB0aGlzLm9uQ2hhbmdlICkge1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0luc3RhbmNlIG9mIERyb3Bkb3duIGNsYXNzIG5lZWRzIGFuIG9uQ2hhbmdlIG1ldGhvZCB0byBoYW5kbGUgc2VsZWN0aW9uIG9mIGEgbmV3IHZhbHVlJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHNlbGVjdGVkT3B0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWRPcHRpb247XG4gICAgfVxuICAgIHByZXJlbmRlcigpe1xuICAgICAgICBcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGFzcG9wdXAnLCAnbGlzdGJveCcpO1xuICAgICAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcbiAgICAgICAgdmFyIGlucHV0ID0gJGQuYygnZGl2LmpzLWlucHV0LWRpdicpO1xuXG4gICAgICAgIHZhciBvcHRpb25zTGlzdCA9ICRkLmMoJ3VsJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xuICAgICAgICBvcHRpb25zTGlzdC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcm9sZScsJ2xpc3Rib3gnKTtcbiAgICAgICAgLy9vcHRpb25zTGlzdC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScsICdsYWJlbC1kcm9wZG93bi0nICsgdGhpcy5kcm9wZG93blR5cGUgKTtcbiAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goZWFjaCA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSAkZC5jKCdsaScpO1xuICAgICAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIGVhY2gudmFsdWUpO1xuICAgICAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgnYXJpYS1yb2xlJywgJ29wdGlvbicpO1xuICAgICAgICAgICAgb3B0aW9uLmlubmVySFRNTCA9IGVhY2gubmFtZTtcblxuICAgICAgICAgICAgb3B0aW9uLmlkID0gJ2Ryb3Bkb3duLWl0ZW0tJyArIGVhY2gudmFsdWU7XG4gICAgICAgICAgICBpZiAoIGVhY2guc2VsZWN0ZWQgKXtcbiAgICAgICAgICAgICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBvcHRpb24uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICBpbnB1dC50ZXh0Q29udGVudCA9IGVhY2gubmFtZTtcbiAgICAgICAgICAgICAgICBvcHRpb25zTGlzdC5zZXRBdHRyaWJ1dGUoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsIG9wdGlvbi5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zTGlzdC5hcHBlbmRDaGlsZChvcHRpb24pXG4gICAgICAgIH0pO1xuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGlucHV0KVxuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKG9wdGlvbnNMaXN0KVxuICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQocy5QQ1REcm9wZG93bik7XG4gICAgICAgIC8vd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCdmYWxzZScpO1xuICAgICAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xuICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xuICAgICAgIHRoaXMuaW5wdXQgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJy5qcy1pbnB1dC1kaXYnKTtcbiAgICAgICB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJykuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbUNsaWNrSGFuZGxlcihpdGVtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgIH0pOyBcbiAgICAgICB0aGlzLl9zZWxlY3RlZE9wdGlvbiA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignbGkuc2VsZWN0ZWQnKTtcblxuICAgICAgIHRoaXMudG9CZVNlbGVjdGVkID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCdsaS5zZWxlY3RlZCcpO1xuICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUua2V5Q29kZSk7XG4gICAgICAgICAgICBpZiAoIGUua2V5Q29kZSA9PT0gOSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhYkhhbmRsZXIuY2FsbCh0aGlzLGUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggWzMyLDM4LDQwXS5pbmRleE9mKGUua2V5Q29kZSkgPiAtMSApeyAvLyAzMiBzcGFjZSwgMzggdXAgYXJyb3csIDQwIGRvd24gYXJyb3dcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgc2Nyb2xsaW5nIG9uIHNwYWNlIGFuZCBhcnJvd1xuICAgICAgICAgICAgICAgIHRoaXMuc3BhY2VBbmRBcnJvd0hhbmRsZXIuY2FsbCh0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIFsxMywyN10uaW5kZXhPZihlLmtleUNvZGUgPiAtMSApICl7IC8vIDEzIGVudGVyLCAyNyBlc2NhcGVcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMuaXNPcGVuICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGVyQW5kRXNjYXBlSGFuZGxlci5jYWxsKHRoaXMsIGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgIFxuICAgIH1cbiAgICBpdGVtQ2xpY2tIYW5kbGVyKGl0ZW0pe1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLGl0ZW0pO1xuICAgICAgICB0aGlzLnRvQmVTZWxlY3RlZC5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgICAgICB0aGlzLnRvQmVTZWxlY3RlZC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnKTtcbiAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQgPSBpdGVtO1xuICAgICAgICB0aGlzLnRvQmVTZWxlY3RlZC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICB0aGlzLnRvQmVTZWxlY3RlZC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuc2V0QXR0cmlidXRlKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCBpdGVtLmlkKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbiA9IHRoaXMudG9CZVNlbGVjdGVkO1xuICAgIH1cbiAgICBlbnRlckFuZEVzY2FwZUhhbmRsZXIoZSl7IC8vIG9ubHkgY2FsbGVkIGlzIHRoaXMuaXNPcGVuXG4gICAgICAgIGlmICggZS5rZXlDb2RlID09PSAyNyApIHsgLy8gZXNjIGtleVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2VzY2FwZSBrZXknKTtcbiAgICAgICAgICAgIHRoaXMudG9CZVNlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9uLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB0aGlzLnRvQmVTZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRPcHRpb247XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlOyAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24gPSB0aGlzLnRvQmVTZWxlY3RlZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzcGFjZUFuZEFycm93SGFuZGxlcihlKXtcbiAgICAgICAgaWYgKCBlLmtleUNvZGUgPT09IDMyICkgeyAvLyBzcGFjZVxuICAgICAgICAgICAgaWYgKCAhdGhpcy5pc09wZW4gKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBoZXJlIGNhbGwgdG8gZm4gdGhhdCBzZWxlY3RzIHRoZSB0b0JlU2xlY3RlZCBvcHRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBhcnJvdyBrZXlzXG4gICAgICAgIGlmICggIXRoaXMuaXNPcGVuICl7XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXMgb3BlblxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IGUua2V5Q29kZSA9PT0gMzggPyB0aGlzLnRvQmVTZWxlY3RlZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIDogdGhpcy50b0JlU2VsZWN0ZWQubmV4dEVsZW1lbnRTaWJsaW5nOyBcbiAgICAgICAgICAgIGlmICggbmV4dCApIHsgLy8gaWYgdGhlcmUgaXMgYW4gb3B0aW9uIGJlZm9yZS9hZnRlciB0aGUgY3VycmVudGx5IHRvQmVTZWxlY3RlZCBvcHRpb24sIG1ha2UgdGhhdCB0aGUgdG9CZVNlbGVjdGVkIG9wdGlvblxuICAgICAgICAgICAgICAgIHRoaXMudG9CZVNlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQgPSBuZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMudG9CZVNlbGVjdGVkLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGFiSGFuZGxlcihlKXtcbiAgICAgICAgaWYgKCB0aGlzLmlzT3BlbiApe1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsaWNrSGFuZGxlcihlKXtcbiAgICAgICAgaWYgKCB0aGlzLmlzT3BlbiB8fCAhdGhpcy5ib2R5LlVJQ29udHJvbElzT3BlbiApe1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gIXRoaXMuaXNPcGVuO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJQQ1REcm9wZG93blwiOlwic3VibW9kdWxlcy1VSS1qcy1pbnB1dHMtLVBDVERyb3Bkb3duXCIsXCJpc09wZW5cIjpcInN1Ym1vZHVsZXMtVUktanMtaW5wdXRzLS1pc09wZW5cIn07IiwiaW1wb3J0IFJvdXRlciBmcm9tICdAUm91dGVyJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBDVEFwcCB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKXtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgICAgICAgIHRoaXNbb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXQocm91dGVyT3B0aW9ucyl7XG4gICAgICAgIGlmICggdGhpcy5uZWVkc1JvdXRlciApeyAvLyBjb21lcyBmcm9tIG9wdGlvbnMgb2JqZWN0XG4gICAgICAgICAgICB0aGlzLnJvdXRlciA9IG5ldyBSb3V0ZXIoKTtcbiAgICAgICAgICAgIHRoaXMucm91dGVyLmluaXQocm91dGVyT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNhYmxlSG92ZXJPblRvdWNoKCk7XG4gICAgfVxuICAgIGRpc2FibGVIb3Zlck9uVG91Y2goKXtcbiAgICAvLyBIVDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMwMzAzODk4XG4gICAgICAgIHZhciBoYXNIb3ZlckNsYXNzID0gZmFsc2U7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICB2YXIgbGFzdFRvdWNoVGltZSA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gZW5hYmxlSG92ZXIoKSB7XG4gICAgICAgICAgICAvLyBmaWx0ZXIgZW11bGF0ZWQgZXZlbnRzIGNvbWluZyBmcm9tIHRvdWNoIGV2ZW50c1xuICAgICAgICAgICAgaWYgKG5ldyBEYXRlKCkgLSBsYXN0VG91Y2hUaW1lIDwgNTAwKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoaGFzSG92ZXJDbGFzcykgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaGFzLWhvdmVyJyk7XG4gICAgICAgICAgICBoYXNIb3ZlckNsYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRpc2FibGVIb3ZlcigpIHtcbiAgICAgICAgICAgIGlmICghaGFzSG92ZXJDbGFzcykgcmV0dXJuO1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1ob3ZlcicpO1xuICAgICAgICAgICAgaGFzSG92ZXJDbGFzcyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTGFzdFRvdWNoVGltZSgpIHtcbiAgICAgICAgICAgIGxhc3RUb3VjaFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHVwZGF0ZUxhc3RUb3VjaFRpbWUsIHRydWUpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZGlzYWJsZUhvdmVyLCB0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZW5hYmxlSG92ZXIsIHRydWUpO1xuXG4gICAgICAgIGVuYWJsZUhvdmVyKCk7XG4gICAgfVxuICAgIGNyZWF0ZUNvbXBvbmVudChtb2RlbCwgY29tcG9uZW50LCBzZWxlY3RvciwgX29wdGlvbnMpeyBcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIF9vcHRpb25zICE9PSBudWxsICYmIHR5cGVvZiBfb3B0aW9ucyA9PT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIGZvciAoIGxldCBrZXkgaW4gX29wdGlvbnMgKXtcbiAgICAgICAgICAgICAgICBpZiAoIF9vcHRpb25zLmhhc093blByb3BlcnR5KGtleSkgKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gX29wdGlvbnNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgY29tcG9uZW50KHNlbGVjdG9yLCBvcHRpb25zKTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIHsgLy8gdGhpcyBjb3VsZCBiZSBpbnRlZ3JhdGVkIHdpdGggc3RhdGVmdWwgZGVhZFxuICAgIC8qXG4gICAgUm91dGVyIG9mZmVycyBiYXNpYyBzaGFyZWQgZnVuY3Rpb25zIGZvciBhbGwgcm91dGVycy4gTWV0aG9kcyBmb3IgdXBkYXRpbmcgIGhpc3Rvcnkgc3RhdGUgYW5kIHVwZGF0aW5nIHRoZSBoYXNoIHVybC4gQXJyYXkgb2Ygc3Vic2NyaXB0aW9uc1xuICAgIHRoYXQgYWZmZWN0IHRoZSB1cmwgaXMgcGFzc2VkIGluLiBUaGUgUHViU3ViIG1vZHVsZSBpcyBwYXNzZWQgaW4uIHNldEhhc2ggYW5kIGRlY29kZUhhc2ggZnVuY3Rpb25zIGFyZSBwYXNzZWQgaW4gYmMgdGhleSB3aWxsIGJlIGRpZmZcbiAgICBmb3IgZWFjaCBhcHAuIHZpZXdzIGFyZSBwYXNzZWQgaW4gc28gdGhhdCB0aGUgcmVzb2x1dGlvbnMgb2YgdGhlaXIgcHJvbWlzZXMgY2FuIGJlIHRyYWNrZWQgYW5kIGFjdGVkIHVwb24gKGllIHJvdXRlciBkZWNvZGVzIG9ubHkgYWZ0ZXIgXG4gICAgYWxsIHZpZXdzIGFyZSByZWFkeSlcbiAgICAqL1xuICAgIGluaXQocm91dGVyT3B0aW9ucyl7XG4gICAgICAgIFxuICAgICAgICBpZiAoIHJvdXRlck9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygcm91dGVyT3B0aW9ucyAhPT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIHRocm93ICdyb3V0ZXIuaW5pdCBtZXRob2QgcmVxdWlyZXMgYSBjb25maWcgb2JqZWN0IGFzIHBhcmFtZXRlciAxJ1xuICAgICAgICB9XG4gICAgICAgIGlmICggdHlwZW9mIHJvdXRlck9wdGlvbnMuZW5jb2RlICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiByb3V0ZXJPcHRpb25zLmRlY29kZSAhPT0gJ2Z1bmN0aW9uJyB8fCAhQXJyYXkuaXNBcnJheShyb3V0ZXJPcHRpb25zLnZpZXdzKSB8fCB0eXBlb2Ygcm91dGVyT3B0aW9ucy5QUyAhPT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIHRocm93ICdyb3V0ZXJPcHRpb25zIG9iamVjdCBuZWVkcyBlbmNvZGUsIGRlY29kZSwgdmlld3MsIGFuZCBQUyBwcm9wZXJ0aWVzLiBlbmNvZGUgYW5kIGRlY29kZSBtdXN0IGJlIGZ1bmN0aW9uczsgdmlld3MgaXMgYW4gYXJyYXkgb2Ygdmlld3MgZnJvbSB0aGUgYXBwOyBQUyBuZWVkcyB0byBiZSB0aGUgUHViU3ViIHNldHRlci4nXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZU9iaiA9IHt9O1xuICAgICAgICB0aGlzLmhhc2hTdGF0ZSA9IHJvdXRlck9wdGlvbnMuZW5jb2RlO1xuICAgICAgICB0aGlzLmRlY29kZUhhc2ggPSByb3V0ZXJPcHRpb25zLmRlY29kZTtcbiAgICAgICAgdGhpcy52aWV3UHJvbWlzZXMgPSByb3V0ZXJPcHRpb25zLnZpZXdzLm1hcChlYWNoID0+IGVhY2guaXNSZWFkeSk7IC8vIHZpZXcuaXNSZWFkeSBpcyBhIHByb21pc2VkIHJlc29sdmVkIHRydWUgYWZ0ZXIgdGhlIHZpZXcgaXMgcmVuZGVyZWRcbiAgICAgICAgdGhpcy5QUyA9IHJvdXRlck9wdGlvbnMuUFM7XG4gICAgICAgIFxuICAgICAgICBQcm9taXNlLmFsbCh0aGlzLnZpZXdQcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlSGFzaCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5QUy5zZXRTdWJzKHJvdXRlck9wdGlvbnMuc3Vic2NyaXB0aW9ucy5tYXAoZWFjaCA9PiB7IC8vIHN1YnNjcmlwdGlvbnMgdGhhdCBtYXR0ZXIgZm9yIHJvdXRlciBhcmUgbWFkZSB0byB0cmlnZ2VyIGhhc2hDaGFuZ2UgbWV0aG9kIHdoZW4gcHVibGlzaGVkXG4gICAgICAgICAgICB2YXIgYXJyID0gW2VhY2gsIChtc2csZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzaENoYW5nZS5jYWxsKHRoaXMsbXNnLGRhdGEpO1xuICAgICAgICAgICAgfV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgaGFzaENoYW5nZShtc2csZGF0YSl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGVPYmoobXNnLGRhdGEpO1xuICAgICAgICB0aGlzLmhhc2hTdGF0ZSgpO1xuICAgICAgICB0aGlzLnJlcGxhY2VTdGF0ZSgpO1xuICAgIH1cbiAgICBzZXRTdGF0ZU9iaihtc2csIGRhdGEpe1xuICAgICAgICB0aGlzLnN0YXRlT2JqW21zZ10gPSBkYXRhO1xuICAgICAgICBcbiAgICB9XG4gICAgcmVwbGFjZVN0YXRlKCl7ICAgIFxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUodGhpcy5zdGF0ZU9iaiwnJyx0aGlzLmhhc2hTdHJpbmcpXG4gICAgfVxuXG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzZWN0aW9uIGlkPVxcXCJzZWN0aW9uLW92ZXJ2aWV3XFxcIj5cXG4gICAgPGgyIGNsYXNzPVxcXCJzdGF0aWNcXFwiIHJvbGU9XFxcImJ1dHRvblxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIGFyaWEtbGFiZWw9XFxcIlNob3cvaGlkZSBjb250ZW50XFxcIj5PdmVydmlldzwvaDI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImpzLWlubmVyLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgPHA+XFxuICAgICAgICAgICAgQmVjYXVzZSBubyB1bml2ZXJzYWwgZ3VpZGVsaW5lcyBleGlzdCBmb3IgaG93IG11Y2ggZGVidCBzdGF0ZSBnb3Zlcm5tZW50c1xcbiAgICAgICAgICAgIGNhbiBhZmZvcmQsIHdoZW4gcG9saWN5bWFrZXJzIHRyeSB0byBhc3Nlc3MgaG93IG11Y2ggYm9ycm93aW5nIHRvIHRha2Ugb25cXG4gICAgICAgICAgICBmb3IgcHJvamVjdHMgc3VjaCBhcyByb2FkcywgYnJpZGdlcywgYW5kIHNjaG9vbHMsIHRoZXkgb2Z0ZW4gY29tcGFyZSBkZWJ0XFxuICAgICAgICAgICAgbGV2ZWxzIGluIHRoZWlyIHN0YXRlIHRvIHRob3NlIG9mIG90aGVycy4gVG8gbWFrZSB0aGVzZSBjb21wYXJpc29ucywgbWFueVxcbiAgICAgICAgICAgIHBvbGljeW1ha2VycyBldmFsdWF0ZSBob3cgdGhlaXIgc3RhdGUgc3RhY2tzIHVwIGFnYWluc3QgZ2VvZ3JhcGhpY1xcbiAgICAgICAgICAgIG5laWdoYm9ycyBvciBvdGhlciBzdGF0ZXMgd2l0aCBhIGNvbW1vbiBjcmVkaXQgcmF0aW5nLlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPHA+XFxuICAgICAgICAgICAgQnV0IHNlbGVjdGluZyBhIHBlZXIgZ3JvdXAgYmFzZWQgb25seSBvbiB0aGVzZSB0cmFpdHMgb3Zlcmxvb2tzIG1hbnlcXG4gICAgICAgICAgICBmYWN0b3JzIHRoYXQgaW5mbHVlbmNlIGJvcnJvd2luZyBsZXZlbHMuIFN0YXRlcyB3aXRoIGdyb3dpbmcgcG9wdWxhdGlvbnMsIGZvciBleGFtcGxlLCBtYXkgd2lzaCB0byBib3Jyb3cgbW9yZVxcbiAgICAgICAgICAgIHRvIGVuc3VyZSB0aGF0IHRoZWlyIGluZnJhc3RydWN0dXJlIGFkZXF1YXRlbHkgc2VydmVzIHJlc2lkZW50c+KAmSBuZWVkcy5cXG4gICAgICAgICAgICBTaW1pbGFybHksIGhhdmluZyBhIGRlYnQgbGltaXQgb3Igb3RoZXIgY29uc3RyYWluaW5nIGJ1ZGdldCBwb2xpY3kgY2FuXFxuICAgICAgICAgICAgaW5mbHVlbmNlIHRoZSBzaGFyZSBvZiBib3Jyb3dpbmcgdGFrZW4gb24gYnkgc3RhdGUgZ292ZXJubWVudHMgb3JcXG4gICAgICAgICAgICBsb2NhbGl0aWVzLlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPHA+XFxuICAgICAgICAgICAgVGhpcyBpbnRlcmFjdGl2ZSB0b29sIGFsbG93cyB1c2VycyB0byBjb21wYXJlIGRlYnQgbGV2ZWxzIGFjcm9zcyBtb3JlXFxuICAgICAgICAgICAgdGFpbG9yZWQgcGVlciBncm91cHMsIGluY2x1ZGluZyBjb21wYXJpbmcgc3RhdGVzIHdpdGggc2ltaWxhciBib3Jyb3dpbmdcXG4gICAgICAgICAgICBwcmFjdGljZXMsIGNvbnN0cmFpbnRzLCBhbmQgbmVlZHMuIFRoZSB0b29sIGluY2x1ZGVzIGtleSBtZWFzdXJlcyB0aGF0IG1heVxcbiAgICAgICAgICAgIGluZmx1ZW5jZSBib3Jyb3dpbmcgbGV2ZWxzLCBzdWNoIGFzIGRlYnQgbGltaXQgcG9saWNpZXM7IHRoZSBkZWdyZWUgdG9cXG4gICAgICAgICAgICB3aGljaCBib3Jyb3dpbmcgaXMgY29uZHVjdGVkIGJ5IHRoZSBzdGF0ZSBpdHNlbGYsIGNvbXBhcmVkIHRvIGNvbXBvbmVudFxcbiAgICAgICAgICAgIHVuaXRzIHN1Y2ggYXMgaW5kZXBlbmRlbnQgYWdlbmNpZXMgYW5kIGF1dGhvcml0aWVzOyBhbmQgdGhlIGRpdmlzaW9uIG9mXFxuICAgICAgICAgICAgYm9ycm93aW5nIGJldHdlZW4gdGhlIHN0YXRlIGFuZCBsb2NhbCBnb3Zlcm5tZW50cy4gVGhlIHRvb2wgYWxzbyBpbmNsdWRlc1xcbiAgICAgICAgICAgIHRyYWl0cyB0aGF0IHN0YXRlcyBtb3JlIGNvbW1vbmx5IGNvbnNpZGVyIHdoZW4gY2hvb3NpbmcgcGVlcnMsIHN1Y2ggYXNcXG4gICAgICAgICAgICBjcmVkaXQgcmF0aW5ncyBhbmQgZ2VvZ3JhcGhpYyBwcm94aW1pdHkuXFxuICAgICAgICA8L3A+XFxuICAgICAgICA8cD5cXG4gICAgICAgICAgICBJbiB0aGUgPGEgY2xhc3M9XFxcInBjdC1zdGF0aWMtYW5jaG9yXFxcIiBpZD1cXFwic3RhdGUtY29tcGFyaXNvblxcXCIgaHJlZj1cXFwiI3NlY3Rpb24tY29tcGFyaXNvblxcXCI+4oCcU3RhdGUgY29tcGFyaXNvbuKAnSBzZWN0aW9uPC9hPiwgdXNlcnMgY2FuIGNvbXBhcmUgdGhlc2UgZGF0YSwgaW5jbHVkaW5nXFxuICAgICAgICAgICAgZGVidCBsZXZlbHMsIGZvciBhbnkgdHdvIHN0YXRlcywgb3IgYW55IHN0YXRlIHRvIHRoZSBVLlMuIG1lZGlhbi4gSW4gdGhlXFxuICAgICAgICAgICAgc2VjdGlvbiBsYWJlbGVkIDxhIGNsYXNzPVxcXCJwY3Qtc3RhdGljLWFuY2hvclxcXCIgaWQ9XFxcImZpZnR5LXN0YXRlXFxcIiBocmVmPVxcXCIjc2VjdGlvbi1zdGF0ZXNcXFwiPuKAnDUwLXN0YXRlIGRhdGEs4oCdPC9hPiB1c2VycyBjYW4gc29ydCBhbmQgZ3JvdXAgYWxsIDUwIHN0YXRlc1xcbiAgICAgICAgICAgIHVzaW5nIG11bHRpcGxlIGNyaXRlcmlhLCBhbGxvd2luZyB1c2VycyB0byBpZGVudGlmeSBncm91cGluZ3MgdXNpbmcgYSBtaXhcXG4gICAgICAgICAgICBvZiBtZWFzdXJlcy4gSW5mb3JtYXRpb24gYWJvdXQgdGhlIG1lYXN1cmVzIGFuZCB0aGUgdW5kZXJseWluZyBkYXRhIG1heSBiZVxcbiAgICAgICAgICAgIGZvdW5kIGluIHRoZSA8YSBjbGFzcz1cXFwicGN0LXN0YXRpYy1hbmNob3JcXFwiIGlkPVxcXCJmaWZ0eS1zdGF0ZVxcXCIgaHJlZj1cXFwiI3NlY3Rpb24tYWJvdXRcXFwiPuKAnEFib3V0IHRoZSBkYXRh4oCdIHNlY3Rpb248L2E+IGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlLlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPHA+XFxuICAgICAgICAgICAgU3RhdGVzIGNhbiB1c2UgdGhlc2UgZGF0YSB0byBzZWxlY3QgbW9yZSBhcHByb3ByaWF0ZSBwZWVyIGdyb3VwcywgZ2l2aW5nXFxuICAgICAgICAgICAgdGhlbSBhIGRlZXBlciB1bmRlcnN0YW5kaW5nIG9mIGhvdyBzaW1pbGFybHkgcG9zaXRpb25lZCBzdGF0ZXMgbWFuYWdlIHRoZWlyXFxuICAgICAgICAgICAgYm9ycm93aW5nLlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG48L3NlY3Rpb24+XFxuPHNlY3Rpb24gaWQ9XFxcInNlY3Rpb24tY29tcGFyaXNvblxcXCI+XFxuICAgIDxoMiBjbGFzcz1cXFwic3RhdGljXFxcIiByb2xlPVxcXCJidXR0b25cXFwiIHRhYmluZGV4PVxcXCIwXFxcIiBhcmlhLWxhYmVsPVxcXCJTaG93L2hpZGUgY29udGVudFxcXCI+U3RhdGUgQ29tcGFyaXNvbjwvaDI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImpzLWlubmVyLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29tcGFyZS1zZWxlY3Rpb24td3JhcHBlclxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImNvbXBhcmUtbGFiZWxcXFwiPkNvbXBhcmU8L3NwYW4+PGJyIC8+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleCBmbGV4LXN0YXJ0IGZsZXgtYmFzZWxpbmUgYXV0b0NvbXBsZXRlX291dGVyV3JhcHBlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF1dG9Db21wbGV0ZV93cmFwcGVyXFxcIiBpZD1cXFwiYXV0b0NvbXBsZXRlX3dyYXBwZXItMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiIHR5cGU9XFxcInRleHRcXFwiIGlkPVxcXCJjb21wYXJlLWlucHV0LTBcXFwiPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPHNwYW4+dG88L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF1dG9Db21wbGV0ZV93cmFwcGVyXFxcIiBpZD1cXFwiYXV0b0NvbXBsZXRlX3dyYXBwZXItMVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiIHR5cGU9XFxcInRleHRcXFwiIGlkPVxcXCJjb21wYXJlLWlucHV0LTFcXFwiPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L3NlY3Rpb24+XFxuPHNlY3Rpb24gaWQ9XFxcInNlY3Rpb24tc3RhdGVzXFxcIj5cXG4gICAgPGgyIGNsYXNzPVxcXCJzdGF0aWNcXFwiIHJvbGU9XFxcImJ1dHRvblxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIGFyaWEtbGFiZWw9XFxcIlNob3cvaGlkZSBjb250ZW50XFxcIj41MC1TdGF0ZSBEYXRhPC9oMj5cXG4gICAgPGRpdiBjbGFzcz1cXFwianMtaW5uZXItY29udGVudFxcXCI+XFxuICAgICAgICA8ZGl2IGlkPVxcXCJzZWxlY3Rpb25zLWNvbnRhaW5lclxcXCI+PC9kaXY+XFxuICAgICAgICA8ZGl2IGlkPVxcXCJmaWZ0eS1zdGF0ZS1jb250YWluZXJcXFwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L3NlY3Rpb24+XFxuPHNlY3Rpb24gaWQ9XFxcInNlY3Rpb24tYWJvdXRcXFwiPlxcbiAgICA8aDIgY2xhc3M9XFxcInN0YXRpY1xcXCIgcm9sZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgYXJpYS1sYWJlbD1cXFwiU2hvdy9oaWRlIGNvbnRlbnRcXFwiPkFib3V0IHRoZSBEYXRhPC9oMj5cXG4gICAgPGRpdiBjbGFzcz1cXFwianMtaW5uZXItY29udGVudFxcXCI+XFxuICAgICAgICA8cD5cXG4gICAgICAgICAgICBUaGUgbWVhc3VyZXMgd2VyZSBzZWxlY3RlZCBiYXNlZCBvbiBldmlkZW5jZSBpbiB0aGUgZGVidCBhZmZvcmRhYmlsaXR5IGFuZFxcbiAgICAgICAgICAgIG1hbmFnZW1lbnQgbGl0ZXJhdHVyZSB0aGF0IHRoZXkgcmVsYXRlIHRvIHN0YXRlIGRlYnQgbGV2ZWxzLCB0aGVcXG4gICAgICAgICAgICBmZWFzaWJpbGl0eSBvZiBjb2xsZWN0aW5nIHRoZSBkYXRhLCBhbmQgYSBkZXNpcmUgdG8gYXZvaWQgcmVkdW5kYW5jeS48c3VwPjE8L3N1cD4gUGV3IGFsc28gbGltaXRlZCB0aGVcXG4gICAgICAgICAgICBudW1iZXIgb2YgbWVhc3VyZXMgdG8gbWFrZSB0aGUgdG9vbCBlYXN5IHRvIHVzZSBhbmQgdW5kZXJzdGFuZC5cXG4gICAgICAgIDwvcD5cXG4gICAgICAgIDxwPlxcbiAgICAgICAgICAgIFRoaXMgdG9vbCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgYW4gZXhoYXVzdGl2ZSBjYXRhbG9nIG9mIHRoZSBmYWN0b3JzIHRoYXRcXG4gICAgICAgICAgICBtaWdodCBhZmZlY3Qgc3RhdGUgYm9ycm93aW5nIGxldmVscy4gSW5zdGVhZCwgdGhlIHRvb2wgaXMgaW50ZW5kZWQgdG8gaGVscFxcbiAgICAgICAgICAgIHN0YXRlcyBjb25zaWRlciByZWxldmFudCBjcml0ZXJpYSB3aGVuIGNvbnN0cnVjdGluZyBwZWVyIGdyb3Vwcy5cXG4gICAgICAgIDwvcD5cXG4gICAgICAgIDxwPlxcbiAgICAgICAgICAgIEVhY2ggbWVhc3VyZSBpcyBkZXNjcmliZWQgYmVsb3cuXFxuICAgICAgICA8L3A+XFxuICAgICAgICA8YSBuYW1lPVxcXCJkZWJ0X2xpbWl0X3R5cGVcXFwiIGlkPVxcXCJkZWJ0X2xpbWl0X3R5cGVcXFwiPjwvYT5cXG4gICAgICAgIDxoMyBjbGFzcz1cXFwianMtZGVidF9saW1pdF90eXBlXFxcIj5cXG4gICAgICAgICAgICBHZW5lcmFsIG9ibGlnYXRpb24gZGVidCBsaW1pdCB0eXBlICgyMDE4KVxcbiAgICAgICAgPC9oMz5cXG4gICAgICAgIDxwPlxcbiAgICAgICAgICAgIEdlbmVyYWwgb2JsaWdhdGlvbiAoR08pIGRlYnQgaXMgYmFja2VkIGJ5IGEgc3RhdGXigJlzIGZ1bGwgZmFpdGggYW5kIGNyZWRpdCxcXG4gICAgICAgICAgICB0aGUgc3Ryb25nZXN0IHBvc3NpYmxlIHBsZWRnZS4gQXMgYSByZXN1bHQsIEdPIGRlYnQgaXMgdHlwaWNhbGx5IGEgc3RhdGXigJlzXFxuICAgICAgICAgICAgaGlnaGVzdCByYXRlZCBhbmQgbG93ZXN0IGNvc3QgZm9ybSBvZiBkZWJ0LjxzdXA+Mjwvc3VwPlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPHA+XFxuICAgICAgICAgICAgQWxsIGJ1dCB0d28gc3RhdGVzIGhhdmUgbGVnYWwgR08gZGVidCBsaW1pdHMsIHdoaWNoIHZhcnkgaW4gcmVzdHJpY3RpdmVuZXNzXFxuICAgICAgICAgICAgYW5kIHN0cnVjdHVyZS4gRm9yIGV4YW1wbGUsIENvbm5lY3RpY3V0IGxpbWl0cyB0aGlzIGRlYnQgdG8gMS42IHRpbWVzIGl0c1xcbiAgICAgICAgICAgIHRvdGFsIGVzdGltYXRlZCBnZW5lcmFsIGZ1bmQgdGF4IHJlY2VpcHRzLCB3aGlsZSBBcml6b25hIGVmZmVjdGl2ZWx5XFxuICAgICAgICAgICAgcHJvaGliaXRzIGl0cyBpc3N1YW5jZS48c3VwPjM8L3N1cD5cXG4gICAgICAgIDwvcD5cXG4gICAgICAgIDxwPlxcbiAgICAgICAgICAgIFBldyBoYXMgY2xhc3NpZmllZCBlYWNoIHN0YXRl4oCZcyBsaW1pdCBmb3IgR08gZGVidCBhcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xcbiAgICAgICAgICAgIHR5cGVzOlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPHVsPlxcbiAgICAgICAgICAgIDxsaT5cXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5Db25zdGl0dXRpb25hbCBhbWVuZG1lbnQuPC9zdHJvbmc+XFxuICAgICAgICAgICAgICAgIFRocmVlIHN0YXRlc+KAlEFsYWJhbWEsIE9oaW8sIGFuZCBXZXN0IFZpcmdpbmlh4oCUcmVxdWlyZSBhbiBhbWVuZG1lbnQgdG9cXG4gICAgICAgICAgICAgICAgdGhlaXIgY29uc3RpdHV0aW9ucyB0byBpc3N1ZSBHTyBkZWJ0LlxcbiAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgPGxpPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPk1ldHJpYy48L3N0cm9uZz5cXG4gICAgICAgICAgICAgICAgSW4gMTEgc3RhdGVz4oCUQ29ubmVjdGljdXQsIEdlb3JnaWEsIEhhd2FpaSwgTWlzc2lzc2lwcGksIE5ldmFkYSwgTmV3XFxuICAgICAgICAgICAgICAgIEhhbXBzaGlyZSwgTm9ydGggRGFrb3RhLCBPcmVnb24sIFRlbm5lc3NlZSwgVXRhaCwgYW5kIFdpc2NvbnNpbuKAlGRlYnQgb3JcXG4gICAgICAgICAgICAgICAgYW5udWFsIGRlYnQgc2VydmljZSBpcyBub3QgYWxsb3dlZCB0byBleGNlZWQgYSBjZXJ0YWluIG1ldHJpYy1iYXNlZFxcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQuIFRlbm5lc3NlZSwgZm9yIGV4YW1wbGUsIGNhcHMgZGVidCBzZXJ2aWNlIGF0IDEwIHBlcmNlbnQgb2ZcXG4gICAgICAgICAgICAgICAgY29tYmluZWQgcmV2ZW51ZXMgaW4gaXRzIGdlbmVyYWwsIGRlYnQgc2VydmljZSwgYW5kIGhpZ2h3YXkgZnVuZHMuXFxuICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICA8bGk+XFxuICAgICAgICAgICAgICAgIDxzdHJvbmc+TWV0cmljLWJhc2VkIHdpdGggcmVmZXJlbmR1bSB0byBleGNlZWQuPC9zdHJvbmc+XFxuICAgICAgICAgICAgICAgIE5vcnRoIENhcm9saW5hLCBQZW5uc3lsdmFuaWEsIGFuZCBXeW9taW5nIHVzZSBhIG1ldHJpYyB0byBjYXAgZGVidCBidXRcXG4gICAgICAgICAgICAgICAgYWxsb3cgaXNzdWFuY2UgYWJvdmUgdGhlIGNhcCB3aXRoIHZvdGVyIGFwcHJvdmFsLlxcbiAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgPGxpPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPk5vIGxpbWl0Ljwvc3Ryb25nPlxcbiAgICAgICAgICAgICAgICBNYXJ5bGFuZCBhbmQgVmVybW9udCBwbGFjZSBubyByZXN0cmljdGlvbnMgb24gR08gZGVidC5cXG4gICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgIDxsaT5cXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5Qcm9oaWJpdGlvbi48L3N0cm9uZz5cXG4gICAgICAgICAgICAgICAgQXJpem9uYSwgQ29sb3JhZG8sIEluZGlhbmEsIGFuZCBOZWJyYXNrYSBlZmZlY3RpdmVseSBwcm9oaWJpdCBHTyBkZWJ0LlxcbiAgICAgICAgICAgICAgICBJbmRpYW5hIGxhdyBmb3JiaWRzIGFueSBHTyBkZWJ0IHRvIGJlIGlzc3VlZDsgdGhlIG90aGVycyBhdXRob3JpemVcXG4gICAgICAgICAgICAgICAgYW1vdW50cyBzbyBsb3figJQkMzUwLDAwMCBvciBsZXNz4oCUYXMgdG8gYmUgZXF1aXZhbGVudCB0byBwcm9oaWJpdGlvbnMuXFxuICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICA8bGk+XFxuICAgICAgICAgICAgICAgIDxzdHJvbmc+UmVmZXJlbmR1bSBhbmQvb3Igc3VwZXJtYWpvcml0eS48L3N0cm9uZz5cXG4gICAgICAgICAgICAgICAgVGhpcnRlZW4gc3RhdGVz4oCUQWxhc2thLCBBcmthbnNhcywgQ2FsaWZvcm5pYSwgSWRhaG8sIElvd2EsIEthbnNhcyxcXG4gICAgICAgICAgICAgICAgS2VudHVja3ksIE1haW5lLCBNaWNoaWdhbiwgTWlubmVzb3RhLCBNaXNzb3VyaSwgTW9udGFuYSwgYW5kIFJob2RlXFxuICAgICAgICAgICAgICAgIElzbGFuZOKAlHJlcXVpcmUgc29tZSBjb21iaW5hdGlvbiBvZiB2b3RlciBhcHByb3ZhbCBhbmQvb3IgYSBsZWdpc2xhdGl2ZVxcbiAgICAgICAgICAgICAgICBzdXBlcm1ham9yaXR5IChnZW5lcmFsbHksIHRocmVlLWZpZnRocyBvciB0d28tdGhpcmRzKSB0byBpc3N1ZSBkZWJ0LlxcbiAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgPGxpPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPlJlZmVyZW5kdW0gYW5kL29yIHN1cGVybWFqb3JpdHkgYW5kIG1ldHJpYy48L3N0cm9uZz5cXG4gICAgICAgICAgICAgICAgRm91cnRlZW4gc3RhdGVz4oCURGVsYXdhcmUsIEZsb3JpZGEsIElsbGlub2lzLCBMb3Vpc2lhbmEsIE1hc3NhY2h1c2V0dHMsXFxuICAgICAgICAgICAgICAgIE5ldyBKZXJzZXksIE5ldyBNZXhpY28sIE5ldyBZb3JrLCBPa2xhaG9tYSwgU291dGggQ2Fyb2xpbmEsIFNvdXRoXFxuICAgICAgICAgICAgICAgIERha290YSwgVGV4YXMsIFZpcmdpbmlhLCBhbmQgV2FzaGluZ3RvbuKAlHJlcXVpcmUgYSByZWZlcmVuZHVtIGFuZC9vclxcbiAgICAgICAgICAgICAgICBzdXBlcm1ham9yaXR5IGFuZCBoYXZlIGEgbWV0cmljLWJhc2VkIGNhcCBvbiBkZWJ0IG9yIGRlYnQgc2VydmljZS5cXG4gICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgPC91bD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBjdC1ub3RlXFxcIj5cXG4gICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5Ob3RlOjwvc3Ryb25nPiBUaGUgY2xhc3NpZmljYXRpb24gc3lzdGVtIGlzIGEgdmFyaWF0aW9uIG9uIHRoZSBhcHByb2FjaCB0YWtlbiBpbiBELlxcbiAgICAgICAgICAgICAgICBSb2RlcmljayBLaWV3aWV0IGFuZCBLcmlzdGluIFN6YWthbHksIOKAnENvbnN0aXR1dGlvbmFsIExpbWl0YXRpb25zIG9uXFxuICAgICAgICAgICAgICAgIEJvcnJvd2luZzogQW4gQW5hbHlzaXMgb2YgU3RhdGUgQm9uZGVkIEluZGVidGVkbmVzcyzigJ0gPGVtPlRoZSBKb3VybmFsIG9mIExhdywgRWNvbm9taWNzICZhbXA7IE9yZ2FuaXphdGlvbjwvZW0+IDEyLCBuby4gMSAoMTk5Nik6XFxuICAgICAgICAgICAgICAgIDYyLTk3LFxcbiAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwczovL3d3dy5qc3Rvci5vcmcvc3RhYmxlLzc2NTAzOT9zZXE9MSNwYWdlX3NjYW5fdGFiX2NvbnRlbnRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmpzdG9yLm9yZy9zdGFibGUvNzY1MDM5P3NlcT0xI3BhZ2Vfc2Nhbl90YWJfY29udGVudHNcXG4gICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAuXFxuICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgIDxwPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPlNvdXJjZTo8L3N0cm9uZz4gUGV3IGFuYWx5c2lzIG9mIHN0YXRlIGNvbnN0aXR1dGlvbnMgYW5kIHN0YXR1dGVzXFxuICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8YSBuYW1lPVxcXCJjZW50cmFsaXphdGlvblxcXCIgaWQ9XFxcImNlbnRyYWxpemF0aW9uXFxcIj48L2E+XFxuICAgICAgICA8aDMgY2xhc3M9XFxcImpzLWNlbnRyYWxpemF0aW9uXFxcIj5cXG4gICAgICAgICAgICBDZW50cmFsaXphdGlvbiAoZmlzY2FsIHllYXIgMjAxNClcXG4gICAgICAgIDwvaDM+XFxuICAgICAgICA8cD5cXG4gICAgICAgICAgICBJbiBzb21lIHN0YXRlcywgY29tcG9uZW50IHVuaXRzIG9mIGdvdmVybm1lbnQsIHN1Y2ggYXMgaW5kZXBlbmRlbnQgYWdlbmNpZXNcXG4gICAgICAgICAgICBhbmQgYXV0aG9yaXRpZXMsIGNvbmR1Y3QgbXVjaCBvZiB0aGUgYm9ycm93aW5nLCByYXRoZXIgdGhhbiB0aGUgcHJpbWFyeVxcbiAgICAgICAgICAgIHN0YXRlIGdvdmVybm1lbnQuIENlbnRyYWxpemF0aW9uIG1lYXN1cmVzIHByaW1hcnkgZ292ZXJubWVudCBkZWJ0IGFzIGFcXG4gICAgICAgICAgICBzaGFyZSBvZiB0aGUgdG90YWwgZGVidCBpc3N1ZWQgYnkgdGhlIHByaW1hcnkgZ292ZXJubWVudCBhbmQgaXRzIGNvbXBvbmVudFxcbiAgICAgICAgICAgIHVuaXRzLiBBY3Jvc3MgdGhlIHN0YXRlcywgY2VudHJhbGl6YXRpb24gcmFuZ2VzIGZyb20gMCBwZXJjZW504oCUbWVhbmluZyB0aGF0XFxuICAgICAgICAgICAgYWxsIGJvcnJvd2luZyBpcyBieSBlbnRpdGllcyBvdGhlciB0aGFuIHRoZSBwcmltYXJ5IGdvdmVybm1lbnTigJR0byAxMDBcXG4gICAgICAgICAgICBwZXJjZW50LCBtZWFuaW5nIHRoZSBwcmltYXJ5IGdvdmVybm1lbnQgZG9lcyBhbGwgb2YgdGhlIGJvcnJvd2luZy5cXG4gICAgICAgIDwvcD5cXG4gICAgICAgIDxwPlxcbiAgICAgICAgICAgIENvbXBvbmVudCB1bml0IGRlYnQgZ2VuZXJhbGx5IHJlbGllcyBsZXNzIG9uIHN0YXRlIGdlbmVyYWwgZnVuZHMgZm9yXFxuICAgICAgICAgICAgcmVwYXltZW50IHRoYW4gcHJpbWFyeSBnb3Zlcm5tZW50IGRlYnQgZG9lcy4gT2Z0ZW4sIGxlbmRlcnMgaGF2ZSBubyBsZWdhbFxcbiAgICAgICAgICAgIGNsYWltIG9uIHN0YXRlIGdlbmVyYWwgZnVuZHMgaWYgYSBjb21wb25lbnQgdW5pdCBkZWZhdWx0cy4gQXMgYSByZXN1bHQsXFxuICAgICAgICAgICAgc3RhdGUgY29tcGFyaXNvbnMgYmFzZWQgb25seSBvbiB0b3RhbCBkZWJ0IG1heSBiZSBtaXNsZWFkaW5nLiBNb250YW5hIGFuZFxcbiAgICAgICAgICAgIERlbGF3YXJlLCBmb3IgZXhhbXBsZSwgaGF2ZSBhYm91dCB0aGUgc2FtZSB0b3RhbCBkZWJ0LCBidXQgbW9zdCBvZlxcbiAgICAgICAgICAgIE1vbnRhbmHigJlzIGRlYnQgaXMgaGVsZCBieSBjb21wb25lbnQgdW5pdHMgYW5kIG1vc3Qgb2YgRGVsYXdhcmXigJlzIGlzIGhlbGQgYnlcXG4gICAgICAgICAgICB0aGUgc3RhdGUuIFdoZW4gY29tcGFyaW5nIG1lYXN1cmVzIG9mIOKAnHRvdGFsIGRlYnQs4oCdIGNob29zaW5nIHBlZXJzIGJhc2VkIG9uXFxuICAgICAgICAgICAgdGhlIGRlZ3JlZSBvZiBjZW50cmFsaXphdGlvbiBvZiBkZWJ0IG1heSBwcm92aWRlIG1vcmUgYXBwcm9wcmlhdGVcXG4gICAgICAgICAgICBjb21wYXJpc29ucy5cXG4gICAgICAgIDwvcD5cXG4gICAgICAgIDxwPlxcbiAgICAgICAgICAgIDxzdHJvbmc+Tm90ZTo8L3N0cm9uZz4gVG8gY2FsY3VsYXRlIGNlbnRyYWxpemF0aW9uIGluIGEgc3RhdGUsIFBldyBjYWxjdWxhdGVkIHByaW1hcnlcXG4gICAgICAgICAgICBnb3Zlcm5tZW50IGRlYnQgZnJvbSBzdGF0ZXPigJkgMjAxNCBjb21wcmVoZW5zaXZlIGFubnVhbCBmaW5hbmNpYWwgcmVwb3J0cy5cXG4gICAgICAgICAgICBJdCB0aGVuIGNhbGN1bGF0ZWQgZGVidCBoZWxkIGJ5IG1ham9yIGNvbXBvbmVudCB1bml0cywgYXMgcmVwb3J0ZWQgaW4gdGhlaXJcXG4gICAgICAgICAgICBhbm51YWwgZmluYW5jaWFsIHN0YXRlbWVudHMuIEFkZGluZyB0aGUgdHdvIHN1bXMgY3JlYXRlZCBhIG1lYXN1cmUgb2ZcXG4gICAgICAgICAgICDigJx0b3RhbCBkZWJ0LOKAnSBmcm9tIHdoaWNoIHRoZSBwZXJjZW50YWdlIGhlbGQgYnkgdGhlIHByaW1hcnlcXG4gICAgICAgICAgICBnb3Zlcm5tZW504oCUY2VudHJhbGl6YXRpb27igJR3YXMgZGV0ZXJtaW5lZC48c3VwPjQ8L3N1cD5cXG4gICAgICAgIDwvcD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBjdC1ub3RlXFxcIj5cXG4gICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5Tb3VyY2U6PC9zdHJvbmc+IFBldyBhbmFseXNpcyBvZiBmaXNjYWwgeWVhciAyMDE0IHN0YXRlIGNvbXByZWhlbnNpdmUgZmluYW5jaWFsXFxuICAgICAgICAgICAgICAgIGFubnVhbCByZXBvcnRzXFxuICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8YSBuYW1lPVxcXCJzdGF0ZV9sb2NhbF9kaXZpc2lvblxcXCIgaWQ9XFxcInN0YXRlX2xvY2FsX2RpdmlzaW9uXFxcIj48L2E+XFxuICAgICAgICA8aDMgY2xhc3M9XFxcImpzLXN0YXRlX2xvY2FsX2RpdmlzaW9uXFxcIj5cXG4gICAgICAgICAgICBUaGUgc3RhdGUtbG9jYWwgYm9ycm93aW5nIGRpdmlzaW9uICgyMDE1KVxcbiAgICAgICAgPC9oMz5cXG4gICAgICAgIDxwPlxcbiAgICAgICAgICAgIEluIHNvbWUgc3RhdGVzLCBsb2NhbCBnb3Zlcm5tZW50cyBhcmUgcmVzcG9uc2libGUgZm9yIHBheWluZyBmb3IgbW9zdFxcbiAgICAgICAgICAgIGNhcGl0YWwgcHJvamVjdHMgd2l0aGluIHRoZWlyIGp1cmlzZGljdGlvbnMuIEluIG90aGVycywgdGhlIHN0YXRlXFxuICAgICAgICAgICAgZ292ZXJubWVudCBpcyByZXNwb25zaWJsZSBmb3IgdGhvc2UgcHJvamVjdHMsIGluY3JlYXNpbmcgaXRzIG92ZXJhbGxcXG4gICAgICAgICAgICBib3Jyb3dpbmcuIFRoZSBkaXZpc2lvbiBvZiBib3Jyb3dpbmcgcmVzcG9uc2liaWxpdHkgaXMgcmVsYXRlZCB0byB0aGUgZGVidFxcbiAgICAgICAgICAgIGxpbWl0OiBJbiBnZW5lcmFsLCBsb2NhbCBnb3Zlcm5tZW50cyBpbiBzdGF0ZXMgd2l0aCBoaWdobHkgcmVzdHJpY3RpdmVcXG4gICAgICAgICAgICBzdGF0ZSBkZWJ0IGxpbWl0cyBoYXZlIGhpZ2hlciBkZWJ0IGxldmVscy48c3VwPjU8L3N1cD4gVGhpcyBtZWFzdXJlIGNvbXBhcmVzXFxuICAgICAgICAgICAgbG9jYWwgZ292ZXJubWVudCBib3Jyb3dpbmcgdG8gdGhlIGNvbWJpbmVkIGRlYnQgaGVsZCBieSB0aGUgc3RhdGUgYW5kIGxvY2FsXFxuICAgICAgICAgICAgZ292ZXJubWVudHMuIEhpZ2hlciBudW1iZXJzIGluZGljYXRlIGEgZ3JlYXRlciBzaGFyZSBvZiB0b3RhbCBkZWJ0IGlzIGhlbGRcXG4gICAgICAgICAgICBieSBsb2NhbCBnb3Zlcm5tZW50cy4gVGhlIHN0YXRlLWxvY2FsIGJvcnJvd2luZyBkaXZpc2lvbiByYW5nZXMgZnJvbSAxNy45XFxuICAgICAgICAgICAgcGVyY2VudCB0byA4OCBwZXJjZW50LlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPlxcbiAgICAgICAgICAgIDxwPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPlNvdXJjZTo8L3N0cm9uZz4gUGV3IGFuYWx5c2lzIG9mIGRhdGEgZnJvbSBVLlMuIENlbnN1cyBCdXJlYXUsIOKAnEFubnVhbCBTdXJ2ZXkgb2ZcXG4gICAgICAgICAgICAgICAgU3RhdGUgYW5kIExvY2FsIEdvdmVybm1lbnQgRmluYW5jZXM6IDIwMTUgRGF0YSBSZWxlYXNl4oCdICgyMDE4KSxcXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL2dvdi1maW5hbmNlcy9uZXdzcm9vbS91cGRhdGVzL3JlbGVhc2UuaHRtbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBodHRwczovL3d3dy5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvZ292LWZpbmFuY2VzL25ld3Nyb29tL3VwZGF0ZXMvcmVsZWFzZS5odG1sXFxuICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICA8L3A+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxhIG5hbWU9XFxcInJldmVudWVfdm9sYXRpbGl0eVxcXCIgaWQ9XFxcInJldmVudWVfdm9sYXRpbGl0eVxcXCI+PC9hPlxcbiAgICAgICAgPGgzIGNsYXNzPVxcXCJqcy1yZXZlbnVlX3ZvbGF0aWxpdHlcXFwiPlxcbiAgICAgICAgICAgIFJldmVudWUgdm9sYXRpbGl0eSAoMTk5OC0yMDE3KVxcbiAgICAgICAgPC9oMz5cXG4gICAgICAgIDxwPlxcbiAgICAgICAgICAgIFJldmVudWUgdm9sYXRpbGl0eSBpcyB0aGUgYW5udWFsIGZsdWN0dWF0aW9uIGluIHRheCBjb2xsZWN0aW9ucyBhbmQgaXNcXG4gICAgICAgICAgICBhZmZlY3RlZCBieSBzZXZlcmFsIGZhY3RvcnMsIGluY2x1ZGluZyBhIHN0YXRl4oCZcyBtaXggb2YgdGF4IHN0cmVhbXMuIFRoZVxcbiAgICAgICAgICAgIHNjb3JlIHJlZmxlY3RzIHRoZSBzdGFuZGFyZCBkZXZpYXRpb24gb2YgeWVhcmx5IHBlcmNlbnRhZ2UgY2hhbmdlIGluIHRvdGFsXFxuICAgICAgICAgICAgdGF4IHJldmVudWUgYmV0d2VlbiAxOTk4IGFuZCAyMDE3LjxzdXA+Njwvc3VwPiBQZXcgY29udHJvbGxlZCBmb3IgdGhlXFxuICAgICAgICAgICAgZWZmZWN0cyBvZiB0YXggcG9saWN5IGNoYW5nZXMgdXNpbmcgdGhlIE5hdGlvbmFsIENvbmZlcmVuY2Ugb2YgU3RhdGVcXG4gICAgICAgICAgICBMZWdpc2xhdHVyZXPigJkgU3RhdGUgVGF4IEFjdGlvbnMgUmVwb3J0LlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPHA+XFxuICAgICAgICAgICAgQSBsb3cgdm9sYXRpbGl0eSBzY29yZSBtZWFucyB0aGF0IHJldmVudWUgbGV2ZWxzIHdlcmUgc2ltaWxhciBmcm9tIHllYXIgdG9cXG4gICAgICAgICAgICB5ZWFyLCBhbmQgYSBoaWdoIHNjb3JlIGluZGljYXRlcyB0aGF0IHJldmVudWUgZ3JldyBvciBkZWNsaW5lZCBtb3JlXFxuICAgICAgICAgICAgZHJhbWF0aWNhbGx5LiBUaGUgc2NvcmVzIHJhbmdlIGZyb20gMi43IHRvIDM3LjYuIFN0YXRlcyB3aXRoIG1vcmUgdm9sYXRpbGVcXG4gICAgICAgICAgICByZXZlbnVlIGZhY2Ugc2hhcmVkIGJ1ZGdldCBjaGFsbGVuZ2VzLiBXaGVuIHJldmVudWVzIGRyb3AsIGZpeGVkIGNvc3Rz4oCUc3VjaFxcbiAgICAgICAgICAgIGFzIGRlYnQgc2VydmljZeKAlG1heSBjcm93ZCBvdXQgb3BlcmF0aW5nIHNwZW5kaW5nLjxzdXA+Nzwvc3VwPlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPlxcbiAgICAgICAgICAgIDxwPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPlNvdXJjZXM6PC9zdHJvbmc+IFBld+KAmXMgY2FsY3VsYXRpb24gb2Ygdm9sYXRpbGl0eSBzY29yZXMgaXMgYmFzZWQgb24gZGF0YSBmcm9tIHRoZVxcbiAgICAgICAgICAgICAgICBVLlMuIENlbnN1cyBCdXJlYXXigJlzIEFubnVhbCBTdXJ2ZXkgb2ZcXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3N0Yy5odG1sXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIFN0YXRlIEdvdmVybm1lbnQgVGF4IENvbGxlY3Rpb25zXFxuICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgaGlzdG9yaWNhbCBkYXRhIHNlcmllcyBmb3IgMTk5NyB0byAyMDE3LCBhbmQgdGhlIE5hdGlvbmFsIENvbmZlcmVuY2Ugb2ZcXG4gICAgICAgICAgICAgICAgU3RhdGUgTGVnaXNsYXR1cmVz4oCZIOKAnFxcbiAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwOi8vd3d3Lm5jc2wub3JnL3Jlc2VhcmNoL2Zpc2NhbC1wb2xpY3kvc3RhdGUtdGF4LWFjdGlvbnMtZGF0YWJhc2UuYXNweFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBTdGF0ZSBUYXggQWN0aW9uc+KAnSByZXBvcnRzXFxuICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgZm9yIDE5OTcgdG8gMjAxNi4gRm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG1ldGhvZG9sb2d5IGFuZFxcbiAgICAgICAgICAgICAgICB1bmRlcmx5aW5nIGRhdGEsIHBsZWFzZSBzZWU6IFRoZSBQZXcgQ2hhcml0YWJsZSBUcnVzdHMsIOKAnFRheCBSZXZlbnVlXFxuICAgICAgICAgICAgICAgIFZvbGF0aWxpdHksIEZZIDE5OTgtMjAxNyzigJ0gbGFzdCBtb2RpZmllZCBBdWcuIDI5LCAyMDE4LFxcbiAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwOi8vd3d3LnBld3RydXN0cy5vcmcvZW4vcmVzZWFyY2gtYW5kLWFuYWx5c2lzL2RhdGEtdmlzdWFsaXphdGlvbnMvMjAxNC9maXNjYWwtNTAjaW5kNlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBodHRwOi8vd3d3LnBld3RydXN0cy5vcmcvZW4vcmVzZWFyY2gtYW5kLWFuYWx5c2lzL2RhdGEtdmlzdWFsaXphdGlvbnMvMjAxNC9maXNjYWwtNTAjaW5kNlxcbiAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8YSBuYW1lPVxcXCJ0ZW5feWVhcl9wb3BfZ3Jvd3RoXFxcIiBpZD1cXFwidGVuX3llYXJfcG9wX2dyb3d0aFxcXCI+PC9hPlxcbiAgICAgICAgPGgzIGNsYXNzPVxcXCJqcy10ZW5feWVhcl9wb3BfZ3Jvd3RoXFxcIj5cXG4gICAgICAgICAgICBQb3B1bGF0aW9uIGdyb3d0aCAoMjAwOC0xNylcXG4gICAgICAgIDwvaDM+XFxuICAgICAgICA8cD5cXG4gICAgICAgICAgICBSZXNlYXJjaCBoYXMgZm91bmQgdGhhdCBwb3B1bGF0aW9uIGdyb3d0aCBpbiBhIHN0YXRlIGlzIGFzc29jaWF0ZWQgd2l0aFxcbiAgICAgICAgICAgIGFuIGluY3JlYXNlIGluIGJvcnJvd2luZy5cXG4gICAgICAgICAgICA8c3VwPjg8L3N1cD5cXG4gICAgICAgICAgICBGcm9tIDIwMDggdG8gMjAxNywgc3RhdGUgcG9wdWxhdGlvbnMgc2hyYW5rIG9yIGdyZXcgd2l0aGluIGEgcmFuZ2Ugb2YgLTEuM1xcbiAgICAgICAgICAgIHBlcmNlbnQgdG8gMTYuNSBwZXJjZW50LlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPlxcbiAgICAgICAgICAgIDxwPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPlNvdXJjZXM6PC9zdHJvbmc+IFBldyBhbmFseXNpcyBvZiBkYXRhIGZyb20gVS5TLiBDZW5zdXMgQnVyZWF1LCDigJxBbm51YWwgU3VydmV5IG9mXFxuICAgICAgICAgICAgICAgIFN0YXRlIGFuZCBMb2NhbCBHb3Zlcm5tZW50IEZpbmFuY2VzOiAyMDE1IERhdGEgUmVsZWFzZeKAnSAoMjAxOCksXFxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly93d3cuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL2dvdi1maW5hbmNlcy9uZXdzcm9vbS91cGRhdGVzL3JlbGVhc2UuaHRtbFxcbiAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgIDsgVS5TLiBDZW5zdXMgQnVyZWF1LCDigJxBbm51YWwgRXN0aW1hdGVzIG9mIHRoZSBSZXNpZGVudCBQb3B1bGF0aW9uIGZvciB0aGVcXG4gICAgICAgICAgICAgICAgVW5pdGVkIFN0YXRlcywgUmVnaW9ucywgU3RhdGVzLCBhbmQgUHVlcnRvIFJpY286IEFwcmlsIDEsIDIwMTAgdG8gSnVseSAxLFxcbiAgICAgICAgICAgICAgICAyMDE3LOKAnSBUYWJsZSAxLFxcbiAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwczovL3d3dzIuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3BvcGVzdC90YWJsZXMvMjAxMC0yMDE3L3N0YXRlL3RvdGFscy9uc3QtZXN0MjAxNy0wMS54bHN4XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3Mi5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvcG9wZXN0L3RhYmxlcy8yMDEwLTIwMTcvc3RhdGUvdG90YWxzL25zdC1lc3QyMDE3LTAxLnhsc3hcXG4gICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICA7IFUuUy4gQ2Vuc3VzIEJ1cmVhdSwg4oCcSW50ZXJjZW5zYWwgRXN0aW1hdGVzIG9mIHRoZSBSZXNpZGVudCBQb3B1bGF0aW9uIGZvclxcbiAgICAgICAgICAgICAgICB0aGUgVW5pdGVkIFN0YXRlcywgUmVnaW9ucywgU3RhdGVzLCBhbmQgUHVlcnRvIFJpY286IEFwcmlsIDEsIDIwMDAgdG8gSnVseVxcbiAgICAgICAgICAgICAgICAxLCAyMDEwLOKAnSBUYWJsZSAxLFxcbiAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwczovL3d3dzIuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3BvcGVzdC90YWJsZXMvMjAwMC0yMDEwL2ludGVyY2Vuc2FsL3N0YXRlL3N0LWVzdDAwaW50LTAxLnhsc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICBodHRwczovL3d3dzIuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3BvcGVzdC90YWJsZXMvMjAwMC0yMDEwL2ludGVyY2Vuc2FsL3N0YXRlL3N0LWVzdDAwaW50LTAxLnhsc1xcbiAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8aDMgY2xhc3M9XFxcInN0YXRpY1xcXCI+XFxuICAgICAgICAgICAgRGVidCBsZXZlbHMgKDIwMTUpXFxuICAgICAgICA8L2gzPlxcbiAgICAgICAgPHA+XFxuICAgICAgICAgICAgU3RhdGVzIGNvbXBhcmUgdGhlaXIgZGVidCBsZXZlbHMgdG8gcGVlcnMgdGhyb3VnaCBhIHZhcmlldHkgb2YgbWVhc3VyZXMsXFxuICAgICAgICAgICAgaW5jbHVkaW5nIHRvdGFsIG91dHN0YW5kaW5nIGRlYnQgYW5kIG1ldHJpY3MgdGhhdCBub3JtYWxpemUgZGVidCBsZXZlbHMgYnlcXG4gICAgICAgICAgICBwb3B1bGF0aW9uIG9yIHdlYWx0aCB0byBjcmVhdGUgYSBsZXZlbCBzY2FsZSBhY3Jvc3Mgc3RhdGVzIG9mIHZhcmlvdXNcXG4gICAgICAgICAgICBzaXplcy4gUGV34oCZcyB0b29sIGluY2x1ZGVzIHR3byByYXRpb3M6IGRlYnQgcGVyIGNhcGl0YSBhbmQgZGVidCBhcyBhXFxuICAgICAgICAgICAgcGVyY2VudGFnZSBvZiBzdGF0ZSBwZXJzb25hbCBpbmNvbWUuIFN0YXRlcyBvZnRlbiB1c2UgYSByYXRpbyBvZiBkZWJ0XFxuICAgICAgICAgICAgc2VydmljZSB0byByZXZlbnVlIHdoZW4gdGhleSBldmFsdWF0ZSBkZWJ0IGxldmVscyBhbmQgc2V0IGxpbWl0cy4gVGhpc1xcbiAgICAgICAgICAgIHJhdGlvIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIHRvb2wgZHVlIHRvIGNyb3NzLXN0YXRlIGNvbXBhcmFiaWxpdHlcXG4gICAgICAgICAgICBjaGFsbGVuZ2VzLjxzdXA+OTwvc3VwPlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPGFzaWRlIGNsYXNzPVxcXCJwY3QtYm94XFxcIj5cXG4gICAgICAgICAgICA8aDQ+XFxuICAgICAgICAgICAgICAgIDxzdHJvbmc+XFxuICAgICAgICAgICAgICAgICAgICBNZWFzdXJpbmcgU3RhdGUgRGVidDogVS5TLiBDZW5zdXMgRGF0YSB2cy4gTW9vZHnigJlzIE5ldCBUYXgtU3VwcG9ydGVkXFxuICAgICAgICAgICAgICAgICAgICBEZWJ0IENhbGN1bGF0aW9uc1xcbiAgICAgICAgICAgICAgICA8L3N0cm9uZz5cXG4gICAgICAgICAgICA8L2g0PlxcbiAgICAgICAgICAgIDxwPlxcbiAgICAgICAgICAgICAgICBUaGUgdHdvIG1lYXN1cmVzIG9mIHN0YXRlIGRlYnQgbGV2ZWxzIGluY2x1ZGVkIGluIHRoaXMgdG9vbOKAlGRlYnQgcGVyIGNhcGl0YVxcbiAgICAgICAgICAgICAgICBhbmQgZGVidCBhcyBhIHBlcmNlbnRhZ2Ugb2Ygc3RhdGUgcGVyc29uYWwgaW5jb21l4oCUcmVseSBvbiBVLlMuIENlbnN1c1xcbiAgICAgICAgICAgICAgICBCdXJlYXUgZGF0YS4gVGhlc2UgZGF0YSBjYXB0dXJlIGEgYnJvYWQgc2NvcGUgb2YgZGVidCwgaW5jbHVkaW5nIHNvbWVcXG4gICAgICAgICAgICAgICAgb2JsaWdhdGlvbnMgaGVsZCBieSBjb21wb25lbnQgdW5pdHMsIHN1Y2ggYXMgaW5kZXBlbmRlbnQgYWdlbmNpZXMgYW5kXFxuICAgICAgICAgICAgICAgIHB1YmxpYyBhdXRob3JpdGllcyB0aGF0IOKAnG9wZXJhdGUgc2VwYXJhdGVseSBvciBzb21ld2hhdCBhdXRvbm9tb3VzbHkgZnJvbVxcbiAgICAgICAgICAgICAgICB0aGUgY2VudHJhbCBzdGF0ZSBnb3Zlcm5tZW50IGJ1dCB3aGVyZSB0aGUgc3RhdGUgZ292ZXJubWVudCBtYWludGFpbnNcXG4gICAgICAgICAgICAgICAgYWRtaW5pc3RyYXRpdmUgb3IgZmlzY2FsIGNvbnRyb2wgb3ZlciB0aGVpciBhY3Rpdml0aWVzLuKAnTxzdXA+MTA8L3N1cD4gVGhlc2UgbWVhc3VyZXMgYXJlXFxuICAgICAgICAgICAgICAgIGludGVuZGVkIHRvIGNhcHR1cmUgYSBicm9hZCB1bml2ZXJzZSBvZiBkZWJ0IHJlbGF0ZWQgdG8gc3RhdGUgZ292ZXJubWVudFxcbiAgICAgICAgICAgICAgICBhY3Rpdml0aWVzIGFjcm9zcyB0aGUgNTAgc3RhdGVzLlxcbiAgICAgICAgICAgIDwvcD5cXG4gICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgU3RhdGVz4oCZIG93biBkZWJ0IGFmZm9yZGFiaWxpdHkgc3R1ZGllcyBvZnRlbiB1c2UgTW9vZHnigJlzIEludmVzdG9ycyBTZXJ2aWNlXFxuICAgICAgICAgICAgICAgIEluYy4gY2FsY3VsYXRpb25zIG9mIHN0YXRlIG5ldCB0YXgtc3VwcG9ydGVkIGRlYnQsIHdoaWNoIGRvIG5vdCBpbmNsdWRlXFxuICAgICAgICAgICAgICAgIHNlbGYtc3VwcG9ydGluZyAoZGVidCBwYWlkIGZvciBmcm9tIHNwZWNpZmllZCBwbGVkZ2VkIHJldmVudWUpIG9yIGNvbXBvbmVudFxcbiAgICAgICAgICAgICAgICB1bml0IGRlYnQsIHRvIGNvbXBhcmUgYm9ycm93aW5nIGxldmVscy4gSW5zdGVhZCwgdGhlc2UgbWVhc3VyZXMgY2FwdHVyZVxcbiAgICAgICAgICAgICAgICBvYmxpZ2F0aW9ucyBzdXBwb3J0ZWQgYnkgc3RhdGUgZnVuZHMgdGhhdCBtaWdodCBvdGhlcndpc2UgYmUgYXZhaWxhYmxlIHRvXFxuICAgICAgICAgICAgICAgIGZ1bmQgb3RoZXIgc3RhdGUgcHJpb3JpdGllcy5cXG4gICAgICAgICAgICA8L3A+XFxuICAgICAgICAgICAgPHA+XFxuICAgICAgICAgICAgICAgIFRoZXJlIGFyZSB0cmFkZW9mZnMgYXNzb2NpYXRlZCB3aXRoIGFueSBkZWZpbml0aW9uIG9mIHN0YXRlIGRlYnQuIFRoaXNcXG4gICAgICAgICAgICAgICAgdG9vbCByZWxpZXMgb24gYSBicm9hZGVyIGRlZmluaXRpb24gb2YgbG9uZy10ZXJtIGJvbmRlZCBkZWJ0IHRvIGluZm9ybVxcbiAgICAgICAgICAgICAgICBleGFtaW5hdGlvbnMgb2YgdGhlIGJyZWFkdGggb2Ygc3RhdGUgZnVuY3Rpb25zIHJlbHlpbmcgb24gZGVidFxcbiAgICAgICAgICAgICAgICBmaW5hbmNpbmcuIFRoaXMgZGVmaW5pdGlvbiBtYXkgbm90IGJlIGFwcHJvcHJpYXRlIGZvciBhbGwgYW5hbHlzZXMuXFxuICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgPC9hc2lkZT5cXG4gICAgICAgIDxhIG5hbWU9XFxcImRlYnRfcGVyX2NhcGl0YVxcXCIgaWQ9XFxcImRlYnRfcGVyX2NhcGl0YVxcXCI+PC9hPlxcbiAgICAgICAgPGgzIGNsYXNzPVxcXCJqcy1kZWJ0X3Blcl9jYXBpdGFcXFwiPlxcbiAgICAgICAgICAgIERlYnQgcGVyIGNhcGl0YVxcbiAgICAgICAgPC9oMz5cXG4gICAgICAgIDxwPlxcbiAgICAgICAgICAgIERlYnQgcGVyIGNhcGl0YSwgd2hpY2ggbWVhc3VyZXMgdG90YWwgZGVidCBhZ2FpbnN0IGEgc3RhdGXigJlzXFxuICAgICAgICAgICAgcG9wdWxhdGlvbiwgZmFjaWxpdGF0ZXMgY29tcGFyaXNvbnMgYmV0d2VlbiBzdGF0ZXMgb2YgZGlmZmVyZW50IHNpemVzLlxcbiAgICAgICAgICAgIEl0IGFsc28gaGVscHMgcG9saWN5bWFrZXJzIHVuZGVyc3RhbmQgdGhlIGRlYnQgYnVyZGVuIG9uIGluZGl2aWR1YWxcXG4gICAgICAgICAgICByZXNpZGVudHMsIHdobyBwcm92aWRlIG11Y2ggb2YgdGhlIHJldmVudWUgc3RhdGVzIHVzZSB0byByZXBheSBkZWJ0IGluIHRoZVxcbiAgICAgICAgICAgIGZvcm0gb2YgdGF4ZXMgYW5kIHVzZXIgZmVlcy4gVGhlIHJhbmdlIG9mIGRlYnQgcGVyIGNhcGl0YSBpcyAkODcwIHRvXFxuICAgICAgICAgICAgJDExLDA1OS5cXG4gICAgICAgIDwvcD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBjdC1ub3RlXFxcIj5cXG4gICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5Tb3VyY2VzOjwvc3Ryb25nPiBQZXcgYW5hbHlzaXMgb2YgZGF0YSBmcm9tIFUuUy4gQ2Vuc3VzIEJ1cmVhdSwg4oCcQW5udWFsIFN1cnZleSBvZlxcbiAgICAgICAgICAgICAgICBTdGF0ZSBhbmQgTG9jYWwgR292ZXJubWVudCBGaW5hbmNlczogMjAxNSBEYXRhIFJlbGVhc2XigJ0gKDIwMTgpLFxcbiAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwczovL3d3dy5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvZ292LWZpbmFuY2VzL25ld3Nyb29tL3VwZGF0ZXMvcmVsZWFzZS5odG1sXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWxcXG4gICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICA7IFUuUy4gQ2Vuc3VzIEJ1cmVhdSwg4oCcQW5udWFsIEVzdGltYXRlcyBvZiB0aGUgUmVzaWRlbnQgUG9wdWxhdGlvbiBmb3IgdGhlXFxuICAgICAgICAgICAgICAgIFVuaXRlZCBTdGF0ZXMsIFJlZ2lvbnMsIFN0YXRlcywgYW5kIFB1ZXJ0byBSaWNvOiBBcHJpbCAxLCAyMDEwIHRvIEp1bHkgMSxcXG4gICAgICAgICAgICAgICAgMjAxNyzigJ0gVGFibGUgMSxcXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cyLmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9wb3Blc3QvdGFibGVzLzIwMTAtMjAxNy9zdGF0ZS90b3RhbHMvbnN0LWVzdDIwMTctMDEueGxzeFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICBodHRwczovL3d3dzIuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3BvcGVzdC90YWJsZXMvMjAxMC0yMDE3L3N0YXRlL3RvdGFscy9uc3QtZXN0MjAxNy0wMS54bHN4XFxuICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICA8L3A+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxhIG5hbWU9XFxcImRlYnRfcGVyY2VudF9TUElcXFwiIGlkPVxcXCJkZWJ0X3BlcmNlbnRfU1BJXFxcIj48L2E+XFxuICAgICAgICA8aDMgY2xhc3M9XFxcImpzLWRlYnRfcGVyY2VudF9TUElcXFwiPlxcbiAgICAgICAgICAgIERlYnQgYXMgYSBwZXJjZW50YWdlIG9mIHN0YXRlIHBlcnNvbmFsIGluY29tZVxcbiAgICAgICAgPC9oMz5cXG4gICAgICAgIDxwPlxcbiAgICAgICAgICAgIENvbnNpZGVyaW5nIGEgc3RhdGXigJlzIGRlYnQgbGV2ZWwgcmVsYXRpdmUgdG8gaXRzIGF2YWlsYWJsZSByZXNvdXJjZXMgZm9yXFxuICAgICAgICAgICAgcmVwYXltZW50IGlzIGEgY29tbW9uIHByYWN0aWNlIHVzZWQgYnkgc3RhdGVzLCBjcmVkaXQgcmF0aW5nIGFnZW5jaWVzLCBhbmRcXG4gICAgICAgICAgICBhY2FkZW1pY3MuPHN1cD4xMTwvc3VwPiBTdGF0ZVxcbiAgICAgICAgICAgIHBlcnNvbmFsIGluY29tZSBpcyBvbmUgbWVhc3VyZSBvZiBhIHN0YXRl4oCZcyBhYmlsaXR5IHRvIHNlcnZpY2UgZGVidC4gRGVidFxcbiAgICAgICAgICAgIGFzIGEgcGVyY2VudGFnZSBvZiBwZXJzb25hbCBpbmNvbWUgcmFuZ2VzIGZyb20gMS45IHBlcmNlbnQgdG8gMTcuNiBwZXJjZW50LlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPlxcbiAgICAgICAgICAgIDxwPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPlNvdXJjZXM6PC9zdHJvbmc+IFBldyBhbmFseXNpcyBvZiBkYXRhIGZyb20gVS5TLiBDZW5zdXMgQnVyZWF1LCDigJxBbm51YWwgU3VydmV5IG9mXFxuICAgICAgICAgICAgICAgIFN0YXRlIGFuZCBMb2NhbCBHb3Zlcm5tZW50IEZpbmFuY2VzOiAyMDE1IERhdGEgUmVsZWFzZeKAnSAoMjAxOCksXFxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly93d3cuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL2dvdi1maW5hbmNlcy9uZXdzcm9vbS91cGRhdGVzL3JlbGVhc2UuaHRtbFxcbiAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgIDsgVS5TLiBCdXJlYXUgb2YgRWNvbm9taWMgQW5hbHlzaXMsIOKAnFNBMSBQZXJzb25hbCBJbmNvbWUgU3VtbWFyeTogUGVyc29uYWxcXG4gICAgICAgICAgICAgICAgSW5jb21lLCBQb3B1bGF0aW9uLCBQZXIgQ2FwaXRhIFBlcnNvbmFsIEluY29tZSzigJ1cXG4gICAgICAgICAgICAgICAgaHR0cHM6Ly93d3cuYmVhLmdvdi9kYXRhL2luY29tZS1zYXZpbmcvcGVyc29uYWwtaW5jb21lLWJ5LXN0YXRlXFxuICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8YSBuYW1lPVxcXCJjcmVkaXRfcmF0aW5nXFxcIiBpZD1cXFwiY3JlZGl0X3JhdGluZ1xcXCI+PC9hPlxcbiAgICAgICAgPGgzIGNsYXNzPVxcXCJqcy1jcmVkaXRfcmF0aW5nIHN0YXRpY1xcXCI+XFxuICAgICAgICAgICAgQ3JlZGl0IHJhdGluZ3MgKFNlcHRlbWJlciAyMDE4IGFuZCBTZXB0ZW1iZXIgMjAxNSlcXG4gICAgICAgIDwvaDM+XFxuICAgICAgICA8cD5cXG4gICAgICAgICAgICBUaGlzIHRvb2wgYWxsb3dzIHVzZXJzIHRvIGdyb3VwIHN0YXRlcyBieSBTJmFtcDtQIEdsb2JhbCBSYXRpbmdz4oCZIGNyZWRpdFxcbiAgICAgICAgICAgIHJhdGluZ3MgdG8gY29tcGFyZSB0aG9zZSB3aXRoIHNpbWlsYXIgY3JlZGl0IHByb2ZpbGVzLiBUaGUgdXNlciBjYW4gc2VsZWN0XFxuICAgICAgICAgICAgY3JlZGl0IHJhdGluZ3MgZnJvbSAyMDE4IG9yIDIwMTUgdG8gbG9vayBhdCBlaXRoZXIgcmVjZW50IGluZm9ybWF0aW9uIG9yXFxuICAgICAgICAgICAgaW5mb3JtYXRpb24gY29ycmVzcG9uZGluZyB0byBvdGhlciBkYXRhIHBvaW50cyBpbiB0aGlzIHRvb2wuXFxuICAgICAgICA8L3A+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwY3Qtbm90ZVxcXCI+XFxuICAgICAgICAgICAgPHA+XFxuICAgICAgICAgICAgICAgIDxzdHJvbmc+Tm90ZTo8L3N0cm9uZz4gUGV3IGNvbGxlY3RlZCByYXRpbmdzIG9uIGdlbmVyYWwgb2JsaWdhdGlvbiBpc3N1YW5jZSBhcyBvZiBTZXB0ZW1iZXJcXG4gICAgICAgICAgICAgICAgMjAxOCBhbmQgU2VwdGVtYmVyIDIwMTUuXFxuICAgICAgICAgICAgICAgIElmIHRoZSBzdGF0ZSBkb2VzIG5vdCBpc3N1ZSBHTyBib25kcywgdGhlIHJhdGluZyBvbiB0aGUgc2VuaW9yLW1vc3RcXG4gICAgICAgICAgICAgICAgdGF4LWJhY2tlZCBpc3N1YW5jZSB3YXMgdXNlZCBpbnN0ZWFkLlxcbiAgICAgICAgICAgIDwvcD5cXG4gICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5Tb3VyY2U6PC9zdHJvbmc+IFMmYW1wO1AgR2xvYmFsIFJhdGluZ3MsIHN0YXRlIGJyaWVmcyxcXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuc3ByYXRpbmdzLmNvbS9lbl9VUy90b3BpYy8tL3JlbmRlci90b3BpYy1kZXRhaWwvdS1zLXN0YXRlc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICBodHRwczovL3d3dy5zcHJhdGluZ3MuY29tL2VuX1VTL3RvcGljLy0vcmVuZGVyL3RvcGljLWRldGFpbC91LXMtc3RhdGVzXFxuICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICA8L3A+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxhIG5hbWU9XFxcImNlbnN1c19yZWdpb25cXFwiIGlkPVxcXCJjZW5zdXNfcmVnaW9uXFxcIj48L2E+XFxuICAgICAgICA8aDMgY2xhc3M9XFxcImpzLWNlbnN1cyBzdGF0aWNcXFwiPlxcbiAgICAgICAgICAgIENlbnN1cyByZWdpb24gYW5kIGRpdmlzaW9uXFxuICAgICAgICA8L2gzPlxcbiAgICAgICAgPHA+XFxuICAgICAgICAgICAgVGhpcyB0b29sIGFsbG93cyB1c2VycyB0byBncm91cCBzdGF0ZXMgYnkgVS5TLiBDZW5zdXMgcmVnaW9uIGFuZCBzdWJyZWdpb25cXG4gICAgICAgICAgICAo4oCcZGl2aXNpb27igJ0pIHRvIG1ha2UgZ2VvZ3JhcGhpY2FsIGNvbXBhcmlzb25zLiBUaGVyZSBhcmUgZm91ciByZWdpb25zIGFuZFxcbiAgICAgICAgICAgIG5pbmUgZGl2aXNpb25zLiBBbHRob3VnaCBnZW9ncmFwaHkgYWxvbmUgaXMgbm90IGFsd2F5cyBhIHVzZWZ1bCBiZW5jaG1hcmssXFxuICAgICAgICAgICAgc3RhdGUgb2ZmaWNpYWxzIG9mdGVuIHdpc2ggdG8gdW5kZXJzdGFuZCBtb3JlIGFib3V0IHRoZWlyIG5laWdoYm9yc+KAmVxcbiAgICAgICAgICAgIGNvbmRpdGlvbnMuXFxuICAgICAgICA8L3A+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwY3Qtbm90ZVxcXCI+XFxuICAgICAgICAgICAgPHA+XFxuICAgICAgICAgICAgICAgIDxzdHJvbmc+U291cmNlOjwvc3Ryb25nPiBVLlMuIENlbnN1cyBCdXJlYXUsIOKAnENlbnN1cyBSZWdpb25zIGFuZCBEaXZpc2lvbnMgb2YgdGhlIFVuaXRlZFxcbiAgICAgICAgICAgICAgICBTdGF0ZXMs4oCdXFxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3Mi5jZW5zdXMuZ292L2dlby9wZGZzL21hcHMtZGF0YS9tYXBzL3JlZmVyZW5jZS91c19yZWdkaXYucGRmXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3Mi5jZW5zdXMuZ292L2dlby9wZGZzL21hcHMtZGF0YS9tYXBzL3JlZmVyZW5jZS91c19yZWdkaXYucGRmXFxuICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICA8L3A+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxoMT5cXG4gICAgICAgIDwvaDE+XFxuICAgICAgICA8YnIgY2xlYXI9XFxcImFsbFxcXCIgLz5cXG4gICAgICAgIDxwPlxcbiAgICAgICAgICAgIDxzdHJvbmc+PC9zdHJvbmc+XFxuICAgICAgICA8L3A+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwY3QtZW5kbm90ZXNcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgaWQ9XFxcImVkbjFcXFwiPlxcbiAgICAgICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgICAgIDEuXFxuICAgICAgICAgICAgICAgICAgICBUaGUgbGl0ZXJhdHVyZSByZXZpZXdlZCBpbmNsdWRlZCBSb2JlcnQgVy4gV2Fzc21lciBhbmQgUm9uYWxkIEMuXFxuICAgICAgICAgICAgICAgICAgICBGaXNoZXIsIOKAnFN0YXRlIGFuZCBMb2NhbCBHb3Zlcm5tZW50IERlYnQsIDE5OTItMjAwOCzigJ0gPGVtPlN0YXRlIFRheCBOb3RlczwvZW0+LCBBdWcuIDE1LCAyMDExOiA0MjctNDM2OyBhbmQgVy4gQmFydGxleVxcbiAgICAgICAgICAgICAgICAgICAgSGlsZHJldGggYW5kIEdlcmFsZCBKLiBNaWxsZXIsIOKAnERlYnQgYW5kIExvY2FsIEVjb25vbXk6IFByb2JsZW1zIGluXFxuICAgICAgICAgICAgICAgICAgICBCZW5jaG1hcmtpbmcgTG9jYWwgR292ZXJubWVudCBEZWJ0IEFmZm9yZGFiaWxpdHks4oCdIDxlbT5QdWJsaWMgQnVkZ2V0aW5nICZhbXA7IEZpbmFuY2U8L2VtPiAyMiwgbm8uIDQgKDIwMDIpOiA5OS0xMTMuXFxuICAgICAgICAgICAgICAgIDwvcD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGlkPVxcXCJlZG4yXFxcIj5cXG4gICAgICAgICAgICAgICAgPHA+XFxuICAgICAgICAgICAgICAgICAgICAyLlxcbiAgICAgICAgICAgICAgICAgICAgVGhlIFBldyBDaGFyaXRhYmxlIFRydXN0cywg4oCcU3RyYXRlZ2llcyBmb3IgTWFuYWdpbmcgU3RhdGUgRGVidOKAnVxcbiAgICAgICAgICAgICAgICAgICAgKDIwMTcpLFxcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cDovL3d3dy5wZXd0cnVzdHMub3JnL2VuL3Jlc2VhcmNoLWFuZC1hbmFseXNpcy9yZXBvcnRzLzIwMTcvMDYvc3RyYXRlZ2llcy1mb3ItbWFuYWdpbmctc3RhdGUtZGVidFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgaHR0cDovL3d3dy5wZXd0cnVzdHMub3JnL2VuL3Jlc2VhcmNoLWFuZC1hbmFseXNpcy9yZXBvcnRzLzIwMTcvMDYvc3RyYXRlZ2llcy1mb3ItbWFuYWdpbmctc3RhdGUtZGVidFxcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgLlxcbiAgICAgICAgICAgICAgICA8L3A+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBpZD1cXFwiZWRuM1xcXCI+XFxuICAgICAgICAgICAgICAgIDxwPlxcbiAgICAgICAgICAgICAgICAgICAgMy5cXG4gICAgICAgICAgICAgICAgICAgIEliaWQuXFxuICAgICAgICAgICAgICAgIDwvcD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGlkPVxcXCJlZG40XFxcIj5cXG4gICAgICAgICAgICAgICAgPHA+XFxuICAgICAgICAgICAgICAgICAgICA0LlxcbiAgICAgICAgICAgICAgICAgICAgRm9yIG1vcmUgZGV0YWlsIG9uIHRoZXNlIGRhdGEsIHNlZSBUaGUgUGV3IENoYXJpdGFibGUgVHJ1c3RzLFxcbiAgICAgICAgICAgICAgICAgICAg4oCcU3RyYXRlZ2llcyBmb3IgTWFuYWdpbmcgU3RhdGUgRGVidCzigJ0gbWV0aG9kb2xvZ3kuXFxuICAgICAgICAgICAgICAgIDwvcD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGlkPVxcXCJlZG41XFxcIj5cXG4gICAgICAgICAgICAgICAgPHA+XFxuICAgICAgICAgICAgICAgICAgICA1LlxcbiAgICAgICAgICAgICAgICAgICAgRm9yIGEgZGlzY3Vzc2lvbiBvZiB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gZGVidCBsaW1pdHMgYW5kIGxvY2FsXFxuICAgICAgICAgICAgICAgICAgICBib3Jyb3dpbmcsIHNlZSBELiBSb2RlcmljayBLaWV3aWV0IGFuZCBLcmlzdGluIFN6YWthbHksXFxuICAgICAgICAgICAgICAgICAgICDigJxDb25zdGl0dXRpb25hbCBMaW1pdGF0aW9ucyBvbiBCb3Jyb3dpbmc6IEFuIEFuYWx5c2lzIG9mIFN0YXRlXFxuICAgICAgICAgICAgICAgICAgICBCb25kZWQgSW5kZWJ0ZWRuZXNzLOKAnSA8ZW0+VGhlIEpvdXJuYWwgb2YgTGF3LCBFY29ub21pY3MgJmFtcDsgT3JnYW5pemF0aW9uIDwvZW0+MTIsIG5vLiAxXFxuICAgICAgICAgICAgICAgICAgICAoMTk5Nik6IDYyLTk3LFxcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuanN0b3Iub3JnL3N0YWJsZS83NjUwMzk/c2VxPTEjcGFnZV9zY2FuX3RhYl9jb250ZW50c1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly93d3cuanN0b3Iub3JnL3N0YWJsZS83NjUwMzk/c2VxPTEjcGFnZV9zY2FuX3RhYl9jb250ZW50c1xcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgLlxcbiAgICAgICAgICAgICAgICA8L3A+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBpZD1cXFwiZWRuNlxcXCI+XFxuICAgICAgICAgICAgICAgIDxwPlxcbiAgICAgICAgICAgICAgICAgICAgNi5cXG4gICAgICAgICAgICAgICAgICAgIFRoZSBQZXcgQ2hhcml0YWJsZSBUcnVzdHMsIOKAnFRheCBSZXZlbnVlIFZvbGF0aWxpdHkgVmFyaWVzIEFjcm9zc1xcbiAgICAgICAgICAgICAgICAgICAgU3RhdGVzLCBSZXZlbnVlIFN0cmVhbXMs4oCdIGFjY2Vzc2VkIFNlcHQuIDEwLCAyMDE4LFxcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cDovL3d3dy5wZXd0cnVzdHMub3JnL2VuL211bHRpbWVkaWEvZGF0YS12aXN1YWxpemF0aW9ucy8yMDE0L2Zpc2NhbC01MCNpbmQ2XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICBodHRwOi8vd3d3LnBld3RydXN0cy5vcmcvZW4vbXVsdGltZWRpYS9kYXRhLXZpc3VhbGl6YXRpb25zLzIwMTQvZmlzY2FsLTUwI2luZDZcXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgICAgIC5cXG4gICAgICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgaWQ9XFxcImVkbjdcXFwiPlxcbiAgICAgICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgICAgIDcuXFxuICAgICAgICAgICAgICAgICAgICBPbmUgc3R1ZHkgZm91bmQgdGhhdCBhcyBlY29ub21pYyB2b2xhdGlsaXR5IGluY3JlYXNlcywgc3RhdGVzXFxuICAgICAgICAgICAgICAgICAgICBwcmVmZXIgdG8gcGF5IGZvciBpbmZyYXN0cnVjdHVyZSBwcm9qZWN0cyB3aXRoIGNhc2ggcmF0aGVyIHRoYW5cXG4gICAgICAgICAgICAgICAgICAgIHRocm91Z2ggZmluYW5jaW5nLiBXZW4gV2FuZywgWWlsaW4gSG91LCBhbmQgV2lsbGlhbSBEdW5jb21lLFxcbiAgICAgICAgICAgICAgICAgICAg4oCcRGV0ZXJtaW5hbnRzIG9mIFBheS1hcy1Zb3UtR28gRmluYW5jaW5nIG9mIENhcGl0YWwgUHJvamVjdHM6XFxuICAgICAgICAgICAgICAgICAgICBFdmlkZW5jZSBGcm9tIHRoZSBTdGF0ZXMs4oCdIDxlbT5QdWJsaWMgQnVkZ2V0aW5nICZhbXA7IEZpbmFuY2UgPC9lbT5cXG4gICAgICAgICAgICAgICAgICAgIDI3LCBuby4gNCAoMjAwNyk6IDE4LTQyLFxcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly9kb2kub3JnLzEwLjExMTEvai4xNTQwLTU4NTAuMjAwNy4wMDg5Mi54XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL2RvaS5vcmcvMTAuMTExMS9qLjE1NDAtNTg1MC4yMDA3LjAwODkyLnhcXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgICAgIC5cXG4gICAgICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgaWQ9XFxcImVkbjhcXFwiPlxcbiAgICAgICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgICAgIDguXFxuICAgICAgICAgICAgICAgICAgICBSb3kgQmFobCBhbmQgV2lsbGlhbSBEdW5jb21iZSwg4oCcU3RhdGUgYW5kIExvY2FsIERlYnQgQnVyZGVucyBpbiB0aGVcXG4gICAgICAgICAgICAgICAgICAgIDE5ODBzOiBBIFN0dWR5IGluIENvbnRyYXN0LOKAnSA8ZW0+UHVibGljIEFkbWluaXN0cmF0aW9uIFJldmlldzwvZW0+XFxuICAgICAgICAgICAgICAgICAgICA1MywgTm8uIDEgKDE5OTMpOiAzMS00MC5cXG4gICAgICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgaWQ9XFxcImVkbjlcXFwiPlxcbiAgICAgICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgICAgIDkuXFxuICAgICAgICAgICAgICAgICAgICBTdGF0ZXMgZG8gbm90IHVzZSB1bmlmb3JtIGRlZmluaXRpb25zIG9mIGRlYnQgc2VydmljZSBpbiB0aGVpclxcbiAgICAgICAgICAgICAgICAgICAgY29tcHJlaGVuc2l2ZSBhbm51YWwgZmluYW5jaWFsIHJlcG9ydHMuIEVhY2ggcmVwb3J0cyBkZWJ0IHNlcnZpY2VcXG4gICAgICAgICAgICAgICAgICAgIGZyb20gYSB1bmlxdWUgY29tYmluYXRpb24gb2YgZGlzcGFyYXRlIGZ1bmRzLiBVc2luZyB0aGVzZSBzb3VyY2VzXFxuICAgICAgICAgICAgICAgICAgICB0byBjcmVhdGUgYSBjb21wYXJhYmxlIGNyb3NzLXN0YXRlIG1lYXN1cmUgb2YgZGVidCBzZXJ2aWNlIHRvXFxuICAgICAgICAgICAgICAgICAgICByZXZlbnVlcyBpcyB0aGVyZWZvcmUgZGlmZmljdWx0IHdpdGhvdXQgYSBkZXRhaWxlZCB1bmRlcnN0YW5kaW5nIG9mXFxuICAgICAgICAgICAgICAgICAgICBlYWNoIHN0YXRl4oCZcyByZXBvcnRpbmcgcHJhY3RpY2VzLiBBcyBhIHJlc3VsdCwgbWFueSBjcm9zcy1zdGF0ZVxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyaXNvbnMgb2YgZGVidCBzZXJ2aWNlIHRvIHJldmVudWVzIGFyZSBpbmV4YWN0LlxcbiAgICAgICAgICAgICAgICA8L3A+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBpZD1cXFwiZWRuMTBcXFwiPlxcbiAgICAgICAgICAgICAgICA8cD5cXG4gICAgICAgICAgICAgICAgICAgIDEwLlxcbiAgICAgICAgICAgICAgICAgICAgVS5TLiBDZW5zdXMgQnVyZWF1LCDigJxBbm51YWwgU3VydmV5IG9mIFN0YXRlIEdvdmVybm1lbnQgRmluYW5jZXMs4oCdXFxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwczovL3d3dy5jZW5zdXMuZ292L2Vjb24vb3ZlcnZpZXcvZ28xNTAwLmh0bWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvZWNvbi9vdmVydmlldy9nbzE1MDAuaHRtbFxcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgLiBFeGFtcGxlcyBvZiBjb21wb25lbnQgdW5pdHMsIHdoaWNoIGFyZSBsZWdhbGx5IHNlcGFyYXRlIGVudGl0aWVzXFxuICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBwcmltYXJ5IHN0YXRlIGdvdmVybm1lbnQgYnV0IHBlcmZvcm0ga2V5IGZ1bmN0aW9ucyxcXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGUgaG91c2luZyBhdXRob3JpdGllcywgZWNvbm9taWMgZGV2ZWxvcG1lbnQgY29ycG9yYXRpb25zLCBhbmRcXG4gICAgICAgICAgICAgICAgICAgIHVuaXZlcnNpdGllcy5cXG4gICAgICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgaWQ9XFxcImVkbjExXFxcIj5cXG4gICAgICAgICAgICAgICAgPHA+XFxuICAgICAgICAgICAgICAgICAgICAxMS5cXG4gICAgICAgICAgICAgICAgICAgIEplbm5pZmVyIFdlaW5lciwg4oCcQSBHdWlkZSB0byBTdGF0ZSBEZWJ0IEFmZm9yZGFiaWxpdHkgU3R1ZGllczpcXG4gICAgICAgICAgICAgICAgICAgIENvbW1vbiBFbGVtZW50cyBhbmQgQmVzdCBQcmFjdGljZXMs4oCdIE5ldyBFbmdsYW5kIFB1YmxpYyBQb2xpY3lcXG4gICAgICAgICAgICAgICAgICAgIENlbnRlciBhdCB0aGUgRmVkZXJhbCBSZXNlcnZlIEJhbmsgb2YgQm9zdG9uICgyMDEzKSxcXG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmJvc3RvbmZlZC5vcmcvcHVibGljYXRpb25zL25ldy1lbmdsYW5kLXB1YmxpYy1wb2xpY3ktY2VudGVyLXBvbGljeS1icmllZi8yMDEzL2EtZ3VpZGUtdG8tc3RhdGUtZGVidC1hZmZvcmRhYmlsaXR5LXN0dWRpZXMtY29tbW9uLWVsZW1lbnRzLWFuZC1iZXN0LXByYWN0aWNlcy5hc3B4XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL3d3dy5ib3N0b25mZWQub3JnL3B1YmxpY2F0aW9ucy9uZXctZW5nbGFuZC1wdWJsaWMtcG9saWN5LWNlbnRlci1wb2xpY3ktYnJpZWYvMjAxMy9hLWd1aWRlLXRvLXN0YXRlLWRlYnQtYWZmb3JkYWJpbGl0eS1zdHVkaWVzLWNvbW1vbi1lbGVtZW50cy1hbmQtYmVzdC1wcmFjdGljZXMuYXNweFxcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgOyBDaGFybGVzIEJyZWNoZXIsIEt1cnQgUmljaHdlcmdlciwgYW5kIE1hcmNpYSBWYW4gV2FnbmVyLCDigJxBblxcbiAgICAgICAgICAgICAgICAgICAgQXBwcm9hY2ggdG8gTWVhc3VyaW5nIHRoZSBBZmZvcmRhYmlsaXR5IG9mIFN0YXRlIERlYnQs4oCdIDxlbT5QdWJsaWMgQnVkZ2V0aW5nICZhbXA7IEZpbmFuY2U8L2VtPiAyMywgbm8uIDQgKDIwMDMpOiA2NS04NSxcXG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vb25saW5lbGlicmFyeS53aWxleS5jb20vZG9pL2Ficy8xMC4xMTExL2ouMDI3NS0xMTAwLjIwMDMuMDIzMDQwMDQueFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly9vbmxpbmVsaWJyYXJ5LndpbGV5LmNvbS9kb2kvYWJzLzEwLjExMTEvai4wMjc1LTExMDAuMjAwMy4wMjMwNDAwNC54XFxuICAgICAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgICAgICAuXFxuICAgICAgICAgICAgICAgIDwvcD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L3NlY3Rpb24+XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxmb290ZXI+XFxuXFx0XFx0PGRpdj5cXG5cXHRcXHRcXHQ8cD48c3Ryb25nPkRvd25sb2FkIHJlc291cmNlczo8L3N0cm9uZz5cXG5cXHRcXHRcXHRcXHRcXHQ8YSBjbGFzcz1cXFwicGN0LWRvd25sb2FkXFxcIiBocmVmPVxcXCJcXFwiPltwbGFjZWhvbGRlcl08L2E+XFxuXFx0XFx0XFx0XFx0XFx0PGEgY2xhc3M9XFxcInBjdC1kb3dubG9hZFxcXCIgaHJlZj1cXFwiXFxcIj5bcGxhY2Vob2xkZXJdPC9hPlxcblxcdFxcdFxcdFxcdDwvcD48L2Rpdj5cXG48L2Zvb3Rlcj5cIjsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wic3RhdGljXCI6XCJzcmMtY3NzLS1zdGF0aWNcIn07Il0sInNvdXJjZVJvb3QiOiIifQ==
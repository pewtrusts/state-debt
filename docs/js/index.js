!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=38)}([function(e,t,n){e.exports={dropdownWrapper:"src-views-fifty-state-selections--dropdownWrapper",dropdownOuter:"src-views-fifty-state-selections--dropdownOuter",dropdownInner:"src-views-fifty-state-selections--dropdownInner",label:"src-views-fifty-state-selections--label",sortActive:"src-views-fifty-state-selections--sortActive",labelSort:"src-views-fifty-state-selections--labelSort",sortBy:"src-views-fifty-state-selections--sortBy"}},function(e,t,n){e.exports={compareColor1:"src-components-comparison--compareColor1",compareColor2:"src-components-comparison--compareColor2",chartContainer:"src-components-comparison--chartContainer",chartLabel:"src-components-comparison--chartLabel",chartLabelText:"src-components-comparison--chartLabelText",chartLabel1:"src-components-comparison--chartLabel1",chartLabel2:"src-components-comparison--chartLabel2",barContainer:"src-components-comparison--barContainer",barContainer1:"src-components-comparison--barContainer1",barContainer2:"src-components-comparison--barContainer2",dataLabel:"src-components-comparison--dataLabel"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(6);var a=function(){function e(t,n){var r=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"!=typeof t)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=t,this.model=n.model,this.parent=n.parent,this.renderToSelector=n.renderToSelector,this.container=i.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.el=this.prerender(arguments),this.isReady=new Promise(function(e,t){r.resolve=e,r.reject=t})}return r(e,[{key:"prerender",value:function(){var e=i.DOMHelpers.q(this.selector);return e&&!this.rerender?(this.prerendered=!0,e):e?(e.innerHTML="",e):i.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),e}();t.default=a},function(e,t,n){e.exports={groupHeader:"src-views-state-comparison--groupHeader",typeContainer:"src-views-state-comparison--typeContainer","credit-rating":"src-views-state-comparison--credit-rating",typeDiv:"src-views-state-comparison--typeDiv",typeHeader:"src-views-state-comparison--typeHeader",debt_limit_type:"src-views-state-comparison--debt_limit_type",credit2015:"src-views-state-comparison--credit2015",credit2018:"src-views-state-comparison--credit2018",autoComplete0:"src-views-state-comparison--autoComplete0","autoComplete_wrapper-0":"src-views-state-comparison--autoComplete_wrapper-0",autoComplete1:"src-views-state-comparison--autoComplete1","autoComplete_wrapper-1":"src-views-state-comparison--autoComplete_wrapper-1",withTooltip:"src-views-state-comparison--withTooltip"}},function(e,t,n){e.exports={groupHeader:"src-views-fifty-state--groupHeader",barLabel:"src-views-fifty-state--barLabel",groupDiv:"src-views-fifty-state--groupDiv",barContainer:"src-views-fifty-state--barContainer",isHighlighted:"src-views-fifty-state--isHighlighted"}},function(e,t,n){const r=n(10),i={};function a(){console.log(i)}Array.prototype.compare=Array.prototype.compare||function(e){if(this.length!=e.length)return!1;if(0===this.length&&0===e.length)return!0;console.log("in compare"),console.log(this);for(var t=0;t<e.length;t++)if(this[t]!==e[t])return!1;return!0},t.stateModule={logState:a,getState:function(e){return void 0!==i[e]?i[e][0]:void 0},getPreviousState:function(e){return void 0!==i[e]&&void 0!==i[e][1]?i[e][1]:void 0},setState:function(e,t){void 0===i[e]?(i[e]=[t],r.publish(e,t),a()):("string"==typeof t||"number"==typeof t?i[e][0]!==t:!Array.isArray(t)||!Array.isArray(i[e][0])||!t.compare(i[e][0]))&&(i[e].unshift(t),r.publish(e,t),a(),i[e].length>2&&(i[e].length=2))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GTMPush=function(e){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:e})},t.publishWindowResize=function(e){var t;window.addEventListener("resize",function(){t||(t=setTimeout(function(){e.setState("resize",document.documentElement.clientWidth),t=null},350))},!1)};t.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(e,t){var n=this,r=t||0;return t&&(this.style.transition="opacity "+t+"s ease-in-out"),new Promise(function(t){var i=window.getComputedStyle(n).getPropertyValue("transition-duration")||r,a=1e3*parseFloat(i);n.fadeOutContent(),setTimeout(function(){n.innerHTML=e,n.classList.remove("no-opacity"),t(!0)},a)})})),t.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(e,t){if(this.length<=e)return this;var n=this.substr(0,e-1);return(t?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var e,t=0;if(0===this.length)return t;for(e=0;e<this.length;e++)t=(t<<5)-t+this.charCodeAt(e),t|=0;return t})),t.DOMHelpers={c:function(e){if(-1!==e.indexOf(".")||-1!==e.indexOf("#")){var t=e.match(/\.([^#.]*)/g)||[],n=e.match(/#([^.]*)/),r=e.match(/^([^.#]+)/),i=document.createElement(r[0]);return t.forEach(function(e){i.classList.add(e.replace(".",""))}),null!==n&&i.setAttribute("id",n[1]),i}return document.createElement(e)},q:function(e){return document.querySelector(e)},qa:function(e){return document.querySelectorAll(e)}}},function(e,t,n){var r=n(33),i=n(10),a={};function o(e,t){var n=r(t.toString());return{token:"sub"+r(e+t),fn:n}}e.exports={logSubs:function(){console.log(a)},setSubs:function(e){e.forEach(function(e){var t=e[0],n=e[1],r=o(t,n);if(void 0===a[r.fn]&&(a[r.fn]={}),void 0!==a[r.fn][t])throw"Subscription token is already in use.";a[r.fn][t]=i.subscribe(t,n)})},cancelSub:function(e,t){var n=o(e,t);if(void 0===a[n.fn]||void 0===a[n.fn][e])throw"Subscription does not exist.";i.unsubscribe(a[n.fn][e]),delete a[n.fn][e],0===Object.keys(a[n.fn]).length&&delete a[n.fn]}}},function(e,t){e.exports="<p><strong>Credit rating:</strong> Standard &amp; Poor’s general obligation credit rating.</p>\n"},function(e,t,n){e.exports={bar:"src-components-bar--bar",barColor1:"src-components-bar--barColor1",barColor2:"src-components-bar--barColor2"}},function(e,t,n){(function(e){!function(n,r){"use strict";var i={};n.PubSub=i;var a=n.define;!function(e){var t={},n=-1;function r(e){var t;for(t in e)if(e.hasOwnProperty(t))return!0;return!1}function i(e,t,n){try{e(t,n)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function a(e,t,n){e(t,n)}function o(e,n,r,o){var s,p=t[n],l=o?a:i;if(t.hasOwnProperty(n))for(s in p)p.hasOwnProperty(s)&&l(p[s],e,r)}function s(e,n,i,a){var s=function(e,t,n){return function(){var r=String(e),i=r.lastIndexOf(".");for(o(e,e,t,n);-1!==i;)r=r.substr(0,i),i=r.lastIndexOf("."),o(e,r,t,n)}}(e="symbol"==typeof e?e.toString():e,n,a),p=function(e){var n=String(e),i=Boolean(t.hasOwnProperty(n)&&r(t[n])),a=n.lastIndexOf(".");for(;!i&&-1!==a;)n=n.substr(0,a),a=n.lastIndexOf("."),i=Boolean(t.hasOwnProperty(n)&&r(t[n]));return i}(e);return!!p&&(!0===i?s():setTimeout(s,0),!0)}e.publish=function(t,n){return s(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return s(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,r){if("function"!=typeof r)return!1;e="symbol"==typeof e?e.toString():e,t.hasOwnProperty(e)||(t[e]={});var i="uid_"+String(++n);return t[e][i]=r,i},e.subscribeOnce=function(t,n){var r=e.subscribe(t,function(){e.unsubscribe(r),n.apply(this,arguments)});return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)t.hasOwnProperty(n)&&0===n.indexOf(e)&&delete t[n]},e.unsubscribe=function(n){var r,i,a,o="string"==typeof n&&(t.hasOwnProperty(n)||function(e){var n;for(n in t)if(t.hasOwnProperty(n)&&0===n.indexOf(e))return!0;return!1}(n)),s=!o&&"string"==typeof n,p="function"==typeof n,l=!1;if(!o){for(r in t)if(t.hasOwnProperty(r)){if(i=t[r],s&&i[n]){delete i[n],l=n;break}if(p)for(a in i)i.hasOwnProperty(a)&&i[a]===n&&(delete i[a],l=!0)}return l}e.clearSubscriptions(n)}}(i),"function"==typeof a&&a.amd?a(function(){return i}):(void 0!==e&&e.exports&&(t=e.exports=i),t.PubSub=i,e.exports=t=i)}("object"==typeof window&&window||this)}).call(this,n(30)(e))},function(e,t,n){var r,i,a;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),i=[],void 0===(a="function"==typeof(r=function(){"use strict";var e,t,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},r=!n.document&&!!n.postMessage,i=r&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),a=!1,o={},s=0,p={parse:function(t,r){var i=(r=r||{}).dynamicTyping||!1;if(k(i)&&(r.dynamicTypingFunction=i,i={}),r.dynamicTyping=i,r.transform=!!k(r.transform)&&r.transform,r.worker&&p.WORKERS_SUPPORTED){var l=function(){if(!p.WORKERS_SUPPORTED)return!1;if(!a&&null===p.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var t=p.SCRIPT_PATH||e;t+=(-1!==t.indexOf("?")?"&":"?")+"papaworker";var r=new n.Worker(t);return r.onmessage=b,r.id=s++,o[r.id]=r}();return l.userStep=r.step,l.userChunk=r.chunk,l.userComplete=r.complete,l.userError=r.error,r.step=k(r.step),r.chunk=k(r.chunk),r.complete=k(r.complete),r.error=k(r.error),delete r.worker,void l.postMessage({input:t,config:r,workerId:l.id})}var c=null;return p.NODE_STREAM_INPUT,"string"==typeof t?c=r.download?new d(r):new h(r):!0===t.readable&&k(t.read)&&k(t.on)?c=new f(r):(n.File&&t instanceof File||t instanceof Object)&&(c=new u(r)),c.stream(t)},unparse:function(e,t){var n=!1,r=!0,i=",",a="\r\n",o='"',s=!1;"object"==typeof t&&("string"!=typeof t.delimiter||p.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(i=t.delimiter),("boolean"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(s=t.skipEmptyLines),"string"==typeof t.newline&&(a=t.newline),"string"==typeof t.quoteChar&&(o=t.quoteChar),"boolean"==typeof t.header&&(r=t.header));var l=new RegExp(g(o),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return d(null,e,s);if("object"==typeof e[0])return d(c(e[0]),e,s)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:c(e.data[0])),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),d(e.fields||[],e.data||[],s);throw"exception: Unable to serialize unrecognized input";function c(e){if("object"!=typeof e)return[];var t=[];for(var n in e)t.push(n);return t}function d(e,t,n){var o="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var s=Array.isArray(e)&&0<e.length,p=!Array.isArray(t[0]);if(s&&r){for(var l=0;l<e.length;l++)0<l&&(o+=i),o+=u(e[l],l);0<t.length&&(o+=a)}for(var c=0;c<t.length;c++){var d=s?e.length:t[c].length,h=!1,f=s?0===Object.keys(t[c]).length:0===t[c].length;if(n&&!s&&(h="greedy"===n?""===t[c].join("").trim():1===t[c].length&&0===t[c][0].length),"greedy"===n&&s){for(var m=[],g=0;g<d;g++){var v=p?e[g]:g;m.push(t[c][v])}h=""===m.join("").trim()}if(!h){for(var b=0;b<d;b++){0<b&&!f&&(o+=i);var y=s&&p?e[b]:b;o+=u(t[c][y],b)}c<t.length-1&&(!n||0<d&&!f)&&(o+=a)}}return o}function u(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);e=e.toString().replace(l,o+o);var r="boolean"==typeof n&&n||Array.isArray(n)&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(-1<e.indexOf(t[n]))return!0;return!1}(e,p.BAD_DELIMITERS)||-1<e.indexOf(i)||" "===e.charAt(0)||" "===e.charAt(e.length-1);return r?o+e+o:e}}};if(p.RECORD_SEP=String.fromCharCode(30),p.UNIT_SEP=String.fromCharCode(31),p.BYTE_ORDER_MARK="\ufeff",p.BAD_DELIMITERS=["\r","\n",'"',p.BYTE_ORDER_MARK],p.WORKERS_SUPPORTED=!r&&!!n.Worker,p.SCRIPT_PATH=null,p.NODE_STREAM_INPUT=1,p.LocalChunkSize=10485760,p.RemoteChunkSize=5242880,p.DefaultDelimiter=",",p.Parser=v,p.ParserHandle=m,p.NetworkStreamer=d,p.FileStreamer=u,p.StringStreamer=h,p.ReadableStreamStreamer=f,n.jQuery){var l=n.jQuery;l.fn.parse=function(e){var t=e.config||{},r=[];return this.each(function(e){if("INPUT"!==l(this).prop("tagName").toUpperCase()||"file"!==l(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var i=0;i<this.files.length;i++)r.push({file:this.files[i],inputElem:this,instanceConfig:l.extend({},t)})}),i(),this;function i(){if(0!==r.length){var t,n,i,o=r[0];if(k(e.before)){var s=e.before(o.file,o.inputElem);if("object"==typeof s){if("abort"===s.action)return t=o.file,n=o.inputElem,i=s.reason,void(k(e.error)&&e.error({name:"AbortError"},t,n,i));if("skip"===s.action)return void a();"object"==typeof s.config&&(o.instanceConfig=l.extend(o.instanceConfig,s.config))}else if("skip"===s)return void a()}var c=o.instanceConfig.complete;o.instanceConfig.complete=function(e){k(c)&&c(e,o.file,o.inputElem),a()},p.parse(o.file,o.instanceConfig)}else k(e.complete)&&e.complete()}function a(){r.splice(0,1),i()}}}function c(e){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=x(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new m(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&k(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1;var a=this._partialLine+e;this._partialLine="";var o=this._handle.parse(a,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=o.meta.cursor;this._finished||(this._partialLine=a.substring(s-this._baseIndex),this._baseIndex=s),o&&o.data&&(this._rowCount+=o.data.length);var l=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(i)n.postMessage({results:o,workerId:p.WORKER_ID,finished:l});else if(k(this._config.chunk)&&!t){if(this._config.chunk(o,this._handle),this._handle.paused()||this._handle.aborted())return;o=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(o.data),this._completeResults.errors=this._completeResults.errors.concat(o.errors),this._completeResults.meta=o.meta),this._completed||!l||!k(this._config.complete)||o&&o.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),l||o&&o.meta.paused||this._nextChunk(),o}},this._sendError=function(e){k(this._config.error)?this._config.error(e):i&&this._config.error&&n.postMessage({workerId:p.WORKER_ID,error:e,finished:!1})}}function d(e){var t;(e=e||{}).chunkSize||(e.chunkSize=p.RemoteChunkSize),c.call(this,e),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),r||(t.onload=C(this._chunkLoaded,this),t.onerror=C(this._chunkError,this)),t.open("GET",this._input,!r),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var n in e)t.setRequestHeader(n,e[n])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+i),t.setRequestHeader("If-None-Match","webkit-no-cache")}try{t.send()}catch(e){this._chunkError(e.message)}r&&0===t.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var e;4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(e=t.getResponseHeader("Content-Range"))?-1:parseInt(e.substr(e.lastIndexOf("/")+1))),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(new Error(n))}}function u(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=p.LocalChunkSize),c.call(this,e);var r="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,r?((t=new FileReader).onload=C(this._chunkLoaded,this),t.onerror=C(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var i=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,i)}var a=t.readAsText(e,this._config.encoding);r||this._chunkLoaded({target:{result:a}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function h(e){var t;c.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,n=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(n)}}}function f(e){c.call(this,e=e||{});var t=[],n=!0,r=!1;this.pause=function(){c.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){c.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):n=!0},this._streamData=C(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=C(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=C(function(){this._streamCleanUp(),r=!0,this._streamData("")},this),this._streamCleanUp=C(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function m(e){var t,n,r,i=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,a=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,o=this,s=0,l=0,c=!1,d=!1,u=[],h={data:[],errors:[],meta:{}};if(k(e.step)){var f=e.step;e.step=function(t){if(h=t,y())b();else{if(b(),0===h.data.length)return;s+=t.data.length,e.preview&&s>e.preview?n.abort():f(h,o)}}}function m(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function b(){if(h&&r&&(C("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+p.DefaultDelimiter+"'"),r=!1),e.skipEmptyLines)for(var t=0;t<h.data.length;t++)m(h.data[t])&&h.data.splice(t--,1);return y()&&function(){if(h){for(var t=0;y()&&t<h.data.length;t++)for(var n=0;n<h.data[t].length;n++){var r=h.data[t][n];e.trimHeaders&&(r=r.trim()),u.push(r)}h.data.splice(0,1)}}(),function(){if(!h||!e.header&&!e.dynamicTyping&&!e.transform)return h;for(var t=0;t<h.data.length;t++){var n,r=e.header?{}:[];for(n=0;n<h.data[t].length;n++){var i=n,a=h.data[t][n];e.header&&(i=n>=u.length?"__parsed_extra":u[n]),e.transform&&(a=e.transform(a,i)),a=w(i,a),"__parsed_extra"===i?(r[i]=r[i]||[],r[i].push(a)):r[i]=a}h.data[t]=r,e.header&&(n>u.length?C("FieldMismatch","TooManyFields","Too many fields: expected "+u.length+" fields but parsed "+n,l+t):n<u.length&&C("FieldMismatch","TooFewFields","Too few fields: expected "+u.length+" fields but parsed "+n,l+t))}return e.header&&h.meta&&(h.meta.fields=u),l+=h.data.length,h}()}function y(){return e.header&&0===u.length}function w(t,n){return r=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[r]&&(e.dynamicTyping[r]=e.dynamicTypingFunction(r)),!0===(e.dynamicTyping[r]||e.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(i.test(n)?parseFloat(n):a.test(n)?new Date(n):""===n?null:n):n;var r}function C(e,t,n,r){h.errors.push({type:e,code:t,message:n,row:r})}this.parse=function(i,a,o){var s=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substr(0,1048576);var n=new RegExp(g(t)+"([^]*?)"+g(t),"gm"),r=(e=e.replace(n,"")).split("\r"),i=e.split("\n"),a=1<i.length&&i[0].length<r[0].length;if(1===r.length||a)return"\n";for(var o=0,s=0;s<r.length;s++)"\n"===r[s][0]&&o++;return o>=r.length/2?"\r\n":"\r"}(i,s)),r=!1,e.delimiter)k(e.delimiter)&&(e.delimiter=e.delimiter(i),h.meta.delimiter=e.delimiter);else{var l=function(t,n,r,i){for(var a,o,s,l=[",","\t","|",";",p.RECORD_SEP,p.UNIT_SEP],c=0;c<l.length;c++){var d=l[c],u=0,h=0,f=0;s=void 0;for(var g=new v({comments:i,delimiter:d,newline:n,preview:10}).parse(t),b=0;b<g.data.length;b++)if(r&&m(g.data[b]))f++;else{var y=g.data[b].length;h+=y,void 0!==s?1<y&&(u+=Math.abs(y-s),s=y):s=0}0<g.data.length&&(h/=g.data.length-f),(void 0===o||o<u)&&1.99<h&&(o=u,a=d)}return{successful:!!(e.delimiter=a),bestDelimiter:a}}(i,e.newline,e.skipEmptyLines,e.comments);l.successful?e.delimiter=l.bestDelimiter:(r=!0,e.delimiter=p.DefaultDelimiter),h.meta.delimiter=e.delimiter}var d=x(e);return e.preview&&e.header&&d.preview++,t=i,n=new v(d),h=n.parse(t,a,o),b(),c?{meta:{paused:!0}}:h||{meta:{paused:!1}}},this.paused=function(){return c},this.pause=function(){c=!0,n.abort(),t=t.substr(n.getCharIndex())},this.resume=function(){c=!1,o.streamer.parseChunk(t,!0)},this.aborted=function(){return d},this.abort=function(){d=!0,n.abort(),h.meta.aborted=!0,k(e.complete)&&e.complete(h),t=""}}function g(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function v(e){var t,n=(e=e||{}).delimiter,r=e.newline,i=e.comments,a=e.step,o=e.preview,s=e.fastMode,l=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(l=e.escapeChar),("string"!=typeof n||-1<p.BAD_DELIMITERS.indexOf(n))&&(n=","),i===n)throw"Comment character same as delimiter";!0===i?i="#":("string"!=typeof i||-1<p.BAD_DELIMITERS.indexOf(i))&&(i=!1),"\n"!==r&&"\r"!==r&&"\r\n"!==r&&(r="\n");var c=0,d=!1;this.parse=function(e,p,u){if("string"!=typeof e)throw"Input must be a string";var h=e.length,f=n.length,m=r.length,v=i.length,b=k(a),y=[],w=[],x=[],C=c=0;if(!e)return M();if(s||!1!==s&&-1===e.indexOf(t)){for(var S=e.split(r),E=0;E<S.length;E++){if(x=S[E],c+=x.length,E!==S.length-1)c+=r.length;else if(u)return M();if(!i||x.substr(0,v)!==i){if(b){if(y=[],D(x.split(n)),j(),d)return M()}else D(x.split(n));if(o&&o<=E)return y=y.slice(0,o),M(!0)}}return M()}for(var _,O=e.indexOf(n,c),T=e.indexOf(r,c),A=new RegExp(g(l)+g(t),"g");;)if(e[c]!==t)if(i&&0===x.length&&e.substr(c,v)===i){if(-1===T)return M();c=T+m,T=e.indexOf(r,c),O=e.indexOf(n,c)}else if(-1!==O&&(O<T||-1===T))x.push(e.substring(c,O)),c=O+f,O=e.indexOf(n,c);else{if(-1===T)break;if(x.push(e.substring(c,T)),B(T+m),b&&(j(),d))return M();if(o&&y.length>=o)return M(!0)}else for(_=c,c++;;){if(-1===(_=e.indexOf(t,_+1)))return u||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:y.length,index:c}),R();if(_===h-1)return R(e.substring(c,_).replace(A,t));if(t!==l||e[_+1]!==l){if(t===l||0===_||e[_-1]!==l){var L=I(-1===T?O:Math.min(O,T));if(e[_+1+L]===n){x.push(e.substring(c,_).replace(A,t)),c=_+1+L+f,O=e.indexOf(n,c),T=e.indexOf(r,c);break}var P=I(T);if(e.substr(_+1+P,m)===r){if(x.push(e.substring(c,_).replace(A,t)),B(_+1+P+m),O=e.indexOf(n,c),b&&(j(),d))return M();if(o&&y.length>=o)return M(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:y.length,index:c}),_++}}else _++}return R();function D(e){y.push(e),C=c}function I(t){var n=0;if(-1!==t){var r=e.substring(_+1,t);r&&""===r.trim()&&(n=r.length)}return n}function R(t){return u||(void 0===t&&(t=e.substr(c)),x.push(t),c=h,D(x),b&&j()),M()}function B(t){c=t,D(x),x=[],T=e.indexOf(r,c)}function M(e){return{data:y,errors:w,meta:{delimiter:n,linebreak:r,aborted:d,truncated:!!e,cursor:C+(p||0)}}}function j(){a(M()),y=[],w=[]}},this.abort=function(){d=!0},this.getCharIndex=function(){return c}}function b(e){var t=e.data,n=o[t.workerId],r=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var i={abort:function(){r=!0,y(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(k(n.userStep)){for(var a=0;a<t.results.data.length&&(n.userStep({data:[t.results.data[a]],errors:t.results.errors,meta:t.results.meta},i),!r);a++);delete t.results}else k(n.userChunk)&&(n.userChunk(t.results,i,t.file),delete t.results)}t.finished&&!r&&y(t.workerId,t.results)}function y(e,t){var n=o[e];k(n.userComplete)&&n.userComplete(t),n.terminate(),delete o[e]}function w(){throw"Not implemented."}function x(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var n in e)t[n]=x(e[n]);return t}function C(e,t){return function(){e.apply(t,arguments)}}function k(e){return"function"==typeof e}return i?n.onmessage=function(e){var t=e.data;if(void 0===p.WORKER_ID&&t&&(p.WORKER_ID=t.workerId),"string"==typeof t.input)n.postMessage({workerId:p.WORKER_ID,results:p.parse(t.input,t.config),finished:!0});else if(n.File&&t.input instanceof File||t.input instanceof Object){var r=p.parse(t.input,t.config);r&&n.postMessage({workerId:p.WORKER_ID,results:r,finished:!0})}}:p.WORKERS_SUPPORTED&&(t=document.getElementsByTagName("script"),e=t.length?t[t.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){a=!0},!0):a=!0),(d.prototype=Object.create(c.prototype)).constructor=d,(u.prototype=Object.create(c.prototype)).constructor=u,(h.prototype=Object.create(h.prototype)).constructor=h,(f.prototype=Object.create(c.prototype)).constructor=f,p})?r.apply(t,i):r)||(e.exports=a)},function(e,t,n){e.exports=n.p+"data/data.csv?v=5753dc"},function(e){e.exports=["Borrowing Practices","Fiscal Conditions and Infrastructure Needs","Debt Levels","Credit Rating"]},function(e){e.exports=[{field:"debt_limit_type",type:"text",group:1,order:1,label:"General Obligation Debt Limit Type",tooltip:"The kind of limit the state has on GO borrowing, one of the most common types of debt issued by states. These limits affect how states borrow."},{field:"centralization",type:"percent",group:1,order:2,label:"Centralization",tooltip:"The degree to which borrowing is done by the state itself rather than by a component unit—a legally separate entity such as a housing or turnpike authority. Higher values mean the state is more centralized."},{field:"state_local_division",type:"percent",group:1,order:3,label:"State-Local Borrowing Division",tooltip:"The share of combined state and local debt issued by local governments. States where local governments borrow less tend to have higher debt levels."},{field:"revenue_volatility",type:"number",group:2,order:1,label:"Revenue Volatility",tooltip:"A measure of variation in tax collections. Low scores mean that revenue levels are similar from year to year, while high scores indicate that revenue varies more. More volatile states should plan for greater uncertainty."},{field:"ten_year_pop_growth",type:"percent",group:2,order:2,label:"Population Growth",tooltip:"The 10-year population growth rate from 2008 to 2017. Growing populations are associated with greater infrastructure investment."},{field:"debt_per_capita",type:"currency",group:3,order:1,label:"Debt per Capita",tooltip:"Total debt relative to a state’s population."},{field:"debt_percent_SPI",type:"percent",group:3,order:2,label:"Debt as a Percentage of SPI",tooltip:"Total debt relative to state personal income, a measure of economic resources.",isDefaultSelection:!0},{field:"credit2015",type:"text",group:4,order:1,label:2015,tooltip:"Standard & Poor’s general obligation credit rating."},{field:"credit2018",type:"text",group:4,order:2,label:2018,tooltip:"Standard & Poor’s general obligation credit rating."},{field:"census",type:"text",group:null,order:null,label:"Census region and division",tooltip:null}]},function(e){e.exports={census:["N/A","Northeast—New England","Northeast—Middle Atlantic","Midwest—East North Central","Midwest—West North Central","South—South Atlantic","South—East South Central","South—West South Central","West—Mountain","West—Pacific"],credit2018:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"],credit2015:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"]}},function(e,t,n){e.exports=function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t={resultsList:"autoComplete_results_list",result:"autoComplete_result",highlight:"autoComplete_highlighted"},n=function(e){return"string"==typeof e?document.querySelector(e):e()},r=function(e){return e.innerHTML=""},i={getInput:n,createResultsList:function(e){var n=document.createElement("ul");return e.container&&(t.resultsList=e.container(n)||t.resultsList),n.classList.add(t.resultsList),e.destination.insertAdjacentElement(e.position,n),n},highlight:function(e){return"<span class=".concat(t.highlight,">").concat(e,"</span>")},addResultsToList:function(e,n,r,i){n.forEach(function(a,o){var s=document.createElement("li"),p=n[o].source[r]||n[o].source;s.setAttribute("data-result",p),s.setAttribute("class",t.result),s.setAttribute("tabindex","1"),s.innerHTML=i?i(a,s):a.match||a,e.appendChild(s)})},navigation:function(e,t){var r=n(e),i=t.firstChild;document.onkeydown=function(e){var n=document.activeElement;switch(e.keyCode){case 38:n!==i&&n!==r?n.previousSibling.focus():n===i&&r.focus();break;case 40:n===r&&t.childNodes.length>0?i.focus():n!==t.lastChild&&n.nextSibling.focus()}}},clearResults:r,getSelection:function(e,i,a,o,s){var p=i.querySelectorAll(".".concat(t.result));Object.keys(p).forEach(function(l){["mousedown","keydown"].forEach(function(c){p[l].addEventListener(c,function(p){"mousedown"!==c&&13!==p.keyCode||(a({event:p,query:n(e).value,results:o.map(function(e){return e.source}),selection:o.find(function(e){var n=e.source[s]||e.source;return n===p.target.closest(".".concat(t.result)).getAttribute("data-result")}).source}),r(i))})})})}};return function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.selector=e.selector||"#autoComplete",this.data={src:function(){return"function"==typeof e.data.src?e.data.src():e.data.src},key:e.data.key},this.searchEngine="loose"===e.searchEngine?"loose":"strict",this.threshold=e.threshold||0,this.resultsList=i.createResultsList({container:!(!e.resultsList||!e.resultsList.container)&&e.resultsList.container,destination:e.resultsList&&e.resultsList.destination?e.resultsList.destination:i.getInput(this.selector),position:e.resultsList&&e.resultsList.position?e.resultsList.position:"afterend"}),this.placeHolder=e.placeHolder,this.maxResults=e.maxResults||5,this.resultItem=e.resultItem,this.highlight=e.highlight||!1,this.onSelection=e.onSelection,this.init()}return n=t,(r=[{key:"search",value:function(e,t){var n=this.highlight,r=t.toLowerCase();if("loose"===this.searchEngine){e=e.replace(/ /g,"");for(var a=[],o=0,s=0;s<r.length;s++){var p=r[s];o<e.length&&p===e[o]&&(p=n?i.highlight(p):p,o++),a.push(p)}return o===e.length&&a.join("")}if(r.includes(e)){if(n){var l=i.getInput(this.selector).value.toLowerCase();return r.replace(l,i.highlight(l))}return r}}},{key:"listMatchedResults",value:function(e){var t=this,n=[],r=i.getInput(this.selector).value.toLowerCase();e.filter(function(e){var i=t.search(r,e[t.data.key]||e);i&&n.push({match:i,source:e})});var a=n.slice(0,this.maxResults);return i.addResultsToList(this.resultsList,a,this.data.key,this.resultItem),i.navigation(this.selector,this.resultsList),a}},{key:"ignite",value:function(e){var t=this,n=this.selector,r=i.getInput(n),a=this.placeHolder,o=this.onSelection;a&&r.setAttribute("placeholder",a),r.onkeyup=function(){var a=t.resultsList;if(i.clearResults(a),r.value.length>t.threshold&&r.value.replace(/ /g,"").length){var s=t.listMatchedResults(e);o&&i.getSelection(n,a,o,s,t.data.key)}}}},{key:"init",value:function(){var e=this,t=this.data.src();t instanceof Promise?t.then(function(t){return e.ignite(t)}):this.ignite(t)}}])&&e(n.prototype,r),a&&e(n,a),t;var n,r,a}()}()},function(e,t,n){"use strict";(function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.7
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,a=0;a<r.length;a+=1)if(n&&navigator.userAgent.indexOf(r[a])>=0){i=1;break}var o=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},i))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function p(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function l(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=p(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:c(l(e))}var d=n&&!(!window.MSInputMethodContext||!document.documentMode),u=n&&/MSIE 10/.test(navigator.userAgent);function h(e){return 11===e?d:10===e?u:d||u}function f(e){if(!e)return document.documentElement;for(var t=h(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===p(n,"position")?f(n):n:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function g(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,a=document.createRange();a.setStart(r,0),a.setEnd(i,0);var o,s,p=a.commonAncestorContainer;if(e!==p&&t!==p||r.contains(i))return"BODY"===(s=(o=p).nodeName)||"HTML"!==s&&f(o.firstElementChild)!==o?f(p):p;var l=m(e);return l.host?g(l.host,t):g(e,m(t).host)}function v(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function b(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function y(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],h(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function w(e){var t=e.body,n=e.documentElement,r=h(10)&&getComputedStyle(n);return{height:y("Height",t,n,r),width:y("Width",t,n,r)}}var x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},C=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),k=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function E(e){return S({},e,{right:e.left+e.width,bottom:e.top+e.height})}function _(e){var t={};try{if(h(10)){t=e.getBoundingClientRect();var n=v(e,"top"),r=v(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},a="HTML"===e.nodeName?w(e.ownerDocument):{},o=a.width||e.clientWidth||i.right-i.left,s=a.height||e.clientHeight||i.bottom-i.top,l=e.offsetWidth-o,c=e.offsetHeight-s;if(l||c){var d=p(e);l-=b(d,"x"),c-=b(d,"y"),i.width-=l,i.height-=c}return E(i)}function O(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=h(10),i="HTML"===t.nodeName,a=_(e),o=_(t),s=c(e),l=p(t),d=parseFloat(l.borderTopWidth,10),u=parseFloat(l.borderLeftWidth,10);n&&i&&(o.top=Math.max(o.top,0),o.left=Math.max(o.left,0));var f=E({top:a.top-o.top-d,left:a.left-o.left-u,width:a.width,height:a.height});if(f.marginTop=0,f.marginLeft=0,!r&&i){var m=parseFloat(l.marginTop,10),g=parseFloat(l.marginLeft,10);f.top-=d-m,f.bottom-=d-m,f.left-=u-g,f.right-=u-g,f.marginTop=m,f.marginLeft=g}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(f=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=v(t,"top"),i=v(t,"left"),a=n?-1:1;return e.top+=r*a,e.bottom+=r*a,e.left+=i*a,e.right+=i*a,e}(f,t)),f}function T(e){if(!e||!e.parentElement||h())return document.documentElement;for(var t=e.parentElement;t&&"none"===p(t,"transform");)t=t.parentElement;return t||document.documentElement}function A(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},o=i?T(e):g(e,t);if("viewport"===r)a=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=O(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),a=Math.max(n.clientHeight,window.innerHeight||0),o=t?0:v(n),s=t?0:v(n,"left");return E({top:o-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:a})}(o,i);else{var s=void 0;"scrollParent"===r?"BODY"===(s=c(l(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===r?e.ownerDocument.documentElement:r;var d=O(s,o,i);if("HTML"!==s.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===p(t,"position"))return!0;var r=l(t);return!!r&&e(r)}(o))a=d;else{var u=w(e.ownerDocument),h=u.height,f=u.width;a.top+=d.top-d.marginTop,a.bottom=h+d.top,a.left+=d.left-d.marginLeft,a.right=f+d.left}}var m="number"==typeof(n=n||0);return a.left+=m?n:n.left||0,a.top+=m?n:n.top||0,a.right-=m?n:n.right||0,a.bottom-=m?n:n.bottom||0,a}function L(e,t,n,r,i){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var o=A(n,r,a,i),s={top:{width:o.width,height:t.top-o.top},right:{width:o.right-t.right,height:o.height},bottom:{width:o.width,height:o.bottom-t.bottom},left:{width:t.left-o.left,height:o.height}},p=Object.keys(s).map(function(e){return S({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),l=p.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=l.length>0?l[0].key:p[0].key,d=e.split("-")[1];return c+(d?"-"+d:"")}function P(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return O(n,r?T(t):g(t,n),r)}function D(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function I(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function R(e,t,n){n=n.split("-")[0];var r=D(e),i={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(n),o=a?"top":"left",s=a?"left":"top",p=a?"height":"width",l=a?"width":"height";return i[o]=t[o]+t[p]/2-r[p]/2,i[s]=n===s?t[s]-r[l]:t[I(s)],i}function B(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function M(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=B(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&s(n)&&(t.offsets.popper=E(t.offsets.popper),t.offsets.reference=E(t.offsets.reference),t=n(t,e))}),t}function j(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],a=i?""+i+n:e;if(void 0!==document.body.style[a])return a}return null}function N(e){var t=e.ownerDocument;return t?t.defaultView:window}function F(e,t,n,r){n.updateBound=r,N(e).addEventListener("resize",n.updateBound,{passive:!0});var i=c(e);return function e(t,n,r,i){var a="BODY"===t.nodeName,o=a?t.ownerDocument.defaultView:t;o.addEventListener(n,r,{passive:!0}),a||e(c(o.parentNode),n,r,i),i.push(o)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function z(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,N(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function W(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function q(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&W(t[n])&&(r="px"),e.style[n]=t[n]+r})}var U=n&&/Firefox/i.test(navigator.userAgent);function Y(e,t,n){var r=B(e,function(e){return e.name===t}),i=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!i){var a="`"+t+"`",o="`"+n+"`";console.warn(o+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return i}var $=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],X=$.slice(3);function G(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=X.indexOf(e),r=X.slice(n+1).concat(X.slice(0,n));return t?r.reverse():r}var V={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function K(e,t,n,r){var i=[0,0],a=-1!==["right","left"].indexOf(r),o=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=o.indexOf(B(o,function(e){return-1!==e.search(/,|\s/)}));o[s]&&-1===o[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var p=/\s*,\s*|\s+/,l=-1!==s?[o.slice(0,s).concat([o[s].split(p)[0]]),[o[s].split(p)[1]].concat(o.slice(s+1))]:[o];return(l=l.map(function(e,r){var i=(1===r?!a:a)?"height":"width",o=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,o=!0,e):o?(e[e.length-1]+=t,o=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+i[1],o=i[2];if(!a)return e;if(0===o.indexOf("%")){var s=void 0;switch(o){case"%p":s=n;break;case"%":case"%r":default:s=r}return E(s)[t]/100*a}if("vh"===o||"vw"===o)return("vh"===o?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a;return a}(e,i,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){W(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))})}),i}var J={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,a=i.reference,o=i.popper,s=-1!==["bottom","top"].indexOf(n),p=s?"left":"top",l=s?"width":"height",c={start:k({},p,a[p]),end:k({},p,a[p]+a[l]-o[l])};e.offsets.popper=S({},o,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,a=i.popper,o=i.reference,s=r.split("-")[0],p=void 0;return p=W(+n)?[+n,0]:K(n,a,o,s),"left"===s?(a.top+=p[0],a.left-=p[1]):"right"===s?(a.top+=p[0],a.left+=p[1]):"top"===s?(a.left+=p[0],a.top-=p[1]):"bottom"===s&&(a.left+=p[0],a.top+=p[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||f(e.instance.popper);e.instance.reference===n&&(n=f(n));var r=H("transform"),i=e.instance.popper.style,a=i.top,o=i.left,s=i[r];i.top="",i.left="",i[r]="";var p=A(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);i.top=a,i.left=o,i[r]=s,t.boundaries=p;var l=t.priority,c=e.offsets.popper,d={primary:function(e){var n=c[e];return c[e]<p[e]&&!t.escapeWithReference&&(n=Math.max(c[e],p[e])),k({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>p[e]&&!t.escapeWithReference&&(r=Math.min(c[n],p[e]-("right"===e?c.width:c.height))),k({},n,r)}};return l.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=S({},c,d[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],a=Math.floor,o=-1!==["top","bottom"].indexOf(i),s=o?"right":"bottom",p=o?"left":"top",l=o?"width":"height";return n[s]<a(r[p])&&(e.offsets.popper[p]=a(r[p])-n[l]),n[p]>a(r[s])&&(e.offsets.popper[p]=a(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!Y(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],a=e.offsets,o=a.popper,s=a.reference,l=-1!==["left","right"].indexOf(i),c=l?"height":"width",d=l?"Top":"Left",u=d.toLowerCase(),h=l?"left":"top",f=l?"bottom":"right",m=D(r)[c];s[f]-m<o[u]&&(e.offsets.popper[u]-=o[u]-(s[f]-m)),s[u]+m>o[f]&&(e.offsets.popper[u]+=s[u]+m-o[f]),e.offsets.popper=E(e.offsets.popper);var g=s[u]+s[c]/2-m/2,v=p(e.instance.popper),b=parseFloat(v["margin"+d],10),y=parseFloat(v["border"+d+"Width"],10),w=g-e.offsets.popper[u]-b-y;return w=Math.max(Math.min(o[c]-m,w),0),e.arrowElement=r,e.offsets.arrow=(k(n={},u,Math.round(w)),k(n,h,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(j(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=A(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],i=I(r),a=e.placement.split("-")[1]||"",o=[];switch(t.behavior){case V.FLIP:o=[r,i];break;case V.CLOCKWISE:o=G(r);break;case V.COUNTERCLOCKWISE:o=G(r,!0);break;default:o=t.behavior}return o.forEach(function(s,p){if(r!==s||o.length===p+1)return e;r=e.placement.split("-")[0],i=I(r);var l=e.offsets.popper,c=e.offsets.reference,d=Math.floor,u="left"===r&&d(l.right)>d(c.left)||"right"===r&&d(l.left)<d(c.right)||"top"===r&&d(l.bottom)>d(c.top)||"bottom"===r&&d(l.top)<d(c.bottom),h=d(l.left)<d(n.left),f=d(l.right)>d(n.right),m=d(l.top)<d(n.top),g=d(l.bottom)>d(n.bottom),v="left"===r&&h||"right"===r&&f||"top"===r&&m||"bottom"===r&&g,b=-1!==["top","bottom"].indexOf(r),y=!!t.flipVariations&&(b&&"start"===a&&h||b&&"end"===a&&f||!b&&"start"===a&&m||!b&&"end"===a&&g);(u||v||y)&&(e.flipped=!0,(u||v)&&(r=o[p+1]),y&&(a=function(e){return"end"===e?"start":"start"===e?"end":e}(a)),e.placement=r+(a?"-"+a:""),e.offsets.popper=S({},e.offsets.popper,R(e.instance.popper,e.offsets.reference,e.placement)),e=M(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,a=r.reference,o=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[o?"left":"top"]=a[n]-(s?i[o?"width":"height"]:0),e.placement=I(t),e.offsets.popper=E(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!Y(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=B(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,a=B(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var o=void 0!==a?a:t.gpuAcceleration,s=f(e.instance.popper),p=_(s),l={position:i.position},c=function(e,t){var n=e.offsets,r=n.popper,i=n.reference,a=Math.round,o=Math.floor,s=function(e){return e},p=a(i.width),l=a(r.width),c=-1!==["left","right"].indexOf(e.placement),d=-1!==e.placement.indexOf("-"),u=t?c||d||p%2==l%2?a:o:s,h=t?a:s;return{left:u(p%2==1&&l%2==1&&!d&&t?r.left-1:r.left),top:h(r.top),bottom:h(r.bottom),right:u(r.right)}}(e,window.devicePixelRatio<2||!U),d="bottom"===n?"top":"bottom",u="right"===r?"left":"right",h=H("transform"),m=void 0,g=void 0;if(g="bottom"===d?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-p.height+c.bottom:c.top,m="right"===u?"HTML"===s.nodeName?-s.clientWidth+c.right:-p.width+c.right:c.left,o&&h)l[h]="translate3d("+m+"px, "+g+"px, 0)",l[d]=0,l[u]=0,l.willChange="transform";else{var v="bottom"===d?-1:1,b="right"===u?-1:1;l[d]=g*v,l[u]=m*b,l.willChange=d+", "+u}var y={"x-placement":e.placement};return e.attributes=S({},y,e.attributes),e.styles=S({},l,e.styles),e.arrowStyles=S({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return q(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&q(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var a=P(i,t,e,n.positionFixed),o=L(n.placement,a,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",o),q(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},Q=function(){function e(t,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=o(this.update.bind(this)),this.options=S({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(S({},e.Defaults.modifiers,i.modifiers)).forEach(function(t){r.options.modifiers[t]=S({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return S({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return C(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=P(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=L(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=R(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=M(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return z.call(this)}}]),e}();Q.Utils=("undefined"!=typeof window?window:e).PopperUtils,Q.placements=$,Q.Defaults=J,t.a=Q}).call(this,n(34))},function(e,t,n){e.exports={dropdown:"src-components-dropdown--dropdown"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=t.TextInput=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var a=Object.getPrototypeOf(t);return null===a?void 0:e(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=n(6),o=p(n(2)),s=p(n(35));function p(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.TextInput=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"input",n=arguments[1];return l(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return d(t,o.default),r(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered?e:(e.setAttribute("type","text"),e)}},{key:"init",value:function(){}}]),t}(),t.Dropdown=function(e){function t(e,n){l(this,t),console.log(e);var r,i,a=e.split(".")[0].split("#")[0];"div"!==a&&(e.split(".").length>1&&(r=e.split(".")[0].split("#")[0]),e.split("#").length>1&&(i=e.split("#")[0].split(".")[0]),console.log("Dropdown element must be a div; coercing . . ."),e=(a="div")+(void 0!==i?"#"+i:"")+(void 0!==r?"."+r:""));var o=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return o.options=o.el.querySelector("ul"),o.body=document.querySelector("body"),o._isOpen=!1,o}return d(t,o.default),r(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.prerendered)return e;var n=a.DOMHelpers.c("div.js-input-div"),r=a.DOMHelpers.c("ul");return this.data.forEach(function(e){var t=a.DOMHelpers.c("li");t.setAttribute("data-value",e.value),t.innerHTML=e.name,e.selected&&(t.classList.add("selected"),n.textContent=e.name),r.appendChild(t)}),e.appendChild(n),e.appendChild(r),e.classList.add(s.default.PCTDropdown),e.setAttribute("tabindex","0"),e}},{key:"init",value:function(){var e=this;console.log(this),this.input=this.el.querySelector(".js-input-div"),this.el.querySelectorAll("li").forEach(function(t){t.addEventListener("click",function(n){n.stopPropagation(),e.itemClickHandler(t)})}),this._selectedOption=this.el.querySelector("li.selected"),this.toBeSelected=this.el.querySelector("li.selected"),this.el.addEventListener("click",this.clickHandler.bind(this)),this.el.addEventListener("keydown",function(t){if(console.log(t.keyCode),9!==t.keyCode)return[32,38,40].indexOf(t.keyCode)>-1?(t.preventDefault(),void e.spaceAndArrowHandler.call(e,t)):void([13,27].indexOf(t.keyCode>-1)&&e.isOpen&&e.enterAndEscapeHandler.call(e,t));e.tabHandler.call(e,t)})}},{key:"itemClickHandler",value:function(e){this.toBeSelected.classList.remove("selected"),this.toBeSelected=e,this.toBeSelected.classList.add("selected"),this.selectedOption=this.toBeSelected}},{key:"enterAndEscapeHandler",value:function(e){27===e.keyCode?(console.log("escape key"),this.toBeSelected.classList.remove("selected"),this.selectedOption.classList.add("selected"),this.toBeSelected=this.selectedOption,this.isOpen=!1):this.selectedOption=this.toBeSelected}},{key:"spaceAndArrowHandler",value:function(e){if(32!==e.keyCode)if(this.isOpen){var t=38===e.keyCode?this.toBeSelected.previousElementSibling:this.toBeSelected.nextElementSibling;t&&(this.toBeSelected.classList.remove("selected"),this.toBeSelected=t,this.toBeSelected.classList.add("selected"))}else this.isOpen=!0;else this.isOpen||(this.isOpen=!0)}},{key:"tabHandler",value:function(e){this.isOpen&&e.preventDefault()}},{key:"clickHandler",value:function(e){!this.isOpen&&this.body.UIControlIsOpen||(e.stopPropagation(),this.isOpen=!this.isOpen)}},{key:"isOpen",set:function(e){function t(){this.isOpen=!1}this._isOpen=e,e?(this.el.classList.add(s.default.isOpen),this.body.UIControlIsOpen=!0,this.body.addEventListener("click",t.bind(this))):(this.el.classList.remove(s.default.isOpen),this.body.UIControlIsOpen=!1,this.body.removeEventListener("click",t.bind(this)))},get:function(){return this._isOpen}},{key:"selectedOption",set:function(e){this._selectedOption=e,this.isOpen=!1,this.input.textContent=this._selectedOption.innerText,this.onChange?this.onChange():console.log("Instance of Dropdown class needs an onChange method to handle selection of a new value")},get:function(){return this._selectedOption}}]),t}()},function(e,t){e.exports="<p><strong>Centralization.</strong> The degree to which borrowing is done by the state itself rather than by a component unit-a legally separate entity such as a housing or turnpike authority. Higher values mean the state is more centralized.</p>\n"},function(e,t){e.exports="<p><strong>General obligation (GO) debt limit type.</strong> The kind of limit the state has on GO borrowing, one of the most common types of debt issued by states. These limits affect how states borrow. </p>\n"},function(e,t){e.exports="<p><strong>Debt per capita.</strong> Total debt relative to a state’s population.</p>\n"},function(e,t){e.exports="<p><strong>Debt as a percentage of state personal income.</strong> Total debt relative to state personal income, a measure of economic resources.</p>\n"},function(e,t){e.exports="<p><strong>Population growth.</strong> The 10-year population growth rate from 2008 to 2017. Growing populations are associated with greater infrastructure investment. </p>\n"},function(e,t){e.exports="<p><strong>Revenue volatility.</strong> A measure of variation in tax collections. Low scores mean that revenue levels are similar from year to year, while high scores indicate that revenue varies more. More volatile states should plan for greater uncertainty. </p>\n"},function(e,t){e.exports="<p><strong>Division of borrowing between state and local governments.</strong> The share of combined state and local debt issued by local governments. States where local governments borrow less tend to have higher debt levels.</p>\n"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(36),s=(r=o)&&r.__esModule?r:{default:r};var p=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.el=document.querySelector(t),Object.keys(n).forEach(function(e){r[e]=n[e]})}return a(e,[{key:"init",value:function(e){this.needsRouter&&(this.router=new s.default,this.router.init(e)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var e=!1,t=document.body,n=0;function r(){new Date-n<500||e||(t.classList.add("has-hover"),e=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){e&&(t.classList.remove("has-hover"),e=!1)},!0),document.addEventListener("mousemove",r,!0),r()}},{key:"createComponent",value:function(e,t,n,r){var a=Object.create({children:[],data:null,model:e,parent:null,rerenderOnDataMismatch:!1});if(null!==r&&"object"===(void 0===r?"undefined":i(r)))for(var o in r)r.hasOwnProperty(o)&&(a[o]=r[o]);return new t(n,a)}}]),e}();t.default=p},function(e,t){e.exports='<section id="section-overview">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">Overview</h2>\n    <div class="js-inner-content">\n    \n\t<p>\n\t    When state policymakers try to assess how much debt to take on for projects\n\t    such as roads, bridges, and schools, they often compare debt levels in\n\t    their state to those of others. Because no universal guidelines exist for\n\t    how much debt is affordable, many policymakers evaluate how their state\n\t    stacks up against others with a common credit rating or national median\n\t    debt level.\n\t</p>\n\t<p>\n\t    But selecting a peer group based only on a common rating or using national\n\t    benchmarks overlooks many factors that influence borrowing levels. States\n\t    with growing populations, for example, tend to borrow more; a state&#8217;s\n\t    fiscal health affects the funds available for debt service; and policies\n\t    meant to limit state debt can influence how much local governments and\n\t    other state entities borrow for capital projects.\n\t</p>\n\t<p>\n\t    To address this gap, The Pew Charitable Trusts has created an interactive\n\t    tool to allow policymakers to compare states based on seven characteristics\n\t    related to debt.<sup>*</sup> States can use these data to select more\n\t    tailored peer groups, giving them a deeper understanding of how states with\n\t    similar borrowing practices, constraints, and needs manage their borrowing.\n\t    Ultimately, these improved comparisons will help them make better-informed\n\t    decisions.\n\t</p>\n\t<p class="pct-footnote">\n\t<sup>*</sup> To measure debt levels, this tool uses Census Bureau data. For more\n\t    information about these characteristics and why Pew chose them, see the \n\t    &#8220;About the Data&#8221; section below.\n\t</p>\n\n    </div>\n    </section>\n<section id="section-comparison">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">State Comparison</h2>\n    <div class="js-inner-content">\n        <div class="compare-selection-wrapper">\n            <span class="compare-label">Compare</span><br />\n            <div class="flex flex-start flex-baseline autoComplete_outerWrapper">\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-0">\n                    <input autocomplete="hack" type="text" id="compare-input-0">\n                </div>\n                <span>to</span>\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-1">\n                    <input autocomplete="hack" type="text" id="compare-input-1">\n                </div>\n            </div>\n        </div>\n    </div>\n    </section>\n<section id="section-states">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">50-State Data</h2>\n    <div class="js-inner-content">\n    </div>\n    </section>\n<section id="section-about">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">About the Data</h2>\n    <div class="js-inner-content">\n    \n\t<p>\n    Pew researchers developed this list of characteristics by examining\n    relevant literature and consulting subject matter experts. The final set of\n    seven characteristics included in the tool was selected based on evidence\n    in the literature that the characteristics are related to state debt, the\n    feasibility of collecting the data used to construct the characteristic,\n    and a desire to avoid redundancy. Pew also limited the number of\n    characteristics to make the tool easy to use and understand.\n</p>\n<p>\n    The goal of this tool was not to create an exhaustive catalog of the\n    factors that may affect state borrowing levels, so states should not feel\n    the need to limit themselves to the data in it when selecting peers.\n    Instead, the tool is intended to help states consider these differences\n    when constructing peer groups.\n</p>\n<h3 class="static">\n    Borrowing practices\n</h3>\n<p>\n    How states borrow also affects how they should make comparisons: General\n    obligation (GO) debt limits, centralization, and the division of\n    state-local borrowing in a state can affect state borrowing practices.\n</p>\n<h4>\n    General obligation debt limit type (2018)\n</h4>\n<p>\n    GO debt is one of the most common types issued by states. It carries a\n    state’s full faith and credit, the strongest possible pledge. As a result,\n    GO debt is typically a state’s highest rated and lowest cost since credit\n    rating agencies and bond purchasers strongly believe the state will repay\n    it.<sup>1</sup> \n</p>\n<p>\n    Not all states issue much GO debt. All but two have GO debt limits, which\n    vary in restrictiveness and structure. For example, Connecticut limits this\n    debt to 1.6 times total estimated general fund tax receipts, while Arizona\neffectively prohibits its issuance.<sup>2</sup> Comparing Connecticut\n    and Arizona, then, might not be appropriate because Connecticut has\n    significant GO debt and Arizona none. Connecticut’s debt will draw on the\n    state’s general fund in a way Arizona’s won’t. (GO debt is typically\n    supported by a state’s general fund.) Because analyzing the revenue streams\n    available for debt repayment is important, this is a key difference.\n</p>\n<p>\n    These limits sometimes apply to state debt beyond just GO borrowing. For\n    example, West Virginia’s limit applies to net tax-supported debt, which\n    includes GO.\n</p>\n<p>\n    Pew has classified each state’s limit for GO debt as one of the following\n    types:\n</p>\n<ul>\n    <li>\n        <strong>Constitutional amendment.</strong>\n        Three states—Alabama, Ohio, and West Virginia—require an amendment to\n        their constitutions to issue GO debt.\n    </li>\n    <li>\n        <strong>Metric.</strong>\n        In 11 states—Connecticut, Georgia, Hawaii, Mississippi, Nevada, New\n        Hampshire, North Dakota, Oregon, Tennessee, Utah, and Wisconsin—debt is\n        not allowed to exceed a certain metric-based threshold. Tennessee, for\n        example, caps debt service at 10 percent of combined revenues in its\n        general, debt service, and highway funds.\n    </li>\n    <li>\n        <strong>Metric-based with referendum to exceed.</strong>\n        North Carolina, Pennsylvania, and Wyoming use a metric to cap debt but\n        allow issuance above the cap with voter approval.\n    </li>\n    <li>\n        <strong>No limit.</strong>\n        Maryland and Vermont place no restrictions on GO debt.\n    </li>\n    <li>\n        <strong>Prohibition.</strong>\n        Arizona, Colorado, Indiana, and Nebraska prohibit GO debt. Indiana law\n        forbids any GO debt to be issued; the others authorize amounts so\n        low—$350,000 or less—as to be equivalent to prohibitions.\n    </li>\n    <li>\n        <strong>Referendum and/or supermajority.</strong>\n        Thirteen states—Alaska, Arkansas, California, Idaho, Iowa, Kansas,\n        Kentucky, Maine, Michigan, Minnesota, Missouri, Montana, and Rhode\n        Island—require some combination of voter approval and/or a legislative\n        supermajority (generally three-fifths or two-thirds) to issue debt.\n    </li>\n    <li>\n        <strong>Referendum and/or supermajority and metric.</strong>\n        Fourteen states—Delaware, Florida, Illinois, Louisiana, Massachusetts,\n        New Jersey, New Mexico, New York, Oklahoma, South Carolina, South\n        Dakota, Texas, Virginia, and Washington—require a referendum and/or\n        supermajority and have a metric-based cap on debt or debt service.\n    </li>\n</ul>\n<div class="pct-note"><p>\n    <strong>Note:</strong> The classification system is a variation on the approach taken in D.\n    Roderick Kiewiet and Kristin Szakaly, “Constitutional Limitations on\nBorrowing: An Analysis of State Bonded Indebtedness,”    <cite>The Journal of Law, Economics &amp; Organization</cite> 12, no. 1 (1996):\n    62-97,\n    <a href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents">\n        https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents</a>.\n</p>\n<p>\n    <strong>Source:</strong> Pew analysis of state constitutions and statutes\n</p></div>\n<h4>\n    Centralization (fiscal year 2014)\n</h4>\n<p>\n    Another effect of Arizona’s prohibition on GO debt is decentralized debt\n    issuance.<sup>3</sup> This means\n    borrowing is done by entities other than the primary—meaning\n    state—government, including the independent agencies and authorities known\n    as component units. Centralization measures component unit debt as a share\n    of the total debt issued by both the primary government and its component\n    units.\n</p>\n<p>\n    Component unit debt generally relies less on state funds for repayment than\n    primary government debt. Often, lenders have no legal claim on state\n    general funds if the component unit defaults. As a result, state\n    comparisons based on total debt may be misleading. Montana and Delaware,\n    for example, have about the same total debt, but most of Montana’s debt is\n    held by component units and most of Delaware’s is held by the state.\n</p>\n<div class="pct-note"><p>\n    <strong>Note:</strong> To calculate centralization in a state, Pew first analyzed the\n    state’s comprehensive annual financial report to determine how much debt\n    was held by the primary government. That was then compared to a sum of the\n    debt of major component units as reported in their annual financial\n    statements.<sup>4</sup> \n</p></div>\n<h4>\n    The state-local borrowing division (2015)\n</h4>\n<p>\n    One factor that influences state debt levels is the division of borrowing\n    between state and local governments. In some states, local governments are\n    responsible for paying for most capital projects within their\n    jurisdictions. In other places, the state is responsible for those\n    projects. Instead of a city or town bonding to finance them, the state\n    takes on this debt—increasing its overall borrowing. The division of\n    borrowing responsibility is related to the debt limit. Local governments in\n    Arizona, for example, borrow more than the state does because the state’s\nability to borrow is so restricted.<sup>5</sup> This tool measures the\n    state-local borrowing division as the share of total debt within a state\n    issued by local governments.\n</p>\n<div class="pct-note"><p>\n    <strong>Source:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances: 2015 Data Release” (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n</p></div>\n<p>\n    <strong></strong>\n</p>\n<h3 class="static">\n    Fiscal conditions and infrastructure needs\n</h3>\n<p>\n    Fiscal conditions may affect a state’s willingness to issue debt and\n    ability to repay it, while infrastructure needs might increase a state’s\n    demand for debt. Observing trends and variations among states in both\n    categories can allow officials to create more appropriate peer groups.\n</p>\n<h4>\n    Revenue volatility (1997-2016)\n</h4>\n<p>\n    Revenue volatility is the annual fluctuation in tax collections and is\n    affected by each state’s mix of tax streams. It indicates whether a state\n    can expect to dedicate a relatively consistent share of its revenue to its\n    liabilities year to year or whether that share will show greater\n    fluctuation as revenue varies. States with stable revenue can plan debt\n    issuances and pay down debt more easily than states with uncertain tax\n    collections can.<sup>6</sup> States\n    with more volatile revenue may therefore wish to compare themselves to\n    states with similar concerns.\n</p>\n<p>\n    Pew used data from 1997 to 2016 to calculate a revenue volatility score for\n    each state. The score reflects variations in yearly percentage changes in\nrevenue between 1997 and 2016.<sup>7</sup> States have differing\n    levels of volatility because they have unique revenue mixes. Alaska has a\n    highly volatile revenue stream because much of its collections come from\n    unpredictable severance taxes on oil. Other states—such as South Dakota,\n    which earns more of its revenue from stable sources like personal income\n    taxes—have less volatility. A low volatility score means that revenue\n    levels were similar from year to year, and a high score indicates that\n    revenue grew or declined more dramatically.\n</p>\n<div class="pct-note"><p>\n    <strong>Source:</strong> The Pew Charitable Trusts, “Tax Revenue Volatility, FY 1997-2016,”\n    last modified Aug. 29, 2018,\n    <a\n        href="http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6"\n    >\n        http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6</a>\n</p></div>\n<h4>\n    Population growth (2008-17)\n</h4>\n<p>\n    Population growth drives infrastructure needs. More people means greater\n    pressure on a state’s infrastructure, necessitating improvements and new\n    construction. Research shows that as a state’s population grows, so too\ndoes its demand for, and in some cases spending on, capital construction.<sup>8</sup> \n</p>\n<p>\n    As a result, states with similar growth patterns may have similar demands\n    for infrastructure. For this reason, Pew used population growth as a proxy\n    for infrastructure demand, a metric for which exact, reliable sources are\n    scarce. Observing population growth can help identify peers and provides a\n    data point not often used in interstate debt comparisons.\n</p>\n<p>\n    Pew selected a 10-year population growth rate, measured as the increase or\n    decrease in state population between 2008 and 2017. Although no consensus\n    exists in academic literature regarding the appropriate time span for\n    examining population trends, this period captured the trough of the Great\n    Recession, the subsequent economic expansion, and the resulting demographic\n    and geographic shifts.<sup>9</sup> \n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances: 2015 Data Release” (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n    United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n    2017,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx</a>\n    ; U.S. Census Bureau, “Intercensal Estimates of the Resident Population for\n    the United States, Regions, States, and Puerto Rico: April 1, 2000 to July\n    1, 2010,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls</a>\n</p></div>\n<h3 class="static">\n    Debt levels (2015)\n</h3>\n<p>\n    Debt levels are a natural point of comparison and are influenced by the\n    preceding characteristics. While an absolute dollar amount provides useful\n    information, it does not put the amount of debt into context relative to\n    the state’s resources.<sup>10</sup> \n    Given size, population, and economic differences among states, a dollar\n    amount is also less useful for state comparisons. Instead, normalized\n    ratios allow states of various sizes to compare themselves. Consistent with\n    the best practices for understanding debt affordability, Pew’s tool\n    includes two ratios—debt per capita and debt as a percentage of state\n    personal income—to give a more complete measure of a state’s debt.\n    State-based analyses often use a ratio of debt service to revenue when\n    evaluating debt levels and setting limits. This ratio is not included in\nthis tool due to cross-state comparability issues.<sup>11</sup> \n</p>\n<h4>\n    Debt per capita\n</h4>\n<p>\n    Because debt is repaid through revenue generally in the form of taxes or\n    user fees paid by residents, assessing debt relative to its repayment\n    source—the resident—is a common approach. Debt per capita, which measures\n    total debt against a state’s population, makes comparisons between states\n    of different sizes feasible and helps policymakers understand the debt\n    burden on individual residents.\n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances,” 2015 Data Release (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n    United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n    2017,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx</a>\n</p></div>\n<h4>\n    Debt as a percentage of state personal income\n</h4>\n<p>\n    Another common practice, used by credit rating agencies and academics, is\n    to consider a state’s debt level relative to resources available for\n    repayment.<sup>12</sup> A ratio\n    comparing debt not only to population but to taxpayer earning power or\nwealth is therefore beneficial.<sup>13</sup> Debt as a percentage\n    of state personal income addresses this and is commonly used by states to\n    evaluate debt levels.\n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances,” 2015 Data Release (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Bureau of Economic Analysis, “SA1 Personal Income Summary: Personal\n    Income, Population, Per Capita Personal Income,”\n    https://www.bea.gov/data/income-saving/personal-income-by-state.\n</p></div>\n<aside class="pct-box">\n        <h4>Census Data vs. Moody’s Net Tax-Supported Debt Calculations</h4>\n    \n\t<p>\n\t    While debt affordability studies often use Moody’s Investors Service Inc.\n\t    calculations of state net tax-supported debt to compare borrowing, The Pew\n\t    Charitable Trusts used U.S. Census Bureau data for two reasons.\n\t</p>\n\t<p>\n\t    First, the Census Bureau captures a broader scope of debt than does\n\t    Moody’s, including some debt held by dependent agencies such as public\n\tauthorities and component units,<sup>14</sup> giving a more\n\t    accurate representation of the debt burden supported by a state’s\n\t    residents.<sup>15</sup> Second, the\n\t    bureau analyzes how closely the dependent agencies it includes in its\n\t    definition of state debt are fiscally or administratively tied to the\n\t    state. Because ultimate responsibility for a debt can be nebulous—and a\n\t    state may not support the liabilities of its more independent entities—this\n\tfurther ensures an accurate description of state debt.<sup>16</sup> \n\t</p>\n</aside>\n<h3 class="static">\n    Credit ratings (September 2018 and September 2015)\n</h3>\n<p>\n    This tool allows users to group states by Standard &amp; Poor’s credit\n    ratings to explore differences among those with similar credit profiles.\n    The user can select credit ratings from 2018 or 2015 to look at either\n    recent information or information corresponding to other, earlier data\n    points in this tool.\n</p>\n<div class="pct-note"><p>\n    <strong>Note:</strong> Pew collected ratings on general obligation issuance as of September\n    2018 and September 2015. If the state does not issue GO bonds, the rating\n    on the senior-most tax-backed issuance was used instead. In addition to\n    S&amp;P, there are two other major credit rating agencies: Moody’s and\n    Fitch. There is little variation in ratings among the three agencies.\n</p></div>\n<div class="pct-endnotes">\n    \n    <div id="edn1">\n        <p>\n 1. \n            The Pew Charitable Trusts, “Strategies for Managing State Debt”\n            (2017),\n            <a\n                href="http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt"\n            >\n                http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt</a>.\n        </p>\n    </div>\n    <div id="edn2">\n        <p>\n 2. \n            Ibid.\n        </p>\n    </div>\n    <div id="edn3">\n        <p>\n 3. \n            Research on state borrowing practices has found that debt limits\n            decrease the centralization of state debt as states borrow through\n            other entities to circumvent these limits. See Beverly S. Bunch,\n            “The Effect of Constitutional Debt Limits on State Governments’ Use\n            of Public Authorities,” <cite>Public Choice </cite>68, no. 1-3 (1991):\n            57-69,\n            <a href="https://link.springer.com/article/10.1007/BF00173819">\n                https://link.springer.com/article/10.1007/BF00173819</a>\n            ; Rhonda Riherd Trautman, “The Impact of State Debt Management on\n            Debt Activity,” <cite>Public Budgeting &amp; Finance </cite>15, no. 2\n            (1995): 33-51,\n            <a href="https://doi.org/10.1111/1540-5850.01038">\n                https://doi.org/10.1111/1540-5850.01038</a>.\n        </p>\n    </div>\n    <div id="edn4">\n        <p>\n 4. \n            For more detail on how we collected these data, see The Pew\n            Charitable Trusts, “Strategies for Managing State Debt,”\n            methodology.\n        </p>\n    </div>\n    <div id="edn5">\n        <p>\n 5. \n            For a discussion of the relationship between debt limits and local\n            borrowing, see D. Roderick Kiewiet and Kristin Szakaly,\n            “Constitutional Limitations on Borrowing: An Analysis of State\nBonded Indebtedness,”            <cite>The Journal of Law, Economics &amp; Organization </cite>12, no. 1\n            (1996): 62-97,\n            <a\n                href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents"\n            >\n                https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents</a>.\n        </p>\n    </div>\n    <div id="edn6">\n        <p>\n 6. \n            One study found that as economic volatility increases, states\n            prefer to pay for infrastructure projects with cash rather than\n            through financing. Wen Wang, Yilin Hou, and William Duncome,\n            “Determinants of Pay-as-You-Go Financing of Capital Projects:\n            Evidence From the States,” <cite>Public Budgeting &amp; Finance </cite>\n            27, no. 4 (2007): 18-42,\n            <a href="https://doi.org/10.1111/j.1540-5850.2007.00892.x">\n                https://doi.org/10.1111/j.1540-5850.2007.00892.x</a>.\n        </p>\n    </div>\n    <div id="edn7">\n        <p>\n 7. \n            The Pew Charitable Trusts, “Tax Revenue Volatility Varies Across\n            States, Revenue Streams,” accessed Sept. 10, 2018,\n            <a\n                href="http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6"\n            >\n                http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6</a>.\n        </p>\n    </div>\n    <div id="edn8">\n        <p>\n 8. \n            Ronald C. Fisher and Robert W. Wassmer, “The Issuance of State and\nLocal Debt During the United States Great Recession,”            <cite>National Tax Journal</cite> 67, no. 1 (2014): 113-50,\n            <a\n                href="https://ideas.repec.org/a/ntj/journl/v67y2014i1p113-150.html"\n            >\n                https://ideas.repec.org/a/ntj/journl/v67y2014i1p113-150.html</a>\n            ; Ronald C. Fisher and Robert W. Wassmer, “An Analysis of\nState-Local Government Capital Expenditure During the 2000s,”            <cite>Public Budgeting &amp; Finance</cite> 35, no. 1 (2015): 3-28,\n            <a\n                href="https://onlinelibrary.wiley.com/doi/abs/10.1111/pbaf.12062"\n            >\n                https://onlinelibrary.wiley.com/doi/abs/10.1111/pbaf.12062</a>.\n        </p>\n    </div>\n    <div id="edn9">\n        <p>\n 9. \n            The National Bureau of Economic Research, “US Business Cycle\n            Expansions and Contractions,” Sept. 20, 2010,\n            <a href="http://www.nber.org/cycles.html">\n                http://www.nber.org/cycles.html</a>.\n        </p>\n    </div>\n    <div id="edn10">\n        <p>\n 10. \n            Jennifer Weiner, “Assessing the Affordability of State Debt,” New\n            England Public Policy Center at the Federal Reserve Bank of Boston\n            (2013),\n            <a\n                href="https://www.bostonfed.org/publications/new-england-public-policy-center-research-report/2013/assessing-the-affordability-of-state-debt.aspx"\n            >\n                https://www.bostonfed.org/publications/new-england-public-policy-center-research-report/2013/assessing-the-affordability-of-state-debt.aspx</a>.\n        </p>\n    </div>\n    <div id="edn11">\n        <p>\n 11. \n            In CAFRs, states report debt service payments from a variety of\n            funds. Using this information to construct a comparable measure of\n            debt service as a share of general fund revenue requires a detailed\n            understanding of each state’s reporting practices.\n        </p>\n    </div>\n    <div id="edn12">\n        <p>\n 12. \n            Jennifer Weiner, “A Guide to State Debt Affordability Studies:\n            Common Elements and Best Practices,” New England Public Policy\n            Center at the Federal Reserve Bank of Boston (2013),\n            <a\n                href="https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx"\n            >\n                https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx</a>\n            ; Charles Brecher, Kurt Richwerger, and Marcia Van Wagner, “An\nApproach to Measuring the Affordability of State Debt,”            <cite>Public Budgeting &amp; Finance</cite> 23, no. 4 (2003): 65-85,\n            <a\n                href="https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x"\n            >\n                https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x</a>.\n        </p>\n    </div>\n    <div id="edn13">\n        <p>\n 13. \n            W. Bartley Hildreth and Gerald J. Miller, “Debt and the Local\n            Economy: Problems in Benchmarking Local Government Debt\n            Affordability,” <cite>Public Budgeting &amp; Finance</cite> 22, no. 4\n            (2003): 99-113,\n            <a href="https://doi.org/10.1111/1540-5850.00091">\n                https://doi.org/10.1111/1540-5850.00091</a>.\n        </p>\n    </div>\n    <div id="edn14">\n        <p>\n 14. \n            Component units are entities that are legally separate from a state\n            but perform state functions. They typically include bodies such as\n            housing authorities, economic development corporations, and\n            universities.\n        </p>\n    </div>\n    <div id="edn15">\n        <p>\n 15. \n            Weiner, “A Guide.”\n        </p>\n    </div>\n    <div id="edn16">\n        <p>\n 16. \n            Bo Zhao and Wen Wang, “Transparency in State Debt Disclosure,” New\n            England Public Policy Center at the Federal Reserve Bank of Boston\n            (2017),\n            <a\n                href="https://www.bostonfed.org/publications/research-department-working-paper/2017/transparency-in-state-debt-disclosure.aspx"\n            >\n                https://www.bostonfed.org/publications/research-department-working-paper/2017/transparency-in-state-debt-disclosure.aspx</a>.\n        </p>\n    </div>\n</div>\n\n    </div>\n    </section>'},function(e,t){e.exports='<footer>\n\t\t<div>\n\t\t\t<p><strong>Download resources:</strong>\n\t\t\t\t\t<a class="pct-download" href="">Resource 1</a>\n\t\t\t\t\t<a class="pct-download" href="">Resource 2</a>\n\t\t\t\t</p></div>\n</footer>'},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){e.exports={autoComplete_wrapper:"autoComplete_wrapper",autoComplete:"autoComplete",autoComplete_results_list:"autoComplete_results_list",autoComplete_result:"autoComplete_result",autoComplete_highlighted:"autoComplete_highlighted"}},function(e,t,n){},function(e,t,n){"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){e.exports={PCTDropdown:"submodules-UI-js-inputs--PCTDropdown",isOpen:"submodules-UI-js-inputs--isOpen"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return i(e,[{key:"init",value:function(e){var t=this;if(void 0===e||"object"!==(void 0===e?"undefined":r(e)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof e.encode||"function"!=typeof e.decode||!Array.isArray(e.views)||"object"!==r(e.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=e.encode,this.decodeHash=e.decode,this.viewPromises=e.views.map(function(e){return e.isReady}),this.PS=e.PS,Promise.all(this.viewPromises).then(function(){t.decodeHash()}),this.PS.setSubs(e.subscriptions.map(function(e){return[e,function(e,n){t.hashChange.call(t,e,n)}]}))}},{key:"hashChange",value:function(e,t){this.setStateObj(e,t),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(e,t){this.stateObj[e]=t}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),e}();t.default=a},function(e,t,n){e.exports={static:"src-css--static"}},function(e,t,n){"use strict";n.r(t);var r=n(6);function i(){}function a(e,t){var n=new i;if(e instanceof i)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var r,a=-1,o=e.length;if(null==t)for(;++a<o;)n.set(a,e[a]);else for(;++a<o;)n.set(t(r=e[a],a,e),r)}else if(e)for(var s in e)n.set(s,e[s]);return n}i.prototype=a.prototype={constructor:i,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var o=a,s=function(){var e,t,n,r=[],i=[];function a(n,i,s,p){if(i>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var l,c,d,u=-1,h=n.length,f=r[i++],m=o(),g=s();++u<h;)(d=m.get(l=f(c=n[u])+""))?d.push(c):m.set(l,[c]);return m.each(function(e,t){p(g,t,a(e,i,s,p))}),g}return n={object:function(e){return a(e,0,p,l)},map:function(e){return a(e,0,c,d)},entries:function(e){return function e(n,a){if(++a>r.length)return n;var o,s=i[a-1];return null!=t&&a>=r.length?o=n.entries():(o=[],n.each(function(t,n){o.push({key:n,values:e(t,a)})})),null!=s?o.sort(function(e,t){return s(e.key,t.key)}):o}(a(e,0,c,d),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return i[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function p(){return{}}function l(e,t,n){e[t]=n}function c(){return o()}function d(e,t,n){e.set(t,n)}function u(){}var h=o.prototype;function f(e,t){var n=new u;if(e instanceof u)e.each(function(e){n.add(e)});else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)n.add(e[r]);else for(;++r<i;)n.add(t(e[r],r,e))}return n}u.prototype=f.prototype={constructor:u,has:h.has,add:function(e){return this["$"+(e+="")]=e,this},remove:h.remove,clear:h.clear,values:h.keys,size:h.size,empty:h.empty,each:h.each};var m=n(11),g=n.n(m),v=n(5),b=n(12),y=n.n(b),w=n(13),x=n(14),C=n(15),k=n(2),S=n.n(k),E=(n(31),n(3)),_=n.n(E),O=(n(32),n(1)),T=n.n(O);class A extends S.a{prerender(){var e=super.prerender();return this.matches=[],this.matches[0]=this.model.data.find(e=>e.code===this.data.comparison[0]),this.matches[1]=this.model.data.find(e=>e.code===this.data.comparison[1]),this.prerendered&&this.rerender,e}update(e,t){this.matches[e]=this.model.data.find(e=>e.code===t)}}class L extends A{prerender(){var e=super.prerender();return this.prerendered&&!this.rerender?e:(console.log(this.model.dict,this.data.field),e.innerHTML=this.returnTemplate(0)+this.returnTemplate(1),e)}update(e,t){var n=parseInt(e.split(".")[1]);console.log(n),super.update(n,t),console.log(this,n),this.el.children[n].fadeInContent(this.returnTemplate(n))}returnTemplate(e){return`<p class="${T.a.chartLabel} ${T.a.chartLabelText}">${this.matches[e].state}: <span class="${T.a["compareColor"+(e+1)]}">${void 0!==this.model.dict[this.data.field]?this.model.dict[this.data.field][[this.matches[e][this.data.field]]]:this.matches[e][this.data.field]}</span></p>`}}var P=n(9),D=n.n(P);class I extends S.a{prerender(){var e=super.prerender();return this.prerendered&&!this.rerender?e:(e.classList.add(D.a.bar,D.a["barColor"+this.data.color]),e.style.transform=`scaleX(${this.linearScale(this.data.d,this.data.field)})`,e)}linearScale(e,t){var n=this.model.types.find(e=>e.field===t);return.01+.99*((e[t]-n.min)/n.spread)}update(){console.log(this),this.el.style.transform=`scaleX(${this.linearScale(this.data.d,this.data.field)})`}}class R extends A{prerender(){var e=super.prerender();return this.bars=[],[0,1].forEach(e=>{this.bars.push(this.parent.parent.createComponent(this.model,I,`div.js-bar-compare-${this.data.field}-${e}`,{parent:this,data:{d:this.matches[e],field:this.data.field,color:e+1}}))}),this.children.push(...this.bars),this.prerendered&&!this.rerender?e:(e.innerHTML=this.returnTemplate(),e)}returnTemplate(){return` \n                        <div class="${T.a.chartContainer}">\n                            ${this.partialTemplate(0)}\n                            ${this.partialTemplate(1)}\n                        </div>\n                       `}partialTemplate(e){return`\n                <p class="${T.a.chartLabel} ${T.a["chartLabel"+(e+1)]}">\n                    ${this.matches[e].state}\n                </p>\n                <div class="${T.a.barContainer} ${T.a["barContainer"+(e+1)]}">\n                    ${this.bars[e].el.outerHTML}                        \n                    <div class="${T.a.dataLabel}" style="transform: translateX(${(100*this.bars[e].linearScale(this.matches[e],this.data.field)).toFixed(1)}%)">\n                        ${this.formatValue(this.matches[e],this.data.field)}\n                    </div>\n                </div>\n        `}linearScale(e,t){var n=this.model.types.find(e=>e.field===t);return(e[t]-n.min)/n.spread}formatValue(e,t){var n,r=this.model.types.find(e=>e.field===t).type,i=e[t];switch(console.log(i),r){case"number":n=i.toLocaleString("en-US",{minimumFractionDigits:1});break;case"currency":n=i.toLocaleString("en-US",{style:r,currency:"USD"});break;case"percent":n=i.toLocaleString("en-US",{style:r,minimumFractionDigits:1});break;default:n="[unformatted]"+i}return n}update(e,t){var n=parseInt(e.split(".")[1]),r=this.el.querySelectorAll("."+T.a.dataLabel)[n];super.update(n,t),console.log(this),this.el.querySelectorAll("."+T.a.chartLabel)[n].fadeInContent(this.matches[n].state),this.children[n].data.d=this.matches[n],this.children[n].update(n),r.fadeInContent(this.formatValue(this.matches[n],this.data.field)),r.style.transform=`translateX(${(100*this.children[n].linearScale(this.matches[n],this.data.field)).toFixed(1)}%)`}}var B=n(16),M=n.n(B),j=n(7),H=n.n(j),N=n(17);function F(){return(F=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var z="undefined"!=typeof window,W=z&&navigator.userAgent,q=/MSIE |Trident\//.test(W),U=/UCBrowser\//.test(W),Y=z&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,$={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:[0,20],distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",updateDuration:0,wait:null,zIndex:9999},X=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],G={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow"},V=z?Element.prototype:{},K=V.matches||V.matchesSelector||V.webkitMatchesSelector||V.mozMatchesSelector||V.msMatchesSelector;function J(e){return[].slice.call(e)}function Q(e,t){return(V.closest||function(e){for(var t=this;t;){if(K.call(t,e))return t;t=t.parentElement}}).call(e,t)}function Z(e,t){for(;e;){if(t(e))return e;e=e.parentElement}}function ee(e,t){return{}.hasOwnProperty.call(e,t)}function te(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?n:r}return e}function ne(e,t){var n;return function(){var r=this,i=arguments;clearTimeout(n),n=setTimeout(function(){return e.apply(r,i)},t)}}function re(e,t){return e&&e.modifiers&&e.modifiers[t]}function ie(e,t){return e.indexOf(t)>-1}function ae(e){return!(!e||!ee(e,"isVirtual"))||e instanceof Element}function oe(e,t){return"function"==typeof e?e.apply(null,t):e}function se(e,t){e.filter(function(e){return"flip"===e.name})[0].enabled=t}function pe(){return document.createElement("div")}function le(e,t){e.innerHTML=t instanceof Element?t.innerHTML:t}function ce(e,t){t.content instanceof Element?(le(e,""),e.appendChild(t.content)):e[t.allowHTML?"innerHTML":"textContent"]=t.content}function de(e){return{tooltip:e.querySelector(G.TOOLTIP),backdrop:e.querySelector(G.BACKDROP),content:e.querySelector(G.CONTENT),arrow:e.querySelector(G.ARROW)||e.querySelector(G.ROUND_ARROW)}}function ue(e){e.setAttribute("data-inertia","")}function he(e){var t=pe();return"round"===e?(t.className="tippy-roundarrow",le(t,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):t.className="tippy-arrow",t}function fe(){var e=pe();return e.className="tippy-backdrop",e.setAttribute("data-state","hidden"),e}function me(e,t){e.setAttribute("tabindex","-1"),t.setAttribute("data-interactive","")}function ge(e,t){e.forEach(function(e){e&&(e.style.transitionDuration="".concat(t,"ms"))})}function ve(e,t,n){var r=U&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";e[t+"EventListener"](r,n)}function be(e){var t=e.getAttribute("x-placement");return t?t.split("-")[0]:""}function ye(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function we(e,t,n){n.split(" ").forEach(function(n){e.classList[t](n+"-theme")})}function xe(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.checkHideOnClick,n=e.exclude,r=e.duration;J(document.querySelectorAll(G.POPPER)).forEach(function(e){var i=e._tippy;!i||t&&!0!==i.props.hideOnClick||n&&e===n.popper||i.hide(r)})}var Ce={passive:!0},ke=4,Se=!1;function Ee(){Se||(Se=!0,Y&&document.body.classList.add("tippy-iOS"),window.performance&&document.addEventListener("mousemove",Oe))}var _e=0;function Oe(){var e=performance.now();e-_e<20&&(Se=!1,document.removeEventListener("mousemove",Oe),Y||document.body.classList.remove("tippy-iOS")),_e=e}function Te(e){var t=e.target;if(!(t instanceof Element))return xe();var n=Q(t,G.POPPER);if(!(n&&n._tippy&&n._tippy.props.interactive)){var r=Z(t,function(e){return e._tippy&&e._tippy.reference===e});if(r){var i=r._tippy,a=ie(i.props.trigger,"click");if(Se||a)return xe({exclude:i,checkHideOnClick:!0});if(!0!==i.props.hideOnClick||a)return;i.clearDelayTimeouts()}xe({checkHideOnClick:!0})}}function Ae(){var e=document.activeElement;e&&e.blur&&e._tippy&&e.blur()}var Le=Object.keys($);function Pe(e,t){var n=F({},t,{content:oe(t.content,[e])},t.ignoreAttributes?{}:function(e){return Le.reduce(function(t,n){var r=(e.getAttribute("data-tippy-".concat(n))||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})}(e));return(n.arrow||U)&&(n.animateFill=!1),n}function De(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;Object.keys(e).forEach(function(e){if(!ee(t,e))throw new Error("[tippy]: `".concat(e,"` is not a valid option"))})}var Ie=1;function Re(e,t){var n=Pe(e,t);if(!n.multiple&&e._tippy)return null;var r={},i=null,a=0,o=0,s=!1,p=function(){},l=[],c=n.interactiveDebounce>0?ne(C,n.interactiveDebounce):C,d=null,u=Ie++,h=function(e,t){var n=pe();n.className="tippy-popper",n.id="tippy-".concat(e),n.style.zIndex=t.zIndex,t.role&&n.setAttribute("role",t.role);var r=pe();r.className="tippy-tooltip",r.style.maxWidth=t.maxWidth+("number"==typeof t.maxWidth?"px":""),r.setAttribute("data-size",t.size),r.setAttribute("data-animation",t.animation),r.setAttribute("data-state","hidden"),we(r,"add",t.theme);var i=pe();return i.className="tippy-content",i.setAttribute("data-state","hidden"),t.interactive&&me(n,r),t.arrow&&r.appendChild(he(t.arrowType)),t.animateFill&&(r.appendChild(fe()),r.setAttribute("data-animatefill","")),t.inertia&&ue(r),ce(i,t),r.appendChild(i),n.appendChild(r),n}(u,n);h.addEventListener("mouseenter",function(e){m.props.interactive&&m.state.isVisible&&"mouseenter"===r.type&&v(e)}),h.addEventListener("mouseleave",function(){m.props.interactive&&"mouseenter"===r.type&&document.addEventListener("mousemove",c)});var f,m={id:u,reference:e,popper:h,popperChildren:de(h),popperInstance:null,props:n,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:B,set:M,setContent:function(e){M({content:e})},show:j,hide:H,enable:function(){m.state.isEnabled=!0},disable:function(){m.state.isEnabled=!1},destroy:z};return D(),n.lazy||(T(),m.popperInstance.disableEventListeners()),n.showOnInit&&v(),n.a11y&&!n.target&&((f=e)instanceof Element&&(!K.call(f,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")||f.hasAttribute("disabled")))&&e.setAttribute("tabindex","0"),e._tippy=m,h._tippy=m,m;function g(e){var t=i=e,n=t.clientX,r=t.clientY;if(m.popperInstance){var a=be(m.popper),o=m.props.arrow?ke+("round"===m.props.arrowType?18:16):ke,s=ie(["top","bottom"],a),p=ie(["left","right"],a),l=s?Math.max(o,n):n,c=p?Math.max(o,r):r;s&&l>o&&(l=Math.min(n,window.innerWidth-o)),p&&c>o&&(c=Math.min(r,window.innerHeight-o));var d=m.reference.getBoundingClientRect(),u=m.props.followCursor,h="horizontal"===u,f="vertical"===u;m.popperInstance.reference={getBoundingClientRect:function(){return{width:0,height:0,top:h?d.top:c,bottom:h?d.bottom:c,left:f?d.left:l,right:f?d.right:l}},clientWidth:0,clientHeight:0},m.popperInstance.scheduleUpdate(),"initial"===u&&m.state.isVisible&&y()}}function v(e){if(B(),!m.state.isVisible){if(m.props.target)return function(e){var n=Q(e.target,m.props.target);n&&!n._tippy&&(Re(n,F({},m.props,{content:oe(t.content,[n]),appendTo:t.appendTo,target:"",showOnInit:!0})),v(e))}(e);if(s=!0,m.props.wait)return m.props.wait(m,e);A()&&!m.state.isMounted&&document.addEventListener("mousemove",g);var n=te(m.props.delay,0,$.delay);n?a=setTimeout(function(){j()},n):j()}}function b(){if(B(),!m.state.isVisible)return y();s=!1;var e=te(m.props.delay,1,$.delay);e?o=setTimeout(function(){m.state.isVisible&&H()},e):H()}function y(){document.removeEventListener("mousemove",g)}function w(){document.body.removeEventListener("mouseleave",b),document.removeEventListener("mousemove",c)}function x(e){m.state.isEnabled&&!O(e)&&(m.state.isVisible||(r=e,e instanceof MouseEvent&&(i=e)),"click"===e.type&&!1!==m.props.hideOnClick&&m.state.isVisible?b():v(e))}function C(e){var t=Z(e.target,function(e){return e._tippy}),n=Q(e.target,G.POPPER)===m.popper,r=t===m.reference;n||r||function(e,t,n,r){if(!e)return!0;var i=n.clientX,a=n.clientY,o=r.interactiveBorder,s=r.distance,p=t.top-a>("top"===e?o+s:o),l=a-t.bottom>("bottom"===e?o+s:o),c=t.left-i>("left"===e?o+s:o),d=i-t.right>("right"===e?o+s:o);return p||l||c||d}(be(m.popper),m.popper.getBoundingClientRect(),e,m.props)&&(w(),b())}function k(e){if(!O(e))return m.props.interactive?(document.body.addEventListener("mouseleave",b),void document.addEventListener("mousemove",c)):void b()}function S(e){e.target===m.reference&&(m.props.interactive&&e.relatedTarget&&m.popper.contains(e.relatedTarget)||b())}function E(e){Q(e.target,m.props.target)&&v(e)}function _(e){Q(e.target,m.props.target)&&b()}function O(e){var t="ontouchstart"in window,n=ie(e.type,"touch"),r=m.props.touchHold;return t&&Se&&r&&!n||Se&&!r&&n}function T(){var e=m.props.popperOptions,t=m.popperChildren,n=t.tooltip,r=t.arrow;m.popperInstance=new N.a(m.reference,m.popper,F({placement:m.props.placement},e,{modifiers:F({},e?e.modifiers:{},{preventOverflow:F({boundariesElement:m.props.boundary,padding:ke},re(e,"preventOverflow")),arrow:F({element:r,enabled:!!r},re(e,"arrow")),flip:F({enabled:m.props.flip,padding:m.props.distance+ke,behavior:m.props.flipBehavior},re(e,"flip")),offset:F({offset:m.props.offset},re(e,"offset"))}),onUpdate:function(t){m.props.flip&&!m.props.flipOnUpdate&&(t.flipped&&(m.popperInstance.options.placement=t.placement),se(m.popperInstance.modifiers,!1));var r=be(m.popper),i=n.style;i.top="",i.bottom="",i.left="",i.right="",i[r]=-(m.props.distance-10)+"px";var a={top:ke,bottom:ke,left:ke,right:ke};a[r]=ke+m.props.distance,m.popperInstance.modifiers.filter(function(e){return"preventOverflow"===e.name})[0].padding=a,e&&e.onUpdate&&e.onUpdate(t)}}))}function A(){return m.props.followCursor&&!Se&&"focus"!==r.type}function L(e,t){function n(e){e.target===r&&(ve(r,"remove",n),t())}if(0===e)return t();var r=m.popperChildren.tooltip;ve(r,"remove",p),ve(r,"add",n),p=n}function P(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];m.reference.addEventListener(e,t,n),l.push({eventType:e,handler:t,options:n})}function D(){m.props.touchHold&&!m.props.target&&(P("touchstart",x,Ce),P("touchend",k,Ce)),m.props.trigger.trim().split(" ").forEach(function(e){if("manual"!==e)if(m.props.target)switch(e){case"mouseenter":P("mouseover",E),P("mouseout",_);break;case"focus":P("focusin",E),P("focusout",_);break;case"click":P(e,E)}else switch(P(e,x),e){case"mouseenter":P("mouseleave",k);break;case"focus":P(q?"focusout":"blur",S)}})}function I(){l.forEach(function(e){var t=e.eventType,n=e.handler,r=e.options;m.reference.removeEventListener(t,n,r)}),l=[]}function R(){return[m.popperChildren.tooltip,m.popperChildren.backdrop,m.popperChildren.content]}function B(){clearTimeout(a),clearTimeout(o)}function M(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};De(e,$);var t=m.props,n=Pe(m.reference,F({},m.props,e,{ignoreAttributes:!0}));n.ignoreAttributes=ee(e,"ignoreAttributes")?e.ignoreAttributes:t.ignoreAttributes,m.props=n,(ee(e,"trigger")||ee(e,"touchHold"))&&(I(),D()),ee(e,"interactiveDebounce")&&(w(),c=ne(C,e.interactiveDebounce)),function(e,t,n){var r=de(e),i=r.tooltip,a=r.content,o=r.backdrop,s=r.arrow;e.style.zIndex=n.zIndex,i.setAttribute("data-size",n.size),i.setAttribute("data-animation",n.animation),i.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?e.setAttribute("role",n.role):e.removeAttribute("role"),t.content!==n.content&&ce(a,n),!t.animateFill&&n.animateFill?(i.appendChild(fe()),i.setAttribute("data-animatefill","")):t.animateFill&&!n.animateFill&&(i.removeChild(o),i.removeAttribute("data-animatefill")),!t.arrow&&n.arrow?i.appendChild(he(n.arrowType)):t.arrow&&!n.arrow&&i.removeChild(s),t.arrow&&n.arrow&&t.arrowType!==n.arrowType&&i.replaceChild(he(n.arrowType),s),!t.interactive&&n.interactive?me(e,i):t.interactive&&!n.interactive&&function(e,t){e.removeAttribute("tabindex"),t.removeAttribute("data-interactive")}(e,i),!t.inertia&&n.inertia?ue(i):t.inertia&&!n.inertia&&function(e){e.removeAttribute("data-inertia")}(i),t.theme!==n.theme&&(we(i,"remove",t.theme),we(i,"add",n.theme))}(m.popper,t,n),m.popperChildren=de(m.popper),m.popperInstance&&(m.popperInstance.update(),X.some(function(t){return ee(e,t)})&&(m.popperInstance.destroy(),T(),m.state.isVisible||m.popperInstance.disableEventListeners(),m.props.followCursor&&i&&g(i)))}function j(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:te(m.props.duration,0,$.duration[0]);if(!m.state.isDestroyed&&m.state.isEnabled&&(!Se||m.props.touch))return ee(m.reference,"isVirtual")||document.documentElement.contains(m.reference)?void(m.reference.hasAttribute("disabled")||!1!==m.props.onShow(m)&&(m.popper.style.visibility="visible",m.state.isVisible=!0,m.props.interactive&&m.reference.classList.add("tippy-active"),ge([m.popper,m.popperChildren.tooltip,m.popperChildren.backdrop],0),function(e){var t=!(A()||"initial"===m.props.followCursor&&Se);m.popperInstance?(A()||(m.popperInstance.scheduleUpdate(),t&&m.popperInstance.enableEventListeners()),se(m.popperInstance.modifiers,m.props.flip)):(T(),t||m.popperInstance.disableEventListeners()),m.popperInstance.reference=m.reference;var n=m.popperChildren.arrow;if(A()){n&&(n.style.margin="0");var a=te(m.props.delay,0,$.delay);r.type&&g(a&&i?i:r)}else n&&(n.style.margin="");Se&&i&&"initial"===m.props.followCursor&&(g(i),n&&(n.style.margin="0")),function(e,t){var n=e.popper,r=e.options,i=r.onCreate,a=r.onUpdate;r.onCreate=r.onUpdate=function(e){!function(e){e.offsetHeight}(n),t(),a(e),r.onCreate=i,r.onUpdate=a}}(m.popperInstance,e);var o=m.props.appendTo;(d="parent"===o?m.reference.parentNode:oe(o,[m.reference])).contains(m.popper)||(d.appendChild(m.popper),m.props.onMount(m),m.state.isMounted=!0)}(function(){m.state.isVisible&&(A()||m.popperInstance.update(),ge([m.popper],n.updateDuration),ge(R(),e),m.popperChildren.backdrop&&(m.popperChildren.content.style.transitionDelay=Math.round(e/12)+"ms"),m.props.sticky&&(ge([m.popper],q?0:m.props.updateDuration),function e(){m.popperInstance&&m.popperInstance.scheduleUpdate(),m.state.isMounted?requestAnimationFrame(e):ge([m.popper],0)}()),ye(R(),"visible"),function(e,t){L(e,t)}(e,function(){m.popperChildren.tooltip.classList.add("tippy-notransition"),m.props.aria&&m.reference.setAttribute("aria-".concat(m.props.aria),m.popper.id),m.props.onShown(m),m.state.isShown=!0}))}))):z()}function H(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:te(m.props.duration,1,$.duration[1]);!m.state.isDestroyed&&m.state.isEnabled&&!1!==m.props.onHide(m)&&(m.popperChildren.tooltip.classList.remove("tippy-notransition"),m.props.interactive&&m.reference.classList.remove("tippy-active"),m.popper.style.visibility="hidden",m.state.isVisible=!1,m.state.isShown=!1,ge(R(),e),ye(R(),"hidden"),function(e,t){L(e,function(){!m.state.isVisible&&d&&d.contains(m.popper)&&t()})}(e,function(){s||y(),m.props.aria&&m.reference.removeAttribute("aria-".concat(m.props.aria)),m.popperInstance.disableEventListeners(),m.popperInstance.options.placement=m.props.placement,d.removeChild(m.popper),m.props.onHidden(m),m.state.isMounted=!1}))}function z(e){m.state.isDestroyed||(m.state.isMounted&&H(0),I(),delete m.reference._tippy,m.props.target&&e&&J(m.reference.querySelectorAll(m.props.target)).forEach(function(e){e._tippy&&e._tippy.destroy()}),m.popperInstance&&m.popperInstance.destroy(),m.state.isDestroyed=!0)}}var Be=!1;function Me(e,t){De(t,$),Be||(document.addEventListener("click",Te,!0),document.addEventListener("touchstart",Ee,Ce),window.addEventListener("blur",Ae),Be=!0);var n,r=F({},$,t);n=e,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(e){var t={isVirtual:!0,attributes:e.attributes||{},setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},hasAttribute:function(t){return t in e.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){delete e.classList.classNames[t]},contains:function(t){return t in e.classList.classNames}}};for(var n in t)e[n]=t[n]}(e);var i=function(e){if(ae(e))return[e];if(e instanceof NodeList)return J(e);if(Array.isArray(e))return e;try{return J(document.querySelectorAll(e))}catch(e){return[]}}(e).reduce(function(e,t){var n=t&&Re(t,r);return n&&e.push(n),e},[]);return ae(e)?i[0]:i}Me.version="4.0.4",Me.defaults=$,Me.setDefaults=function(e){Object.keys(e).forEach(function(t){$[t]=e[t]})},Me.hideAll=xe,Me.group=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.delay,r=void 0===n?e[0].props.delay:n,i=t.duration,a=void 0===i?0:i,o=!1;function s(e){o=e,d()}function p(t){t._originalProps.onShow(t),e.forEach(function(e){e.set({duration:a}),e.hide()}),s(!0)}function l(e){e._originalProps.onHide(e),s(!1)}function c(e){e._originalProps.onShown(e),e.set({duration:e._originalProps.duration})}function d(){e.forEach(function(e){e.set({onShow:p,onShown:c,onHide:l,delay:o?[0,Array.isArray(r)?r[1]:r]:r,duration:o?a:e._originalProps.duration})})}e.forEach(function(e){e._originalProps={duration:e.props.duration,onHide:e.props.onHide,onShow:e.props.onShow,onShown:e.props.onShown}}),d()},z&&setTimeout(function(){J(document.querySelectorAll("[data-tippy]")).forEach(function(e){var t=e.getAttribute("data-tippy");t&&Me(e,{content:t})})}),function(e){if(z){var t=document.createElement("style");t.type="text/css",t.textContent=e;var n=document.head,r=n.firstChild;r?n.insertBefore(t,r):n.appendChild(t)}}('.tippy-iOS{cursor:pointer!important}.tippy-notransition{transition:none}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;will-change:transform;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}');var je=Me;const He=["US","AL"];class Ne extends S.a{prerender(){this.comparisons=[],this.model.groups.forEach((e,t)=>{this.model.typesNested[t].values.forEach(e=>{var t;t="text"===e.type?this.parent.createComponent(this.model,L,`div.js-text-compare-${e.field}`,{rerenderOnDataMismatch:!0,parent:this,data:{comparison:He,field:e.field}}):this.parent.createComponent(this.model,R,`div.js-text-compare-${e.field}`,{rerenderOnDataMismatch:!0,parent:this,data:{comparison:He,field:e.field}}),this.comparisons.push(t)})}),this.children.push(...this.comparisons);var e=super.prerender();if(this.prerendered&&!this.rerender)return e;var t=0;return this.model.groups.forEach((n,r)=>{var i=document.createElement("div");i.classList.add(_.a[n.cleanString()]),i.insertAdjacentHTML("afterbegin",`<h3 class="${_.a.groupHeader}">${n}</h3>`);var a=document.createElement("div");a.classList.add(_.a.typeContainer,_.a[n.cleanString()]),this.model.typesNested[r].values.forEach(e=>{var n=document.createElement("div");n.classList.add(_.a.typeDiv,_.a[e.field]),n.insertAdjacentHTML("afterbegin",`<h4 class="${_.a.typeHeader} ${e.tooltip?_.a.withTooltip:"withoutTooltip"}" data-tippy-content="${e.tooltip||""}">${e.label}</h4>`),n.appendChild(this.comparisons[t].el),t++,a.appendChild(n)}),i.appendChild(a),e.appendChild(i)}),e}init(){this.initializeAutocompletes(),this.initializeTooltips(),H.a.setSubs([["compare",(e,t)=>{this.update(e,t)}]])}initializeTooltips(){var e=document.querySelectorAll("."+_.a.withTooltip);je(e)}update(e,t){console.log(this),this.comparisons.forEach(n=>{n.update(e,t)})}initializeAutocompletes(){var e=this.model.data.map(e=>({state:e.state,code:e.code}));console.log(e),[0,1].forEach(t=>{var n=document.querySelector("#compare-input-"+t),r=document.querySelector("#autoComplete_wrapper-"+t);n.classList.add("autoComplete",_.a["autoComplete"+t]),r.classList.add(_.a["autoComplete_wrapper-"+t]),this.children.push(new M.a({data:{src:e,key:"state"},selector:"#compare-input-"+t,placeHolder:"Select state",searchEngine:"strict",resultsList:{container:()=>"autoComplete_results_list",destination:document.querySelector("#compare-input-"+t),position:"afterend"},highlight:!0,onSelection:e=>{console.log(e,this),v.stateModule.setState("compare."+t,e.selection.code),n.value="",n.setAttribute("placeholder",e.selection.state)}})),n.setAttribute("placeHolder",this.model.data.find(e=>e.code===He[t]).state),console.log(this.children)})}}var Fe=n(4),ze=n.n(Fe),We=n(0),qe=n.n(We),Ue=n(18),Ye=n.n(Ue),$e=n(19);class Xe extends $e.Dropdown{constructor(e,t){var n=[],r=t.data.type;t.data.data.forEach(e=>{n.push({value:e.field,name:isNaN(+e.label)?e.label:"Credit rating "+e.label,selected:!!e.isDefaultSelection})}),t.data=n.sort(function(e,t){return e.name<t.name?-1:e.name>t.name?1:e.name>=t.name?0:NaN}),"group"===r&&t.data.unshift({value:null,name:"— None —",selected:!0}),super(...arguments),this.dropdownType=r}prerender(){var e=super.prerender();return this.prerendered&&!this.rerender?e:(e.classList.add(Ye.a.dropdown),e)}init(){super.init()}onChange(){v.stateModule.setState(this.dropdownType,this.selectedOption.dataset.value)}}class Ge extends S.a{prerender(){var e=super.prerender(),t=[{label:"Select field:",data:this.model.types.filter(e=>"text"!==e.type),type:"field"},{label:"Group by:",data:this.model.types.filter(e=>"text"===e.type),type:"group"}];if(this.dropdowns=[],t.forEach(e=>{this.dropdowns.push(this.parent.parent.createComponent(this.model,Xe,`div.js-dropdown-${e.label.cleanString()}`,{parent:this,data:e}))}),this.children.push(...this.dropdowns),this.prerendered&&!this.rerender)return e;var n=document.createElement("div");return n.classList.add(qe.a.dropdownWrapper),t.forEach((e,t)=>{var r=document.createElement("div"),i=document.createElement("label"),a=this.dropdowns[t];i.classList.add(qe.a.dropdownOuter),i.innerText=e.label,r.classList.add(qe.a.dropdownInner),r.appendChild(a.el),i.appendChild(r),n.appendChild(i)}),e.appendChild(n),e.insertAdjacentHTML("beforeend",`\n            <div id="explainer-wrapper">\n                <div id="field-explainer"></div>\n                <div id="group-explainer"></div>\n            </div>\n            <div class="flex">\n                <p class="${qe.a.label} ${qe.a.labelSort} flex"><span>Sort by:</span> <span><a class="${qe.a.sortBy} ${qe.a.sortActive}" data-sort="alpha" href="#">A–Z</a> | <a class="${qe.a.sortBy}" data-sort="asc" href="#">Low–High</a> | <a class="${qe.a.sortBy}" data-sort="desc" href="#">High–Low</a></span></p>\n                <p class="${qe.a.label} ${qe.a.labelHighlight}">Select a state to highlight | <a id="clear-all-highlight" href="#">Clear all</a></p>\n            </div>\n        `),e}init(){this.children.forEach(e=>{e.init()}),document.querySelectorAll("."+qe.a.sortBy).forEach(e=>{e.addEventListener("click",t=>{t.preventDefault(),document.querySelector("."+qe.a.sortActive).classList.remove(qe.a.sortActive),e.classList.add(qe.a.sortActive),v.stateModule.setState("sort",e.dataset.sort)})})}}var Ve=n(20),Ke=n.n(Ve),Je=n(8),Qe=n.n(Je),Ze=n(21),et=n.n(Ze),tt=n(22),nt=n.n(tt),rt=n(23),it=n.n(rt),at=n(24),ot=n.n(at),st=n(25),pt=n.n(st),lt=n(26),ct=n.n(lt);function dt(e=null){return null===e?function(e,t){return(e="N/A"===e?"!":e)<(t="N/A"===t?"!":t)?-1:e>t?1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?-1:t[e]>n[e]?1:t[e]>=n[e]?0:NaN}}function ut(e=null){return null===e?function(e,t){return e<t?1:e>t?-1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?1:t[e]>n[e]?-1:t[e]>=n[e]?0:NaN}}class ht extends S.a{prerender(){var e=super.prerender();if(this.field="debt_percent_SPI",this.bars=[],this.barContainers=[],this.lastPositions={},this.highlightedBars={},this.explainerText={centralization:Ke.a,credit2015:Qe.a,credit2018:Qe.a,debt_limit_type:et.a,debt_per_capita:nt.a,debt_percent_SPI:it.a,ten_year_pop_growth:ot.a,revenue_volatility:pt.a,state_local_division:ct.a},this.groupByFn=null!==this.groupBy?e=>e[this.groupBy]:e=>null!==e,this.selections=this.parent.createComponent(this.model,Ge,"div.js-fifty-state-selections",{parent:this}),this.sortValueKey="state",this.sortValuesFn=dt,this.groupBy="null",this.nestData(),this.pushBars(),this.children.push(this.selections,...this.bars),this.prerendered&&!this.rerender)return e;this.renderSelections(),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.updateExplainerText("field",this.field,!0);var t=this.renderCharts();return e.appendChild(t),e}nestData(){this.nestedData=s().key(this.groupByFn).sortKeys(dt()).sortValues(this.sortValuesFn(this.sortValueKey)).entries(this.model.data)}pushBars(){this.bars.length=0,this.barContainers.length=0,this.nestedData.forEach(e=>{e.values.forEach(e=>{this.bars.push(this.parent.createComponent(this.model,I,`div.bar-state-${e.code}`,{parent:this,data:{d:e,field:this.field,color:2}})),this.barContainers.push(this.parent.createComponent(this.model,S.a,`div#barContainer-${e.code}`))})})}renderSelections(){this.container.appendChild(this.selections.el)}renderCharts(){var e=document.createElement("div"),t=0;return e.classList.add("js-fifty-chart-container"),this.nestedData.forEach(n=>{var r=document.createElement("div");r.classList.add(ze.a.groupDiv),r.innerHTML="null"!==this.groupBy?`<h3 class="${ze.a.groupHeader}">${void 0!==this.model.dict[this.groupBy]?this.model.dict[this.groupBy][n.key]:n.key}</h3>`:"",n.values.forEach(e=>{var n=this.barContainers[t].el;n.classList.add(ze.a.barContainer),this.highlightedBars[n.id]&&n.classList.add(ze.a.isHighlighted);var i=document.createElement("p");i.classList.add(ze.a.barLabel),i.innerHTML=e.state,n.appendChild(i),n.appendChild(this.bars[t].el),r.appendChild(n),t++}),e.appendChild(r)}),e}invertPositions(){this.barContainers.forEach(e=>{var t=e.el.getBoundingClientRect(),n=this.firstPositions[e.el.id].top-t.top;e.el.style.transitionDuration="0",e.el.style.transform=`translateY(${n}px)`,setTimeout(function(){e.el.style.transitionDuration="0.8s",e.el.style.transform="translateY(0)"})})}init(){H.a.setSubs([["field",(e,t)=>{this.updateBars(e,t),this.updateExplainerText(e,t)}],["group",(e,t)=>{this.updateGroups(e,t),this.updateExplainerText(e,t)}],["sort",(e,t)=>{this.sortBars(e,t)}],["resize",()=>{this.adjustExplainerTextHeight()}]]),this.children.forEach(e=>{e.init()}),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.initHighlightBars(),this.initClearAllHighlights()}updateExplainerText(e,t,n){var r,i;"field"===e&&(this.field=t,i=this.explainerText[this.field]||"",r=this.fieldExplainer),"group"===e&&(this.groupBy=t,i=this.explainerText[this.groupBy]||"",r=this.groupExplainer),n||(this.explainerWrapper.style.height=this.explainerWrapper.offsetHeight+"px"),r.fadeInContent(i).then(()=>{this.adjustExplainerTextHeight()})}adjustExplainerTextHeight(){var e=[this.fieldExplainer,this.groupExplainer].reduce((e,t)=>{var n=t.querySelector("p"),r=n?window.getComputedStyle(t.querySelector("p")):null;return r?+e+n.offsetHeight+parseInt(r["margin-top"])+parseInt(r["margin-bottom"]):+e},0);this.explainerWrapper.style.height=e+"px"}initHighlightBars(){document.querySelectorAll("."+ze.a.barContainer).forEach(e=>{e.addEventListener("click",()=>{this.highlightedBars[e.id]=!this.highlightedBars[e.id],e.classList.toggle(ze.a.isHighlighted)})})}initClearAllHighlights(){document.querySelector("#clear-all-highlight").addEventListener("click",e=>{e.preventDefault(),document.querySelectorAll("."+ze.a.barContainer).forEach(e=>{e.classList.remove(ze.a.isHighlighted),this.highlightedBars={}})})}updateBars(e,t){this.field=t,this.bars.forEach(e=>{e.data.field=t,e.update()}),console.log(this.sortValueKey),"state"!==this.sortValueKey&&(this.sortValueKey=t,setTimeout(this.FLIP.bind(this),500))}recordFirstPositions(){this.firstPositions=this.barContainers.reduce((e,t)=>(e[t.el.id]=t.el.getBoundingClientRect(),e),{})}FLIP(){this.recordFirstPositions(),this.nestData(),this.el.innerHTML="",this.pushBars(),this.el.appendChild(this.renderCharts()),this.initHighlightBars(),this.invertPositions()}updateGroups(e,t){this.groupBy=t,console.log(this.groupBy),this.FLIP()}sortBars(e,t){this.sortValueKey="alpha"===t?"state":this.field,this.sortValuesFn="desc"===t?ut:dt,this.FLIP()}}var ft=n(27),mt=n.n(ft),gt=n(28),vt=n.n(gt),bt=n(29),yt=n.n(bt);Object(r.publishWindowResize)(v.stateModule);const wt={groups:w,types:x,dict:C},xt=[];function Ct(){return new Promise((e,t)=>{var n=this.el;g.a.parse(""+y.a,{download:!0,dynamicTyping:!0,header:!0,fastMode:!0,skipEmptyLines:!0,beforeFirstChunk(e){var t=e.hashCode();window.IS_PRERENDERING?n.setAttribute("data-data-hash",t):t.toString()!==n.getAttribute("data-data-hash")&&(n.setAttribute("data-data-mismatch",!0),console.log("data mismatch"),wt.isMismatched=!0)},complete:t=>{xt.length=0;var n=t.data;wt.data=n,wt.types.forEach(e=>{if("text"!==e.type){let t=n.map(t=>t[e.field]).filter(e=>null!==e);e.max=Math.max(...t),e.min=Math.min(...t),e.spread=e.max-e.min}}),wt.typesNested=s().key(e=>e.group).entries(wt.types),console.log(wt),xt.push(this.createComponent(wt,Ne,"div#comparison-view",{renderToSelector:"#section-comparison .js-inner-content",rerenderOnDataMismatch:!0,parent:this}),this.createComponent(wt,ht,"div#fifty-state-view",{renderToSelector:"#section-states .js-inner-content",rerenderOnDataMismatch:!0,parent:this})),e(!0)},error:function(e){t(e)}})})}n(37);const kt=new class extends mt.a{prerender(){console.log("prerender"),this.el.insertAdjacentHTML("beforeend",vt.a),this.el.insertAdjacentHTML("beforeend",yt.a),Ct.call(this).then(()=>{console.log(wt),xt.forEach(e=>{e.container.appendChild(e.el)})})}init(){console.log("init"),super.init(),this.attachSectionOpenClose(),Ct.call(this).then(()=>{xt.forEach(e=>{e.init(this)})})}attachSectionOpenClose(){function e(){console.log(this.parentNode),this.parentNode.querySelector(".js-inner-content").classList.toggle("pct-hide"),this.classList.toggle("pct-is-closed"),this.blur()}document.querySelectorAll("#pew-app section > h2").forEach(t=>{t.addEventListener("click",e),t.addEventListener("keyup",function(t){13===t.keyCode&&e.call(this)})})}}("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&kt.prerender(),kt.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2ZpZnR5LXN0YXRlL3NlbGVjdGlvbnMvc3R5bGVzLnNjc3M/ZmI2ZiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb21wYXJpc29uL3N0eWxlcy5zY3NzPzY0NWEiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VSS1qcy9lbGVtZW50L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0ZS1jb21wYXJpc29uL3N0eWxlcy5zY3NzPzkyOWMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2ZpZnR5LXN0YXRlL3N0eWxlcy5zY3NzP2M3MTYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0YXRlZnVsLWRlYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VVElMUy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVic3ViLXNldHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvY3JlZGl0LXJhdGluZy5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9iYXIvc3R5bGVzLnNjc3M/YzRkZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVic3ViLWpzL3NyYy9wdWJzdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcGFwYXJzZS9wYXBhcGFyc2UubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9kYXRhL2RhdGEuY3N2Iiwid2VicGFjazovLy8uL3N1Ym1vZHVsZXMvYXV0b0NvbXBsZXRlLmpzL2Rpc3QvanMvYXV0b0NvbXBsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wb3BwZXIuanMvZGlzdC9lc20vcG9wcGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Ryb3Bkb3duL3N0eWxlcy5zY3NzPzY0MGMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VSS1qcy9pbnB1dHMvaW5wdXRzLmpzIiwid2VicGFjazovLy8uL3NyYy9wYXJ0aWFscy9jZW50cmFsaXphdGlvbi5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvZGVidC1saW1pdC5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvZGVidC1wZXItY2FwaXRhLm1kIiwid2VicGFjazovLy8uL3NyYy9wYXJ0aWFscy9kZWJ0LXNwaS5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvcG9wdWxhdGlvbi1ncm93dGgubWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpYWxzL3JldmVudWUtdm9sYXRpbGl0eS5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvc3RhdGUtbG9jYWwubWQiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9QQ1RBcHAtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpYWxzL3NlY3Rpb25zLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpYWxzL2Zvb3Rlci5odG1sIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9hdXRvQ29tcGxldGUuanMvZGlzdC9jc3MvYXV0b0NvbXBsZXRlLmNzcz81NGM2Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmctaGFzaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3N1Ym1vZHVsZXMvVUktanMvaW5wdXRzL3N0eWxlcy5zY3NzP2ZlMmQiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9ST1VUUi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3N0eWxlcy5zY3NzP2YyYmIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvc2V0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbXBhcmlzb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29tcGFyaXNvbi90ZXh0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Jhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb21wYXJpc29uL2NoYXJ0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aXBweS5qcy9lc20vaW5kZXguYWxsLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0ZS1jb21wYXJpc29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Ryb3Bkb3duL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9maWZ0eS1zdGF0ZS9zZWxlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9maWZ0eS1zdGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUtZGVidC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJkcm9wZG93bldyYXBwZXIiLCJkcm9wZG93bk91dGVyIiwiZHJvcGRvd25Jbm5lciIsImxhYmVsIiwic29ydEFjdGl2ZSIsImxhYmVsU29ydCIsInNvcnRCeSIsImNvbXBhcmVDb2xvcjEiLCJjb21wYXJlQ29sb3IyIiwiY2hhcnRDb250YWluZXIiLCJjaGFydExhYmVsIiwiY2hhcnRMYWJlbFRleHQiLCJjaGFydExhYmVsMSIsImNoYXJ0TGFiZWwyIiwiYmFyQ29udGFpbmVyIiwiYmFyQ29udGFpbmVyMSIsImJhckNvbnRhaW5lcjIiLCJkYXRhTGFiZWwiLCJfVXRpbHMiLCJFbGVtZW50Iiwic2VsZWN0b3IiLCJvcHRpb25zIiwiX3RoaXMiLCJ0aGlzIiwiX2NsYXNzQ2FsbENoZWNrIiwibW9kZWwiLCJwYXJlbnQiLCJyZW5kZXJUb1NlbGVjdG9yIiwiY29udGFpbmVyIiwiJGQiLCJxIiwiY2hpbGRyZW4iLCJyZXJlbmRlciIsInJlcmVuZGVyT25EYXRhTWlzbWF0Y2giLCJpc01pc21hdGNoZWQiLCJkYXRhIiwiZWwiLCJwcmVyZW5kZXIiLCJhcmd1bWVudHMiLCJpc1JlYWR5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJleGlzdGluZyIsInByZXJlbmRlcmVkIiwiaW5uZXJIVE1MIiwiZ3JvdXBIZWFkZXIiLCJ0eXBlQ29udGFpbmVyIiwiY3JlZGl0LXJhdGluZyIsInR5cGVEaXYiLCJ0eXBlSGVhZGVyIiwiZGVidF9saW1pdF90eXBlIiwiY3JlZGl0MjAxNSIsImNyZWRpdDIwMTgiLCJhdXRvQ29tcGxldGUwIiwiYXV0b0NvbXBsZXRlX3dyYXBwZXItMCIsImF1dG9Db21wbGV0ZTEiLCJhdXRvQ29tcGxldGVfd3JhcHBlci0xIiwid2l0aFRvb2x0aXAiLCJiYXJMYWJlbCIsImdyb3VwRGl2IiwiaXNIaWdobGlnaHRlZCIsIlB1YlN1YiIsInN0YXRlIiwiX2xvZ1N0YXRlIiwiY29uc29sZSIsImxvZyIsIkFycmF5IiwiY29tcGFyZSIsInRlc3RBcnIiLCJsZW5ndGgiLCJzdGF0ZU1vZHVsZSIsImxvZ1N0YXRlIiwiZ2V0U3RhdGUiLCJ1bmRlZmluZWQiLCJnZXRQcmV2aW91c1N0YXRlIiwic2V0U3RhdGUiLCJwdWJsaXNoIiwiaXNBcnJheSIsInVuc2hpZnQiLCJHVE1QdXNoIiwiZXZlbnRMYWJlbCIsImRhdGFMYXllciIsInB1c2giLCJldmVudCIsImV2ZW50RGF0YSIsInB1Ymxpc2hXaW5kb3dSZXNpemUiLCJTIiwicmVzaXplVGltZW91dCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRUaW1lb3V0IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsIkZhZGVJblRleHQiLCJIVE1MRWxlbWVudCIsImZhZGVPdXRDb250ZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiZmFkZUluQ29udGVudCIsImNvbnRlbnQiLCJkdXJhdGlvblMiLCJzdHlsZSIsInRyYW5zaXRpb24iLCJkdXJhdGlvblN0ciIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZHVyYXRpb24iLCJwYXJzZUZsb2F0IiwicmVtb3ZlIiwiU3RyaW5nSGVscGVycyIsIlN0cmluZyIsImNsZWFuU3RyaW5nIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwicmVtb3ZlVW5kZXJzY29yZXMiLCJ1bmRvQ2FtZWxDYXNlIiwidHJ1bmMiLCJ1c2VXb3JkQm91bmRhcnkiLCJzdWJTdHJpbmciLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsImhhc2hDb2RlIiwiaGFzaCIsImNoYXJDb2RlQXQiLCJET01IZWxwZXJzIiwiaW5kZXhPZiIsImNsYXNzU3RyaW5ncyIsIm1hdGNoIiwiaWRTdHJpbmciLCJlbFN0cmluZyIsImNyZWF0ZUVsZW1lbnQiLCJmb3JFYWNoIiwia2xhc3MiLCJzZXRBdHRyaWJ1dGUiLCJxdWVyeVNlbGVjdG9yIiwicWEiLCJxdWVyeVNlbGVjdG9yQWxsIiwic3Vic2NyaXB0aW9ucyIsImNyZWF0ZVRva2VuIiwidG9waWMiLCJmblJlZiIsImZ1bmN0aW9uSGFzaCIsInRvU3RyaW5nIiwidG9rZW4iLCJmbiIsImxvZ1N1YnMiLCJzZXRTdWJzIiwic3Vic0FycmF5IiwicGFpciIsInRva2VuT2JqIiwic3Vic2NyaWJlIiwiY2FuY2VsU3ViIiwidW5zdWJzY3JpYmUiLCJrZXlzIiwiYmFyIiwiYmFyQ29sb3IxIiwiYmFyQ29sb3IyIiwicm9vdCIsImZhY3RvcnkiLCJkZWZpbmUiLCJtZXNzYWdlcyIsImxhc3RVaWQiLCJoYXNLZXlzIiwib2JqIiwiY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMiLCJzdWJzY3JpYmVyIiwibWVzc2FnZSIsImV4IiwidGhyb3dFeGNlcHRpb24iLCJjYWxsU3Vic2NyaWJlcldpdGhJbW1lZGlhdGVFeGNlcHRpb25zIiwiZGVsaXZlck1lc3NhZ2UiLCJvcmlnaW5hbE1lc3NhZ2UiLCJtYXRjaGVkTWVzc2FnZSIsImltbWVkaWF0ZUV4Y2VwdGlvbnMiLCJzdWJzY3JpYmVycyIsImNhbGxTdWJzY3JpYmVyIiwic3luYyIsImRlbGl2ZXIiLCJwb3NpdGlvbiIsImNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24iLCJoYXNTdWJzY3JpYmVycyIsImZvdW5kIiwiQm9vbGVhbiIsIm1lc3NhZ2VIYXNTdWJzY3JpYmVycyIsInB1Ymxpc2hTeW5jIiwiZnVuYyIsInN1YnNjcmliZU9uY2UiLCJhcHBseSIsImNsZWFyQWxsU3Vic2NyaXB0aW9ucyIsImNsZWFyU3Vic2NyaXB0aW9ucyIsImlzVG9waWMiLCJkZXNjZW5kYW50VG9waWNFeGlzdHMiLCJpc1Rva2VuIiwiaXNGdW5jdGlvbiIsInJlc3VsdCIsImFtZCIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImUiLCJmIiwic2VsZiIsInBvc3RNZXNzYWdlIiwidGVzdCIsImxvY2F0aW9uIiwic2VhcmNoIiwiYSIsImgiLCJ1IiwiayIsInBhcnNlIiwiZHluYW1pY1R5cGluZyIsInoiLCJkeW5hbWljVHlwaW5nRnVuY3Rpb24iLCJ0cmFuc2Zvcm0iLCJ3b3JrZXIiLCJXT1JLRVJTX1NVUFBPUlRFRCIsIlNDUklQVF9QQVRIIiwiRXJyb3IiLCJXb3JrZXIiLCJvbm1lc3NhZ2UiLCJpZCIsInVzZXJTdGVwIiwic3RlcCIsInVzZXJDaHVuayIsImNodW5rIiwidXNlckNvbXBsZXRlIiwiY29tcGxldGUiLCJ1c2VyRXJyb3IiLCJlcnJvciIsImlucHV0IiwiY29uZmlnIiwid29ya2VySWQiLCJOT0RFX1NUUkVBTV9JTlBVVCIsImRvd25sb2FkIiwiXyIsInJlYWRhYmxlIiwicmVhZCIsIm9uIiwiZyIsIkZpbGUiLCJzdHJlYW0iLCJ1bnBhcnNlIiwieSIsImRlbGltaXRlciIsIkJBRF9ERUxJTUlURVJTIiwiZmlsdGVyIiwicXVvdGVzIiwic2tpcEVtcHR5TGluZXMiLCJuZXdsaW5lIiwicXVvdGVDaGFyIiwiaGVhZGVyIiwiUmVnRXhwIiwiTSIsIkpTT04iLCJmaWVsZHMiLCJtZXRhIiwidiIsImpvaW4iLCJ0cmltIiwiY29uc3RydWN0b3IiLCJEYXRlIiwic3RyaW5naWZ5Iiwic2xpY2UiLCJjaGFyQXQiLCJSRUNPUkRfU0VQIiwiZnJvbUNoYXJDb2RlIiwiVU5JVF9TRVAiLCJCWVRFX09SREVSX01BUksiLCJMb2NhbENodW5rU2l6ZSIsIlJlbW90ZUNodW5rU2l6ZSIsIkRlZmF1bHREZWxpbWl0ZXIiLCJQYXJzZXIiLCJQYXJzZXJIYW5kbGUiLCJOZXR3b3JrU3RyZWFtZXIiLCJGaWxlU3RyZWFtZXIiLCJTdHJpbmdTdHJlYW1lciIsIlJlYWRhYmxlU3RyZWFtU3RyZWFtZXIiLCJqUXVlcnkiLCJlYWNoIiwicHJvcCIsInRvVXBwZXJDYXNlIiwiYXR0ciIsIkZpbGVSZWFkZXIiLCJmaWxlcyIsImZpbGUiLCJpbnB1dEVsZW0iLCJpbnN0YW5jZUNvbmZpZyIsImV4dGVuZCIsImJlZm9yZSIsImFjdGlvbiIsInJlYXNvbiIsInNwbGljZSIsIl9oYW5kbGUiLCJfZmluaXNoZWQiLCJfY29tcGxldGVkIiwiX2lucHV0IiwiX2Jhc2VJbmRleCIsIl9wYXJ0aWFsTGluZSIsIl9yb3dDb3VudCIsIl9zdGFydCIsIl9uZXh0Q2h1bmsiLCJpc0ZpcnN0Q2h1bmsiLCJfY29tcGxldGVSZXN1bHRzIiwiZXJyb3JzIiwiRSIsImNodW5rU2l6ZSIsInBhcnNlSW50Iiwic3RyZWFtZXIiLCJfY29uZmlnIiwicGFyc2VDaHVuayIsImJlZm9yZUZpcnN0Q2h1bmsiLCJwYXVzZWQiLCJhYm9ydGVkIiwiY3Vyc29yIiwic3Vic3RyaW5nIiwicHJldmlldyIsInJlc3VsdHMiLCJXT1JLRVJfSUQiLCJmaW5pc2hlZCIsImNvbmNhdCIsIl9zZW5kRXJyb3IiLCJfcmVhZENodW5rIiwiX2NodW5rTG9hZGVkIiwiWE1MSHR0cFJlcXVlc3QiLCJ3aXRoQ3JlZGVudGlhbHMiLCJvbmxvYWQiLCJ3Iiwib25lcnJvciIsIl9jaHVua0Vycm9yIiwib3BlbiIsImRvd25sb2FkUmVxdWVzdEhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInN0YXR1cyIsInJlYWR5U3RhdGUiLCJnZXRSZXNwb25zZUhlYWRlciIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJ3ZWJraXRTbGljZSIsIm1velNsaWNlIiwiRmlsZVJlYWRlclN5bmMiLCJNYXRoIiwibWluIiwic2l6ZSIsInJlYWRBc1RleHQiLCJlbmNvZGluZyIsInRhcmdldCIsInBhdXNlIiwicmVzdW1lIiwiX3N0cmVhbURhdGEiLCJfc3RyZWFtRW5kIiwiX3N0cmVhbUVycm9yIiwiX2NoZWNrSXNGaW5pc2hlZCIsInNoaWZ0IiwiX3N0cmVhbUNsZWFuVXAiLCJyZW1vdmVMaXN0ZW5lciIsImFib3J0IiwidHJpbUhlYWRlcnMiLCJ0eXBlIiwiY29kZSIsInJvdyIsInNwbGl0IiwiY29tbWVudHMiLCJhYnMiLCJzdWNjZXNzZnVsIiwiYmVzdERlbGltaXRlciIsImdldENoYXJJbmRleCIsIk8iLCJ4IiwiVCIsIkkiLCJBIiwiRCIsImZhc3RNb2RlIiwiTCIsImVzY2FwZUNoYXIiLCJQIiwiRiIsIkMiLCJSIiwiaW5kZXgiLCJiIiwibGluZWJyZWFrIiwidHJ1bmNhdGVkIiwidGVybWluYXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzcmMiLCJib2R5IiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInNlbGVjdCIsInJlc3VsdHNMaXN0IiwiaGlnaGxpZ2h0IiwiZ2V0SW5wdXQiLCJjbGVhclJlc3VsdHMiLCJhdXRvQ29tcGxldGVWaWV3IiwiY3JlYXRlUmVzdWx0c0xpc3QiLCJyZW5kZXJSZXN1bHRzIiwiZGVzdGluYXRpb24iLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJhZGRSZXN1bHRzVG9MaXN0IiwiZGF0YVNyYyIsImRhdGFLZXkiLCJjYWxsYmFjayIsInJlY29yZCIsInJlc3VsdFZhbHVlIiwic291cmNlIiwiYXBwZW5kQ2hpbGQiLCJuYXZpZ2F0aW9uIiwiZmlyc3QiLCJmaXJzdENoaWxkIiwib25rZXlkb3duIiwiYWN0aXZlIiwiYWN0aXZlRWxlbWVudCIsImtleUNvZGUiLCJwcmV2aW91c1NpYmxpbmciLCJmb2N1cyIsImNoaWxkTm9kZXMiLCJsYXN0Q2hpbGQiLCJuZXh0U2libGluZyIsImdldFNlbGVjdGlvbiIsImZpZWxkIiwicmVzdWx0c1ZhbHVlcyIsInNlbGVjdGlvbiIsImV2ZW50VHlwZSIsInF1ZXJ5IiwibWFwIiwiZmluZCIsInJlc1ZhbHVlIiwiY2xvc2VzdCIsImdldEF0dHJpYnV0ZSIsImF1dG9Db21wbGV0ZSIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJzZWFyY2hFbmdpbmUiLCJ0aHJlc2hvbGQiLCJwbGFjZUhvbGRlciIsIm1heFJlc3VsdHMiLCJyZXN1bHRJdGVtIiwib25TZWxlY3Rpb24iLCJpbml0IiwicHJvdG9Qcm9wcyIsInJlY29yZExvd2VyQ2FzZSIsInNlYXJjaFBvc2l0aW9uIiwibnVtYmVyIiwicmVjb3JkQ2hhciIsImluY2x1ZGVzIiwiaW5wdXRWYWx1ZSIsInJlc0xpc3QiLCJsaXN0IiwiX3RoaXMyIiwib25rZXl1cCIsImxpc3RNYXRjaGVkUmVzdWx0cyIsIl90aGlzMyIsInRoZW4iLCJpZ25pdGUiLCJzdGF0aWNQcm9wcyIsImdsb2JhbCIsImlzQnJvd3NlciIsImxvbmdlclRpbWVvdXRCcm93c2VycyIsInRpbWVvdXREdXJhdGlvbiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRlYm91bmNlIiwiY2FsbGVkIiwic2NoZWR1bGVkIiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZWxlbWVudCIsIm5vZGVUeXBlIiwiY3NzIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZ2V0UGFyZW50Tm9kZSIsIm5vZGVOYW1lIiwicGFyZW50Tm9kZSIsImhvc3QiLCJnZXRTY3JvbGxQYXJlbnQiLCJfZ2V0U3R5bGVDb21wdXRlZFByb3AiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImlzSUUxMSIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwiaXNJRTEwIiwiaXNJRSIsInZlcnNpb24iLCJnZXRPZmZzZXRQYXJlbnQiLCJub09mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsImdldFJvb3QiLCJub2RlIiwiZmluZENvbW1vbk9mZnNldFBhcmVudCIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJvcmRlciIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInN0YXJ0IiwiZW5kIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJjb250YWlucyIsImZpcnN0RWxlbWVudENoaWxkIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwiaHRtbCIsInNjcm9sbGluZ0VsZW1lbnQiLCJnZXRCb3JkZXJzU2l6ZSIsInN0eWxlcyIsImF4aXMiLCJzaWRlQSIsInNpZGVCIiwiZ2V0U2l6ZSIsImNvbXB1dGVkU3R5bGUiLCJtYXgiLCJnZXRXaW5kb3dTaXplcyIsImhlaWdodCIsIndpZHRoIiwiY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImdldENsaWVudFJlY3QiLCJvZmZzZXRzIiwicmlnaHQiLCJsZWZ0IiwiYm90dG9tIiwidG9wIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJzaXplcyIsImNsaWVudEhlaWdodCIsImhvcml6U2Nyb2xsYmFyIiwib2Zmc2V0V2lkdGgiLCJ2ZXJ0U2Nyb2xsYmFyIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJzdWJ0cmFjdCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZ2V0Qm91bmRhcmllcyIsInBvcHBlciIsInJlZmVyZW5jZSIsInBhZGRpbmciLCJib3VuZGFyaWVzRWxlbWVudCIsImJvdW5kYXJpZXMiLCJleGNsdWRlU2Nyb2xsIiwicmVsYXRpdmVPZmZzZXQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsImlzRml4ZWQiLCJfZ2V0V2luZG93U2l6ZXMiLCJpc1BhZGRpbmdOdW1iZXIiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInBsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiYXJlYSIsIl9yZWYiLCJzb3J0IiwiZmlsdGVyZWRBcmVhcyIsIl9yZWYyIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwiZ2V0T3V0ZXJTaXplcyIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblJpZ2h0IiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJtYXRjaGVkIiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwiYXJyIiwiY2hlY2siLCJydW5Nb2RpZmllcnMiLCJtb2RpZmllcnMiLCJlbmRzIiwiZmluZEluZGV4IiwiY3VyIiwid2FybiIsImVuYWJsZWQiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsInByZWZpeCIsInRvQ2hlY2siLCJnZXRXaW5kb3ciLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwidXBkYXRlQm91bmQiLCJwYXNzaXZlIiwic2Nyb2xsRWxlbWVudCIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJldmVudHNFbmFibGVkIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzY2hlZHVsZVVwZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc051bWVyaWMiLCJpc05hTiIsImlzRmluaXRlIiwic2V0U3R5bGVzIiwidW5pdCIsImlzRmlyZWZveCIsImlzTW9kaWZpZXJSZXF1aXJlZCIsInJlcXVlc3RpbmdOYW1lIiwicmVxdWVzdGVkTmFtZSIsInJlcXVlc3RpbmciLCJpc1JlcXVpcmVkIiwiX3JlcXVlc3RpbmciLCJyZXF1ZXN0ZWQiLCJwbGFjZW1lbnRzIiwidmFsaWRQbGFjZW1lbnRzIiwiY2xvY2t3aXNlIiwiY291bnRlciIsInJldmVyc2UiLCJCRUhBVklPUlMiLCJGTElQIiwiQ0xPQ0tXSVNFIiwiQ09VTlRFUkNMT0NLV0lTRSIsInBhcnNlT2Zmc2V0Iiwib2Zmc2V0IiwiYmFzZVBsYWNlbWVudCIsInVzZUhlaWdodCIsImZyYWdtZW50cyIsImZyYWciLCJkaXZpZGVyIiwic3BsaXRSZWdleCIsIm9wcyIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJyZWR1Y2UiLCJzdHIiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJwb3NpdGlvbkZpeGVkIiwicmVtb3ZlT25EZXN0cm95Iiwib25DcmVhdGUiLCJvblVwZGF0ZSIsInNoaWZ0dmFyaWF0aW9uIiwiX2RhdGEkb2Zmc2V0cyIsImlzVmVydGljYWwiLCJzaWRlIiwic2hpZnRPZmZzZXRzIiwicHJldmVudE92ZXJmbG93IiwidHJhbnNmb3JtUHJvcCIsInBvcHBlclN0eWxlcyIsInByaW9yaXR5IiwicHJpbWFyeSIsImVzY2FwZVdpdGhSZWZlcmVuY2UiLCJzZWNvbmRhcnkiLCJrZWVwVG9nZXRoZXIiLCJmbG9vciIsIm9wU2lkZSIsImFycm93IiwiX2RhdGEkb2Zmc2V0cyRhcnJvdyIsImFycm93RWxlbWVudCIsImxlbiIsInNpZGVDYXBpdGFsaXplZCIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJyb3VuZCIsImZsaXAiLCJmbGlwcGVkIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsImJlaGF2aW9yIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb24iLCJmbGlwVmFyaWF0aW9ucyIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImhpZGUiLCJib3VuZCIsImF0dHJpYnV0ZXMiLCJjb21wdXRlU3R5bGUiLCJsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24iLCJncHVBY2NlbGVyYXRpb24iLCJvZmZzZXRQYXJlbnRSZWN0Iiwic2hvdWxkUm91bmQiLCJub1JvdW5kIiwicmVmZXJlbmNlV2lkdGgiLCJwb3BwZXJXaWR0aCIsImlzVmFyaWF0aW9uIiwiaG9yaXpvbnRhbFRvSW50ZWdlciIsInZlcnRpY2FsVG9JbnRlZ2VyIiwiZ2V0Um91bmRlZE9mZnNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwicHJlZml4ZWRQcm9wZXJ0eSIsIndpbGxDaGFuZ2UiLCJpbnZlcnRUb3AiLCJpbnZlcnRMZWZ0IiwieC1wbGFjZW1lbnQiLCJhcnJvd1N0eWxlcyIsImFwcGx5U3R5bGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJvbkxvYWQiLCJtb2RpZmllck9wdGlvbnMiLCJQb3BwZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGUiLCJpc0Rlc3Ryb3llZCIsImlzQ3JlYXRlZCIsImpxdWVyeSIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlQ2hpbGQiLCJVdGlscyIsIlBvcHBlclV0aWxzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImRyb3Bkb3duIiwiVGV4dElucHV0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfX3Byb3RvX18iLCJnZXRQcm90b3R5cGVPZiIsIkRyb3Bkb3duIiwiX2lzT3BlbiIsIndyYXBwZXIiLCJvcHRpb25zTGlzdCIsIm9wdGlvbiIsInNlbGVjdGVkIiwidGV4dENvbnRlbnQiLCJQQ1REcm9wZG93biIsIml0ZW0iLCJzdG9wUHJvcGFnYXRpb24iLCJpdGVtQ2xpY2tIYW5kbGVyIiwiX3NlbGVjdGVkT3B0aW9uIiwidG9CZVNlbGVjdGVkIiwiY2xpY2tIYW5kbGVyIiwicHJldmVudERlZmF1bHQiLCJzcGFjZUFuZEFycm93SGFuZGxlciIsImlzT3BlbiIsImVudGVyQW5kRXNjYXBlSGFuZGxlciIsInRhYkhhbmRsZXIiLCJzZWxlY3RlZE9wdGlvbiIsIm5leHQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiVUlDb250cm9sSXNPcGVuIiwiYm9vbCIsImJvZHlDbGlja0hhbmRsZXIiLCJpbm5lclRleHQiLCJvbkNoYW5nZSIsIl9Sb3V0ZXIiLCJQQ1RBcHAiLCJyb3V0ZXJPcHRpb25zIiwibmVlZHNSb3V0ZXIiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJkaXNhYmxlSG92ZXJPblRvdWNoIiwiaGFzSG92ZXJDbGFzcyIsImxhc3RUb3VjaFRpbWUiLCJlbmFibGVIb3ZlciIsImNvbXBvbmVudCIsIl9vcHRpb25zIiwiX3R5cGVvZiIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiYXV0b0NvbXBsZXRlX3dyYXBwZXIiLCJhdXRvQ29tcGxldGVfcmVzdWx0c19saXN0IiwiYXV0b0NvbXBsZXRlX3Jlc3VsdCIsImF1dG9Db21wbGV0ZV9oaWdobGlnaHRlZCIsIkZ1bmN0aW9uIiwiZW5jb2RlIiwiZGVjb2RlIiwidmlld3MiLCJQUyIsInN0YXRlT2JqIiwiaGFzaFN0YXRlIiwiZGVjb2RlSGFzaCIsInZpZXdQcm9taXNlcyIsImFsbCIsIm1zZyIsImhhc2hDaGFuZ2UiLCJzZXRTdGF0ZU9iaiIsInJlcGxhY2VTdGF0ZSIsImhpc3RvcnkiLCJoYXNoU3RyaW5nIiwic3RhdGljIiwiTWFwIiwic2V0IiwiaGFzIiwiY2xlYXIiLCJ2YWx1ZXMiLCJlbnRyaWVzIiwiZW1wdHkiLCJzcmNfbWFwIiwic3JjX25lc3QiLCJzb3J0VmFsdWVzIiwicm9sbHVwIiwibmVzdCIsInNvcnRLZXlzIiwiYXJyYXkiLCJkZXB0aCIsImNyZWF0ZVJlc3VsdCIsInNldFJlc3VsdCIsImtleVZhbHVlIiwidmFsdWVzQnlLZXkiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJzb3J0S2V5IiwiU2V0IiwicHJvdG8iLCJzZXRfc2V0IiwiQ29tcGFyaXNvbiIsImRpdiIsInN1cGVyIiwibWF0Y2hlcyIsImNvbXBhcmlzb24iLCJDb21wYXJpc29uVGV4dCIsImRpY3QiLCJyZXR1cm5UZW1wbGF0ZSIsIkJhciIsImNvbG9yIiwibGluZWFyU2NhbGUiLCJ0eXBlT2JqZWN0IiwidHlwZXMiLCJzcHJlYWQiLCJDb21wYXJpc29uQ2hhcnQiLCJiYXJzIiwiY3JlYXRlQ29tcG9uZW50IiwicGFydGlhbFRlbXBsYXRlIiwib3V0ZXJIVE1MIiwidG9GaXhlZCIsImZvcm1hdFZhbHVlIiwiZm9ybWF0dGVkVmFsdWVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIm1pbmltdW1GcmFjdGlvbkRpZ2l0cyIsImN1cnJlbmN5IiwidWEiLCJpc1VDQnJvd3NlciIsImlzSU9TIiwicGxhdGZvcm0iLCJNU1N0cmVhbSIsImExMXkiLCJhbGxvd0hUTUwiLCJhbmltYXRlRmlsbCIsImFuaW1hdGlvbiIsImFwcGVuZFRvIiwiYXJpYSIsImFycm93VHlwZSIsImJvdW5kYXJ5IiwiZGVsYXkiLCJkaXN0YW5jZSIsImZsaXBCZWhhdmlvciIsImZsaXBPblVwZGF0ZSIsImZvbGxvd0N1cnNvciIsImhpZGVPbkNsaWNrIiwiaWdub3JlQXR0cmlidXRlcyIsImluZXJ0aWEiLCJpbnRlcmFjdGl2ZSIsImludGVyYWN0aXZlQm9yZGVyIiwiaW50ZXJhY3RpdmVEZWJvdW5jZSIsImxhenkiLCJtYXhXaWR0aCIsIm11bHRpcGxlIiwib25IaWRkZW4iLCJvbkhpZGUiLCJvbk1vdW50Iiwib25TaG93Iiwib25TaG93biIsInBvcHBlck9wdGlvbnMiLCJyb2xlIiwic2hvd09uSW5pdCIsInN0aWNreSIsInRoZW1lIiwidG91Y2giLCJ0b3VjaEhvbGQiLCJ0cmlnZ2VyIiwidXBkYXRlRHVyYXRpb24iLCJ3YWl0IiwiekluZGV4IiwiUE9QUEVSX0lOU1RBTkNFX0RFUEVOREVOQ0lFUyIsIlNlbGVjdG9ycyIsIlBPUFBFUiIsIlRPT0xUSVAiLCJDT05URU5UIiwiQkFDS0RST1AiLCJBUlJPVyIsIlJPVU5EX0FSUk9XIiwiZWxlbWVudFByb3RvIiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJhcnJheUZyb20iLCJwYXJlbnRTZWxlY3RvciIsImNsb3Nlc3RDYWxsYmFjayIsImluZGV4X2FsbF9oYXNPd25Qcm9wZXJ0eSIsImdldFZhbHVlIiwiZGVmYXVsdFZhbHVlIiwibXMiLCJ0aW1lb3V0SWQiLCJfYXJndW1lbnRzIiwiY2xlYXJUaW1lb3V0IiwiZ2V0TW9kaWZpZXIiLCJpc1Npbmd1bGFyIiwiZXZhbHVhdGVWYWx1ZSIsImFyZ3MiLCJzZXRGbGlwTW9kaWZpZXJFbmFibGVkIiwiaW5kZXhfYWxsX2RpdiIsInNldElubmVySFRNTCIsInNldENvbnRlbnQiLCJjb250ZW50RWwiLCJnZXRDaGlsZHJlbiIsInRvb2x0aXAiLCJiYWNrZHJvcCIsImFkZEluZXJ0aWEiLCJjcmVhdGVBcnJvd0VsZW1lbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVCYWNrZHJvcEVsZW1lbnQiLCJhZGRJbnRlcmFjdGl2ZSIsImFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uIiwiZWxzIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidG9nZ2xlVHJhbnNpdGlvbkVuZExpc3RlbmVyIiwibGlzdGVuZXIiLCJldmVudE5hbWUiLCJ3ZWJraXRUcmFuc2l0aW9uIiwiZ2V0UG9wcGVyUGxhY2VtZW50IiwiZnVsbFBsYWNlbWVudCIsInNldFZpc2liaWxpdHlTdGF0ZSIsInRvZ2dsZVRoZW1lIiwidGhlbWVOYW1lIiwiaGlkZUFsbCIsImNoZWNrSGlkZU9uQ2xpY2siLCJleGNsdWRlIiwiX3RpcHB5IiwiUEFTU0lWRSIsIlBBRERJTkciLCJpc1VzaW5nVG91Y2giLCJvbkRvY3VtZW50VG91Y2giLCJwZXJmb3JtYW5jZSIsIm9uRG9jdW1lbnRNb3VzZU1vdmUiLCJsYXN0TW91c2VNb3ZlVGltZSIsIm5vdyIsIm9uRG9jdW1lbnRDbGljayIsImlzQ2xpY2tUcmlnZ2VyIiwiY2xlYXJEZWxheVRpbWVvdXRzIiwib25XaW5kb3dCbHVyIiwiYmx1ciIsImluZGV4X2FsbF9rZXlzIiwiZXZhbHVhdGVQcm9wcyIsIm91dCIsImFjYyIsInZhbHVlQXNTdHJpbmciLCJnZXREYXRhQXR0cmlidXRlT3B0aW9ucyIsInZhbGlkYXRlT3B0aW9ucyIsImRlZmF1bHRzIiwiaWRDb3VudGVyIiwiY3JlYXRlVGlwcHkiLCJjb2xsZWN0aW9uUHJvcHMiLCJsYXN0VHJpZ2dlckV2ZW50IiwibGFzdE1vdXNlTW92ZUV2ZW50Iiwic2hvd1RpbWVvdXRJZCIsImhpZGVUaW1lb3V0SWQiLCJpc1NjaGVkdWxlZFRvU2hvdyIsInRyYW5zaXRpb25FbmRMaXN0ZW5lciIsImxpc3RlbmVycyIsImRlYm91bmNlZE9uTW91c2VNb3ZlIiwib25Nb3VzZU1vdmUiLCJjcmVhdGVQb3BwZXJFbGVtZW50IiwiaXNWaXNpYmxlIiwic2NoZWR1bGVTaG93IiwicG9wcGVyQ2hpbGRyZW4iLCJwb3BwZXJJbnN0YW5jZSIsImlzRW5hYmxlZCIsImlzTW91bnRlZCIsImlzU2hvd24iLCJzaG93IiwiZW5hYmxlIiwiZGlzYWJsZSIsImRlc3Ryb3kiLCJhZGRUcmlnZ2Vyc1RvUmVmZXJlbmNlIiwiY3JlYXRlUG9wcGVySW5zdGFuY2UiLCJoYXNBdHRyaWJ1dGUiLCJwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yIiwiX2xhc3RNb3VzZU1vdmVFdmVudCIsImNsaWVudFgiLCJjbGllbnRZIiwiaXNWZXJ0aWNhbFBsYWNlbWVudCIsImlzSG9yaXpvbnRhbFBsYWNlbWVudCIsImlzSG9yaXpvbnRhbCIsInJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyIiwidGFyZ2V0RWwiLCJjcmVhdGVEZWxlZ2F0ZUNoaWxkVGlwcHkiLCJoYXNGb2xsb3dDdXJzb3JCZWhhdmlvciIsInNjaGVkdWxlSGlkZSIsImNsZWFudXBPbGRNb3VzZUxpc3RlbmVycyIsIm9uVHJpZ2dlciIsImlzRXZlbnRMaXN0ZW5lclN0b3BwZWQiLCJNb3VzZUV2ZW50IiwicmVmZXJlbmNlVGhlQ3Vyc29ySXNPdmVyIiwiaXNDdXJzb3JPdmVyUG9wcGVyIiwiaXNDdXJzb3JPdmVyUmVmZXJlbmNlIiwicG9wcGVyUGxhY2VtZW50IiwiZXhjZWVkc1RvcCIsImV4Y2VlZHNCb3R0b20iLCJleGNlZWRzTGVmdCIsImV4Y2VlZHNSaWdodCIsImlzQ3Vyc29yT3V0c2lkZUludGVyYWN0aXZlQm9yZGVyIiwib25Nb3VzZUxlYXZlIiwib25CbHVyIiwicmVsYXRlZFRhcmdldCIsIm9uRGVsZWdhdGVTaG93Iiwib25EZWxlZ2F0ZUhpZGUiLCJzdXBwb3J0c1RvdWNoIiwiaXNUb3VjaEV2ZW50IiwiX2luc3RhbmNlJHBvcHBlckNoaWxkIiwiZXNtX3BvcHBlciIsIm9uVHJhbnNpdGlvbkVuZCIsImhhbmRsZXIiLCJyZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UiLCJnZXRJbm5lckVsZW1lbnRzIiwicHJldlByb3BzIiwibmV4dFByb3BzIiwiX2dldENoaWxkcmVuIiwicmVwbGFjZUNoaWxkIiwicmVtb3ZlSW50ZXJhY3RpdmUiLCJyZW1vdmVJbmVydGlhIiwidXBkYXRlUG9wcGVyRWxlbWVudCIsInZpc2liaWxpdHkiLCJzaG91bGRFbmFibGVMaXN0ZW5lcnMiLCJtYXJnaW4iLCJyZWZsb3ciLCJhZnRlclBvcHBlclBvc2l0aW9uVXBkYXRlcyIsIm1vdW50IiwidHJhbnNpdGlvbkRlbGF5IiwidXBkYXRlUG9zaXRpb24iLCJvblRyYW5zaXRpb25lZEluIiwib25UcmFuc2l0aW9uZWRPdXQiLCJkZXN0cm95VGFyZ2V0SW5zdGFuY2VzIiwiY2hpbGQiLCJnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kIiwidGlwcHkiLCJ0YXJnZXRzIiwidmlydHVhbFJlZmVyZW5jZSIsInBvbHlmaWxscyIsImlzVmlydHVhbCIsImNsYXNzTmFtZXMiLCJwb2x5ZmlsbEVsZW1lbnRQcm90b3R5cGVQcm9wZXJ0aWVzIiwiaW5zdGFuY2VzIiwiTm9kZUxpc3QiLCJnZXRBcnJheU9mRWxlbWVudHMiLCJzZXREZWZhdWx0cyIsInBhcnRpYWxEZWZhdWx0cyIsImdyb3VwIiwiX3JlZiRkZWxheSIsIl9yZWYkZHVyYXRpb24iLCJpc0FueVRpcHB5T3BlbiIsInNldElzQW55VGlwcHlPcGVuIiwidXBkYXRlSW5zdGFuY2VzIiwiX29yaWdpbmFsUHJvcHMiLCJoZWFkIiwiaW5zZXJ0QmVmb3JlIiwiaW5qZWN0Q1NTIiwiaW5kZXhfYWxsIiwiaW5pdGlhbENvbXBhcmUiLCJjb21wYXJpc29ucyIsImdyb3VwcyIsInR5cGVzTmVzdGVkIiwidmlldyIsImNvbXBvdW5kSW5kZXgiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJpbml0aWFsaXplQXV0b2NvbXBsZXRlcyIsImluaXRpYWxpemVUb29sdGlwcyIsIkF1dG9Db21wbGV0ZSIsImZlZWRiYWNrIiwiVGhpc0Ryb3Bkb3duIiwiX2RhdGEiLCJkcm9wZG93blR5cGUiLCJpc0RlZmF1bHRTZWxlY3Rpb24iLCJOYU4iLCJkYXRhc2V0IiwiU2VsZWN0aW9ucyIsImRyb3Bkb3duRGF0YSIsImRyb3Bkb3ducyIsImxhYmVsSGlnaGxpZ2h0IiwiYXNjZW5kaW5nIiwiZGVzY2VuZGluZyIsIkZpZnR5U3RhdGVWaWV3IiwiYmFyQ29udGFpbmVycyIsImxhc3RQb3NpdGlvbnMiLCJoaWdobGlnaHRlZEJhcnMiLCJleHBsYWluZXJUZXh0IiwiY2VudHJhbGl6YXRpb24iLCJkZWJ0X3Blcl9jYXBpdGEiLCJkZWJ0X3BlcmNlbnRfU1BJIiwidGVuX3llYXJfcG9wX2dyb3d0aCIsInJldmVudWVfdm9sYXRpbGl0eSIsInN0YXRlX2xvY2FsX2RpdmlzaW9uIiwiZ3JvdXBCeUZuIiwiZ3JvdXBCeSIsInNlbGVjdGlvbnMiLCJzb3J0VmFsdWVLZXkiLCJzb3J0VmFsdWVzRm4iLCJuZXN0RGF0YSIsInB1c2hCYXJzIiwicmVuZGVyU2VsZWN0aW9ucyIsImV4cGxhaW5lcldyYXBwZXIiLCJmaWVsZEV4cGxhaW5lciIsImdyb3VwRXhwbGFpbmVyIiwidXBkYXRlRXhwbGFpbmVyVGV4dCIsImNoYXJ0cyIsInJlbmRlckNoYXJ0cyIsIm5lc3RlZERhdGEiLCJkMyIsImludmVydFBvc2l0aW9ucyIsImxhc3RQb3NpdGlvbiIsImRlbHRhWSIsImZpcnN0UG9zaXRpb25zIiwidXBkYXRlQmFycyIsInVwZGF0ZUdyb3VwcyIsInNvcnRCYXJzIiwiYWRqdXN0RXhwbGFpbmVyVGV4dEhlaWdodCIsImluaXRIaWdobGlnaHRCYXJzIiwiaW5pdENsZWFyQWxsSGlnaGxpZ2h0cyIsImNhbGxlZEZyb21QcmVyZW5kZXIiLCJjb21wdXRlZFN0eWxlcyIsInRvZ2dsZSIsInJlY29yZEZpcnN0UG9zaXRpb25zIiwiZ2V0UnVudGltZURhdGEiLCJhcHBDb250YWluZXIiLCJQYXBhIiwiZGF0YUhhc2giLCJJU19QUkVSRU5ERVJJTkciLCJyZXNwb25zZSIsImRhdGFBcnJheSIsIkNvbXBhcmlzb25WaWV3IiwiQXBwIiwic2VjdGlvbnMiLCJmb290ZXIiLCJhdHRhY2hTZWN0aW9uT3BlbkNsb3NlIiwidG9nZ2xlU2VjdGlvbiIsImhlYWRpbmciXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdB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QUFFMk4sU0FDRmt3QixFQUFjbnNDLEtBQUtvRCxZQzdJckIsV0FDbUIsQ0FDcEN5d0IsYUFBYSxJQUVpQ3ZzQixPQUFPcWtDLGlCQUNyREksR0FBSTduQyxZQUVMNm5DLEdBQUludUIiLCJmaWxlIjoianMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzgpO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImRyb3Bkb3duV3JhcHBlclwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnMtLWRyb3Bkb3duV3JhcHBlclwiLFwiZHJvcGRvd25PdXRlclwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnMtLWRyb3Bkb3duT3V0ZXJcIixcImRyb3Bkb3duSW5uZXJcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS1zZWxlY3Rpb25zLS1kcm9wZG93bklubmVyXCIsXCJsYWJlbFwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnMtLWxhYmVsXCIsXCJzb3J0QWN0aXZlXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtc2VsZWN0aW9ucy0tc29ydEFjdGl2ZVwiLFwibGFiZWxTb3J0XCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtc2VsZWN0aW9ucy0tbGFiZWxTb3J0XCIsXCJzb3J0QnlcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS1zZWxlY3Rpb25zLS1zb3J0QnlcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImNvbXBhcmVDb2xvcjFcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWNvbXBhcmVDb2xvcjFcIixcImNvbXBhcmVDb2xvcjJcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWNvbXBhcmVDb2xvcjJcIixcImNoYXJ0Q29udGFpbmVyXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1jaGFydENvbnRhaW5lclwiLFwiY2hhcnRMYWJlbFwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tY2hhcnRMYWJlbFwiLFwiY2hhcnRMYWJlbFRleHRcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWNoYXJ0TGFiZWxUZXh0XCIsXCJjaGFydExhYmVsMVwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tY2hhcnRMYWJlbDFcIixcImNoYXJ0TGFiZWwyXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1jaGFydExhYmVsMlwiLFwiYmFyQ29udGFpbmVyXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1iYXJDb250YWluZXJcIixcImJhckNvbnRhaW5lcjFcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWJhckNvbnRhaW5lcjFcIixcImJhckNvbnRhaW5lcjJcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWJhckNvbnRhaW5lcjJcIixcImRhdGFMYWJlbFwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tZGF0YUxhYmVsXCJ9OyIsImltcG9ydCB7IERPTUhlbHBlcnMgYXMgJGQgfSBmcm9tICdAVXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIG9wdGlvbnMpe1xuICAgICAgICBpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycgKXtcbiAgICAgICAgICAgIHRocm93IGBGaXJzdCBwYXJhbWV0ZXIgbXVzdCBiZSBhIHN0cmluZyByZWZlcmVuY2luZyB0aGUgQ1NTLWxpa2Ugc2VsZWN0b3Igb2YgdGhlIGVsZW1lbnQgdG8gYmUgY3JlYXRlZCBcbiAgICAgICAgICAgICAgICAgICAgKFwiZGl2I2RpdklELmRpdkNsYXNzXCIpLmA7XG4gICAgICAgIH0gXG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgICAgIHRoaXMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7IC8vIHBhcmVudCBpcyBhIEpTIG9iamVjdFxuICAgICAgICB0aGlzLnJlbmRlclRvU2VsZWN0b3IgPSBvcHRpb25zLnJlbmRlclRvU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gJGQucSh0aGlzLnJlbmRlclRvU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gb3B0aW9ucy5jaGlsZHJlbjtcbiAgICAgICAgdGhpcy5yZXJlbmRlciA9ICggb3B0aW9ucy5yZXJlbmRlck9uRGF0YU1pc21hdGNoICYmIG9wdGlvbnMubW9kZWwuaXNNaXNtYXRjaGVkICk7XG4gICAgICAgIHRoaXMuZGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZWwgPSB0aGlzLnByZXJlbmRlcihhcmd1bWVudHMpOyAvLyB3aWxsIGNhbGwgdGhlIGluc3RhbmNlJ3MgcHJlcmVuZGVyXG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgIH1cbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgXG4gICAgICAgIHZhciBleGlzdGluZyA9ICRkLnEodGhpcy5zZWxlY3Rvcik7XG4gICAgICAgIGlmICggZXhpc3RpbmcgJiYgIXRoaXMucmVyZW5kZXIgKSB7XG4gICAgICAgICAgICAgICAgLy8gaWUgaXMgZXhpc3RpbmcgYW5kIG5vIG5lZWQgdG8gcmVyZW5kZXJcbiAgICAgICAgICAgIHRoaXMucHJlcmVuZGVyZWQgPSB0cnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoIGV4aXN0aW5nICkgeyAvLyBpZSBpcyBleGlzdGluZyBidXQgdGhlcmUgaXMgYSBuZWVkIHRvIHJlcmVuZGVyXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4aXN0aW5nLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbCA9ICRkLmModGhpcy5zZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICBcbiAgICB9XG59IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImdyb3VwSGVhZGVyXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tZ3JvdXBIZWFkZXJcIixcInR5cGVDb250YWluZXJcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS10eXBlQ29udGFpbmVyXCIsXCJjcmVkaXQtcmF0aW5nXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tY3JlZGl0LXJhdGluZ1wiLFwidHlwZURpdlwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLXR5cGVEaXZcIixcInR5cGVIZWFkZXJcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS10eXBlSGVhZGVyXCIsXCJkZWJ0X2xpbWl0X3R5cGVcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS1kZWJ0X2xpbWl0X3R5cGVcIixcImNyZWRpdDIwMTVcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS1jcmVkaXQyMDE1XCIsXCJjcmVkaXQyMDE4XCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tY3JlZGl0MjAxOFwiLFwiYXV0b0NvbXBsZXRlMFwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWF1dG9Db21wbGV0ZTBcIixcImF1dG9Db21wbGV0ZV93cmFwcGVyLTBcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS1hdXRvQ29tcGxldGVfd3JhcHBlci0wXCIsXCJhdXRvQ29tcGxldGUxXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tYXV0b0NvbXBsZXRlMVwiLFwiYXV0b0NvbXBsZXRlX3dyYXBwZXItMVwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWF1dG9Db21wbGV0ZV93cmFwcGVyLTFcIixcIndpdGhUb29sdGlwXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0td2l0aFRvb2x0aXBcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImdyb3VwSGVhZGVyXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtLWdyb3VwSGVhZGVyXCIsXCJiYXJMYWJlbFwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1iYXJMYWJlbFwiLFwiZ3JvdXBEaXZcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS0tZ3JvdXBEaXZcIixcImJhckNvbnRhaW5lclwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1iYXJDb250YWluZXJcIixcImlzSGlnaGxpZ2h0ZWRcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS0taXNIaWdobGlnaHRlZFwifTsiLCJjb25zdCBQdWJTdWIgPSByZXF1aXJlKCdwdWJzdWItanMnKTtcbmNvbnN0IHN0YXRlID0ge307XG5cbi8vYXJyYXkuY29tcGFyZShvdGhlckFycmF5KSAvL0hUIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYyMjkxOTcvaG93LXRvLWtub3ctaWYtdHdvLWFycmF5cy1oYXZlLXRoZS1zYW1lLXZhbHVlc1xuQXJyYXkucHJvdG90eXBlLmNvbXBhcmUgPSBBcnJheS5wcm90b3R5cGUuY29tcGFyZSB8fCBmdW5jdGlvbih0ZXN0QXJyKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoICE9IHRlc3RBcnIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwICYmIHRlc3RBcnIubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICBjb25zb2xlLmxvZyhcImluIGNvbXBhcmVcIik7XG4gICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXN0QXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzW2ldICE9PSB0ZXN0QXJyW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfbG9nU3RhdGUoKXtcbiAgICBjb25zb2xlLmxvZyhzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIF9nZXRTdGF0ZShwcm9wZXJ0eSl7XG4gICAgcmV0dXJuICggc3RhdGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQgKSA/IHN0YXRlW3Byb3BlcnR5XVswXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX2dldFByZXZpb3VzU3RhdGUocHJvcGVydHkpe1xuICAgIHJldHVybiAoIHN0YXRlW3Byb3BlcnR5XSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlW3Byb3BlcnR5XVsxXSAhPT0gdW5kZWZpbmVkICkgPyBzdGF0ZVtwcm9wZXJ0eV1bMV0gOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF9zZXRTdGF0ZShrZXksdmFsdWUpIHsgXG5cbiAgICBpZiAoIHN0YXRlW2tleV0gPT09IHVuZGVmaW5lZCkgeyAvLyBpZSBmaXJzdCB0aW1lIHN0YXRlIHByb3BlcnR5IGlzIGJlaW5nIGRlZmluZWRcbiAgICAgICAgc3RhdGVba2V5XSA9IFt2YWx1ZV07XG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKGtleSwgdmFsdWUpO1xuICAgICAgICBfbG9nU3RhdGUoKTtcbiAgICB9IGVsc2UgeyAvLyBub3QgdGhlIGZpcnN0IHRpbWUgdGhlIHByb3BlcnR5IGlzIGJlaW5nIGRlZmluZWRcbiAgICAvL0lmIGl0J3MgYSBzdHJpbmcgb3IgYXJyYXkgYW5kIHZhbHVlcyBhcmUgdGhlIHNhbWUsIHN0YXRlQ2hhbmdlZD1GYWxzZStcbiAgICAgICAgdmFyIHN0YXRlQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHN0YXRlQ2hhbmdlZCA9IChzdGF0ZVtrZXldWzBdICE9PSB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgQXJyYXkuaXNBcnJheShzdGF0ZVtrZXldWzBdKSkge1xuICAgICAgICAgICAgc3RhdGVDaGFuZ2VkID0gIXZhbHVlLmNvbXBhcmUoc3RhdGVba2V5XVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZUNoYW5nZWQgPSB0cnVlOyAvL2Fzc3VtZSBpdCdzIGNoYW5nZWQgaWYgd2UgY2FuJ3QgdmVyaWZ5XG4gICAgICAgIH0gICAgICAgICAgICAgIFxuICAgICAgICAvL09ubHkgcHVibGlzaCBpZiB3ZSd2ZSBjaGFuZ2VkIHN0YXRlXG4gICAgICAgIGlmICggc3RhdGVDaGFuZ2VkICkgeyBcbiAgICAgICAgICAgIHN0YXRlW2tleV0udW5zaGlmdCh2YWx1ZSk7XG4gICAgICAgICAgICBQdWJTdWIucHVibGlzaChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIF9sb2dTdGF0ZSgpO1xuICAgICAgICAgICAgaWYgKCBzdGF0ZVtrZXldLmxlbmd0aCA+IDIgKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVba2V5XS5sZW5ndGggPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnRzLnN0YXRlTW9kdWxlID0ge1xuICAgIGxvZ1N0YXRlOiBfbG9nU3RhdGUsXG4gICAgZ2V0U3RhdGU6IF9nZXRTdGF0ZSxcbiAgICBnZXRQcmV2aW91c1N0YXRlOiBfZ2V0UHJldmlvdXNTdGF0ZSxcbiAgICBzZXRTdGF0ZTogX3NldFN0YXRlXG59OyIsIi8qIGdsb2JhbCBkYXRhTGF5ZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiBHVE1QdXNoKGV2ZW50TGFiZWwpIHtcbiAgICBpZiAoZGF0YUxheWVyKSB7XG4gICAgICAgIGRhdGFMYXllci5wdXNoKHsgJ2V2ZW50JzogJ0ludGVyYWN0aXZlIENsaWNrJywgJ2V2ZW50RGF0YSc6IGV2ZW50TGFiZWwgfSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2hXaW5kb3dSZXNpemUoUykgeyAvLyBuZWVkIHRvIHBhc3MgaW4gdGhlIFN0YXRlTW9kdWxlXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVGhyb3R0bGVyLCBmYWxzZSk7XG5cbiAgICB2YXIgcmVzaXplVGltZW91dDtcblxuICAgIGZ1bmN0aW9uIHJlc2l6ZVRocm90dGxlcigpIHsgLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy9yZXNpemUjc2V0VGltZW91dFxuICAgICAgICAvLyBpZ25vcmUgcmVzaXplIGV2ZW50cyBhcyBsb25nIGFzIGFuIGFjdHVhbFJlc2l6ZUhhbmRsZXIgZXhlY3V0aW9uIGlzIGluIHRoZSBxdWV1ZVxuICAgICAgICBpZiAoIXJlc2l6ZVRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFjdHVhbFJlc2l6ZUhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgICByZXNpemVUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIH0sIDM1MCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY3R1YWxSZXNpemVIYW5kbGVyKCkge1xuICAgICAgICBcbiAgICAgICAgUy5zZXRTdGF0ZSgncmVzaXplJywgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRmFkZUluVGV4dCA9IChmdW5jdGlvbigpe1xuICAgIEhUTUxFbGVtZW50LnByb3RvdHlwZS5mYWRlT3V0Q29udGVudCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ25vLW9wYWNpdHknKTtcbiAgICB9O1xuICAgIEhUTUxFbGVtZW50LnByb3RvdHlwZS5mYWRlSW5Db250ZW50ID0gZnVuY3Rpb24oY29udGVudCwgcyl7XG4gICAgICAgIHZhciBkdXJhdGlvblMgPSBzIHx8IDA7XG4gICAgICAgIGlmICggcyApe1xuICAgICAgICAgICAgdGhpcy5zdHlsZS50cmFuc2l0aW9uID0gJ29wYWNpdHkgJyArIHMgKyAncyBlYXNlLWluLW91dCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb25TdHIgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2l0aW9uLWR1cmF0aW9uJykgfHwgZHVyYXRpb25TLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gcGFyc2VGbG9hdChkdXJhdGlvblN0cikgKiAxMDAwO1xuICAgICAgICAgICAgdGhpcy5mYWRlT3V0Q29udGVudCgpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBjb250ZW50O1xuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnbm8tb3BhY2l0eScpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICAgIH0pO1xuICAgIH07XG59KSgpO1xuZXhwb3J0IGNvbnN0IFN0cmluZ0hlbHBlcnMgPSAoZnVuY3Rpb24oKXtcbiAgICBTdHJpbmcucHJvdG90eXBlLmNsZWFuU3RyaW5nID0gZnVuY3Rpb24oKSB7IC8vIGxvd2VyY2FzZSBhbmQgcmVtb3ZlIHB1bmN0dWF0aW9uIGFuZCByZXBsYWNlIHNwYWNlcyB3aXRoIGh5cGhlbnM7IGRlbGV0ZSBwdW5jdHVhdGlvblxuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9bIC9dL2csJy0nKS5yZXBsYWNlKC9bJ1wi4oCd4oCZ4oCc4oCYLC4hPzsoKSY6XS9nLCcnKS50b0xvd2VyQ2FzZSgpO1xuICAgIH07XG5cbiAgICBTdHJpbmcucHJvdG90eXBlLnJlbW92ZVVuZGVyc2NvcmVzID0gZnVuY3Rpb24oKSB7IFxuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9fL2csJyAnKTtcbiAgICB9O1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS51bmRvQ2FtZWxDYXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoLyhbQS1aXSkvZywgJyAkMScpLnRvTG93ZXJDYXNlKCk7XG4gICAgfTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUudHJ1bmMgPSBTdHJpbmcucHJvdG90eXBlLnRydW5jIHx8IC8vIGh0IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMTk5NDIwXG4gICAgICAgICBmdW5jdGlvbiggbiwgdXNlV29yZEJvdW5kYXJ5ICl7XG4gICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoIDw9IG4pIHsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgICAgICB2YXIgc3ViU3RyaW5nID0gdGhpcy5zdWJzdHIoMCwgbi0xKTtcbiAgICAgICAgICAgICByZXR1cm4gKHVzZVdvcmRCb3VuZGFyeSBcbiAgICAgICAgICAgICAgICA/IHN1YlN0cmluZy5zdWJzdHIoMCwgc3ViU3RyaW5nLmxhc3RJbmRleE9mKCcgJykpIFxuICAgICAgICAgICAgICAgIDogc3ViU3RyaW5nKSArIFwiLi4uXCI7XG4gICAgICAgICAgfTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUuaGFzaENvZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBoYXNoID0gMCwgaSwgY2hyO1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gaGFzaDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNociAgID0gdGhpcy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hyO1xuICAgICAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfTtcbn0pKClcblxuZXhwb3J0IGNvbnN0IERPTUhlbHBlcnMgPSB7XG4gYzogIChzKSA9PiB7XG4gICAgIFxuICAgICBpZiAoIHMuaW5kZXhPZignLicpICE9PSAtMSB8fCBzLmluZGV4T2YoJyMnKSAhPT0gLTEgKXtcbiAgICAgICAgIGxldCBjbGFzc1N0cmluZ3MgPSBzLm1hdGNoKC9cXC4oW14jLl0qKS9nKSB8fCBbXTtcbiAgICAgICAgIGxldCBpZFN0cmluZyA9IHMubWF0Y2goLyMoW14uXSopLyk7XG4gICAgICAgICBsZXQgZWxTdHJpbmcgPSBzLm1hdGNoKC9eKFteLiNdKykvKTtcbiAgICAgICAgIFxuICAgICAgICAgXG4gICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsU3RyaW5nWzBdKTtcbiAgICAgICAgIGNsYXNzU3RyaW5ncy5mb3JFYWNoKGtsYXNzID0+IHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoa2xhc3MucmVwbGFjZSgnLicsJycpKTtcbiAgICAgICAgIH0pO1xuICAgICAgICAgaWYgKCBpZFN0cmluZyAhPT0gbnVsbCApe1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkU3RyaW5nWzFdKTtcbiAgICAgICAgIH1cbiAgICAgICAgIHJldHVybiBlbDtcbiAgICAgfVxuICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChzKTtcbiB9LFxuIHE6ICAocykgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzKSxcbiBxYTogKHMpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocylcbn1cbiIsInZhciBoYXNoID0gcmVxdWlyZShcInN0cmluZy1oYXNoXCIpO1xudmFyIFB1YlN1YiA9IHJlcXVpcmUoXCJwdWJzdWItanNcIik7XG52YXIgc3Vic2NyaXB0aW9ucyA9IHt9O1xuZnVuY3Rpb24gbG9nU3VicygpIHtcbiAgICBjb25zb2xlLmxvZyhzdWJzY3JpcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVG9rZW4odG9waWMsIGZuUmVmKXtcbiAgICB2YXIgZnVuY3Rpb25IYXNoID0gaGFzaChmblJlZi50b1N0cmluZygpKTtcbiAgICB2YXIgc3RyID0gdG9waWMgKyBmblJlZjtcbiAgICB2YXIgdG9rZW4gPSAnc3ViJyArIGhhc2goc3RyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b2tlbjogdG9rZW4sXG4gICAgICAgIGZuOiBmdW5jdGlvbkhhc2hcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBzZXRTdWJzKHN1YnNBcnJheSkgeyAvLyBzdWJzQXJyYXkgaXMgYXJyYXkgb2YgdG9waWMvZnVuY3Rpb24gcGFpciBhcnJheXNcbiAgICBzdWJzQXJyYXkuZm9yRWFjaChmdW5jdGlvbihwYWlyKXtcbiAgICAgICAgdmFyIHRvcGljID0gcGFpclswXSxcbiAgICAgICAgICAgIGZuUmVmID0gcGFpclsxXSxcbiAgICAgICAgICAgIHRva2VuT2JqID0gY3JlYXRlVG9rZW4odG9waWMsZm5SZWYpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXSA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl1bdG9waWNdID0gUHViU3ViLnN1YnNjcmliZSh0b3BpYyxmblJlZik7ICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93ICdTdWJzY3JpcHRpb24gdG9rZW4gaXMgYWxyZWFkeSBpbiB1c2UuJztcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjYW5jZWxTdWIodG9waWMsZm5SZWYpIHsgLy8gZm9yIGNhbmNlbGluZyBzaW5nbGUgc3Vic2NyaXB0aW9uXG4gICAgdmFyIHRva2VuT2JqID0gY3JlYXRlVG9rZW4odG9waWMsZm5SZWYpO1xuICAgIGlmICggc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl0gIT09IHVuZGVmaW5lZCAmJiBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXVt0b3BpY10gIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgUHViU3ViLnVuc3Vic2NyaWJlKCBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXVt0b3BpY10gKTtcbiAgICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXTtcbiAgICAgICAgaWYgKCBPYmplY3Qua2V5cyhzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSkubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgJ1N1YnNjcmlwdGlvbiBkb2VzIG5vdCBleGlzdC4nO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbG9nU3Viczpsb2dTdWJzLFxuICAgIHNldFN1YnM6c2V0U3VicyxcbiAgICBjYW5jZWxTdWI6Y2FuY2VsU3ViXG59OyIsIm1vZHVsZS5leHBvcnRzID0gXCI8cD48c3Ryb25nPkNyZWRpdCByYXRpbmc6PC9zdHJvbmc+IFN0YW5kYXJkICZhbXA7IFBvb3LigJlzIGdlbmVyYWwgb2JsaWdhdGlvbiBjcmVkaXQgcmF0aW5nLjwvcD5cXG5cIjsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiYmFyXCI6XCJzcmMtY29tcG9uZW50cy1iYXItLWJhclwiLFwiYmFyQ29sb3IxXCI6XCJzcmMtY29tcG9uZW50cy1iYXItLWJhckNvbG9yMVwiLFwiYmFyQ29sb3IyXCI6XCJzcmMtY29tcG9uZW50cy1iYXItLWJhckNvbG9yMlwifTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMCwyMDExLDIwMTIsMjAxMywyMDE0IE1vcmdhbiBSb2RlcmljayBodHRwOi8vcm9kZXJpY2suZGtcbiAqIExpY2Vuc2U6IE1JVCAtIGh0dHA6Ly9tcmducmRyY2subWl0LWxpY2Vuc2Uub3JnXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL21yb2Rlcmljay9QdWJTdWJKU1xuICovXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIFB1YlN1YiA9IHt9O1xuICAgIHJvb3QuUHViU3ViID0gUHViU3ViO1xuXG4gICAgdmFyIGRlZmluZSA9IHJvb3QuZGVmaW5lO1xuXG4gICAgZmFjdG9yeShQdWJTdWIpO1xuXG4gICAgLy8gQU1EIHN1cHBvcnRcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKXtcbiAgICAgICAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gUHViU3ViOyB9KTtcblxuICAgICAgICAvLyBDb21tb25KUyBhbmQgTm9kZS5qcyBtb2R1bGUgc3VwcG9ydFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKXtcbiAgICAgICAgaWYgKG1vZHVsZSAhPT0gdW5kZWZpbmVkICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBQdWJTdWI7IC8vIE5vZGUuanMgc3BlY2lmaWMgYG1vZHVsZS5leHBvcnRzYFxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydHMuUHViU3ViID0gUHViU3ViOyAvLyBDb21tb25KUyBtb2R1bGUgMS4xLjEgc3BlY1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBQdWJTdWI7IC8vIENvbW1vbkpTXG4gICAgfVxuXG59KCggdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93ICkgfHwgdGhpcywgZnVuY3Rpb24gKFB1YlN1Yil7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIG1lc3NhZ2VzID0ge30sXG4gICAgICAgIGxhc3RVaWQgPSAtMTtcblxuICAgIGZ1bmN0aW9uIGhhc0tleXMob2JqKXtcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICBmb3IgKGtleSBpbiBvYmope1xuICAgICAgICAgICAgaWYgKCBvYmouaGFzT3duUHJvcGVydHkoa2V5KSApe1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB0aHJvd3MgdGhlIHBhc3NlZCBleGNlcHRpb24sIGZvciB1c2UgYXMgYXJndW1lbnQgZm9yIHNldFRpbWVvdXRcbiAgICAgKiBAYWxpYXMgdGhyb3dFeGNlcHRpb25cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyBPYmplY3QgfSBleCBBbiBFcnJvciBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvd0V4Y2VwdGlvbiggZXggKXtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlVGhyb3dFeGNlcHRpb24oKXtcbiAgICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxTdWJzY3JpYmVyV2l0aERlbGF5ZWRFeGNlcHRpb25zKCBzdWJzY3JpYmVyLCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyKCBtZXNzYWdlLCBkYXRhICk7XG4gICAgICAgIH0gY2F0Y2goIGV4ICl7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCB0aHJvd0V4Y2VwdGlvbiggZXggKSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsU3Vic2NyaWJlcldpdGhJbW1lZGlhdGVFeGNlcHRpb25zKCBzdWJzY3JpYmVyLCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHN1YnNjcmliZXIoIG1lc3NhZ2UsIGRhdGEgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxpdmVyTWVzc2FnZSggb3JpZ2luYWxNZXNzYWdlLCBtYXRjaGVkTWVzc2FnZSwgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApe1xuICAgICAgICB2YXIgc3Vic2NyaWJlcnMgPSBtZXNzYWdlc1ttYXRjaGVkTWVzc2FnZV0sXG4gICAgICAgICAgICBjYWxsU3Vic2NyaWJlciA9IGltbWVkaWF0ZUV4Y2VwdGlvbnMgPyBjYWxsU3Vic2NyaWJlcldpdGhJbW1lZGlhdGVFeGNlcHRpb25zIDogY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMsXG4gICAgICAgICAgICBzO1xuXG4gICAgICAgIGlmICggIW1lc3NhZ2VzLmhhc093blByb3BlcnR5KCBtYXRjaGVkTWVzc2FnZSApICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChzIGluIHN1YnNjcmliZXJzKXtcbiAgICAgICAgICAgIGlmICggc3Vic2NyaWJlcnMuaGFzT3duUHJvcGVydHkocykpe1xuICAgICAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyKCBzdWJzY3JpYmVyc1tzXSwgb3JpZ2luYWxNZXNzYWdlLCBkYXRhICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZWxpdmVyTmFtZXNwYWNlZCgpe1xuICAgICAgICAgICAgdmFyIHRvcGljID0gU3RyaW5nKCBtZXNzYWdlICksXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG5cbiAgICAgICAgICAgIC8vIGRlbGl2ZXIgdGhlIG1lc3NhZ2UgYXMgaXQgaXMgbm93XG4gICAgICAgICAgICBkZWxpdmVyTWVzc2FnZShtZXNzYWdlLCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gdHJpbSB0aGUgaGllcmFyY2h5IGFuZCBkZWxpdmVyIG1lc3NhZ2UgdG8gZWFjaCBsZXZlbFxuICAgICAgICAgICAgd2hpbGUoIHBvc2l0aW9uICE9PSAtMSApe1xuICAgICAgICAgICAgICAgIHRvcGljID0gdG9waWMuc3Vic3RyKCAwLCBwb3NpdGlvbiApO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgICAgICAgICAgICBkZWxpdmVyTWVzc2FnZSggbWVzc2FnZSwgdG9waWMsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXNzYWdlSGFzU3Vic2NyaWJlcnMoIG1lc3NhZ2UgKXtcbiAgICAgICAgdmFyIHRvcGljID0gU3RyaW5nKCBtZXNzYWdlICksXG4gICAgICAgICAgICBmb3VuZCA9IEJvb2xlYW4obWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIHRvcGljICkgJiYgaGFzS2V5cyhtZXNzYWdlc1t0b3BpY10pKSxcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoICcuJyApO1xuXG4gICAgICAgIHdoaWxlICggIWZvdW5kICYmIHBvc2l0aW9uICE9PSAtMSApe1xuICAgICAgICAgICAgdG9waWMgPSB0b3BpYy5zdWJzdHIoIDAsIHBvc2l0aW9uICk7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcbiAgICAgICAgICAgIGZvdW5kID0gQm9vbGVhbihtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggdG9waWMgKSAmJiBoYXNLZXlzKG1lc3NhZ2VzW3RvcGljXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIHN5bmMsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgbWVzc2FnZSA9ICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N5bWJvbCcpID8gbWVzc2FnZS50b1N0cmluZygpIDogbWVzc2FnZTtcblxuICAgICAgICB2YXIgZGVsaXZlciA9IGNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKSxcbiAgICAgICAgICAgIGhhc1N1YnNjcmliZXJzID0gbWVzc2FnZUhhc1N1YnNjcmliZXJzKCBtZXNzYWdlICk7XG5cbiAgICAgICAgaWYgKCAhaGFzU3Vic2NyaWJlcnMgKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggc3luYyA9PT0gdHJ1ZSApe1xuICAgICAgICAgICAgZGVsaXZlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dCggZGVsaXZlciwgMCApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2hlcyB0aGUgbWVzc2FnZSwgcGFzc2luZyB0aGUgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHB1Ymxpc2hcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHB1Ymxpc2hcbiAgICAgKiBAcGFyYW0ge30gZGF0YSBUaGUgZGF0YSB0byBwYXNzIHRvIHN1YnNjcmliZXJzXG4gICAgICogQHJldHVybiB7IEJvb2xlYW4gfVxuICAgICAqL1xuICAgIFB1YlN1Yi5wdWJsaXNoID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIGZhbHNlLCBQdWJTdWIuaW1tZWRpYXRlRXhjZXB0aW9ucyApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoZXMgdGhlIHRoZSBtZXNzYWdlIHN5bmNocm9ub3VzbHksIHBhc3NpbmcgdGhlIGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBwdWJsaXNoU3luY1xuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gcHVibGlzaFxuICAgICAqIEBwYXJhbSB7fSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgdG8gc3Vic2NyaWJlcnNcbiAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9XG4gICAgICovXG4gICAgUHViU3ViLnB1Ymxpc2hTeW5jID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIHRydWUsIFB1YlN1Yi5pbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2UuIEV2ZXJ5IHJldHVybmVkIHRva2VuIGlzIHVuaXF1ZSBhbmQgc2hvdWxkIGJlIHN0b3JlZCBpZiB5b3UgbmVlZCB0byB1bnN1YnNjcmliZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHN1YnNjcmliZSB0b1xuICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgbmV3IG1lc3NhZ2UgaXMgcHVibGlzaGVkXG4gICAgICogQHJldHVybiB7IFN0cmluZyB9XG4gICAgICovXG4gICAgUHViU3ViLnN1YnNjcmliZSA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBmdW5jICl7XG4gICAgICAgIGlmICggdHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVzc2FnZSA9ICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N5bWJvbCcpID8gbWVzc2FnZS50b1N0cmluZygpIDogbWVzc2FnZTtcblxuICAgICAgICAvLyBtZXNzYWdlIGlzIG5vdCByZWdpc3RlcmVkIHlldFxuICAgICAgICBpZiAoICFtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggbWVzc2FnZSApICl7XG4gICAgICAgICAgICBtZXNzYWdlc1ttZXNzYWdlXSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZm9yY2luZyB0b2tlbiBhcyBTdHJpbmcsIHRvIGFsbG93IGZvciBmdXR1cmUgZXhwYW5zaW9ucyB3aXRob3V0IGJyZWFraW5nIHVzYWdlXG4gICAgICAgIC8vIGFuZCBhbGxvdyBmb3IgZWFzeSB1c2UgYXMga2V5IG5hbWVzIGZvciB0aGUgJ21lc3NhZ2VzJyBvYmplY3RcbiAgICAgICAgdmFyIHRva2VuID0gJ3VpZF8nICsgU3RyaW5nKCsrbGFzdFVpZCk7XG4gICAgICAgIG1lc3NhZ2VzW21lc3NhZ2VdW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIFxuICAgICAgICAvLyByZXR1cm4gdG9rZW4gZm9yIHVuc3Vic2NyaWJpbmdcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVzIHRoZSBwYXNzZWQgZnVuY3Rpb24gdG8gdGhlIHBhc3NlZCBtZXNzYWdlIG9uY2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAYWxpYXMgc3Vic2NyaWJlT25jZVxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gc3Vic2NyaWJlIHRvXG4gICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gYSBuZXcgbWVzc2FnZSBpcyBwdWJsaXNoZWRcbiAgICAgKiBAcmV0dXJuIHsgUHViU3ViIH1cbiAgICAgKi9cbiAgICBQdWJTdWIuc3Vic2NyaWJlT25jZSA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBmdW5jICl7XG4gICAgICAgIHZhciB0b2tlbiA9IFB1YlN1Yi5zdWJzY3JpYmUoIG1lc3NhZ2UsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyBiZWZvcmUgZnVuYyBhcHBseSwgdW5zdWJzY3JpYmUgbWVzc2FnZVxuICAgICAgICAgICAgUHViU3ViLnVuc3Vic2NyaWJlKCB0b2tlbiApO1xuICAgICAgICAgICAgZnVuYy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUHViU3ViO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHN1YnNjcmlwdGlvbnNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIGNsZWFyQWxsU3Vic2NyaXB0aW9uc1xuICAgICAqL1xuICAgIFB1YlN1Yi5jbGVhckFsbFN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiBjbGVhckFsbFN1YnNjcmlwdGlvbnMoKXtcbiAgICAgICAgbWVzc2FnZXMgPSB7fTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgc3Vic2NyaXB0aW9ucyBieSB0aGUgdG9waWNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIGNsZWFyQWxsU3Vic2NyaXB0aW9uc1xuICAgICAqL1xuICAgIFB1YlN1Yi5jbGVhclN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiBjbGVhclN1YnNjcmlwdGlvbnModG9waWMpe1xuICAgICAgICB2YXIgbTtcbiAgICAgICAgZm9yIChtIGluIG1lc3NhZ2VzKXtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShtKSAmJiBtLmluZGV4T2YodG9waWMpID09PSAwKXtcbiAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZXNbbV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBzdWJzY3JpcHRpb25zXG4gICAgICpcbiAgICAgKiAtIFdoZW4gcGFzc2VkIGEgdG9rZW4sIHJlbW92ZXMgYSBzcGVjaWZpYyBzdWJzY3JpcHRpb24uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIGZ1bmN0aW9uLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IGZ1bmN0aW9uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIHRvcGljLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IHRvcGljIChoaWVyYXJjaHkpXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIHwgRnVuY3Rpb24gfSB2YWx1ZSBBIHRva2VuLCBmdW5jdGlvbiBvciB0b3BpYyB0byB1bnN1YnNjcmliZSBmcm9tXG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyB3aXRoIGEgdG9rZW5cbiAgICAgKiB2YXIgdG9rZW4gPSBQdWJTdWIuc3Vic2NyaWJlKCdteXRvcGljJywgbXlGdW5jKTtcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUodG9rZW4pO1xuICAgICAqIEBleGFtcGxlIC8vIFVuc3Vic2NyaWJpbmcgd2l0aCBhIGZ1bmN0aW9uXG4gICAgICogUHViU3ViLnVuc3Vic2NyaWJlKG15RnVuYyk7XG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyBmcm9tIGEgdG9waWNcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUoJ215dG9waWMnKTtcbiAgICAgKi9cbiAgICBQdWJTdWIudW5zdWJzY3JpYmUgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIHZhciBkZXNjZW5kYW50VG9waWNFeGlzdHMgPSBmdW5jdGlvbih0b3BpYykge1xuICAgICAgICAgICAgICAgIHZhciBtO1xuICAgICAgICAgICAgICAgIGZvciAoIG0gaW4gbWVzc2FnZXMgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShtKSAmJiBtLmluZGV4T2YodG9waWMpID09PSAwICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhIGRlc2NlbmRhbnQgb2YgdGhlIHRvcGljIGV4aXN0czpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzVG9waWMgICAgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICggbWVzc2FnZXMuaGFzT3duUHJvcGVydHkodmFsdWUpIHx8IGRlc2NlbmRhbnRUb3BpY0V4aXN0cyh2YWx1ZSkgKSxcbiAgICAgICAgICAgIGlzVG9rZW4gICAgPSAhaXNUb3BpYyAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnLFxuICAgICAgICAgICAgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlLFxuICAgICAgICAgICAgbSwgbWVzc2FnZSwgdDtcblxuICAgICAgICBpZiAoaXNUb3BpYyl7XG4gICAgICAgICAgICBQdWJTdWIuY2xlYXJTdWJzY3JpcHRpb25zKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoIG0gaW4gbWVzc2FnZXMgKXtcbiAgICAgICAgICAgIGlmICggbWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIG0gKSApe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc1ttXTtcblxuICAgICAgICAgICAgICAgIGlmICggaXNUb2tlbiAmJiBtZXNzYWdlW3ZhbHVlXSApe1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZVt2YWx1ZV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvLyB0b2tlbnMgYXJlIHVuaXF1ZSwgc28gd2UgY2FuIGp1c3Qgc3RvcCBoZXJlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHQgaW4gbWVzc2FnZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaGFzT3duUHJvcGVydHkodCkgJiYgbWVzc2FnZVt0XSA9PT0gdmFsdWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlW3RdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59KSk7XG4iLCIvKiBAbGljZW5zZVxuUGFwYSBQYXJzZVxudjQuNi4zXG5odHRwczovL2dpdGh1Yi5jb20vbWhvbHQvUGFwYVBhcnNlXG5MaWNlbnNlOiBNSVRcbiovXG5BcnJheS5pc0FycmF5fHwoQXJyYXkuaXNBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9KSxmdW5jdGlvbihlLHQpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9dCgpOmUuUGFwYT10KCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgcyxlLGY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp2b2lkIDAhPT1mP2Y6e30sbj0hZi5kb2N1bWVudCYmISFmLnBvc3RNZXNzYWdlLG89biYmLyhcXD98JilwYXBhd29ya2VyKD18JnwkKS8udGVzdChmLmxvY2F0aW9uLnNlYXJjaCksYT0hMSxoPXt9LHU9MCxrPXtwYXJzZTpmdW5jdGlvbihlLHQpe3ZhciByPSh0PXR8fHt9KS5keW5hbWljVHlwaW5nfHwhMTt6KHIpJiYodC5keW5hbWljVHlwaW5nRnVuY3Rpb249cixyPXt9KTtpZih0LmR5bmFtaWNUeXBpbmc9cix0LnRyYW5zZm9ybT0hIXoodC50cmFuc2Zvcm0pJiZ0LnRyYW5zZm9ybSx0LndvcmtlciYmay5XT1JLRVJTX1NVUFBPUlRFRCl7dmFyIGk9ZnVuY3Rpb24oKXtpZighay5XT1JLRVJTX1NVUFBPUlRFRClyZXR1cm4hMTtpZighYSYmbnVsbD09PWsuU0NSSVBUX1BBVEgpdGhyb3cgbmV3IEVycm9yKFwiU2NyaXB0IHBhdGggY2Fubm90IGJlIGRldGVybWluZWQgYXV0b21hdGljYWxseSB3aGVuIFBhcGEgUGFyc2UgaXMgbG9hZGVkIGFzeW5jaHJvbm91c2x5LiBZb3UgbmVlZCB0byBzZXQgUGFwYS5TQ1JJUFRfUEFUSCBtYW51YWxseS5cIik7dmFyIGU9ay5TQ1JJUFRfUEFUSHx8cztlKz0oLTEhPT1lLmluZGV4T2YoXCI/XCIpP1wiJlwiOlwiP1wiKStcInBhcGF3b3JrZXJcIjt2YXIgdD1uZXcgZi5Xb3JrZXIoZSk7cmV0dXJuIHQub25tZXNzYWdlPW0sdC5pZD11KyssaFt0LmlkXT10fSgpO3JldHVybiBpLnVzZXJTdGVwPXQuc3RlcCxpLnVzZXJDaHVuaz10LmNodW5rLGkudXNlckNvbXBsZXRlPXQuY29tcGxldGUsaS51c2VyRXJyb3I9dC5lcnJvcix0LnN0ZXA9eih0LnN0ZXApLHQuY2h1bms9eih0LmNodW5rKSx0LmNvbXBsZXRlPXoodC5jb21wbGV0ZSksdC5lcnJvcj16KHQuZXJyb3IpLGRlbGV0ZSB0Lndvcmtlcix2b2lkIGkucG9zdE1lc3NhZ2Uoe2lucHV0OmUsY29uZmlnOnQsd29ya2VySWQ6aS5pZH0pfXZhciBuPW51bGw7ay5OT0RFX1NUUkVBTV9JTlBVVCxcInN0cmluZ1wiPT10eXBlb2YgZT9uPXQuZG93bmxvYWQ/bmV3IGModCk6bmV3IF8odCk6ITA9PT1lLnJlYWRhYmxlJiZ6KGUucmVhZCkmJnooZS5vbik/bj1uZXcgZyh0KTooZi5GaWxlJiZlIGluc3RhbmNlb2YgRmlsZXx8ZSBpbnN0YW5jZW9mIE9iamVjdCkmJihuPW5ldyBwKHQpKTtyZXR1cm4gbi5zdHJlYW0oZSl9LHVucGFyc2U6ZnVuY3Rpb24oZSx0KXt2YXIgaT0hMSxnPSEwLG09XCIsXCIseT1cIlxcclxcblwiLG49J1wiJyxyPSExOyFmdW5jdGlvbigpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiB0KXJldHVybjtcInN0cmluZ1wiIT10eXBlb2YgdC5kZWxpbWl0ZXJ8fGsuQkFEX0RFTElNSVRFUlMuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybi0xIT09dC5kZWxpbWl0ZXIuaW5kZXhPZihlKX0pLmxlbmd0aHx8KG09dC5kZWxpbWl0ZXIpOyhcImJvb2xlYW5cIj09dHlwZW9mIHQucXVvdGVzfHxBcnJheS5pc0FycmF5KHQucXVvdGVzKSkmJihpPXQucXVvdGVzKTtcImJvb2xlYW5cIiE9dHlwZW9mIHQuc2tpcEVtcHR5TGluZXMmJlwic3RyaW5nXCIhPXR5cGVvZiB0LnNraXBFbXB0eUxpbmVzfHwocj10LnNraXBFbXB0eUxpbmVzKTtcInN0cmluZ1wiPT10eXBlb2YgdC5uZXdsaW5lJiYoeT10Lm5ld2xpbmUpO1wic3RyaW5nXCI9PXR5cGVvZiB0LnF1b3RlQ2hhciYmKG49dC5xdW90ZUNoYXIpO1wiYm9vbGVhblwiPT10eXBlb2YgdC5oZWFkZXImJihnPXQuaGVhZGVyKX0oKTt2YXIgcz1uZXcgUmVnRXhwKE0obiksXCJnXCIpO1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1KU09OLnBhcnNlKGUpKTtpZihBcnJheS5pc0FycmF5KGUpKXtpZighZS5sZW5ndGh8fEFycmF5LmlzQXJyYXkoZVswXSkpcmV0dXJuIG8obnVsbCxlLHIpO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBlWzBdKXJldHVybiBvKGEoZVswXSksZSxyKX1lbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKXJldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlLmRhdGEmJihlLmRhdGE9SlNPTi5wYXJzZShlLmRhdGEpKSxBcnJheS5pc0FycmF5KGUuZGF0YSkmJihlLmZpZWxkc3x8KGUuZmllbGRzPWUubWV0YSYmZS5tZXRhLmZpZWxkcyksZS5maWVsZHN8fChlLmZpZWxkcz1BcnJheS5pc0FycmF5KGUuZGF0YVswXSk/ZS5maWVsZHM6YShlLmRhdGFbMF0pKSxBcnJheS5pc0FycmF5KGUuZGF0YVswXSl8fFwib2JqZWN0XCI9PXR5cGVvZiBlLmRhdGFbMF18fChlLmRhdGE9W2UuZGF0YV0pKSxvKGUuZmllbGRzfHxbXSxlLmRhdGF8fFtdLHIpO3Rocm93XCJleGNlcHRpb246IFVuYWJsZSB0byBzZXJpYWxpemUgdW5yZWNvZ25pemVkIGlucHV0XCI7ZnVuY3Rpb24gYShlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZSlyZXR1cm5bXTt2YXIgdD1bXTtmb3IodmFyIHIgaW4gZSl0LnB1c2gocik7cmV0dXJuIHR9ZnVuY3Rpb24gbyhlLHQscil7dmFyIGk9XCJcIjtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9SlNPTi5wYXJzZShlKSksXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PUpTT04ucGFyc2UodCkpO3ZhciBuPUFycmF5LmlzQXJyYXkoZSkmJjA8ZS5sZW5ndGgscz0hQXJyYXkuaXNBcnJheSh0WzBdKTtpZihuJiZnKXtmb3IodmFyIGE9MDthPGUubGVuZ3RoO2ErKykwPGEmJihpKz1tKSxpKz12KGVbYV0sYSk7MDx0Lmxlbmd0aCYmKGkrPXkpfWZvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKXt2YXIgaD1uP2UubGVuZ3RoOnRbb10ubGVuZ3RoLHU9ITEsZj1uPzA9PT1PYmplY3Qua2V5cyh0W29dKS5sZW5ndGg6MD09PXRbb10ubGVuZ3RoO2lmKHImJiFuJiYodT1cImdyZWVkeVwiPT09cj9cIlwiPT09dFtvXS5qb2luKFwiXCIpLnRyaW0oKToxPT09dFtvXS5sZW5ndGgmJjA9PT10W29dWzBdLmxlbmd0aCksXCJncmVlZHlcIj09PXImJm4pe2Zvcih2YXIgZD1bXSxsPTA7bDxoO2wrKyl7dmFyIGM9cz9lW2xdOmw7ZC5wdXNoKHRbb11bY10pfXU9XCJcIj09PWQuam9pbihcIlwiKS50cmltKCl9aWYoIXUpe2Zvcih2YXIgcD0wO3A8aDtwKyspezA8cCYmIWYmJihpKz1tKTt2YXIgXz1uJiZzP2VbcF06cDtpKz12KHRbb11bX10scCl9bzx0Lmxlbmd0aC0xJiYoIXJ8fDA8aCYmIWYpJiYoaSs9eSl9fXJldHVybiBpfWZ1bmN0aW9uIHYoZSx0KXtpZihudWxsPT1lKXJldHVyblwiXCI7aWYoZS5jb25zdHJ1Y3Rvcj09PURhdGUpcmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpLnNsaWNlKDEsMjUpO2U9ZS50b1N0cmluZygpLnJlcGxhY2UocyxuK24pO3ZhciByPVwiYm9vbGVhblwiPT10eXBlb2YgaSYmaXx8QXJyYXkuaXNBcnJheShpKSYmaVt0XXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKylpZigtMTxlLmluZGV4T2YodFtyXSkpcmV0dXJuITA7cmV0dXJuITF9KGUsay5CQURfREVMSU1JVEVSUyl8fC0xPGUuaW5kZXhPZihtKXx8XCIgXCI9PT1lLmNoYXJBdCgwKXx8XCIgXCI9PT1lLmNoYXJBdChlLmxlbmd0aC0xKTtyZXR1cm4gcj9uK2UrbjplfX19O2lmKGsuUkVDT1JEX1NFUD1TdHJpbmcuZnJvbUNoYXJDb2RlKDMwKSxrLlVOSVRfU0VQPVN0cmluZy5mcm9tQ2hhckNvZGUoMzEpLGsuQllURV9PUkRFUl9NQVJLPVwiXFx1ZmVmZlwiLGsuQkFEX0RFTElNSVRFUlM9W1wiXFxyXCIsXCJcXG5cIiwnXCInLGsuQllURV9PUkRFUl9NQVJLXSxrLldPUktFUlNfU1VQUE9SVEVEPSFuJiYhIWYuV29ya2VyLGsuU0NSSVBUX1BBVEg9bnVsbCxrLk5PREVfU1RSRUFNX0lOUFVUPTEsay5Mb2NhbENodW5rU2l6ZT0xMDQ4NTc2MCxrLlJlbW90ZUNodW5rU2l6ZT01MjQyODgwLGsuRGVmYXVsdERlbGltaXRlcj1cIixcIixrLlBhcnNlcj12LGsuUGFyc2VySGFuZGxlPXIsay5OZXR3b3JrU3RyZWFtZXI9YyxrLkZpbGVTdHJlYW1lcj1wLGsuU3RyaW5nU3RyZWFtZXI9XyxrLlJlYWRhYmxlU3RyZWFtU3RyZWFtZXI9ZyxmLmpRdWVyeSl7dmFyIGQ9Zi5qUXVlcnk7ZC5mbi5wYXJzZT1mdW5jdGlvbihvKXt2YXIgcj1vLmNvbmZpZ3x8e30saD1bXTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpe2lmKCEoXCJJTlBVVFwiPT09ZCh0aGlzKS5wcm9wKFwidGFnTmFtZVwiKS50b1VwcGVyQ2FzZSgpJiZcImZpbGVcIj09PWQodGhpcykuYXR0cihcInR5cGVcIikudG9Mb3dlckNhc2UoKSYmZi5GaWxlUmVhZGVyKXx8IXRoaXMuZmlsZXN8fDA9PT10aGlzLmZpbGVzLmxlbmd0aClyZXR1cm4hMDtmb3IodmFyIHQ9MDt0PHRoaXMuZmlsZXMubGVuZ3RoO3QrKyloLnB1c2goe2ZpbGU6dGhpcy5maWxlc1t0XSxpbnB1dEVsZW06dGhpcyxpbnN0YW5jZUNvbmZpZzpkLmV4dGVuZCh7fSxyKX0pfSksZSgpLHRoaXM7ZnVuY3Rpb24gZSgpe2lmKDAhPT1oLmxlbmd0aCl7dmFyIGUsdCxyLGksbj1oWzBdO2lmKHooby5iZWZvcmUpKXt2YXIgcz1vLmJlZm9yZShuLmZpbGUsbi5pbnB1dEVsZW0pO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBzKXtpZihcImFib3J0XCI9PT1zLmFjdGlvbilyZXR1cm4gZT1cIkFib3J0RXJyb3JcIix0PW4uZmlsZSxyPW4uaW5wdXRFbGVtLGk9cy5yZWFzb24sdm9pZCh6KG8uZXJyb3IpJiZvLmVycm9yKHtuYW1lOmV9LHQscixpKSk7aWYoXCJza2lwXCI9PT1zLmFjdGlvbilyZXR1cm4gdm9pZCB1KCk7XCJvYmplY3RcIj09dHlwZW9mIHMuY29uZmlnJiYobi5pbnN0YW5jZUNvbmZpZz1kLmV4dGVuZChuLmluc3RhbmNlQ29uZmlnLHMuY29uZmlnKSl9ZWxzZSBpZihcInNraXBcIj09PXMpcmV0dXJuIHZvaWQgdSgpfXZhciBhPW4uaW5zdGFuY2VDb25maWcuY29tcGxldGU7bi5pbnN0YW5jZUNvbmZpZy5jb21wbGV0ZT1mdW5jdGlvbihlKXt6KGEpJiZhKGUsbi5maWxlLG4uaW5wdXRFbGVtKSx1KCl9LGsucGFyc2Uobi5maWxlLG4uaW5zdGFuY2VDb25maWcpfWVsc2UgeihvLmNvbXBsZXRlKSYmby5jb21wbGV0ZSgpfWZ1bmN0aW9uIHUoKXtoLnNwbGljZSgwLDEpLGUoKX19fWZ1bmN0aW9uIGwoZSl7dGhpcy5faGFuZGxlPW51bGwsdGhpcy5fZmluaXNoZWQ9ITEsdGhpcy5fY29tcGxldGVkPSExLHRoaXMuX2lucHV0PW51bGwsdGhpcy5fYmFzZUluZGV4PTAsdGhpcy5fcGFydGlhbExpbmU9XCJcIix0aGlzLl9yb3dDb3VudD0wLHRoaXMuX3N0YXJ0PTAsdGhpcy5fbmV4dENodW5rPW51bGwsdGhpcy5pc0ZpcnN0Q2h1bms9ITAsdGhpcy5fY29tcGxldGVSZXN1bHRzPXtkYXRhOltdLGVycm9yczpbXSxtZXRhOnt9fSxmdW5jdGlvbihlKXt2YXIgdD1FKGUpO3QuY2h1bmtTaXplPXBhcnNlSW50KHQuY2h1bmtTaXplKSxlLnN0ZXB8fGUuY2h1bmt8fCh0LmNodW5rU2l6ZT1udWxsKTt0aGlzLl9oYW5kbGU9bmV3IHIodCksKHRoaXMuX2hhbmRsZS5zdHJlYW1lcj10aGlzKS5fY29uZmlnPXR9LmNhbGwodGhpcyxlKSx0aGlzLnBhcnNlQ2h1bms9ZnVuY3Rpb24oZSx0KXtpZih0aGlzLmlzRmlyc3RDaHVuayYmeih0aGlzLl9jb25maWcuYmVmb3JlRmlyc3RDaHVuaykpe3ZhciByPXRoaXMuX2NvbmZpZy5iZWZvcmVGaXJzdENodW5rKGUpO3ZvaWQgMCE9PXImJihlPXIpfXRoaXMuaXNGaXJzdENodW5rPSExO3ZhciBpPXRoaXMuX3BhcnRpYWxMaW5lK2U7dGhpcy5fcGFydGlhbExpbmU9XCJcIjt2YXIgbj10aGlzLl9oYW5kbGUucGFyc2UoaSx0aGlzLl9iYXNlSW5kZXgsIXRoaXMuX2ZpbmlzaGVkKTtpZighdGhpcy5faGFuZGxlLnBhdXNlZCgpJiYhdGhpcy5faGFuZGxlLmFib3J0ZWQoKSl7dmFyIHM9bi5tZXRhLmN1cnNvcjt0aGlzLl9maW5pc2hlZHx8KHRoaXMuX3BhcnRpYWxMaW5lPWkuc3Vic3RyaW5nKHMtdGhpcy5fYmFzZUluZGV4KSx0aGlzLl9iYXNlSW5kZXg9cyksbiYmbi5kYXRhJiYodGhpcy5fcm93Q291bnQrPW4uZGF0YS5sZW5ndGgpO3ZhciBhPXRoaXMuX2ZpbmlzaGVkfHx0aGlzLl9jb25maWcucHJldmlldyYmdGhpcy5fcm93Q291bnQ+PXRoaXMuX2NvbmZpZy5wcmV2aWV3O2lmKG8pZi5wb3N0TWVzc2FnZSh7cmVzdWx0czpuLHdvcmtlcklkOmsuV09SS0VSX0lELGZpbmlzaGVkOmF9KTtlbHNlIGlmKHoodGhpcy5fY29uZmlnLmNodW5rKSYmIXQpe2lmKHRoaXMuX2NvbmZpZy5jaHVuayhuLHRoaXMuX2hhbmRsZSksdGhpcy5faGFuZGxlLnBhdXNlZCgpfHx0aGlzLl9oYW5kbGUuYWJvcnRlZCgpKXJldHVybjtuPXZvaWQgMCx0aGlzLl9jb21wbGV0ZVJlc3VsdHM9dm9pZCAwfXJldHVybiB0aGlzLl9jb25maWcuc3RlcHx8dGhpcy5fY29uZmlnLmNodW5rfHwodGhpcy5fY29tcGxldGVSZXN1bHRzLmRhdGE9dGhpcy5fY29tcGxldGVSZXN1bHRzLmRhdGEuY29uY2F0KG4uZGF0YSksdGhpcy5fY29tcGxldGVSZXN1bHRzLmVycm9ycz10aGlzLl9jb21wbGV0ZVJlc3VsdHMuZXJyb3JzLmNvbmNhdChuLmVycm9ycyksdGhpcy5fY29tcGxldGVSZXN1bHRzLm1ldGE9bi5tZXRhKSx0aGlzLl9jb21wbGV0ZWR8fCFhfHwheih0aGlzLl9jb25maWcuY29tcGxldGUpfHxuJiZuLm1ldGEuYWJvcnRlZHx8KHRoaXMuX2NvbmZpZy5jb21wbGV0ZSh0aGlzLl9jb21wbGV0ZVJlc3VsdHMsdGhpcy5faW5wdXQpLHRoaXMuX2NvbXBsZXRlZD0hMCksYXx8biYmbi5tZXRhLnBhdXNlZHx8dGhpcy5fbmV4dENodW5rKCksbn19LHRoaXMuX3NlbmRFcnJvcj1mdW5jdGlvbihlKXt6KHRoaXMuX2NvbmZpZy5lcnJvcik/dGhpcy5fY29uZmlnLmVycm9yKGUpOm8mJnRoaXMuX2NvbmZpZy5lcnJvciYmZi5wb3N0TWVzc2FnZSh7d29ya2VySWQ6ay5XT1JLRVJfSUQsZXJyb3I6ZSxmaW5pc2hlZDohMX0pfX1mdW5jdGlvbiBjKGUpe3ZhciBpOyhlPWV8fHt9KS5jaHVua1NpemV8fChlLmNodW5rU2l6ZT1rLlJlbW90ZUNodW5rU2l6ZSksbC5jYWxsKHRoaXMsZSksdGhpcy5fbmV4dENodW5rPW4/ZnVuY3Rpb24oKXt0aGlzLl9yZWFkQ2h1bmsoKSx0aGlzLl9jaHVua0xvYWRlZCgpfTpmdW5jdGlvbigpe3RoaXMuX3JlYWRDaHVuaygpfSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXt0aGlzLl9pbnB1dD1lLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9yZWFkQ2h1bms9ZnVuY3Rpb24oKXtpZih0aGlzLl9maW5pc2hlZCl0aGlzLl9jaHVua0xvYWRlZCgpO2Vsc2V7aWYoaT1uZXcgWE1MSHR0cFJlcXVlc3QsdGhpcy5fY29uZmlnLndpdGhDcmVkZW50aWFscyYmKGkud2l0aENyZWRlbnRpYWxzPXRoaXMuX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpLG58fChpLm9ubG9hZD13KHRoaXMuX2NodW5rTG9hZGVkLHRoaXMpLGkub25lcnJvcj13KHRoaXMuX2NodW5rRXJyb3IsdGhpcykpLGkub3BlbihcIkdFVFwiLHRoaXMuX2lucHV0LCFuKSx0aGlzLl9jb25maWcuZG93bmxvYWRSZXF1ZXN0SGVhZGVycyl7dmFyIGU9dGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnM7Zm9yKHZhciB0IGluIGUpaS5zZXRSZXF1ZXN0SGVhZGVyKHQsZVt0XSl9aWYodGhpcy5fY29uZmlnLmNodW5rU2l6ZSl7dmFyIHI9dGhpcy5fc3RhcnQrdGhpcy5fY29uZmlnLmNodW5rU2l6ZS0xO2kuc2V0UmVxdWVzdEhlYWRlcihcIlJhbmdlXCIsXCJieXRlcz1cIit0aGlzLl9zdGFydCtcIi1cIityKSxpLnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Ob25lLU1hdGNoXCIsXCJ3ZWJraXQtbm8tY2FjaGVcIil9dHJ5e2kuc2VuZCgpfWNhdGNoKGUpe3RoaXMuX2NodW5rRXJyb3IoZS5tZXNzYWdlKX1uJiYwPT09aS5zdGF0dXM/dGhpcy5fY2h1bmtFcnJvcigpOnRoaXMuX3N0YXJ0Kz10aGlzLl9jb25maWcuY2h1bmtTaXplfX0sdGhpcy5fY2h1bmtMb2FkZWQ9ZnVuY3Rpb24oKXs0PT09aS5yZWFkeVN0YXRlJiYoaS5zdGF0dXM8MjAwfHw0MDA8PWkuc3RhdHVzP3RoaXMuX2NodW5rRXJyb3IoKToodGhpcy5fZmluaXNoZWQ9IXRoaXMuX2NvbmZpZy5jaHVua1NpemV8fHRoaXMuX3N0YXJ0PmZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVJhbmdlXCIpO2lmKG51bGw9PT10KXJldHVybi0xO3JldHVybiBwYXJzZUludCh0LnN1YnN0cih0Lmxhc3RJbmRleE9mKFwiL1wiKSsxKSl9KGkpLHRoaXMucGFyc2VDaHVuayhpLnJlc3BvbnNlVGV4dCkpKX0sdGhpcy5fY2h1bmtFcnJvcj1mdW5jdGlvbihlKXt2YXIgdD1pLnN0YXR1c1RleHR8fGU7dGhpcy5fc2VuZEVycm9yKG5ldyBFcnJvcih0KSl9fWZ1bmN0aW9uIHAoZSl7dmFyIGksbjsoZT1lfHx7fSkuY2h1bmtTaXplfHwoZS5jaHVua1NpemU9ay5Mb2NhbENodW5rU2l6ZSksbC5jYWxsKHRoaXMsZSk7dmFyIHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEZpbGVSZWFkZXI7dGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7dGhpcy5faW5wdXQ9ZSxuPWUuc2xpY2V8fGUud2Via2l0U2xpY2V8fGUubW96U2xpY2Uscz8oKGk9bmV3IEZpbGVSZWFkZXIpLm9ubG9hZD13KHRoaXMuX2NodW5rTG9hZGVkLHRoaXMpLGkub25lcnJvcj13KHRoaXMuX2NodW5rRXJyb3IsdGhpcykpOmk9bmV3IEZpbGVSZWFkZXJTeW5jLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9uZXh0Q2h1bms9ZnVuY3Rpb24oKXt0aGlzLl9maW5pc2hlZHx8dGhpcy5fY29uZmlnLnByZXZpZXcmJiEodGhpcy5fcm93Q291bnQ8dGhpcy5fY29uZmlnLnByZXZpZXcpfHx0aGlzLl9yZWFkQ2h1bmsoKX0sdGhpcy5fcmVhZENodW5rPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5faW5wdXQ7aWYodGhpcy5fY29uZmlnLmNodW5rU2l6ZSl7dmFyIHQ9TWF0aC5taW4odGhpcy5fc3RhcnQrdGhpcy5fY29uZmlnLmNodW5rU2l6ZSx0aGlzLl9pbnB1dC5zaXplKTtlPW4uY2FsbChlLHRoaXMuX3N0YXJ0LHQpfXZhciByPWkucmVhZEFzVGV4dChlLHRoaXMuX2NvbmZpZy5lbmNvZGluZyk7c3x8dGhpcy5fY2h1bmtMb2FkZWQoe3RhcmdldDp7cmVzdWx0OnJ9fSl9LHRoaXMuX2NodW5rTG9hZGVkPWZ1bmN0aW9uKGUpe3RoaXMuX3N0YXJ0Kz10aGlzLl9jb25maWcuY2h1bmtTaXplLHRoaXMuX2ZpbmlzaGVkPSF0aGlzLl9jb25maWcuY2h1bmtTaXplfHx0aGlzLl9zdGFydD49dGhpcy5faW5wdXQuc2l6ZSx0aGlzLnBhcnNlQ2h1bmsoZS50YXJnZXQucmVzdWx0KX0sdGhpcy5fY2h1bmtFcnJvcj1mdW5jdGlvbigpe3RoaXMuX3NlbmRFcnJvcihpLmVycm9yKX19ZnVuY3Rpb24gXyhlKXt2YXIgcjtsLmNhbGwodGhpcyxlPWV8fHt9KSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gcj1lLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9uZXh0Q2h1bms9ZnVuY3Rpb24oKXtpZighdGhpcy5fZmluaXNoZWQpe3ZhciBlPXRoaXMuX2NvbmZpZy5jaHVua1NpemUsdD1lP3Iuc3Vic3RyKDAsZSk6cjtyZXR1cm4gcj1lP3Iuc3Vic3RyKGUpOlwiXCIsdGhpcy5fZmluaXNoZWQ9IXIsdGhpcy5wYXJzZUNodW5rKHQpfX19ZnVuY3Rpb24gZyhlKXtsLmNhbGwodGhpcyxlPWV8fHt9KTt2YXIgdD1bXSxyPSEwLGk9ITE7dGhpcy5wYXVzZT1mdW5jdGlvbigpe2wucHJvdG90eXBlLnBhdXNlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9pbnB1dC5wYXVzZSgpfSx0aGlzLnJlc3VtZT1mdW5jdGlvbigpe2wucHJvdG90eXBlLnJlc3VtZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5faW5wdXQucmVzdW1lKCl9LHRoaXMuc3RyZWFtPWZ1bmN0aW9uKGUpe3RoaXMuX2lucHV0PWUsdGhpcy5faW5wdXQub24oXCJkYXRhXCIsdGhpcy5fc3RyZWFtRGF0YSksdGhpcy5faW5wdXQub24oXCJlbmRcIix0aGlzLl9zdHJlYW1FbmQpLHRoaXMuX2lucHV0Lm9uKFwiZXJyb3JcIix0aGlzLl9zdHJlYW1FcnJvcil9LHRoaXMuX2NoZWNrSXNGaW5pc2hlZD1mdW5jdGlvbigpe2kmJjE9PT10Lmxlbmd0aCYmKHRoaXMuX2ZpbmlzaGVkPSEwKX0sdGhpcy5fbmV4dENodW5rPWZ1bmN0aW9uKCl7dGhpcy5fY2hlY2tJc0ZpbmlzaGVkKCksdC5sZW5ndGg/dGhpcy5wYXJzZUNodW5rKHQuc2hpZnQoKSk6cj0hMH0sdGhpcy5fc3RyZWFtRGF0YT13KGZ1bmN0aW9uKGUpe3RyeXt0LnB1c2goXCJzdHJpbmdcIj09dHlwZW9mIGU/ZTplLnRvU3RyaW5nKHRoaXMuX2NvbmZpZy5lbmNvZGluZykpLHImJihyPSExLHRoaXMuX2NoZWNrSXNGaW5pc2hlZCgpLHRoaXMucGFyc2VDaHVuayh0LnNoaWZ0KCkpKX1jYXRjaChlKXt0aGlzLl9zdHJlYW1FcnJvcihlKX19LHRoaXMpLHRoaXMuX3N0cmVhbUVycm9yPXcoZnVuY3Rpb24oZSl7dGhpcy5fc3RyZWFtQ2xlYW5VcCgpLHRoaXMuX3NlbmRFcnJvcihlKX0sdGhpcyksdGhpcy5fc3RyZWFtRW5kPXcoZnVuY3Rpb24oKXt0aGlzLl9zdHJlYW1DbGVhblVwKCksaT0hMCx0aGlzLl9zdHJlYW1EYXRhKFwiXCIpfSx0aGlzKSx0aGlzLl9zdHJlYW1DbGVhblVwPXcoZnVuY3Rpb24oKXt0aGlzLl9pbnB1dC5yZW1vdmVMaXN0ZW5lcihcImRhdGFcIix0aGlzLl9zdHJlYW1EYXRhKSx0aGlzLl9pbnB1dC5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLHRoaXMuX3N0cmVhbUVuZCksdGhpcy5faW5wdXQucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLHRoaXMuX3N0cmVhbUVycm9yKX0sdGhpcyl9ZnVuY3Rpb24gcihnKXt2YXIgYSxvLGgsaT0vXlxccyotPyhcXGQqXFwuP1xcZCt8XFxkK1xcLj9cXGQqKShlWy0rXT9cXGQrKT9cXHMqJC9pLG49LyhcXGR7NH0tWzAxXVxcZC1bMC0zXVxcZFRbMC0yXVxcZDpbMC01XVxcZDpbMC01XVxcZFxcLlxcZCsoWystXVswLTJdXFxkOlswLTVdXFxkfFopKXwoXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGQoWystXVswLTJdXFxkOlswLTVdXFxkfFopKXwoXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQoWystXVswLTJdXFxkOlswLTVdXFxkfFopKS8sdD10aGlzLHI9MCxzPTAsdT0hMSxlPSExLGY9W10sZD17ZGF0YTpbXSxlcnJvcnM6W10sbWV0YTp7fX07aWYoeihnLnN0ZXApKXt2YXIgbD1nLnN0ZXA7Zy5zdGVwPWZ1bmN0aW9uKGUpe2lmKGQ9ZSxwKCkpYygpO2Vsc2V7aWYoYygpLDA9PT1kLmRhdGEubGVuZ3RoKXJldHVybjtyKz1lLmRhdGEubGVuZ3RoLGcucHJldmlldyYmcj5nLnByZXZpZXc/by5hYm9ydCgpOmwoZCx0KX19fWZ1bmN0aW9uIG0oZSl7cmV0dXJuXCJncmVlZHlcIj09PWcuc2tpcEVtcHR5TGluZXM/XCJcIj09PWUuam9pbihcIlwiKS50cmltKCk6MT09PWUubGVuZ3RoJiYwPT09ZVswXS5sZW5ndGh9ZnVuY3Rpb24gYygpe2lmKGQmJmgmJih5KFwiRGVsaW1pdGVyXCIsXCJVbmRldGVjdGFibGVEZWxpbWl0ZXJcIixcIlVuYWJsZSB0byBhdXRvLWRldGVjdCBkZWxpbWl0aW5nIGNoYXJhY3RlcjsgZGVmYXVsdGVkIHRvICdcIitrLkRlZmF1bHREZWxpbWl0ZXIrXCInXCIpLGg9ITEpLGcuc2tpcEVtcHR5TGluZXMpZm9yKHZhciBlPTA7ZTxkLmRhdGEubGVuZ3RoO2UrKyltKGQuZGF0YVtlXSkmJmQuZGF0YS5zcGxpY2UoZS0tLDEpO3JldHVybiBwKCkmJmZ1bmN0aW9uKCl7aWYoIWQpcmV0dXJuO2Zvcih2YXIgZT0wO3AoKSYmZTxkLmRhdGEubGVuZ3RoO2UrKylmb3IodmFyIHQ9MDt0PGQuZGF0YVtlXS5sZW5ndGg7dCsrKXt2YXIgcj1kLmRhdGFbZV1bdF07Zy50cmltSGVhZGVycyYmKHI9ci50cmltKCkpLGYucHVzaChyKX1kLmRhdGEuc3BsaWNlKDAsMSl9KCksZnVuY3Rpb24oKXtpZighZHx8IWcuaGVhZGVyJiYhZy5keW5hbWljVHlwaW5nJiYhZy50cmFuc2Zvcm0pcmV0dXJuIGQ7Zm9yKHZhciBlPTA7ZTxkLmRhdGEubGVuZ3RoO2UrKyl7dmFyIHQscj1nLmhlYWRlcj97fTpbXTtmb3IodD0wO3Q8ZC5kYXRhW2VdLmxlbmd0aDt0Kyspe3ZhciBpPXQsbj1kLmRhdGFbZV1bdF07Zy5oZWFkZXImJihpPXQ+PWYubGVuZ3RoP1wiX19wYXJzZWRfZXh0cmFcIjpmW3RdKSxnLnRyYW5zZm9ybSYmKG49Zy50cmFuc2Zvcm0obixpKSksbj1fKGksbiksXCJfX3BhcnNlZF9leHRyYVwiPT09aT8ocltpXT1yW2ldfHxbXSxyW2ldLnB1c2gobikpOnJbaV09bn1kLmRhdGFbZV09cixnLmhlYWRlciYmKHQ+Zi5sZW5ndGg/eShcIkZpZWxkTWlzbWF0Y2hcIixcIlRvb01hbnlGaWVsZHNcIixcIlRvbyBtYW55IGZpZWxkczogZXhwZWN0ZWQgXCIrZi5sZW5ndGgrXCIgZmllbGRzIGJ1dCBwYXJzZWQgXCIrdCxzK2UpOnQ8Zi5sZW5ndGgmJnkoXCJGaWVsZE1pc21hdGNoXCIsXCJUb29GZXdGaWVsZHNcIixcIlRvbyBmZXcgZmllbGRzOiBleHBlY3RlZCBcIitmLmxlbmd0aCtcIiBmaWVsZHMgYnV0IHBhcnNlZCBcIit0LHMrZSkpfWcuaGVhZGVyJiZkLm1ldGEmJihkLm1ldGEuZmllbGRzPWYpO3JldHVybiBzKz1kLmRhdGEubGVuZ3RoLGR9KCl9ZnVuY3Rpb24gcCgpe3JldHVybiBnLmhlYWRlciYmMD09PWYubGVuZ3RofWZ1bmN0aW9uIF8oZSx0KXtyZXR1cm4gcj1lLGcuZHluYW1pY1R5cGluZ0Z1bmN0aW9uJiZ2b2lkIDA9PT1nLmR5bmFtaWNUeXBpbmdbcl0mJihnLmR5bmFtaWNUeXBpbmdbcl09Zy5keW5hbWljVHlwaW5nRnVuY3Rpb24ocikpLCEwPT09KGcuZHluYW1pY1R5cGluZ1tyXXx8Zy5keW5hbWljVHlwaW5nKT9cInRydWVcIj09PXR8fFwiVFJVRVwiPT09dHx8XCJmYWxzZVwiIT09dCYmXCJGQUxTRVwiIT09dCYmKGkudGVzdCh0KT9wYXJzZUZsb2F0KHQpOm4udGVzdCh0KT9uZXcgRGF0ZSh0KTpcIlwiPT09dD9udWxsOnQpOnQ7dmFyIHJ9ZnVuY3Rpb24geShlLHQscixpKXtkLmVycm9ycy5wdXNoKHt0eXBlOmUsY29kZTp0LG1lc3NhZ2U6cixyb3c6aX0pfXRoaXMucGFyc2U9ZnVuY3Rpb24oZSx0LHIpe3ZhciBpPWcucXVvdGVDaGFyfHwnXCInO2lmKGcubmV3bGluZXx8KGcubmV3bGluZT1mdW5jdGlvbihlLHQpe2U9ZS5zdWJzdHIoMCwxMDQ4NTc2KTt2YXIgcj1uZXcgUmVnRXhwKE0odCkrXCIoW15dKj8pXCIrTSh0KSxcImdtXCIpLGk9KGU9ZS5yZXBsYWNlKHIsXCJcIikpLnNwbGl0KFwiXFxyXCIpLG49ZS5zcGxpdChcIlxcblwiKSxzPTE8bi5sZW5ndGgmJm5bMF0ubGVuZ3RoPGlbMF0ubGVuZ3RoO2lmKDE9PT1pLmxlbmd0aHx8cylyZXR1cm5cIlxcblwiO2Zvcih2YXIgYT0wLG89MDtvPGkubGVuZ3RoO28rKylcIlxcblwiPT09aVtvXVswXSYmYSsrO3JldHVybiBhPj1pLmxlbmd0aC8yP1wiXFxyXFxuXCI6XCJcXHJcIn0oZSxpKSksaD0hMSxnLmRlbGltaXRlcil6KGcuZGVsaW1pdGVyKSYmKGcuZGVsaW1pdGVyPWcuZGVsaW1pdGVyKGUpLGQubWV0YS5kZWxpbWl0ZXI9Zy5kZWxpbWl0ZXIpO2Vsc2V7dmFyIG49ZnVuY3Rpb24oZSx0LHIsaSl7Zm9yKHZhciBuLHMsYSxvPVtcIixcIixcIlxcdFwiLFwifFwiLFwiO1wiLGsuUkVDT1JEX1NFUCxrLlVOSVRfU0VQXSxoPTA7aDxvLmxlbmd0aDtoKyspe3ZhciB1PW9baF0sZj0wLGQ9MCxsPTA7YT12b2lkIDA7Zm9yKHZhciBjPW5ldyB2KHtjb21tZW50czppLGRlbGltaXRlcjp1LG5ld2xpbmU6dCxwcmV2aWV3OjEwfSkucGFyc2UoZSkscD0wO3A8Yy5kYXRhLmxlbmd0aDtwKyspaWYociYmbShjLmRhdGFbcF0pKWwrKztlbHNle3ZhciBfPWMuZGF0YVtwXS5sZW5ndGg7ZCs9Xyx2b2lkIDAhPT1hPzE8XyYmKGYrPU1hdGguYWJzKF8tYSksYT1fKTphPTB9MDxjLmRhdGEubGVuZ3RoJiYoZC89Yy5kYXRhLmxlbmd0aC1sKSwodm9pZCAwPT09c3x8czxmKSYmMS45OTxkJiYocz1mLG49dSl9cmV0dXJue3N1Y2Nlc3NmdWw6ISEoZy5kZWxpbWl0ZXI9biksYmVzdERlbGltaXRlcjpufX0oZSxnLm5ld2xpbmUsZy5za2lwRW1wdHlMaW5lcyxnLmNvbW1lbnRzKTtuLnN1Y2Nlc3NmdWw/Zy5kZWxpbWl0ZXI9bi5iZXN0RGVsaW1pdGVyOihoPSEwLGcuZGVsaW1pdGVyPWsuRGVmYXVsdERlbGltaXRlciksZC5tZXRhLmRlbGltaXRlcj1nLmRlbGltaXRlcn12YXIgcz1FKGcpO3JldHVybiBnLnByZXZpZXcmJmcuaGVhZGVyJiZzLnByZXZpZXcrKyxhPWUsbz1uZXcgdihzKSxkPW8ucGFyc2UoYSx0LHIpLGMoKSx1P3ttZXRhOntwYXVzZWQ6ITB9fTpkfHx7bWV0YTp7cGF1c2VkOiExfX19LHRoaXMucGF1c2VkPWZ1bmN0aW9uKCl7cmV0dXJuIHV9LHRoaXMucGF1c2U9ZnVuY3Rpb24oKXt1PSEwLG8uYWJvcnQoKSxhPWEuc3Vic3RyKG8uZ2V0Q2hhckluZGV4KCkpfSx0aGlzLnJlc3VtZT1mdW5jdGlvbigpe3U9ITEsdC5zdHJlYW1lci5wYXJzZUNodW5rKGEsITApfSx0aGlzLmFib3J0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sdGhpcy5hYm9ydD1mdW5jdGlvbigpe2U9ITAsby5hYm9ydCgpLGQubWV0YS5hYm9ydGVkPSEwLHooZy5jb21wbGV0ZSkmJmcuY29tcGxldGUoZCksYT1cIlwifX1mdW5jdGlvbiBNKGUpe3JldHVybiBlLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLFwiXFxcXCQmXCIpfWZ1bmN0aW9uIHYoZSl7dmFyIFMsTz0oZT1lfHx7fSkuZGVsaW1pdGVyLHg9ZS5uZXdsaW5lLFQ9ZS5jb21tZW50cyxJPWUuc3RlcCxBPWUucHJldmlldyxEPWUuZmFzdE1vZGUsTD1TPXZvaWQgMD09PWUucXVvdGVDaGFyPydcIic6ZS5xdW90ZUNoYXI7aWYodm9pZCAwIT09ZS5lc2NhcGVDaGFyJiYoTD1lLmVzY2FwZUNoYXIpLChcInN0cmluZ1wiIT10eXBlb2YgT3x8LTE8ay5CQURfREVMSU1JVEVSUy5pbmRleE9mKE8pKSYmKE89XCIsXCIpLFQ9PT1PKXRocm93XCJDb21tZW50IGNoYXJhY3RlciBzYW1lIGFzIGRlbGltaXRlclwiOyEwPT09VD9UPVwiI1wiOihcInN0cmluZ1wiIT10eXBlb2YgVHx8LTE8ay5CQURfREVMSU1JVEVSUy5pbmRleE9mKFQpKSYmKFQ9ITEpLFwiXFxuXCIhPT14JiZcIlxcclwiIT09eCYmXCJcXHJcXG5cIiE9PXgmJih4PVwiXFxuXCIpO3ZhciBQPTAsRj0hMTt0aGlzLnBhcnNlPWZ1bmN0aW9uKGksdCxyKXtpZihcInN0cmluZ1wiIT10eXBlb2YgaSl0aHJvd1wiSW5wdXQgbXVzdCBiZSBhIHN0cmluZ1wiO3ZhciBuPWkubGVuZ3RoLGU9Ty5sZW5ndGgscz14Lmxlbmd0aCxhPVQubGVuZ3RoLG89eihJKSxoPVtdLHU9W10sZj1bXSxkPVA9MDtpZighaSlyZXR1cm4gQygpO2lmKER8fCExIT09RCYmLTE9PT1pLmluZGV4T2YoUykpe2Zvcih2YXIgbD1pLnNwbGl0KHgpLGM9MDtjPGwubGVuZ3RoO2MrKyl7aWYoZj1sW2NdLFArPWYubGVuZ3RoLGMhPT1sLmxlbmd0aC0xKVArPXgubGVuZ3RoO2Vsc2UgaWYocilyZXR1cm4gQygpO2lmKCFUfHxmLnN1YnN0cigwLGEpIT09VCl7aWYobyl7aWYoaD1bXSxrKGYuc3BsaXQoTykpLFIoKSxGKXJldHVybiBDKCl9ZWxzZSBrKGYuc3BsaXQoTykpO2lmKEEmJkE8PWMpcmV0dXJuIGg9aC5zbGljZSgwLEEpLEMoITApfX1yZXR1cm4gQygpfWZvcih2YXIgcCxfPWkuaW5kZXhPZihPLFApLGc9aS5pbmRleE9mKHgsUCksbT1uZXcgUmVnRXhwKE0oTCkrTShTKSxcImdcIik7OylpZihpW1BdIT09UylpZihUJiYwPT09Zi5sZW5ndGgmJmkuc3Vic3RyKFAsYSk9PT1UKXtpZigtMT09PWcpcmV0dXJuIEMoKTtQPWcrcyxnPWkuaW5kZXhPZih4LFApLF89aS5pbmRleE9mKE8sUCl9ZWxzZSBpZigtMSE9PV8mJihfPGd8fC0xPT09ZykpZi5wdXNoKGkuc3Vic3RyaW5nKFAsXykpLFA9XytlLF89aS5pbmRleE9mKE8sUCk7ZWxzZXtpZigtMT09PWcpYnJlYWs7aWYoZi5wdXNoKGkuc3Vic3RyaW5nKFAsZykpLHcoZytzKSxvJiYoUigpLEYpKXJldHVybiBDKCk7aWYoQSYmaC5sZW5ndGg+PUEpcmV0dXJuIEMoITApfWVsc2UgZm9yKHA9UCxQKys7Oyl7aWYoLTE9PT0ocD1pLmluZGV4T2YoUyxwKzEpKSlyZXR1cm4gcnx8dS5wdXNoKHt0eXBlOlwiUXVvdGVzXCIsY29kZTpcIk1pc3NpbmdRdW90ZXNcIixtZXNzYWdlOlwiUXVvdGVkIGZpZWxkIHVudGVybWluYXRlZFwiLHJvdzpoLmxlbmd0aCxpbmRleDpQfSksRSgpO2lmKHA9PT1uLTEpcmV0dXJuIEUoaS5zdWJzdHJpbmcoUCxwKS5yZXBsYWNlKG0sUykpO2lmKFMhPT1MfHxpW3ArMV0hPT1MKXtpZihTPT09THx8MD09PXB8fGlbcC0xXSE9PUwpe3ZhciB5PWIoLTE9PT1nP186TWF0aC5taW4oXyxnKSk7aWYoaVtwKzEreV09PT1PKXtmLnB1c2goaS5zdWJzdHJpbmcoUCxwKS5yZXBsYWNlKG0sUykpLFA9cCsxK3krZSxfPWkuaW5kZXhPZihPLFApLGc9aS5pbmRleE9mKHgsUCk7YnJlYWt9dmFyIHY9YihnKTtpZihpLnN1YnN0cihwKzErdixzKT09PXgpe2lmKGYucHVzaChpLnN1YnN0cmluZyhQLHApLnJlcGxhY2UobSxTKSksdyhwKzErditzKSxfPWkuaW5kZXhPZihPLFApLG8mJihSKCksRikpcmV0dXJuIEMoKTtpZihBJiZoLmxlbmd0aD49QSlyZXR1cm4gQyghMCk7YnJlYWt9dS5wdXNoKHt0eXBlOlwiUXVvdGVzXCIsY29kZTpcIkludmFsaWRRdW90ZXNcIixtZXNzYWdlOlwiVHJhaWxpbmcgcXVvdGUgb24gcXVvdGVkIGZpZWxkIGlzIG1hbGZvcm1lZFwiLHJvdzpoLmxlbmd0aCxpbmRleDpQfSkscCsrfX1lbHNlIHArK31yZXR1cm4gRSgpO2Z1bmN0aW9uIGsoZSl7aC5wdXNoKGUpLGQ9UH1mdW5jdGlvbiBiKGUpe3ZhciB0PTA7aWYoLTEhPT1lKXt2YXIgcj1pLnN1YnN0cmluZyhwKzEsZSk7ciYmXCJcIj09PXIudHJpbSgpJiYodD1yLmxlbmd0aCl9cmV0dXJuIHR9ZnVuY3Rpb24gRShlKXtyZXR1cm4gcnx8KHZvaWQgMD09PWUmJihlPWkuc3Vic3RyKFApKSxmLnB1c2goZSksUD1uLGsoZiksbyYmUigpKSxDKCl9ZnVuY3Rpb24gdyhlKXtQPWUsayhmKSxmPVtdLGc9aS5pbmRleE9mKHgsUCl9ZnVuY3Rpb24gQyhlKXtyZXR1cm57ZGF0YTpoLGVycm9yczp1LG1ldGE6e2RlbGltaXRlcjpPLGxpbmVicmVhazp4LGFib3J0ZWQ6Rix0cnVuY2F0ZWQ6ISFlLGN1cnNvcjpkKyh0fHwwKX19fWZ1bmN0aW9uIFIoKXtJKEMoKSksaD1bXSx1PVtdfX0sdGhpcy5hYm9ydD1mdW5jdGlvbigpe0Y9ITB9LHRoaXMuZ2V0Q2hhckluZGV4PWZ1bmN0aW9uKCl7cmV0dXJuIFB9fWZ1bmN0aW9uIG0oZSl7dmFyIHQ9ZS5kYXRhLHI9aFt0LndvcmtlcklkXSxpPSExO2lmKHQuZXJyb3Ipci51c2VyRXJyb3IodC5lcnJvcix0LmZpbGUpO2Vsc2UgaWYodC5yZXN1bHRzJiZ0LnJlc3VsdHMuZGF0YSl7dmFyIG49e2Fib3J0OmZ1bmN0aW9uKCl7aT0hMCx5KHQud29ya2VySWQse2RhdGE6W10sZXJyb3JzOltdLG1ldGE6e2Fib3J0ZWQ6ITB9fSl9LHBhdXNlOmIscmVzdW1lOmJ9O2lmKHooci51c2VyU3RlcCkpe2Zvcih2YXIgcz0wO3M8dC5yZXN1bHRzLmRhdGEubGVuZ3RoJiYoci51c2VyU3RlcCh7ZGF0YTpbdC5yZXN1bHRzLmRhdGFbc11dLGVycm9yczp0LnJlc3VsdHMuZXJyb3JzLG1ldGE6dC5yZXN1bHRzLm1ldGF9LG4pLCFpKTtzKyspO2RlbGV0ZSB0LnJlc3VsdHN9ZWxzZSB6KHIudXNlckNodW5rKSYmKHIudXNlckNodW5rKHQucmVzdWx0cyxuLHQuZmlsZSksZGVsZXRlIHQucmVzdWx0cyl9dC5maW5pc2hlZCYmIWkmJnkodC53b3JrZXJJZCx0LnJlc3VsdHMpfWZ1bmN0aW9uIHkoZSx0KXt2YXIgcj1oW2VdO3ooci51c2VyQ29tcGxldGUpJiZyLnVzZXJDb21wbGV0ZSh0KSxyLnRlcm1pbmF0ZSgpLGRlbGV0ZSBoW2VdfWZ1bmN0aW9uIGIoKXt0aHJvd1wiTm90IGltcGxlbWVudGVkLlwifWZ1bmN0aW9uIEUoZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVybiBlO3ZhciB0PUFycmF5LmlzQXJyYXkoZSk/W106e307Zm9yKHZhciByIGluIGUpdFtyXT1FKGVbcl0pO3JldHVybiB0fWZ1bmN0aW9uIHcoZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtlLmFwcGx5KHQsYXJndW1lbnRzKX19ZnVuY3Rpb24geihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfXJldHVybiBvP2Yub25tZXNzYWdlPWZ1bmN0aW9uKGUpe3ZhciB0PWUuZGF0YTt2b2lkIDA9PT1rLldPUktFUl9JRCYmdCYmKGsuV09SS0VSX0lEPXQud29ya2VySWQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0LmlucHV0KWYucG9zdE1lc3NhZ2Uoe3dvcmtlcklkOmsuV09SS0VSX0lELHJlc3VsdHM6ay5wYXJzZSh0LmlucHV0LHQuY29uZmlnKSxmaW5pc2hlZDohMH0pO2Vsc2UgaWYoZi5GaWxlJiZ0LmlucHV0IGluc3RhbmNlb2YgRmlsZXx8dC5pbnB1dCBpbnN0YW5jZW9mIE9iamVjdCl7dmFyIHI9ay5wYXJzZSh0LmlucHV0LHQuY29uZmlnKTtyJiZmLnBvc3RNZXNzYWdlKHt3b3JrZXJJZDprLldPUktFUl9JRCxyZXN1bHRzOnIsZmluaXNoZWQ6ITB9KX19OmsuV09SS0VSU19TVVBQT1JURUQmJihlPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpLHM9ZS5sZW5ndGg/ZVtlLmxlbmd0aC0xXS5zcmM6XCJcIixkb2N1bWVudC5ib2R5P2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZnVuY3Rpb24oKXthPSEwfSwhMCk6YT0hMCksKGMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobC5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1jLChwLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSkuY29uc3RydWN0b3I9cCwoXy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShfLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPV8sKGcucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobC5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1nLGt9KTsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkYXRhL2RhdGEuY3N2P3Y9NTc1M2RjXCI7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsLmF1dG9Db21wbGV0ZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgdmFyIGRhdGFBdHRyaWJ1dGUgPSBcImRhdGEtcmVzdWx0XCI7XG4gIHZhciBzZWxlY3QgPSB7XG4gICAgcmVzdWx0c0xpc3Q6IFwiYXV0b0NvbXBsZXRlX3Jlc3VsdHNfbGlzdFwiLFxuICAgIHJlc3VsdDogXCJhdXRvQ29tcGxldGVfcmVzdWx0XCIsXG4gICAgaGlnaGxpZ2h0OiBcImF1dG9Db21wbGV0ZV9oaWdobGlnaHRlZFwiXG4gIH07XG4gIHZhciBnZXRJbnB1dCA9IGZ1bmN0aW9uIGdldElucHV0KHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIDogc2VsZWN0b3IoKTtcbiAgfTtcbiAgdmFyIGNyZWF0ZVJlc3VsdHNMaXN0ID0gZnVuY3Rpb24gY3JlYXRlUmVzdWx0c0xpc3QocmVuZGVyUmVzdWx0cykge1xuICAgIHZhciByZXN1bHRzTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICBpZiAocmVuZGVyUmVzdWx0cy5jb250YWluZXIpIHtcbiAgICAgIHNlbGVjdC5yZXN1bHRzTGlzdCA9IHJlbmRlclJlc3VsdHMuY29udGFpbmVyKHJlc3VsdHNMaXN0KSB8fCBzZWxlY3QucmVzdWx0c0xpc3Q7XG4gICAgfVxuICAgIHJlc3VsdHNMaXN0LmNsYXNzTGlzdC5hZGQoc2VsZWN0LnJlc3VsdHNMaXN0KTtcbiAgICByZW5kZXJSZXN1bHRzLmRlc3RpbmF0aW9uLmluc2VydEFkamFjZW50RWxlbWVudChyZW5kZXJSZXN1bHRzLnBvc2l0aW9uLCByZXN1bHRzTGlzdCk7XG4gICAgcmV0dXJuIHJlc3VsdHNMaXN0O1xuICB9O1xuICB2YXIgaGlnaGxpZ2h0ID0gZnVuY3Rpb24gaGlnaGxpZ2h0KHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiPHNwYW4gY2xhc3M9XCIuY29uY2F0KHNlbGVjdC5oaWdobGlnaHQsIFwiPlwiKS5jb25jYXQodmFsdWUsIFwiPC9zcGFuPlwiKTtcbiAgfTtcbiAgdmFyIGFkZFJlc3VsdHNUb0xpc3QgPSBmdW5jdGlvbiBhZGRSZXN1bHRzVG9MaXN0KHJlc3VsdHNMaXN0LCBkYXRhU3JjLCBkYXRhS2V5LCBjYWxsYmFjaykge1xuICAgIGRhdGFTcmMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQsIHJlY29yZCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgIHZhciByZXN1bHRWYWx1ZSA9IGRhdGFTcmNbcmVjb3JkXS5zb3VyY2VbZGF0YUtleV0gfHwgZGF0YVNyY1tyZWNvcmRdLnNvdXJjZTtcbiAgICAgIHJlc3VsdC5zZXRBdHRyaWJ1dGUoZGF0YUF0dHJpYnV0ZSwgcmVzdWx0VmFsdWUpO1xuICAgICAgcmVzdWx0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHNlbGVjdC5yZXN1bHQpO1xuICAgICAgcmVzdWx0LnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMVwiKTtcbiAgICAgIHJlc3VsdC5pbm5lckhUTUwgPSBjYWxsYmFjayA/IGNhbGxiYWNrKGV2ZW50LCByZXN1bHQpIDogZXZlbnQubWF0Y2ggfHwgZXZlbnQ7XG4gICAgICByZXN1bHRzTGlzdC5hcHBlbmRDaGlsZChyZXN1bHQpO1xuICAgIH0pO1xuICB9O1xuICB2YXIgbmF2aWdhdGlvbiA9IGZ1bmN0aW9uIG5hdmlnYXRpb24oc2VsZWN0b3IsIHJlc3VsdHNMaXN0KSB7XG4gICAgdmFyIGlucHV0ID0gZ2V0SW5wdXQoc2VsZWN0b3IpO1xuICAgIHZhciBmaXJzdCA9IHJlc3VsdHNMaXN0LmZpcnN0Q2hpbGQ7XG4gICAgZG9jdW1lbnQub25rZXlkb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgYWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgIGlmIChhY3RpdmUgIT09IGZpcnN0ICYmIGFjdGl2ZSAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgIGFjdGl2ZS5wcmV2aW91c1NpYmxpbmcuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFjdGl2ZSA9PT0gZmlyc3QpIHtcbiAgICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgIGlmIChhY3RpdmUgPT09IGlucHV0ICYmIHJlc3VsdHNMaXN0LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZmlyc3QuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFjdGl2ZSAhPT0gcmVzdWx0c0xpc3QubGFzdENoaWxkKSB7XG4gICAgICAgICAgICBhY3RpdmUubmV4dFNpYmxpbmcuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgdmFyIGNsZWFyUmVzdWx0cyA9IGZ1bmN0aW9uIGNsZWFyUmVzdWx0cyhyZXN1bHRzTGlzdCkge1xuICAgIHJldHVybiByZXN1bHRzTGlzdC5pbm5lckhUTUwgPSBcIlwiO1xuICB9O1xuICB2YXIgZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKGZpZWxkLCByZXN1bHRzTGlzdCwgY2FsbGJhY2ssIHJlc3VsdHNWYWx1ZXMsIGRhdGFLZXkpIHtcbiAgICB2YXIgcmVzdWx0cyA9IHJlc3VsdHNMaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIuY29uY2F0KHNlbGVjdC5yZXN1bHQpKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgIFtcIm1vdXNlZG93blwiLCBcImtleWRvd25cIl0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XG4gICAgICAgIHJlc3VsdHNbc2VsZWN0aW9uXS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGV2ZW50VHlwZSA9PT0gXCJtb3VzZWRvd25cIiB8fCBldmVudC5rZXlDb2RlID09PSAxMykge1xuICAgICAgICAgICAgY2FsbGJhY2soe1xuICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgIHF1ZXJ5OiBnZXRJbnB1dChmaWVsZCkudmFsdWUsXG4gICAgICAgICAgICAgIHJlc3VsdHM6IHJlc3VsdHNWYWx1ZXMubWFwKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkLnNvdXJjZTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHNlbGVjdGlvbjogcmVzdWx0c1ZhbHVlcy5maW5kKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXNWYWx1ZSA9IHZhbHVlLnNvdXJjZVtkYXRhS2V5XSB8fCB2YWx1ZS5zb3VyY2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc1ZhbHVlID09PSBldmVudC50YXJnZXQuY2xvc2VzdChcIi5cIi5jb25jYXQoc2VsZWN0LnJlc3VsdCkpLmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlKTtcbiAgICAgICAgICAgICAgfSkuc291cmNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNsZWFyUmVzdWx0cyhyZXN1bHRzTGlzdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICB2YXIgYXV0b0NvbXBsZXRlVmlldyA9IHtcbiAgICBnZXRJbnB1dDogZ2V0SW5wdXQsXG4gICAgY3JlYXRlUmVzdWx0c0xpc3Q6IGNyZWF0ZVJlc3VsdHNMaXN0LFxuICAgIGhpZ2hsaWdodDogaGlnaGxpZ2h0LFxuICAgIGFkZFJlc3VsdHNUb0xpc3Q6IGFkZFJlc3VsdHNUb0xpc3QsXG4gICAgbmF2aWdhdGlvbjogbmF2aWdhdGlvbixcbiAgICBjbGVhclJlc3VsdHM6IGNsZWFyUmVzdWx0cyxcbiAgICBnZXRTZWxlY3Rpb246IGdldFNlbGVjdGlvblxuICB9O1xuXG4gIHZhciBhdXRvQ29tcGxldGUgPVxuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gYXV0b0NvbXBsZXRlKGNvbmZpZykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIGF1dG9Db21wbGV0ZSk7XG4gICAgICB0aGlzLnNlbGVjdG9yID0gY29uZmlnLnNlbGVjdG9yIHx8IFwiI2F1dG9Db21wbGV0ZVwiO1xuICAgICAgdGhpcy5kYXRhID0ge1xuICAgICAgICBzcmM6IGZ1bmN0aW9uIHNyYygpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIGNvbmZpZy5kYXRhLnNyYyA9PT0gXCJmdW5jdGlvblwiID8gY29uZmlnLmRhdGEuc3JjKCkgOiBjb25maWcuZGF0YS5zcmM7XG4gICAgICAgIH0sXG4gICAgICAgIGtleTogY29uZmlnLmRhdGEua2V5XG4gICAgICB9O1xuICAgICAgdGhpcy5zZWFyY2hFbmdpbmUgPSBjb25maWcuc2VhcmNoRW5naW5lID09PSBcImxvb3NlXCIgPyBcImxvb3NlXCIgOiBcInN0cmljdFwiO1xuICAgICAgdGhpcy50aHJlc2hvbGQgPSBjb25maWcudGhyZXNob2xkIHx8IDA7XG4gICAgICB0aGlzLnJlc3VsdHNMaXN0ID0gYXV0b0NvbXBsZXRlVmlldy5jcmVhdGVSZXN1bHRzTGlzdCh7XG4gICAgICAgIGNvbnRhaW5lcjogY29uZmlnLnJlc3VsdHNMaXN0ICYmIGNvbmZpZy5yZXN1bHRzTGlzdC5jb250YWluZXIgPyBjb25maWcucmVzdWx0c0xpc3QuY29udGFpbmVyIDogZmFsc2UsXG4gICAgICAgIGRlc3RpbmF0aW9uOiBjb25maWcucmVzdWx0c0xpc3QgJiYgY29uZmlnLnJlc3VsdHNMaXN0LmRlc3RpbmF0aW9uID8gY29uZmlnLnJlc3VsdHNMaXN0LmRlc3RpbmF0aW9uIDogYXV0b0NvbXBsZXRlVmlldy5nZXRJbnB1dCh0aGlzLnNlbGVjdG9yKSxcbiAgICAgICAgcG9zaXRpb246IGNvbmZpZy5yZXN1bHRzTGlzdCAmJiBjb25maWcucmVzdWx0c0xpc3QucG9zaXRpb24gPyBjb25maWcucmVzdWx0c0xpc3QucG9zaXRpb24gOiBcImFmdGVyZW5kXCJcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wbGFjZUhvbGRlciA9IGNvbmZpZy5wbGFjZUhvbGRlcjtcbiAgICAgIHRoaXMubWF4UmVzdWx0cyA9IGNvbmZpZy5tYXhSZXN1bHRzIHx8IDU7XG4gICAgICB0aGlzLnJlc3VsdEl0ZW0gPSBjb25maWcucmVzdWx0SXRlbTtcbiAgICAgIHRoaXMuaGlnaGxpZ2h0ID0gY29uZmlnLmhpZ2hsaWdodCB8fCBmYWxzZTtcbiAgICAgIHRoaXMub25TZWxlY3Rpb24gPSBjb25maWcub25TZWxlY3Rpb247XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgX2NyZWF0ZUNsYXNzKGF1dG9Db21wbGV0ZSwgW3tcbiAgICAgIGtleTogXCJzZWFyY2hcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2gocXVlcnksIHJlY29yZCkge1xuICAgICAgICB2YXIgaGlnaGxpZ2h0ID0gdGhpcy5oaWdobGlnaHQ7XG4gICAgICAgIHZhciByZWNvcmRMb3dlckNhc2UgPSByZWNvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHRoaXMuc2VhcmNoRW5naW5lID09PSBcImxvb3NlXCIpIHtcbiAgICAgICAgICBxdWVyeSA9IHF1ZXJ5LnJlcGxhY2UoLyAvZywgXCJcIik7XG4gICAgICAgICAgdmFyIG1hdGNoID0gW107XG4gICAgICAgICAgdmFyIHNlYXJjaFBvc2l0aW9uID0gMDtcbiAgICAgICAgICBmb3IgKHZhciBudW1iZXIgPSAwOyBudW1iZXIgPCByZWNvcmRMb3dlckNhc2UubGVuZ3RoOyBudW1iZXIrKykge1xuICAgICAgICAgICAgdmFyIHJlY29yZENoYXIgPSByZWNvcmRMb3dlckNhc2VbbnVtYmVyXTtcbiAgICAgICAgICAgIGlmIChzZWFyY2hQb3NpdGlvbiA8IHF1ZXJ5Lmxlbmd0aCAmJiByZWNvcmRDaGFyID09PSBxdWVyeVtzZWFyY2hQb3NpdGlvbl0pIHtcbiAgICAgICAgICAgICAgcmVjb3JkQ2hhciA9IGhpZ2hsaWdodCA/IGF1dG9Db21wbGV0ZVZpZXcuaGlnaGxpZ2h0KHJlY29yZENoYXIpIDogcmVjb3JkQ2hhcjtcbiAgICAgICAgICAgICAgc2VhcmNoUG9zaXRpb24rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hdGNoLnB1c2gocmVjb3JkQ2hhcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWFyY2hQb3NpdGlvbiAhPT0gcXVlcnkubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtYXRjaC5qb2luKFwiXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChyZWNvcmRMb3dlckNhc2UuaW5jbHVkZXMocXVlcnkpKSB7XG4gICAgICAgICAgICBpZiAoaGlnaGxpZ2h0KSB7XG4gICAgICAgICAgICAgIHZhciBpbnB1dFZhbHVlID0gYXV0b0NvbXBsZXRlVmlldy5nZXRJbnB1dCh0aGlzLnNlbGVjdG9yKS52YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkTG93ZXJDYXNlLnJlcGxhY2UoaW5wdXRWYWx1ZSwgYXV0b0NvbXBsZXRlVmlldy5oaWdobGlnaHQoaW5wdXRWYWx1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZExvd2VyQ2FzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibGlzdE1hdGNoZWRSZXN1bHRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdE1hdGNoZWRSZXN1bHRzKGRhdGEpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlc0xpc3QgPSBbXTtcbiAgICAgICAgdmFyIGlucHV0VmFsdWUgPSBhdXRvQ29tcGxldGVWaWV3LmdldElucHV0KHRoaXMuc2VsZWN0b3IpLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGRhdGEuZmlsdGVyKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5zZWFyY2goaW5wdXRWYWx1ZSwgcmVjb3JkW190aGlzLmRhdGEua2V5XSB8fCByZWNvcmQpO1xuICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgcmVzTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgICAgICAgICBzb3VyY2U6IHJlY29yZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGxpc3QgPSByZXNMaXN0LnNsaWNlKDAsIHRoaXMubWF4UmVzdWx0cyk7XG4gICAgICAgIGF1dG9Db21wbGV0ZVZpZXcuYWRkUmVzdWx0c1RvTGlzdCh0aGlzLnJlc3VsdHNMaXN0LCBsaXN0LCB0aGlzLmRhdGEua2V5LCB0aGlzLnJlc3VsdEl0ZW0pO1xuICAgICAgICBhdXRvQ29tcGxldGVWaWV3Lm5hdmlnYXRpb24odGhpcy5zZWxlY3RvciwgdGhpcy5yZXN1bHRzTGlzdCk7XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpZ25pdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpZ25pdGUoZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgdmFyIGlucHV0ID0gYXV0b0NvbXBsZXRlVmlldy5nZXRJbnB1dChzZWxlY3Rvcik7XG4gICAgICAgIHZhciBwbGFjZUhvbGRlciA9IHRoaXMucGxhY2VIb2xkZXI7XG4gICAgICAgIHZhciBvblNlbGVjdGlvbiA9IHRoaXMub25TZWxlY3Rpb247XG4gICAgICAgIGlmIChwbGFjZUhvbGRlcikge1xuICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIHBsYWNlSG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dC5vbmtleXVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciByZXN1bHRzTGlzdCA9IF90aGlzMi5yZXN1bHRzTGlzdDtcbiAgICAgICAgICB2YXIgY2xlYXJSZXN1bHRzID0gYXV0b0NvbXBsZXRlVmlldy5jbGVhclJlc3VsdHMocmVzdWx0c0xpc3QpO1xuICAgICAgICAgIGlmIChpbnB1dC52YWx1ZS5sZW5ndGggPiBfdGhpczIudGhyZXNob2xkICYmIGlucHV0LnZhbHVlLnJlcGxhY2UoLyAvZywgXCJcIikubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgbGlzdCA9IF90aGlzMi5saXN0TWF0Y2hlZFJlc3VsdHMoZGF0YSk7XG4gICAgICAgICAgICBpZiAob25TZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlVmlldy5nZXRTZWxlY3Rpb24oc2VsZWN0b3IsIHJlc3VsdHNMaXN0LCBvblNlbGVjdGlvbiwgbGlzdCwgX3RoaXMyLmRhdGEua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImluaXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgICAgdmFyIGRhdGFTcmMgPSB0aGlzLmRhdGEuc3JjKCk7XG4gICAgICAgIGlmIChkYXRhU3JjIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgIGRhdGFTcmMudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5pZ25pdGUoZGF0YSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pZ25pdGUoZGF0YVNyYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIGF1dG9Db21wbGV0ZTtcbiAgfSgpO1xuXG4gIHJldHVybiBhdXRvQ29tcGxldGU7XG5cbn0pKSk7XG4iLCIvKiohXG4gKiBAZmlsZU92ZXJ2aWV3IEtpY2thc3MgbGlicmFyeSB0byBjcmVhdGUgYW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuXG4gKiBAdmVyc2lvbiAxLjE0LjdcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxudmFyIGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcbnZhciB0aW1lb3V0RHVyYXRpb24gPSAwO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBsb25nZXJUaW1lb3V0QnJvd3NlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgdGltZW91dER1cmF0aW9uID0gMTtcbiAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xudmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgY3NzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50Tm9kZSBvciB0aGUgaG9zdCBvZiB0aGUgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gc2Nyb2xsIHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXRcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICBjYXNlICdIVE1MJzpcbiAgICBjYXNlICdCT0RZJzpcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keTtcbiAgfVxuXG4gIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuXG4gIHZhciBfZ2V0U3R5bGVDb21wdXRlZFByb3AgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dZO1xuXG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxudmFyIGlzSUUxMSA9IGlzQnJvd3NlciAmJiAhISh3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBpc0lFMTAgPSBpc0Jyb3dzZXIgJiYgL01TSUUgMTAvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgYnJvd3NlciBpcyBJbnRlcm5ldCBFeHBsb3JlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFXG4gKi9cbmZ1bmN0aW9uIGlzSUUodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiA9PT0gMTEpIHtcbiAgICByZXR1cm4gaXNJRTExO1xuICB9XG4gIGlmICh2ZXJzaW9uID09PSAxMCkge1xuICAgIHJldHVybiBpc0lFMTA7XG4gIH1cbiAgcmV0dXJuIGlzSUUxMSB8fCBpc0lFMTA7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0IHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgdmFyIG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgbnVsbDtcbiAgLy8gU2tpcCBoaWRkZW4gZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbiBvZmZzZXRQYXJlbnRcbiAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xuXG4gIGlmICghbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gLm9mZnNldFBhcmVudCB3aWxsIHJldHVybiB0aGUgY2xvc2VzdCBUSCwgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChbJ1RIJywgJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5mdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgdmFyIHN0YXJ0ID0gb3JkZXIgPyBlbGVtZW50MSA6IGVsZW1lbnQyO1xuICB2YXIgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIHZhciBjb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcblxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5mdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7XG5cbiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkge1xuICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbi8qXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xuICogUmVzdWx0IG9mIGBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHlgIG9uIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyAtIGB4YCBvciBgeWBcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcbiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUEgKyAnV2lkdGgnXSwgMTApICsgcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQiArICdXaWR0aCddLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gTWF0aC5tYXgoYm9keVsnb2Zmc2V0JyArIGF4aXNdLCBib2R5WydzY3JvbGwnICsgYXhpc10sIGh0bWxbJ2NsaWVudCcgKyBheGlzXSwgaHRtbFsnb2Zmc2V0JyArIGF4aXNdLCBodG1sWydzY3JvbGwnICsgYXhpc10sIGlzSUUoMTApID8gcGFyc2VJbnQoaHRtbFsnb2Zmc2V0JyArIGF4aXNdKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCcpXSkgOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoZG9jdW1lbnQpIHtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHtcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHRcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIHRyeSB7XG4gICAgaWYgKGlzSUUoMTApKSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0O1xuICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcblxuICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzXG4gIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKGVsZW1lbnQub3duZXJEb2N1bWVudCkgOiB7fTtcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQucmlnaHQgLSByZXN1bHQubGVmdDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuYm90dG9tIC0gcmVzdWx0LnRvcDtcblxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIHZhciB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgICBob3JpelNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd4Jyk7XG4gICAgdmVydFNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd5Jyk7XG5cbiAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7XG4gICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICB9XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBpc0lFMTAgPSBpc0lFKDEwKTtcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgdmFyIHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCwgMTApO1xuICB2YXIgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoLCAxMCk7XG5cbiAgLy8gSW4gY2FzZXMgd2hlcmUgdGhlIHBhcmVudCBpcyBmaXhlZCwgd2UgbXVzdCBpZ25vcmUgbmVnYXRpdmUgc2Nyb2xsIGluIG9mZnNldCBjYWxjXG4gIGlmIChmaXhlZFBvc2l0aW9uICYmIGlzSFRNTCkge1xuICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApO1xuICAgIHBhcmVudFJlY3QubGVmdCA9IE1hdGgubWF4KHBhcmVudFJlY3QubGVmdCwgMCk7XG4gIH1cbiAgdmFyIG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0XG4gIH0pO1xuICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7XG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XG5cbiAgLy8gU3VidHJhY3QgbWFyZ2lucyBvZiBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBpdCdzIGJlaW5nIHVzZWQgYXMgcGFyZW50XG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xuICAvLyBkaWZmZXJlbnRseSB3aGVuIG1hcmdpbnMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoZSBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpblxuICAvLyB0aGUgYm94IG9mIHRoZSBkb2N1bWVudEVsZW1lbnQsIGluIHRoZSBvdGhlciBjYXNlcyBub3QuXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AsIDEwKTtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQsIDEwKTtcblxuICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMuYm90dG9tIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcblxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxuICAgIG9mZnNldHMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gIH1cblxuICBpZiAoaXNJRTEwICYmICFmaXhlZFBvc2l0aW9uID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudCkgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJykge1xuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcbiAgdmFyIGV4Y2x1ZGVTY3JvbGwgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG5cbiAgdmFyIHNjcm9sbFRvcCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwpIDogMDtcbiAgdmFyIHNjcm9sbExlZnQgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sLCAnbGVmdCcpIDogMDtcblxuICB2YXIgb2Zmc2V0ID0ge1xuICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLFxuICAgIGxlZnQ6IHNjcm9sbExlZnQgLSByZWxhdGl2ZU9mZnNldC5sZWZ0ICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luTGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkKHBhcmVudE5vZGUpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBwYXJlbnQgb2YgYW4gZWxlbWVudCB0aGF0IGhhcyBhIHRyYW5zZm9ybWVkIHByb3BlcnR5IGRlZmluZWRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IGZpcnN0IHRyYW5zZm9ybWVkIHBhcmVudCBvciBkb2N1bWVudEVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzSUUoKSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgdmFyIGVsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB3aGlsZSAoZWwgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsLCAndHJhbnNmb3JtJykgPT09ICdub25lJykge1xuICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWwgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xufVxuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkUG9zaXRpb24gLSBJcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5mdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcblxuICB2YXIgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG5cbiAgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2VcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7XG4gICAgYm91bmRhcmllcyA9IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcbiAgICB2YXIgYm91bmRhcmllc05vZGUgPSB2b2lkIDA7XG4gICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTtcbiAgICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd3aW5kb3cnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBib3VuZGFyaWVzRWxlbWVudDtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0cyA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShib3VuZGFyaWVzTm9kZSwgb2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcblxuICAgIC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvblxuICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmICFpc0ZpeGVkKG9mZnNldFBhcmVudCkpIHtcbiAgICAgIHZhciBfZ2V0V2luZG93U2l6ZXMgPSBnZXRXaW5kb3dTaXplcyhwb3BwZXIub3duZXJEb2N1bWVudCksXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcbiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDtcblxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBwYWRkaW5nID0gcGFkZGluZyB8fCAwO1xuICB2YXIgaXNQYWRkaW5nTnVtYmVyID0gdHlwZW9mIHBhZGRpbmcgPT09ICdudW1iZXInO1xuICBib3VuZGFyaWVzLmxlZnQgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcubGVmdCB8fCAwO1xuICBib3VuZGFyaWVzLnRvcCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy50b3AgfHwgMDtcbiAgYm91bmRhcmllcy5yaWdodCAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5yaWdodCB8fCAwO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5ib3R0b20gfHwgMDtcblxuICByZXR1cm4gYm91bmRhcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0QXJlYShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcblxuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQocGxhY2VtZW50LCByZWZSZWN0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIHBhZGRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7XG5cbiAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCdhdXRvJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpO1xuXG4gIHZhciByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH0sXG4gICAgYm90dG9tOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5ib3R0b20gLSByZWZSZWN0LmJvdHRvbVxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNvcnRlZEFyZWFzID0gT2JqZWN0LmtleXMocmVjdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGtleToga2V5XG4gICAgfSwgcmVjdHNba2V5XSwge1xuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKVxuICAgIH0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIuYXJlYSAtIGEuYXJlYTtcbiAgfSk7XG5cbiAgdmFyIGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodDtcbiAgICByZXR1cm4gd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0O1xuICB9KTtcblxuICB2YXIgY29tcHV0ZWRQbGFjZW1lbnQgPSBmaWx0ZXJlZEFyZWFzLmxlbmd0aCA+IDAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleSA6IHNvcnRlZEFyZWFzWzBdLmtleTtcblxuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgcmV0dXJuIGNvbXB1dGVkUGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7RWxlbWVudH0gZml4ZWRQb3NpdGlvbiAtIGlzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHZhciBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wIHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tIHx8IDApO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCB8fCAwKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHhcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgdmFyIHBvcHBlck9mZnNldHMgPSB7XG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIHZhciBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cblxuLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJvcCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoZnVuY3Rpb24gKGN1cikge1xuICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICB2YXIgbWF0Y2ggPSBmaW5kKGFyciwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIHZhciBmbiA9IG1vZGlmaWVyWydmdW5jdGlvbiddIHx8IG1vZGlmaWVyLmZuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIGlmIChtb2RpZmllci5lbmFibGVkICYmIGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAvLyBBZGQgcHJvcGVydGllcyB0byBvZmZzZXRzIHRvIG1ha2UgdGhlbSBhIGNvbXBsZXRlIGNsaWVudFJlY3Qgb2JqZWN0XG4gICAgICAvLyB3ZSBkbyB0aGlzIGJlZm9yZSBlYWNoIG1vZGlmaWVyIHRvIG1ha2Ugc3VyZSB0aGUgcHJldmlvdXMgb25lIGRvZXNuJ3RcbiAgICAgIC8vIG1lc3Mgd2l0aCB0aGVzZSB2YWx1ZXNcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSk7XG5cbiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge31cbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHModGhpcy5zdGF0ZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQodGhpcy5vcHRpb25zLnBsYWNlbWVudCwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICAvLyBzdG9yZSB0aGUgY29tcHV0ZWQgcGxhY2VtZW50IGluc2lkZSBgb3JpZ2luYWxQbGFjZW1lbnRgXG4gIGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICBkYXRhLnBvc2l0aW9uRml4ZWQgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZDtcblxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0UG9wcGVyT2Zmc2V0cyh0aGlzLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBpcyBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XG4gIHJldHVybiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkO1xuICAgIHJldHVybiBlbmFibGVkICYmIG5hbWUgPT09IG1vZGlmaWVyTmFtZTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdG9DaGVjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIHBvcHBlci5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXR5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge1dpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KGVsZW1lbnQpIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uXG4gKiB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4gSXQgYWxzbyB3b24ndCB0cmlnZ2VyIGBvblVwZGF0ZWAgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtCb29sZWFufSBzaG91bGRSb3VuZCAtIElmIHRoZSBvZmZzZXRzIHNob3VsZCBiZSByb3VuZGVkIGF0IGFsbFxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBvcHBlcidzIHBvc2l0aW9uIG9mZnNldHMgcm91bmRlZFxuICpcbiAqIFRoZSB0YWxlIG9mIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcuIEl0J3Mgc3RpbGwgbm90IDEwMCUgcGVyZmVjdCwgYnV0IGFzXG4gKiBnb29kIGFzIGl0IGNhbiBiZSB3aXRoaW4gcmVhc29uLlxuICogRGlzY3Vzc2lvbiBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9wdWxsLzcxNVxuICpcbiAqIExvdyBEUEkgc2NyZWVucyBjYXVzZSBhIHBvcHBlciB0byBiZSBibHVycnkgaWYgbm90IHVzaW5nIGZ1bGwgcGl4ZWxzIChTYWZhcmlcbiAqIGFzIHdlbGwgb24gSGlnaCBEUEkgc2NyZWVucykuXG4gKlxuICogRmlyZWZveCBwcmVmZXJzIG5vIHJvdW5kaW5nIGZvciBwb3NpdGlvbmluZyBhbmQgZG9lcyBub3QgaGF2ZSBibHVycmluZXNzIG9uXG4gKiBoaWdoIERQSSBzY3JlZW5zLlxuICpcbiAqIE9ubHkgaG9yaXpvbnRhbCBwbGFjZW1lbnQgYW5kIGxlZnQvcmlnaHQgdmFsdWVzIG5lZWQgdG8gYmUgY29uc2lkZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgc2hvdWxkUm91bmQpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4gIHZhciBub1JvdW5kID0gZnVuY3Rpb24gbm9Sb3VuZCh2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgdmFyIHJlZmVyZW5jZVdpZHRoID0gcm91bmQocmVmZXJlbmNlLndpZHRoKTtcbiAgdmFyIHBvcHBlcldpZHRoID0gcm91bmQocG9wcGVyLndpZHRoKTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoZGF0YS5wbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIGlzVmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuaW5kZXhPZignLScpICE9PSAtMTtcbiAgdmFyIHNhbWVXaWR0aFBhcml0eSA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gcG9wcGVyV2lkdGggJSAyO1xuICB2YXIgYm90aE9kZFdpZHRoID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSAxICYmIHBvcHBlcldpZHRoICUgMiA9PT0gMTtcblxuICB2YXIgaG9yaXpvbnRhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiBpc1ZlcnRpY2FsIHx8IGlzVmFyaWF0aW9uIHx8IHNhbWVXaWR0aFBhcml0eSA/IHJvdW5kIDogZmxvb3I7XG4gIHZhciB2ZXJ0aWNhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiByb3VuZDtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IGhvcml6b250YWxUb0ludGVnZXIoYm90aE9kZFdpZHRoICYmICFpc1ZhcmlhdGlvbiAmJiBzaG91bGRSb3VuZCA/IHBvcHBlci5sZWZ0IC0gMSA6IHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IGhvcml6b250YWxUb0ludGVnZXIocG9wcGVyLnJpZ2h0KVxuICB9O1xufVxuXG52YXIgaXNGaXJlZm94ID0gaXNCcm93c2VyICYmIC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIHggPSBvcHRpb25zLngsXG4gICAgICB5ID0gb3B0aW9ucy55O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcblxuICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJztcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7XG4gIH1cbiAgdmFyIGdwdUFjY2VsZXJhdGlvbiA9IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvblxuICB9O1xuXG4gIHZhciBvZmZzZXRzID0gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPCAyIHx8ICFpc0ZpcmVmb3gpO1xuXG4gIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIHZhciBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICB2YXIgbGVmdCA9IHZvaWQgMCxcbiAgICAgIHRvcCA9IHZvaWQgMDtcbiAgaWYgKHNpZGVBID09PSAnYm90dG9tJykge1xuICAgIC8vIHdoZW4gb2Zmc2V0UGFyZW50IGlzIDxodG1sPiB0aGUgcG9zaXRpb25pbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIChleGNsdWRpbmcgdGhlIHNjcm9sbGJhcilcbiAgICAvLyBhbmQgbm90IHRoZSBib3R0b20gb2YgdGhlIGh0bWwgZWxlbWVudFxuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRvcCA9IG9mZnNldHMudG9wO1xuICB9XG4gIGlmIChzaWRlQiA9PT0gJ3JpZ2h0Jykge1xuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnRcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpO1xuICBkYXRhLmFycm93U3R5bGVzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5hcnJvdywgZGF0YS5hcnJvd1N0eWxlcyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChtb2RpZmllcnMsIHJlcXVlc3RpbmdOYW1lLCByZXF1ZXN0ZWROYW1lKSB7XG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lO1xuICB9KTtcblxuICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7XG4gICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7XG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzJGFycm93O1xuXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1bmN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSwgMTApO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10sIDEwKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgc2lkZSwgTWF0aC5yb3VuZChzaWRlVmFsdWUpKSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgYWx0U2lkZSwgJycpLCBfZGF0YSRvZmZzZXRzJGFycm93KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tZW5kYCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXNldHMgdGhlIHBvcHBlcidzIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGRvY3VtZW50IHNpemUgY2FuIGJlIGNhbGN1bGF0ZWQgZXhjbHVkaW5nXG4gIC8vIHRoZSBzaXplIG9mIHRoZSBwb3BwZXIgZWxlbWVudCBpdHNlbGZcbiAgdmFyIHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cbiAgdmFyIHRvcCA9IHBvcHBlclN0eWxlcy50b3AsXG4gICAgICBsZWZ0ID0gcG9wcGVyU3R5bGVzLmxlZnQsXG4gICAgICB0cmFuc2Zvcm0gPSBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF07XG5cbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcbiAgcG9wcGVyU3R5bGVzLnRvcCA9IHRvcDtcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0O1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICB2YXIgY2hlY2sgPSB7XG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xuICB9KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XG5cbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLFxuICAgICAgZW5kOiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBzaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0LWxlc3MsIGludGVycHJldGVkIGFzIHBpeGVsc1xuICAgKiAtIGAlYCBvciBgJXJgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiAtIGB2d2AsIENTUyB2aWV3cG9ydCB3aWR0aCB1bml0XG4gICAqIC0gYHZoYCwgQ1NTIHZpZXdwb3J0IGhlaWdodCB1bml0XG4gICAqXG4gICAqIEZvciBsZW5ndGggaXMgaW50ZW5kZWQgdGhlIG1haW4gYXhpcyByZWxhdGl2ZSB0byB0aGUgcGxhY2VtZW50IG9mIHRoZSBwb3BwZXIuPGJyIC8+XG4gICAqIFRoaXMgbWVhbnMgdGhhdCBpZiB0aGUgcGxhY2VtZW50IGlzIGB0b3BgIG9yIGBib3R0b21gLCB0aGUgbGVuZ3RoIHdpbGwgYmUgdGhlXG4gICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGBoZWlnaHRgLlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gWW91IGNhbiByZWFkIG1vcmUgb24gdGhpcyBhdCB0aGlzIFtpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MykuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEEgc2NlbmFyaW8gZXhpc3RzIHdoZXJlIHRoZSByZWZlcmVuY2UgaXRzZWxmIGlzIG5vdCB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuPGJyIC8+XG4gICAqIFdlIGNhbiBzYXkgaXQgaGFzIFwiZXNjYXBlZCB0aGUgYm91bmRhcmllc1wiIOKAlCBvciBqdXN0IFwiZXNjYXBlZFwiLjxiciAvPlxuICAgKiBJbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBkZWNpZGUgd2hldGhlciB0aGUgcG9wcGVyIHNob3VsZCBlaXRoZXI6XG4gICAqXG4gICAqIC0gZGV0YWNoIGZyb20gdGhlIHJlZmVyZW5jZSBhbmQgcmVtYWluIFwidHJhcHBlZFwiIGluIHRoZSBib3VuZGFyaWVzLCBvclxuICAgKiAtIGlmIGl0IHNob3VsZCBpZ25vcmUgdGhlIGJvdW5kYXJ5IGFuZCBcImVzY2FwZSB3aXRoIGl0cyByZWZlcmVuY2VcIlxuICAgKlxuICAgKiBXaGVuIGBlc2NhcGVXaXRoUmVmZXJlbmNlYCBpcyBzZXQgdG9gdHJ1ZWAgYW5kIHJlZmVyZW5jZSBpcyBjb21wbGV0ZWx5XG4gICAqIG91dHNpZGUgaXRzIGJvdW5kYXJpZXMsIHRoZSBwb3BwZXIgd2lsbCBvdmVyZmxvdyAob3IgY29tcGxldGVseSBsZWF2ZSlcbiAgICogdGhlIGJvdW5kYXJpZXMgaW4gb3JkZXIgdG8gcmVtYWluIGF0dGFjaGVkIHRvIHRoZSBlZGdlIG9mIHRoZSByZWZlcmVuY2UuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAzMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gICAgLyoqXG4gICAgICogQHByb3Age0FycmF5fSBbcHJpb3JpdHk9WydsZWZ0JywncmlnaHQnLCd0b3AnLCdib3R0b20nXV1cbiAgICAgKiBQb3BwZXIgd2lsbCB0cnkgdG8gcHJldmVudCBvdmVyZmxvdyBmb2xsb3dpbmcgdGhlc2UgcHJpb3JpdGllcyBieSBkZWZhdWx0LFxuICAgICAqIHRoZW4sIGl0IGNvdWxkIG92ZXJmbG93IG9uIHRoZSBsZWZ0IGFuZCBvbiB0b3Agb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwcmlvcml0eTogWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBBbW91bnQgb2YgcGl4ZWwgdXNlZCB0byBkZWZpbmUgYSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvdW5kYXJpZXNcbiAgICAgKiBhbmQgdGhlIHBvcHBlci4gVGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgYWx3YXlzIGhhcyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLiBDYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNoIG90aGVyXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXNwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgaXQgcG9pbnRzIHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcy4gWW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVuY3Rpb24gYXJlIG5lZWRlZC5cbiAgICpcbiAgICogSXQgaGFzIG5vIGVmZmVjdCBpZiBubyBgYXJyb3dFbGVtZW50YCBpcyBwcm92aWRlZC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFycm93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXJyb3csXG4gICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi9cbiAgICBlbGVtZW50OiAnW3gtYXJyb3ddJ1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGZsaXAgdGhlIHBvcHBlcidzIHBsYWNlbWVudCB3aGVuIGl0IHN0YXJ0cyB0byBvdmVybGFwIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudC5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKlxuICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGxcbiAgICogcmVzdGFydCBpdCBpZiBpdCBkZXRlY3RzIHRoZSBuZWVkIHRvIGZsaXAgdGhlIHBsYWNlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGZsaXA6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA2MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBmbGlwLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8QXJyYXl9IGJlaGF2aW9yPSdmbGlwJ1xuICAgICAqIFRoZSBiZWhhdmlvciB1c2VkIHRvIGNoYW5nZSB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LiBJdCBjYW4gYmUgb25lIG9mXG4gICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkXG4gICAgICogcGxhY2VtZW50cyAod2l0aCBvcHRpb25hbCB2YXJpYXRpb25zKVxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLlxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBga2VlcFRvZ2V0aGVyYCBpcyBlbmFibGVkKVxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAndmlld3BvcnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lclxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGhpZGUgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXRzaWRlIG9mIHRoZVxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxuICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpc1xuICAgKiBvdXQgb2YgYm91bmRhcmllcy5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaGlkZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDgwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGhpZGVcbiAgfSxcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgZWxlbWVudCB0byBnZXRzXG4gICAqIHByb3Blcmx5IHBvc2l0aW9uZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIG1vZGlmaWVyIHdpbGwgbm90IHRvdWNoIHRoZSBET00sIGl0IGp1c3QgcHJlcGFyZXMgdGhlIHN0eWxlc1xuICAgKiBzbyB0aGF0IGBhcHBseVN0eWxlYCBtb2RpZmllciBjYW4gYXBwbHkgaXQuIFRoaXMgc2VwYXJhdGlvbiBpcyB1c2VmdWxcbiAgICogaW4gY2FzZSB5b3UgbmVlZCB0byByZXBsYWNlIGBhcHBseVN0eWxlYCB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLlxuICAgKlxuICAgKiBUaGlzIG1vZGlmaWVyIGhhcyBgODUwYCBhcyBgb3JkZXJgIHZhbHVlIHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICogd2l0aCBwcmV2aW91cyB2ZXJzaW9ucyBvZiBQb3BwZXIuanMuIEV4cGVjdCB0aGUgbW9kaWZpZXJzIG9yZGVyaW5nIG1ldGhvZFxuICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIG1ham9yIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgY29tcHV0ZVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTg1MCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODUwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogY29tcHV0ZVN0eWxlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nYm90dG9tJ11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFggYXhpcyAoYGJvdHRvbWAgb3IgYHRvcGApLiBBS0EgWCBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gXG4gICAgICovXG4gICAgeDogJ2JvdHRvbScsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2xlZnQnXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWSBheGlzIChgbGVmdGAgb3IgYHJpZ2h0YCkuIEFLQSBZIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YFxuICAgICAqL1xuICAgIHk6ICdyaWdodCdcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3VyIG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZFxuICB9XG59O1xuXG4vKipcbiAqIFRoZSBgZGF0YU9iamVjdGAgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBpbmZvcm1hdGlvbiB1c2VkIGJ5IFBvcHBlci5qcy5cbiAqIFRoaXMgb2JqZWN0IGlzIHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGRhdGEuYXJyb3dFbGVtZW50IE5vZGUgdXNlZCBhcyBhcnJvdyBieSBhcnJvdyBtb2RpZmllclxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuc3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYXJyb3dTdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgYXJyb3cuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5ib3VuZGFyaWVzIE9mZnNldHMgb2YgdGhlIHBvcHBlciBib3VuZGFyaWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzIFRoZSBtZWFzdXJlbWVudHMgb2YgcG9wcGVyLCByZWZlcmVuY2UgYW5kIGFycm93IGVsZW1lbnRzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucmVmZXJlbmNlIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5hcnJvd10gYHRvcGAgYW5kIGBsZWZ0YCBvZmZzZXRzLCBvbmx5IG9uZSBvZiB0aGVtIHdpbGwgYmUgZGlmZmVyZW50IGZyb20gMFxuICovXG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz5cbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIHVzaW5nIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2YgUG9wcGVyLmpzLjxiciAvPlxuICogVG8gb3ZlcnJpZGUgYW4gb3B0aW9uLCBzaW1wbHkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZVxuICogc3RydWN0dXJlIG9mIHRoZSBgb3B0aW9uc2Agb2JqZWN0LCBhcyB0aGUgM3JkIGFyZ3VtZW50LiBGb3IgZXhhbXBsZTpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWYsIHBvcCwge1xuICogICBtb2RpZmllcnM6IHtcbiAqICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogZmFsc2UgfVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgRGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBQb3BwZXIncyBwbGFjZW1lbnQuXG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHBvcHBlciB0byBwb3NpdGlvbiBpdCBzZWxmIGluICdmaXhlZCcgbW9kZVxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZVxuICAgKi9cbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlXG4gICAqL1xuICBldmVudHNFbmFibGVkOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcG9wcGVyIHdoZW5cbiAgICogeW91IGNhbGwgdGhlIGBkZXN0cm95YCBtZXRob2QuXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcbiAgICovXG4gIHJlbW92ZU9uRGVzdHJveTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgY3JlYXRlZC48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25DcmVhdGV9XG4gICAqL1xuICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7fSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyB1cGRhdGVkLiBUaGlzIGNhbGxiYWNrIGlzIG5vdCBjYWxsZWRcbiAgICogb24gdGhlIGluaXRpYWxpemF0aW9uL2NyZWF0aW9uIG9mIHRoZSBwb3BwZXIsIGJ1dCBvbmx5IG9uIHN1YnNlcXVlbnRcbiAgICogdXBkYXRlcy48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25VcGRhdGV9XG4gICAqL1xuICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7fSxcblxuICAvKipcbiAgICogTGlzdCBvZiBtb2RpZmllcnMgdXNlZCB0byBtb2RpZnkgdGhlIG9mZnNldHMgYmVmb3JlIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci5cbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanMuXG4gICAqIEBwcm9wIHttb2RpZmllcnN9XG4gICAqL1xuICBtb2RpZmllcnM6IG1vZGlmaWVyc1xufTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgb25DcmVhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uVXBkYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vLyBVdGlsc1xuLy8gTWV0aG9kc1xudmFyIFBvcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlLlxuICAgKiBAY2xhc3MgUG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzLnVwZGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcbiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSQkMSgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYW4gdXBkYXRlLiBJdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlLlxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuXG5Qb3BwZXIuVXRpbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLlBvcHBlclV0aWxzO1xuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJkcm9wZG93blwiOlwic3JjLWNvbXBvbmVudHMtZHJvcGRvd24tLWRyb3Bkb3duXCJ9OyIsImltcG9ydCB7IERPTUhlbHBlcnMgYXMgJGQgfSBmcm9tICdAVXRpbHMnO1xuaW1wb3J0IEVsZW1lbnQgZnJvbSAnLi8uLi9lbGVtZW50Lyc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcblxuZXhwb3J0IGNsYXNzIFRleHRJbnB1dCBleHRlbmRzIEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yID0gJ2lucHV0Jywgb3B0aW9ucyl7XG4gICAgICAgIHN1cGVyKHNlbGVjdG9yLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIHZhciBpbnB1dCA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7IFxuICAgICAgICB9XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0Jyk7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICBcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEcm9wZG93biBleHRlbmRzIEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCBvcHRpb25zKXtcbiAgICAgICAgY29uc29sZS5sb2coc2VsZWN0b3IpO1xuICAgICAgICB2YXIgZWwgPSBzZWxlY3Rvci5zcGxpdCgnLicpWzBdLnNwbGl0KCcjJylbMF0sXG4gICAgICAgICAgICBrbGFzcyxcbiAgICAgICAgICAgIGlkO1xuXG4gICAgICAgIGlmICggZWwgIT09ICdkaXYnICkge1xuICAgICAgICAgICAgaWYgKCBzZWxlY3Rvci5zcGxpdCgnLicpLmxlbmd0aCA+IDEgKXtcbiAgICAgICAgICAgICAgICBrbGFzcyA9IHNlbGVjdG9yLnNwbGl0KCcuJylbMF0uc3BsaXQoJyMnKVswXTsgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIHNlbGVjdG9yLnNwbGl0KCcjJykubGVuZ3RoID4gMSApe1xuICAgICAgICAgICAgICAgIGlkID0gc2VsZWN0b3Iuc3BsaXQoJyMnKVswXS5zcGxpdCgnLicpWzBdOyBcbiAgICAgICAgICAgIH0gIFxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0Ryb3Bkb3duIGVsZW1lbnQgbXVzdCBiZSBhIGRpdjsgY29lcmNpbmcgLiAuIC4nKTtcbiAgICAgICAgICAgIGVsID0gJ2Rpdic7XG4gICAgICAgICAgICBzZWxlY3RvciA9IGVsICsgKCBpZCAhPT0gdW5kZWZpbmVkID8gJyMnICsgaWQgOiAnJyApICsgKCBrbGFzcyAhPT0gdW5kZWZpbmVkID8gJy4nICsga2xhc3MgOiAnJyApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIoc2VsZWN0b3IsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcigndWwnKTtcbiAgICAgICAgdGhpcy5ib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xuICAgICAgICB0aGlzLl9pc09wZW4gPSBmYWxzZTtcbiAgICB9XG4gICAgc2V0IGlzT3Blbihib29sKXtcblxuICAgICAgICB0aGlzLl9pc09wZW4gPSBib29sO1xuICAgICAgICBmdW5jdGlvbiBib2R5Q2xpY2tIYW5kbGVyKCl7XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICggYm9vbCApe1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKHMuaXNPcGVuKTtcbiAgICAgICAgICAgIHRoaXMuYm9keS5VSUNvbnRyb2xJc09wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYm9keUNsaWNrSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShzLmlzT3Blbik7XG4gICAgICAgICAgICB0aGlzLmJvZHkuVUlDb250cm9sSXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBib2R5Q2xpY2tIYW5kbGVyLmJpbmQodGhpcykpOyAgIFxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBpc09wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc09wZW47XG4gICAgfVxuICAgIHNldCBzZWxlY3RlZE9wdGlvbihpdGVtKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkT3B0aW9uID0gaXRlbTtcbiAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHRoaXMuX3NlbGVjdGVkT3B0aW9uLmlubmVyVGV4dDtcblxuICAgICAgICBpZiAoIHRoaXMub25DaGFuZ2UgKSB7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSW5zdGFuY2Ugb2YgRHJvcGRvd24gY2xhc3MgbmVlZHMgYW4gb25DaGFuZ2UgbWV0aG9kIHRvIGhhbmRsZSBzZWxlY3Rpb24gb2YgYSBuZXcgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgc2VsZWN0ZWRPcHRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZE9wdGlvbjtcbiAgICB9XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIFxuICAgICAgICB2YXIgd3JhcHBlciA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5wdXQgPSAkZC5jKCdkaXYuanMtaW5wdXQtZGl2Jyk7XG4gICAgICAgIHZhciBvcHRpb25zTGlzdCA9ICRkLmMoJ3VsJyk7XG4gICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGVhY2ggPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gJGQuYygnbGknKTtcbiAgICAgICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnLCBlYWNoLnZhbHVlKTtcbiAgICAgICAgICAgIG9wdGlvbi5pbm5lckhUTUwgPSBlYWNoLm5hbWU7XG4gICAgICAgICAgICBpZiAoIGVhY2guc2VsZWN0ZWQgKXtcbiAgICAgICAgICAgICAgICBvcHRpb24uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICBpbnB1dC50ZXh0Q29udGVudCA9IGVhY2gubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnNMaXN0LmFwcGVuZENoaWxkKG9wdGlvbilcbiAgICAgICAgfSk7XG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoaW5wdXQpXG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQob3B0aW9uc0xpc3QpXG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZChzLlBDVERyb3Bkb3duKTtcbiAgICAgICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICAgICB0aGlzLmlucHV0ID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCcuanMtaW5wdXQtZGl2Jyk7XG4gICAgICAgdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1DbGlja0hhbmRsZXIoaXRlbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICB9KTsgXG4gICAgICAgdGhpcy5fc2VsZWN0ZWRPcHRpb24gPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2xpLnNlbGVjdGVkJyk7XG4gICAgICAgdGhpcy50b0JlU2VsZWN0ZWQgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2xpLnNlbGVjdGVkJyk7XG4gICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZS5rZXlDb2RlKTtcbiAgICAgICAgICAgIGlmICggZS5rZXlDb2RlID09PSA5ICkge1xuICAgICAgICAgICAgICAgIHRoaXMudGFiSGFuZGxlci5jYWxsKHRoaXMsZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBbMzIsMzgsNDBdLmluZGV4T2YoZS5rZXlDb2RlKSA+IC0xICl7IC8vIDMyIHNwYWNlLCAzOCB1cCBhcnJvdywgNDAgZG93biBhcnJvd1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gcHJldmVudCBzY3JvbGxpbmcgb24gc3BhY2UgYW5kIGFycm93XG4gICAgICAgICAgICAgICAgdGhpcy5zcGFjZUFuZEFycm93SGFuZGxlci5jYWxsKHRoaXMsIGUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggWzEzLDI3XS5pbmRleE9mKGUua2V5Q29kZSA+IC0xICkgKXsgLy8gMTMgZW50ZXIsIDI3IGVzY2FwZVxuICAgICAgICAgICAgICAgIGlmICggdGhpcy5pc09wZW4gKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW50ZXJBbmRFc2NhcGVIYW5kbGVyLmNhbGwodGhpcywgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgXG4gICAgfVxuICAgIGl0ZW1DbGlja0hhbmRsZXIoaXRlbSl7XG4gICAgICAgIHRoaXMudG9CZVNlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgIHRoaXMudG9CZVNlbGVjdGVkID0gaXRlbTtcbiAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbiA9IHRoaXMudG9CZVNlbGVjdGVkO1xuICAgIH1cbiAgICBlbnRlckFuZEVzY2FwZUhhbmRsZXIoZSl7IC8vIG9ubHkgY2FsbGVkIGlzIHRoaXMuaXNPcGVuXG4gICAgICAgIGlmICggZS5rZXlDb2RlID09PSAyNyApIHsgLy8gZXNjIGtleVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2VzY2FwZSBrZXknKTtcbiAgICAgICAgICAgIHRoaXMudG9CZVNlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9uLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB0aGlzLnRvQmVTZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRPcHRpb247XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlOyAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24gPSB0aGlzLnRvQmVTZWxlY3RlZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzcGFjZUFuZEFycm93SGFuZGxlcihlKXtcbiAgICAgICAgaWYgKCBlLmtleUNvZGUgPT09IDMyICkgeyAvLyBzcGFjZVxuICAgICAgICAgICAgaWYgKCAhdGhpcy5pc09wZW4gKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBoZXJlIGNhbGwgdG8gZm4gdGhhdCBzZWxlY3RzIHRoZSB0b0JlU2xlY3RlZCBvcHRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBhcnJvdyBrZXlzXG4gICAgICAgIGlmICggIXRoaXMuaXNPcGVuICl7XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXMgb3BlblxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IGUua2V5Q29kZSA9PT0gMzggPyB0aGlzLnRvQmVTZWxlY3RlZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIDogdGhpcy50b0JlU2VsZWN0ZWQubmV4dEVsZW1lbnRTaWJsaW5nOyBcbiAgICAgICAgICAgIGlmICggbmV4dCApIHsgLy8gaWYgdGhlcmUgaXMgYW4gb3B0aW9uIGJlZm9yZS9hZnRlciB0aGUgY3VycmVudGx5IHRvQmVTZWxlY3RlZCBvcHRpb24sIG1ha2UgdGhhdCB0aGUgdG9CZVNlbGVjdGVkIG9wdGlvblxuICAgICAgICAgICAgICAgIHRoaXMudG9CZVNlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQgPSBuZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMudG9CZVNlbGVjdGVkLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGFiSGFuZGxlcihlKXtcbiAgICAgICAgaWYgKCB0aGlzLmlzT3BlbiApe1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsaWNrSGFuZGxlcihlKXtcbiAgICAgICAgaWYgKCB0aGlzLmlzT3BlbiB8fCAhdGhpcy5ib2R5LlVJQ29udHJvbElzT3BlbiApe1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gIXRoaXMuaXNPcGVuO1xuICAgICAgICB9XG4gICAgfVxufSIsIm1vZHVsZS5leHBvcnRzID0gXCI8cD48c3Ryb25nPkNlbnRyYWxpemF0aW9uLjwvc3Ryb25nPiBUaGUgZGVncmVlIHRvIHdoaWNoIGJvcnJvd2luZyBpcyBkb25lIGJ5IHRoZSBzdGF0ZSBpdHNlbGYgcmF0aGVyIHRoYW4gYnkgYSBjb21wb25lbnQgdW5pdC1hIGxlZ2FsbHkgc2VwYXJhdGUgZW50aXR5IHN1Y2ggYXMgYSBob3VzaW5nIG9yIHR1cm5waWtlIGF1dGhvcml0eS4gSGlnaGVyIHZhbHVlcyBtZWFuIHRoZSBzdGF0ZSBpcyBtb3JlIGNlbnRyYWxpemVkLjwvcD5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHA+PHN0cm9uZz5HZW5lcmFsIG9ibGlnYXRpb24gKEdPKSBkZWJ0IGxpbWl0IHR5cGUuPC9zdHJvbmc+IFRoZSBraW5kIG9mIGxpbWl0IHRoZSBzdGF0ZSBoYXMgb24gR08gYm9ycm93aW5nLCBvbmUgb2YgdGhlIG1vc3QgY29tbW9uIHR5cGVzIG9mIGRlYnQgaXNzdWVkIGJ5IHN0YXRlcy4gVGhlc2UgbGltaXRzIGFmZmVjdCBob3cgc3RhdGVzIGJvcnJvdy4gPC9wPlxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8cD48c3Ryb25nPkRlYnQgcGVyIGNhcGl0YS48L3N0cm9uZz4gVG90YWwgZGVidCByZWxhdGl2ZSB0byBhIHN0YXRl4oCZcyBwb3B1bGF0aW9uLjwvcD5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHA+PHN0cm9uZz5EZWJ0IGFzIGEgcGVyY2VudGFnZSBvZiBzdGF0ZSBwZXJzb25hbCBpbmNvbWUuPC9zdHJvbmc+IFRvdGFsIGRlYnQgcmVsYXRpdmUgdG8gc3RhdGUgcGVyc29uYWwgaW5jb21lLCBhIG1lYXN1cmUgb2YgZWNvbm9taWMgcmVzb3VyY2VzLjwvcD5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHA+PHN0cm9uZz5Qb3B1bGF0aW9uIGdyb3d0aC48L3N0cm9uZz4gVGhlIDEwLXllYXIgcG9wdWxhdGlvbiBncm93dGggcmF0ZSBmcm9tIDIwMDggdG8gMjAxNy4gR3Jvd2luZyBwb3B1bGF0aW9ucyBhcmUgYXNzb2NpYXRlZCB3aXRoIGdyZWF0ZXIgaW5mcmFzdHJ1Y3R1cmUgaW52ZXN0bWVudC4gPC9wPlxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8cD48c3Ryb25nPlJldmVudWUgdm9sYXRpbGl0eS48L3N0cm9uZz4gQSBtZWFzdXJlIG9mIHZhcmlhdGlvbiBpbiB0YXggY29sbGVjdGlvbnMuIExvdyBzY29yZXMgbWVhbiB0aGF0IHJldmVudWUgbGV2ZWxzIGFyZSBzaW1pbGFyIGZyb20geWVhciB0byB5ZWFyLCB3aGlsZSBoaWdoIHNjb3JlcyBpbmRpY2F0ZSB0aGF0IHJldmVudWUgdmFyaWVzIG1vcmUuIE1vcmUgdm9sYXRpbGUgc3RhdGVzIHNob3VsZCBwbGFuIGZvciBncmVhdGVyIHVuY2VydGFpbnR5LiA8L3A+XFxuXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxwPjxzdHJvbmc+RGl2aXNpb24gb2YgYm9ycm93aW5nIGJldHdlZW4gc3RhdGUgYW5kIGxvY2FsIGdvdmVybm1lbnRzLjwvc3Ryb25nPiBUaGUgc2hhcmUgb2YgY29tYmluZWQgc3RhdGUgYW5kIGxvY2FsIGRlYnQgaXNzdWVkIGJ5IGxvY2FsIGdvdmVybm1lbnRzLiBTdGF0ZXMgd2hlcmUgbG9jYWwgZ292ZXJubWVudHMgYm9ycm93IGxlc3MgdGVuZCB0byBoYXZlIGhpZ2hlciBkZWJ0IGxldmVscy48L3A+XFxuXCI7IiwiaW1wb3J0IFJvdXRlciBmcm9tICdAUm91dGVyJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBDVEFwcCB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKXtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgICAgICAgIHRoaXNbb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXQocm91dGVyT3B0aW9ucyl7XG4gICAgICAgIGlmICggdGhpcy5uZWVkc1JvdXRlciApeyAvLyBjb21lcyBmcm9tIG9wdGlvbnMgb2JqZWN0XG4gICAgICAgICAgICB0aGlzLnJvdXRlciA9IG5ldyBSb3V0ZXIoKTtcbiAgICAgICAgICAgIHRoaXMucm91dGVyLmluaXQocm91dGVyT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNhYmxlSG92ZXJPblRvdWNoKCk7XG4gICAgfVxuICAgIGRpc2FibGVIb3Zlck9uVG91Y2goKXtcbiAgICAvLyBIVDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMwMzAzODk4XG4gICAgICAgIHZhciBoYXNIb3ZlckNsYXNzID0gZmFsc2U7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICB2YXIgbGFzdFRvdWNoVGltZSA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gZW5hYmxlSG92ZXIoKSB7XG4gICAgICAgICAgICAvLyBmaWx0ZXIgZW11bGF0ZWQgZXZlbnRzIGNvbWluZyBmcm9tIHRvdWNoIGV2ZW50c1xuICAgICAgICAgICAgaWYgKG5ldyBEYXRlKCkgLSBsYXN0VG91Y2hUaW1lIDwgNTAwKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoaGFzSG92ZXJDbGFzcykgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaGFzLWhvdmVyJyk7XG4gICAgICAgICAgICBoYXNIb3ZlckNsYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRpc2FibGVIb3ZlcigpIHtcbiAgICAgICAgICAgIGlmICghaGFzSG92ZXJDbGFzcykgcmV0dXJuO1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1ob3ZlcicpO1xuICAgICAgICAgICAgaGFzSG92ZXJDbGFzcyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTGFzdFRvdWNoVGltZSgpIHtcbiAgICAgICAgICAgIGxhc3RUb3VjaFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHVwZGF0ZUxhc3RUb3VjaFRpbWUsIHRydWUpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZGlzYWJsZUhvdmVyLCB0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZW5hYmxlSG92ZXIsIHRydWUpO1xuXG4gICAgICAgIGVuYWJsZUhvdmVyKCk7XG4gICAgfVxuICAgIGNyZWF0ZUNvbXBvbmVudChtb2RlbCwgY29tcG9uZW50LCBzZWxlY3RvciwgX29wdGlvbnMpeyBcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIF9vcHRpb25zICE9PSBudWxsICYmIHR5cGVvZiBfb3B0aW9ucyA9PT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIGZvciAoIGxldCBrZXkgaW4gX29wdGlvbnMgKXtcbiAgICAgICAgICAgICAgICBpZiAoIF9vcHRpb25zLmhhc093blByb3BlcnR5KGtleSkgKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gX29wdGlvbnNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgY29tcG9uZW50KHNlbGVjdG9yLCBvcHRpb25zKTtcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzZWN0aW9uIGlkPVxcXCJzZWN0aW9uLW92ZXJ2aWV3XFxcIj5cXG5cXHQ8aDIgY2xhc3M9XFxcInN0YXRpY1xcXCIgcm9sZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgYXJpYS1sYWJlbD1cXFwiU2hvdy9oaWRlIGNvbnRlbnRcXFwiPk92ZXJ2aWV3PC9oMj5cXG4gICAgPGRpdiBjbGFzcz1cXFwianMtaW5uZXItY29udGVudFxcXCI+XFxuICAgIFxcblxcdDxwPlxcblxcdCAgICBXaGVuIHN0YXRlIHBvbGljeW1ha2VycyB0cnkgdG8gYXNzZXNzIGhvdyBtdWNoIGRlYnQgdG8gdGFrZSBvbiBmb3IgcHJvamVjdHNcXG5cXHQgICAgc3VjaCBhcyByb2FkcywgYnJpZGdlcywgYW5kIHNjaG9vbHMsIHRoZXkgb2Z0ZW4gY29tcGFyZSBkZWJ0IGxldmVscyBpblxcblxcdCAgICB0aGVpciBzdGF0ZSB0byB0aG9zZSBvZiBvdGhlcnMuIEJlY2F1c2Ugbm8gdW5pdmVyc2FsIGd1aWRlbGluZXMgZXhpc3QgZm9yXFxuXFx0ICAgIGhvdyBtdWNoIGRlYnQgaXMgYWZmb3JkYWJsZSwgbWFueSBwb2xpY3ltYWtlcnMgZXZhbHVhdGUgaG93IHRoZWlyIHN0YXRlXFxuXFx0ICAgIHN0YWNrcyB1cCBhZ2FpbnN0IG90aGVycyB3aXRoIGEgY29tbW9uIGNyZWRpdCByYXRpbmcgb3IgbmF0aW9uYWwgbWVkaWFuXFxuXFx0ICAgIGRlYnQgbGV2ZWwuXFxuXFx0PC9wPlxcblxcdDxwPlxcblxcdCAgICBCdXQgc2VsZWN0aW5nIGEgcGVlciBncm91cCBiYXNlZCBvbmx5IG9uIGEgY29tbW9uIHJhdGluZyBvciB1c2luZyBuYXRpb25hbFxcblxcdCAgICBiZW5jaG1hcmtzIG92ZXJsb29rcyBtYW55IGZhY3RvcnMgdGhhdCBpbmZsdWVuY2UgYm9ycm93aW5nIGxldmVscy4gU3RhdGVzXFxuXFx0ICAgIHdpdGggZ3Jvd2luZyBwb3B1bGF0aW9ucywgZm9yIGV4YW1wbGUsIHRlbmQgdG8gYm9ycm93IG1vcmU7IGEgc3RhdGUmIzgyMTc7c1xcblxcdCAgICBmaXNjYWwgaGVhbHRoIGFmZmVjdHMgdGhlIGZ1bmRzIGF2YWlsYWJsZSBmb3IgZGVidCBzZXJ2aWNlOyBhbmQgcG9saWNpZXNcXG5cXHQgICAgbWVhbnQgdG8gbGltaXQgc3RhdGUgZGVidCBjYW4gaW5mbHVlbmNlIGhvdyBtdWNoIGxvY2FsIGdvdmVybm1lbnRzIGFuZFxcblxcdCAgICBvdGhlciBzdGF0ZSBlbnRpdGllcyBib3Jyb3cgZm9yIGNhcGl0YWwgcHJvamVjdHMuXFxuXFx0PC9wPlxcblxcdDxwPlxcblxcdCAgICBUbyBhZGRyZXNzIHRoaXMgZ2FwLCBUaGUgUGV3IENoYXJpdGFibGUgVHJ1c3RzIGhhcyBjcmVhdGVkIGFuIGludGVyYWN0aXZlXFxuXFx0ICAgIHRvb2wgdG8gYWxsb3cgcG9saWN5bWFrZXJzIHRvIGNvbXBhcmUgc3RhdGVzIGJhc2VkIG9uIHNldmVuIGNoYXJhY3RlcmlzdGljc1xcblxcdCAgICByZWxhdGVkIHRvIGRlYnQuPHN1cD4qPC9zdXA+IFN0YXRlcyBjYW4gdXNlIHRoZXNlIGRhdGEgdG8gc2VsZWN0IG1vcmVcXG5cXHQgICAgdGFpbG9yZWQgcGVlciBncm91cHMsIGdpdmluZyB0aGVtIGEgZGVlcGVyIHVuZGVyc3RhbmRpbmcgb2YgaG93IHN0YXRlcyB3aXRoXFxuXFx0ICAgIHNpbWlsYXIgYm9ycm93aW5nIHByYWN0aWNlcywgY29uc3RyYWludHMsIGFuZCBuZWVkcyBtYW5hZ2UgdGhlaXIgYm9ycm93aW5nLlxcblxcdCAgICBVbHRpbWF0ZWx5LCB0aGVzZSBpbXByb3ZlZCBjb21wYXJpc29ucyB3aWxsIGhlbHAgdGhlbSBtYWtlIGJldHRlci1pbmZvcm1lZFxcblxcdCAgICBkZWNpc2lvbnMuXFxuXFx0PC9wPlxcblxcdDxwIGNsYXNzPVxcXCJwY3QtZm9vdG5vdGVcXFwiPlxcblxcdDxzdXA+Kjwvc3VwPiBUbyBtZWFzdXJlIGRlYnQgbGV2ZWxzLCB0aGlzIHRvb2wgdXNlcyBDZW5zdXMgQnVyZWF1IGRhdGEuIEZvciBtb3JlXFxuXFx0ICAgIGluZm9ybWF0aW9uIGFib3V0IHRoZXNlIGNoYXJhY3RlcmlzdGljcyBhbmQgd2h5IFBldyBjaG9zZSB0aGVtLCBzZWUgdGhlIFxcblxcdCAgICAmIzgyMjA7QWJvdXQgdGhlIERhdGEmIzgyMjE7IHNlY3Rpb24gYmVsb3cuXFxuXFx0PC9wPlxcblxcbiAgICA8L2Rpdj5cXG4gICAgPC9zZWN0aW9uPlxcbjxzZWN0aW9uIGlkPVxcXCJzZWN0aW9uLWNvbXBhcmlzb25cXFwiPlxcblxcdDxoMiBjbGFzcz1cXFwic3RhdGljXFxcIiByb2xlPVxcXCJidXR0b25cXFwiIHRhYmluZGV4PVxcXCIwXFxcIiBhcmlhLWxhYmVsPVxcXCJTaG93L2hpZGUgY29udGVudFxcXCI+U3RhdGUgQ29tcGFyaXNvbjwvaDI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImpzLWlubmVyLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29tcGFyZS1zZWxlY3Rpb24td3JhcHBlclxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImNvbXBhcmUtbGFiZWxcXFwiPkNvbXBhcmU8L3NwYW4+PGJyIC8+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleCBmbGV4LXN0YXJ0IGZsZXgtYmFzZWxpbmUgYXV0b0NvbXBsZXRlX291dGVyV3JhcHBlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF1dG9Db21wbGV0ZV93cmFwcGVyXFxcIiBpZD1cXFwiYXV0b0NvbXBsZXRlX3dyYXBwZXItMFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgYXV0b2NvbXBsZXRlPVxcXCJoYWNrXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBpZD1cXFwiY29tcGFyZS1pbnB1dC0wXFxcIj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxzcGFuPnRvPC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhdXRvQ29tcGxldGVfd3JhcHBlclxcXCIgaWQ9XFxcImF1dG9Db21wbGV0ZV93cmFwcGVyLTFcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGF1dG9jb21wbGV0ZT1cXFwiaGFja1xcXCIgdHlwZT1cXFwidGV4dFxcXCIgaWQ9XFxcImNvbXBhcmUtaW5wdXQtMVxcXCI+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICA8L3NlY3Rpb24+XFxuPHNlY3Rpb24gaWQ9XFxcInNlY3Rpb24tc3RhdGVzXFxcIj5cXG5cXHQ8aDIgY2xhc3M9XFxcInN0YXRpY1xcXCIgcm9sZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgYXJpYS1sYWJlbD1cXFwiU2hvdy9oaWRlIGNvbnRlbnRcXFwiPjUwLVN0YXRlIERhdGE8L2gyPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJqcy1pbm5lci1jb250ZW50XFxcIj5cXG4gICAgPC9kaXY+XFxuICAgIDwvc2VjdGlvbj5cXG48c2VjdGlvbiBpZD1cXFwic2VjdGlvbi1hYm91dFxcXCI+XFxuXFx0PGgyIGNsYXNzPVxcXCJzdGF0aWNcXFwiIHJvbGU9XFxcImJ1dHRvblxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIGFyaWEtbGFiZWw9XFxcIlNob3cvaGlkZSBjb250ZW50XFxcIj5BYm91dCB0aGUgRGF0YTwvaDI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImpzLWlubmVyLWNvbnRlbnRcXFwiPlxcbiAgICBcXG5cXHQ8cD5cXG4gICAgUGV3IHJlc2VhcmNoZXJzIGRldmVsb3BlZCB0aGlzIGxpc3Qgb2YgY2hhcmFjdGVyaXN0aWNzIGJ5IGV4YW1pbmluZ1xcbiAgICByZWxldmFudCBsaXRlcmF0dXJlIGFuZCBjb25zdWx0aW5nIHN1YmplY3QgbWF0dGVyIGV4cGVydHMuIFRoZSBmaW5hbCBzZXQgb2ZcXG4gICAgc2V2ZW4gY2hhcmFjdGVyaXN0aWNzIGluY2x1ZGVkIGluIHRoZSB0b29sIHdhcyBzZWxlY3RlZCBiYXNlZCBvbiBldmlkZW5jZVxcbiAgICBpbiB0aGUgbGl0ZXJhdHVyZSB0aGF0IHRoZSBjaGFyYWN0ZXJpc3RpY3MgYXJlIHJlbGF0ZWQgdG8gc3RhdGUgZGVidCwgdGhlXFxuICAgIGZlYXNpYmlsaXR5IG9mIGNvbGxlY3RpbmcgdGhlIGRhdGEgdXNlZCB0byBjb25zdHJ1Y3QgdGhlIGNoYXJhY3RlcmlzdGljLFxcbiAgICBhbmQgYSBkZXNpcmUgdG8gYXZvaWQgcmVkdW5kYW5jeS4gUGV3IGFsc28gbGltaXRlZCB0aGUgbnVtYmVyIG9mXFxuICAgIGNoYXJhY3RlcmlzdGljcyB0byBtYWtlIHRoZSB0b29sIGVhc3kgdG8gdXNlIGFuZCB1bmRlcnN0YW5kLlxcbjwvcD5cXG48cD5cXG4gICAgVGhlIGdvYWwgb2YgdGhpcyB0b29sIHdhcyBub3QgdG8gY3JlYXRlIGFuIGV4aGF1c3RpdmUgY2F0YWxvZyBvZiB0aGVcXG4gICAgZmFjdG9ycyB0aGF0IG1heSBhZmZlY3Qgc3RhdGUgYm9ycm93aW5nIGxldmVscywgc28gc3RhdGVzIHNob3VsZCBub3QgZmVlbFxcbiAgICB0aGUgbmVlZCB0byBsaW1pdCB0aGVtc2VsdmVzIHRvIHRoZSBkYXRhIGluIGl0IHdoZW4gc2VsZWN0aW5nIHBlZXJzLlxcbiAgICBJbnN0ZWFkLCB0aGUgdG9vbCBpcyBpbnRlbmRlZCB0byBoZWxwIHN0YXRlcyBjb25zaWRlciB0aGVzZSBkaWZmZXJlbmNlc1xcbiAgICB3aGVuIGNvbnN0cnVjdGluZyBwZWVyIGdyb3Vwcy5cXG48L3A+XFxuPGgzIGNsYXNzPVxcXCJzdGF0aWNcXFwiPlxcbiAgICBCb3Jyb3dpbmcgcHJhY3RpY2VzXFxuPC9oMz5cXG48cD5cXG4gICAgSG93IHN0YXRlcyBib3Jyb3cgYWxzbyBhZmZlY3RzIGhvdyB0aGV5IHNob3VsZCBtYWtlIGNvbXBhcmlzb25zOiBHZW5lcmFsXFxuICAgIG9ibGlnYXRpb24gKEdPKSBkZWJ0IGxpbWl0cywgY2VudHJhbGl6YXRpb24sIGFuZCB0aGUgZGl2aXNpb24gb2ZcXG4gICAgc3RhdGUtbG9jYWwgYm9ycm93aW5nIGluIGEgc3RhdGUgY2FuIGFmZmVjdCBzdGF0ZSBib3Jyb3dpbmcgcHJhY3RpY2VzLlxcbjwvcD5cXG48aDQ+XFxuICAgIEdlbmVyYWwgb2JsaWdhdGlvbiBkZWJ0IGxpbWl0IHR5cGUgKDIwMTgpXFxuPC9oND5cXG48cD5cXG4gICAgR08gZGVidCBpcyBvbmUgb2YgdGhlIG1vc3QgY29tbW9uIHR5cGVzIGlzc3VlZCBieSBzdGF0ZXMuIEl0IGNhcnJpZXMgYVxcbiAgICBzdGF0ZeKAmXMgZnVsbCBmYWl0aCBhbmQgY3JlZGl0LCB0aGUgc3Ryb25nZXN0IHBvc3NpYmxlIHBsZWRnZS4gQXMgYSByZXN1bHQsXFxuICAgIEdPIGRlYnQgaXMgdHlwaWNhbGx5IGEgc3RhdGXigJlzIGhpZ2hlc3QgcmF0ZWQgYW5kIGxvd2VzdCBjb3N0IHNpbmNlIGNyZWRpdFxcbiAgICByYXRpbmcgYWdlbmNpZXMgYW5kIGJvbmQgcHVyY2hhc2VycyBzdHJvbmdseSBiZWxpZXZlIHRoZSBzdGF0ZSB3aWxsIHJlcGF5XFxuICAgIGl0LjxzdXA+MTwvc3VwPiBcXG48L3A+XFxuPHA+XFxuICAgIE5vdCBhbGwgc3RhdGVzIGlzc3VlIG11Y2ggR08gZGVidC4gQWxsIGJ1dCB0d28gaGF2ZSBHTyBkZWJ0IGxpbWl0cywgd2hpY2hcXG4gICAgdmFyeSBpbiByZXN0cmljdGl2ZW5lc3MgYW5kIHN0cnVjdHVyZS4gRm9yIGV4YW1wbGUsIENvbm5lY3RpY3V0IGxpbWl0cyB0aGlzXFxuICAgIGRlYnQgdG8gMS42IHRpbWVzIHRvdGFsIGVzdGltYXRlZCBnZW5lcmFsIGZ1bmQgdGF4IHJlY2VpcHRzLCB3aGlsZSBBcml6b25hXFxuZWZmZWN0aXZlbHkgcHJvaGliaXRzIGl0cyBpc3N1YW5jZS48c3VwPjI8L3N1cD4gQ29tcGFyaW5nIENvbm5lY3RpY3V0XFxuICAgIGFuZCBBcml6b25hLCB0aGVuLCBtaWdodCBub3QgYmUgYXBwcm9wcmlhdGUgYmVjYXVzZSBDb25uZWN0aWN1dCBoYXNcXG4gICAgc2lnbmlmaWNhbnQgR08gZGVidCBhbmQgQXJpem9uYSBub25lLiBDb25uZWN0aWN1dOKAmXMgZGVidCB3aWxsIGRyYXcgb24gdGhlXFxuICAgIHN0YXRl4oCZcyBnZW5lcmFsIGZ1bmQgaW4gYSB3YXkgQXJpem9uYeKAmXMgd29u4oCZdC4gKEdPIGRlYnQgaXMgdHlwaWNhbGx5XFxuICAgIHN1cHBvcnRlZCBieSBhIHN0YXRl4oCZcyBnZW5lcmFsIGZ1bmQuKSBCZWNhdXNlIGFuYWx5emluZyB0aGUgcmV2ZW51ZSBzdHJlYW1zXFxuICAgIGF2YWlsYWJsZSBmb3IgZGVidCByZXBheW1lbnQgaXMgaW1wb3J0YW50LCB0aGlzIGlzIGEga2V5IGRpZmZlcmVuY2UuXFxuPC9wPlxcbjxwPlxcbiAgICBUaGVzZSBsaW1pdHMgc29tZXRpbWVzIGFwcGx5IHRvIHN0YXRlIGRlYnQgYmV5b25kIGp1c3QgR08gYm9ycm93aW5nLiBGb3JcXG4gICAgZXhhbXBsZSwgV2VzdCBWaXJnaW5pYeKAmXMgbGltaXQgYXBwbGllcyB0byBuZXQgdGF4LXN1cHBvcnRlZCBkZWJ0LCB3aGljaFxcbiAgICBpbmNsdWRlcyBHTy5cXG48L3A+XFxuPHA+XFxuICAgIFBldyBoYXMgY2xhc3NpZmllZCBlYWNoIHN0YXRl4oCZcyBsaW1pdCBmb3IgR08gZGVidCBhcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xcbiAgICB0eXBlczpcXG48L3A+XFxuPHVsPlxcbiAgICA8bGk+XFxuICAgICAgICA8c3Ryb25nPkNvbnN0aXR1dGlvbmFsIGFtZW5kbWVudC48L3N0cm9uZz5cXG4gICAgICAgIFRocmVlIHN0YXRlc+KAlEFsYWJhbWEsIE9oaW8sIGFuZCBXZXN0IFZpcmdpbmlh4oCUcmVxdWlyZSBhbiBhbWVuZG1lbnQgdG9cXG4gICAgICAgIHRoZWlyIGNvbnN0aXR1dGlvbnMgdG8gaXNzdWUgR08gZGVidC5cXG4gICAgPC9saT5cXG4gICAgPGxpPlxcbiAgICAgICAgPHN0cm9uZz5NZXRyaWMuPC9zdHJvbmc+XFxuICAgICAgICBJbiAxMSBzdGF0ZXPigJRDb25uZWN0aWN1dCwgR2VvcmdpYSwgSGF3YWlpLCBNaXNzaXNzaXBwaSwgTmV2YWRhLCBOZXdcXG4gICAgICAgIEhhbXBzaGlyZSwgTm9ydGggRGFrb3RhLCBPcmVnb24sIFRlbm5lc3NlZSwgVXRhaCwgYW5kIFdpc2NvbnNpbuKAlGRlYnQgaXNcXG4gICAgICAgIG5vdCBhbGxvd2VkIHRvIGV4Y2VlZCBhIGNlcnRhaW4gbWV0cmljLWJhc2VkIHRocmVzaG9sZC4gVGVubmVzc2VlLCBmb3JcXG4gICAgICAgIGV4YW1wbGUsIGNhcHMgZGVidCBzZXJ2aWNlIGF0IDEwIHBlcmNlbnQgb2YgY29tYmluZWQgcmV2ZW51ZXMgaW4gaXRzXFxuICAgICAgICBnZW5lcmFsLCBkZWJ0IHNlcnZpY2UsIGFuZCBoaWdod2F5IGZ1bmRzLlxcbiAgICA8L2xpPlxcbiAgICA8bGk+XFxuICAgICAgICA8c3Ryb25nPk1ldHJpYy1iYXNlZCB3aXRoIHJlZmVyZW5kdW0gdG8gZXhjZWVkLjwvc3Ryb25nPlxcbiAgICAgICAgTm9ydGggQ2Fyb2xpbmEsIFBlbm5zeWx2YW5pYSwgYW5kIFd5b21pbmcgdXNlIGEgbWV0cmljIHRvIGNhcCBkZWJ0IGJ1dFxcbiAgICAgICAgYWxsb3cgaXNzdWFuY2UgYWJvdmUgdGhlIGNhcCB3aXRoIHZvdGVyIGFwcHJvdmFsLlxcbiAgICA8L2xpPlxcbiAgICA8bGk+XFxuICAgICAgICA8c3Ryb25nPk5vIGxpbWl0Ljwvc3Ryb25nPlxcbiAgICAgICAgTWFyeWxhbmQgYW5kIFZlcm1vbnQgcGxhY2Ugbm8gcmVzdHJpY3Rpb25zIG9uIEdPIGRlYnQuXFxuICAgIDwvbGk+XFxuICAgIDxsaT5cXG4gICAgICAgIDxzdHJvbmc+UHJvaGliaXRpb24uPC9zdHJvbmc+XFxuICAgICAgICBBcml6b25hLCBDb2xvcmFkbywgSW5kaWFuYSwgYW5kIE5lYnJhc2thIHByb2hpYml0IEdPIGRlYnQuIEluZGlhbmEgbGF3XFxuICAgICAgICBmb3JiaWRzIGFueSBHTyBkZWJ0IHRvIGJlIGlzc3VlZDsgdGhlIG90aGVycyBhdXRob3JpemUgYW1vdW50cyBzb1xcbiAgICAgICAgbG934oCUJDM1MCwwMDAgb3IgbGVzc+KAlGFzIHRvIGJlIGVxdWl2YWxlbnQgdG8gcHJvaGliaXRpb25zLlxcbiAgICA8L2xpPlxcbiAgICA8bGk+XFxuICAgICAgICA8c3Ryb25nPlJlZmVyZW5kdW0gYW5kL29yIHN1cGVybWFqb3JpdHkuPC9zdHJvbmc+XFxuICAgICAgICBUaGlydGVlbiBzdGF0ZXPigJRBbGFza2EsIEFya2Fuc2FzLCBDYWxpZm9ybmlhLCBJZGFobywgSW93YSwgS2Fuc2FzLFxcbiAgICAgICAgS2VudHVja3ksIE1haW5lLCBNaWNoaWdhbiwgTWlubmVzb3RhLCBNaXNzb3VyaSwgTW9udGFuYSwgYW5kIFJob2RlXFxuICAgICAgICBJc2xhbmTigJRyZXF1aXJlIHNvbWUgY29tYmluYXRpb24gb2Ygdm90ZXIgYXBwcm92YWwgYW5kL29yIGEgbGVnaXNsYXRpdmVcXG4gICAgICAgIHN1cGVybWFqb3JpdHkgKGdlbmVyYWxseSB0aHJlZS1maWZ0aHMgb3IgdHdvLXRoaXJkcykgdG8gaXNzdWUgZGVidC5cXG4gICAgPC9saT5cXG4gICAgPGxpPlxcbiAgICAgICAgPHN0cm9uZz5SZWZlcmVuZHVtIGFuZC9vciBzdXBlcm1ham9yaXR5IGFuZCBtZXRyaWMuPC9zdHJvbmc+XFxuICAgICAgICBGb3VydGVlbiBzdGF0ZXPigJREZWxhd2FyZSwgRmxvcmlkYSwgSWxsaW5vaXMsIExvdWlzaWFuYSwgTWFzc2FjaHVzZXR0cyxcXG4gICAgICAgIE5ldyBKZXJzZXksIE5ldyBNZXhpY28sIE5ldyBZb3JrLCBPa2xhaG9tYSwgU291dGggQ2Fyb2xpbmEsIFNvdXRoXFxuICAgICAgICBEYWtvdGEsIFRleGFzLCBWaXJnaW5pYSwgYW5kIFdhc2hpbmd0b27igJRyZXF1aXJlIGEgcmVmZXJlbmR1bSBhbmQvb3JcXG4gICAgICAgIHN1cGVybWFqb3JpdHkgYW5kIGhhdmUgYSBtZXRyaWMtYmFzZWQgY2FwIG9uIGRlYnQgb3IgZGVidCBzZXJ2aWNlLlxcbiAgICA8L2xpPlxcbjwvdWw+XFxuPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPjxwPlxcbiAgICA8c3Ryb25nPk5vdGU6PC9zdHJvbmc+IFRoZSBjbGFzc2lmaWNhdGlvbiBzeXN0ZW0gaXMgYSB2YXJpYXRpb24gb24gdGhlIGFwcHJvYWNoIHRha2VuIGluIEQuXFxuICAgIFJvZGVyaWNrIEtpZXdpZXQgYW5kIEtyaXN0aW4gU3pha2FseSwg4oCcQ29uc3RpdHV0aW9uYWwgTGltaXRhdGlvbnMgb25cXG5Cb3Jyb3dpbmc6IEFuIEFuYWx5c2lzIG9mIFN0YXRlIEJvbmRlZCBJbmRlYnRlZG5lc3Ms4oCdICAgIDxjaXRlPlRoZSBKb3VybmFsIG9mIExhdywgRWNvbm9taWNzICZhbXA7IE9yZ2FuaXphdGlvbjwvY2l0ZT4gMTIsIG5vLiAxICgxOTk2KTpcXG4gICAgNjItOTcsXFxuICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmpzdG9yLm9yZy9zdGFibGUvNzY1MDM5P3NlcT0xI3BhZ2Vfc2Nhbl90YWJfY29udGVudHNcXFwiPlxcbiAgICAgICAgaHR0cHM6Ly93d3cuanN0b3Iub3JnL3N0YWJsZS83NjUwMzk/c2VxPTEjcGFnZV9zY2FuX3RhYl9jb250ZW50czwvYT4uXFxuPC9wPlxcbjxwPlxcbiAgICA8c3Ryb25nPlNvdXJjZTo8L3N0cm9uZz4gUGV3IGFuYWx5c2lzIG9mIHN0YXRlIGNvbnN0aXR1dGlvbnMgYW5kIHN0YXR1dGVzXFxuPC9wPjwvZGl2PlxcbjxoND5cXG4gICAgQ2VudHJhbGl6YXRpb24gKGZpc2NhbCB5ZWFyIDIwMTQpXFxuPC9oND5cXG48cD5cXG4gICAgQW5vdGhlciBlZmZlY3Qgb2YgQXJpem9uYeKAmXMgcHJvaGliaXRpb24gb24gR08gZGVidCBpcyBkZWNlbnRyYWxpemVkIGRlYnRcXG4gICAgaXNzdWFuY2UuPHN1cD4zPC9zdXA+IFRoaXMgbWVhbnNcXG4gICAgYm9ycm93aW5nIGlzIGRvbmUgYnkgZW50aXRpZXMgb3RoZXIgdGhhbiB0aGUgcHJpbWFyeeKAlG1lYW5pbmdcXG4gICAgc3RhdGXigJRnb3Zlcm5tZW50LCBpbmNsdWRpbmcgdGhlIGluZGVwZW5kZW50IGFnZW5jaWVzIGFuZCBhdXRob3JpdGllcyBrbm93blxcbiAgICBhcyBjb21wb25lbnQgdW5pdHMuIENlbnRyYWxpemF0aW9uIG1lYXN1cmVzIGNvbXBvbmVudCB1bml0IGRlYnQgYXMgYSBzaGFyZVxcbiAgICBvZiB0aGUgdG90YWwgZGVidCBpc3N1ZWQgYnkgYm90aCB0aGUgcHJpbWFyeSBnb3Zlcm5tZW50IGFuZCBpdHMgY29tcG9uZW50XFxuICAgIHVuaXRzLlxcbjwvcD5cXG48cD5cXG4gICAgQ29tcG9uZW50IHVuaXQgZGVidCBnZW5lcmFsbHkgcmVsaWVzIGxlc3Mgb24gc3RhdGUgZnVuZHMgZm9yIHJlcGF5bWVudCB0aGFuXFxuICAgIHByaW1hcnkgZ292ZXJubWVudCBkZWJ0LiBPZnRlbiwgbGVuZGVycyBoYXZlIG5vIGxlZ2FsIGNsYWltIG9uIHN0YXRlXFxuICAgIGdlbmVyYWwgZnVuZHMgaWYgdGhlIGNvbXBvbmVudCB1bml0IGRlZmF1bHRzLiBBcyBhIHJlc3VsdCwgc3RhdGVcXG4gICAgY29tcGFyaXNvbnMgYmFzZWQgb24gdG90YWwgZGVidCBtYXkgYmUgbWlzbGVhZGluZy4gTW9udGFuYSBhbmQgRGVsYXdhcmUsXFxuICAgIGZvciBleGFtcGxlLCBoYXZlIGFib3V0IHRoZSBzYW1lIHRvdGFsIGRlYnQsIGJ1dCBtb3N0IG9mIE1vbnRhbmHigJlzIGRlYnQgaXNcXG4gICAgaGVsZCBieSBjb21wb25lbnQgdW5pdHMgYW5kIG1vc3Qgb2YgRGVsYXdhcmXigJlzIGlzIGhlbGQgYnkgdGhlIHN0YXRlLlxcbjwvcD5cXG48ZGl2IGNsYXNzPVxcXCJwY3Qtbm90ZVxcXCI+PHA+XFxuICAgIDxzdHJvbmc+Tm90ZTo8L3N0cm9uZz4gVG8gY2FsY3VsYXRlIGNlbnRyYWxpemF0aW9uIGluIGEgc3RhdGUsIFBldyBmaXJzdCBhbmFseXplZCB0aGVcXG4gICAgc3RhdGXigJlzIGNvbXByZWhlbnNpdmUgYW5udWFsIGZpbmFuY2lhbCByZXBvcnQgdG8gZGV0ZXJtaW5lIGhvdyBtdWNoIGRlYnRcXG4gICAgd2FzIGhlbGQgYnkgdGhlIHByaW1hcnkgZ292ZXJubWVudC4gVGhhdCB3YXMgdGhlbiBjb21wYXJlZCB0byBhIHN1bSBvZiB0aGVcXG4gICAgZGVidCBvZiBtYWpvciBjb21wb25lbnQgdW5pdHMgYXMgcmVwb3J0ZWQgaW4gdGhlaXIgYW5udWFsIGZpbmFuY2lhbFxcbiAgICBzdGF0ZW1lbnRzLjxzdXA+NDwvc3VwPiBcXG48L3A+PC9kaXY+XFxuPGg0PlxcbiAgICBUaGUgc3RhdGUtbG9jYWwgYm9ycm93aW5nIGRpdmlzaW9uICgyMDE1KVxcbjwvaDQ+XFxuPHA+XFxuICAgIE9uZSBmYWN0b3IgdGhhdCBpbmZsdWVuY2VzIHN0YXRlIGRlYnQgbGV2ZWxzIGlzIHRoZSBkaXZpc2lvbiBvZiBib3Jyb3dpbmdcXG4gICAgYmV0d2VlbiBzdGF0ZSBhbmQgbG9jYWwgZ292ZXJubWVudHMuIEluIHNvbWUgc3RhdGVzLCBsb2NhbCBnb3Zlcm5tZW50cyBhcmVcXG4gICAgcmVzcG9uc2libGUgZm9yIHBheWluZyBmb3IgbW9zdCBjYXBpdGFsIHByb2plY3RzIHdpdGhpbiB0aGVpclxcbiAgICBqdXJpc2RpY3Rpb25zLiBJbiBvdGhlciBwbGFjZXMsIHRoZSBzdGF0ZSBpcyByZXNwb25zaWJsZSBmb3IgdGhvc2VcXG4gICAgcHJvamVjdHMuIEluc3RlYWQgb2YgYSBjaXR5IG9yIHRvd24gYm9uZGluZyB0byBmaW5hbmNlIHRoZW0sIHRoZSBzdGF0ZVxcbiAgICB0YWtlcyBvbiB0aGlzIGRlYnTigJRpbmNyZWFzaW5nIGl0cyBvdmVyYWxsIGJvcnJvd2luZy4gVGhlIGRpdmlzaW9uIG9mXFxuICAgIGJvcnJvd2luZyByZXNwb25zaWJpbGl0eSBpcyByZWxhdGVkIHRvIHRoZSBkZWJ0IGxpbWl0LiBMb2NhbCBnb3Zlcm5tZW50cyBpblxcbiAgICBBcml6b25hLCBmb3IgZXhhbXBsZSwgYm9ycm93IG1vcmUgdGhhbiB0aGUgc3RhdGUgZG9lcyBiZWNhdXNlIHRoZSBzdGF0ZeKAmXNcXG5hYmlsaXR5IHRvIGJvcnJvdyBpcyBzbyByZXN0cmljdGVkLjxzdXA+NTwvc3VwPiBUaGlzIHRvb2wgbWVhc3VyZXMgdGhlXFxuICAgIHN0YXRlLWxvY2FsIGJvcnJvd2luZyBkaXZpc2lvbiBhcyB0aGUgc2hhcmUgb2YgdG90YWwgZGVidCB3aXRoaW4gYSBzdGF0ZVxcbiAgICBpc3N1ZWQgYnkgbG9jYWwgZ292ZXJubWVudHMuXFxuPC9wPlxcbjxkaXYgY2xhc3M9XFxcInBjdC1ub3RlXFxcIj48cD5cXG4gICAgPHN0cm9uZz5Tb3VyY2U6PC9zdHJvbmc+IFBldyBhbmFseXNpcyBvZiBkYXRhIGZyb20gVS5TLiBDZW5zdXMgQnVyZWF1LCDigJxBbm51YWwgU3VydmV5IG9mXFxuICAgIFN0YXRlIGFuZCBMb2NhbCBHb3Zlcm5tZW50IEZpbmFuY2VzOiAyMDE1IERhdGEgUmVsZWFzZeKAnSAoMjAxOCksXFxuICAgIDxhXFxuICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dy5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvZ292LWZpbmFuY2VzL25ld3Nyb29tL3VwZGF0ZXMvcmVsZWFzZS5odG1sXFxcIlxcbiAgICA+XFxuICAgICAgICBodHRwczovL3d3dy5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvZ292LWZpbmFuY2VzL25ld3Nyb29tL3VwZGF0ZXMvcmVsZWFzZS5odG1sPC9hPlxcbjwvcD48L2Rpdj5cXG48cD5cXG4gICAgPHN0cm9uZz48L3N0cm9uZz5cXG48L3A+XFxuPGgzIGNsYXNzPVxcXCJzdGF0aWNcXFwiPlxcbiAgICBGaXNjYWwgY29uZGl0aW9ucyBhbmQgaW5mcmFzdHJ1Y3R1cmUgbmVlZHNcXG48L2gzPlxcbjxwPlxcbiAgICBGaXNjYWwgY29uZGl0aW9ucyBtYXkgYWZmZWN0IGEgc3RhdGXigJlzIHdpbGxpbmduZXNzIHRvIGlzc3VlIGRlYnQgYW5kXFxuICAgIGFiaWxpdHkgdG8gcmVwYXkgaXQsIHdoaWxlIGluZnJhc3RydWN0dXJlIG5lZWRzIG1pZ2h0IGluY3JlYXNlIGEgc3RhdGXigJlzXFxuICAgIGRlbWFuZCBmb3IgZGVidC4gT2JzZXJ2aW5nIHRyZW5kcyBhbmQgdmFyaWF0aW9ucyBhbW9uZyBzdGF0ZXMgaW4gYm90aFxcbiAgICBjYXRlZ29yaWVzIGNhbiBhbGxvdyBvZmZpY2lhbHMgdG8gY3JlYXRlIG1vcmUgYXBwcm9wcmlhdGUgcGVlciBncm91cHMuXFxuPC9wPlxcbjxoND5cXG4gICAgUmV2ZW51ZSB2b2xhdGlsaXR5ICgxOTk3LTIwMTYpXFxuPC9oND5cXG48cD5cXG4gICAgUmV2ZW51ZSB2b2xhdGlsaXR5IGlzIHRoZSBhbm51YWwgZmx1Y3R1YXRpb24gaW4gdGF4IGNvbGxlY3Rpb25zIGFuZCBpc1xcbiAgICBhZmZlY3RlZCBieSBlYWNoIHN0YXRl4oCZcyBtaXggb2YgdGF4IHN0cmVhbXMuIEl0IGluZGljYXRlcyB3aGV0aGVyIGEgc3RhdGVcXG4gICAgY2FuIGV4cGVjdCB0byBkZWRpY2F0ZSBhIHJlbGF0aXZlbHkgY29uc2lzdGVudCBzaGFyZSBvZiBpdHMgcmV2ZW51ZSB0byBpdHNcXG4gICAgbGlhYmlsaXRpZXMgeWVhciB0byB5ZWFyIG9yIHdoZXRoZXIgdGhhdCBzaGFyZSB3aWxsIHNob3cgZ3JlYXRlclxcbiAgICBmbHVjdHVhdGlvbiBhcyByZXZlbnVlIHZhcmllcy4gU3RhdGVzIHdpdGggc3RhYmxlIHJldmVudWUgY2FuIHBsYW4gZGVidFxcbiAgICBpc3N1YW5jZXMgYW5kIHBheSBkb3duIGRlYnQgbW9yZSBlYXNpbHkgdGhhbiBzdGF0ZXMgd2l0aCB1bmNlcnRhaW4gdGF4XFxuICAgIGNvbGxlY3Rpb25zIGNhbi48c3VwPjY8L3N1cD4gU3RhdGVzXFxuICAgIHdpdGggbW9yZSB2b2xhdGlsZSByZXZlbnVlIG1heSB0aGVyZWZvcmUgd2lzaCB0byBjb21wYXJlIHRoZW1zZWx2ZXMgdG9cXG4gICAgc3RhdGVzIHdpdGggc2ltaWxhciBjb25jZXJucy5cXG48L3A+XFxuPHA+XFxuICAgIFBldyB1c2VkIGRhdGEgZnJvbSAxOTk3IHRvIDIwMTYgdG8gY2FsY3VsYXRlIGEgcmV2ZW51ZSB2b2xhdGlsaXR5IHNjb3JlIGZvclxcbiAgICBlYWNoIHN0YXRlLiBUaGUgc2NvcmUgcmVmbGVjdHMgdmFyaWF0aW9ucyBpbiB5ZWFybHkgcGVyY2VudGFnZSBjaGFuZ2VzIGluXFxucmV2ZW51ZSBiZXR3ZWVuIDE5OTcgYW5kIDIwMTYuPHN1cD43PC9zdXA+IFN0YXRlcyBoYXZlIGRpZmZlcmluZ1xcbiAgICBsZXZlbHMgb2Ygdm9sYXRpbGl0eSBiZWNhdXNlIHRoZXkgaGF2ZSB1bmlxdWUgcmV2ZW51ZSBtaXhlcy4gQWxhc2thIGhhcyBhXFxuICAgIGhpZ2hseSB2b2xhdGlsZSByZXZlbnVlIHN0cmVhbSBiZWNhdXNlIG11Y2ggb2YgaXRzIGNvbGxlY3Rpb25zIGNvbWUgZnJvbVxcbiAgICB1bnByZWRpY3RhYmxlIHNldmVyYW5jZSB0YXhlcyBvbiBvaWwuIE90aGVyIHN0YXRlc+KAlHN1Y2ggYXMgU291dGggRGFrb3RhLFxcbiAgICB3aGljaCBlYXJucyBtb3JlIG9mIGl0cyByZXZlbnVlIGZyb20gc3RhYmxlIHNvdXJjZXMgbGlrZSBwZXJzb25hbCBpbmNvbWVcXG4gICAgdGF4ZXPigJRoYXZlIGxlc3Mgdm9sYXRpbGl0eS4gQSBsb3cgdm9sYXRpbGl0eSBzY29yZSBtZWFucyB0aGF0IHJldmVudWVcXG4gICAgbGV2ZWxzIHdlcmUgc2ltaWxhciBmcm9tIHllYXIgdG8geWVhciwgYW5kIGEgaGlnaCBzY29yZSBpbmRpY2F0ZXMgdGhhdFxcbiAgICByZXZlbnVlIGdyZXcgb3IgZGVjbGluZWQgbW9yZSBkcmFtYXRpY2FsbHkuXFxuPC9wPlxcbjxkaXYgY2xhc3M9XFxcInBjdC1ub3RlXFxcIj48cD5cXG4gICAgPHN0cm9uZz5Tb3VyY2U6PC9zdHJvbmc+IFRoZSBQZXcgQ2hhcml0YWJsZSBUcnVzdHMsIOKAnFRheCBSZXZlbnVlIFZvbGF0aWxpdHksIEZZIDE5OTctMjAxNizigJ1cXG4gICAgbGFzdCBtb2RpZmllZCBBdWcuIDI5LCAyMDE4LFxcbiAgICA8YVxcbiAgICAgICAgaHJlZj1cXFwiaHR0cDovL3d3dy5wZXd0cnVzdHMub3JnL2VuL3Jlc2VhcmNoLWFuZC1hbmFseXNpcy9kYXRhLXZpc3VhbGl6YXRpb25zLzIwMTQvZmlzY2FsLTUwI2luZDZcXFwiXFxuICAgID5cXG4gICAgICAgIGh0dHA6Ly93d3cucGV3dHJ1c3RzLm9yZy9lbi9yZXNlYXJjaC1hbmQtYW5hbHlzaXMvZGF0YS12aXN1YWxpemF0aW9ucy8yMDE0L2Zpc2NhbC01MCNpbmQ2PC9hPlxcbjwvcD48L2Rpdj5cXG48aDQ+XFxuICAgIFBvcHVsYXRpb24gZ3Jvd3RoICgyMDA4LTE3KVxcbjwvaDQ+XFxuPHA+XFxuICAgIFBvcHVsYXRpb24gZ3Jvd3RoIGRyaXZlcyBpbmZyYXN0cnVjdHVyZSBuZWVkcy4gTW9yZSBwZW9wbGUgbWVhbnMgZ3JlYXRlclxcbiAgICBwcmVzc3VyZSBvbiBhIHN0YXRl4oCZcyBpbmZyYXN0cnVjdHVyZSwgbmVjZXNzaXRhdGluZyBpbXByb3ZlbWVudHMgYW5kIG5ld1xcbiAgICBjb25zdHJ1Y3Rpb24uIFJlc2VhcmNoIHNob3dzIHRoYXQgYXMgYSBzdGF0ZeKAmXMgcG9wdWxhdGlvbiBncm93cywgc28gdG9vXFxuZG9lcyBpdHMgZGVtYW5kIGZvciwgYW5kIGluIHNvbWUgY2FzZXMgc3BlbmRpbmcgb24sIGNhcGl0YWwgY29uc3RydWN0aW9uLjxzdXA+ODwvc3VwPiBcXG48L3A+XFxuPHA+XFxuICAgIEFzIGEgcmVzdWx0LCBzdGF0ZXMgd2l0aCBzaW1pbGFyIGdyb3d0aCBwYXR0ZXJucyBtYXkgaGF2ZSBzaW1pbGFyIGRlbWFuZHNcXG4gICAgZm9yIGluZnJhc3RydWN0dXJlLiBGb3IgdGhpcyByZWFzb24sIFBldyB1c2VkIHBvcHVsYXRpb24gZ3Jvd3RoIGFzIGEgcHJveHlcXG4gICAgZm9yIGluZnJhc3RydWN0dXJlIGRlbWFuZCwgYSBtZXRyaWMgZm9yIHdoaWNoIGV4YWN0LCByZWxpYWJsZSBzb3VyY2VzIGFyZVxcbiAgICBzY2FyY2UuIE9ic2VydmluZyBwb3B1bGF0aW9uIGdyb3d0aCBjYW4gaGVscCBpZGVudGlmeSBwZWVycyBhbmQgcHJvdmlkZXMgYVxcbiAgICBkYXRhIHBvaW50IG5vdCBvZnRlbiB1c2VkIGluIGludGVyc3RhdGUgZGVidCBjb21wYXJpc29ucy5cXG48L3A+XFxuPHA+XFxuICAgIFBldyBzZWxlY3RlZCBhIDEwLXllYXIgcG9wdWxhdGlvbiBncm93dGggcmF0ZSwgbWVhc3VyZWQgYXMgdGhlIGluY3JlYXNlIG9yXFxuICAgIGRlY3JlYXNlIGluIHN0YXRlIHBvcHVsYXRpb24gYmV0d2VlbiAyMDA4IGFuZCAyMDE3LiBBbHRob3VnaCBubyBjb25zZW5zdXNcXG4gICAgZXhpc3RzIGluIGFjYWRlbWljIGxpdGVyYXR1cmUgcmVnYXJkaW5nIHRoZSBhcHByb3ByaWF0ZSB0aW1lIHNwYW4gZm9yXFxuICAgIGV4YW1pbmluZyBwb3B1bGF0aW9uIHRyZW5kcywgdGhpcyBwZXJpb2QgY2FwdHVyZWQgdGhlIHRyb3VnaCBvZiB0aGUgR3JlYXRcXG4gICAgUmVjZXNzaW9uLCB0aGUgc3Vic2VxdWVudCBlY29ub21pYyBleHBhbnNpb24sIGFuZCB0aGUgcmVzdWx0aW5nIGRlbW9ncmFwaGljXFxuICAgIGFuZCBnZW9ncmFwaGljIHNoaWZ0cy48c3VwPjk8L3N1cD4gXFxuPC9wPlxcbjxkaXYgY2xhc3M9XFxcInBjdC1ub3RlXFxcIj48cD5cXG4gICAgPHN0cm9uZz5Tb3VyY2VzOjwvc3Ryb25nPiBQZXcgYW5hbHlzaXMgb2YgZGF0YSBmcm9tIFUuUy4gQ2Vuc3VzIEJ1cmVhdSwg4oCcQW5udWFsIFN1cnZleSBvZlxcbiAgICBTdGF0ZSBhbmQgTG9jYWwgR292ZXJubWVudCBGaW5hbmNlczogMjAxNSBEYXRhIFJlbGVhc2XigJ0gKDIwMTgpLFxcbiAgICA8YVxcbiAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL2dvdi1maW5hbmNlcy9uZXdzcm9vbS91cGRhdGVzL3JlbGVhc2UuaHRtbFxcXCJcXG4gICAgPlxcbiAgICAgICAgaHR0cHM6Ly93d3cuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL2dvdi1maW5hbmNlcy9uZXdzcm9vbS91cGRhdGVzL3JlbGVhc2UuaHRtbDwvYT5cXG4gICAgOyBVLlMuIENlbnN1cyBCdXJlYXUsIOKAnEFubnVhbCBFc3RpbWF0ZXMgb2YgdGhlIFJlc2lkZW50IFBvcHVsYXRpb24gZm9yIHRoZVxcbiAgICBVbml0ZWQgU3RhdGVzLCBSZWdpb25zLCBTdGF0ZXMsIGFuZCBQdWVydG8gUmljbzogQXByaWwgMSwgMjAxMCB0byBKdWx5IDEsXFxuICAgIDIwMTcs4oCdIFRhYmxlIDEsXFxuICAgIDxhXFxuICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dzIuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3BvcGVzdC90YWJsZXMvMjAxMC0yMDE3L3N0YXRlL3RvdGFscy9uc3QtZXN0MjAxNy0wMS54bHN4XFxcIlxcbiAgICA+XFxuICAgICAgICBodHRwczovL3d3dzIuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3BvcGVzdC90YWJsZXMvMjAxMC0yMDE3L3N0YXRlL3RvdGFscy9uc3QtZXN0MjAxNy0wMS54bHN4PC9hPlxcbiAgICA7IFUuUy4gQ2Vuc3VzIEJ1cmVhdSwg4oCcSW50ZXJjZW5zYWwgRXN0aW1hdGVzIG9mIHRoZSBSZXNpZGVudCBQb3B1bGF0aW9uIGZvclxcbiAgICB0aGUgVW5pdGVkIFN0YXRlcywgUmVnaW9ucywgU3RhdGVzLCBhbmQgUHVlcnRvIFJpY286IEFwcmlsIDEsIDIwMDAgdG8gSnVseVxcbiAgICAxLCAyMDEwLOKAnSBUYWJsZSAxLFxcbiAgICA8YVxcbiAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cyLmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9wb3Blc3QvdGFibGVzLzIwMDAtMjAxMC9pbnRlcmNlbnNhbC9zdGF0ZS9zdC1lc3QwMGludC0wMS54bHNcXFwiXFxuICAgID5cXG4gICAgICAgIGh0dHBzOi8vd3d3Mi5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvcG9wZXN0L3RhYmxlcy8yMDAwLTIwMTAvaW50ZXJjZW5zYWwvc3RhdGUvc3QtZXN0MDBpbnQtMDEueGxzPC9hPlxcbjwvcD48L2Rpdj5cXG48aDMgY2xhc3M9XFxcInN0YXRpY1xcXCI+XFxuICAgIERlYnQgbGV2ZWxzICgyMDE1KVxcbjwvaDM+XFxuPHA+XFxuICAgIERlYnQgbGV2ZWxzIGFyZSBhIG5hdHVyYWwgcG9pbnQgb2YgY29tcGFyaXNvbiBhbmQgYXJlIGluZmx1ZW5jZWQgYnkgdGhlXFxuICAgIHByZWNlZGluZyBjaGFyYWN0ZXJpc3RpY3MuIFdoaWxlIGFuIGFic29sdXRlIGRvbGxhciBhbW91bnQgcHJvdmlkZXMgdXNlZnVsXFxuICAgIGluZm9ybWF0aW9uLCBpdCBkb2VzIG5vdCBwdXQgdGhlIGFtb3VudCBvZiBkZWJ0IGludG8gY29udGV4dCByZWxhdGl2ZSB0b1xcbiAgICB0aGUgc3RhdGXigJlzIHJlc291cmNlcy48c3VwPjEwPC9zdXA+IFxcbiAgICBHaXZlbiBzaXplLCBwb3B1bGF0aW9uLCBhbmQgZWNvbm9taWMgZGlmZmVyZW5jZXMgYW1vbmcgc3RhdGVzLCBhIGRvbGxhclxcbiAgICBhbW91bnQgaXMgYWxzbyBsZXNzIHVzZWZ1bCBmb3Igc3RhdGUgY29tcGFyaXNvbnMuIEluc3RlYWQsIG5vcm1hbGl6ZWRcXG4gICAgcmF0aW9zIGFsbG93IHN0YXRlcyBvZiB2YXJpb3VzIHNpemVzIHRvIGNvbXBhcmUgdGhlbXNlbHZlcy4gQ29uc2lzdGVudCB3aXRoXFxuICAgIHRoZSBiZXN0IHByYWN0aWNlcyBmb3IgdW5kZXJzdGFuZGluZyBkZWJ0IGFmZm9yZGFiaWxpdHksIFBld+KAmXMgdG9vbFxcbiAgICBpbmNsdWRlcyB0d28gcmF0aW9z4oCUZGVidCBwZXIgY2FwaXRhIGFuZCBkZWJ0IGFzIGEgcGVyY2VudGFnZSBvZiBzdGF0ZVxcbiAgICBwZXJzb25hbCBpbmNvbWXigJR0byBnaXZlIGEgbW9yZSBjb21wbGV0ZSBtZWFzdXJlIG9mIGEgc3RhdGXigJlzIGRlYnQuXFxuICAgIFN0YXRlLWJhc2VkIGFuYWx5c2VzIG9mdGVuIHVzZSBhIHJhdGlvIG9mIGRlYnQgc2VydmljZSB0byByZXZlbnVlIHdoZW5cXG4gICAgZXZhbHVhdGluZyBkZWJ0IGxldmVscyBhbmQgc2V0dGluZyBsaW1pdHMuIFRoaXMgcmF0aW8gaXMgbm90IGluY2x1ZGVkIGluXFxudGhpcyB0b29sIGR1ZSB0byBjcm9zcy1zdGF0ZSBjb21wYXJhYmlsaXR5IGlzc3Vlcy48c3VwPjExPC9zdXA+IFxcbjwvcD5cXG48aDQ+XFxuICAgIERlYnQgcGVyIGNhcGl0YVxcbjwvaDQ+XFxuPHA+XFxuICAgIEJlY2F1c2UgZGVidCBpcyByZXBhaWQgdGhyb3VnaCByZXZlbnVlIGdlbmVyYWxseSBpbiB0aGUgZm9ybSBvZiB0YXhlcyBvclxcbiAgICB1c2VyIGZlZXMgcGFpZCBieSByZXNpZGVudHMsIGFzc2Vzc2luZyBkZWJ0IHJlbGF0aXZlIHRvIGl0cyByZXBheW1lbnRcXG4gICAgc291cmNl4oCUdGhlIHJlc2lkZW504oCUaXMgYSBjb21tb24gYXBwcm9hY2guIERlYnQgcGVyIGNhcGl0YSwgd2hpY2ggbWVhc3VyZXNcXG4gICAgdG90YWwgZGVidCBhZ2FpbnN0IGEgc3RhdGXigJlzIHBvcHVsYXRpb24sIG1ha2VzIGNvbXBhcmlzb25zIGJldHdlZW4gc3RhdGVzXFxuICAgIG9mIGRpZmZlcmVudCBzaXplcyBmZWFzaWJsZSBhbmQgaGVscHMgcG9saWN5bWFrZXJzIHVuZGVyc3RhbmQgdGhlIGRlYnRcXG4gICAgYnVyZGVuIG9uIGluZGl2aWR1YWwgcmVzaWRlbnRzLlxcbjwvcD5cXG48ZGl2IGNsYXNzPVxcXCJwY3Qtbm90ZVxcXCI+PHA+XFxuICAgIDxzdHJvbmc+U291cmNlczo8L3N0cm9uZz4gUGV3IGFuYWx5c2lzIG9mIGRhdGEgZnJvbSBVLlMuIENlbnN1cyBCdXJlYXUsIOKAnEFubnVhbCBTdXJ2ZXkgb2ZcXG4gICAgU3RhdGUgYW5kIExvY2FsIEdvdmVybm1lbnQgRmluYW5jZXMs4oCdIDIwMTUgRGF0YSBSZWxlYXNlICgyMDE4KSxcXG4gICAgPGFcXG4gICAgICAgIGhyZWY9XFxcImh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWxcXFwiXFxuICAgID5cXG4gICAgICAgIGh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWw8L2E+XFxuICAgIDsgVS5TLiBDZW5zdXMgQnVyZWF1LCDigJxBbm51YWwgRXN0aW1hdGVzIG9mIHRoZSBSZXNpZGVudCBQb3B1bGF0aW9uIGZvciB0aGVcXG4gICAgVW5pdGVkIFN0YXRlcywgUmVnaW9ucywgU3RhdGVzLCBhbmQgUHVlcnRvIFJpY286IEFwcmlsIDEsIDIwMTAgdG8gSnVseSAxLFxcbiAgICAyMDE3LOKAnSBUYWJsZSAxLFxcbiAgICA8YVxcbiAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cyLmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9wb3Blc3QvdGFibGVzLzIwMTAtMjAxNy9zdGF0ZS90b3RhbHMvbnN0LWVzdDIwMTctMDEueGxzeFxcXCJcXG4gICAgPlxcbiAgICAgICAgaHR0cHM6Ly93d3cyLmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9wb3Blc3QvdGFibGVzLzIwMTAtMjAxNy9zdGF0ZS90b3RhbHMvbnN0LWVzdDIwMTctMDEueGxzeDwvYT5cXG48L3A+PC9kaXY+XFxuPGg0PlxcbiAgICBEZWJ0IGFzIGEgcGVyY2VudGFnZSBvZiBzdGF0ZSBwZXJzb25hbCBpbmNvbWVcXG48L2g0PlxcbjxwPlxcbiAgICBBbm90aGVyIGNvbW1vbiBwcmFjdGljZSwgdXNlZCBieSBjcmVkaXQgcmF0aW5nIGFnZW5jaWVzIGFuZCBhY2FkZW1pY3MsIGlzXFxuICAgIHRvIGNvbnNpZGVyIGEgc3RhdGXigJlzIGRlYnQgbGV2ZWwgcmVsYXRpdmUgdG8gcmVzb3VyY2VzIGF2YWlsYWJsZSBmb3JcXG4gICAgcmVwYXltZW50LjxzdXA+MTI8L3N1cD4gQSByYXRpb1xcbiAgICBjb21wYXJpbmcgZGVidCBub3Qgb25seSB0byBwb3B1bGF0aW9uIGJ1dCB0byB0YXhwYXllciBlYXJuaW5nIHBvd2VyIG9yXFxud2VhbHRoIGlzIHRoZXJlZm9yZSBiZW5lZmljaWFsLjxzdXA+MTM8L3N1cD4gRGVidCBhcyBhIHBlcmNlbnRhZ2VcXG4gICAgb2Ygc3RhdGUgcGVyc29uYWwgaW5jb21lIGFkZHJlc3NlcyB0aGlzIGFuZCBpcyBjb21tb25seSB1c2VkIGJ5IHN0YXRlcyB0b1xcbiAgICBldmFsdWF0ZSBkZWJ0IGxldmVscy5cXG48L3A+XFxuPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPjxwPlxcbiAgICA8c3Ryb25nPlNvdXJjZXM6PC9zdHJvbmc+IFBldyBhbmFseXNpcyBvZiBkYXRhIGZyb20gVS5TLiBDZW5zdXMgQnVyZWF1LCDigJxBbm51YWwgU3VydmV5IG9mXFxuICAgIFN0YXRlIGFuZCBMb2NhbCBHb3Zlcm5tZW50IEZpbmFuY2VzLOKAnSAyMDE1IERhdGEgUmVsZWFzZSAoMjAxOCksXFxuICAgIDxhXFxuICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dy5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvZ292LWZpbmFuY2VzL25ld3Nyb29tL3VwZGF0ZXMvcmVsZWFzZS5odG1sXFxcIlxcbiAgICA+XFxuICAgICAgICBodHRwczovL3d3dy5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvZ292LWZpbmFuY2VzL25ld3Nyb29tL3VwZGF0ZXMvcmVsZWFzZS5odG1sPC9hPlxcbiAgICA7IFUuUy4gQnVyZWF1IG9mIEVjb25vbWljIEFuYWx5c2lzLCDigJxTQTEgUGVyc29uYWwgSW5jb21lIFN1bW1hcnk6IFBlcnNvbmFsXFxuICAgIEluY29tZSwgUG9wdWxhdGlvbiwgUGVyIENhcGl0YSBQZXJzb25hbCBJbmNvbWUs4oCdXFxuICAgIGh0dHBzOi8vd3d3LmJlYS5nb3YvZGF0YS9pbmNvbWUtc2F2aW5nL3BlcnNvbmFsLWluY29tZS1ieS1zdGF0ZS5cXG48L3A+PC9kaXY+XFxuPGFzaWRlIGNsYXNzPVxcXCJwY3QtYm94XFxcIj5cXG4gICAgICAgIDxoND5DZW5zdXMgRGF0YSB2cy4gTW9vZHnigJlzIE5ldCBUYXgtU3VwcG9ydGVkIERlYnQgQ2FsY3VsYXRpb25zPC9oND5cXG4gICAgXFxuXFx0PHA+XFxuXFx0ICAgIFdoaWxlIGRlYnQgYWZmb3JkYWJpbGl0eSBzdHVkaWVzIG9mdGVuIHVzZSBNb29keeKAmXMgSW52ZXN0b3JzIFNlcnZpY2UgSW5jLlxcblxcdCAgICBjYWxjdWxhdGlvbnMgb2Ygc3RhdGUgbmV0IHRheC1zdXBwb3J0ZWQgZGVidCB0byBjb21wYXJlIGJvcnJvd2luZywgVGhlIFBld1xcblxcdCAgICBDaGFyaXRhYmxlIFRydXN0cyB1c2VkIFUuUy4gQ2Vuc3VzIEJ1cmVhdSBkYXRhIGZvciB0d28gcmVhc29ucy5cXG5cXHQ8L3A+XFxuXFx0PHA+XFxuXFx0ICAgIEZpcnN0LCB0aGUgQ2Vuc3VzIEJ1cmVhdSBjYXB0dXJlcyBhIGJyb2FkZXIgc2NvcGUgb2YgZGVidCB0aGFuIGRvZXNcXG5cXHQgICAgTW9vZHnigJlzLCBpbmNsdWRpbmcgc29tZSBkZWJ0IGhlbGQgYnkgZGVwZW5kZW50IGFnZW5jaWVzIHN1Y2ggYXMgcHVibGljXFxuXFx0YXV0aG9yaXRpZXMgYW5kIGNvbXBvbmVudCB1bml0cyw8c3VwPjE0PC9zdXA+IGdpdmluZyBhIG1vcmVcXG5cXHQgICAgYWNjdXJhdGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRlYnQgYnVyZGVuIHN1cHBvcnRlZCBieSBhIHN0YXRl4oCZc1xcblxcdCAgICByZXNpZGVudHMuPHN1cD4xNTwvc3VwPiBTZWNvbmQsIHRoZVxcblxcdCAgICBidXJlYXUgYW5hbHl6ZXMgaG93IGNsb3NlbHkgdGhlIGRlcGVuZGVudCBhZ2VuY2llcyBpdCBpbmNsdWRlcyBpbiBpdHNcXG5cXHQgICAgZGVmaW5pdGlvbiBvZiBzdGF0ZSBkZWJ0IGFyZSBmaXNjYWxseSBvciBhZG1pbmlzdHJhdGl2ZWx5IHRpZWQgdG8gdGhlXFxuXFx0ICAgIHN0YXRlLiBCZWNhdXNlIHVsdGltYXRlIHJlc3BvbnNpYmlsaXR5IGZvciBhIGRlYnQgY2FuIGJlIG5lYnVsb3Vz4oCUYW5kIGFcXG5cXHQgICAgc3RhdGUgbWF5IG5vdCBzdXBwb3J0IHRoZSBsaWFiaWxpdGllcyBvZiBpdHMgbW9yZSBpbmRlcGVuZGVudCBlbnRpdGllc+KAlHRoaXNcXG5cXHRmdXJ0aGVyIGVuc3VyZXMgYW4gYWNjdXJhdGUgZGVzY3JpcHRpb24gb2Ygc3RhdGUgZGVidC48c3VwPjE2PC9zdXA+IFxcblxcdDwvcD5cXG48L2FzaWRlPlxcbjxoMyBjbGFzcz1cXFwic3RhdGljXFxcIj5cXG4gICAgQ3JlZGl0IHJhdGluZ3MgKFNlcHRlbWJlciAyMDE4IGFuZCBTZXB0ZW1iZXIgMjAxNSlcXG48L2gzPlxcbjxwPlxcbiAgICBUaGlzIHRvb2wgYWxsb3dzIHVzZXJzIHRvIGdyb3VwIHN0YXRlcyBieSBTdGFuZGFyZCAmYW1wOyBQb29y4oCZcyBjcmVkaXRcXG4gICAgcmF0aW5ncyB0byBleHBsb3JlIGRpZmZlcmVuY2VzIGFtb25nIHRob3NlIHdpdGggc2ltaWxhciBjcmVkaXQgcHJvZmlsZXMuXFxuICAgIFRoZSB1c2VyIGNhbiBzZWxlY3QgY3JlZGl0IHJhdGluZ3MgZnJvbSAyMDE4IG9yIDIwMTUgdG8gbG9vayBhdCBlaXRoZXJcXG4gICAgcmVjZW50IGluZm9ybWF0aW9uIG9yIGluZm9ybWF0aW9uIGNvcnJlc3BvbmRpbmcgdG8gb3RoZXIsIGVhcmxpZXIgZGF0YVxcbiAgICBwb2ludHMgaW4gdGhpcyB0b29sLlxcbjwvcD5cXG48ZGl2IGNsYXNzPVxcXCJwY3Qtbm90ZVxcXCI+PHA+XFxuICAgIDxzdHJvbmc+Tm90ZTo8L3N0cm9uZz4gUGV3IGNvbGxlY3RlZCByYXRpbmdzIG9uIGdlbmVyYWwgb2JsaWdhdGlvbiBpc3N1YW5jZSBhcyBvZiBTZXB0ZW1iZXJcXG4gICAgMjAxOCBhbmQgU2VwdGVtYmVyIDIwMTUuIElmIHRoZSBzdGF0ZSBkb2VzIG5vdCBpc3N1ZSBHTyBib25kcywgdGhlIHJhdGluZ1xcbiAgICBvbiB0aGUgc2VuaW9yLW1vc3QgdGF4LWJhY2tlZCBpc3N1YW5jZSB3YXMgdXNlZCBpbnN0ZWFkLiBJbiBhZGRpdGlvbiB0b1xcbiAgICBTJmFtcDtQLCB0aGVyZSBhcmUgdHdvIG90aGVyIG1ham9yIGNyZWRpdCByYXRpbmcgYWdlbmNpZXM6IE1vb2R54oCZcyBhbmRcXG4gICAgRml0Y2guIFRoZXJlIGlzIGxpdHRsZSB2YXJpYXRpb24gaW4gcmF0aW5ncyBhbW9uZyB0aGUgdGhyZWUgYWdlbmNpZXMuXFxuPC9wPjwvZGl2PlxcbjxkaXYgY2xhc3M9XFxcInBjdC1lbmRub3Rlc1xcXCI+XFxuICAgIFxcbiAgICA8ZGl2IGlkPVxcXCJlZG4xXFxcIj5cXG4gICAgICAgIDxwPlxcbiAxLiBcXG4gICAgICAgICAgICBUaGUgUGV3IENoYXJpdGFibGUgVHJ1c3RzLCDigJxTdHJhdGVnaWVzIGZvciBNYW5hZ2luZyBTdGF0ZSBEZWJ04oCdXFxuICAgICAgICAgICAgKDIwMTcpLFxcbiAgICAgICAgICAgIDxhXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcImh0dHA6Ly93d3cucGV3dHJ1c3RzLm9yZy9lbi9yZXNlYXJjaC1hbmQtYW5hbHlzaXMvcmVwb3J0cy8yMDE3LzA2L3N0cmF0ZWdpZXMtZm9yLW1hbmFnaW5nLXN0YXRlLWRlYnRcXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICBodHRwOi8vd3d3LnBld3RydXN0cy5vcmcvZW4vcmVzZWFyY2gtYW5kLWFuYWx5c2lzL3JlcG9ydHMvMjAxNy8wNi9zdHJhdGVnaWVzLWZvci1tYW5hZ2luZy1zdGF0ZS1kZWJ0PC9hPi5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjJcXFwiPlxcbiAgICAgICAgPHA+XFxuIDIuIFxcbiAgICAgICAgICAgIEliaWQuXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG4zXFxcIj5cXG4gICAgICAgIDxwPlxcbiAzLiBcXG4gICAgICAgICAgICBSZXNlYXJjaCBvbiBzdGF0ZSBib3Jyb3dpbmcgcHJhY3RpY2VzIGhhcyBmb3VuZCB0aGF0IGRlYnQgbGltaXRzXFxuICAgICAgICAgICAgZGVjcmVhc2UgdGhlIGNlbnRyYWxpemF0aW9uIG9mIHN0YXRlIGRlYnQgYXMgc3RhdGVzIGJvcnJvdyB0aHJvdWdoXFxuICAgICAgICAgICAgb3RoZXIgZW50aXRpZXMgdG8gY2lyY3VtdmVudCB0aGVzZSBsaW1pdHMuIFNlZSBCZXZlcmx5IFMuIEJ1bmNoLFxcbiAgICAgICAgICAgIOKAnFRoZSBFZmZlY3Qgb2YgQ29uc3RpdHV0aW9uYWwgRGVidCBMaW1pdHMgb24gU3RhdGUgR292ZXJubWVudHPigJkgVXNlXFxuICAgICAgICAgICAgb2YgUHVibGljIEF1dGhvcml0aWVzLOKAnSA8Y2l0ZT5QdWJsaWMgQ2hvaWNlIDwvY2l0ZT42OCwgbm8uIDEtMyAoMTk5MSk6XFxuICAgICAgICAgICAgNTctNjksXFxuICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9hcnRpY2xlLzEwLjEwMDcvQkYwMDE3MzgxOVxcXCI+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vYXJ0aWNsZS8xMC4xMDA3L0JGMDAxNzM4MTk8L2E+XFxuICAgICAgICAgICAgOyBSaG9uZGEgUmloZXJkIFRyYXV0bWFuLCDigJxUaGUgSW1wYWN0IG9mIFN0YXRlIERlYnQgTWFuYWdlbWVudCBvblxcbiAgICAgICAgICAgIERlYnQgQWN0aXZpdHks4oCdIDxjaXRlPlB1YmxpYyBCdWRnZXRpbmcgJmFtcDsgRmluYW5jZSA8L2NpdGU+MTUsIG5vLiAyXFxuICAgICAgICAgICAgKDE5OTUpOiAzMy01MSxcXG4gICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwczovL2RvaS5vcmcvMTAuMTExMS8xNTQwLTU4NTAuMDEwMzhcXFwiPlxcbiAgICAgICAgICAgICAgICBodHRwczovL2RvaS5vcmcvMTAuMTExMS8xNTQwLTU4NTAuMDEwMzg8L2E+LlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuNFxcXCI+XFxuICAgICAgICA8cD5cXG4gNC4gXFxuICAgICAgICAgICAgRm9yIG1vcmUgZGV0YWlsIG9uIGhvdyB3ZSBjb2xsZWN0ZWQgdGhlc2UgZGF0YSwgc2VlIFRoZSBQZXdcXG4gICAgICAgICAgICBDaGFyaXRhYmxlIFRydXN0cywg4oCcU3RyYXRlZ2llcyBmb3IgTWFuYWdpbmcgU3RhdGUgRGVidCzigJ1cXG4gICAgICAgICAgICBtZXRob2RvbG9neS5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjVcXFwiPlxcbiAgICAgICAgPHA+XFxuIDUuIFxcbiAgICAgICAgICAgIEZvciBhIGRpc2N1c3Npb24gb2YgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGRlYnQgbGltaXRzIGFuZCBsb2NhbFxcbiAgICAgICAgICAgIGJvcnJvd2luZywgc2VlIEQuIFJvZGVyaWNrIEtpZXdpZXQgYW5kIEtyaXN0aW4gU3pha2FseSxcXG4gICAgICAgICAgICDigJxDb25zdGl0dXRpb25hbCBMaW1pdGF0aW9ucyBvbiBCb3Jyb3dpbmc6IEFuIEFuYWx5c2lzIG9mIFN0YXRlXFxuQm9uZGVkIEluZGVidGVkbmVzcyzigJ0gICAgICAgICAgICA8Y2l0ZT5UaGUgSm91cm5hbCBvZiBMYXcsIEVjb25vbWljcyAmYW1wOyBPcmdhbml6YXRpb24gPC9jaXRlPjEyLCBuby4gMVxcbiAgICAgICAgICAgICgxOTk2KTogNjItOTcsXFxuICAgICAgICAgICAgPGFcXG4gICAgICAgICAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cuanN0b3Iub3JnL3N0YWJsZS83NjUwMzk/c2VxPTEjcGFnZV9zY2FuX3RhYl9jb250ZW50c1xcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmpzdG9yLm9yZy9zdGFibGUvNzY1MDM5P3NlcT0xI3BhZ2Vfc2Nhbl90YWJfY29udGVudHM8L2E+LlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuNlxcXCI+XFxuICAgICAgICA8cD5cXG4gNi4gXFxuICAgICAgICAgICAgT25lIHN0dWR5IGZvdW5kIHRoYXQgYXMgZWNvbm9taWMgdm9sYXRpbGl0eSBpbmNyZWFzZXMsIHN0YXRlc1xcbiAgICAgICAgICAgIHByZWZlciB0byBwYXkgZm9yIGluZnJhc3RydWN0dXJlIHByb2plY3RzIHdpdGggY2FzaCByYXRoZXIgdGhhblxcbiAgICAgICAgICAgIHRocm91Z2ggZmluYW5jaW5nLiBXZW4gV2FuZywgWWlsaW4gSG91LCBhbmQgV2lsbGlhbSBEdW5jb21lLFxcbiAgICAgICAgICAgIOKAnERldGVybWluYW50cyBvZiBQYXktYXMtWW91LUdvIEZpbmFuY2luZyBvZiBDYXBpdGFsIFByb2plY3RzOlxcbiAgICAgICAgICAgIEV2aWRlbmNlIEZyb20gdGhlIFN0YXRlcyzigJ0gPGNpdGU+UHVibGljIEJ1ZGdldGluZyAmYW1wOyBGaW5hbmNlIDwvY2l0ZT5cXG4gICAgICAgICAgICAyNywgbm8uIDQgKDIwMDcpOiAxOC00MixcXG4gICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwczovL2RvaS5vcmcvMTAuMTExMS9qLjE1NDAtNTg1MC4yMDA3LjAwODkyLnhcXFwiPlxcbiAgICAgICAgICAgICAgICBodHRwczovL2RvaS5vcmcvMTAuMTExMS9qLjE1NDAtNTg1MC4yMDA3LjAwODkyLng8L2E+LlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuN1xcXCI+XFxuICAgICAgICA8cD5cXG4gNy4gXFxuICAgICAgICAgICAgVGhlIFBldyBDaGFyaXRhYmxlIFRydXN0cywg4oCcVGF4IFJldmVudWUgVm9sYXRpbGl0eSBWYXJpZXMgQWNyb3NzXFxuICAgICAgICAgICAgU3RhdGVzLCBSZXZlbnVlIFN0cmVhbXMs4oCdIGFjY2Vzc2VkIFNlcHQuIDEwLCAyMDE4LFxcbiAgICAgICAgICAgIDxhXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcImh0dHA6Ly93d3cucGV3dHJ1c3RzLm9yZy9lbi9tdWx0aW1lZGlhL2RhdGEtdmlzdWFsaXphdGlvbnMvMjAxNC9maXNjYWwtNTAjaW5kNlxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHA6Ly93d3cucGV3dHJ1c3RzLm9yZy9lbi9tdWx0aW1lZGlhL2RhdGEtdmlzdWFsaXphdGlvbnMvMjAxNC9maXNjYWwtNTAjaW5kNjwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG44XFxcIj5cXG4gICAgICAgIDxwPlxcbiA4LiBcXG4gICAgICAgICAgICBSb25hbGQgQy4gRmlzaGVyIGFuZCBSb2JlcnQgVy4gV2Fzc21lciwg4oCcVGhlIElzc3VhbmNlIG9mIFN0YXRlIGFuZFxcbkxvY2FsIERlYnQgRHVyaW5nIHRoZSBVbml0ZWQgU3RhdGVzIEdyZWF0IFJlY2Vzc2lvbizigJ0gICAgICAgICAgICA8Y2l0ZT5OYXRpb25hbCBUYXggSm91cm5hbDwvY2l0ZT4gNjcsIG5vLiAxICgyMDE0KTogMTEzLTUwLFxcbiAgICAgICAgICAgIDxhXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcImh0dHBzOi8vaWRlYXMucmVwZWMub3JnL2EvbnRqL2pvdXJubC92Njd5MjAxNGkxcDExMy0xNTAuaHRtbFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vaWRlYXMucmVwZWMub3JnL2EvbnRqL2pvdXJubC92Njd5MjAxNGkxcDExMy0xNTAuaHRtbDwvYT5cXG4gICAgICAgICAgICA7IFJvbmFsZCBDLiBGaXNoZXIgYW5kIFJvYmVydCBXLiBXYXNzbWVyLCDigJxBbiBBbmFseXNpcyBvZlxcblN0YXRlLUxvY2FsIEdvdmVybm1lbnQgQ2FwaXRhbCBFeHBlbmRpdHVyZSBEdXJpbmcgdGhlIDIwMDBzLOKAnSAgICAgICAgICAgIDxjaXRlPlB1YmxpYyBCdWRnZXRpbmcgJmFtcDsgRmluYW5jZTwvY2l0ZT4gMzUsIG5vLiAxICgyMDE1KTogMy0yOCxcXG4gICAgICAgICAgICA8YVxcbiAgICAgICAgICAgICAgICBocmVmPVxcXCJodHRwczovL29ubGluZWxpYnJhcnkud2lsZXkuY29tL2RvaS9hYnMvMTAuMTExMS9wYmFmLjEyMDYyXFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgaHR0cHM6Ly9vbmxpbmVsaWJyYXJ5LndpbGV5LmNvbS9kb2kvYWJzLzEwLjExMTEvcGJhZi4xMjA2MjwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG45XFxcIj5cXG4gICAgICAgIDxwPlxcbiA5LiBcXG4gICAgICAgICAgICBUaGUgTmF0aW9uYWwgQnVyZWF1IG9mIEVjb25vbWljIFJlc2VhcmNoLCDigJxVUyBCdXNpbmVzcyBDeWNsZVxcbiAgICAgICAgICAgIEV4cGFuc2lvbnMgYW5kIENvbnRyYWN0aW9ucyzigJ0gU2VwdC4gMjAsIDIwMTAsXFxuICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cDovL3d3dy5uYmVyLm9yZy9jeWNsZXMuaHRtbFxcXCI+XFxuICAgICAgICAgICAgICAgIGh0dHA6Ly93d3cubmJlci5vcmcvY3ljbGVzLmh0bWw8L2E+LlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuMTBcXFwiPlxcbiAgICAgICAgPHA+XFxuIDEwLiBcXG4gICAgICAgICAgICBKZW5uaWZlciBXZWluZXIsIOKAnEFzc2Vzc2luZyB0aGUgQWZmb3JkYWJpbGl0eSBvZiBTdGF0ZSBEZWJ0LOKAnSBOZXdcXG4gICAgICAgICAgICBFbmdsYW5kIFB1YmxpYyBQb2xpY3kgQ2VudGVyIGF0IHRoZSBGZWRlcmFsIFJlc2VydmUgQmFuayBvZiBCb3N0b25cXG4gICAgICAgICAgICAoMjAxMyksXFxuICAgICAgICAgICAgPGFcXG4gICAgICAgICAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cuYm9zdG9uZmVkLm9yZy9wdWJsaWNhdGlvbnMvbmV3LWVuZ2xhbmQtcHVibGljLXBvbGljeS1jZW50ZXItcmVzZWFyY2gtcmVwb3J0LzIwMTMvYXNzZXNzaW5nLXRoZS1hZmZvcmRhYmlsaXR5LW9mLXN0YXRlLWRlYnQuYXNweFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmJvc3RvbmZlZC5vcmcvcHVibGljYXRpb25zL25ldy1lbmdsYW5kLXB1YmxpYy1wb2xpY3ktY2VudGVyLXJlc2VhcmNoLXJlcG9ydC8yMDEzL2Fzc2Vzc2luZy10aGUtYWZmb3JkYWJpbGl0eS1vZi1zdGF0ZS1kZWJ0LmFzcHg8L2E+LlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuMTFcXFwiPlxcbiAgICAgICAgPHA+XFxuIDExLiBcXG4gICAgICAgICAgICBJbiBDQUZScywgc3RhdGVzIHJlcG9ydCBkZWJ0IHNlcnZpY2UgcGF5bWVudHMgZnJvbSBhIHZhcmlldHkgb2ZcXG4gICAgICAgICAgICBmdW5kcy4gVXNpbmcgdGhpcyBpbmZvcm1hdGlvbiB0byBjb25zdHJ1Y3QgYSBjb21wYXJhYmxlIG1lYXN1cmUgb2ZcXG4gICAgICAgICAgICBkZWJ0IHNlcnZpY2UgYXMgYSBzaGFyZSBvZiBnZW5lcmFsIGZ1bmQgcmV2ZW51ZSByZXF1aXJlcyBhIGRldGFpbGVkXFxuICAgICAgICAgICAgdW5kZXJzdGFuZGluZyBvZiBlYWNoIHN0YXRl4oCZcyByZXBvcnRpbmcgcHJhY3RpY2VzLlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuMTJcXFwiPlxcbiAgICAgICAgPHA+XFxuIDEyLiBcXG4gICAgICAgICAgICBKZW5uaWZlciBXZWluZXIsIOKAnEEgR3VpZGUgdG8gU3RhdGUgRGVidCBBZmZvcmRhYmlsaXR5IFN0dWRpZXM6XFxuICAgICAgICAgICAgQ29tbW9uIEVsZW1lbnRzIGFuZCBCZXN0IFByYWN0aWNlcyzigJ0gTmV3IEVuZ2xhbmQgUHVibGljIFBvbGljeVxcbiAgICAgICAgICAgIENlbnRlciBhdCB0aGUgRmVkZXJhbCBSZXNlcnZlIEJhbmsgb2YgQm9zdG9uICgyMDEzKSxcXG4gICAgICAgICAgICA8YVxcbiAgICAgICAgICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dy5ib3N0b25mZWQub3JnL3B1YmxpY2F0aW9ucy9uZXctZW5nbGFuZC1wdWJsaWMtcG9saWN5LWNlbnRlci1wb2xpY3ktYnJpZWYvMjAxMy9hLWd1aWRlLXRvLXN0YXRlLWRlYnQtYWZmb3JkYWJpbGl0eS1zdHVkaWVzLWNvbW1vbi1lbGVtZW50cy1hbmQtYmVzdC1wcmFjdGljZXMuYXNweFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmJvc3RvbmZlZC5vcmcvcHVibGljYXRpb25zL25ldy1lbmdsYW5kLXB1YmxpYy1wb2xpY3ktY2VudGVyLXBvbGljeS1icmllZi8yMDEzL2EtZ3VpZGUtdG8tc3RhdGUtZGVidC1hZmZvcmRhYmlsaXR5LXN0dWRpZXMtY29tbW9uLWVsZW1lbnRzLWFuZC1iZXN0LXByYWN0aWNlcy5hc3B4PC9hPlxcbiAgICAgICAgICAgIDsgQ2hhcmxlcyBCcmVjaGVyLCBLdXJ0IFJpY2h3ZXJnZXIsIGFuZCBNYXJjaWEgVmFuIFdhZ25lciwg4oCcQW5cXG5BcHByb2FjaCB0byBNZWFzdXJpbmcgdGhlIEFmZm9yZGFiaWxpdHkgb2YgU3RhdGUgRGVidCzigJ0gICAgICAgICAgICA8Y2l0ZT5QdWJsaWMgQnVkZ2V0aW5nICZhbXA7IEZpbmFuY2U8L2NpdGU+IDIzLCBuby4gNCAoMjAwMyk6IDY1LTg1LFxcbiAgICAgICAgICAgIDxhXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcImh0dHBzOi8vb25saW5lbGlicmFyeS53aWxleS5jb20vZG9pL2Ficy8xMC4xMTExL2ouMDI3NS0xMTAwLjIwMDMuMDIzMDQwMDQueFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vb25saW5lbGlicmFyeS53aWxleS5jb20vZG9pL2Ficy8xMC4xMTExL2ouMDI3NS0xMTAwLjIwMDMuMDIzMDQwMDQueDwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG4xM1xcXCI+XFxuICAgICAgICA8cD5cXG4gMTMuIFxcbiAgICAgICAgICAgIFcuIEJhcnRsZXkgSGlsZHJldGggYW5kIEdlcmFsZCBKLiBNaWxsZXIsIOKAnERlYnQgYW5kIHRoZSBMb2NhbFxcbiAgICAgICAgICAgIEVjb25vbXk6IFByb2JsZW1zIGluIEJlbmNobWFya2luZyBMb2NhbCBHb3Zlcm5tZW50IERlYnRcXG4gICAgICAgICAgICBBZmZvcmRhYmlsaXR5LOKAnSA8Y2l0ZT5QdWJsaWMgQnVkZ2V0aW5nICZhbXA7IEZpbmFuY2U8L2NpdGU+IDIyLCBuby4gNFxcbiAgICAgICAgICAgICgyMDAzKTogOTktMTEzLFxcbiAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vZG9pLm9yZy8xMC4xMTExLzE1NDAtNTg1MC4wMDA5MVxcXCI+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vZG9pLm9yZy8xMC4xMTExLzE1NDAtNTg1MC4wMDA5MTwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG4xNFxcXCI+XFxuICAgICAgICA8cD5cXG4gMTQuIFxcbiAgICAgICAgICAgIENvbXBvbmVudCB1bml0cyBhcmUgZW50aXRpZXMgdGhhdCBhcmUgbGVnYWxseSBzZXBhcmF0ZSBmcm9tIGEgc3RhdGVcXG4gICAgICAgICAgICBidXQgcGVyZm9ybSBzdGF0ZSBmdW5jdGlvbnMuIFRoZXkgdHlwaWNhbGx5IGluY2x1ZGUgYm9kaWVzIHN1Y2ggYXNcXG4gICAgICAgICAgICBob3VzaW5nIGF1dGhvcml0aWVzLCBlY29ub21pYyBkZXZlbG9wbWVudCBjb3Jwb3JhdGlvbnMsIGFuZFxcbiAgICAgICAgICAgIHVuaXZlcnNpdGllcy5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjE1XFxcIj5cXG4gICAgICAgIDxwPlxcbiAxNS4gXFxuICAgICAgICAgICAgV2VpbmVyLCDigJxBIEd1aWRlLuKAnVxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuMTZcXFwiPlxcbiAgICAgICAgPHA+XFxuIDE2LiBcXG4gICAgICAgICAgICBCbyBaaGFvIGFuZCBXZW4gV2FuZywg4oCcVHJhbnNwYXJlbmN5IGluIFN0YXRlIERlYnQgRGlzY2xvc3VyZSzigJ0gTmV3XFxuICAgICAgICAgICAgRW5nbGFuZCBQdWJsaWMgUG9saWN5IENlbnRlciBhdCB0aGUgRmVkZXJhbCBSZXNlcnZlIEJhbmsgb2YgQm9zdG9uXFxuICAgICAgICAgICAgKDIwMTcpLFxcbiAgICAgICAgICAgIDxhXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcImh0dHBzOi8vd3d3LmJvc3RvbmZlZC5vcmcvcHVibGljYXRpb25zL3Jlc2VhcmNoLWRlcGFydG1lbnQtd29ya2luZy1wYXBlci8yMDE3L3RyYW5zcGFyZW5jeS1pbi1zdGF0ZS1kZWJ0LWRpc2Nsb3N1cmUuYXNweFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmJvc3RvbmZlZC5vcmcvcHVibGljYXRpb25zL3Jlc2VhcmNoLWRlcGFydG1lbnQtd29ya2luZy1wYXBlci8yMDE3L3RyYW5zcGFyZW5jeS1pbi1zdGF0ZS1kZWJ0LWRpc2Nsb3N1cmUuYXNweDwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblxcbiAgICA8L2Rpdj5cXG4gICAgPC9zZWN0aW9uPlwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8Zm9vdGVyPlxcblxcdFxcdDxkaXY+XFxuXFx0XFx0XFx0PHA+PHN0cm9uZz5Eb3dubG9hZCByZXNvdXJjZXM6PC9zdHJvbmc+XFxuXFx0XFx0XFx0XFx0XFx0PGEgY2xhc3M9XFxcInBjdC1kb3dubG9hZFxcXCIgaHJlZj1cXFwiXFxcIj5SZXNvdXJjZSAxPC9hPlxcblxcdFxcdFxcdFxcdFxcdDxhIGNsYXNzPVxcXCJwY3QtZG93bmxvYWRcXFwiIGhyZWY9XFxcIlxcXCI+UmVzb3VyY2UgMjwvYT5cXG5cXHRcXHRcXHRcXHQ8L3A+PC9kaXY+XFxuPC9mb290ZXI+XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImF1dG9Db21wbGV0ZV93cmFwcGVyXCI6XCJhdXRvQ29tcGxldGVfd3JhcHBlclwiLFwiYXV0b0NvbXBsZXRlXCI6XCJhdXRvQ29tcGxldGVcIixcImF1dG9Db21wbGV0ZV9yZXN1bHRzX2xpc3RcIjpcImF1dG9Db21wbGV0ZV9yZXN1bHRzX2xpc3RcIixcImF1dG9Db21wbGV0ZV9yZXN1bHRcIjpcImF1dG9Db21wbGV0ZV9yZXN1bHRcIixcImF1dG9Db21wbGV0ZV9oaWdobGlnaHRlZFwiOlwiYXV0b0NvbXBsZXRlX2hpZ2hsaWdodGVkXCJ9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICB2YXIgaGFzaCA9IDUzODEsXG4gICAgICBpICAgID0gc3RyLmxlbmd0aDtcblxuICB3aGlsZShpKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuXG4gIC8qIEphdmFTY3JpcHQgZG9lcyBiaXR3aXNlIG9wZXJhdGlvbnMgKGxpa2UgWE9SLCBhYm92ZSkgb24gMzItYml0IHNpZ25lZFxuICAgKiBpbnRlZ2Vycy4gU2luY2Ugd2Ugd2FudCB0aGUgcmVzdWx0cyB0byBiZSBhbHdheXMgcG9zaXRpdmUsIGNvbnZlcnQgdGhlXG4gICAqIHNpZ25lZCBpbnQgdG8gYW4gdW5zaWduZWQgYnkgZG9pbmcgYW4gdW5zaWduZWQgYml0c2hpZnQuICovXG4gIHJldHVybiBoYXNoID4+PiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2g7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiUENURHJvcGRvd25cIjpcInN1Ym1vZHVsZXMtVUktanMtaW5wdXRzLS1QQ1REcm9wZG93blwiLFwiaXNPcGVuXCI6XCJzdWJtb2R1bGVzLVVJLWpzLWlucHV0cy0taXNPcGVuXCJ9OyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlciB7IC8vIHRoaXMgY291bGQgYmUgaW50ZWdyYXRlZCB3aXRoIHN0YXRlZnVsIGRlYWRcbiAgICAvKlxuICAgIFJvdXRlciBvZmZlcnMgYmFzaWMgc2hhcmVkIGZ1bmN0aW9ucyBmb3IgYWxsIHJvdXRlcnMuIE1ldGhvZHMgZm9yIHVwZGF0aW5nICBoaXN0b3J5IHN0YXRlIGFuZCB1cGRhdGluZyB0aGUgaGFzaCB1cmwuIEFycmF5IG9mIHN1YnNjcmlwdGlvbnNcbiAgICB0aGF0IGFmZmVjdCB0aGUgdXJsIGlzIHBhc3NlZCBpbi4gVGhlIFB1YlN1YiBtb2R1bGUgaXMgcGFzc2VkIGluLiBzZXRIYXNoIGFuZCBkZWNvZGVIYXNoIGZ1bmN0aW9ucyBhcmUgcGFzc2VkIGluIGJjIHRoZXkgd2lsbCBiZSBkaWZmXG4gICAgZm9yIGVhY2ggYXBwLiB2aWV3cyBhcmUgcGFzc2VkIGluIHNvIHRoYXQgdGhlIHJlc29sdXRpb25zIG9mIHRoZWlyIHByb21pc2VzIGNhbiBiZSB0cmFja2VkIGFuZCBhY3RlZCB1cG9uIChpZSByb3V0ZXIgZGVjb2RlcyBvbmx5IGFmdGVyIFxuICAgIGFsbCB2aWV3cyBhcmUgcmVhZHkpXG4gICAgKi9cbiAgICBpbml0KHJvdXRlck9wdGlvbnMpe1xuICAgICAgICBcbiAgICAgICAgaWYgKCByb3V0ZXJPcHRpb25zID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHJvdXRlck9wdGlvbnMgIT09ICdvYmplY3QnICl7XG4gICAgICAgICAgICB0aHJvdyAncm91dGVyLmluaXQgbWV0aG9kIHJlcXVpcmVzIGEgY29uZmlnIG9iamVjdCBhcyBwYXJhbWV0ZXIgMSdcbiAgICAgICAgfVxuICAgICAgICBpZiAoIHR5cGVvZiByb3V0ZXJPcHRpb25zLmVuY29kZSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2Ygcm91dGVyT3B0aW9ucy5kZWNvZGUgIT09ICdmdW5jdGlvbicgfHwgIUFycmF5LmlzQXJyYXkocm91dGVyT3B0aW9ucy52aWV3cykgfHwgdHlwZW9mIHJvdXRlck9wdGlvbnMuUFMgIT09ICdvYmplY3QnICl7XG4gICAgICAgICAgICB0aHJvdyAncm91dGVyT3B0aW9ucyBvYmplY3QgbmVlZHMgZW5jb2RlLCBkZWNvZGUsIHZpZXdzLCBhbmQgUFMgcHJvcGVydGllcy4gZW5jb2RlIGFuZCBkZWNvZGUgbXVzdCBiZSBmdW5jdGlvbnM7IHZpZXdzIGlzIGFuIGFycmF5IG9mIHZpZXdzIGZyb20gdGhlIGFwcDsgUFMgbmVlZHMgdG8gYmUgdGhlIFB1YlN1YiBzZXR0ZXIuJ1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGVPYmogPSB7fTtcbiAgICAgICAgdGhpcy5oYXNoU3RhdGUgPSByb3V0ZXJPcHRpb25zLmVuY29kZTtcbiAgICAgICAgdGhpcy5kZWNvZGVIYXNoID0gcm91dGVyT3B0aW9ucy5kZWNvZGU7XG4gICAgICAgIHRoaXMudmlld1Byb21pc2VzID0gcm91dGVyT3B0aW9ucy52aWV3cy5tYXAoZWFjaCA9PiBlYWNoLmlzUmVhZHkpOyAvLyB2aWV3LmlzUmVhZHkgaXMgYSBwcm9taXNlZCByZXNvbHZlZCB0cnVlIGFmdGVyIHRoZSB2aWV3IGlzIHJlbmRlcmVkXG4gICAgICAgIHRoaXMuUFMgPSByb3V0ZXJPcHRpb25zLlBTO1xuICAgICAgICBcbiAgICAgICAgUHJvbWlzZS5hbGwodGhpcy52aWV3UHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmRlY29kZUhhc2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuUFMuc2V0U3Vicyhyb3V0ZXJPcHRpb25zLnN1YnNjcmlwdGlvbnMubWFwKGVhY2ggPT4geyAvLyBzdWJzY3JpcHRpb25zIHRoYXQgbWF0dGVyIGZvciByb3V0ZXIgYXJlIG1hZGUgdG8gdHJpZ2dlciBoYXNoQ2hhbmdlIG1ldGhvZCB3aGVuIHB1Ymxpc2hlZFxuICAgICAgICAgICAgdmFyIGFyciA9IFtlYWNoLCAobXNnLGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc2hDaGFuZ2UuY2FsbCh0aGlzLG1zZyxkYXRhKTtcbiAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGhhc2hDaGFuZ2UobXNnLGRhdGEpe1xuICAgICAgICB0aGlzLnNldFN0YXRlT2JqKG1zZyxkYXRhKTtcbiAgICAgICAgdGhpcy5oYXNoU3RhdGUoKTtcbiAgICAgICAgdGhpcy5yZXBsYWNlU3RhdGUoKTtcbiAgICB9XG4gICAgc2V0U3RhdGVPYmoobXNnLCBkYXRhKXtcbiAgICAgICAgdGhpcy5zdGF0ZU9ialttc2ddID0gZGF0YTtcbiAgICAgICAgXG4gICAgfVxuICAgIHJlcGxhY2VTdGF0ZSgpeyAgICBcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHRoaXMuc3RhdGVPYmosJycsdGhpcy5oYXNoU3RyaW5nKVxuICAgIH1cblxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJzdGF0aWNcIjpcInNyYy1jc3MtLXN0YXRpY1wifTsiLCJleHBvcnQgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG5mdW5jdGlvbiBNYXAoKSB7fVxuXG5NYXAucHJvdG90eXBlID0gbWFwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hcCxcbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9LFxuICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9LFxuICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXAob2JqZWN0LCBmKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwO1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgLy8gSW5kZXggYXJyYXkgYnkgbnVtZXJpYyBpbmRleCBvciBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxuICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgICAgbztcblxuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChmKG8gPSBvYmplY3RbaV0sIGksIG9iamVjdCksIG8pO1xuICB9XG5cbiAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICBlbHNlIGlmIChvYmplY3QpIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwO1xuIiwiaW1wb3J0IG1hcCBmcm9tIFwiLi9tYXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrZXlzID0gW10sXG4gICAgICBzb3J0S2V5cyA9IFtdLFxuICAgICAgc29ydFZhbHVlcyxcbiAgICAgIHJvbGx1cCxcbiAgICAgIG5lc3Q7XG5cbiAgZnVuY3Rpb24gYXBwbHkoYXJyYXksIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkge1xuICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkge1xuICAgICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgYXJyYXkuc29ydChzb3J0VmFsdWVzKTtcbiAgICAgIHJldHVybiByb2xsdXAgIT0gbnVsbCA/IHJvbGx1cChhcnJheSkgOiBhcnJheTtcbiAgICB9XG5cbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBrZXkgPSBrZXlzW2RlcHRoKytdLFxuICAgICAgICBrZXlWYWx1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHZhbHVlc0J5S2V5ID0gbWFwKCksXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUmVzdWx0KCk7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlcyA9IHZhbHVlc0J5S2V5LmdldChrZXlWYWx1ZSA9IGtleSh2YWx1ZSA9IGFycmF5W2ldKSArIFwiXCIpKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWVzQnlLZXkuZWFjaChmdW5jdGlvbih2YWx1ZXMsIGtleSkge1xuICAgICAgc2V0UmVzdWx0KHJlc3VsdCwga2V5LCBhcHBseSh2YWx1ZXMsIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgIGlmICgrK2RlcHRoID4ga2V5cy5sZW5ndGgpIHJldHVybiBtYXA7XG4gICAgdmFyIGFycmF5LCBzb3J0S2V5ID0gc29ydEtleXNbZGVwdGggLSAxXTtcbiAgICBpZiAocm9sbHVwICE9IG51bGwgJiYgZGVwdGggPj0ga2V5cy5sZW5ndGgpIGFycmF5ID0gbWFwLmVudHJpZXMoKTtcbiAgICBlbHNlIGFycmF5ID0gW10sIG1hcC5lYWNoKGZ1bmN0aW9uKHYsIGspIHsgYXJyYXkucHVzaCh7a2V5OiBrLCB2YWx1ZXM6IGVudHJpZXModiwgZGVwdGgpfSk7IH0pO1xuICAgIHJldHVybiBzb3J0S2V5ICE9IG51bGwgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTsgfSkgOiBhcnJheTtcbiAgfVxuXG4gIHJldHVybiBuZXN0ID0ge1xuICAgIG9iamVjdDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVPYmplY3QsIHNldE9iamVjdCk7IH0sXG4gICAgbWFwOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTsgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gZW50cmllcyhhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApLCAwKTsgfSxcbiAgICBrZXk6IGZ1bmN0aW9uKGQpIHsga2V5cy5wdXNoKGQpOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0S2V5czogZnVuY3Rpb24ob3JkZXIpIHsgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0VmFsdWVzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0VmFsdWVzID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHJvbGx1cDogZnVuY3Rpb24oZikgeyByb2xsdXAgPSBmOyByZXR1cm4gbmVzdDsgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gc2V0T2JqZWN0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBtYXAoKTtcbn1cblxuZnVuY3Rpb24gc2V0TWFwKG1hcCwga2V5LCB2YWx1ZSkge1xuICBtYXAuc2V0KGtleSwgdmFsdWUpO1xufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIG1hcCwgcHJlZml4fSBmcm9tIFwiLi9tYXBcIjtcblxuZnVuY3Rpb24gU2V0KCkge31cblxudmFyIHByb3RvID0gbWFwLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZXQsXG4gIGhhczogcHJvdG8uaGFzLFxuICBhZGQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgKz0gXCJcIjtcbiAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgY2xlYXI6IHByb3RvLmNsZWFyLFxuICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gIHNpemU6IHByb3RvLnNpemUsXG4gIGVtcHR5OiBwcm90by5lbXB0eSxcbiAgZWFjaDogcHJvdG8uZWFjaFxufTtcblxuZnVuY3Rpb24gc2V0KG9iamVjdCwgZikge1xuICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgU2V0KSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSkgeyBzZXQuYWRkKHZhbHVlKTsgfSk7XG5cbiAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aDtcbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0O1xuIiwiaW1wb3J0IEVsZW1lbnQgZnJvbSAnQFVJL2VsZW1lbnQvJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGFyaXNvbiBleHRlbmRzIEVsZW1lbnQge1xuICAgIHByZXJlbmRlcigpe1xuICAgICAgICB2YXIgZGl2ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIHRoaXMubWF0Y2hlcyA9IFtdO1xuICAgICAgICB0aGlzLm1hdGNoZXNbMF0gPSB0aGlzLm1vZGVsLmRhdGEuZmluZChkID0+IGQuY29kZSA9PT0gdGhpcy5kYXRhLmNvbXBhcmlzb25bMF0pO1xuICAgICAgICB0aGlzLm1hdGNoZXNbMV0gPSB0aGlzLm1vZGVsLmRhdGEuZmluZChkID0+IGQuY29kZSA9PT0gdGhpcy5kYXRhLmNvbXBhcmlzb25bMV0pO1xuICAgICAgICBcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZGl2O1xuICAgICAgICB9XG4gICAgICAgIFxuXG4gICAgICAgIHJldHVybiBkaXY7XG4gICAgfVxuICAgIHVwZGF0ZShpbmRleCxkYXRhKXtcbiAgICAgICAgdGhpcy5tYXRjaGVzW2luZGV4XSA9IHRoaXMubW9kZWwuZGF0YS5maW5kKGQgPT4gZC5jb2RlID09PSBkYXRhKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgcyBmcm9tICcuLy4uL3N0eWxlcy5zY3NzJztcbmltcG9ydCBDb21wYXJpc29uIGZyb20gJy4uLyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBhcmlzb25UZXh0IGV4dGVuZHMgQ29tcGFyaXNvbiB7XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIHZhciBkaXYgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZGl2O1xuICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm1vZGVsLmRpY3QsIHRoaXMuZGF0YS5maWVsZCk7XG4gICAgICAgIGRpdi5pbm5lckhUTUwgPSB0aGlzLnJldHVyblRlbXBsYXRlKDApICsgdGhpcy5yZXR1cm5UZW1wbGF0ZSgxKTtcbiAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICB9XG4gICAgdXBkYXRlKG1zZywgZGF0YSl7IC8vIHNvbWUgaGVyZSBjb3VsZCBiZSBpbiB0aGUgc3VwZXJcbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQobXNnLnNwbGl0KCcuJylbMV0pO1xuICAgICAgICBjb25zb2xlLmxvZyhpbmRleCk7XG4gICAgICAgIHN1cGVyLnVwZGF0ZShpbmRleCxkYXRhKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcywgaW5kZXgpO1xuICAgICAgICB0aGlzLmVsLmNoaWxkcmVuW2luZGV4XS5mYWRlSW5Db250ZW50KHRoaXMucmV0dXJuVGVtcGxhdGUoaW5kZXgpKTtcbiAgICAgICAgLy90aGlzLmVsLmlubmVySFRNTCA9IHRoaXMucmV0dXJuVGVtcGxhdGUoaW5kZXgpO1xuXG4gICAgfVxuICAgIHJldHVyblRlbXBsYXRlKGkpe1xuICAgICAgICByZXR1cm4gYDxwIGNsYXNzPVwiJHtzLmNoYXJ0TGFiZWx9ICR7cy5jaGFydExhYmVsVGV4dH1cIj4ke3RoaXMubWF0Y2hlc1tpXS5zdGF0ZX06IDxzcGFuIGNsYXNzPVwiJHtzWydjb21wYXJlQ29sb3InICsgKGkgKzEpXX1cIj4ke3RoaXMubW9kZWwuZGljdFt0aGlzLmRhdGEuZmllbGRdICE9PSB1bmRlZmluZWQgPyB0aGlzLm1vZGVsLmRpY3RbdGhpcy5kYXRhLmZpZWxkXVtbdGhpcy5tYXRjaGVzW2ldW3RoaXMuZGF0YS5maWVsZF1dXSA6IHRoaXMubWF0Y2hlc1tpXVt0aGlzLmRhdGEuZmllbGRdfTwvc3Bhbj48L3A+YDtcbiAgICB9XG59XG4iLCJpbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCBFbGVtZW50IGZyb20gJ0BVSS9lbGVtZW50JztcblxuIGV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhciBleHRlbmRzIEVsZW1lbnQge1xuICAgIFxuICAgIHByZXJlbmRlcigpe1xuICAgICAgICB2YXIgZGl2ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGRpdjtcbiAgICAgICAgfVxuICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZChzLmJhciwgc1snYmFyQ29sb3InICsgdGhpcy5kYXRhLmNvbG9yXSk7XG4gICAgICAgIGRpdi5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGVYKCR7dGhpcy5saW5lYXJTY2FsZSh0aGlzLmRhdGEuZCwgdGhpcy5kYXRhLmZpZWxkKX0pYDtcblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cbiAgICBsaW5lYXJTY2FsZShtYXRjaCwgZmllbGQpe1xuICAgICAgICB2YXIgdHlwZU9iamVjdCA9IHRoaXMubW9kZWwudHlwZXMuZmluZCh0ID0+IHQuZmllbGQgPT09IGZpZWxkKSxcbiAgICAgICAgICAgIHNjYWxlID0gKCBtYXRjaFtmaWVsZF0gLSB0eXBlT2JqZWN0Lm1pbiApIC8gdHlwZU9iamVjdC5zcHJlYWQsXG4gICAgICAgICAgICBhZGp1c3RlZCA9IC4wMSArICggc2NhbGUgKiAuOTkgKTtcblxuICAgICAgICByZXR1cm4gYWRqdXN0ZWQ7XG4gICAgfVxuICAgIHVwZGF0ZSgpe1xuICAgICAgICAvLyBpbiBkZXZlbG9wbWVudCBtb2RlLCB0aGlzLmVsIGlzIGEganMgb2JqZWN0IGJ1dCBkb2VzIG5vdCByZWZlciB0byBlbGVtZW50IHJlbmRlcmVkIG9uIHRoZSBwYWdlXG4gICAgICAgIC8vdmFyIGVsID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuanMtYmFyLWNvbXBhcmUtJHt0aGlzLmRhdGEuZmllbGR9LSR7aW5kZXh9YCkgOiB0aGlzLmVsO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKTsgICAgICAgIFxuICAgICAgICB0aGlzLmVsLnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZVgoJHt0aGlzLmxpbmVhclNjYWxlKHRoaXMuZGF0YS5kLCB0aGlzLmRhdGEuZmllbGQpfSlgO1xuICAgIH1cblxufSIsImltcG9ydCBzIGZyb20gJy4vLi4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IENvbXBhcmlzb24gZnJvbSAnLi4vJztcbmltcG9ydCBCYXIgZnJvbSAnQFByb2plY3QvY29tcG9uZW50cy9iYXInO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBhcmlzb25DaGFydCBleHRlbmRzIENvbXBhcmlzb24ge1xuICAgIHByZXJlbmRlcigpe1xuICAgICAgICB2YXIgZGl2ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIHRoaXMuYmFycyA9IFtdO1xuICAgICAgICBbMCwxXS5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmFycy5wdXNoKHRoaXMucGFyZW50LnBhcmVudC5jcmVhdGVDb21wb25lbnQodGhpcy5tb2RlbCwgQmFyLCBgZGl2LmpzLWJhci1jb21wYXJlLSR7dGhpcy5kYXRhLmZpZWxkfS0ke2luZGV4fWAsIHtwYXJlbnQ6IHRoaXMsIGRhdGE6IHtkOiB0aGlzLm1hdGNoZXNbaW5kZXhdLCBmaWVsZDogdGhpcy5kYXRhLmZpZWxkLCBjb2xvcjogaW5kZXggKyAxfX0pKVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKC4uLnRoaXMuYmFycyk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGRpdjtcbiAgICAgICAgfVxuXG4gICAgICAgIFxuICAgICAgICBkaXYuaW5uZXJIVE1MID0gdGhpcy5yZXR1cm5UZW1wbGF0ZSgpO1xuICAgICAgICBcblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cbiAgICByZXR1cm5UZW1wbGF0ZSgpe1xuICAgICAgICByZXR1cm4gYCBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke3MuY2hhcnRDb250YWluZXJ9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHt0aGlzLnBhcnRpYWxUZW1wbGF0ZSgwKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke3RoaXMucGFydGlhbFRlbXBsYXRlKDEpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgIGA7XG4gICAgfVxuICAgIHBhcnRpYWxUZW1wbGF0ZShpbmRleCl7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiJHtzLmNoYXJ0TGFiZWx9ICR7c1snY2hhcnRMYWJlbCcgKyAoaW5kZXggKyAxKV19XCI+XG4gICAgICAgICAgICAgICAgICAgICR7dGhpcy5tYXRjaGVzW2luZGV4XS5zdGF0ZX1cbiAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIiR7cy5iYXJDb250YWluZXJ9ICR7c1snYmFyQ29udGFpbmVyJyArIChpbmRleCArIDEpXX1cIj5cbiAgICAgICAgICAgICAgICAgICAgJHt0aGlzLmJhcnNbaW5kZXhdLmVsLm91dGVySFRNTH0gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIiR7cy5kYXRhTGFiZWx9XCIgc3R5bGU9XCJ0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoJHsoIHRoaXMuYmFyc1tpbmRleF0ubGluZWFyU2NhbGUodGhpcy5tYXRjaGVzW2luZGV4XSwgdGhpcy5kYXRhLmZpZWxkKSAqIDEwMCkudG9GaXhlZCgxKSB9JSlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICR7dGhpcy5mb3JtYXRWYWx1ZSh0aGlzLm1hdGNoZXNbaW5kZXhdLCB0aGlzLmRhdGEuZmllbGQpfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG4gICAgbGluZWFyU2NhbGUobWF0Y2gsIGZpZWxkKXtcbiAgICAgICAgdmFyIHR5cGVPYmplY3QgPSB0aGlzLm1vZGVsLnR5cGVzLmZpbmQodCA9PiB0LmZpZWxkID09PSBmaWVsZCksXG4gICAgICAgICAgICBzY2FsZSA9ICggbWF0Y2hbZmllbGRdIC0gdHlwZU9iamVjdC5taW4gKSAvIHR5cGVPYmplY3Quc3ByZWFkO1xuXG4gICAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG4gICAgZm9ybWF0VmFsdWUobWF0Y2gsIGZpZWxkKXtcbiAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5tb2RlbC50eXBlcy5maW5kKGQgPT4gZC5maWVsZCA9PT0gZmllbGQpLnR5cGUsXG4gICAgICAgICAgICB2YWx1ZSA9IG1hdGNoW2ZpZWxkXSxcbiAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlU3RyaW5nO1xuICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICAgIHN3aXRjaChzdHlsZSl7XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlU3RyaW5nID0gdmFsdWUudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywge21pbmltdW1GcmFjdGlvbkRpZ2l0czogMX0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY3VycmVuY3knOlxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlU3RyaW5nID0gdmFsdWUudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywge3N0eWxlLGN1cnJlbmN5OidVU0QnfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwZXJjZW50JzpcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZVN0cmluZyA9IHZhbHVlLnRvTG9jYWxlU3RyaW5nKCdlbi1VUycsIHtzdHlsZSwgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAxfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlU3RyaW5nID0gJ1t1bmZvcm1hdHRlZF0nICsgdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkVmFsdWVTdHJpbmc7XG4gICAgfVxuICAgIHVwZGF0ZShtc2csIGRhdGEpe1xuICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludChtc2cuc3BsaXQoJy4nKVsxXSksXG4gICAgICAgIGRhdGFMYWJlbCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmRhdGFMYWJlbClbaW5kZXhdO1xuICAgICAgICBzdXBlci51cGRhdGUoaW5kZXgsZGF0YSk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICAgICAgLy8gdXBkYXRlIGxhYmVsXG4gICAgICAgIHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmNoYXJ0TGFiZWwpW2luZGV4XS5mYWRlSW5Db250ZW50KHRoaXMubWF0Y2hlc1tpbmRleF0uc3RhdGUpO1xuICAgICAgICBcbiAgICAgICAgLy91cGRhdGUgYmFyc1xuICAgICAgICB0aGlzLmNoaWxkcmVuW2luZGV4XS5kYXRhLmQgPSB0aGlzLm1hdGNoZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLmNoaWxkcmVuW2luZGV4XS51cGRhdGUoaW5kZXgpO1xuXG4gICAgICAgIC8vdXBkYXRlIGRhdGFMYWJlbFxuICAgICAgICBkYXRhTGFiZWwuZmFkZUluQ29udGVudCh0aGlzLmZvcm1hdFZhbHVlKHRoaXMubWF0Y2hlc1tpbmRleF0sIHRoaXMuZGF0YS5maWVsZCkpO1xuICAgICAgICBkYXRhTGFiZWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHsoIHRoaXMuY2hpbGRyZW5baW5kZXhdLmxpbmVhclNjYWxlKHRoaXMubWF0Y2hlc1tpbmRleF0sIHRoaXMuZGF0YS5maWVsZCkgKiAxMDApLnRvRml4ZWQoMSkgfSUpYDtcbiAgICB9XG59XG4iLCIvKiohXG4qIHRpcHB5LmpzIHY0LjAuNFxuKiAoYykgMjAxNy0yMDE5IGF0b21pa3NcbiogTUlUIExpY2Vuc2VcbiovXG5pbXBvcnQgUG9wcGVyIGZyb20gJ3BvcHBlci5qcyc7XG5cbnZhciBjc3MgPSBcIi50aXBweS1pT1N7Y3Vyc29yOnBvaW50ZXIhaW1wb3J0YW50fS50aXBweS1ub3RyYW5zaXRpb257dHJhbnNpdGlvbjpub25lfS50aXBweS1wb3BwZXJ7dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4xNjUsLjg0LC40NCwxKTttYXgtd2lkdGg6Y2FsYygxMDAlIC0gOHB4KTtwb2ludGVyLWV2ZW50czpub25lO291dGxpbmU6MH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcHtib3JkZXItcmFkaXVzOjQwJSA0MCUgMCAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gLnRpcHB5LXJvdW5kYXJyb3d7Ym90dG9tOi03cHg7Ym90dG9tOi02LjVweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDA7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMDttYXJnaW46MCAzcHh9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1hcnJvd3tib3JkZXItdG9wOjhweCBzb2xpZCAjMzMzO2JvcmRlci1yaWdodDo4cHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWxlZnQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvdHRvbTotN3B4O21hcmdpbjowIDNweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDA7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcHstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46MCAyNSU7dHJhbnNmb3JtLW9yaWdpbjowIDI1JX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC01NSUpO3RyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTUlKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlLC00NSUpO3RyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC01MCUsLTQ1JSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgtMTBweCkgcm90YXRlWCgwKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoLTEwcHgpIHJvdGF0ZVgoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMCkgcm90YXRlWCg2MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDApIHJvdGF0ZVgoNjBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KSBzY2FsZSgxKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoLjUpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KSBzY2FsZSguNSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3B7Ym9yZGVyLXJhZGl1czowIDAgMzAlIDMwJX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1yb3VuZGFycm93e3RvcDotN3B4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo1MCUgMTAwJTt0cmFuc2Zvcm0tb3JpZ2luOjUwJSAxMDAlO21hcmdpbjowIDNweH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1yb3VuZGFycm93IHN2Z3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYXJyb3d7Ym9yZGVyLWJvdHRvbTo4cHggc29saWQgIzMzMztib3JkZXItcmlnaHQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1sZWZ0OjhweCBzb2xpZCB0cmFuc3BhcmVudDt0b3A6LTdweDttYXJnaW46MCAzcHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAxMDAlO3RyYW5zZm9ybS1vcmlnaW46NTAlIDEwMCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjAgLTUwJTt0cmFuc2Zvcm0tb3JpZ2luOjAgLTUwJX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC00NSUpO3RyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNDUlKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlKTt0cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlKTtvcGFjaXR5OjB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3A7dHJhbnNmb3JtLW9yaWdpbjp0b3B9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMTBweCkgcm90YXRlWCgwKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMTBweCkgcm90YXRlWCgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgwKSByb3RhdGVYKC02MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDApIHJvdGF0ZVgoLTYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3A7dHJhbnNmb3JtLW9yaWdpbjp0b3B9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSgxKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSgxKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSguNSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWJhY2tkcm9we2JvcmRlci1yYWRpdXM6NTAlIDAgMCA1MCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LXJvdW5kYXJyb3d7cmlnaHQ6LTEycHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjMzLjMzMzMzMzMzJSA1MCU7dHJhbnNmb3JtLW9yaWdpbjozMy4zMzMzMzMzMyUgNTAlO21hcmdpbjozcHggMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWFycm93e2JvcmRlci1sZWZ0OjhweCBzb2xpZCAjMzMzO2JvcmRlci10b3A6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206OHB4IHNvbGlkIHRyYW5zcGFyZW50O3JpZ2h0Oi03cHg7bWFyZ2luOjNweCAwOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjowIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjAgNTAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1iYWNrZHJvcHstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDA7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTAlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWJhY2tkcm9wW2RhdGEtc3RhdGU9aGlkZGVuXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC03NSUsLTUwJSk7dHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTc1JSwtNTAlKTtvcGFjaXR5OjB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQ7dHJhbnNmb3JtLW9yaWdpbjpyaWdodH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoLTEwcHgpIHJvdGF0ZVkoMCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKC0xMHB4KSByb3RhdGVZKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgwKSByb3RhdGVZKC02MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKDApIHJvdGF0ZVkoLTYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0O3RyYW5zZm9ybS1vcmlnaW46cmlnaHR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpIHNjYWxlKDEpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KSBzY2FsZSgxKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCkgc2NhbGUoLjUpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KSBzY2FsZSguNSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1iYWNrZHJvcHtib3JkZXItcmFkaXVzOjAgNTAlIDUwJSAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktcm91bmRhcnJvd3tsZWZ0Oi0xMnB4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo2Ni42NjY2NjY2NiUgNTAlO3RyYW5zZm9ybS1vcmlnaW46NjYuNjY2NjY2NjYlIDUwJTttYXJnaW46M3B4IDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1yb3VuZGFycm93IHN2Z3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYXJyb3d7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCAjMzMzO2JvcmRlci10b3A6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206OHB4IHNvbGlkIHRyYW5zcGFyZW50O2xlZnQ6LTdweDttYXJnaW46M3B4IDA7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjEwMCUgNTAlO3RyYW5zZm9ybS1vcmlnaW46MTAwJSA1MCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1iYWNrZHJvcHstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46LTUwJSAwO3RyYW5zZm9ybS1vcmlnaW46LTUwJSAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTAlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtMjUlLC01MCUpO3RyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC0yNSUsLTUwJSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgxMHB4KSByb3RhdGVZKDApO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgxMHB4KSByb3RhdGVZKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMCkgcm90YXRlWSg2MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKDApIHJvdGF0ZVkoNjBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0O3RyYW5zZm9ybS1vcmlnaW46bGVmdH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCkgc2NhbGUoMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KSBzY2FsZSguNSl9LnRpcHB5LXRvb2x0aXB7cG9zaXRpb246cmVsYXRpdmU7Y29sb3I6I2ZmZjtib3JkZXItcmFkaXVzOi4yNXJlbTtmb250LXNpemU6Ljg3NXJlbTtwYWRkaW5nOi4zMTI1cmVtIC41NjI1cmVtO2xpbmUtaGVpZ2h0OjEuNDt0ZXh0LWFsaWduOmNlbnRlcjt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07YmFja2dyb3VuZC1jb2xvcjojMzMzfS50aXBweS10b29sdGlwW2RhdGEtc2l6ZT1zbWFsbF17cGFkZGluZzouMTg3NXJlbSAuMzc1cmVtO2ZvbnQtc2l6ZTouNzVyZW19LnRpcHB5LXRvb2x0aXBbZGF0YS1zaXplPWxhcmdlXXtwYWRkaW5nOi4zNzVyZW0gLjc1cmVtO2ZvbnQtc2l6ZToxcmVtfS50aXBweS10b29sdGlwW2RhdGEtYW5pbWF0ZWZpbGxde292ZXJmbG93OmhpZGRlbjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS50aXBweS10b29sdGlwW2RhdGEtaW50ZXJhY3RpdmVdLC50aXBweS10b29sdGlwW2RhdGEtaW50ZXJhY3RpdmVdIHBhdGh7cG9pbnRlci1ldmVudHM6YXV0b30udGlwcHktdG9vbHRpcFtkYXRhLWluZXJ0aWFdW2RhdGEtc3RhdGU9dmlzaWJsZV17dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC41NCwxLjUsLjM4LDEuMTEpfS50aXBweS10b29sdGlwW2RhdGEtaW5lcnRpYV1bZGF0YS1zdGF0ZT1oaWRkZW5de3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2V9LnRpcHB5LWFycm93LC50aXBweS1yb3VuZGFycm93e3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjA7aGVpZ2h0OjB9LnRpcHB5LXJvdW5kYXJyb3d7d2lkdGg6MThweDtoZWlnaHQ6N3B4O2ZpbGw6IzMzMztwb2ludGVyLWV2ZW50czpub25lfS50aXBweS1iYWNrZHJvcHtwb3NpdGlvbjphYnNvbHV0ZTt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07YmFja2dyb3VuZC1jb2xvcjojMzMzO2JvcmRlci1yYWRpdXM6NTAlO3dpZHRoOmNhbGMoMTEwJSArIDJyZW0pO2xlZnQ6NTAlO3RvcDo1MCU7ei1pbmRleDotMTt0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoLjQ2LC4xLC41MiwuOTgpOy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47YmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW59LnRpcHB5LWJhY2tkcm9wOmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7ZmxvYXQ6bGVmdDtwYWRkaW5nLXRvcDoxMDAlfS50aXBweS1iYWNrZHJvcCsudGlwcHktY29udGVudHt0cmFuc2l0aW9uLXByb3BlcnR5Om9wYWNpdHk7d2lsbC1jaGFuZ2U6b3BhY2l0eX0udGlwcHktYmFja2Ryb3ArLnRpcHB5LWNvbnRlbnRbZGF0YS1zdGF0ZT12aXNpYmxlXXtvcGFjaXR5OjF9LnRpcHB5LWJhY2tkcm9wKy50aXBweS1jb250ZW50W2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjB9XCI7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbnZhciB2ZXJzaW9uID0gXCI0LjAuNFwiO1xuXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgdWEgPSBpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudDtcbnZhciBpc0lFID0gL01TSUUgfFRyaWRlbnRcXC8vLnRlc3QodWEpO1xudmFyIGlzVUNCcm93c2VyID0gL1VDQnJvd3NlclxcLy8udGVzdCh1YSk7XG52YXIgaXNJT1MgPSAvLyBAdHMtaWdub3JlXG5pc0Jyb3dzZXIgJiYgL2lQaG9uZXxpUGFkfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSAmJiAhd2luZG93Lk1TU3RyZWFtO1xuXG52YXIgRGVmYXVsdHMgPSB7XG4gIGExMXk6IHRydWUsXG4gIGFsbG93SFRNTDogdHJ1ZSxcbiAgYW5pbWF0ZUZpbGw6IHRydWUsXG4gIGFuaW1hdGlvbjogJ3NoaWZ0LWF3YXknLFxuICBhcHBlbmRUbzogZnVuY3Rpb24gYXBwZW5kVG8oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH0sXG4gIGFyaWE6ICdkZXNjcmliZWRieScsXG4gIGFycm93OiBmYWxzZSxcbiAgYXJyb3dUeXBlOiAnc2hhcnAnLFxuICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXG4gIGNvbnRlbnQ6ICcnLFxuICBkZWxheTogWzAsIDIwXSxcbiAgZGlzdGFuY2U6IDEwLFxuICBkdXJhdGlvbjogWzMyNSwgMjc1XSxcbiAgZmxpcDogdHJ1ZSxcbiAgZmxpcEJlaGF2aW9yOiAnZmxpcCcsXG4gIGZsaXBPblVwZGF0ZTogZmFsc2UsXG4gIGZvbGxvd0N1cnNvcjogZmFsc2UsXG4gIGhpZGVPbkNsaWNrOiB0cnVlLFxuICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgaW5lcnRpYTogZmFsc2UsXG4gIGludGVyYWN0aXZlOiBmYWxzZSxcbiAgaW50ZXJhY3RpdmVCb3JkZXI6IDIsXG4gIGludGVyYWN0aXZlRGVib3VuY2U6IDAsXG4gIGxhenk6IHRydWUsXG4gIG1heFdpZHRoOiAzNTAsXG4gIG11bHRpcGxlOiBmYWxzZSxcbiAgb2Zmc2V0OiAwLFxuICBvbkhpZGRlbjogZnVuY3Rpb24gb25IaWRkZW4oKSB7fSxcbiAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7fSxcbiAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHt9LFxuICBvblNob3c6IGZ1bmN0aW9uIG9uU2hvdygpIHt9LFxuICBvblNob3duOiBmdW5jdGlvbiBvblNob3duKCkge30sXG4gIHBsYWNlbWVudDogJ3RvcCcsXG4gIHBvcHBlck9wdGlvbnM6IHt9LFxuICByb2xlOiAndG9vbHRpcCcsXG4gIHNob3dPbkluaXQ6IGZhbHNlLFxuICBzaXplOiAncmVndWxhcicsXG4gIHN0aWNreTogZmFsc2UsXG4gIHRhcmdldDogJycsXG4gIHRoZW1lOiAnZGFyaycsXG4gIHRvdWNoOiB0cnVlLFxuICB0b3VjaEhvbGQ6IGZhbHNlLFxuICB0cmlnZ2VyOiAnbW91c2VlbnRlciBmb2N1cycsXG4gIHVwZGF0ZUR1cmF0aW9uOiAwLFxuICB3YWl0OiBudWxsLFxuICB6SW5kZXg6IDk5OTlcbiAgLyoqXG4gICAqIElmIHRoZSBzZXQoKSBtZXRob2QgZW5jb3VudGVycyBvbmUgb2YgdGhlc2UsIHRoZSBwb3BwZXJJbnN0YW5jZSBtdXN0IGJlXG4gICAqIHJlY3JlYXRlZFxuICAgKi9cblxufTtcbnZhciBQT1BQRVJfSU5TVEFOQ0VfREVQRU5ERU5DSUVTID0gWydhcnJvdycsICdhcnJvd1R5cGUnLCAnYm91bmRhcnknLCAnZGlzdGFuY2UnLCAnZmxpcCcsICdmbGlwQmVoYXZpb3InLCAnZmxpcE9uVXBkYXRlJywgJ29mZnNldCcsICdwbGFjZW1lbnQnLCAncG9wcGVyT3B0aW9ucyddO1xuXG52YXIgU2VsZWN0b3JzID0ge1xuICBQT1BQRVI6ICcudGlwcHktcG9wcGVyJyxcbiAgVE9PTFRJUDogJy50aXBweS10b29sdGlwJyxcbiAgQ09OVEVOVDogJy50aXBweS1jb250ZW50JyxcbiAgQkFDS0RST1A6ICcudGlwcHktYmFja2Ryb3AnLFxuICBBUlJPVzogJy50aXBweS1hcnJvdycsXG4gIFJPVU5EX0FSUk9XOiAnLnRpcHB5LXJvdW5kYXJyb3cnXG59O1xuXG52YXIgZWxlbWVudFByb3RvID0gaXNCcm93c2VyID8gRWxlbWVudC5wcm90b3R5cGUgOiB7fTtcbnZhciBtYXRjaGVzID0gZWxlbWVudFByb3RvLm1hdGNoZXMgfHwgZWxlbWVudFByb3RvLm1hdGNoZXNTZWxlY3RvciB8fCBlbGVtZW50UHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnRQcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudFByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yO1xuLyoqXG4gKiBQb255ZmlsbCBmb3IgQXJyYXkuZnJvbSAtIGNvbnZlcnRzIGl0ZXJhYmxlIHZhbHVlcyB0byBhbiBhcnJheVxuICogQHBhcmFtIHtBcnJheUxpa2V9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnlbXX1cbiAqL1xuXG5mdW5jdGlvbiBhcnJheUZyb20odmFsdWUpIHtcbiAgcmV0dXJuIFtdLnNsaWNlLmNhbGwodmFsdWUpO1xufVxuLyoqXG4gKiBQb255ZmlsbCBmb3IgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gcGFyZW50U2VsZWN0b3JcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBwYXJlbnRTZWxlY3Rvcikge1xuICByZXR1cm4gKGVsZW1lbnRQcm90by5jbG9zZXN0IHx8IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgIHZhciBlbCA9IHRoaXM7XG5cbiAgICB3aGlsZSAoZWwpIHtcbiAgICAgIGlmIChtYXRjaGVzLmNhbGwoZWwsIHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG5cbiAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgICB9XG4gIH0pLmNhbGwoZWxlbWVudCwgcGFyZW50U2VsZWN0b3IpO1xufVxuLyoqXG4gKiBXb3JrcyBsaWtlIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QsIGJ1dCB1c2VzIGEgY2FsbGJhY2sgaW5zdGVhZFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuXG5mdW5jdGlvbiBjbG9zZXN0Q2FsbGJhY2soZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICBpZiAoY2FsbGJhY2soZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBcImJhcmVcIiB2aXJ0dWFsIGVsZW1lbnQgKGJlZm9yZSBtdXRhdGlvbnMgZG9uZVxuICogYnkgYHBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXMoKWApLiBKU0RPTSBlbGVtZW50cyBzaG93IHVwIGFzXG4gKiBbb2JqZWN0IE9iamVjdF0sIHdlIGNhbiBjaGVjayBpZiB0aGUgdmFsdWUgaXMgXCJlbGVtZW50LWxpa2VcIiBpZiBpdCBoYXNcbiAqIGBhZGRFdmVudExpc3RlbmVyYFxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzQmFyZVZpcnR1YWxFbGVtZW50KHZhbHVlKSB7XG4gIHJldHVybiB7fS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgIXZhbHVlLmFkZEV2ZW50TGlzdGVuZXI7XG59XG4vKipcbiAqIFNhZmUgLmhhc093blByb3BlcnR5IGNoZWNrLCBmb3IgcHJvdG90eXBlLWxlc3Mgb2JqZWN0c1xuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIGtleSkge1xuICByZXR1cm4ge30uaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgZWxlbWVudHMgYmFzZWQgb24gdGhlIHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd8RWxlbWVudHxFbGVtZW50W118Tm9kZUxpc3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtFbGVtZW50W119XG4gKi9cblxuZnVuY3Rpb24gZ2V0QXJyYXlPZkVsZW1lbnRzKHZhbHVlKSB7XG4gIGlmIChpc1Npbmd1bGFyKHZhbHVlKSkge1xuICAgIHJldHVybiBbdmFsdWVdO1xuICB9XG5cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcbiAgICByZXR1cm4gYXJyYXlGcm9tKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGFycmF5RnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHZhbHVlIGF0IGEgZ2l2ZW4gaW5kZXggZGVwZW5kaW5nIG9uIGlmIGl0J3MgYW4gYXJyYXkgb3IgbnVtYmVyXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHthbnl9IFtkZWZhdWx0VmFsdWVdXG4gKi9cblxuZnVuY3Rpb24gZ2V0VmFsdWUodmFsdWUsIGluZGV4LCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFyIHYgPSB2YWx1ZVtpbmRleF07XG4gICAgcmV0dXJuIHYgPT0gbnVsbCA/IGRlZmF1bHRWYWx1ZSA6IHY7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIERlYm91bmNlIHV0aWxpdHlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqL1xuXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgbXMpIHtcbiAgdmFyIHRpbWVvdXRJZDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBfYXJndW1lbnRzID0gYXJndW1lbnRzO1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7IC8vIEB0cy1pZ25vcmVcblxuICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KF90aGlzLCBfYXJndW1lbnRzKTtcbiAgICB9LCBtcyk7XG4gIH07XG59XG4vKipcbiAqIFByZXZlbnRzIGVycm9ycyBmcm9tIGJlaW5nIHRocm93biB3aGlsZSBhY2Nlc3NpbmcgbmVzdGVkIG1vZGlmaWVyIG9iamVjdHNcbiAqIGluIGBwb3BwZXJPcHRpb25zYFxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGdldE1vZGlmaWVyKG9iaiwga2V5KSB7XG4gIHJldHVybiBvYmogJiYgb2JqLm1vZGlmaWVycyAmJiBvYmoubW9kaWZpZXJzW2tleV07XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYW4gYXJyYXkgb3Igc3RyaW5nIGluY2x1ZGVzIGEgdmFsdWVcbiAqIEBwYXJhbSB7YW55W118U3RyaW5nfSBhXG4gKiBAcGFyYW0ge2FueX0gYlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpbmNsdWRlcyhhLCBiKSB7XG4gIHJldHVybiBhLmluZGV4T2YoYikgPiAtMTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgdmFsdWUgaXMgc2luZ3VsYXItbGlrZVxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzU2luZ3VsYXIodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIGhhc093blByb3BlcnR5KHZhbHVlLCAnaXNWaXJ0dWFsJykpIHx8IHZhbHVlIGluc3RhbmNlb2YgRWxlbWVudDtcbn1cbi8qKlxuICogRmlyZWZveCBleHRlbnNpb25zIGRvbid0IGFsbG93IHNldHRpbmcgLmlubmVySFRNTCBkaXJlY3RseSwgdGhpcyB3aWxsIHRyaWNrIGl0XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gaW5uZXJIVE1MKCkge1xuICByZXR1cm4gJ2lubmVySFRNTCc7XG59XG4vKipcbiAqIEV2YWx1YXRlcyBhIGZ1bmN0aW9uIGlmIG9uZSwgb3IgcmV0dXJucyB0aGUgdmFsdWVcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHthbnlbXX0gYXJnc1xuICogQHJldHVybiB7YW55fVxuICovXG5cbmZ1bmN0aW9uIGV2YWx1YXRlVmFsdWUodmFsdWUsIGFyZ3MpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLmFwcGx5KG51bGwsIGFyZ3MpIDogdmFsdWU7XG59XG4vKipcbiAqIFNldHMgYSBwb3BwZXJJbnN0YW5jZSBgZmxpcGAgbW9kaWZpZXIncyBlbmFibGVkIHN0YXRlXG4gKiBAcGFyYW0ge09iamVjdFtdfSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgdmFsdWUpIHtcbiAgbW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBtLm5hbWUgPT09ICdmbGlwJztcbiAgfSlbMF0uZW5hYmxlZCA9IHZhbHVlO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGVsZW1lbnQgY2FuIHJlY2VpdmUgZm9jdXNcbiAqIEFsd2F5cyByZXR1cm5zIHRydWUgZm9yIHZpcnR1YWwgb2JqZWN0c1xuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGNhblJlY2VpdmVGb2N1cyhlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgRWxlbWVudCA/IG1hdGNoZXMuY2FsbChlbGVtZW50LCAnYVtocmVmXSxhcmVhW2hyZWZdLGJ1dHRvbixkZXRhaWxzLGlucHV0LHRleHRhcmVhLHNlbGVjdCxpZnJhbWUsW3RhYmluZGV4XScpICYmICFlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSA6IHRydWU7XG59XG4vKipcbiAqIFJldHVybnMgYSBuZXcgYGRpdmAgZWxlbWVudFxuICogQHJldHVybiB7SFRNTERpdkVsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gZGl2KCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgaW5uZXJIVE1MIG9mIGFuIGVsZW1lbnQgd2hpbGUgdHJpY2tpbmcgbGludGVycyAmIG1pbmlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fFN0cmluZ30gaHRtbFxuICovXG5cbmZ1bmN0aW9uIHNldElubmVySFRNTChlbGVtZW50LCBodG1sKSB7XG4gIGVsZW1lbnRbaW5uZXJIVE1MKCldID0gaHRtbCBpbnN0YW5jZW9mIEVsZW1lbnQgPyBodG1sW2lubmVySFRNTCgpXSA6IGh0bWw7XG59XG4vKipcbiAqIFNldHMgdGhlIGNvbnRlbnQgb2YgYSB0b29sdGlwXG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBjb250ZW50RWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICovXG5cbmZ1bmN0aW9uIHNldENvbnRlbnQoY29udGVudEVsLCBwcm9wcykge1xuICBpZiAocHJvcHMuY29udGVudCBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICBzZXRJbm5lckhUTUwoY29udGVudEVsLCAnJyk7XG4gICAgY29udGVudEVsLmFwcGVuZENoaWxkKHByb3BzLmNvbnRlbnQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnRlbnRFbFtwcm9wcy5hbGxvd0hUTUwgPyAnaW5uZXJIVE1MJyA6ICd0ZXh0Q29udGVudCddID0gcHJvcHMuY29udGVudDtcbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjaGlsZCBlbGVtZW50cyBvZiBhIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBwb3BwZXJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBnZXRDaGlsZHJlbihwb3BwZXIpIHtcbiAgcmV0dXJuIHtcbiAgICB0b29sdGlwOiBwb3BwZXIucXVlcnlTZWxlY3RvcihTZWxlY3RvcnMuVE9PTFRJUCksXG4gICAgYmFja2Ryb3A6IHBvcHBlci5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5CQUNLRFJPUCksXG4gICAgY29udGVudDogcG9wcGVyLnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3JzLkNPTlRFTlQpLFxuICAgIGFycm93OiBwb3BwZXIucXVlcnlTZWxlY3RvcihTZWxlY3RvcnMuQVJST1cpIHx8IHBvcHBlci5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5ST1VORF9BUlJPVylcbiAgfTtcbn1cbi8qKlxuICogQWRkcyBgZGF0YS1pbmVydGlhYCBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqL1xuXG5mdW5jdGlvbiBhZGRJbmVydGlhKHRvb2x0aXApIHtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW5lcnRpYScsICcnKTtcbn1cbi8qKlxuICogUmVtb3ZlcyBgZGF0YS1pbmVydGlhYCBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqL1xuXG5mdW5jdGlvbiByZW1vdmVJbmVydGlhKHRvb2x0aXApIHtcbiAgdG9vbHRpcC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtaW5lcnRpYScpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycm93IGVsZW1lbnQgYW5kIHJldHVybnMgaXRcbiAqIEBwYXJhbSB7U3RyaW5nfSBhcnJvd1R5cGVcbiAqIEByZXR1cm4ge0hUTUxEaXZFbGVtZW50fVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUFycm93RWxlbWVudChhcnJvd1R5cGUpIHtcbiAgdmFyIGFycm93ID0gZGl2KCk7XG5cbiAgaWYgKGFycm93VHlwZSA9PT0gJ3JvdW5kJykge1xuICAgIGFycm93LmNsYXNzTmFtZSA9ICd0aXBweS1yb3VuZGFycm93JztcbiAgICBzZXRJbm5lckhUTUwoYXJyb3csICc8c3ZnIHZpZXdCb3g9XCIwIDAgMTggN1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTAgN3MyLjAyMS0uMDE1IDUuMjUzLTQuMjE4QzYuNTg0IDEuMDUxIDcuNzk3LjAwNyA5IDBjMS4yMDMtLjAwNyAyLjQxNiAxLjAzNSAzLjc2MSAyLjc4MkMxNi4wMTIgNy4wMDUgMTggNyAxOCA3SDB6XCIvPjwvc3ZnPicpO1xuICB9IGVsc2Uge1xuICAgIGFycm93LmNsYXNzTmFtZSA9ICd0aXBweS1hcnJvdyc7XG4gIH1cblxuICByZXR1cm4gYXJyb3c7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBiYWNrZHJvcCBlbGVtZW50IGFuZCByZXR1cm5zIGl0XG4gKiBAcmV0dXJuIHtIVE1MRGl2RWxlbWVudH1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCYWNrZHJvcEVsZW1lbnQoKSB7XG4gIHZhciBiYWNrZHJvcCA9IGRpdigpO1xuICBiYWNrZHJvcC5jbGFzc05hbWUgPSAndGlwcHktYmFja2Ryb3AnO1xuICBiYWNrZHJvcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG4gIHJldHVybiBiYWNrZHJvcDtcbn1cbi8qKlxuICogQWRkcyBpbnRlcmFjdGl2ZS1yZWxhdGVkIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gdG9vbHRpcFxuICovXG5cbmZ1bmN0aW9uIGFkZEludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCkge1xuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1pbnRlcmFjdGl2ZScsICcnKTtcbn1cbi8qKlxuICogUmVtb3ZlcyBpbnRlcmFjdGl2ZS1yZWxhdGVkIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gdG9vbHRpcFxuICovXG5cbmZ1bmN0aW9uIHJlbW92ZUludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCkge1xuICBwb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICB0b29sdGlwLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbnRlcmFjdGl2ZScpO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNpdGlvbiBkdXJhdGlvbiB0byBhIGxpc3Qgb2YgZWxlbWVudHNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnRbXX0gZWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihlbHMsIHZhbHVlKSB7XG4gIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCJcIi5jb25jYXQodmFsdWUsIFwibXNcIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogQWRkL3JlbW92ZSB0cmFuc2l0aW9uZW5kIGxpc3RlbmVyIGZyb20gdG9vbHRpcFxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gdG9vbHRpcFxuICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXJcbiAqL1xuXG5mdW5jdGlvbiB0b2dnbGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIodG9vbHRpcCwgYWN0aW9uLCBsaXN0ZW5lcikge1xuICAvLyBVQyBCcm93c2VyIGhhc24ndCBhZG9wdGVkIHRoZSBgdHJhbnNpdGlvbmVuZGAgZXZlbnQgZGVzcGl0ZSBzdXBwb3J0aW5nXG4gIC8vIHVucHJlZml4ZWQgdHJhbnNpdGlvbnMuLi5cbiAgdmFyIGV2ZW50TmFtZSA9IGlzVUNCcm93c2VyICYmIGRvY3VtZW50LmJvZHkuc3R5bGUud2Via2l0VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkID8gJ3dlYmtpdFRyYW5zaXRpb25FbmQnIDogJ3RyYW5zaXRpb25lbmQnO1xuICB0b29sdGlwW2FjdGlvbiArICdFdmVudExpc3RlbmVyJ10oZXZlbnROYW1lLCBsaXN0ZW5lcik7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHBvcHBlcidzIHBsYWNlbWVudCwgaWdub3Jpbmcgc2hpZnRpbmcgKHRvcC1zdGFydCwgZXRjKVxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gcG9wcGVyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gZ2V0UG9wcGVyUGxhY2VtZW50KHBvcHBlcikge1xuICB2YXIgZnVsbFBsYWNlbWVudCA9IHBvcHBlci5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gIHJldHVybiBmdWxsUGxhY2VtZW50ID8gZnVsbFBsYWNlbWVudC5zcGxpdCgnLScpWzBdIDogJyc7XG59XG4vKipcbiAqIFNldHMgdGhlIHZpc2liaWxpdHkgc3RhdGUgdG8gZWxlbWVudHMgc28gdGhleSBjYW4gYmVnaW4gdG8gdHJhbnNpdGlvblxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudFtdfSBlbHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZVxuICovXG5cbmZ1bmN0aW9uIHNldFZpc2liaWxpdHlTdGF0ZShlbHMsIHN0YXRlKSB7XG4gIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgc3RhdGUpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFRyaWdnZXJzIHJlZmxvd1xuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gcG9wcGVyXG4gKi9cblxuZnVuY3Rpb24gcmVmbG93KHBvcHBlcikge1xuICB2b2lkIHBvcHBlci5vZmZzZXRIZWlnaHQ7XG59XG4vKipcbiAqIEFkZHMvcmVtb3ZlcyB0aGVtZSBmcm9tIHRvb2x0aXAncyBjbGFzc0xpc3RcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqIEBwYXJhbSB7U3RyaW5nfSBhY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSB0aGVtZVxuICovXG5cbmZ1bmN0aW9uIHRvZ2dsZVRoZW1lKHRvb2x0aXAsIGFjdGlvbiwgdGhlbWUpIHtcbiAgdGhlbWUuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uICh0aGVtZU5hbWUpIHtcbiAgICB0b29sdGlwLmNsYXNzTGlzdFthY3Rpb25dKHRoZW1lTmFtZSArICctdGhlbWUnKTtcbiAgfSk7XG59XG4vKipcbiAqIENvbnN0cnVjdHMgdGhlIHBvcHBlciBlbGVtZW50IGFuZCByZXR1cm5zIGl0XG4gKiBAcGFyYW0ge051bWJlcn0gaWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7SFRNTERpdkVsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUG9wcGVyRWxlbWVudChpZCwgcHJvcHMpIHtcbiAgdmFyIHBvcHBlciA9IGRpdigpO1xuICBwb3BwZXIuY2xhc3NOYW1lID0gJ3RpcHB5LXBvcHBlcic7XG4gIHBvcHBlci5pZCA9IFwidGlwcHktXCIuY29uY2F0KGlkKTtcbiAgcG9wcGVyLnN0eWxlLnpJbmRleCA9IHByb3BzLnpJbmRleDtcblxuICBpZiAocHJvcHMucm9sZSkge1xuICAgIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCBwcm9wcy5yb2xlKTtcbiAgfVxuXG4gIHZhciB0b29sdGlwID0gZGl2KCk7XG4gIHRvb2x0aXAuY2xhc3NOYW1lID0gJ3RpcHB5LXRvb2x0aXAnO1xuICB0b29sdGlwLnN0eWxlLm1heFdpZHRoID0gcHJvcHMubWF4V2lkdGggKyAodHlwZW9mIHByb3BzLm1heFdpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJyk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBwcm9wcy5zaXplKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0aW9uJywgcHJvcHMuYW5pbWF0aW9uKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG4gIHRvZ2dsZVRoZW1lKHRvb2x0aXAsICdhZGQnLCBwcm9wcy50aGVtZSk7XG4gIHZhciBjb250ZW50ID0gZGl2KCk7XG4gIGNvbnRlbnQuY2xhc3NOYW1lID0gJ3RpcHB5LWNvbnRlbnQnO1xuICBjb250ZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0ZScsICdoaWRkZW4nKTtcblxuICBpZiAocHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICBhZGRJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApO1xuICB9XG5cbiAgaWYgKHByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5hcHBlbmRDaGlsZChjcmVhdGVBcnJvd0VsZW1lbnQocHJvcHMuYXJyb3dUeXBlKSk7XG4gIH1cblxuICBpZiAocHJvcHMuYW5pbWF0ZUZpbGwpIHtcbiAgICB0b29sdGlwLmFwcGVuZENoaWxkKGNyZWF0ZUJhY2tkcm9wRWxlbWVudCgpKTtcbiAgICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRlZmlsbCcsICcnKTtcbiAgfVxuXG4gIGlmIChwcm9wcy5pbmVydGlhKSB7XG4gICAgYWRkSW5lcnRpYSh0b29sdGlwKTtcbiAgfVxuXG4gIHNldENvbnRlbnQoY29udGVudCwgcHJvcHMpO1xuICB0b29sdGlwLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICBwb3BwZXIuYXBwZW5kQ2hpbGQodG9vbHRpcCk7XG4gIHJldHVybiBwb3BwZXI7XG59XG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvcHBlciBlbGVtZW50IGJhc2VkIG9uIHRoZSBuZXcgcHJvcHNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IHByZXZQcm9wc1xuICogQHBhcmFtIHtPYmplY3R9IG5leHRQcm9wc1xuICovXG5cbmZ1bmN0aW9uIHVwZGF0ZVBvcHBlckVsZW1lbnQocG9wcGVyLCBwcmV2UHJvcHMsIG5leHRQcm9wcykge1xuICB2YXIgX2dldENoaWxkcmVuID0gZ2V0Q2hpbGRyZW4ocG9wcGVyKSxcbiAgICAgIHRvb2x0aXAgPSBfZ2V0Q2hpbGRyZW4udG9vbHRpcCxcbiAgICAgIGNvbnRlbnQgPSBfZ2V0Q2hpbGRyZW4uY29udGVudCxcbiAgICAgIGJhY2tkcm9wID0gX2dldENoaWxkcmVuLmJhY2tkcm9wLFxuICAgICAgYXJyb3cgPSBfZ2V0Q2hpbGRyZW4uYXJyb3c7XG5cbiAgcG9wcGVyLnN0eWxlLnpJbmRleCA9IG5leHRQcm9wcy56SW5kZXg7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBuZXh0UHJvcHMuc2l6ZSk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGlvbicsIG5leHRQcm9wcy5hbmltYXRpb24pO1xuICB0b29sdGlwLnN0eWxlLm1heFdpZHRoID0gbmV4dFByb3BzLm1heFdpZHRoICsgKHR5cGVvZiBuZXh0UHJvcHMubWF4V2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnKTtcblxuICBpZiAobmV4dFByb3BzLnJvbGUpIHtcbiAgICBwb3BwZXIuc2V0QXR0cmlidXRlKCdyb2xlJywgbmV4dFByb3BzLnJvbGUpO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKTtcbiAgfVxuXG4gIGlmIChwcmV2UHJvcHMuY29udGVudCAhPT0gbmV4dFByb3BzLmNvbnRlbnQpIHtcbiAgICBzZXRDb250ZW50KGNvbnRlbnQsIG5leHRQcm9wcyk7XG4gIH0gLy8gYW5pbWF0ZUZpbGxcblxuXG4gIGlmICghcHJldlByb3BzLmFuaW1hdGVGaWxsICYmIG5leHRQcm9wcy5hbmltYXRlRmlsbCkge1xuICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQoY3JlYXRlQmFja2Ryb3BFbGVtZW50KCkpO1xuICAgIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGVmaWxsJywgJycpO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5hbmltYXRlRmlsbCAmJiAhbmV4dFByb3BzLmFuaW1hdGVGaWxsKSB7XG4gICAgdG9vbHRpcC5yZW1vdmVDaGlsZChiYWNrZHJvcCk7XG4gICAgdG9vbHRpcC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0ZWZpbGwnKTtcbiAgfSAvLyBhcnJvd1xuXG5cbiAgaWYgKCFwcmV2UHJvcHMuYXJyb3cgJiYgbmV4dFByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5hcHBlbmRDaGlsZChjcmVhdGVBcnJvd0VsZW1lbnQobmV4dFByb3BzLmFycm93VHlwZSkpO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5hcnJvdyAmJiAhbmV4dFByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5yZW1vdmVDaGlsZChhcnJvdyk7XG4gIH0gLy8gYXJyb3dUeXBlXG5cblxuICBpZiAocHJldlByb3BzLmFycm93ICYmIG5leHRQcm9wcy5hcnJvdyAmJiBwcmV2UHJvcHMuYXJyb3dUeXBlICE9PSBuZXh0UHJvcHMuYXJyb3dUeXBlKSB7XG4gICAgdG9vbHRpcC5yZXBsYWNlQ2hpbGQoY3JlYXRlQXJyb3dFbGVtZW50KG5leHRQcm9wcy5hcnJvd1R5cGUpLCBhcnJvdyk7XG4gIH0gLy8gaW50ZXJhY3RpdmVcblxuXG4gIGlmICghcHJldlByb3BzLmludGVyYWN0aXZlICYmIG5leHRQcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgIGFkZEludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCk7XG4gIH0gZWxzZSBpZiAocHJldlByb3BzLmludGVyYWN0aXZlICYmICFuZXh0UHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICByZW1vdmVJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApO1xuICB9IC8vIGluZXJ0aWFcblxuXG4gIGlmICghcHJldlByb3BzLmluZXJ0aWEgJiYgbmV4dFByb3BzLmluZXJ0aWEpIHtcbiAgICBhZGRJbmVydGlhKHRvb2x0aXApO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5pbmVydGlhICYmICFuZXh0UHJvcHMuaW5lcnRpYSkge1xuICAgIHJlbW92ZUluZXJ0aWEodG9vbHRpcCk7XG4gIH0gLy8gdGhlbWVcblxuXG4gIGlmIChwcmV2UHJvcHMudGhlbWUgIT09IG5leHRQcm9wcy50aGVtZSkge1xuICAgIHRvZ2dsZVRoZW1lKHRvb2x0aXAsICdyZW1vdmUnLCBwcmV2UHJvcHMudGhlbWUpO1xuICAgIHRvZ2dsZVRoZW1lKHRvb2x0aXAsICdhZGQnLCBuZXh0UHJvcHMudGhlbWUpO1xuICB9XG59XG4vKipcbiAqIFJ1bnMgdGhlIGNhbGxiYWNrIGFmdGVyIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBoYXMgYmVlbiB1cGRhdGVkXG4gKiB1cGRhdGUoKSBpcyBkZWJvdW5jZWQgd2l0aCBQcm9taXNlLnJlc29sdmUoKSBvciBzZXRUaW1lb3V0KClcbiAqIHNjaGVkdWxlVXBkYXRlKCkgaXMgdXBkYXRlKCkgd3JhcHBlZCBpbiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKVxuICogQHBhcmFtIHtPYmplY3R9IHBvcHBlckluc3RhbmNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5cbmZ1bmN0aW9uIGFmdGVyUG9wcGVyUG9zaXRpb25VcGRhdGVzKHBvcHBlckluc3RhbmNlLCBjYWxsYmFjaykge1xuICB2YXIgcG9wcGVyID0gcG9wcGVySW5zdGFuY2UucG9wcGVyLFxuICAgICAgb3B0aW9ucyA9IHBvcHBlckluc3RhbmNlLm9wdGlvbnM7XG4gIHZhciBvbkNyZWF0ZSA9IG9wdGlvbnMub25DcmVhdGUsXG4gICAgICBvblVwZGF0ZSA9IG9wdGlvbnMub25VcGRhdGU7XG5cbiAgb3B0aW9ucy5vbkNyZWF0ZSA9IG9wdGlvbnMub25VcGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJlZmxvdyhwb3BwZXIpO1xuICAgIGNhbGxiYWNrKCk7XG4gICAgb25VcGRhdGUoZGF0YSk7XG4gICAgb3B0aW9ucy5vbkNyZWF0ZSA9IG9uQ3JlYXRlO1xuICAgIG9wdGlvbnMub25VcGRhdGUgPSBvblVwZGF0ZTtcbiAgfTtcbn1cbi8qKlxuICogSGlkZXMgYWxsIHZpc2libGUgcG9wcGVycyBvbiB0aGUgZG9jdW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cblxuZnVuY3Rpb24gaGlkZUFsbCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgY2hlY2tIaWRlT25DbGljayA9IF9yZWYuY2hlY2tIaWRlT25DbGljayxcbiAgICAgIGV4Y2x1ZGUgPSBfcmVmLmV4Y2x1ZGUsXG4gICAgICBkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb247XG5cbiAgYXJyYXlGcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3JzLlBPUFBFUikpLmZvckVhY2goZnVuY3Rpb24gKHBvcHBlcikge1xuICAgIHZhciBpbnN0YW5jZSA9IHBvcHBlci5fdGlwcHk7XG5cbiAgICBpZiAoaW5zdGFuY2UgJiYgKGNoZWNrSGlkZU9uQ2xpY2sgPyBpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayA9PT0gdHJ1ZSA6IHRydWUpICYmICghZXhjbHVkZSB8fCBwb3BwZXIgIT09IGV4Y2x1ZGUucG9wcGVyKSkge1xuICAgICAgaW5zdGFuY2UuaGlkZShkdXJhdGlvbik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgbW91c2UgY3Vyc29yIGlzIG91dHNpZGUgb2YgdGhlIHBvcHBlcidzIGludGVyYWN0aXZlIGJvcmRlclxuICogcmVnaW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gcG9wcGVyUGxhY2VtZW50XG4gKiBAcGFyYW0ge0NsaWVudFJlY3R9IHBvcHBlclJlY3RcbiAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc0N1cnNvck91dHNpZGVJbnRlcmFjdGl2ZUJvcmRlcihwb3BwZXJQbGFjZW1lbnQsIHBvcHBlclJlY3QsIGV2ZW50LCBwcm9wcykge1xuICBpZiAoIXBvcHBlclBsYWNlbWVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHggPSBldmVudC5jbGllbnRYLFxuICAgICAgeSA9IGV2ZW50LmNsaWVudFk7XG4gIHZhciBpbnRlcmFjdGl2ZUJvcmRlciA9IHByb3BzLmludGVyYWN0aXZlQm9yZGVyLFxuICAgICAgZGlzdGFuY2UgPSBwcm9wcy5kaXN0YW5jZTtcbiAgdmFyIGV4Y2VlZHNUb3AgPSBwb3BwZXJSZWN0LnRvcCAtIHkgPiAocG9wcGVyUGxhY2VtZW50ID09PSAndG9wJyA/IGludGVyYWN0aXZlQm9yZGVyICsgZGlzdGFuY2UgOiBpbnRlcmFjdGl2ZUJvcmRlcik7XG4gIHZhciBleGNlZWRzQm90dG9tID0geSAtIHBvcHBlclJlY3QuYm90dG9tID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ2JvdHRvbScgPyBpbnRlcmFjdGl2ZUJvcmRlciArIGRpc3RhbmNlIDogaW50ZXJhY3RpdmVCb3JkZXIpO1xuICB2YXIgZXhjZWVkc0xlZnQgPSBwb3BwZXJSZWN0LmxlZnQgLSB4ID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ2xlZnQnID8gaW50ZXJhY3RpdmVCb3JkZXIgKyBkaXN0YW5jZSA6IGludGVyYWN0aXZlQm9yZGVyKTtcbiAgdmFyIGV4Y2VlZHNSaWdodCA9IHggLSBwb3BwZXJSZWN0LnJpZ2h0ID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IGludGVyYWN0aXZlQm9yZGVyICsgZGlzdGFuY2UgOiBpbnRlcmFjdGl2ZUJvcmRlcik7XG4gIHJldHVybiBleGNlZWRzVG9wIHx8IGV4Y2VlZHNCb3R0b20gfHwgZXhjZWVkc0xlZnQgfHwgZXhjZWVkc1JpZ2h0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSBvZmZzZXQsIHRha2luZyBpbnRvIGFjY291bnQgdGhlIGRlZmF1bHQgb2Zmc2V0IGR1ZSB0b1xuICogdGhlIHRyYW5zZm9ybTogdHJhbnNsYXRlKCkgcnVsZSAoMTBweCkgaW4gQ1NTXG4gKiBAcGFyYW0ge051bWJlcn0gZGlzdGFuY2VcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBnZXRPZmZzZXREaXN0YW5jZUluUHgoZGlzdGFuY2UpIHtcbiAgcmV0dXJuIC0oZGlzdGFuY2UgLSAxMCkgKyAncHgnO1xufVxuXG52YXIgUEFTU0lWRSA9IHtcbiAgcGFzc2l2ZTogdHJ1ZVxufTtcbnZhciBQQURESU5HID0gNDtcblxudmFyIGlzVXNpbmdUb3VjaCA9IGZhbHNlO1xuZnVuY3Rpb24gb25Eb2N1bWVudFRvdWNoKCkge1xuICBpZiAoaXNVc2luZ1RvdWNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaXNVc2luZ1RvdWNoID0gdHJ1ZTtcblxuICBpZiAoaXNJT1MpIHtcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3RpcHB5LWlPUycpO1xuICB9XG5cbiAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpO1xuICB9XG59XG52YXIgbGFzdE1vdXNlTW92ZVRpbWUgPSAwO1xuZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlTW92ZSgpIHtcbiAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpOyAvLyBDaHJvbWUgNjArIGlzIDEgbW91c2Vtb3ZlIHBlciBhbmltYXRpb24gZnJhbWUsIHVzZSAyMG1zIHRpbWUgZGlmZmVyZW5jZVxuXG4gIGlmIChub3cgLSBsYXN0TW91c2VNb3ZlVGltZSA8IDIwKSB7XG4gICAgaXNVc2luZ1RvdWNoID0gZmFsc2U7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Eb2N1bWVudE1vdXNlTW92ZSk7XG5cbiAgICBpZiAoIWlzSU9TKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ3RpcHB5LWlPUycpO1xuICAgIH1cbiAgfVxuXG4gIGxhc3RNb3VzZU1vdmVUaW1lID0gbm93O1xufVxuZnVuY3Rpb24gb25Eb2N1bWVudENsaWNrKF9yZWYpIHtcbiAgdmFyIHRhcmdldCA9IF9yZWYudGFyZ2V0O1xuXG4gIC8vIFNpbXVsYXRlZCBldmVudHMgZGlzcGF0Y2hlZCBvbiB0aGUgZG9jdW1lbnRcbiAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkpIHtcbiAgICByZXR1cm4gaGlkZUFsbCgpO1xuICB9IC8vIENsaWNrZWQgb24gYW4gaW50ZXJhY3RpdmUgcG9wcGVyXG5cblxuICB2YXIgcG9wcGVyID0gY2xvc2VzdCh0YXJnZXQsIFNlbGVjdG9ycy5QT1BQRVIpOyAvLyBAdHMtaWdub3JlXG5cbiAgaWYgKHBvcHBlciAmJiBwb3BwZXIuX3RpcHB5ICYmIHBvcHBlci5fdGlwcHkucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ2xpY2tlZCBvbiBhIHJlZmVyZW5jZVxuXG5cbiAgdmFyIHJlZmVyZW5jZSA9IGNsb3Nlc3RDYWxsYmFjayh0YXJnZXQsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuX3RpcHB5ICYmIGVsZW1lbnQuX3RpcHB5LnJlZmVyZW5jZSA9PT0gZWxlbWVudDtcbiAgfSk7XG5cbiAgaWYgKHJlZmVyZW5jZSkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgaW5zdGFuY2UgPSByZWZlcmVuY2UuX3RpcHB5O1xuICAgIHZhciBpc0NsaWNrVHJpZ2dlciA9IGluY2x1ZGVzKGluc3RhbmNlLnByb3BzLnRyaWdnZXIsICdjbGljaycpO1xuXG4gICAgaWYgKGlzVXNpbmdUb3VjaCB8fCBpc0NsaWNrVHJpZ2dlcikge1xuICAgICAgcmV0dXJuIGhpZGVBbGwoe1xuICAgICAgICBleGNsdWRlOiBpbnN0YW5jZSxcbiAgICAgICAgY2hlY2tIaWRlT25DbGljazogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmhpZGVPbkNsaWNrICE9PSB0cnVlIHx8IGlzQ2xpY2tUcmlnZ2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5zdGFuY2UuY2xlYXJEZWxheVRpbWVvdXRzKCk7XG4gIH1cblxuICBoaWRlQWxsKHtcbiAgICBjaGVja0hpZGVPbkNsaWNrOiB0cnVlXG4gIH0pO1xufVxuZnVuY3Rpb24gb25XaW5kb3dCbHVyKCkge1xuICB2YXIgX2RvY3VtZW50ID0gZG9jdW1lbnQsXG4gICAgICBhY3RpdmVFbGVtZW50ID0gX2RvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7IC8vIEB0cy1pZ25vcmVcblxuICBpZiAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50LmJsdXIgJiYgYWN0aXZlRWxlbWVudC5fdGlwcHkpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cbn1cbi8qKlxuICogQWRkcyB0aGUgbmVlZGVkIGdsb2JhbCBldmVudCBsaXN0ZW5lcnNcbiAqL1xuXG5mdW5jdGlvbiBiaW5kR2xvYmFsRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25Eb2N1bWVudENsaWNrLCB0cnVlKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uRG9jdW1lbnRUb3VjaCwgUEFTU0lWRSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgb25XaW5kb3dCbHVyKTtcbn1cblxudmFyIGtleXMgPSBPYmplY3Qua2V5cyhEZWZhdWx0cyk7XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIG9wdGlvbmFsIHByb3BzIGZyb20gZGF0YS10aXBweS0qIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gZ2V0RGF0YUF0dHJpYnV0ZU9wdGlvbnMocmVmZXJlbmNlKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICB2YXIgdmFsdWVBc1N0cmluZyA9IChyZWZlcmVuY2UuZ2V0QXR0cmlidXRlKFwiZGF0YS10aXBweS1cIi5jb25jYXQoa2V5KSkgfHwgJycpLnRyaW0oKTtcblxuICAgIGlmICghdmFsdWVBc1N0cmluZykge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGFjY1trZXldID0gdmFsdWVBc1N0cmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYWNjW2tleV0gPSBKU09OLnBhcnNlKHZhbHVlQXNTdHJpbmcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBhY2Nba2V5XSA9IHZhbHVlQXNTdHJpbmc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuLyoqXG4gKiBQb2x5ZmlsbHMgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIChwbGFpbiBvYmplY3QpIHdpdGggRWxlbWVudC5wcm90b3R5cGUgcHJvcHNcbiAqIE11dGF0aW5nIGJlY2F1c2UgRE9NIGVsZW1lbnRzIGFyZSBtdXRhdGVkLCBhZGRzIGBfdGlwcHlgIHByb3BlcnR5XG4gKiBAcGFyYW0ge09iamVjdH0gdmlydHVhbFJlZmVyZW5jZVxuICovXG5cbmZ1bmN0aW9uIHBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXModmlydHVhbFJlZmVyZW5jZSkge1xuICB2YXIgcG9seWZpbGxzID0ge1xuICAgIGlzVmlydHVhbDogdHJ1ZSxcbiAgICBhdHRyaWJ1dGVzOiB2aXJ0dWFsUmVmZXJlbmNlLmF0dHJpYnV0ZXMgfHwge30sXG4gICAgc2V0QXR0cmlidXRlOiBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSkge1xuICAgICAgdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcbiAgICB9LFxuICAgIGdldEF0dHJpYnV0ZTogZnVuY3Rpb24gZ2V0QXR0cmlidXRlKGtleSkge1xuICAgICAgcmV0dXJuIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlc1trZXldO1xuICAgIH0sXG4gICAgcmVtb3ZlQXR0cmlidXRlOiBmdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUoa2V5KSB7XG4gICAgICBkZWxldGUgdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzW2tleV07XG4gICAgfSxcbiAgICBoYXNBdHRyaWJ1dGU6IGZ1bmN0aW9uIGhhc0F0dHJpYnV0ZShrZXkpIHtcbiAgICAgIHJldHVybiBrZXkgaW4gdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICBjbGFzc0xpc3Q6IHtcbiAgICAgIGNsYXNzTmFtZXM6IHt9LFxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQoa2V5KSB7XG4gICAgICAgIHZpcnR1YWxSZWZlcmVuY2UuY2xhc3NMaXN0LmNsYXNzTmFtZXNba2V5XSA9IHRydWU7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoa2V5KSB7XG4gICAgICAgIGRlbGV0ZSB2aXJ0dWFsUmVmZXJlbmNlLmNsYXNzTGlzdC5jbGFzc05hbWVzW2tleV07XG4gICAgICB9LFxuICAgICAgY29udGFpbnM6IGZ1bmN0aW9uIGNvbnRhaW5zKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5IGluIHZpcnR1YWxSZWZlcmVuY2UuY2xhc3NMaXN0LmNsYXNzTmFtZXM7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwb2x5ZmlsbHMpIHtcbiAgICB2aXJ0dWFsUmVmZXJlbmNlW2tleV0gPSBwb2x5ZmlsbHNba2V5XTtcbiAgfVxufVxuXG4vKipcbiAqIEV2YWx1YXRlcyB0aGUgcHJvcHMgb2JqZWN0IGJ5IG1lcmdpbmcgZGF0YSBhdHRyaWJ1dGVzIGFuZFxuICogZGlzYWJsaW5nIGNvbmZsaWN0aW5nIG9wdGlvbnMgd2hlcmUgbmVjZXNzYXJ5XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gZXZhbHVhdGVQcm9wcyhyZWZlcmVuY2UsIHByb3BzKSB7XG4gIHZhciBvdXQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb250ZW50OiBldmFsdWF0ZVZhbHVlKHByb3BzLmNvbnRlbnQsIFtyZWZlcmVuY2VdKVxuICB9LCBwcm9wcy5pZ25vcmVBdHRyaWJ1dGVzID8ge30gOiBnZXREYXRhQXR0cmlidXRlT3B0aW9ucyhyZWZlcmVuY2UpKTtcblxuICBpZiAob3V0LmFycm93IHx8IGlzVUNCcm93c2VyKSB7XG4gICAgb3V0LmFuaW1hdGVGaWxsID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBWYWxpZGF0ZXMgYW4gb2JqZWN0IG9mIG9wdGlvbnMgd2l0aCB0aGUgdmFsaWQgZGVmYXVsdCBwcm9wcyBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdHNcbiAqL1xuXG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGRlZmF1bHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkoZGVmYXVsdHMsIG9wdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlt0aXBweV06IGBcIi5jb25jYXQob3B0aW9uLCBcImAgaXMgbm90IGEgdmFsaWQgb3B0aW9uXCIpKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgaWRDb3VudGVyID0gMTtcbi8qKlxuICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIFRpcHB5IG9iamVjdC4gV2UncmUgdXNpbmcgYSBjbG9zdXJlIHBhdHRlcm4gaW5zdGVhZCBvZlxuICogYSBjbGFzcyBzbyB0aGF0IHRoZSBleHBvc2VkIG9iamVjdCBBUEkgaXMgY2xlYW4gd2l0aG91dCBwcml2YXRlIG1lbWJlcnNcbiAqIHByZWZpeGVkIHdpdGggYF9gLlxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2xsZWN0aW9uUHJvcHNcbiAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVUaXBweShyZWZlcmVuY2UsIGNvbGxlY3Rpb25Qcm9wcykge1xuICB2YXIgcHJvcHMgPSBldmFsdWF0ZVByb3BzKHJlZmVyZW5jZSwgY29sbGVjdGlvblByb3BzKTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBzaG91bGRuJ3QgaGF2ZSBtdWx0aXBsZSB0aXBweXMsIHJldHVybiBudWxsIGVhcmx5XG4gIC8vIEB0cy1pZ25vcmVcblxuICBpZiAoIXByb3BzLm11bHRpcGxlICYmIHJlZmVyZW5jZS5fdGlwcHkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PSDwn5SSIFByaXZhdGUgbWVtYmVycyDwn5SSID09PT09PT09PT09PT09PT09PT09PT09ICovXG4gIC8vIFRoZSBsYXN0IHRyaWdnZXIgZXZlbnQgb2JqZWN0IHRoYXQgY2F1c2VkIHRoZSB0aXBweSB0byBzaG93XG5cblxuICB2YXIgbGFzdFRyaWdnZXJFdmVudCA9IHt9OyAvLyBUaGUgbGFzdCBtb3VzZW1vdmUgZXZlbnQgb2JqZWN0IGNyZWF0ZWQgYnkgdGhlIGRvY3VtZW50IG1vdXNlbW92ZSBldmVudFxuXG4gIHZhciBsYXN0TW91c2VNb3ZlRXZlbnQgPSBudWxsOyAvLyBUaW1lb3V0IGNyZWF0ZWQgYnkgdGhlIHNob3cgZGVsYXlcblxuICB2YXIgc2hvd1RpbWVvdXRJZCA9IDA7IC8vIFRpbWVvdXQgY3JlYXRlZCBieSB0aGUgaGlkZSBkZWxheVxuXG4gIHZhciBoaWRlVGltZW91dElkID0gMDsgLy8gRmxhZyB0byBkZXRlcm1pbmUgaWYgdGhlIHRpcHB5IGlzIHNjaGVkdWxlZCB0byBzaG93IGR1ZSB0byB0aGUgc2hvdyB0aW1lb3V0XG5cbiAgdmFyIGlzU2NoZWR1bGVkVG9TaG93ID0gZmFsc2U7IC8vIFRoZSBjdXJyZW50IGB0cmFuc2l0aW9uZW5kYCBjYWxsYmFjayByZWZlcmVuY2VcblxuICB2YXIgdHJhbnNpdGlvbkVuZExpc3RlbmVyID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZExpc3RlbmVyKCkge307IC8vIEFycmF5IG9mIGV2ZW50IGxpc3RlbmVycyBjdXJyZW50bHkgYXR0YWNoZWQgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG5cblxuICB2YXIgbGlzdGVuZXJzID0gW107IC8vIFByaXZhdGUgb25Nb3VzZU1vdmUgaGFuZGxlciByZWZlcmVuY2UsIGRlYm91bmNlZCBvciBub3RcblxuICB2YXIgZGVib3VuY2VkT25Nb3VzZU1vdmUgPSBwcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlID4gMCA/IGRlYm91bmNlKG9uTW91c2VNb3ZlLCBwcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlKSA6IG9uTW91c2VNb3ZlOyAvLyBOb2RlIHRoZSB0aXBweSBpcyBjdXJyZW50bHkgYXBwZW5kZWQgdG9cblxuICB2YXIgcGFyZW50Tm9kZSA9IG51bGw7XG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09IPCflJEgUHVibGljIG1lbWJlcnMg8J+UkSA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuICAvLyBpZCB1c2VkIGZvciB0aGUgYGFyaWEtZGVzY3JpYmVkYnlgIC8gYGFyaWEtbGFiZWxsZWRieWAgYXR0cmlidXRlXG5cbiAgdmFyIGlkID0gaWRDb3VudGVyKys7IC8vIFBvcHBlciBlbGVtZW50IHJlZmVyZW5jZVxuXG4gIHZhciBwb3BwZXIgPSBjcmVhdGVQb3BwZXJFbGVtZW50KGlkLCBwcm9wcyk7IC8vIFByZXZlbnQgYSB0aXBweSB3aXRoIGEgZGVsYXkgZnJvbSBoaWRpbmcgaWYgdGhlIGN1cnNvciBsZWZ0IHRoZW4gcmV0dXJuZWRcbiAgLy8gYmVmb3JlIGl0IHN0YXJ0ZWQgaGlkaW5nXG5cbiAgcG9wcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlICYmIGxhc3RUcmlnZ2VyRXZlbnQudHlwZSA9PT0gJ21vdXNlZW50ZXInKSB7XG4gICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHBvcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBsYXN0VHJpZ2dlckV2ZW50LnR5cGUgPT09ICdtb3VzZWVudGVyJykge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgIH1cbiAgfSk7IC8vIFBvcHBlciBlbGVtZW50IGNoaWxkcmVuOiB7IGFycm93LCBiYWNrZHJvcCwgY29udGVudCwgdG9vbHRpcCB9XG5cbiAgdmFyIHBvcHBlckNoaWxkcmVuID0gZ2V0Q2hpbGRyZW4ocG9wcGVyKTtcbiAgdmFyIHN0YXRlID0ge1xuICAgIC8vIElzIHRoZSBpbnN0YW5jZSBjdXJyZW50bHkgZW5hYmxlZD9cbiAgICBpc0VuYWJsZWQ6IHRydWUsXG4gICAgLy8gSXMgdGhlIHRpcHB5IGN1cnJlbnRseSBzaG93aW5nIGFuZCBub3QgdHJhbnNpdGlvbmluZyBvdXQ/XG4gICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAvLyBIYXMgdGhlIGluc3RhbmNlIGJlZW4gZGVzdHJveWVkP1xuICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAvLyBJcyB0aGUgdGlwcHkgY3VycmVudGx5IG1vdW50ZWQgdG8gdGhlIERPTT9cbiAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgIC8vIEhhcyB0aGUgdGlwcHkgZmluaXNoZWQgdHJhbnNpdGlvbmluZyBpbj9cbiAgICBpc1Nob3duOiBmYWxzZSAvLyBQb3BwZXIuanMgaW5zdGFuY2UgZm9yIHRoZSB0aXBweSBpcyBsYXppbHkgY3JlYXRlZFxuXG4gIH07XG4gIHZhciBwb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gIHZhciBpbnN0YW5jZSA9IHtcbiAgICAvLyBwcm9wZXJ0aWVzXG4gICAgaWQ6IGlkLFxuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgIHBvcHBlcjogcG9wcGVyLFxuICAgIHBvcHBlckNoaWxkcmVuOiBwb3BwZXJDaGlsZHJlbixcbiAgICBwb3BwZXJJbnN0YW5jZTogcG9wcGVySW5zdGFuY2UsXG4gICAgcHJvcHM6IHByb3BzLFxuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAvLyBtZXRob2RzXG4gICAgY2xlYXJEZWxheVRpbWVvdXRzOiBjbGVhckRlbGF5VGltZW91dHMsXG4gICAgc2V0OiBzZXQsXG4gICAgc2V0Q29udGVudDogc2V0Q29udGVudCQkMSxcbiAgICBzaG93OiBzaG93LFxuICAgIGhpZGU6IGhpZGUsXG4gICAgZW5hYmxlOiBlbmFibGUsXG4gICAgZGlzYWJsZTogZGlzYWJsZSxcbiAgICBkZXN0cm95OiBkZXN0cm95XG4gIH07XG4gIGFkZFRyaWdnZXJzVG9SZWZlcmVuY2UoKTtcblxuICBpZiAoIXByb3BzLmxhenkpIHtcbiAgICBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgaWYgKHByb3BzLnNob3dPbkluaXQpIHtcbiAgICBzY2hlZHVsZVNob3coKTtcbiAgfSAvLyBFbnN1cmUgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGNhbiByZWNlaXZlIGZvY3VzIChhbmQgaXMgbm90IGEgZGVsZWdhdGUpXG5cblxuICBpZiAocHJvcHMuYTExeSAmJiAhcHJvcHMudGFyZ2V0ICYmICFjYW5SZWNlaXZlRm9jdXMocmVmZXJlbmNlKSkge1xuICAgIHJlZmVyZW5jZS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcbiAgfSAvLyBJbnN0YWxsIHNob3J0Y3V0c1xuICAvLyBAdHMtaWdub3JlXG5cblxuICByZWZlcmVuY2UuX3RpcHB5ID0gaW5zdGFuY2U7IC8vIEB0cy1pZ25vcmVcblxuICBwb3BwZXIuX3RpcHB5ID0gaW5zdGFuY2U7XG4gIHJldHVybiBpbnN0YW5jZTtcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT0g8J+UkiBQcml2YXRlIG1ldGhvZHMg8J+UkiA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qKlxuICAgKiBQb3NpdGlvbnMgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIG5lYXIgdGhlIGN1cnNvclxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IoZXZlbnQpIHtcbiAgICB2YXIgX2xhc3RNb3VzZU1vdmVFdmVudCA9IGxhc3RNb3VzZU1vdmVFdmVudCA9IGV2ZW50LFxuICAgICAgICBjbGllbnRYID0gX2xhc3RNb3VzZU1vdmVFdmVudC5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gX2xhc3RNb3VzZU1vdmVFdmVudC5jbGllbnRZO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRW5zdXJlIHZpcnR1YWwgcmVmZXJlbmNlIGlzIHBhZGRlZCB0byBwcmV2ZW50IHRvb2x0aXAgZnJvbVxuICAgIC8vIG92ZXJmbG93aW5nLiBNYXliZSBQb3BwZXIuanMgaXNzdWU/XG5cblxuICAgIHZhciBwbGFjZW1lbnQgPSBnZXRQb3BwZXJQbGFjZW1lbnQoaW5zdGFuY2UucG9wcGVyKTtcbiAgICB2YXIgcGFkZGluZyA9IGluc3RhbmNlLnByb3BzLmFycm93ID8gUEFERElORyArIChpbnN0YW5jZS5wcm9wcy5hcnJvd1R5cGUgPT09ICdyb3VuZCcgPyAxOCA6IDE2KSA6IFBBRERJTkc7XG4gICAgdmFyIGlzVmVydGljYWxQbGFjZW1lbnQgPSBpbmNsdWRlcyhbJ3RvcCcsICdib3R0b20nXSwgcGxhY2VtZW50KTtcbiAgICB2YXIgaXNIb3Jpem9udGFsUGxhY2VtZW50ID0gaW5jbHVkZXMoWydsZWZ0JywgJ3JpZ2h0J10sIHBsYWNlbWVudCk7IC8vIFRvcCAvIGxlZnQgYm91bmRhcnlcblxuICAgIHZhciB4ID0gaXNWZXJ0aWNhbFBsYWNlbWVudCA/IE1hdGgubWF4KHBhZGRpbmcsIGNsaWVudFgpIDogY2xpZW50WDtcbiAgICB2YXIgeSA9IGlzSG9yaXpvbnRhbFBsYWNlbWVudCA/IE1hdGgubWF4KHBhZGRpbmcsIGNsaWVudFkpIDogY2xpZW50WTsgLy8gQm90dG9tIC8gcmlnaHQgYm91bmRhcnlcblxuICAgIGlmIChpc1ZlcnRpY2FsUGxhY2VtZW50ICYmIHggPiBwYWRkaW5nKSB7XG4gICAgICB4ID0gTWF0aC5taW4oY2xpZW50WCwgd2luZG93LmlubmVyV2lkdGggLSBwYWRkaW5nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNIb3Jpem9udGFsUGxhY2VtZW50ICYmIHkgPiBwYWRkaW5nKSB7XG4gICAgICB5ID0gTWF0aC5taW4oY2xpZW50WSwgd2luZG93LmlubmVySGVpZ2h0IC0gcGFkZGluZyk7XG4gICAgfVxuXG4gICAgdmFyIHJlY3QgPSBpbnN0YW5jZS5yZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdmFyIGZvbGxvd0N1cnNvciA9IGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvcjtcbiAgICB2YXIgaXNIb3Jpem9udGFsID0gZm9sbG93Q3Vyc29yID09PSAnaG9yaXpvbnRhbCc7XG4gICAgdmFyIGlzVmVydGljYWwgPSBmb2xsb3dDdXJzb3IgPT09ICd2ZXJ0aWNhbCc7XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UucmVmZXJlbmNlID0ge1xuICAgICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0OiBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgIHRvcDogaXNIb3Jpem9udGFsID8gcmVjdC50b3AgOiB5LFxuICAgICAgICAgIGJvdHRvbTogaXNIb3Jpem9udGFsID8gcmVjdC5ib3R0b20gOiB5LFxuICAgICAgICAgIGxlZnQ6IGlzVmVydGljYWwgPyByZWN0LmxlZnQgOiB4LFxuICAgICAgICAgIHJpZ2h0OiBpc1ZlcnRpY2FsID8gcmVjdC5yaWdodCA6IHhcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBjbGllbnRXaWR0aDogMCxcbiAgICAgIGNsaWVudEhlaWdodDogMFxuICAgIH07XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcblxuICAgIGlmIChmb2xsb3dDdXJzb3IgPT09ICdpbml0aWFsJyAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSB0aXBweSBpbnN0YW5jZSBmb3IgYSBkZWxlZ2F0ZSB3aGVuIGl0J3MgYmVlbiB0cmlnZ2VyZWRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBjcmVhdGVEZWxlZ2F0ZUNoaWxkVGlwcHkoZXZlbnQpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIHRhcmdldEVsID0gY2xvc2VzdChldmVudC50YXJnZXQsIGluc3RhbmNlLnByb3BzLnRhcmdldCk7IC8vIEB0cy1pZ25vcmVcblxuICAgIGlmICh0YXJnZXRFbCAmJiAhdGFyZ2V0RWwuX3RpcHB5KSB7XG4gICAgICBjcmVhdGVUaXBweSh0YXJnZXRFbCwgX2V4dGVuZHMoe30sIGluc3RhbmNlLnByb3BzLCB7XG4gICAgICAgIGNvbnRlbnQ6IGV2YWx1YXRlVmFsdWUoY29sbGVjdGlvblByb3BzLmNvbnRlbnQsIFt0YXJnZXRFbF0pLFxuICAgICAgICBhcHBlbmRUbzogY29sbGVjdGlvblByb3BzLmFwcGVuZFRvLFxuICAgICAgICB0YXJnZXQ6ICcnLFxuICAgICAgICBzaG93T25Jbml0OiB0cnVlXG4gICAgICB9KSk7XG4gICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0dXAgYmVmb3JlIHNob3coKSBpcyBpbnZva2VkIChkZWxheXMsIGV0Yy4pXG4gICAqIEBwYXJhbSB7RXZlbnR9IFtldmVudF1cbiAgICovXG5cblxuICBmdW5jdGlvbiBzY2hlZHVsZVNob3coZXZlbnQpIHtcbiAgICBjbGVhckRlbGF5VGltZW91dHMoKTtcblxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElzIGEgZGVsZWdhdGUsIGNyZWF0ZSBhbiBpbnN0YW5jZSBmb3IgdGhlIGNoaWxkIHRhcmdldFxuXG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMudGFyZ2V0KSB7XG4gICAgICByZXR1cm4gY3JlYXRlRGVsZWdhdGVDaGlsZFRpcHB5KGV2ZW50KTtcbiAgICB9XG5cbiAgICBpc1NjaGVkdWxlZFRvU2hvdyA9IHRydWU7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMud2FpdCkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLnByb3BzLndhaXQoaW5zdGFuY2UsIGV2ZW50KTtcbiAgICB9IC8vIElmIHRoZSB0b29sdGlwIGhhcyBhIGRlbGF5LCB3ZSBuZWVkIHRvIGJlIGxpc3RlbmluZyB0byB0aGUgbW91c2Vtb3ZlIGFzXG4gICAgLy8gc29vbiBhcyB0aGUgdHJpZ2dlciBldmVudCBpcyBmaXJlZCwgc28gdGhhdCBpdCdzIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uXG4gICAgLy8gdXBvbiBtb3VudC5cbiAgICAvLyBFZGdlIGNhc2U6IGlmIHRoZSB0b29sdGlwIGlzIHN0aWxsIG1vdW50ZWQsIGJ1dCB0aGVuIHNjaGVkdWxlU2hvdygpIGlzXG4gICAgLy8gY2FsbGVkLCBpdCBjYXVzZXMgYSBqdW1wLlxuXG5cbiAgICBpZiAoaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSAmJiAhaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKTtcbiAgICB9XG5cbiAgICB2YXIgZGVsYXkgPSBnZXRWYWx1ZShpbnN0YW5jZS5wcm9wcy5kZWxheSwgMCwgRGVmYXVsdHMuZGVsYXkpO1xuXG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBzaG93VGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNob3coKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0dXAgYmVmb3JlIGhpZGUoKSBpcyBpbnZva2VkIChkZWxheXMsIGV0Yy4pXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVIaWRlKCkge1xuICAgIGNsZWFyRGVsYXlUaW1lb3V0cygpO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybiByZW1vdmVGb2xsb3dDdXJzb3JMaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIGlzU2NoZWR1bGVkVG9TaG93ID0gZmFsc2U7XG4gICAgdmFyIGRlbGF5ID0gZ2V0VmFsdWUoaW5zdGFuY2UucHJvcHMuZGVsYXksIDEsIERlZmF1bHRzLmRlbGF5KTtcblxuICAgIGlmIChkZWxheSkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaGlkZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGZvbGxvdyBjdXJzb3IgbGlzdGVuZXJcbiAgICovXG5cblxuICBmdW5jdGlvbiByZW1vdmVGb2xsb3dDdXJzb3JMaXN0ZW5lcigpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYW5zIHVwIG9sZCBsaXN0ZW5lcnNcbiAgICovXG5cblxuICBmdW5jdGlvbiBjbGVhbnVwT2xkTW91c2VMaXN0ZW5lcnMoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgc2NoZWR1bGVIaWRlKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkZWJvdW5jZWRPbk1vdXNlTW92ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgdXBvbiB0cmlnZ2VyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25UcmlnZ2VyKGV2ZW50KSB7XG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQgfHwgaXNFdmVudExpc3RlbmVyU3RvcHBlZChldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgbGFzdFRyaWdnZXJFdmVudCA9IGV2ZW50O1xuXG4gICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGxhc3RNb3VzZU1vdmVFdmVudCA9IGV2ZW50O1xuICAgICAgfVxuICAgIH0gLy8gVG9nZ2xlIHNob3cvaGlkZSB3aGVuIGNsaWNraW5nIGNsaWNrLXRyaWdnZXJlZCB0b29sdGlwc1xuXG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJyAmJiBpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayAhPT0gZmFsc2UgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICBzY2hlZHVsZUhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVTaG93KGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIHVzZWQgZm9yIGludGVyYWN0aXZlIHRvb2x0aXBzIHRvIGRldGVjdCB3aGVuIHRoZXkgc2hvdWxkXG4gICAqIGhpZGVcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgdmFyIHJlZmVyZW5jZVRoZUN1cnNvcklzT3ZlciA9IGNsb3Nlc3RDYWxsYmFjayggLy8gQHRzLWlnbm9yZVxuICAgIGV2ZW50LnRhcmdldCwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gZWwuX3RpcHB5O1xuICAgIH0pO1xuICAgIHZhciBpc0N1cnNvck92ZXJQb3BwZXIgPSAvLyBAdHMtaWdub3JlXG4gICAgY2xvc2VzdChldmVudC50YXJnZXQsIFNlbGVjdG9ycy5QT1BQRVIpID09PSBpbnN0YW5jZS5wb3BwZXI7XG4gICAgdmFyIGlzQ3Vyc29yT3ZlclJlZmVyZW5jZSA9IHJlZmVyZW5jZVRoZUN1cnNvcklzT3ZlciA9PT0gaW5zdGFuY2UucmVmZXJlbmNlO1xuXG4gICAgaWYgKGlzQ3Vyc29yT3ZlclBvcHBlciB8fCBpc0N1cnNvck92ZXJSZWZlcmVuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNDdXJzb3JPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIoZ2V0UG9wcGVyUGxhY2VtZW50KGluc3RhbmNlLnBvcHBlciksIGluc3RhbmNlLnBvcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgZXZlbnQsIGluc3RhbmNlLnByb3BzKSkge1xuICAgICAgY2xlYW51cE9sZE1vdXNlTGlzdGVuZXJzKCk7XG4gICAgICBzY2hlZHVsZUhpZGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgdXBvbiBtb3VzZWxlYXZlXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoZXZlbnQpIHtcbiAgICBpZiAoaXNFdmVudExpc3RlbmVyU3RvcHBlZChldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHNjaGVkdWxlSGlkZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkZWJvdW5jZWRPbk1vdXNlTW92ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVIaWRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgdXBvbiBibHVyXG4gICAqIEBwYXJhbSB7Rm9jdXNFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkJsdXIoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBpbnN0YW5jZS5yZWZlcmVuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgZXZlbnQucmVsYXRlZFRhcmdldCAmJiAvLyBAdHMtaWdub3JlXG4gICAgaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVIaWRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgd2hlbiBhIGNoaWxkIHRhcmdldCBpcyB0cmlnZ2VyZWRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkRlbGVnYXRlU2hvdyhldmVudCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoY2xvc2VzdChldmVudC50YXJnZXQsIGluc3RhbmNlLnByb3BzLnRhcmdldCkpIHtcbiAgICAgIHNjaGVkdWxlU2hvdyhldmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lciBpbnZva2VkIHdoZW4gYSBjaGlsZCB0YXJnZXQgc2hvdWxkIGhpZGVcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkRlbGVnYXRlSGlkZShldmVudCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoY2xvc2VzdChldmVudC50YXJnZXQsIGluc3RhbmNlLnByb3BzLnRhcmdldCkpIHtcbiAgICAgIHNjaGVkdWxlSGlkZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBhbiBldmVudCBsaXN0ZW5lciBzaG91bGQgc3RvcCBmdXJ0aGVyIGV4ZWN1dGlvbiBkdWUgdG8gdGhlXG4gICAqIGB0b3VjaEhvbGRgIG9wdGlvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGlzRXZlbnRMaXN0ZW5lclN0b3BwZWQoZXZlbnQpIHtcbiAgICB2YXIgc3VwcG9ydHNUb3VjaCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdztcbiAgICB2YXIgaXNUb3VjaEV2ZW50ID0gaW5jbHVkZXMoZXZlbnQudHlwZSwgJ3RvdWNoJyk7XG4gICAgdmFyIHRvdWNoSG9sZCA9IGluc3RhbmNlLnByb3BzLnRvdWNoSG9sZDtcbiAgICByZXR1cm4gc3VwcG9ydHNUb3VjaCAmJiBpc1VzaW5nVG91Y2ggJiYgdG91Y2hIb2xkICYmICFpc1RvdWNoRXZlbnQgfHwgaXNVc2luZ1RvdWNoICYmICF0b3VjaEhvbGQgJiYgaXNUb3VjaEV2ZW50O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBwb3BwZXIgaW5zdGFuY2UgZm9yIHRoZSBpbnN0YW5jZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlckluc3RhbmNlKCkge1xuICAgIHZhciBwb3BwZXJPcHRpb25zID0gaW5zdGFuY2UucHJvcHMucG9wcGVyT3B0aW9ucztcbiAgICB2YXIgX2luc3RhbmNlJHBvcHBlckNoaWxkID0gaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4sXG4gICAgICAgIHRvb2x0aXAgPSBfaW5zdGFuY2UkcG9wcGVyQ2hpbGQudG9vbHRpcCxcbiAgICAgICAgYXJyb3cgPSBfaW5zdGFuY2UkcG9wcGVyQ2hpbGQuYXJyb3c7XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UgPSBuZXcgUG9wcGVyKGluc3RhbmNlLnJlZmVyZW5jZSwgaW5zdGFuY2UucG9wcGVyLCBfZXh0ZW5kcyh7XG4gICAgICBwbGFjZW1lbnQ6IGluc3RhbmNlLnByb3BzLnBsYWNlbWVudFxuICAgIH0sIHBvcHBlck9wdGlvbnMsIHtcbiAgICAgIG1vZGlmaWVyczogX2V4dGVuZHMoe30sIHBvcHBlck9wdGlvbnMgPyBwb3BwZXJPcHRpb25zLm1vZGlmaWVycyA6IHt9LCB7XG4gICAgICAgIHByZXZlbnRPdmVyZmxvdzogX2V4dGVuZHMoe1xuICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiBpbnN0YW5jZS5wcm9wcy5ib3VuZGFyeSxcbiAgICAgICAgICBwYWRkaW5nOiBQQURESU5HXG4gICAgICAgIH0sIGdldE1vZGlmaWVyKHBvcHBlck9wdGlvbnMsICdwcmV2ZW50T3ZlcmZsb3cnKSksXG4gICAgICAgIGFycm93OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgZWxlbWVudDogYXJyb3csXG4gICAgICAgICAgZW5hYmxlZDogISFhcnJvd1xuICAgICAgICB9LCBnZXRNb2RpZmllcihwb3BwZXJPcHRpb25zLCAnYXJyb3cnKSksXG4gICAgICAgIGZsaXA6IF9leHRlbmRzKHtcbiAgICAgICAgICBlbmFibGVkOiBpbnN0YW5jZS5wcm9wcy5mbGlwLFxuICAgICAgICAgIC8vIFRoZSB0b29sdGlwIGlzIG9mZnNldCBieSAxMHB4IGZyb20gdGhlIHBvcHBlciBpbiBDU1MsXG4gICAgICAgICAgLy8gd2UgbmVlZCB0byBhY2NvdW50IGZvciBpdHMgZGlzdGFuY2VcbiAgICAgICAgICBwYWRkaW5nOiBpbnN0YW5jZS5wcm9wcy5kaXN0YW5jZSArIFBBRERJTkcsXG4gICAgICAgICAgYmVoYXZpb3I6IGluc3RhbmNlLnByb3BzLmZsaXBCZWhhdmlvclxuICAgICAgICB9LCBnZXRNb2RpZmllcihwb3BwZXJPcHRpb25zLCAnZmxpcCcpKSxcbiAgICAgICAgb2Zmc2V0OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgb2Zmc2V0OiBpbnN0YW5jZS5wcm9wcy5vZmZzZXRcbiAgICAgICAgfSwgZ2V0TW9kaWZpZXIocG9wcGVyT3B0aW9ucywgJ29mZnNldCcpKVxuICAgICAgfSksXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSkge1xuICAgICAgICBpZiAoaW5zdGFuY2UucHJvcHMuZmxpcCAmJiAhaW5zdGFuY2UucHJvcHMuZmxpcE9uVXBkYXRlKSB7XG4gICAgICAgICAgaWYgKGRhdGEuZmxpcHBlZCkge1xuICAgICAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5wbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKGluc3RhbmNlLnBvcHBlckluc3RhbmNlLm1vZGlmaWVycywgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRQb3BwZXJQbGFjZW1lbnQoaW5zdGFuY2UucG9wcGVyKTtcbiAgICAgICAgdmFyIHN0eWxlcyA9IHRvb2x0aXAuc3R5bGU7IC8vIEFjY291bnQgZm9yIHRoZSBgZGlzdGFuY2VgIG9mZnNldFxuXG4gICAgICAgIHN0eWxlcy50b3AgPSAnJztcbiAgICAgICAgc3R5bGVzLmJvdHRvbSA9ICcnO1xuICAgICAgICBzdHlsZXMubGVmdCA9ICcnO1xuICAgICAgICBzdHlsZXMucmlnaHQgPSAnJztcbiAgICAgICAgc3R5bGVzW2Jhc2VQbGFjZW1lbnRdID0gZ2V0T2Zmc2V0RGlzdGFuY2VJblB4KGluc3RhbmNlLnByb3BzLmRpc3RhbmNlKTsgLy8gQXZvaWQgX2RlZmluZVByb3BlcnR5IGhlbHBlciBmdW5jdGlvbiBjcmVhdGVkIGJ5IEJhYmVsXG5cbiAgICAgICAgdmFyIHBhZGRpbmcgPSB7XG4gICAgICAgICAgdG9wOiBQQURESU5HLFxuICAgICAgICAgIGJvdHRvbTogUEFERElORyxcbiAgICAgICAgICBsZWZ0OiBQQURESU5HLFxuICAgICAgICAgIHJpZ2h0OiBQQURESU5HXG4gICAgICAgIH07XG4gICAgICAgIHBhZGRpbmdbYmFzZVBsYWNlbWVudF0gPSBQQURESU5HICsgaW5zdGFuY2UucHJvcHMuZGlzdGFuY2U7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLm1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgICAgICAgfSlbMF0ucGFkZGluZyA9IHBhZGRpbmc7XG5cbiAgICAgICAgaWYgKHBvcHBlck9wdGlvbnMgJiYgcG9wcGVyT3B0aW9ucy5vblVwZGF0ZSkge1xuICAgICAgICAgIHBvcHBlck9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIE1vdW50cyB0aGUgdG9vbHRpcCB0byB0aGUgRE9NLCBjYWxsYmFjayB0byBzaG93IHRvb2x0aXAgaXMgcnVuICoqYWZ0ZXIqKlxuICAgKiBwb3BwZXIncyBwb3NpdGlvbiBoYXMgdXBkYXRlZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG1vdW50KGNhbGxiYWNrKSB7XG4gICAgdmFyIHNob3VsZEVuYWJsZUxpc3RlbmVycyA9ICFoYXNGb2xsb3dDdXJzb3JCZWhhdmlvcigpICYmICEoaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yID09PSAnaW5pdGlhbCcgJiYgaXNVc2luZ1RvdWNoKTtcblxuICAgIGlmICghaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIGNyZWF0ZVBvcHBlckluc3RhbmNlKCk7XG5cbiAgICAgIGlmICghc2hvdWxkRW5hYmxlTGlzdGVuZXJzKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkpIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcblxuICAgICAgICBpZiAoc2hvdWxkRW5hYmxlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKGluc3RhbmNlLnBvcHBlckluc3RhbmNlLm1vZGlmaWVycywgaW5zdGFuY2UucHJvcHMuZmxpcCk7XG4gICAgfSAvLyBJZiB0aGUgaW5zdGFuY2UgcHJldmlvdXNseSBoYWQgZm9sbG93Q3Vyc29yIGJlaGF2aW9yLCBpdCB3aWxsIGJlXG4gICAgLy8gcG9zaXRpb25lZCBpbmNvcnJlY3RseSBpZiB0cmlnZ2VyZWQgYnkgYGZvY3VzYCBhZnRlcndhcmRzLlxuICAgIC8vIFVwZGF0ZSB0aGUgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIHJlYWwgRE9NIGVsZW1lbnRcblxuXG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UucmVmZXJlbmNlID0gaW5zdGFuY2UucmVmZXJlbmNlO1xuICAgIHZhciBhcnJvdyA9IGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmFycm93O1xuXG4gICAgaWYgKGhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkpIHtcbiAgICAgIGlmIChhcnJvdykge1xuICAgICAgICBhcnJvdy5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWxheSA9IGdldFZhbHVlKGluc3RhbmNlLnByb3BzLmRlbGF5LCAwLCBEZWZhdWx0cy5kZWxheSk7XG5cbiAgICAgIGlmIChsYXN0VHJpZ2dlckV2ZW50LnR5cGUpIHtcbiAgICAgICAgcG9zaXRpb25WaXJ0dWFsUmVmZXJlbmNlTmVhckN1cnNvcihkZWxheSAmJiBsYXN0TW91c2VNb3ZlRXZlbnQgPyBsYXN0TW91c2VNb3ZlRXZlbnQgOiBsYXN0VHJpZ2dlckV2ZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFycm93KSB7XG4gICAgICBhcnJvdy5zdHlsZS5tYXJnaW4gPSAnJztcbiAgICB9IC8vIEFsbG93IGZvbGxvd0N1cnNvcjogJ2luaXRpYWwnIG9uIHRvdWNoIGRldmljZXNcblxuXG4gICAgaWYgKGlzVXNpbmdUb3VjaCAmJiBsYXN0TW91c2VNb3ZlRXZlbnQgJiYgaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yID09PSAnaW5pdGlhbCcpIHtcbiAgICAgIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IobGFzdE1vdXNlTW92ZUV2ZW50KTtcblxuICAgICAgaWYgKGFycm93KSB7XG4gICAgICAgIGFycm93LnN0eWxlLm1hcmdpbiA9ICcwJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhZnRlclBvcHBlclBvc2l0aW9uVXBkYXRlcyhpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSwgY2FsbGJhY2spO1xuICAgIHZhciBhcHBlbmRUbyA9IGluc3RhbmNlLnByb3BzLmFwcGVuZFRvO1xuICAgIHBhcmVudE5vZGUgPSBhcHBlbmRUbyA9PT0gJ3BhcmVudCcgPyBpbnN0YW5jZS5yZWZlcmVuY2UucGFyZW50Tm9kZSA6IGV2YWx1YXRlVmFsdWUoYXBwZW5kVG8sIFtpbnN0YW5jZS5yZWZlcmVuY2VdKTtcblxuICAgIGlmICghcGFyZW50Tm9kZS5jb250YWlucyhpbnN0YW5jZS5wb3BwZXIpKSB7XG4gICAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKGluc3RhbmNlLnBvcHBlcik7XG4gICAgICBpbnN0YW5jZS5wcm9wcy5vbk1vdW50KGluc3RhbmNlKTtcbiAgICAgIGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBpbnN0YW5jZSBpcyBpbiBgZm9sbG93Q3Vyc29yYCBtb2RlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciAmJiAhaXNVc2luZ1RvdWNoICYmIGxhc3RUcmlnZ2VyRXZlbnQudHlwZSAhPT0gJ2ZvY3VzJztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdG9vbHRpcCdzIHBvc2l0aW9uIG9uIGVhY2ggYW5pbWF0aW9uIGZyYW1lXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gbWFrZVN0aWNreSgpIHtcbiAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihbaW5zdGFuY2UucG9wcGVyXSwgaXNJRSA/IDAgOiBpbnN0YW5jZS5wcm9wcy51cGRhdGVEdXJhdGlvbik7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpIHtcbiAgICAgIGlmIChpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGVQb3NpdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihbaW5zdGFuY2UucG9wcGVyXSwgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlUG9zaXRpb24oKTtcbiAgfVxuICAvKipcbiAgICogSW52b2tlcyBhIGNhbGxiYWNrIG9uY2UgdGhlIHRvb2x0aXAgaGFzIGZ1bGx5IHRyYW5zaXRpb25lZCBvdXRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uZWRPdXQoZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJiBwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuY29udGFpbnMoaW5zdGFuY2UucG9wcGVyKSkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnZva2VzIGEgY2FsbGJhY2sgb25jZSB0aGUgdG9vbHRpcCBoYXMgZnVsbHkgdHJhbnNpdGlvbmVkIGluXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbmVkSW4oZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBjYWxsYmFjayk7XG4gIH1cbiAgLyoqXG4gICAqIEludm9rZXMgYSBjYWxsYmFjayBvbmNlIHRoZSB0b29sdGlwJ3MgQ1NTIHRyYW5zaXRpb24gZW5kc1xuICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG5cblxuICBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLyoqXG4gICAgICogTGlzdGVuZXIgYWRkZWQgYXMgdGhlIGB0cmFuc2l0aW9uZW5kYCBoYW5kbGVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRvb2x0aXApIHtcbiAgICAgICAgdG9nZ2xlVHJhbnNpdGlvbkVuZExpc3RlbmVyKHRvb2x0aXAsICdyZW1vdmUnLCBsaXN0ZW5lcik7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSAvLyBNYWtlIGNhbGxiYWNrIHN5bmNocm9ub3VzIGlmIGR1cmF0aW9uIGlzIDBcbiAgICAvLyBgdHJhbnNpdGlvbmVuZGAgd29uJ3QgZmlyZSBvdGhlcndpc2VcblxuXG4gICAgaWYgKGR1cmF0aW9uID09PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICB2YXIgdG9vbHRpcCA9IGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXA7XG4gICAgdG9nZ2xlVHJhbnNpdGlvbkVuZExpc3RlbmVyKHRvb2x0aXAsICdyZW1vdmUnLCB0cmFuc2l0aW9uRW5kTGlzdGVuZXIpO1xuICAgIHRvZ2dsZVRyYW5zaXRpb25FbmRMaXN0ZW5lcih0b29sdGlwLCAnYWRkJywgbGlzdGVuZXIpO1xuICAgIHRyYW5zaXRpb25FbmRMaXN0ZW5lciA9IGxpc3RlbmVyO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSByZWZlcmVuY2UgYW5kIHN0b3JlcyBpdCBpbiBgbGlzdGVuZXJzYFxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRUeXBlXG4gICAqIEBwYXJhbSB7RXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdH0gaGFuZGxlclxuICAgKiBAcGFyYW0ge09iamVjdHxCb29sZWFufSBvcHRpb25zXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb24oZXZlbnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgIGluc3RhbmNlLnJlZmVyZW5jZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgbGlzdGVuZXJzLnB1c2goe1xuICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgcmVmZXJlbmNlIGJhc2VkIG9uIHRoZSBgdHJpZ2dlcmAgcHJvcFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGFkZFRyaWdnZXJzVG9SZWZlcmVuY2UoKSB7XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnRvdWNoSG9sZCAmJiAhaW5zdGFuY2UucHJvcHMudGFyZ2V0KSB7XG4gICAgICBvbigndG91Y2hzdGFydCcsIG9uVHJpZ2dlciwgUEFTU0lWRSk7XG4gICAgICBvbigndG91Y2hlbmQnLCBvbk1vdXNlTGVhdmUsIFBBU1NJVkUpO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnByb3BzLnRyaWdnZXIudHJpbSgpLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XG4gICAgICBpZiAoZXZlbnRUeXBlID09PSAnbWFudWFsJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIE5vbi1kZWxlZ2F0ZXNcblxuXG4gICAgICBpZiAoIWluc3RhbmNlLnByb3BzLnRhcmdldCkge1xuICAgICAgICBvbihldmVudFR5cGUsIG9uVHJpZ2dlcik7XG5cbiAgICAgICAgc3dpdGNoIChldmVudFR5cGUpIHtcbiAgICAgICAgICBjYXNlICdtb3VzZWVudGVyJzpcbiAgICAgICAgICAgIG9uKCdtb3VzZWxlYXZlJywgb25Nb3VzZUxlYXZlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnZm9jdXMnOlxuICAgICAgICAgICAgb24oaXNJRSA/ICdmb2N1c291dCcgOiAnYmx1cicsIG9uQmx1cik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRGVsZWdhdGVzXG4gICAgICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XG4gICAgICAgICAgY2FzZSAnbW91c2VlbnRlcic6XG4gICAgICAgICAgICBvbignbW91c2VvdmVyJywgb25EZWxlZ2F0ZVNob3cpO1xuICAgICAgICAgICAgb24oJ21vdXNlb3V0Jywgb25EZWxlZ2F0ZUhpZGUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdmb2N1cyc6XG4gICAgICAgICAgICBvbignZm9jdXNpbicsIG9uRGVsZWdhdGVTaG93KTtcbiAgICAgICAgICAgIG9uKCdmb2N1c291dCcsIG9uRGVsZWdhdGVIaWRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgICAgb24oZXZlbnRUeXBlLCBvbkRlbGVnYXRlU2hvdyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSByZWZlcmVuY2VcbiAgICovXG5cblxuICBmdW5jdGlvbiByZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UoKSB7XG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBldmVudFR5cGUgPSBfcmVmLmV2ZW50VHlwZSxcbiAgICAgICAgICBoYW5kbGVyID0gX3JlZi5oYW5kbGVyLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gICAgICBpbnN0YW5jZS5yZWZlcmVuY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xuICAgIGxpc3RlbmVycyA9IFtdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGlubmVyIGVsZW1lbnRzIHVzZWQgaW4gc2hvdy9oaWRlIG1ldGhvZHNcbiAgICogQHJldHVybiB7SFRNTERpdkVsZW1lbnRbXX1cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRJbm5lckVsZW1lbnRzKCkge1xuICAgIHJldHVybiBbaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4udG9vbHRpcCwgaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uYmFja2Ryb3AsIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmNvbnRlbnRdO1xuICB9XG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09IPCflJEgUHVibGljIG1ldGhvZHMg8J+UkSA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRoZSBpbnN0YW5jZSB0byBhbGxvdyBpdCB0byBzaG93IG9yIGhpZGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGluc3RhbmNlIHRvIGRpc2FsbG93IGl0IHRvIHNob3cgb3IgaGlkZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBwZW5kaW5nIHRpbWVvdXRzIHJlbGF0ZWQgdG8gdGhlIGBkZWxheWAgcHJvcCBpZiBhbnlcbiAgICovXG5cblxuICBmdW5jdGlvbiBjbGVhckRlbGF5VGltZW91dHMoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHNob3dUaW1lb3V0SWQpO1xuICAgIGNsZWFyVGltZW91dChoaWRlVGltZW91dElkKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBuZXcgcHJvcHMgZm9yIHRoZSBpbnN0YW5jZSBhbmQgcmVkcmF3cyB0aGUgdG9vbHRpcFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHNldCgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMsIERlZmF1bHRzKTtcbiAgICB2YXIgcHJldlByb3BzID0gaW5zdGFuY2UucHJvcHM7XG4gICAgdmFyIG5leHRQcm9wcyA9IGV2YWx1YXRlUHJvcHMoaW5zdGFuY2UucmVmZXJlbmNlLCBfZXh0ZW5kcyh7fSwgaW5zdGFuY2UucHJvcHMsIG9wdGlvbnMsIHtcbiAgICAgIGlnbm9yZUF0dHJpYnV0ZXM6IHRydWVcbiAgICB9KSk7XG4gICAgbmV4dFByb3BzLmlnbm9yZUF0dHJpYnV0ZXMgPSBoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCAnaWdub3JlQXR0cmlidXRlcycpID8gb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzIDogcHJldlByb3BzLmlnbm9yZUF0dHJpYnV0ZXM7XG4gICAgaW5zdGFuY2UucHJvcHMgPSBuZXh0UHJvcHM7XG5cbiAgICBpZiAoaGFzT3duUHJvcGVydHkob3B0aW9ucywgJ3RyaWdnZXInKSB8fCBoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCAndG91Y2hIb2xkJykpIHtcbiAgICAgIHJlbW92ZVRyaWdnZXJzRnJvbVJlZmVyZW5jZSgpO1xuICAgICAgYWRkVHJpZ2dlcnNUb1JlZmVyZW5jZSgpO1xuICAgIH1cblxuICAgIGlmIChoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCAnaW50ZXJhY3RpdmVEZWJvdW5jZScpKSB7XG4gICAgICBjbGVhbnVwT2xkTW91c2VMaXN0ZW5lcnMoKTtcbiAgICAgIGRlYm91bmNlZE9uTW91c2VNb3ZlID0gZGVib3VuY2Uob25Nb3VzZU1vdmUsIG9wdGlvbnMuaW50ZXJhY3RpdmVEZWJvdW5jZSk7XG4gICAgfVxuXG4gICAgdXBkYXRlUG9wcGVyRWxlbWVudChpbnN0YW5jZS5wb3BwZXIsIHByZXZQcm9wcywgbmV4dFByb3BzKTtcbiAgICBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbiA9IGdldENoaWxkcmVuKGluc3RhbmNlLnBvcHBlcik7XG5cbiAgICBpZiAoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuXG4gICAgICBpZiAoUE9QUEVSX0lOU1RBTkNFX0RFUEVOREVOQ0lFUy5zb21lKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCBwcm9wKTtcbiAgICAgIH0pKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgY3JlYXRlUG9wcGVySW5zdGFuY2UoKTtcblxuICAgICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciAmJiBsYXN0TW91c2VNb3ZlRXZlbnQpIHtcbiAgICAgICAgICBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKGxhc3RNb3VzZU1vdmVFdmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNob3J0Y3V0IGZvciAuc2V0KHsgY29udGVudDogbmV3Q29udGVudCB9KVxuICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtZW50fEZ1bmN0aW9ufSBjb250ZW50XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2V0Q29udGVudCQkMShjb250ZW50KSB7XG4gICAgc2V0KHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2hvd3MgdGhlIHRvb2x0aXBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2hvdygpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGdldFZhbHVlKGluc3RhbmNlLnByb3BzLmR1cmF0aW9uLCAwLCBEZWZhdWx0cy5kdXJhdGlvblswXSk7XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgfHwgIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCB8fCBpc1VzaW5nVG91Y2ggJiYgIWluc3RhbmNlLnByb3BzLnRvdWNoKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBEZXN0cm95IHRvb2x0aXAgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG5vIGxvbmdlciBvbiB0aGUgRE9NXG5cblxuICAgIGlmICggLy8gQHRzLWlnbm9yZVxuICAgICFoYXNPd25Qcm9wZXJ0eShpbnN0YW5jZS5yZWZlcmVuY2UsICdpc1ZpcnR1YWwnKSAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGluc3RhbmNlLnJlZmVyZW5jZSkpIHtcbiAgICAgIHJldHVybiBkZXN0cm95KCk7XG4gICAgfSAvLyBEbyBub3Qgc2hvdyB0b29sdGlwIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBoYXMgYSBgZGlzYWJsZWRgIGF0dHJpYnV0ZVxuXG5cbiAgICBpZiAoaW5zdGFuY2UucmVmZXJlbmNlLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5vblNob3coaW5zdGFuY2UpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnBvcHBlci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA9IHRydWU7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGluc3RhbmNlLnJlZmVyZW5jZS5jbGFzc0xpc3QuYWRkKCd0aXBweS1hY3RpdmUnKTtcbiAgICB9IC8vIFByZXZlbnQgYSB0cmFuc2l0aW9uIGlmIHRoZSBwb3BwZXIgaXMgYXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudFxuXG5cbiAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihbaW5zdGFuY2UucG9wcGVyLCBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi50b29sdGlwLCBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi5iYWNrZHJvcF0sIDApO1xuICAgIG1vdW50KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gQXJyb3cgd2lsbCBzb21ldGltZXMgbm90IGJlIHBvc2l0aW9uZWQgY29ycmVjdGx5LiBGb3JjZSBhbm90aGVyIHVwZGF0ZVxuXG5cbiAgICAgIGlmICghaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSkge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24oW2luc3RhbmNlLnBvcHBlcl0sIHByb3BzLnVwZGF0ZUR1cmF0aW9uKTtcbiAgICAgIGFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKGdldElubmVyRWxlbWVudHMoKSwgZHVyYXRpb24pO1xuXG4gICAgICBpZiAoaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uYmFja2Ryb3ApIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uY29udGVudC5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSBNYXRoLnJvdW5kKGR1cmF0aW9uIC8gMTIpICsgJ21zJztcbiAgICAgIH1cblxuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLnN0aWNreSkge1xuICAgICAgICBtYWtlU3RpY2t5KCk7XG4gICAgICB9XG5cbiAgICAgIHNldFZpc2liaWxpdHlTdGF0ZShnZXRJbm5lckVsZW1lbnRzKCksICd2aXNpYmxlJyk7XG4gICAgICBvblRyYW5zaXRpb25lZEluKGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXAuY2xhc3NMaXN0LmFkZCgndGlwcHktbm90cmFuc2l0aW9uJyk7XG5cbiAgICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmFyaWEpIHtcbiAgICAgICAgICBpbnN0YW5jZS5yZWZlcmVuY2Uuc2V0QXR0cmlidXRlKFwiYXJpYS1cIi5jb25jYXQoaW5zdGFuY2UucHJvcHMuYXJpYSksIGluc3RhbmNlLnBvcHBlci5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnN0YW5jZS5wcm9wcy5vblNob3duKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhdGUuaXNTaG93biA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSGlkZXMgdGhlIHRvb2x0aXBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaGlkZSgpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGdldFZhbHVlKGluc3RhbmNlLnByb3BzLmR1cmF0aW9uLCAxLCBEZWZhdWx0cy5kdXJhdGlvblsxXSk7XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgfHwgIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5vbkhpZGUoaW5zdGFuY2UpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXAuY2xhc3NMaXN0LnJlbW92ZSgndGlwcHktbm90cmFuc2l0aW9uJyk7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGluc3RhbmNlLnJlZmVyZW5jZS5jbGFzc0xpc3QucmVtb3ZlKCd0aXBweS1hY3RpdmUnKTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5wb3BwZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzU2hvd24gPSBmYWxzZTtcbiAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihnZXRJbm5lckVsZW1lbnRzKCksIGR1cmF0aW9uKTtcbiAgICBzZXRWaXNpYmlsaXR5U3RhdGUoZ2V0SW5uZXJFbGVtZW50cygpLCAnaGlkZGVuJyk7XG4gICAgb25UcmFuc2l0aW9uZWRPdXQoZHVyYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaXNTY2hlZHVsZWRUb1Nob3cpIHtcbiAgICAgICAgcmVtb3ZlRm9sbG93Q3Vyc29yTGlzdGVuZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmFyaWEpIHtcbiAgICAgICAgaW5zdGFuY2UucmVmZXJlbmNlLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtXCIuY29uY2F0KGluc3RhbmNlLnByb3BzLmFyaWEpKTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5vcHRpb25zLnBsYWNlbWVudCA9IGluc3RhbmNlLnByb3BzLnBsYWNlbWVudDtcbiAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaW5zdGFuY2UucG9wcGVyKTtcbiAgICAgIGluc3RhbmNlLnByb3BzLm9uSGlkZGVuKGluc3RhbmNlKTtcbiAgICAgIGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgdG9vbHRpcFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtkZXN0cm95VGFyZ2V0SW5zdGFuY2VzXVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koZGVzdHJveVRhcmdldEluc3RhbmNlcykge1xuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgdGhlIHBvcHBlciBpcyBjdXJyZW50bHkgbW91bnRlZCB0byB0aGUgRE9NLCB3ZSB3YW50IHRvIGVuc3VyZSBpdCBnZXRzXG4gICAgLy8gaGlkZGVuIGFuZCB1bm1vdW50ZWQgaW5zdGFudGx5IHVwb24gZGVzdHJ1Y3Rpb25cblxuXG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgaGlkZSgwKTtcbiAgICB9XG5cbiAgICByZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UoKTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgZGVsZXRlIGluc3RhbmNlLnJlZmVyZW5jZS5fdGlwcHk7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMudGFyZ2V0ICYmIGRlc3Ryb3lUYXJnZXRJbnN0YW5jZXMpIHtcbiAgICAgIGFycmF5RnJvbShpbnN0YW5jZS5yZWZlcmVuY2UucXVlcnlTZWxlY3RvckFsbChpbnN0YW5jZS5wcm9wcy50YXJnZXQpKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQuX3RpcHB5KSB7XG4gICAgICAgICAgY2hpbGQuX3RpcHB5LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogR3JvdXBzIGFuIGFycmF5IG9mIGluc3RhbmNlcyBieSB0YWtpbmcgY29udHJvbCBvZiB0aGVpciBwcm9wcyBkdXJpbmdcbiAqIGNlcnRhaW4gbGlmZWN5Y2xlcy5cbiAqIEBwYXJhbSB7T2JqZWN0W119IGluc3RhbmNlc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZ3JvdXAoaW5zdGFuY2VzKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkZGVsYXkgPSBfcmVmLmRlbGF5LFxuICAgICAgZGVsYXkgPSBfcmVmJGRlbGF5ID09PSB2b2lkIDAgPyBpbnN0YW5jZXNbMF0ucHJvcHMuZGVsYXkgOiBfcmVmJGRlbGF5LFxuICAgICAgX3JlZiRkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb24sXG4gICAgICBkdXJhdGlvbiA9IF9yZWYkZHVyYXRpb24gPT09IHZvaWQgMCA/IDAgOiBfcmVmJGR1cmF0aW9uO1xuXG4gIHZhciBpc0FueVRpcHB5T3BlbiA9IGZhbHNlO1xuICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpbnN0YW5jZS5fb3JpZ2luYWxQcm9wcyA9IHtcbiAgICAgIGR1cmF0aW9uOiBpbnN0YW5jZS5wcm9wcy5kdXJhdGlvbixcbiAgICAgIG9uSGlkZTogaW5zdGFuY2UucHJvcHMub25IaWRlLFxuICAgICAgb25TaG93OiBpbnN0YW5jZS5wcm9wcy5vblNob3csXG4gICAgICBvblNob3duOiBpbnN0YW5jZS5wcm9wcy5vblNob3duXG4gICAgfTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2V0SXNBbnlUaXBweU9wZW4odmFsdWUpIHtcbiAgICBpc0FueVRpcHB5T3BlbiA9IHZhbHVlO1xuICAgIHVwZGF0ZUluc3RhbmNlcygpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25TaG93KGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMub25TaG93KGluc3RhbmNlKTtcblxuICAgIGluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2Uuc2V0KHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uXG4gICAgICB9KTtcbiAgICAgIGluc3RhbmNlLmhpZGUoKTtcbiAgICB9KTtcbiAgICBzZXRJc0FueVRpcHB5T3Blbih0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uSGlkZShpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLm9uSGlkZShpbnN0YW5jZSk7XG5cbiAgICBzZXRJc0FueVRpcHB5T3BlbihmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblNob3duKGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMub25TaG93bihpbnN0YW5jZSk7XG5cbiAgICBpbnN0YW5jZS5zZXQoe1xuICAgICAgZHVyYXRpb246IGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLmR1cmF0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVJbnN0YW5jZXMoKSB7XG4gICAgaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5zZXQoe1xuICAgICAgICBvblNob3c6IG9uU2hvdyxcbiAgICAgICAgb25TaG93bjogb25TaG93bixcbiAgICAgICAgb25IaWRlOiBvbkhpZGUsXG4gICAgICAgIGRlbGF5OiBpc0FueVRpcHB5T3BlbiA/IFswLCBBcnJheS5pc0FycmF5KGRlbGF5KSA/IGRlbGF5WzFdIDogZGVsYXldIDogZGVsYXksXG4gICAgICAgIGR1cmF0aW9uOiBpc0FueVRpcHB5T3BlbiA/IGR1cmF0aW9uIDogaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMuZHVyYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlSW5zdGFuY2VzKCk7XG59XG5cbnZhciBnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kID0gZmFsc2U7XG4vKipcbiAqIEV4cG9ydGVkIG1vZHVsZVxuICogQHBhcmFtIHtTdHJpbmd8RWxlbWVudHxFbGVtZW50W118Tm9kZUxpc3R8T2JqZWN0fSB0YXJnZXRzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIHRpcHB5KHRhcmdldHMsIG9wdGlvbnMpIHtcbiAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMsIERlZmF1bHRzKTtcblxuICBpZiAoIWdsb2JhbEV2ZW50TGlzdGVuZXJzQm91bmQpIHtcbiAgICBiaW5kR2xvYmFsRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICBnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0cywgb3B0aW9ucyk7IC8vIElmIHRoZXkgYXJlIHNwZWNpZnlpbmcgYSB2aXJ0dWFsIHBvc2l0aW9uaW5nIHJlZmVyZW5jZSwgd2UgbmVlZCB0byBwb2x5ZmlsbFxuICAvLyBzb21lIG5hdGl2ZSBET00gcHJvcHNcblxuXG4gIGlmIChpc0JhcmVWaXJ0dWFsRWxlbWVudCh0YXJnZXRzKSkge1xuICAgIHBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXModGFyZ2V0cyk7XG4gIH1cblxuICB2YXIgaW5zdGFuY2VzID0gZ2V0QXJyYXlPZkVsZW1lbnRzKHRhcmdldHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCByZWZlcmVuY2UpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSByZWZlcmVuY2UgJiYgY3JlYXRlVGlwcHkocmVmZXJlbmNlLCBwcm9wcyk7XG5cbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIGFjYy5wdXNoKGluc3RhbmNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSk7XG4gIHJldHVybiBpc1Npbmd1bGFyKHRhcmdldHMpID8gaW5zdGFuY2VzWzBdIDogaW5zdGFuY2VzO1xufVxuLyoqXG4gKiBTdGF0aWMgcHJvcHNcbiAqL1xuXG5cbnRpcHB5LnZlcnNpb24gPSB2ZXJzaW9uO1xudGlwcHkuZGVmYXVsdHMgPSBEZWZhdWx0cztcbi8qKlxuICogU3RhdGljIG1ldGhvZHNcbiAqL1xuXG50aXBweS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIChwYXJ0aWFsRGVmYXVsdHMpIHtcbiAgT2JqZWN0LmtleXMocGFydGlhbERlZmF1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBEZWZhdWx0c1trZXldID0gcGFydGlhbERlZmF1bHRzW2tleV07XG4gIH0pO1xufTtcblxudGlwcHkuaGlkZUFsbCA9IGhpZGVBbGw7XG50aXBweS5ncm91cCA9IGdyb3VwO1xuLyoqXG4gKiBBdXRvLWluaXQgdG9vbHRpcHMgZm9yIGVsZW1lbnRzIHdpdGggYSBgZGF0YS10aXBweT1cIi4uLlwiYCBhdHRyaWJ1dGVcbiAqL1xuXG5mdW5jdGlvbiBhdXRvSW5pdCgpIHtcbiAgYXJyYXlGcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRpcHB5XScpKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBjb250ZW50ID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXRpcHB5Jyk7XG5cbiAgICBpZiAoY29udGVudCkge1xuICAgICAgdGlwcHkoZWwsIHtcbiAgICAgICAgY29udGVudDogY29udGVudFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuaWYgKGlzQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGF1dG9Jbml0KTtcbn1cblxuLyoqXG4gKiBJbmplY3RzIGEgc3RyaW5nIG9mIENTUyBzdHlsZXMgdG8gYSBzdHlsZSBub2RlIGluIDxoZWFkPlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1xuICovXG5cbmZ1bmN0aW9uIGluamVjdENTUyhjc3MpIHtcbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgc3R5bGUudGV4dENvbnRlbnQgPSBjc3M7XG4gICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuICAgIHZhciBmaXJzdENoaWxkID0gaGVhZC5maXJzdENoaWxkO1xuXG4gICAgaWYgKGZpcnN0Q2hpbGQpIHtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBmaXJzdENoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICB9XG59XG5cbmluamVjdENTUyhjc3MpO1xuXG5leHBvcnQgZGVmYXVsdCB0aXBweTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmFsbC5qcy5tYXBcbiIsImltcG9ydCBFbGVtZW50IGZyb20gJ0BVSS9lbGVtZW50JztcbmltcG9ydCAnQEF1dG9Db21wbGV0ZS9jc3MvYXV0b0NvbXBsZXRlLmNzcyc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCAnLi90aXBweS1zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG5pbXBvcnQgQ29tcGFyaXNvblRleHQgZnJvbSAnQFByb2plY3QvY29tcG9uZW50cy9jb21wYXJpc29uL3RleHQnO1xuaW1wb3J0IENvbXBhcmlzb25DaGFydCBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2NvbXBhcmlzb24vY2hhcnQnO1xuaW1wb3J0IEF1dG9Db21wbGV0ZSBmcm9tICdAQXV0b0NvbXBsZXRlL2pzL2F1dG9Db21wbGV0ZS5qcyc7XG5pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG5pbXBvcnQgdGlwcHkgZnJvbSAndGlwcHkuanMnO1xuXG5jb25zdCBpbml0aWFsQ29tcGFyZSA9IFsnVVMnLCdBTCddO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wYXJpc29uIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgcHJlcmVuZGVyKCl7IC8vIHRoaXMgcHJlcmVuZGVyIGlzIGNhbGxlZCBhcyBwYXJ0IG9mIHRoZSBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICB0aGlzLmNvbXBhcmlzb25zID0gW107XG4gICAgICAgIC8vIGZpcnN0IGxvb3AgdGhyb3VnaCB0byBpbnN0YW50aWF0ZSB0aGUgQ29tcGFyaXNvbnMuIGlmIHByZXJlbmRlcmVkLCBjb21wYXJpc29uLmVsIHdpbGwgYmUgdGhlIHJlbmRlcnMgaHRtbC4gaWYgbm90LCBpdCB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgICAgdGhpcy5tb2RlbC5ncm91cHMuZm9yRWFjaCgoZ3JvdXAsIGkpID0+IHtcbiAgICAgICAgICAgIHRoaXMubW9kZWwudHlwZXNOZXN0ZWRbaV0udmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgICAgICB2YXIgY29tcGFyaXNvbjtcbiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlLnR5cGUgPT09ICd0ZXh0JyApe1xuICAgICAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gdGhpcy5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIENvbXBhcmlzb25UZXh0LCBgZGl2LmpzLXRleHQtY29tcGFyZS0ke3ZhbHVlLmZpZWxkfWAsIHtyZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXMsIGRhdGE6IHtjb21wYXJpc29uOiBpbml0aWFsQ29tcGFyZSwgZmllbGQ6IHZhbHVlLmZpZWxkfX0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSB0aGlzLnBhcmVudC5jcmVhdGVDb21wb25lbnQodGhpcy5tb2RlbCwgQ29tcGFyaXNvbkNoYXJ0LCBgZGl2LmpzLXRleHQtY29tcGFyZS0ke3ZhbHVlLmZpZWxkfWAsIHtyZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXMsIGRhdGE6IHtjb21wYXJpc29uOiBpbml0aWFsQ29tcGFyZSwgZmllbGQ6IHZhbHVlLmZpZWxkfX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBhcmlzb25zLnB1c2goY29tcGFyaXNvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCguLi50aGlzLmNvbXBhcmlzb25zKTtcblxuICAgICAgICAvL3RoZW4gZWl0aGVyIHJldHVybiB0aGUgcHJlbmRlcmVkIERPTSBlbGVtZW50IG9yIGNyZWF0ZSBpdCwgYXBwZW5kaW5nIHRoZSBET00gZWxlbWVudHMgZnJvbSB0aGUgY29tcGFyaXNvbnMgaW5zdGFudGlhdGVkIGFib3ZlIFxuXG4gICAgICAgIC8vY29udGFpbmVyXG4gICAgICAgIHZhciB2aWV3ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIC8vdGhpcy5jaGlsZHJlbiA9IFtdOyBhbHJlYWR5IHNldCBhcyBwYXJ0IG9mIGNyZWF0ZUNvbXBvbmVudCBtZXRob2RcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldzsgLy8gaWYgcHJlcmVuZGVyZWQgYW5kIG5vIG5lZWQgdG8gcmVuZGVyIChubyBkYXRhIG1pc21hdGNoKVxuICAgICAgICB9XG4gICAgICAgIHZhciBjb21wb3VuZEluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5tb2RlbC5ncm91cHMuZm9yRWFjaCgoZ3JvdXAsIGkpID0+IHtcbiAgICAgICAgICAgIHZhciBncm91cERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZ3JvdXBEaXYuY2xhc3NMaXN0LmFkZChzW2dyb3VwLmNsZWFuU3RyaW5nKCldKTtcbiAgICAgICAgICAgIGdyb3VwRGl2Lmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGA8aDMgY2xhc3M9XCIke3MuZ3JvdXBIZWFkZXJ9XCI+JHtncm91cH08L2gzPmApO1xuICAgICAgICAgICAgdmFyIHR5cGVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHR5cGVDb250YWluZXIuY2xhc3NMaXN0LmFkZChzLnR5cGVDb250YWluZXIsIHNbZ3JvdXAuY2xlYW5TdHJpbmcoKV0pO1xuICAgICAgICAgICAgdGhpcy5tb2RlbC50eXBlc05lc3RlZFtpXS52YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsgXG4gICAgICAgICAgICAgICAgdHlwZURpdi5jbGFzc0xpc3QuYWRkKHMudHlwZURpdiwgc1t2YWx1ZS5maWVsZF0pO1xuICAgICAgICAgICAgICAgIHR5cGVEaXYuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgYDxoNCBjbGFzcz1cIiR7cy50eXBlSGVhZGVyfSAkeyB2YWx1ZS50b29sdGlwID8gcy53aXRoVG9vbHRpcCA6ICd3aXRob3V0VG9vbHRpcCcgfVwiIGRhdGEtdGlwcHktY29udGVudD1cIiR7dmFsdWUudG9vbHRpcCB8fCAnJ31cIj4ke3ZhbHVlLmxhYmVsfTwvaDQ+YCk7XG4gICAgICAgICAgICAgICAgdHlwZURpdi5hcHBlbmRDaGlsZCh0aGlzLmNvbXBhcmlzb25zW2NvbXBvdW5kSW5kZXhdLmVsKTtcbiAgICAgICAgICAgICAgICBjb21wb3VuZEluZGV4Kys7XG4gICAgICAgICAgICAgICAgdHlwZUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0eXBlRGl2KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBncm91cERpdi5hcHBlbmRDaGlsZCh0eXBlQ29udGFpbmVyKTtcbiAgICAgICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQoZ3JvdXBEaXYpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplQXV0b2NvbXBsZXRlcygpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVUb29sdGlwcygpO1xuICAgICAgICBQUy5zZXRTdWJzKFtcbiAgICAgICAgICAgIFsnY29tcGFyZScsIChtc2csZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKG1zZywgZGF0YSk7ICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICB9XVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZVRvb2x0aXBzKCl7XG4gICAgICAgIHZhciBlbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMud2l0aFRvb2x0aXApO1xuICAgICAgICB0aXBweShlbHMpXG4gICAgICAgICAgICBcbiAgICB9XG4gICAgdXBkYXRlKG1zZyxkYXRhKXtcbiAgICAgICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgICAgIHRoaXMuY29tcGFyaXNvbnMuZm9yRWFjaChjb21wYXJpc29uID0+IHtcbiAgICAgICAgICAgIGNvbXBhcmlzb24udXBkYXRlKG1zZywgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0aWFsaXplQXV0b2NvbXBsZXRlcygpe1xuICAgICAgICB2YXIgc3JjID0gdGhpcy5tb2RlbC5kYXRhLm1hcChkID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZC5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogZC5jb2RlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAga2V5ID0gJ3N0YXRlJztcblxuICAgICAgICBjb25zb2xlLmxvZyhzcmMpO1xuICAgICAgICBbMCwxXS5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb21wYXJlLWlucHV0LScgKyBpbmRleCksXG4gICAgICAgICAgICAgICAgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhdXRvQ29tcGxldGVfd3JhcHBlci0nICsgaW5kZXgpO1xuICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnYXV0b0NvbXBsZXRlJywgc1snYXV0b0NvbXBsZXRlJyArIGluZGV4XSk7XG4gICAgICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoc1snYXV0b0NvbXBsZXRlX3dyYXBwZXItJyArIGluZGV4XSk7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IEF1dG9Db21wbGV0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJyNjb21wYXJlLWlucHV0LScgKyBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VIb2xkZXI6ICdTZWxlY3Qgc3RhdGUnLFxuICAgICAgICAgICAgICAgICAgICAvL3RocmVzaG9sZDogMCwgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaW4uIENoYXJzIGxlbmd0aCB0byBzdGFydCBFbmdpbmUgfCAoT3B0aW9uYWwpXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaEVuZ2luZTogXCJzdHJpY3RcIiwgICAgICAgICAgICAgIC8vIFNlYXJjaCBFbmdpbmUgdHlwZS9tb2RlICAgICAgICAgICB8IChPcHRpb25hbClcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c0xpc3Q6IHsgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbmRlcmVkIHJlc3VsdHMgbGlzdCBvYmplY3QgICAgICB8IChPcHRpb25hbClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogKCkgPT4gJ2F1dG9Db21wbGV0ZV9yZXN1bHRzX2xpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb21wYXJlLWlucHV0LScgKyBpbmRleCksXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2FmdGVyZW5kJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHQ6IHRydWUsICAgICAgICAgICAgICAgICAgICAgICAvLyBIaWdobGlnaHQgbWF0Y2hpbmcgcmVzdWx0cyAgICAgIHwgKE9wdGlvbmFsKVxuICAgICAgICAgICAgICAgICAgICAvL21heFJlc3VsdHM6IDUsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1heC4gbnVtYmVyIG9mIHJlbmRlcmVkIHJlc3VsdHMgfCAoT3B0aW9uYWwpXG4gICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0aW9uOiBmZWVkYmFjayA9PiB7ICAgICAgICAgICAgIC8vIEFjdGlvbiBzY3JpcHQgb25TZWxlY3Rpb24gZXZlbnQgfCAoT3B0aW9uYWwpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmZWVkYmFjaywgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCdjb21wYXJlLicgKyBpbmRleCwgZmVlZGJhY2suc2VsZWN0aW9uLmNvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCBmZWVkYmFjay5zZWxlY3Rpb24uc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3BsYWNlSG9sZGVyJywgdGhpcy5tb2RlbC5kYXRhLmZpbmQoZCA9PiBkLmNvZGUgPT09IGluaXRpYWxDb21wYXJlW2luZGV4XSkuc3RhdGUpO1xuICAgICAgICAgICAgLy9pbnB1dC52YWx1ZSA9IHRoaXMubW9kZWwuZGF0YS5maW5kKGQgPT4gZC5jb2RlID09PSBpbml0aWFsQ29tcGFyZVtpbmRleF0pLnN0YXRlO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5jaGlsZHJlbik7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCB7IERyb3Bkb3duIH0gZnJvbSAnQFVJL2lucHV0cy9pbnB1dHMuanMnO1xuaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaGlzRHJvcGRvd24gZXh0ZW5kcyBEcm9wZG93biB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIG9wdGlvbnMpe1xuICAgICAgICB2YXIgX2RhdGEgPSBbXTtcbiAgICAgICAgdmFyIGRyb3Bkb3duVHlwZSA9IG9wdGlvbnMuZGF0YS50eXBlO1xuICAgICAgICBvcHRpb25zLmRhdGEuZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgLyppZiAoIGRyb3Bkb3duVHlwZSA9PT0gJ2hpZ2hsaWdodCcgKXsgLy8gdHJhbnNmb3JtIHN0YXRlIGRhdGEgaW50byBmb3JtIERyb3Bkb3duIGNhbiB1c2VcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkKTtcbiAgICAgICAgICAgICAgICBfZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGQuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZC5zdGF0ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWUgZC50eXBlIGlzIGZpZWxkIG9yIGdyb3VwICovXG4gICAgICAgICAgICAgICAgX2RhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpc05hTigrZC5sYWJlbCkgPyBkLmxhYmVsIDogJ0NyZWRpdCByYXRpbmcgJyArIGQubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBkLmlzRGVmYXVsdFNlbGVjdGlvbiA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgLy8gICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgb3B0aW9ucy5kYXRhID0gX2RhdGEuc29ydChmdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICAgICAgICAgIHJldHVybiBhLm5hbWUgPCBiLm5hbWUgPyAtMSA6IGEubmFtZSA+IGIubmFtZSA/IDEgOiBhLm5hbWUgPj0gYi5uYW1lID8gMCA6IE5hTjtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICggZHJvcGRvd25UeXBlID09PSAnZ3JvdXAnICl7XG4gICAgICAgICAgICBvcHRpb25zLmRhdGEudW5zaGlmdCh7dmFsdWU6IG51bGwsIG5hbWU6ICfigJQgTm9uZSDigJQnLCBzZWxlY3RlZDogdHJ1ZX0pO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZHJvcGRvd25UeXBlID0gZHJvcGRvd25UeXBlO1xuICAgIH1cbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIGRyb3Bkb3duID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGRyb3Bkb3duOyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cbiAgICAgICAgZHJvcGRvd24uY2xhc3NMaXN0LmFkZChzLmRyb3Bkb3duKTtcbiAgICAgICAgLy9kcm9wZG93bi5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBkcm9wZG93bjtcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICBzdXBlci5pbml0KCk7XG4gICAgICAgIC8qY29uc29sZS5sb2coJ2luaXQgZHJvcGRvd24nLCB0aGlzKTtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBlID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUsIHRoaXMpO1xuICAgICAgICAgICAgUy5zZXRTdGF0ZSh0aGlzLmRyb3Bkb3duVHlwZSwgZS50YXJnZXQudmFsdWUpO1xuICAgICAgICB9KTsqL1xuICAgIH1cbiAgICBvbkNoYW5nZSgpe1xuICAgICAgICBTLnNldFN0YXRlKHRoaXMuZHJvcGRvd25UeXBlLCB0aGlzLnNlbGVjdGVkT3B0aW9uLmRhdGFzZXQudmFsdWUpO1xuICAgIH1cbiAgICBcbn0iLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCBUaGlzRHJvcGRvd24gZnJvbSAnQFByb2plY3QvY29tcG9uZW50cy9kcm9wZG93bic7XG5pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdGlvbnMgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgIC8vY29udGFpbmVyXG4gICAgICAgIHZhciB2aWV3ID0gc3VwZXIucHJlcmVuZGVyKCksXG4gICAgICAgICAgICBkcm9wZG93bkRhdGEgPSBbIC8vIFRPRE86IHNvdHIgZm4gbmVlZHMgdG8gYmUgRFJZZXIsIGFkZCB0byB1dGlscyBBcnJheS5wcm90b3R5cGUuc29ydEFzY2VuZGluZyBvciBzdFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnU2VsZWN0IGZpZWxkOicsXG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5tb2RlbC50eXBlcy5maWx0ZXIodCA9PiB0LnR5cGUgIT09ICd0ZXh0JyksIFxuICAgICAgICAgICAgICAgIHR5cGU6ICdmaWVsZCdcbiAgICAgICAgICAgIH0se1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnR3JvdXAgYnk6JywgLy8gQUdIRyBUT0RPOiBkbyB0aGUgc29ydCB1bmRlciB0aGUgY29tcG5lbnRcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLm1vZGVsLnR5cGVzLmZpbHRlcih0ID0+IHQudHlwZSA9PT0gJ3RleHQnKSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnZ3JvdXAnXG4gICAgICAgICAgICB9Lyose1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnSGlnaGxpZ2h0OicsXG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5tb2RlbC5kYXRhLm1hcChkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBkLmNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZC5zdGF0ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdHlwZTogJ2hpZ2hsaWdodCdcbiAgICAgICAgICAgIH0qL1xuICAgICAgICBdO1xuICAgICAgICB0aGlzLmRyb3Bkb3ducyA9IFtdO1xuICAgICAgICBkcm9wZG93bkRhdGEuZm9yRWFjaChkID0+IHtcbiAgICAgICAgICAgIHRoaXMuZHJvcGRvd25zLnB1c2godGhpcy5wYXJlbnQucGFyZW50LmNyZWF0ZUNvbXBvbmVudCh0aGlzLm1vZGVsLCBUaGlzRHJvcGRvd24sIGBkaXYuanMtZHJvcGRvd24tJHtkLmxhYmVsLmNsZWFuU3RyaW5nKCl9YCwge3BhcmVudDogdGhpcywgZGF0YTogZH0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCguLi50aGlzLmRyb3Bkb3ducyk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXc7IC8vIGlmIHByZXJlbmRlcmVkIGFuZCBubyBuZWVkIHRvIHJlbmRlciAobm8gZGF0YSBtaXNtYXRjaClcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkcm9wZG93bldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZHJvcGRvd25XcmFwcGVyLmNsYXNzTGlzdC5hZGQocy5kcm9wZG93bldyYXBwZXIpO1xuICAgICAgICBkcm9wZG93bkRhdGEuZm9yRWFjaCgoZCxpKSA9PiB7XG4gICAgICAgICAgICB2YXIgZHJvcGRvd25Jbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAgICAgICAgIGRyb3Bkb3duT3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpLFxuICAgICAgICAgICAgICAgIGRyb3Bkb3duID0gdGhpcy5kcm9wZG93bnNbaV07XG4gICAgICAgICAgICBkcm9wZG93bk91dGVyLmNsYXNzTGlzdC5hZGQocy5kcm9wZG93bk91dGVyKTtcbiAgICAgICAgICAgIGRyb3Bkb3duT3V0ZXIuaW5uZXJUZXh0ID0gZC5sYWJlbDtcbiAgICAgICAgICAgIGRyb3Bkb3duSW5uZXIuY2xhc3NMaXN0LmFkZChzLmRyb3Bkb3duSW5uZXIpO1xuICAgICAgICAgICAgZHJvcGRvd25Jbm5lci5hcHBlbmRDaGlsZChkcm9wZG93bi5lbCk7XG4gICAgICAgICAgICBkcm9wZG93bk91dGVyLmFwcGVuZENoaWxkKGRyb3Bkb3duSW5uZXIpO1xuICAgICAgICAgICAgZHJvcGRvd25XcmFwcGVyLmFwcGVuZENoaWxkKGRyb3Bkb3duT3V0ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmlldy5hcHBlbmRDaGlsZChkcm9wZG93bldyYXBwZXIpO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHZpZXcuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgXG4gICAgICAgICAgICA8ZGl2IGlkPVwiZXhwbGFpbmVyLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZmllbGQtZXhwbGFpbmVyXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImdyb3VwLWV4cGxhaW5lclwiPjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiJHtzLmxhYmVsfSAke3MubGFiZWxTb3J0fSBmbGV4XCI+PHNwYW4+U29ydCBieTo8L3NwYW4+IDxzcGFuPjxhIGNsYXNzPVwiJHtzLnNvcnRCeX0gJHtzLnNvcnRBY3RpdmV9XCIgZGF0YS1zb3J0PVwiYWxwaGFcIiBocmVmPVwiI1wiPkHigJNaPC9hPiB8IDxhIGNsYXNzPVwiJHtzLnNvcnRCeX1cIiBkYXRhLXNvcnQ9XCJhc2NcIiBocmVmPVwiI1wiPkxvd+KAk0hpZ2g8L2E+IHwgPGEgY2xhc3M9XCIke3Muc29ydEJ5fVwiIGRhdGEtc29ydD1cImRlc2NcIiBocmVmPVwiI1wiPkhpZ2jigJNMb3c8L2E+PC9zcGFuPjwvcD5cbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cIiR7cy5sYWJlbH0gJHtzLmxhYmVsSGlnaGxpZ2h0fVwiPlNlbGVjdCBhIHN0YXRlIHRvIGhpZ2hsaWdodCB8IDxhIGlkPVwiY2xlYXItYWxsLWhpZ2hsaWdodFwiIGhyZWY9XCIjXCI+Q2xlYXIgYWxsPC9hPjwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgKTtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgIGNoaWxkLmluaXQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5zb3J0QnkpLmZvckVhY2goZWFjaCA9PiB7XG4gICAgICAgICAgICBlYWNoLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLnNvcnRBY3RpdmUpLmNsYXNzTGlzdC5yZW1vdmUocy5zb3J0QWN0aXZlKTtcbiAgICAgICAgICAgICAgICBlYWNoLmNsYXNzTGlzdC5hZGQocy5zb3J0QWN0aXZlKTtcbiAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCdzb3J0JywgZWFjaC5kYXRhc2V0LnNvcnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCIvKmVzbGludCBuby11bnVzZWQtdmFyczogW1wiZXJyb3JcIiwgeyBcInZhcnNJZ25vcmVQYXR0ZXJuXCI6IFwiYXNjZW5kaW5nfGRlc2NlbmRpbmdcIiB9XSAqL1xuXG5pbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzLWNvbGxlY3Rpb24nO1xuaW1wb3J0IEJhciBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2Jhcic7XG5pbXBvcnQgU2VsZWN0aW9ucyBmcm9tICcuL3NlbGVjdGlvbnMnO1xuaW1wb3J0IFBTIGZyb20gJ3B1YnN1Yi1zZXR0ZXInO1xuXG4vLyBwYXJ0aWFsc1xuaW1wb3J0IGNlbnRyYWxpemF0aW9uIGZyb20gJ0BQcm9qZWN0L3BhcnRpYWxzL2NlbnRyYWxpemF0aW9uLm1kJztcbmltcG9ydCBjcmVkaXQyMDE1IGZyb20gJ0BQcm9qZWN0L3BhcnRpYWxzL2NyZWRpdC1yYXRpbmcubWQnO1xuaW1wb3J0IGNyZWRpdDIwMTggZnJvbSAnQFByb2plY3QvcGFydGlhbHMvY3JlZGl0LXJhdGluZy5tZCc7XG5pbXBvcnQgZGVidF9saW1pdF90eXBlIGZyb20gJ0BQcm9qZWN0L3BhcnRpYWxzL2RlYnQtbGltaXQubWQnO1xuaW1wb3J0IGRlYnRfcGVyX2NhcGl0YSBmcm9tICdAUHJvamVjdC9wYXJ0aWFscy9kZWJ0LXBlci1jYXBpdGEubWQnO1xuaW1wb3J0IGRlYnRfcGVyY2VudF9TUEkgZnJvbSAnQFByb2plY3QvcGFydGlhbHMvZGVidC1zcGkubWQnO1xuaW1wb3J0IHRlbl95ZWFyX3BvcF9ncm93dGggZnJvbSAnQFByb2plY3QvcGFydGlhbHMvcG9wdWxhdGlvbi1ncm93dGgubWQnO1xuaW1wb3J0IHJldmVudWVfdm9sYXRpbGl0eSBmcm9tICdAUHJvamVjdC9wYXJ0aWFscy9yZXZlbnVlLXZvbGF0aWxpdHkubWQnO1xuaW1wb3J0IHN0YXRlX2xvY2FsX2RpdmlzaW9uIGZyb20gJ0BQcm9qZWN0L3BhcnRpYWxzL3N0YXRlLWxvY2FsLm1kJztcblxuZnVuY3Rpb24gYXNjZW5kaW5nKGtleSA9IG51bGwpIHtcbiAgICByZXR1cm4ga2V5ID09PSBudWxsID8gXG4gICAgICAgIGZ1bmN0aW9uKGEsYil7XG4gICAgICAgICAgICBhID0gYSA9PT0gJ04vQScgPyAnIScgOiBhOyAvLyB0aGlzIGVuc3VyZXMgbi9hIGlzIGFsd2F5cyBmaXJzdFxuICAgICAgICAgICAgYiA9IGIgPT09ICdOL0EnID8gJyEnIDogYjtcbiAgICAgICAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbiAgICAgICAgfSA6XG4gICAgICAgIGZ1bmN0aW9uKGEsYil7XG4gICAgICAgICAgICByZXR1cm4gYVtrZXldIDwgYltrZXldID8gLTEgOiBhW2tleV0gPiBiW2tleV0gPyAxIDogYVtrZXldID49IGJba2V5XSA/IDAgOiBOYU47XG4gICAgICAgIH1cbn1cbmZ1bmN0aW9uIGRlc2NlbmRpbmcoa2V5ID0gbnVsbCkge1xuICAgIHJldHVybiBrZXkgPT09IG51bGwgPyBcbiAgICAgICAgZnVuY3Rpb24oYSxiKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGEgPCBiID8gMSA6IGEgPiBiID8gLTEgOiBhID49IGIgPyAwIDogTmFOO1xuICAgICAgICB9IDpcbiAgICAgICAgZnVuY3Rpb24oYSxiKXtcbiAgICAgICAgICAgIHJldHVybiBhW2tleV0gPCBiW2tleV0gPyAxIDogYVtrZXldID4gYltrZXldID8gLTEgOiBhW2tleV0gPj0gYltrZXldID8gMCA6IE5hTjtcbiAgICAgICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlmdHlTdGF0ZVZpZXcgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgIC8vY29udGFpbmVyXG4gICAgICAgIHZhciB2aWV3ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIHRoaXMuZmllbGQgPSAnZGVidF9wZXJjZW50X1NQSSc7XG4gICAgICAgIHRoaXMuYmFycyA9IFtdO1xuICAgICAgICB0aGlzLmJhckNvbnRhaW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5sYXN0UG9zaXRpb25zID0ge307XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRCYXJzID0ge307XG4gICAgICAgIHRoaXMuZXhwbGFpbmVyVGV4dCA9IHtcbiAgICAgICAgICAgIGNlbnRyYWxpemF0aW9uLFxuICAgICAgICAgICAgY3JlZGl0MjAxNSxcbiAgICAgICAgICAgIGNyZWRpdDIwMTgsXG4gICAgICAgICAgICBkZWJ0X2xpbWl0X3R5cGUsXG4gICAgICAgICAgICBkZWJ0X3Blcl9jYXBpdGEsXG4gICAgICAgICAgICBkZWJ0X3BlcmNlbnRfU1BJLFxuICAgICAgICAgICAgdGVuX3llYXJfcG9wX2dyb3d0aCxcbiAgICAgICAgICAgIHJldmVudWVfdm9sYXRpbGl0eSxcbiAgICAgICAgICAgIHN0YXRlX2xvY2FsX2RpdmlzaW9uXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ3JvdXBCeUZuID0gdGhpcy5ncm91cEJ5ICE9PSBudWxsID8gZCA9PiBkW3RoaXMuZ3JvdXBCeV0gOiBkID0+IGQgIT09IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IHRoaXMucGFyZW50LmNyZWF0ZUNvbXBvbmVudCh0aGlzLm1vZGVsLCBTZWxlY3Rpb25zLCBgZGl2LmpzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnNgLCB7cGFyZW50OiB0aGlzfSk7XG4gICAgICAgIHRoaXMuc29ydFZhbHVlS2V5ID0gJ3N0YXRlJztcbiAgICAgICAgdGhpcy5zb3J0VmFsdWVzRm4gPSBhc2NlbmRpbmc7XG4gICAgICAgIHRoaXMuZ3JvdXBCeSA9ICdudWxsJztcbiAgICAgICAgdGhpcy5uZXN0RGF0YSgpOyAgICAgICAgXG4gICAgICAgIHRoaXMucHVzaEJhcnMoKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRoaXMuc2VsZWN0aW9ucywgLi4udGhpcy5iYXJzKTtcblxuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3OyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMucmVuZGVyU2VsZWN0aW9ucygpO1xuICAgICAgICB0aGlzLmV4cGxhaW5lcldyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZXhwbGFpbmVyLXdyYXBwZXInKTtcbiAgICAgICAgdGhpcy5maWVsZEV4cGxhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaWVsZC1leHBsYWluZXInKTtcbiAgICAgICAgdGhpcy5ncm91cEV4cGxhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNncm91cC1leHBsYWluZXInKTtcbiAgICAgICAgdGhpcy51cGRhdGVFeHBsYWluZXJUZXh0KCdmaWVsZCcsIHRoaXMuZmllbGQsIHRydWUpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGNoYXJ0cyA9IHRoaXMucmVuZGVyQ2hhcnRzKCk7XG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQoY2hhcnRzKTtcbiAgICAgICBcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIG5lc3REYXRhKCl7XG4gICAgICAgIHRoaXMubmVzdGVkRGF0YSA9IGQzLm5lc3QoKS5rZXkodGhpcy5ncm91cEJ5Rm4pLnNvcnRLZXlzKGFzY2VuZGluZygpKS5zb3J0VmFsdWVzKHRoaXMuc29ydFZhbHVlc0ZuKHRoaXMuc29ydFZhbHVlS2V5KSkuZW50cmllcyh0aGlzLm1vZGVsLmRhdGEpO1xuICAgIH1cbiAgICBwdXNoQmFycygpe1xuICAgICAgICB0aGlzLmJhcnMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5iYXJDb250YWluZXJzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgdGhpcy5uZXN0ZWREYXRhLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgICAgICAgZ3JvdXAudmFsdWVzLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXJzLnB1c2godGhpcy5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIEJhciwgYGRpdi5iYXItc3RhdGUtJHtkLmNvZGV9YCwge3BhcmVudDogdGhpcywgZGF0YToge2QsZmllbGQ6IHRoaXMuZmllbGQsIGNvbG9yOjJ9fSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFyQ29udGFpbmVycy5wdXNoKHRoaXMucGFyZW50LmNyZWF0ZUNvbXBvbmVudCh0aGlzLm1vZGVsLCBFbGVtZW50LCBgZGl2I2JhckNvbnRhaW5lci0ke2QuY29kZX1gKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7IFxuICAgICAgICBcbiAgICB9XG4gICAgcmVuZGVyU2VsZWN0aW9ucygpe1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnNlbGVjdGlvbnMuZWwpO1xuICAgIH1cbiAgICByZW5kZXJDaGFydHMoKXtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnanMtZmlmdHktY2hhcnQtY29udGFpbmVyJyk7XG5cbiAgICAgICAgdGhpcy5uZXN0ZWREYXRhLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgICAgICAgdmFyIGdyb3VwRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBncm91cERpdi5jbGFzc0xpc3QuYWRkKHMuZ3JvdXBEaXYpO1xuICAgICAgICAgICAgZ3JvdXBEaXYuaW5uZXJIVE1MID0gdGhpcy5ncm91cEJ5ICE9PSAnbnVsbCcgPyBgPGgzIGNsYXNzPVwiJHtzLmdyb3VwSGVhZGVyfVwiPiR7dGhpcy5tb2RlbC5kaWN0W3RoaXMuZ3JvdXBCeV0gIT09IHVuZGVmaW5lZCA/IHRoaXMubW9kZWwuZGljdFt0aGlzLmdyb3VwQnldW2dyb3VwLmtleV0gOiBncm91cC5rZXl9PC9oMz5gIDogJyc7XG4gICAgICAgICAgICBncm91cC52YWx1ZXMuZm9yRWFjaChkID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgYmFyQ29udGFpbmVyID0gdGhpcy5iYXJDb250YWluZXJzW2luZGV4XS5lbDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChzLmJhckNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLmhpZ2hsaWdodGVkQmFyc1tiYXJDb250YWluZXIuaWRdICkge1xuICAgICAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChzLmlzSGlnaGxpZ2h0ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZChzLmJhckxhYmVsKTtcbiAgICAgICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSBkLnN0YXRlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJhckNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuYmFyc1tpbmRleF0uZWwpO1xuICAgICAgICAgICAgICAgIGdyb3VwRGl2LmFwcGVuZENoaWxkKGJhckNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGdyb3VwRGl2KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG4gICAgaW52ZXJ0UG9zaXRpb25zKCl7XG4gICAgICAgIHRoaXMuYmFyQ29udGFpbmVycy5mb3JFYWNoKGJhckNvbnRhaW5lciA9PiB7XG4gICAgICAgICAgICB2YXIgbGFzdFBvc2l0aW9uID0gYmFyQ29udGFpbmVyLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICAgIGRlbHRhWSA9IHRoaXMuZmlyc3RQb3NpdGlvbnNbYmFyQ29udGFpbmVyLmVsLmlkXS50b3AgLSBsYXN0UG9zaXRpb24udG9wO1xuICAgICAgICAgICAgYmFyQ29udGFpbmVyLmVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwJztcbiAgICAgICAgICAgIGJhckNvbnRhaW5lci5lbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWSgke2RlbHRhWX1weClgO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpeyAvLyB0cmFuc2l0aW9uIHdvbid0IGhhcHBlbiB3L28gdGhlIHNldHRpbWVvdXQgdHJpY2tcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzAuOHMnO1xuICAgICAgICAgICAgICAgIGJhckNvbnRhaW5lci5lbC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgwKSc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cblxuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIFBTLnNldFN1YnMoW1xuICAgICAgICAgICAgWydmaWVsZCcsIChtc2csZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQmFycyhtc2csZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFeHBsYWluZXJUZXh0KG1zZyxkYXRhKTtcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgWydncm91cCcsIChtc2csZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlR3JvdXBzKG1zZyxkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUV4cGxhaW5lclRleHQobXNnLGRhdGEpO1xuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBbJ3NvcnQnLCAobXNnLGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRCYXJzKG1zZyxkYXRhKTtcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgWydyZXNpemUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGp1c3RFeHBsYWluZXJUZXh0SGVpZ2h0KCk7XG4gICAgICAgICAgICB9XVxuICAgICAgICBdKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgICAgICBjaGlsZC5pbml0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV4cGxhaW5lcldyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZXhwbGFpbmVyLXdyYXBwZXInKTtcbiAgICAgICAgdGhpcy5maWVsZEV4cGxhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaWVsZC1leHBsYWluZXInKTtcbiAgICAgICAgdGhpcy5ncm91cEV4cGxhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNncm91cC1leHBsYWluZXInKTtcbiAgICAgICAgdGhpcy5pbml0SGlnaGxpZ2h0QmFycygpO1xuICAgICAgICB0aGlzLmluaXRDbGVhckFsbEhpZ2hsaWdodHMoKTtcbiAgICB9XG4gICAgdXBkYXRlRXhwbGFpbmVyVGV4dChtc2csZGF0YSwgY2FsbGVkRnJvbVByZXJlbmRlcil7XG4gICAgICAgIHZhciBlbCxcbiAgICAgICAgICAgIGNvbnRlbnQ7XG4gICAgICAgIGlmICggbXNnID09PSAnZmllbGQnICkge1xuICAgICAgICAgICAgdGhpcy5maWVsZCA9IGRhdGE7IC8vIHNvIHRoYXQgdGhlIG9yZGVyIG9mIHN1YnMgZG9lc24ndCBtYXR0ZXJcbiAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLmV4cGxhaW5lclRleHRbdGhpcy5maWVsZF0gfHwgJyc7XG4gICAgICAgICAgICBlbCA9IHRoaXMuZmllbGRFeHBsYWluZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBtc2cgPT09ICdncm91cCcgKXtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBCeSA9IGRhdGE7IC8vIHNvIHRoYXQgdGhlIG9yZGVyIG9mIHN1YnMgZG9lc24ndCBtYXR0ZXJcbiAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLmV4cGxhaW5lclRleHRbdGhpcy5ncm91cEJ5XSB8fCAnJztcbiAgICAgICAgICAgIGVsID0gdGhpcy5ncm91cEV4cGxhaW5lcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoICFjYWxsZWRGcm9tUHJlcmVuZGVyICkge1xuICAgICAgICAgICAgdGhpcy5leHBsYWluZXJXcmFwcGVyLnN0eWxlLmhlaWdodCA9IHRoaXMuZXhwbGFpbmVyV3JhcHBlci5vZmZzZXRIZWlnaHQgKyAncHgnOyAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbC5mYWRlSW5Db250ZW50KGNvbnRlbnQpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGp1c3RFeHBsYWluZXJUZXh0SGVpZ2h0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGp1c3RFeHBsYWluZXJUZXh0SGVpZ2h0KCl7XG4gICAgICAgIHZhciBpbm5lckhlaWdodCA9IFt0aGlzLmZpZWxkRXhwbGFpbmVyLCB0aGlzLmdyb3VwRXhwbGFpbmVyXS5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICAgICAgICB2YXIgZWwgPSBjdXIucXVlcnlTZWxlY3RvcigncCcpO1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGVzID0gZWwgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjdXIucXVlcnlTZWxlY3RvcigncCcpKSA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gY29tcHV0ZWRTdHlsZXMgPyArYWNjICsgZWwub2Zmc2V0SGVpZ2h0ICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZXNbJ21hcmdpbi10b3AnXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlc1snbWFyZ2luLWJvdHRvbSddKSA6ICthY2M7XG4gICAgICAgIH0sMCk7XG4gICAgICAgIHRoaXMuZXhwbGFpbmVyV3JhcHBlci5zdHlsZS5oZWlnaHQgPSBpbm5lckhlaWdodCArICdweCc7XG4gICAgfVxuICAgIGluaXRIaWdobGlnaHRCYXJzKCl7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5iYXJDb250YWluZXIpLmZvckVhY2goYmFyQ29udGFpbmVyID0+IHtcbiAgICAgICAgICAgIGJhckNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodGVkQmFyc1tiYXJDb250YWluZXIuaWRdID0gIXRoaXMuaGlnaGxpZ2h0ZWRCYXJzW2JhckNvbnRhaW5lci5pZF07XG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUocy5pc0hpZ2hsaWdodGVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5pdENsZWFyQWxsSGlnaGxpZ2h0cygpe1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2xlYXItYWxsLWhpZ2hsaWdodCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5iYXJDb250YWluZXIpLmZvckVhY2goYmFyQ29udGFpbmVyID0+IHtcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShzLmlzSGlnaGxpZ2h0ZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRCYXJzID0ge307XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZUJhcnMobXNnLGRhdGEpe1xuICAgICAgICB0aGlzLmZpZWxkID0gZGF0YTtcbiAgICAgICAgdGhpcy5iYXJzLmZvckVhY2goYmFyID0+IHtcbiAgICAgICAgICAgIGJhci5kYXRhLmZpZWxkID0gZGF0YTtcbiAgICAgICAgICAgIGJhci51cGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc29ydFZhbHVlS2V5KTtcbiAgICAgICAgaWYgKCB0aGlzLnNvcnRWYWx1ZUtleSAhPT0gJ3N0YXRlJyApe1xuICAgICAgICAgICAgdGhpcy5zb3J0VmFsdWVLZXkgPSBkYXRhO1xuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLkZMSVAuYmluZCh0aGlzKSw1MDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlY29yZEZpcnN0UG9zaXRpb25zKCl7XG4gICAgICAgIHRoaXMuZmlyc3RQb3NpdGlvbnMgPSB0aGlzLmJhckNvbnRhaW5lcnMucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhY2NbY3VyLmVsLmlkXSA9IGN1ci5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0se30pO1xuICAgICAgICBcbiAgICB9XG4gICAgRkxJUCgpe1xuICAgICAgICB0aGlzLnJlY29yZEZpcnN0UG9zaXRpb25zKCk7XG4gICAgICAgIHRoaXMubmVzdERhdGEoKTtcbiAgICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPSAnJzsgXG4gICAgICAgIHRoaXMucHVzaEJhcnMoKTsgICAgICAgIFxuICAgICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKHRoaXMucmVuZGVyQ2hhcnRzKCkpO1xuICAgICAgICB0aGlzLmluaXRIaWdobGlnaHRCYXJzKCk7XG4gICAgICAgIHRoaXMuaW52ZXJ0UG9zaXRpb25zKCk7XG4gICAgfVxuICAgIHVwZGF0ZUdyb3Vwcyhtc2csIGRhdGEpe1xuICAgICAgICB0aGlzLmdyb3VwQnkgPSBkYXRhO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmdyb3VwQnkpO1xuICAgICAgICB0aGlzLkZMSVAoKTtcbiAgICB9XG4gICAgc29ydEJhcnMobXNnLCBkYXRhKXtcbiAgICAgICAgdGhpcy5zb3J0VmFsdWVLZXkgPSBkYXRhID09PSAnYWxwaGEnID8gJ3N0YXRlJyA6IHRoaXMuZmllbGQ7XG4gICAgICAgIHRoaXMuc29ydFZhbHVlc0ZuID0gZGF0YSA9PT0gJ2Rlc2MnID8gZGVzY2VuZGluZyA6IGFzY2VuZGluZztcbiAgICAgICAgdGhpcy5GTElQKCk7ICAgIFxuICAgIH1cbiAgICBcbn0iLCIvKiBnbG9iYWwgUFVCTElDUEFUSCBwcm9jZXNzIG1vZHVsZSAqL1xuLy91dGlsc1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMtY29sbGVjdGlvbic7XG5pbXBvcnQgUGFwYSBmcm9tICdwYXBhcGFyc2UnO1xuaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuLy9pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG5pbXBvcnQgeyBwdWJsaXNoV2luZG93UmVzaXplIH0gZnJvbSAnQFV0aWxzJztcblxuLy9kYXRhICggQ1NWcyBsb2FkZWQgYnkgZmlsZS1sb2FkZXIgZm9yIHVzZSBieSBQYXBhcGFyc2UgYXQgYnVpbGQgYW5kIHJ1bnRpbWUuIHRoYXQncyBzZXQgaW4gd2VicGFjay5jb21tb24uanMgKVxuaW1wb3J0IGRhdGEgZnJvbSAnLi9kYXRhL2RhdGEuY3N2JztcbmltcG9ydCBncm91cHMgZnJvbSAnLi9kYXRhL2dyb3Vwcy5qc29uJztcbmltcG9ydCB0eXBlcyBmcm9tICcuL2RhdGEvdHlwZXMuanNvbic7XG5pbXBvcnQgZGljdCBmcm9tICcuL2RhdGEvZGljdGlvbmFyeS5qc29uJztcblxuLy92aWV3c1xuaW1wb3J0IENvbXBhcmlzb25WaWV3IGZyb20gJy4vdmlld3Mvc3RhdGUtY29tcGFyaXNvbi8nO1xuaW1wb3J0IEZpZnR5U3RhdGVWaWV3IGZyb20gJy4vdmlld3MvZmlmdHktc3RhdGUvJztcblxuLy8gYXBwIHByb3RvdHlwZVxuaW1wb3J0IFBDVEFwcCBmcm9tICdAQXBwJztcblxuLy9zdGF0aWMgY29udGVudFxuaW1wb3J0IHNlY3Rpb25zIGZyb20gJy4vcGFydGlhbHMvc2VjdGlvbnMuaHRtbCc7XG5pbXBvcnQgZm9vdGVyIGZyb20gJy4vcGFydGlhbHMvZm9vdGVyLmh0bWwnO1xuXG5wdWJsaXNoV2luZG93UmVzaXplKFMpO1xuXG5jb25zdCBtb2RlbCA9IHtcbiAgICBncm91cHMsXG4gICAgdHlwZXMsXG4gICAgZGljdFxufTtcblxuY29uc3Qgdmlld3MgPSBbXTtcblxuZnVuY3Rpb24gZ2V0UnVudGltZURhdGEoKXtcbiAgICB2YXIgcHVibGljUGF0aCA9ICcnO1xuICAgIGlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiAhd2luZG93LklTX1BSRVJFTkRFUklORyApeyAvLyBwcm9kdWN0aW9uIGJ1aWxkIG5lZWRzIHRvIGtub3cgdGhlIHB1YmxpYyBwYXRoIG9mIGFzc2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgZGV2IGFuZCBwcmV2aWV3LCBhc3NldHMgYXJlIGEgY2hpbGQgb2Ygcm9vdDsgZm9yIGJ1aWxkIHRoZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJlIGluIHNvbWUgZGlzdGFudCBwYXRoIG9uIHNpdGVjb3JlXG4gICAgICAgIHB1YmxpY1BhdGggPSBQVUJMSUNQQVRIOyAvLyBUT0RPOiBzZXQgUFVCTElDUEFUSCB1c2luZyBkZWZpbmUgcGx1Z2luIGluIHdlYnBhY2suYnVpbGQuanNcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdmFyIGFwcENvbnRhaW5lciA9IHRoaXMuZWw7XG4gICAgICAgIFBhcGEucGFyc2UocHVibGljUGF0aCArIGRhdGEsIHtcbiAgICAgICAgICAgIGRvd25sb2FkOiB0cnVlLFxuICAgICAgICAgICAgZHluYW1pY1R5cGluZzogdHJ1ZSxcbiAgICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICAgIGZhc3RNb2RlOiB0cnVlLCAvLyBubyBzdHJpbmcgZXNjYXBlc1xuICAgICAgICAgICAgc2tpcEVtcHR5TGluZXM6IHRydWUsXG4gICAgICAgICAgICBiZWZvcmVGaXJzdENodW5rKGNodW5rKXsgLy8gb24gcHJlcmVuZGVyLCBkbyBzaW1wbGUgaGFzaCBvZiBDU1YgY29udGVudHMgYW5kIGFwcGVuZCBhcyBhdHRyaWJ1dGUgb2YgdGhlIGFwcCBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhdCBydW50aW1lLCBkbyBzYW1lIGhhc2ggb2YgY3N2IGNvbnRlbnRzIGFuZCBjb21wYXJlIHRvIG9yaWdpbmFsLiBpZiBoYXNoZXMgbWF0Y2gsIGFwcCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29udGludWUgbm9ybWFsbHkuIGlmIG1pc21hdGNoZWQsIGFwcCB3aWxsIHJlcmVuZGVyIGFsbCBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSBuZXcgZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGFsbG93cyBmb3IgYGhvdGAgdXBkYXRpbmcgb2YgdGhlIG1haW4gZGF0YSBmaWxlIHdpdGhvdXQgcmVidWlsZGluZyB0aGUgZGlzdC8gZm9sZGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGBtb2RlbC5pc01pc21hdGNoYCB3aWxsIGJlIHNldCB0byBgdHJ1ZWAgYW5kIHRoZSBwcmVyZW5kZXJpbmcgZnVuY3Rpb25zIHdpbGwgY2hlY2sgdGhhdCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCByZXNwb25kIGFjY29yZGluZ2x5XG5cbiAgICAgICAgICAgICAgICB2YXIgZGF0YUhhc2ggPSBjaHVuay5oYXNoQ29kZSgpOyAvLyBoYXNoQ29kZSBpcyBoZWxwZXIgZnVuY3Rpb24gZnJvbSB1dGlscywgaW1wb3J0ZWQgYW5kIElJRkUnZCBpbiBpbmRleC5qc1xuICAgICAgICAgICAgICAgIGlmICggd2luZG93LklTX1BSRVJFTkRFUklORyApe1xuICAgICAgICAgICAgICAgICAgICBhcHBDb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLWRhdGEtaGFzaCcsIGRhdGFIYXNoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2RldmVsb3BtZW50JyAmJiBkYXRhSGFzaC50b1N0cmluZygpICE9PSBhcHBDb250YWluZXIuZ2V0QXR0cmlidXRlKCdkYXRhLWRhdGEtaGFzaCcpICl7XG4gICAgICAgICAgICAgICAgICAgIGFwcENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1taXNtYXRjaCcsdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkYXRhIG1pc21hdGNoJyk7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmlzTWlzbWF0Y2hlZCA9IHRydWU7IC8vIHNldCBzbyB0aGF0IGNvbXBvbmVudHMgY2FuIGFjY2VzcyB0aGlzIHZhbHVlIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wbGV0ZTogcmVzcG9uc2UgPT4geyAvLyBhcnJvdyBmdW5jdGlvbiBoZXJlIHRvIGtlZXAgYHRoaXNgIGNvbnRleHQgYXMgU3RhdGVEZWJ0XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmlld3MubGVuZ3RoID0gMDsgIC8vIEhFUkUgWU9VIE5FRUQgVE8gTkVTVCBCWSBVU0lORyBUSEUgVEhFIEdST1VQIFRIQVQgVEhFIFZBTFVFIE1BUFMgVE9cbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgLyogY29tcGxldGUgbW9kZWwgYmFzZWQgb24gZmV0Y2hlZCBkYXRhICovXG4gICAgICAgICAgICAgICAgbW9kZWwuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgbW9kZWwudHlwZXMuZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0eXBlLnR5cGUgIT09ICd0ZXh0Jyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YUFycmF5ID0gZGF0YS5tYXAoZCA9PiBkW3R5cGUuZmllbGRdKS5maWx0ZXIoZCA9PiBkICE9PSBudWxsKTsgXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLm1heCA9IE1hdGgubWF4KC4uLmRhdGFBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLm1pbiA9IE1hdGgubWluKC4uLmRhdGFBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLnNwcmVhZCA9IHR5cGUubWF4IC0gdHlwZS5taW4gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbW9kZWwudHlwZXNOZXN0ZWQgPSBkMy5uZXN0KCkua2V5KGQgPT4gZC5ncm91cCkuZW50cmllcyhtb2RlbC50eXBlcyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobW9kZWwpO1xuICAgICAgICAgICAgICAgIC8vIC4uLi5cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8qIHB1c2ggdmlld3Mgbm93IHRoYXQgbW9kZWwgaXMgY29tcGxldGUgKi9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2aWV3cy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudChtb2RlbCwgQ29tcGFyaXNvblZpZXcsICdkaXYjY29tcGFyaXNvbi12aWV3Jywge3JlbmRlclRvU2VsZWN0b3I6ICcjc2VjdGlvbi1jb21wYXJpc29uIC5qcy1pbm5lci1jb250ZW50JywgcmVyZW5kZXJPbkRhdGFNaXNtYXRjaDogdHJ1ZSwgcGFyZW50OiB0aGlzfSksICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQobW9kZWwsIEZpZnR5U3RhdGVWaWV3LCAnZGl2I2ZpZnR5LXN0YXRlLXZpZXcnLCB7cmVuZGVyVG9TZWxlY3RvcjogJyNzZWN0aW9uLXN0YXRlcyAuanMtaW5uZXItY29udGVudCcsIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IHRydWUsIHBhcmVudDogdGhpc30pICBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGVEZWJ0IGV4dGVuZHMgUENUQXBwIHtcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgY29uc29sZS5sb2coJ3ByZXJlbmRlcicpO1xuICAgICAgICB0aGlzLmVsLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgc2VjdGlvbnMpO1xuICAgICAgICB0aGlzLmVsLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgZm9vdGVyKTtcbiAgICAgICAgLy90aGlzLndhc1ByZXJlbmRlcmVkID0gZmFsc2U7XG4gICAgICAgIGdldFJ1bnRpbWVEYXRhLmNhbGwodGhpcykudGhlbigoKSA9PiB7IC8vIGJpbmQgU3RhdGVEZWJ0IGFzIGNvbnRleHQgYHRoaXNgIGZvciBnZXRSdW50aW1lRGF0YSBzbyB0aGF0IGl0IGNhbiBhY2NlZXNzIHRoaXMuZWwsIGV0Y1xuICAgICAgICAgICAgY29uc29sZS5sb2cobW9kZWwpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2aWV3cy5mb3JFYWNoKHZpZXcgPT4ge1xuICAgICAgICAgICAgICAgIHZpZXcuY29udGFpbmVyLmFwcGVuZENoaWxkKHZpZXcuZWwpOyAvLyBkaWZmZXJlbnQgaGVyZSBmcm9tIENhcGVUb3duOiB2aWV3cyBhcmVuJ3QgYXBwZW5kZWQgdG8gYXBwIGNvbnRhaW5lcjsgc29tZSBzdGF0aWMgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyBwcmVzZW50IGFscmVhZHkuIHZpZXdzIGFwcGVuZGVkIHRvICp0aGVpciogY29udGFpbmVyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvL3RoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3JlbmRlcmVkJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbml0Jyk7XG4gICAgICAgIHN1cGVyLmluaXQoKTtcbiAgICAgICAgdGhpcy5hdHRhY2hTZWN0aW9uT3BlbkNsb3NlKCk7XG4gICAgICAgIGdldFJ1bnRpbWVEYXRhLmNhbGwodGhpcykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB2aWV3cy5mb3JFYWNoKHZpZXcgPT4ge1xuICAgICAgICAgICAgICAgdmlldy5pbml0KHRoaXMpOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICBpZiAoIG1vZHVsZS5ob3QgKXtcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KCcuL3ZpZXdzL3N0YXRlLWNvbXBhcmlzb24nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2FjY2VwdCEnLCBhcmd1bWVudHMsIHRoYXQpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWN0aW9uLWNvbXBhcmlzb24gLmpzLWlubmVyLWNvbnRlbnQnKS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSB0aGF0LmNyZWF0ZUNvbXBvbmVudChtb2RlbCwgQ29tcGFyaXNvblZpZXcsICdkaXYjY29tcGFyaXNvbi12aWV3Jywge3JlbmRlclRvU2VsZWN0b3I6ICcjc2VjdGlvbi1jb21wYXJpc29uIC5qcy1pbm5lci1jb250ZW50JywgcmVyZW5kZXJPbkRhdGFNaXNtYXRjaDogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudC5jb250YWluZXIuYXBwZW5kQ2hpbGQocmVwbGFjZW1lbnQuZWwpO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhdHRhY2hTZWN0aW9uT3BlbkNsb3NlKCl7XG4gICAgICAgIGZ1bmN0aW9uIHRvZ2dsZVNlY3Rpb24oKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmpzLWlubmVyLWNvbnRlbnQnKS5jbGFzc0xpc3QudG9nZ2xlKCdwY3QtaGlkZScpO1xuICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QudG9nZ2xlKCdwY3QtaXMtY2xvc2VkJyk7XG4gICAgICAgICAgICB0aGlzLmJsdXIoKTtcbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcGV3LWFwcCBzZWN0aW9uID4gaDInKS5mb3JFYWNoKGhlYWRpbmcgPT4ge1xuICAgICAgICAgICAgaGVhZGluZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZVNlY3Rpb24pO1xuICAgICAgICAgICAgaGVhZGluZy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzKXtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlU2VjdGlvbi5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiLyogZ2xvYmFsIHByb2Nlc3MgKi9cbi8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwidmFyc0lnbm9yZVBhdHRlcm5cIjogXCJTdHJpbmdIZWxwZXJzfEZhZGVJblRleHRcIiB9XSovIC8vYWxsb3cgU3RyaW5nSGVscGVycyB0byBiZSBpcG9ydGVkIChkZWZpbmVkKSBhbmQgbm90IGJlaW5nIGV4cGxpY2l0bHkgY2FsbGVkXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIHdpdGhvdXQgdHJpZ2dlcmluZyBlc2xpbnQgZXJyb3JcbmltcG9ydCB7IFN0cmluZ0hlbHBlcnMsIEZhZGVJblRleHQgfSBmcm9tICdAVXRpbHMnOyAvLyBzdHJpbmcgaGVscGVycyBpcyBhbiBJSUZFXG5pbXBvcnQgU3RhdGVEZWJ0IGZyb20gJy4vc3RhdGUtZGVidC5qcyc7XG5pbXBvcnQgJy4vY3NzL3N0eWxlcy5zY3NzJztcblxuXG5jb25zdCBjb250YWluZXIgPSAnI3Bldy1hcHAnO1xuY29uc3QgQXBwID0gbmV3IFN0YXRlRGVidChjb250YWluZXIsIHsgLy8gU3RhdGVEZWJ0IGV4dGVuZHMgUENUQXBwLWpzLiBQQ1RBcHAtanMncyBjb25zdHJ1Y3RvciBtZXRob2QgaXMgY2FsbGVkLCBwMSBjb250YWl1bmVyLCBwMiBvcHRpb25zXG5cdG5lZWRzUm91dGVyOiBmYWxzZVxufSk7XG5pZiAoIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnIHx8IHdpbmRvdy5JU19QUkVSRU5ERVJJTkcgKXsgLy8gcHJvY2VzcyBkZXZlbG9wbWVudCBtZWFucyB1c2luZyBXZWJQYWNrIGRldiBzZXJ2ZXIuIHdpbmRvdyBpcyBwcmVyZW5kZXJpbmcgbWVhbnMgaW5cblx0QXBwLnByZXJlbmRlcigpO1xufVxuQXBwLmluaXQoKTsiXSwic291cmNlUm9vdCI6IiJ9
!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GTMPush=function(e){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:e})},t.publishWindowResize=function(e){var t;window.addEventListener("resize",function(){t||(t=setTimeout(function(){e.setState("resize",document.documentElement.clientWidth),t=null},350))},!1)};t.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(e,t){var n=this,r=t||0;return t&&(this.style.transition="opacity "+t+"s ease-in-out"),new Promise(function(t){var o=window.getComputedStyle(n).getPropertyValue("transition-duration")||r,i=1e3*parseFloat(o);n.fadeOutContent(),setTimeout(function(){n.innerHTML=e,n.classList.remove("no-opacity"),t(!0)},i)})})),t.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(e,t){if(this.length<=e)return this;var n=this.substr(0,e-1);return(t?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var e,t=0;if(0===this.length)return t;for(e=0;e<this.length;e++)t=(t<<5)-t+this.charCodeAt(e),t|=0;return t})),t.DOMHelpers={c:function(e){if(-1!==e.indexOf(".")||-1!==e.indexOf("#")){var t=e.match(/\.([^#.]*)/g)||[],n=e.match(/#([^.]*)/),r=e.match(/^([^.#]+)/),o=document.createElement(r[0]);return t.forEach(function(e){o.classList.add(e.replace(".",""))}),null!==n&&o.setAttribute("id",n[1]),o}return document.createElement(e)},q:function(e){return document.querySelector(e)},qa:function(e){return document.querySelectorAll(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0);var i=function(){function e(t,n){var r=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"!=typeof t)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=t,this.model=n.model,this.parent=n.parent,this.renderToSelector=n.renderToSelector,this.container=o.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.el=this.prerender(arguments),this.isReady=new Promise(function(e,t){r.resolve=e,r.reject=t})}return r(e,[{key:"prerender",value:function(){var e=o.DOMHelpers.q(this.selector);return e&&!this.rerender?(this.prerendered=!0,e):e?(e.innerHTML="",e):o.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),e}();t.default=i},function(e,t,n){const r=n(3),o={};function i(){console.log(o)}Array.prototype.compare=Array.prototype.compare||function(e){if(this.length!=e.length)return!1;if(0===this.length&&0===e.length)return!0;console.log("in compare"),console.log(this);for(var t=0;t<e.length;t++)if(this[t]!==e[t])return!1;return!0},t.stateModule={logState:i,getState:function(e){return void 0!==o[e]?o[e][0]:void 0},getPreviousState:function(e){return void 0!==o[e]&&void 0!==o[e][1]?o[e][1]:void 0},setState:function(e,t){void 0===o[e]?(o[e]=[t],r.publish(e,t),i()):("string"==typeof t||"number"==typeof t?o[e][0]!==t:!Array.isArray(t)||!Array.isArray(o[e][0])||!t.compare(o[e][0]))&&(o[e].unshift(t),r.publish(e,t),i(),o[e].length>2&&(o[e].length=2))}}},function(e,t,n){(function(e){!function(n,r){"use strict";var o={};n.PubSub=o;var i=n.define;!function(e){var t={},n=-1;function r(e){var t;for(t in e)if(e.hasOwnProperty(t))return!0;return!1}function o(e,t,n){try{e(t,n)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function i(e,t,n){e(t,n)}function a(e,n,r,a){var s,l=t[n],p=a?i:o;if(t.hasOwnProperty(n))for(s in l)l.hasOwnProperty(s)&&p(l[s],e,r)}function s(e,n,o,i){var s=function(e,t,n){return function(){var r=String(e),o=r.lastIndexOf(".");for(a(e,e,t,n);-1!==o;)r=r.substr(0,o),o=r.lastIndexOf("."),a(e,r,t,n)}}(e="symbol"==typeof e?e.toString():e,n,i),l=function(e){var n=String(e),o=Boolean(t.hasOwnProperty(n)&&r(t[n])),i=n.lastIndexOf(".");for(;!o&&-1!==i;)n=n.substr(0,i),i=n.lastIndexOf("."),o=Boolean(t.hasOwnProperty(n)&&r(t[n]));return o}(e);return!!l&&(!0===o?s():setTimeout(s,0),!0)}e.publish=function(t,n){return s(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return s(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,r){if("function"!=typeof r)return!1;e="symbol"==typeof e?e.toString():e,t.hasOwnProperty(e)||(t[e]={});var o="uid_"+String(++n);return t[e][o]=r,o},e.subscribeOnce=function(t,n){var r=e.subscribe(t,function(){e.unsubscribe(r),n.apply(this,arguments)});return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)t.hasOwnProperty(n)&&0===n.indexOf(e)&&delete t[n]},e.unsubscribe=function(n){var r,o,i,a="string"==typeof n&&(t.hasOwnProperty(n)||function(e){var n;for(n in t)if(t.hasOwnProperty(n)&&0===n.indexOf(e))return!0;return!1}(n)),s=!a&&"string"==typeof n,l="function"==typeof n,p=!1;if(!a){for(r in t)if(t.hasOwnProperty(r)){if(o=t[r],s&&o[n]){delete o[n],p=n;break}if(l)for(i in o)o.hasOwnProperty(i)&&o[i]===n&&(delete o[i],p=!0)}return p}e.clearSubscriptions(n)}}(o),"function"==typeof i&&i.amd?i(function(){return o}):(void 0!==e&&e.exports&&(t=e.exports=o),t.PubSub=o,e.exports=t=o)}("object"==typeof window&&window||this)}).call(this,n(14)(e))},function(e,t,n){e.exports={compareColor1:"src-components-comparison--compareColor1",compareColor2:"src-components-comparison--compareColor2",chartContainer:"src-components-comparison--chartContainer",chartLabel:"src-components-comparison--chartLabel",chartLabelText:"src-components-comparison--chartLabelText",chartLabel1:"src-components-comparison--chartLabel1",chartLabel2:"src-components-comparison--chartLabel2",barContainer:"src-components-comparison--barContainer",barContainer1:"src-components-comparison--barContainer1",barContainer2:"src-components-comparison--barContainer2",dataLabel:"src-components-comparison--dataLabel"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r};var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),o(t,[{key:"prerender",value:function(){var e=this,n=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.matches=[],this.matches[0]=this.model.data.find(function(t){return t.code===e.data.comparison[0]}),this.matches[1]=this.model.data.find(function(t){return t.code===e.data.comparison[1]}),this.prerendered&&this.rerender,n}},{key:"update",value:function(e,t){this.matches[e]=this.model.data.find(function(e){return e.code===t})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(26)),i=a(n(1));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,[{key:"prerender",value:function(){var e=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(e.classList.add(o.default.bar,o.default["barColor"+this.data.color]),e.style.transform="translateX("+("FiftyStateView"===this.parent.name?100*this.placeZero(this.data.field)+"%":0)+") scaleX("+this.linearScale(this.data.d,this.data.field)+")",e)}},{key:"linearScale",value:function(e,t){var n=this.model.types.find(function(e){return e.field===t}),r="FiftyStateView"!==this.parent.name&&"percent"===n.type?e[t]/1:(e[t]-n.min)/n.spread,o=this.placeZero(t),i=n.crossesZero||"FiftyStateView"!==this.parent.name&&"percent"===n.type?0:.01;return"FiftyStateView"!==this.parent.name?i+r*(1-i):i+r*(1-i)-o}},{key:"placeZero",value:function(e){var t=this.model.types.find(function(t){return t.field===e}),n=(0-t.min)/t.spread;return n>0?n:0}},{key:"checkIfZero",value:function(e){this.el=this.el||document.querySelector(".js-bar-compare-"+this.data.field+"-"+e),0===this.data.d[this.data.field]?this.el.parentNode.classList.add(o.default.isZero):this.el.parentNode.classList.remove(o.default.isZero)}},{key:"update",value:function(e){var t=this;this.el=this.el||document.querySelector(".js-bar-compare-"+this.data.field+"-"+e),this.checkIfZero(e),window.requestAnimationFrame(function(){t.el.style.transform="translateX("+("FiftyStateView"===t.parent.name?100*t.placeZero(t.data.field)+"%":0)+") scaleX("+t.linearScale(t.data.d,t.data.field)+")"})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatValue=function(e,t){var n,r=this.model.types.find(function(e){return e.field===t}),o=r.type,i=void 0!==r.decimals?r.decimals:"number"===o?1:"currency"===o?2:"percent"===o?1:void 0,a=e[t];switch(o){case"number":n=a.toLocaleString("en-US",{minimumFractionDigits:i});break;case"currency":n=0===i?Math.round(a).toLocaleString("en-US",{style:o,currency:"USD"}).slice(0,-3):a.toLocaleString("en-US",{style:o,currency:"USD"});break;case"percent":n=a.toLocaleString("en-US",{style:o,minimumFractionDigits:i});break;default:n="[unformatted]"+a}return n}},function(e,t,n){var r=n(28),o=n(3),i={};function a(e,t){var n=r(t.toString());return{token:"sub"+r(e+t),fn:n}}e.exports={logSubs:function(){console.log(i)},setSubs:function(e){e.forEach(function(e){var t=e[0],n=e[1],r=a(t,n);if(void 0===i[r.fn]&&(i[r.fn]={}),void 0!==i[r.fn][t])throw"Subscription token is already in use.";i[r.fn][t]=o.subscribe(t,n)})},cancelSub:function(e,t){var n=a(e,t);if(void 0===i[n.fn]||void 0===i[n.fn][e])throw"Subscription does not exist.";o.unsubscribe(i[n.fn][e]),delete i[n.fn][e],0===Object.keys(i[n.fn]).length&&delete i[n.fn]}}},function(e,t,n){"use strict";n.r(t);function r(){}function o(e,t){var n=new r;if(e instanceof r)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var o,i=-1,a=e.length;if(null==t)for(;++i<a;)n.set(i,e[i]);else for(;++i<a;)n.set(t(o=e[i],i,e),o)}else if(e)for(var s in e)n.set(s,e[s]);return n}r.prototype=o.prototype={constructor:r,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var i=o,a=function(){var e,t,n,r=[],o=[];function a(n,o,s,l){if(o>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var p,c,u,d=-1,f=n.length,h=r[o++],m=i(),v=s();++d<f;)(u=m.get(p=h(c=n[d])+""))?u.push(c):m.set(p,[c]);return m.each(function(e,t){l(v,t,a(e,o,s,l))}),v}return n={object:function(e){return a(e,0,s,l)},map:function(e){return a(e,0,p,c)},entries:function(e){return function e(n,i){if(++i>r.length)return n;var a,s=o[i-1];return null!=t&&i>=r.length?a=n.entries():(a=[],n.each(function(t,n){a.push({key:n,values:e(t,i)})})),null!=s?a.sort(function(e,t){return s(e.key,t.key)}):a}(a(e,0,p,c),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return o[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function s(){return{}}function l(e,t,n){e[t]=n}function p(){return i()}function c(e,t,n){e.set(t,n)}function u(){}var d=i.prototype;function f(e,t){var n=new u;if(e instanceof u)e.each(function(e){n.add(e)});else if(e){var r=-1,o=e.length;if(null==t)for(;++r<o;)n.add(e[r]);else for(;++r<o;)n.add(t(e[r],r,e))}return n}u.prototype=f.prototype={constructor:u,has:d.has,add:function(e){return this["$"+(e+="")]=e,this},remove:d.remove,clear:d.clear,values:d.keys,size:d.size,empty:d.empty,each:d.each};var h=f,m=function(e){var t=[];for(var n in e)t.push(n);return t},v=function(e){var t=[];for(var n in e)t.push(e[n]);return t},y=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t};n.d(t,"nest",function(){return a}),n.d(t,"set",function(){return h}),n.d(t,"map",function(){return i}),n.d(t,"keys",function(){return m}),n.d(t,"values",function(){return v}),n.d(t,"entries",function(){return y})},function(e,t,n){"use strict";(function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.7
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],o=0,i=0;i<r.length;i+=1)if(n&&navigator.userAgent.indexOf(r[i])>=0){o=1;break}var a=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},o))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function l(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function p(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=l(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:c(p(e))}var u=n&&!(!window.MSInputMethodContext||!document.documentMode),d=n&&/MSIE 10/.test(navigator.userAgent);function f(e){return 11===e?u:10===e?d:u||d}function h(e){if(!e)return document.documentElement;for(var t=f(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===l(n,"position")?h(n):n:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function v(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,i=document.createRange();i.setStart(r,0),i.setEnd(o,0);var a,s,l=i.commonAncestorContainer;if(e!==l&&t!==l||r.contains(o))return"BODY"===(s=(a=l).nodeName)||"HTML"!==s&&h(a.firstElementChild)!==a?h(l):l;var p=m(e);return p.host?v(p.host,t):v(e,m(t).host)}function y(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function b(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function g(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],f(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function w(e){var t=e.body,n=e.documentElement,r=f(10)&&getComputedStyle(n);return{height:g("Height",t,n,r),width:g("Width",t,n,r)}}var _=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},x=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),k=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function O(e){return S({},e,{right:e.left+e.width,bottom:e.top+e.height})}function C(e){var t={};try{if(f(10)){t=e.getBoundingClientRect();var n=y(e,"top"),r=y(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},i="HTML"===e.nodeName?w(e.ownerDocument):{},a=i.width||e.clientWidth||o.right-o.left,s=i.height||e.clientHeight||o.bottom-o.top,p=e.offsetWidth-a,c=e.offsetHeight-s;if(p||c){var u=l(e);p-=b(u,"x"),c-=b(u,"y"),o.width-=p,o.height-=c}return O(o)}function E(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=f(10),o="HTML"===t.nodeName,i=C(e),a=C(t),s=c(e),p=l(t),u=parseFloat(p.borderTopWidth,10),d=parseFloat(p.borderLeftWidth,10);n&&o&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var h=O({top:i.top-a.top-u,left:i.left-a.left-d,width:i.width,height:i.height});if(h.marginTop=0,h.marginLeft=0,!r&&o){var m=parseFloat(p.marginTop,10),v=parseFloat(p.marginLeft,10);h.top-=u-m,h.bottom-=u-m,h.left-=d-v,h.right-=d-v,h.marginTop=m,h.marginLeft=v}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=y(t,"top"),o=y(t,"left"),i=n?-1:1;return e.top+=r*i,e.bottom+=r*i,e.left+=o*i,e.right+=o*i,e}(h,t)),h}function T(e){if(!e||!e.parentElement||f())return document.documentElement;for(var t=e.parentElement;t&&"none"===l(t,"transform");)t=t.parentElement;return t||document.documentElement}function L(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i={top:0,left:0},a=o?T(e):v(e,t);if("viewport"===r)i=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=E(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),i=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:y(n),s=t?0:y(n,"left");return O({top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:o,height:i})}(a,o);else{var s=void 0;"scrollParent"===r?"BODY"===(s=c(p(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===r?e.ownerDocument.documentElement:r;var u=E(s,a,o);if("HTML"!==s.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===l(t,"position"))return!0;var r=p(t);return!!r&&e(r)}(a))i=u;else{var d=w(e.ownerDocument),f=d.height,h=d.width;i.top+=u.top-u.marginTop,i.bottom=f+u.top,i.left+=u.left-u.marginLeft,i.right=h+u.left}}var m="number"==typeof(n=n||0);return i.left+=m?n:n.left||0,i.top+=m?n:n.top||0,i.right-=m?n:n.right||0,i.bottom-=m?n:n.bottom||0,i}function A(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=L(n,r,i,o),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map(function(e){return S({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),p=l.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=p.length>0?p[0].key:l[0].key,u=e.split("-")[1];return c+(u?"-"+u:"")}function P(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return E(n,r?T(t):v(t,n),r)}function j(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function D(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function M(e,t,n){n=n.split("-")[0];var r=j(e),o={width:r.width,height:r.height},i=-1!==["right","left"].indexOf(n),a=i?"top":"left",s=i?"left":"top",l=i?"height":"width",p=i?"width":"height";return o[a]=t[a]+t[l]/2-r[l]/2,o[s]=n===s?t[s]-r[p]:t[D(s)],o}function I(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function R(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=I(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&s(n)&&(t.offsets.popper=O(t.offsets.popper),t.offsets.reference=O(t.offsets.reference),t=n(t,e))}),t}function B(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],i=o?""+o+n:e;if(void 0!==document.body.style[i])return i}return null}function N(e){var t=e.ownerDocument;return t?t.defaultView:window}function F(e,t,n,r){n.updateBound=r,N(e).addEventListener("resize",n.updateBound,{passive:!0});var o=c(e);return function e(t,n,r,o){var i="BODY"===t.nodeName,a=i?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),i||e(c(a.parentNode),n,r,o),o.push(a)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function q(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,N(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function z(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function Y(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&z(t[n])&&(r="px"),e.style[n]=t[n]+r})}var W=n&&/Firefox/i.test(navigator.userAgent);function U(e,t,n){var r=I(e,function(e){return e.name===t}),o=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!o){var i="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return o}var X=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],V=X.slice(3);function G(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=V.indexOf(e),r=V.slice(n+1).concat(V.slice(0,n));return t?r.reverse():r}var K={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Z(e,t,n,r){var o=[0,0],i=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(I(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,p=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(p=p.map(function(e,r){var o=(1===r?!i:i)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+o[1],a=o[2];if(!i)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return O(s)[t]/100*i}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i;return i}(e,o,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){z(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))})}),o}var $={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,i=o.reference,a=o.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",p=s?"width":"height",c={start:k({},l,i[l]),end:k({},l,i[l]+i[p]-a[p])};e.offsets.popper=S({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,o=e.offsets,i=o.popper,a=o.reference,s=r.split("-")[0],l=void 0;return l=z(+n)?[+n,0]:Z(n,i,a,s),"left"===s?(i.top+=l[0],i.left-=l[1]):"right"===s?(i.top+=l[0],i.left+=l[1]):"top"===s?(i.left+=l[0],i.top-=l[1]):"bottom"===s&&(i.left+=l[0],i.top+=l[1]),e.popper=i,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||h(e.instance.popper);e.instance.reference===n&&(n=h(n));var r=H("transform"),o=e.instance.popper.style,i=o.top,a=o.left,s=o[r];o.top="",o.left="",o[r]="";var l=L(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=i,o.left=a,o[r]=s,t.boundaries=l;var p=t.priority,c=e.offsets.popper,u={primary:function(e){var n=c[e];return c[e]<l[e]&&!t.escapeWithReference&&(n=Math.max(c[e],l[e])),k({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>l[e]&&!t.escapeWithReference&&(r=Math.min(c[n],l[e]-("right"===e?c.width:c.height))),k({},n,r)}};return p.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=S({},c,u[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),s=a?"right":"bottom",l=a?"left":"top",p=a?"width":"height";return n[s]<i(r[l])&&(e.offsets.popper[l]=i(r[l])-n[p]),n[l]>i(r[s])&&(e.offsets.popper[l]=i(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!U(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],i=e.offsets,a=i.popper,s=i.reference,p=-1!==["left","right"].indexOf(o),c=p?"height":"width",u=p?"Top":"Left",d=u.toLowerCase(),f=p?"left":"top",h=p?"bottom":"right",m=j(r)[c];s[h]-m<a[d]&&(e.offsets.popper[d]-=a[d]-(s[h]-m)),s[d]+m>a[h]&&(e.offsets.popper[d]+=s[d]+m-a[h]),e.offsets.popper=O(e.offsets.popper);var v=s[d]+s[c]/2-m/2,y=l(e.instance.popper),b=parseFloat(y["margin"+u],10),g=parseFloat(y["border"+u+"Width"],10),w=v-e.offsets.popper[d]-b-g;return w=Math.max(Math.min(a[c]-m,w),0),e.arrowElement=r,e.offsets.arrow=(k(n={},d,Math.round(w)),k(n,f,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(B(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=L(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=D(r),i=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case K.FLIP:a=[r,o];break;case K.CLOCKWISE:a=G(r);break;case K.COUNTERCLOCKWISE:a=G(r,!0);break;default:a=t.behavior}return a.forEach(function(s,l){if(r!==s||a.length===l+1)return e;r=e.placement.split("-")[0],o=D(r);var p=e.offsets.popper,c=e.offsets.reference,u=Math.floor,d="left"===r&&u(p.right)>u(c.left)||"right"===r&&u(p.left)<u(c.right)||"top"===r&&u(p.bottom)>u(c.top)||"bottom"===r&&u(p.top)<u(c.bottom),f=u(p.left)<u(n.left),h=u(p.right)>u(n.right),m=u(p.top)<u(n.top),v=u(p.bottom)>u(n.bottom),y="left"===r&&f||"right"===r&&h||"top"===r&&m||"bottom"===r&&v,b=-1!==["top","bottom"].indexOf(r),g=!!t.flipVariations&&(b&&"start"===i&&f||b&&"end"===i&&h||!b&&"start"===i&&m||!b&&"end"===i&&v);(d||y||g)&&(e.flipped=!0,(d||y)&&(r=a[l+1]),g&&(i=function(e){return"end"===e?"start":"start"===e?"end":e}(i)),e.placement=r+(i?"-"+i:""),e.offsets.popper=S({},e.offsets.popper,M(e.instance.popper,e.offsets.reference,e.placement)),e=R(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,i=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return o[a?"left":"top"]=i[n]-(s?o[a?"width":"height"]:0),e.placement=D(t),e.offsets.popper=O(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!U(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=I(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,i=I(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==i?i:t.gpuAcceleration,s=h(e.instance.popper),l=C(s),p={position:o.position},c=function(e,t){var n=e.offsets,r=n.popper,o=n.reference,i=Math.round,a=Math.floor,s=function(e){return e},l=i(o.width),p=i(r.width),c=-1!==["left","right"].indexOf(e.placement),u=-1!==e.placement.indexOf("-"),d=t?c||u||l%2==p%2?i:a:s,f=t?i:s;return{left:d(l%2==1&&p%2==1&&!u&&t?r.left-1:r.left),top:f(r.top),bottom:f(r.bottom),right:d(r.right)}}(e,window.devicePixelRatio<2||!W),u="bottom"===n?"top":"bottom",d="right"===r?"left":"right",f=H("transform"),m=void 0,v=void 0;if(v="bottom"===u?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-l.height+c.bottom:c.top,m="right"===d?"HTML"===s.nodeName?-s.clientWidth+c.right:-l.width+c.right:c.left,a&&f)p[f]="translate3d("+m+"px, "+v+"px, 0)",p[u]=0,p[d]=0,p.willChange="transform";else{var y="bottom"===u?-1:1,b="right"===d?-1:1;p[u]=v*y,p[d]=m*b,p.willChange=u+", "+d}var g={"x-placement":e.placement};return e.attributes=S({},g,e.attributes),e.styles=S({},p,e.styles),e.arrowStyles=S({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return Y(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&Y(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var i=P(o,t,e,n.positionFixed),a=A(n.placement,i,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),Y(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},J=function(){function e(t,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};_(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=a(this.update.bind(this)),this.options=S({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(S({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){r.options.modifiers[t]=S({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return S({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}return x(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=P(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=A(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=M(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=R(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,B(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return q.call(this)}}]),e}();J.Utils=("undefined"!=typeof window?window:e).PopperUtils,J.placements=X,J.Defaults=$,t.a=J}).call(this,n(30))},function(e,t,n){"use strict";n(0);var r,o=n(12),i=(r=o)&&r.__esModule?r:{default:r};n(43);var a=new i.default("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&a.prerender(),a.init()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(9)),i=b(n(13)),a=n(2),s=n(0),l=b(n(15)),p=b(n(16)),c=b(n(17)),u=b(n(18)),d=b(n(19)),f=b(n(20)),h=b(n(31)),m=b(n(39)),v=b(n(41)),y=b(n(42));function b(e){return e&&e.__esModule?e:{default:e}}function g(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(0,s.publishWindowResize)(a.stateModule),l.default.polyfill();var w={groups:c.default,types:u.default,dict:d.default},_=[],x=0;function k(){var e=this;return new Promise(function(t,n){var r=e.el;i.default.parse(""+p.default,{download:!0,dynamicTyping:!0,header:!0,fastMode:!0,skipEmptyLines:!0,beforeFirstChunk:function(e){var t=e.hashCode();window.IS_PRERENDERING?r.setAttribute("data-data-hash",t):t.toString()!==r.getAttribute("data-data-hash")&&(r.setAttribute("data-data-mismatch",!0),console.log("data mismatch"),w.isMismatched=!0)},complete:function(n){_.length=0;var r=n.data;w.data=r,w.types.forEach(function(e){if("text"!==e.type){var t=r.map(function(t){return t[e.field]}).filter(function(e){return null!==e});e.max=Math.max.apply(Math,g(t)),e.min=Math.min.apply(Math,g(t)),e.spread=e.max-e.min,e.crossesZero=e.max*e.min<=0}}),w.typesNested=o.nest().key(function(e){return e.group}).entries(w.types),console.log(w),_.push(e.createComponent(w,f.default,"div#comparison-view",{renderToSelector:"#section-comparison .js-inner-content",rerenderOnDataMismatch:!0,parent:e}),e.createComponent(w,h.default,"div#fifty-state-view",{renderToSelector:"#fifty-state-container",rerenderOnDataMismatch:!0,parent:e})),t(!0)},error:function(e){n(e)}})})}var S=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,m.default),r(t,[{key:"prerender",value:function(){console.log("prerender"),this.el.insertAdjacentHTML("beforeend",v.default),this.el.insertAdjacentHTML("beforeend",y.default),k.call(this).then(function(){console.log(w),_.forEach(function(e){e.container.appendChild(e.el)})})}},{key:"init",value:function(){var e=this;console.log("init"),function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this),this.attachSectionOpenClose(),this.initStaticAnchorLinks(),k.call(this).then(function(){_.forEach(function(t){t.init(e)})})}},{key:"initStaticAnchorLinks",value:function(){document.querySelectorAll(".pct-static-anchor").forEach(function(e){var t=document.querySelector("#"+e.href.split("#")[1]);e.addEventListener("click",function(e){e.preventDefault(),window.scrollTo({top:t.getBoundingClientRect().top+window.pageYOffset-120,behavior:"smooth"})})})}},{key:"attachSectionOpenClose",value:function(){function e(){console.log(this.parentNode),this.parentNode.querySelector(".js-inner-content").classList.toggle("pct-hide"),this.classList.toggle("pct-is-closed"),this.blur(),(0,s.GTMPush)("StateDebt|OpenClose|"+this.innerText)}document.querySelectorAll("#pew-app section > h2").forEach(function(t){t.addEventListener("click",e),t.addEventListener("keyup",function(t){13===t.keyCode&&e.call(this)})})}},{key:"returnMoreLink",value:function(e){function t(){window.scrollTo({top:x,behavior:"smooth"}),this.removeEventListener("click",t),this.classList.remove("showGoBack")}console.log(e);var n=document.createElement("a");"credit2015"!==e&&"credit2018"!==e||(e="credit_rating");var r=document.querySelector(".js-"+e);return n.innerText="more",n.href="#"+e,n.addEventListener("click",function(n){if(n.preventDefault(),x=window.pageYOffset,r){(0,s.GTMPush)("StateDebt|MoreLink|"+e);var o=r.getBoundingClientRect().top+x-120;window.scrollTo({top:o,behavior:"smooth"}),document.querySelectorAll(".showGoBack").forEach(function(e){e.classList.remove("showGoBack")}),r.classList.add("showGoBack"),r.addEventListener("click",t)}}),r?n:null}}]),t}();t.default=S},function(e,t,n){var r,o,i;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),o=[],void 0===(i="function"==typeof(r=function(){"use strict";var e,t,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},r=!n.document&&!!n.postMessage,o=r&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),i=!1,a={},s=0,l={parse:function(t,r){var o=(r=r||{}).dynamicTyping||!1;if(k(o)&&(r.dynamicTypingFunction=o,o={}),r.dynamicTyping=o,r.transform=!!k(r.transform)&&r.transform,r.worker&&l.WORKERS_SUPPORTED){var p=function(){if(!l.WORKERS_SUPPORTED)return!1;if(!i&&null===l.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var t=l.SCRIPT_PATH||e;t+=(-1!==t.indexOf("?")?"&":"?")+"papaworker";var r=new n.Worker(t);return r.onmessage=b,r.id=s++,a[r.id]=r}();return p.userStep=r.step,p.userChunk=r.chunk,p.userComplete=r.complete,p.userError=r.error,r.step=k(r.step),r.chunk=k(r.chunk),r.complete=k(r.complete),r.error=k(r.error),delete r.worker,void p.postMessage({input:t,config:r,workerId:p.id})}var c=null;return l.NODE_STREAM_INPUT,"string"==typeof t?c=r.download?new u(r):new f(r):!0===t.readable&&k(t.read)&&k(t.on)?c=new h(r):(n.File&&t instanceof File||t instanceof Object)&&(c=new d(r)),c.stream(t)},unparse:function(e,t){var n=!1,r=!0,o=",",i="\r\n",a='"',s=!1;"object"==typeof t&&("string"!=typeof t.delimiter||l.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(o=t.delimiter),("boolean"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(s=t.skipEmptyLines),"string"==typeof t.newline&&(i=t.newline),"string"==typeof t.quoteChar&&(a=t.quoteChar),"boolean"==typeof t.header&&(r=t.header));var p=new RegExp(v(a),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,s);if("object"==typeof e[0])return u(c(e[0]),e,s)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:c(e.data[0])),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],s);throw"exception: Unable to serialize unrecognized input";function c(e){if("object"!=typeof e)return[];var t=[];for(var n in e)t.push(n);return t}function u(e,t,n){var a="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var s=Array.isArray(e)&&0<e.length,l=!Array.isArray(t[0]);if(s&&r){for(var p=0;p<e.length;p++)0<p&&(a+=o),a+=d(e[p],p);0<t.length&&(a+=i)}for(var c=0;c<t.length;c++){var u=s?e.length:t[c].length,f=!1,h=s?0===Object.keys(t[c]).length:0===t[c].length;if(n&&!s&&(f="greedy"===n?""===t[c].join("").trim():1===t[c].length&&0===t[c][0].length),"greedy"===n&&s){for(var m=[],v=0;v<u;v++){var y=l?e[v]:v;m.push(t[c][y])}f=""===m.join("").trim()}if(!f){for(var b=0;b<u;b++){0<b&&!h&&(a+=o);var g=s&&l?e[b]:b;a+=d(t[c][g],b)}c<t.length-1&&(!n||0<u&&!h)&&(a+=i)}}return a}function d(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);e=e.toString().replace(p,a+a);var r="boolean"==typeof n&&n||Array.isArray(n)&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(-1<e.indexOf(t[n]))return!0;return!1}(e,l.BAD_DELIMITERS)||-1<e.indexOf(o)||" "===e.charAt(0)||" "===e.charAt(e.length-1);return r?a+e+a:e}}};if(l.RECORD_SEP=String.fromCharCode(30),l.UNIT_SEP=String.fromCharCode(31),l.BYTE_ORDER_MARK="\ufeff",l.BAD_DELIMITERS=["\r","\n",'"',l.BYTE_ORDER_MARK],l.WORKERS_SUPPORTED=!r&&!!n.Worker,l.SCRIPT_PATH=null,l.NODE_STREAM_INPUT=1,l.LocalChunkSize=10485760,l.RemoteChunkSize=5242880,l.DefaultDelimiter=",",l.Parser=y,l.ParserHandle=m,l.NetworkStreamer=u,l.FileStreamer=d,l.StringStreamer=f,l.ReadableStreamStreamer=h,n.jQuery){var p=n.jQuery;p.fn.parse=function(e){var t=e.config||{},r=[];return this.each(function(e){if("INPUT"!==p(this).prop("tagName").toUpperCase()||"file"!==p(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var o=0;o<this.files.length;o++)r.push({file:this.files[o],inputElem:this,instanceConfig:p.extend({},t)})}),o(),this;function o(){if(0!==r.length){var t,n,o,a=r[0];if(k(e.before)){var s=e.before(a.file,a.inputElem);if("object"==typeof s){if("abort"===s.action)return t=a.file,n=a.inputElem,o=s.reason,void(k(e.error)&&e.error({name:"AbortError"},t,n,o));if("skip"===s.action)return void i();"object"==typeof s.config&&(a.instanceConfig=p.extend(a.instanceConfig,s.config))}else if("skip"===s)return void i()}var c=a.instanceConfig.complete;a.instanceConfig.complete=function(e){k(c)&&c(e,a.file,a.inputElem),i()},l.parse(a.file,a.instanceConfig)}else k(e.complete)&&e.complete()}function i(){r.splice(0,1),o()}}}function c(e){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=_(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new m(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&k(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1;var i=this._partialLine+e;this._partialLine="";var a=this._handle.parse(i,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=a.meta.cursor;this._finished||(this._partialLine=i.substring(s-this._baseIndex),this._baseIndex=s),a&&a.data&&(this._rowCount+=a.data.length);var p=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)n.postMessage({results:a,workerId:l.WORKER_ID,finished:p});else if(k(this._config.chunk)&&!t){if(this._config.chunk(a,this._handle),this._handle.paused()||this._handle.aborted())return;a=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(a.data),this._completeResults.errors=this._completeResults.errors.concat(a.errors),this._completeResults.meta=a.meta),this._completed||!p||!k(this._config.complete)||a&&a.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),p||a&&a.meta.paused||this._nextChunk(),a}},this._sendError=function(e){k(this._config.error)?this._config.error(e):o&&this._config.error&&n.postMessage({workerId:l.WORKER_ID,error:e,finished:!1})}}function u(e){var t;(e=e||{}).chunkSize||(e.chunkSize=l.RemoteChunkSize),c.call(this,e),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),r||(t.onload=x(this._chunkLoaded,this),t.onerror=x(this._chunkError,this)),t.open("GET",this._input,!r),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var n in e)t.setRequestHeader(n,e[n])}if(this._config.chunkSize){var o=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+o),t.setRequestHeader("If-None-Match","webkit-no-cache")}try{t.send()}catch(e){this._chunkError(e.message)}r&&0===t.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var e;4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(e=t.getResponseHeader("Content-Range"))?-1:parseInt(e.substr(e.lastIndexOf("/")+1))),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(new Error(n))}}function d(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=l.LocalChunkSize),c.call(this,e);var r="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,r?((t=new FileReader).onload=x(this._chunkLoaded,this),t.onerror=x(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var o=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,o)}var i=t.readAsText(e,this._config.encoding);r||this._chunkLoaded({target:{result:i}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function f(e){var t;c.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,n=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(n)}}}function h(e){c.call(this,e=e||{});var t=[],n=!0,r=!1;this.pause=function(){c.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){c.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):n=!0},this._streamData=x(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=x(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=x(function(){this._streamCleanUp(),r=!0,this._streamData("")},this),this._streamCleanUp=x(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function m(e){var t,n,r,o=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,i=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,a=this,s=0,p=0,c=!1,u=!1,d=[],f={data:[],errors:[],meta:{}};if(k(e.step)){var h=e.step;e.step=function(t){if(f=t,g())b();else{if(b(),0===f.data.length)return;s+=t.data.length,e.preview&&s>e.preview?n.abort():h(f,a)}}}function m(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function b(){if(f&&r&&(x("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+l.DefaultDelimiter+"'"),r=!1),e.skipEmptyLines)for(var t=0;t<f.data.length;t++)m(f.data[t])&&f.data.splice(t--,1);return g()&&function(){if(f){for(var t=0;g()&&t<f.data.length;t++)for(var n=0;n<f.data[t].length;n++){var r=f.data[t][n];e.trimHeaders&&(r=r.trim()),d.push(r)}f.data.splice(0,1)}}(),function(){if(!f||!e.header&&!e.dynamicTyping&&!e.transform)return f;for(var t=0;t<f.data.length;t++){var n,r=e.header?{}:[];for(n=0;n<f.data[t].length;n++){var o=n,i=f.data[t][n];e.header&&(o=n>=d.length?"__parsed_extra":d[n]),e.transform&&(i=e.transform(i,o)),i=w(o,i),"__parsed_extra"===o?(r[o]=r[o]||[],r[o].push(i)):r[o]=i}f.data[t]=r,e.header&&(n>d.length?x("FieldMismatch","TooManyFields","Too many fields: expected "+d.length+" fields but parsed "+n,p+t):n<d.length&&x("FieldMismatch","TooFewFields","Too few fields: expected "+d.length+" fields but parsed "+n,p+t))}return e.header&&f.meta&&(f.meta.fields=d),p+=f.data.length,f}()}function g(){return e.header&&0===d.length}function w(t,n){return r=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[r]&&(e.dynamicTyping[r]=e.dynamicTypingFunction(r)),!0===(e.dynamicTyping[r]||e.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(o.test(n)?parseFloat(n):i.test(n)?new Date(n):""===n?null:n):n;var r}function x(e,t,n,r){f.errors.push({type:e,code:t,message:n,row:r})}this.parse=function(o,i,a){var s=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substr(0,1048576);var n=new RegExp(v(t)+"([^]*?)"+v(t),"gm"),r=(e=e.replace(n,"")).split("\r"),o=e.split("\n"),i=1<o.length&&o[0].length<r[0].length;if(1===r.length||i)return"\n";for(var a=0,s=0;s<r.length;s++)"\n"===r[s][0]&&a++;return a>=r.length/2?"\r\n":"\r"}(o,s)),r=!1,e.delimiter)k(e.delimiter)&&(e.delimiter=e.delimiter(o),f.meta.delimiter=e.delimiter);else{var p=function(t,n,r,o){for(var i,a,s,p=[",","\t","|",";",l.RECORD_SEP,l.UNIT_SEP],c=0;c<p.length;c++){var u=p[c],d=0,f=0,h=0;s=void 0;for(var v=new y({comments:o,delimiter:u,newline:n,preview:10}).parse(t),b=0;b<v.data.length;b++)if(r&&m(v.data[b]))h++;else{var g=v.data[b].length;f+=g,void 0!==s?1<g&&(d+=Math.abs(g-s),s=g):s=0}0<v.data.length&&(f/=v.data.length-h),(void 0===a||a<d)&&1.99<f&&(a=d,i=u)}return{successful:!!(e.delimiter=i),bestDelimiter:i}}(o,e.newline,e.skipEmptyLines,e.comments);p.successful?e.delimiter=p.bestDelimiter:(r=!0,e.delimiter=l.DefaultDelimiter),f.meta.delimiter=e.delimiter}var u=_(e);return e.preview&&e.header&&u.preview++,t=o,n=new y(u),f=n.parse(t,i,a),b(),c?{meta:{paused:!0}}:f||{meta:{paused:!1}}},this.paused=function(){return c},this.pause=function(){c=!0,n.abort(),t=t.substr(n.getCharIndex())},this.resume=function(){c=!1,a.streamer.parseChunk(t,!0)},this.aborted=function(){return u},this.abort=function(){u=!0,n.abort(),f.meta.aborted=!0,k(e.complete)&&e.complete(f),t=""}}function v(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function y(e){var t,n=(e=e||{}).delimiter,r=e.newline,o=e.comments,i=e.step,a=e.preview,s=e.fastMode,p=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(p=e.escapeChar),("string"!=typeof n||-1<l.BAD_DELIMITERS.indexOf(n))&&(n=","),o===n)throw"Comment character same as delimiter";!0===o?o="#":("string"!=typeof o||-1<l.BAD_DELIMITERS.indexOf(o))&&(o=!1),"\n"!==r&&"\r"!==r&&"\r\n"!==r&&(r="\n");var c=0,u=!1;this.parse=function(e,l,d){if("string"!=typeof e)throw"Input must be a string";var f=e.length,h=n.length,m=r.length,y=o.length,b=k(i),g=[],w=[],_=[],x=c=0;if(!e)return R();if(s||!1!==s&&-1===e.indexOf(t)){for(var S=e.split(r),O=0;O<S.length;O++){if(_=S[O],c+=_.length,O!==S.length-1)c+=r.length;else if(d)return R();if(!o||_.substr(0,y)!==o){if(b){if(g=[],j(_.split(n)),B(),u)return R()}else j(_.split(n));if(a&&a<=O)return g=g.slice(0,a),R(!0)}}return R()}for(var C,E=e.indexOf(n,c),T=e.indexOf(r,c),L=new RegExp(v(p)+v(t),"g");;)if(e[c]!==t)if(o&&0===_.length&&e.substr(c,y)===o){if(-1===T)return R();c=T+m,T=e.indexOf(r,c),E=e.indexOf(n,c)}else if(-1!==E&&(E<T||-1===T))_.push(e.substring(c,E)),c=E+h,E=e.indexOf(n,c);else{if(-1===T)break;if(_.push(e.substring(c,T)),I(T+m),b&&(B(),u))return R();if(a&&g.length>=a)return R(!0)}else for(C=c,c++;;){if(-1===(C=e.indexOf(t,C+1)))return d||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:g.length,index:c}),M();if(C===f-1)return M(e.substring(c,C).replace(L,t));if(t!==p||e[C+1]!==p){if(t===p||0===C||e[C-1]!==p){var A=D(-1===T?E:Math.min(E,T));if(e[C+1+A]===n){_.push(e.substring(c,C).replace(L,t)),c=C+1+A+h,E=e.indexOf(n,c),T=e.indexOf(r,c);break}var P=D(T);if(e.substr(C+1+P,m)===r){if(_.push(e.substring(c,C).replace(L,t)),I(C+1+P+m),E=e.indexOf(n,c),b&&(B(),u))return R();if(a&&g.length>=a)return R(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:g.length,index:c}),C++}}else C++}return M();function j(e){g.push(e),x=c}function D(t){var n=0;if(-1!==t){var r=e.substring(C+1,t);r&&""===r.trim()&&(n=r.length)}return n}function M(t){return d||(void 0===t&&(t=e.substr(c)),_.push(t),c=f,j(_),b&&B()),R()}function I(t){c=t,j(_),_=[],T=e.indexOf(r,c)}function R(e){return{data:g,errors:w,meta:{delimiter:n,linebreak:r,aborted:u,truncated:!!e,cursor:x+(l||0)}}}function B(){i(R()),g=[],w=[]}},this.abort=function(){u=!0},this.getCharIndex=function(){return c}}function b(e){var t=e.data,n=a[t.workerId],r=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var o={abort:function(){r=!0,g(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(k(n.userStep)){for(var i=0;i<t.results.data.length&&(n.userStep({data:[t.results.data[i]],errors:t.results.errors,meta:t.results.meta},o),!r);i++);delete t.results}else k(n.userChunk)&&(n.userChunk(t.results,o,t.file),delete t.results)}t.finished&&!r&&g(t.workerId,t.results)}function g(e,t){var n=a[e];k(n.userComplete)&&n.userComplete(t),n.terminate(),delete a[e]}function w(){throw"Not implemented."}function _(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var n in e)t[n]=_(e[n]);return t}function x(e,t){return function(){e.apply(t,arguments)}}function k(e){return"function"==typeof e}return o?n.onmessage=function(e){var t=e.data;if(void 0===l.WORKER_ID&&t&&(l.WORKER_ID=t.workerId),"string"==typeof t.input)n.postMessage({workerId:l.WORKER_ID,results:l.parse(t.input,t.config),finished:!0});else if(n.File&&t.input instanceof File||t.input instanceof Object){var r=l.parse(t.input,t.config);r&&n.postMessage({workerId:l.WORKER_ID,results:r,finished:!0})}}:l.WORKERS_SUPPORTED&&(t=document.getElementsByTagName("script"),e=t.length?t[t.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){i=!0},!0):i=!0),(u.prototype=Object.create(c.prototype)).constructor=u,(d.prototype=Object.create(c.prototype)).constructor=d,(f.prototype=Object.create(f.prototype)).constructor=f,(h.prototype=Object.create(c.prototype)).constructor=h,l})?r.apply(t,o):r)||(e.exports=i)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){!function(){"use strict";e.exports={polyfill:function(){var e=window,t=document;if(!("scrollBehavior"in t.documentElement.style&&!0!==e.__forceSmoothScrollPolyfill__)){var n,r=e.HTMLElement||e.Element,o=468,i={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:r.prototype.scroll||l,scrollIntoView:r.prototype.scrollIntoView},a=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,s=(n=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(n)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==p(arguments[0])?h.call(e,t.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):i.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(p(arguments[0])?i.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):h.call(e,t.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},r.prototype.scroll=r.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==p(arguments[0])){var e=arguments[0].left,t=arguments[0].top;h.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===t?this.scrollTop:~~t)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},r.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==p(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},r.prototype.scrollIntoView=function(){if(!0!==p(arguments[0])){var n=function(e){for(;e!==t.body&&!1===d(e);)e=e.parentNode||e.host;return e}(this),r=n.getBoundingClientRect(),o=this.getBoundingClientRect();n!==t.body?(h.call(this,n,n.scrollLeft+o.left-r.left,n.scrollTop+o.top-r.top),"fixed"!==e.getComputedStyle(n).position&&e.scrollBy({left:r.left,top:r.top,behavior:"smooth"})):e.scrollBy({left:o.left,top:o.top,behavior:"smooth"})}else i.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function l(e,t){this.scrollLeft=e,this.scrollTop=t}function p(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function c(e,t){return"Y"===t?e.clientHeight+s<e.scrollHeight:"X"===t?e.clientWidth+s<e.scrollWidth:void 0}function u(t,n){var r=e.getComputedStyle(t,null)["overflow"+n];return"auto"===r||"scroll"===r}function d(e){var t=c(e,"Y")&&u(e,"Y"),n=c(e,"X")&&u(e,"X");return t||n}function f(t){var n,r,i,s,l=(a()-t.startTime)/o;s=l=l>1?1:l,n=.5*(1-Math.cos(Math.PI*s)),r=t.startX+(t.x-t.startX)*n,i=t.startY+(t.y-t.startY)*n,t.method.call(t.scrollable,r,i),r===t.x&&i===t.y||e.requestAnimationFrame(f.bind(e,t))}function h(n,r,o){var s,p,c,u,d=a();n===t.body?(s=e,p=e.scrollX||e.pageXOffset,c=e.scrollY||e.pageYOffset,u=i.scroll):(s=n,p=n.scrollLeft,c=n.scrollTop,u=l),f({scrollable:s,method:u,startTime:d,startX:p,startY:c,x:r,y:o})}}}}()},function(e,t,n){e.exports=n.p+"data/data.csv?v=ddda10"},function(e){e.exports=["Borrowing practices","Fiscal conditions and infrastructure needs","Debt levels","Credit rating"]},function(e){e.exports=[{field:"debt_limit_type",type:"text",group:1,order:1,label:"General obligation debt limit type",tooltip:"The kind of limit the state has on general obligation borrowing, one of the most common types of debt issued by states. These limits affect how states borrow."},{field:"centralization",type:"percent",group:1,order:2,label:"Centralization",tooltip:"The degree to which borrowing is done by the state itself rather than by component units. Higher values mean borrowing in the state is more centralized."},{field:"state_local_division",type:"percent",group:1,order:3,label:"State-local borrowing division",tooltip:"The share of combined state and local debt issued by local governments. States in which local governments borrow less tend to have higher state debt levels."},{field:"revenue_volatility",type:"number",group:2,order:1,label:"Revenue volatility",tooltip:"A measure of variation in tax collections. Low scores mean that revenue levels are similar from year to year, while high scores indicate that revenue varies more. More volatile states should plan for greater uncertainty. "},{field:"ten_year_pop_growth",type:"percent",group:2,order:2,label:"Population growth",tooltip:"The 10-year population growth rate from 2008 to 2017. Growing populations are associated with greater infrastructure investment. "},{field:"debt_per_capita",type:"currency",decimals:0,group:3,order:1,label:"Debt per capita",tooltip:"Total debt relative to a state’s population."},{field:"debt_percent_SPI",type:"percent",group:3,order:2,label:"Debt as a percentage of state personal income",tooltip:"Total debt relative to state personal income, a measure of economic resources.",isDefaultSelection:!0},{field:"credit2015",type:"text",group:4,order:1,label:2015,tooltip:"S&P Global Rating’s general obligation or issuer credit rating."},{field:"credit2018",type:"text",group:4,order:2,label:2018,tooltip:"S&P Global Rating’s general obligation or issuer credit rating."},{field:"census",type:"text",group:null,order:null,label:"Census region and division",tooltip:"Policymakers are often interested in understanding trends in neighboring states, but borrowing practices often differ widely among states with shared borders."}]},function(e){e.exports={census:["N/A","Northeast—New England","Northeast—Middle Atlantic","Midwest—East North Central","Midwest—West North Central","South—South Atlantic","South—East South Central","South—West South Central","West—Mountain","West—Pacific"],credit2018:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"],credit2015:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=f(n(1));n(21);var i=f(n(22));n(23);var a=n(2),s=f(n(24)),l=f(n(25)),p=f(n(27)),c=f(n(8)),u=f(n(29)),d=n(0);function f(e){return e&&e.__esModule?e:{default:e}}var h=["US","AL"],m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.comparisons=[],this.model.groups.forEach(function(e,t){n.model.typesNested[t].values.forEach(function(e){var t;t="text"===e.type?n.parent.createComponent(n.model,s.default,"div.js-text-compare-"+e.field,{rerenderOnDataMismatch:!0,parent:n,data:{comparison:h,field:e.field}}):n.parent.createComponent(n.model,l.default,"div.js-text-compare-"+e.field,{rerenderOnDataMismatch:!0,parent:n,data:{comparison:h,field:e.field}}),n.comparisons.push(t)})}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.comparisons)),this.prerendered&&!this.rerender)return r;var o=0;return this.model.groups.forEach(function(e,t){var a=document.createElement("div");a.classList.add(i.default[e.cleanString()]),a.insertAdjacentHTML("afterbegin",'<h3 class="'+i.default.groupHeader+'">'+e+"</h3>");var s=document.createElement("div");s.classList.add(i.default.typeContainer,i.default[e.cleanString()]),n.model.typesNested[t].values.forEach(function(e){var t=document.createElement("div");t.classList.add(i.default.typeDiv,i.default[e.field]),t.insertAdjacentHTML("afterbegin",'<h4 class="'+i.default.typeHeader+" "+(e.tooltip?i.default.withTooltip:"withoutTooltip")+'" data-field="'+e.field+'" data-content="'+(e.tooltip?e.tooltip:"")+'">'+e.label+"</h4>"),t.appendChild(n.comparisons[o].el),o++,s.appendChild(t)}),a.appendChild(s),r.appendChild(a)}),r}},{key:"randomize",value:function(){var e,t,n=this.model.data.map(function(e){return e.code}),r=n.indexOf("US");n.splice(r,1),a.stateModule.setState("compare.1",n[(e=0,t=n.length-1,Math.floor(Math.random()*(t-e+1)+e))])}},{key:"init",value:function(){var e=this;this.initializeAutocompletes(),this.initializeTooltips(),c.default.setSubs([["compare",function(t,n){e.update(t,n)}]]),window.IS_PRERENDERING||this.randomize()}},{key:"initializeTooltips",value:function(){var e=document.querySelectorAll("."+i.default.withTooltip),t=this;(0,u.default)(e,{interactive:!0,content:function(e){var n=document.createElement("div"),r=t.parent.returnMoreLink(e.dataset.field);return n.textContent=e.dataset.content+" ",r&&n.appendChild(t.parent.returnMoreLink(e.dataset.field)),n}})}},{key:"update",value:function(e,t){console.log(this,e,t),this.comparisons.forEach(function(n){n.update(e,t)}),document.querySelector("#compare-input-"+e.split(".")[1]).value=this.model.data.find(function(e){return e.code===t}).state}},{key:"initializeAutocompletes",value:function(){var e=this,t=this.model.data.map(function(e){return{state:e.state,code:e.code}}),n=[!1,!1];function r(e){console.log(this,e),"mouseenter"===e.type&&this.focus(),"click"===e.type&&(console.log(this.parentNode.parentNode),this.parentNode.parentNode.focus())}function o(e){var r=a.stateModule.getState("compare."+e)||h[e],o=this.parentNode.querySelectorAll(".autoComplete_results_list li");console.log(r),this.value=t.find(function(e){return e.code===r}).state,o[0]&&(o[0].parentNode.innerHTML=""),n[e]=!1}[0,1].forEach(function(s){var l=document.querySelector("#compare-input-"+s),c=document.querySelector("#autoComplete_wrapper-"+s);l.addEventListener("click",function(e){e.stopPropagation()}),document.body.addEventListener("click",function(){console.log(n),n[s]&&o.call(l,s)}),l.classList.add("autoComplete",i.default["autoComplete"+s]),c.classList.add(i.default["autoComplete_wrapper-"+s]),l.addEventListener("keyup",function(){n[s]=!0,this.parentNode.querySelectorAll(".autoComplete_results_list li").forEach(function(e){console.log(e),e.addEventListener("mouseenter",r),e.addEventListener("mouseleave",r)})}),l.addEventListener("keydown",function(e){var r=this;console.log(e,this);var i=this.parentNode.querySelectorAll(".autoComplete_results_list li");9===e.keyCode&&1===i.length&&(this.value!==i[0].dataset.result?(e.preventDefault(),this.value=i[0].dataset.result):o.call(this,s)),9===e.keyCode&&(i.length>1||0===i.length)&&o.call(this,s),13===e.keyCode&&1===i.length&&(this.value=i[0].dataset.result,a.stateModule.setState("compare."+s,t.find(function(e){return e.state===r.value}).code),i[0].parentNode.innerHTML="",n[s]=!1)}),e.children.push(new p.default({data:{src:t,key:"state"},highlight:!0,onSelection:function(t){console.log(t,e),(0,d.GTMPush)("StateDebt|Compare-"+s+"|"+t.selection.code),a.stateModule.setState("compare."+s,t.selection.code),l.value=t.selection.state,l.focus(),n[s]=!1},placeHolder:"Select state",resultsList:{container:function(){return"autoComplete_results_list"},destination:document.querySelector("#compare-input-"+s),position:"afterend"},searchEngine:"strict",selector:"#compare-input-"+s,threshold:2})),function(e){var t=document.querySelector("#autoComplete_wrapper-"+e+" .autoComplete_results_list");new MutationObserver(function(e,t){console.log(e,t),e.forEach(function(e){e.addedNodes.forEach(function(e){e.addEventListener("mouseenter",r),e.setAttribute("tabindex",0)})})}).observe(t,{attributes:!1,childList:!0,subtree:!1})}(s),l.setAttribute("value",e.model.data.find(function(e){return e.code===h[s]}).state),console.log(e.children)})}}]),t}();t.default=m},function(e,t,n){e.exports={autoComplete_wrapper:"autoComplete_wrapper",autoComplete:"autoComplete",autoComplete_results_list:"autoComplete_results_list",autoComplete_result:"autoComplete_result",autoComplete_highlighted:"autoComplete_highlighted"}},function(e,t,n){e.exports={groupHeader:"src-views-state-comparison--groupHeader",typeContainer:"src-views-state-comparison--typeContainer","credit-rating":"src-views-state-comparison--credit-rating",typeDiv:"src-views-state-comparison--typeDiv",typeHeader:"src-views-state-comparison--typeHeader",debt_limit_type:"src-views-state-comparison--debt_limit_type",credit2015:"src-views-state-comparison--credit2015",credit2018:"src-views-state-comparison--credit2018",autoComplete0:"src-views-state-comparison--autoComplete0","autoComplete_wrapper-0":"src-views-state-comparison--autoComplete_wrapper-0",autoComplete1:"src-views-state-comparison--autoComplete1","autoComplete_wrapper-1":"src-views-state-comparison--autoComplete_wrapper-1",withTooltip:"src-views-state-comparison--withTooltip"}},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=s(n(4)),a=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"prerender",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(console.log(this.model.dict,this.data.field),e.innerHTML=this.returnTemplate(0)+this.returnTemplate(1),e)}},{key:"update",value:function(e,n){var r=parseInt(e.split(".")[1]);console.log(r),o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"update",this).call(this,r,n),console.log(this,r),this.el.children[r].fadeInContent(this.returnTemplate(r))}},{key:"returnTemplate",value:function(e){return'<p class="'+i.default.chartLabel+" "+i.default.chartLabelText+'">'+this.matches[e].state+': <span class="'+i.default["compareColor"+(e+1)]+'">'+(void 0!==this.model.dict[this.data.field]?this.model.dict[this.data.field][[this.matches[e][this.data.field]]]:this.matches[e][this.data.field])+"</span></p>"}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=p(n(4)),a=p(n(5)),s=p(n(6)),l=n(7);function p(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.bars=[],[0,1].forEach(function(e){n.bars.push(n.parent.parent.createComponent(n.model,s.default,"div.js-bar-compare-"+n.data.field+"-"+e,{rerenderOnDataMismatch:!0,parent:n,data:{d:n.matches[e],field:n.data.field,color:e+1}}))}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.bars)),this.prerendered&&!this.rerender?r:(r.innerHTML=this.returnTemplate(),r)}},{key:"returnTemplate",value:function(){return' \n                        <div class="'+i.default.chartContainer+'">\n                            '+this.partialTemplate(0)+"\n                            "+this.partialTemplate(1)+"\n                        </div>\n                       "}},{key:"returnTranslateValue",value:function(e){var t=this;return this.bars[e].data.d[this.bars[e].data.field]<0&&this.model.types.find(function(n){return n.field===t.bars[e].data.field}).crossesZero?0:(100*this.bars[e].linearScale(this.matches[e],this.data.field)).toFixed(1)+"%"}},{key:"partialTemplate",value:function(e){return'\n                <p class="'+i.default.chartLabel+" "+i.default["chartLabel"+(e+1)]+'">\n                    '+this.matches[e].state+'\n                </p>\n                <div class="'+i.default.barContainer+" "+i.default["barContainer"+(e+1)]+'">\n                    '+this.bars[e].el.outerHTML+'                        \n                    <div class="'+i.default.dataLabel+'" style="transform: translateX('+this.returnTranslateValue.call(this,e)+')">\n                        '+this.formatValue(this.matches[e],this.data.field).replace("-","–")+"\n                    </div>\n                </div>\n        "}},{key:"linearScale",value:function(e,t){var n=this.model.types.find(function(e){return e.field===t});return(e[t]-n.min)/n.spread}},{key:"formatValue",value:function(){return l.formatValue.apply(this,arguments)}},{key:"update",value:function(e,n){console.log(e,n);var r=parseInt(e.split(".")[1]),a=this.el.querySelectorAll("."+i.default.dataLabel)[r];o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"update",this).call(this,r,n),console.log(this),this.el.querySelectorAll("."+i.default.chartLabel)[r].fadeInContent(this.matches[r].state),this.children[r].data.d=this.matches[r],this.children[r].update(r),console.log("HERE—",this.children[r].data.d),a.fadeInContent(this.formatValue(this.matches[r],this.data.field).replace("-","–")),a.style.transform="translateX("+this.returnTranslateValue.call(this,r)+")"}}]),t}();t.default=c},function(e,t,n){e.exports={bar:"src-components-bar--bar",barColor1:"src-components-bar--barColor1",barColor2:"src-components-bar--barColor2",isZero:"src-components-bar--isZero"}},function(e,t,n){e.exports=function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t={resultsList:"autoComplete_results_list",result:"autoComplete_result",highlight:"autoComplete_highlighted"},n=function(e){return"string"==typeof e?document.querySelector(e):e()},r=function(e){return e.innerHTML=""},o={getInput:n,createResultsList:function(e){var n=document.createElement("ul");return e.container&&(t.resultsList=e.container(n)||t.resultsList),n.classList.add(t.resultsList),e.destination.insertAdjacentElement(e.position,n),n},highlight:function(e){return"<span class=".concat(t.highlight,">").concat(e,"</span>")},addResultsToList:function(e,n,r,o){n.forEach(function(i,a){var s=document.createElement("li"),l=n[a].source[r]||n[a].source;s.setAttribute("data-result",l),s.setAttribute("class",t.result),s.setAttribute("tabindex","1"),s.innerHTML=o?o(i,s):i.match||i,e.appendChild(s)})},navigation:function(e,t){var r=n(e),o=t.firstChild;document.onkeydown=function(e){var n=document.activeElement;switch(e.keyCode){case 38:n!==o&&n!==r?n.previousSibling.focus():n===o&&r.focus();break;case 40:n===r&&t.childNodes.length>0?o.focus():n!==t.lastChild&&n.nextSibling.focus()}}},clearResults:r,getSelection:function(e,o,i,a,s){var l=o.querySelectorAll(".".concat(t.result));Object.keys(l).forEach(function(p){["mousedown","keydown"].forEach(function(c){l[p].addEventListener(c,function(l){"mousedown"!==c&&13!==l.keyCode||(i({event:l,query:n(e).value,results:a.map(function(e){return e.source}),selection:a.find(function(e){var n=e.source[s]||e.source;return n===l.target.closest(".".concat(t.result)).getAttribute("data-result")}).source}),r(o))})})})}};return function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.selector=e.selector||"#autoComplete",this.data={src:function(){return"function"==typeof e.data.src?e.data.src():e.data.src},key:e.data.key},this.searchEngine="loose"===e.searchEngine?"loose":"strict",this.threshold=e.threshold||0,this.resultsList=o.createResultsList({container:!(!e.resultsList||!e.resultsList.container)&&e.resultsList.container,destination:e.resultsList&&e.resultsList.destination?e.resultsList.destination:o.getInput(this.selector),position:e.resultsList&&e.resultsList.position?e.resultsList.position:"afterend"}),this.placeHolder=e.placeHolder,this.maxResults=e.maxResults||5,this.resultItem=e.resultItem,this.highlight=e.highlight||!1,this.onSelection=e.onSelection,this.init()}return n=t,(r=[{key:"search",value:function(e,t){var n=this.highlight,r=t.toLowerCase();if("loose"===this.searchEngine){e=e.replace(/ /g,"");for(var i=[],a=0,s=0;s<r.length;s++){var l=r[s];a<e.length&&l===e[a]&&(l=n?o.highlight(l):l,a++),i.push(l)}return a===e.length&&i.join("")}if(r.includes(e)){if(n){var p=o.getInput(this.selector).value.toLowerCase();return r.replace(p,o.highlight(p))}return r}}},{key:"listMatchedResults",value:function(e){var t=this,n=[],r=o.getInput(this.selector).value.toLowerCase();e.filter(function(e){var o=t.search(r,e[t.data.key]||e);o&&n.push({match:o,source:e})});var i=n.slice(0,this.maxResults);return o.addResultsToList(this.resultsList,i,this.data.key,this.resultItem),o.navigation(this.selector,this.resultsList),i}},{key:"ignite",value:function(e){var t=this,n=this.selector,r=o.getInput(n),i=this.placeHolder,a=this.onSelection;i&&r.setAttribute("placeholder",i),r.onkeyup=function(){var i=t.resultsList;if(o.clearResults(i),r.value.length>t.threshold&&r.value.replace(/ /g,"").length){var s=t.listMatchedResults(e);a&&o.getSelection(n,i,a,s,t.data.key)}}}},{key:"init",value:function(){var e=this,t=this.data.src();t instanceof Promise?t.then(function(t){return e.ignite(t)}):this.ignite(t)}}])&&e(n.prototype,r),i&&e(n,i),t;var n,r,i}()}()},function(e,t,n){"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},function(e,t,n){"use strict";n.r(t);var r=n(10);
/**!
* tippy.js v4.0.4
* (c) 2017-2019 atomiks
* MIT License
*/function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var i="undefined"!=typeof window,a=i&&navigator.userAgent,s=/MSIE |Trident\//.test(a),l=/UCBrowser\//.test(a),p=i&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,c={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:[0,20],distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",updateDuration:0,wait:null,zIndex:9999},u=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],d={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow"},f=i?Element.prototype:{},h=f.matches||f.matchesSelector||f.webkitMatchesSelector||f.mozMatchesSelector||f.msMatchesSelector;function m(e){return[].slice.call(e)}function v(e,t){return(f.closest||function(e){for(var t=this;t;){if(h.call(t,e))return t;t=t.parentElement}}).call(e,t)}function y(e,t){for(;e;){if(t(e))return e;e=e.parentElement}}function b(e,t){return{}.hasOwnProperty.call(e,t)}function g(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?n:r}return e}function w(e,t){var n;return function(){var r=this,o=arguments;clearTimeout(n),n=setTimeout(function(){return e.apply(r,o)},t)}}function _(e,t){return e&&e.modifiers&&e.modifiers[t]}function x(e,t){return e.indexOf(t)>-1}function k(e){return!(!e||!b(e,"isVirtual"))||e instanceof Element}function S(e,t){return"function"==typeof e?e.apply(null,t):e}function O(e,t){e.filter(function(e){return"flip"===e.name})[0].enabled=t}function C(){return document.createElement("div")}function E(e,t){e.innerHTML=t instanceof Element?t.innerHTML:t}function T(e,t){t.content instanceof Element?(E(e,""),e.appendChild(t.content)):e[t.allowHTML?"innerHTML":"textContent"]=t.content}function L(e){return{tooltip:e.querySelector(d.TOOLTIP),backdrop:e.querySelector(d.BACKDROP),content:e.querySelector(d.CONTENT),arrow:e.querySelector(d.ARROW)||e.querySelector(d.ROUND_ARROW)}}function A(e){e.setAttribute("data-inertia","")}function P(e){var t=C();return"round"===e?(t.className="tippy-roundarrow",E(t,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):t.className="tippy-arrow",t}function j(){var e=C();return e.className="tippy-backdrop",e.setAttribute("data-state","hidden"),e}function D(e,t){e.setAttribute("tabindex","-1"),t.setAttribute("data-interactive","")}function M(e,t){e.forEach(function(e){e&&(e.style.transitionDuration="".concat(t,"ms"))})}function I(e,t,n){var r=l&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";e[t+"EventListener"](r,n)}function R(e){var t=e.getAttribute("x-placement");return t?t.split("-")[0]:""}function B(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function H(e,t,n){n.split(" ").forEach(function(n){e.classList[t](n+"-theme")})}function N(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.checkHideOnClick,n=e.exclude,r=e.duration;m(document.querySelectorAll(d.POPPER)).forEach(function(e){var o=e._tippy;!o||t&&!0!==o.props.hideOnClick||n&&e===n.popper||o.hide(r)})}var F={passive:!0},q=4,z=!1;function Y(){z||(z=!0,p&&document.body.classList.add("tippy-iOS"),window.performance&&document.addEventListener("mousemove",U))}var W=0;function U(){var e=performance.now();e-W<20&&(z=!1,document.removeEventListener("mousemove",U),p||document.body.classList.remove("tippy-iOS")),W=e}function X(e){var t=e.target;if(!(t instanceof Element))return N();var n=v(t,d.POPPER);if(!(n&&n._tippy&&n._tippy.props.interactive)){var r=y(t,function(e){return e._tippy&&e._tippy.reference===e});if(r){var o=r._tippy,i=x(o.props.trigger,"click");if(z||i)return N({exclude:o,checkHideOnClick:!0});if(!0!==o.props.hideOnClick||i)return;o.clearDelayTimeouts()}N({checkHideOnClick:!0})}}function V(){var e=document.activeElement;e&&e.blur&&e._tippy&&e.blur()}var G=Object.keys(c);function K(e,t){var n=o({},t,{content:S(t.content,[e])},t.ignoreAttributes?{}:function(e){return G.reduce(function(t,n){var r=(e.getAttribute("data-tippy-".concat(n))||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})}(e));return(n.arrow||l)&&(n.animateFill=!1),n}function Z(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;Object.keys(e).forEach(function(e){if(!b(t,e))throw new Error("[tippy]: `".concat(e,"` is not a valid option"))})}var $=1;function J(e,t){var n=K(e,t);if(!n.multiple&&e._tippy)return null;var i={},a=null,l=0,p=0,f=!1,k=function(){},E=[],N=n.interactiveDebounce>0?w(oe,n.interactiveDebounce):oe,Y=null,W=$++,U=function(e,t){var n=C();n.className="tippy-popper",n.id="tippy-".concat(e),n.style.zIndex=t.zIndex,t.role&&n.setAttribute("role",t.role);var r=C();r.className="tippy-tooltip",r.style.maxWidth=t.maxWidth+("number"==typeof t.maxWidth?"px":""),r.setAttribute("data-size",t.size),r.setAttribute("data-animation",t.animation),r.setAttribute("data-state","hidden"),H(r,"add",t.theme);var o=C();return o.className="tippy-content",o.setAttribute("data-state","hidden"),t.interactive&&D(n,r),t.arrow&&r.appendChild(P(t.arrowType)),t.animateFill&&(r.appendChild(j()),r.setAttribute("data-animatefill","")),t.inertia&&A(r),T(o,t),r.appendChild(o),n.appendChild(r),n}(W,n);U.addEventListener("mouseenter",function(e){V.props.interactive&&V.state.isVisible&&"mouseenter"===i.type&&Q(e)}),U.addEventListener("mouseleave",function(){V.props.interactive&&"mouseenter"===i.type&&document.addEventListener("mousemove",N)});var X,V={id:W,reference:e,popper:U,popperChildren:L(U),popperInstance:null,props:n,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:ye,set:be,setContent:function(e){be({content:e})},show:ge,hide:we,enable:function(){V.state.isEnabled=!0},disable:function(){V.state.isEnabled=!1},destroy:_e};return he(),n.lazy||(ce(),V.popperInstance.disableEventListeners()),n.showOnInit&&Q(),n.a11y&&!n.target&&((X=e)instanceof Element&&(!h.call(X,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")||X.hasAttribute("disabled")))&&e.setAttribute("tabindex","0"),e._tippy=V,U._tippy=V,V;function G(e){var t=a=e,n=t.clientX,r=t.clientY;if(V.popperInstance){var o=R(V.popper),i=V.props.arrow?q+("round"===V.props.arrowType?18:16):q,s=x(["top","bottom"],o),l=x(["left","right"],o),p=s?Math.max(i,n):n,c=l?Math.max(i,r):r;s&&p>i&&(p=Math.min(n,window.innerWidth-i)),l&&c>i&&(c=Math.min(r,window.innerHeight-i));var u=V.reference.getBoundingClientRect(),d=V.props.followCursor,f="horizontal"===d,h="vertical"===d;V.popperInstance.reference={getBoundingClientRect:function(){return{width:0,height:0,top:f?u.top:c,bottom:f?u.bottom:c,left:h?u.left:p,right:h?u.right:p}},clientWidth:0,clientHeight:0},V.popperInstance.scheduleUpdate(),"initial"===d&&V.state.isVisible&&te()}}function Q(e){if(ye(),!V.state.isVisible){if(V.props.target)return function(e){var n=v(e.target,V.props.target);n&&!n._tippy&&(J(n,o({},V.props,{content:S(t.content,[n]),appendTo:t.appendTo,target:"",showOnInit:!0})),Q(e))}(e);if(f=!0,V.props.wait)return V.props.wait(V,e);ue()&&!V.state.isMounted&&document.addEventListener("mousemove",G);var n=g(V.props.delay,0,c.delay);n?l=setTimeout(function(){ge()},n):ge()}}function ee(){if(ye(),!V.state.isVisible)return te();f=!1;var e=g(V.props.delay,1,c.delay);e?p=setTimeout(function(){V.state.isVisible&&we()},e):we()}function te(){document.removeEventListener("mousemove",G)}function ne(){document.body.removeEventListener("mouseleave",ee),document.removeEventListener("mousemove",N)}function re(e){V.state.isEnabled&&!pe(e)&&(V.state.isVisible||(i=e,e instanceof MouseEvent&&(a=e)),"click"===e.type&&!1!==V.props.hideOnClick&&V.state.isVisible?ee():Q(e))}function oe(e){var t=y(e.target,function(e){return e._tippy}),n=v(e.target,d.POPPER)===V.popper,r=t===V.reference;n||r||function(e,t,n,r){if(!e)return!0;var o=n.clientX,i=n.clientY,a=r.interactiveBorder,s=r.distance,l=t.top-i>("top"===e?a+s:a),p=i-t.bottom>("bottom"===e?a+s:a),c=t.left-o>("left"===e?a+s:a),u=o-t.right>("right"===e?a+s:a);return l||p||c||u}(R(V.popper),V.popper.getBoundingClientRect(),e,V.props)&&(ne(),ee())}function ie(e){if(!pe(e))return V.props.interactive?(document.body.addEventListener("mouseleave",ee),void document.addEventListener("mousemove",N)):void ee()}function ae(e){e.target===V.reference&&(V.props.interactive&&e.relatedTarget&&V.popper.contains(e.relatedTarget)||ee())}function se(e){v(e.target,V.props.target)&&Q(e)}function le(e){v(e.target,V.props.target)&&ee()}function pe(e){var t="ontouchstart"in window,n=x(e.type,"touch"),r=V.props.touchHold;return t&&z&&r&&!n||z&&!r&&n}function ce(){var e=V.props.popperOptions,t=V.popperChildren,n=t.tooltip,i=t.arrow;V.popperInstance=new r.a(V.reference,V.popper,o({placement:V.props.placement},e,{modifiers:o({},e?e.modifiers:{},{preventOverflow:o({boundariesElement:V.props.boundary,padding:q},_(e,"preventOverflow")),arrow:o({element:i,enabled:!!i},_(e,"arrow")),flip:o({enabled:V.props.flip,padding:V.props.distance+q,behavior:V.props.flipBehavior},_(e,"flip")),offset:o({offset:V.props.offset},_(e,"offset"))}),onUpdate:function(t){V.props.flip&&!V.props.flipOnUpdate&&(t.flipped&&(V.popperInstance.options.placement=t.placement),O(V.popperInstance.modifiers,!1));var r=R(V.popper),o=n.style;o.top="",o.bottom="",o.left="",o.right="",o[r]=-(V.props.distance-10)+"px";var i={top:q,bottom:q,left:q,right:q};i[r]=q+V.props.distance,V.popperInstance.modifiers.filter(function(e){return"preventOverflow"===e.name})[0].padding=i,e&&e.onUpdate&&e.onUpdate(t)}}))}function ue(){return V.props.followCursor&&!z&&"focus"!==i.type}function de(e,t){function n(e){e.target===r&&(I(r,"remove",n),t())}if(0===e)return t();var r=V.popperChildren.tooltip;I(r,"remove",k),I(r,"add",n),k=n}function fe(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];V.reference.addEventListener(e,t,n),E.push({eventType:e,handler:t,options:n})}function he(){V.props.touchHold&&!V.props.target&&(fe("touchstart",re,F),fe("touchend",ie,F)),V.props.trigger.trim().split(" ").forEach(function(e){if("manual"!==e)if(V.props.target)switch(e){case"mouseenter":fe("mouseover",se),fe("mouseout",le);break;case"focus":fe("focusin",se),fe("focusout",le);break;case"click":fe(e,se)}else switch(fe(e,re),e){case"mouseenter":fe("mouseleave",ie);break;case"focus":fe(s?"focusout":"blur",ae)}})}function me(){E.forEach(function(e){var t=e.eventType,n=e.handler,r=e.options;V.reference.removeEventListener(t,n,r)}),E=[]}function ve(){return[V.popperChildren.tooltip,V.popperChildren.backdrop,V.popperChildren.content]}function ye(){clearTimeout(l),clearTimeout(p)}function be(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Z(e,c);var t=V.props,n=K(V.reference,o({},V.props,e,{ignoreAttributes:!0}));n.ignoreAttributes=b(e,"ignoreAttributes")?e.ignoreAttributes:t.ignoreAttributes,V.props=n,(b(e,"trigger")||b(e,"touchHold"))&&(me(),he()),b(e,"interactiveDebounce")&&(ne(),N=w(oe,e.interactiveDebounce)),function(e,t,n){var r=L(e),o=r.tooltip,i=r.content,a=r.backdrop,s=r.arrow;e.style.zIndex=n.zIndex,o.setAttribute("data-size",n.size),o.setAttribute("data-animation",n.animation),o.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?e.setAttribute("role",n.role):e.removeAttribute("role"),t.content!==n.content&&T(i,n),!t.animateFill&&n.animateFill?(o.appendChild(j()),o.setAttribute("data-animatefill","")):t.animateFill&&!n.animateFill&&(o.removeChild(a),o.removeAttribute("data-animatefill")),!t.arrow&&n.arrow?o.appendChild(P(n.arrowType)):t.arrow&&!n.arrow&&o.removeChild(s),t.arrow&&n.arrow&&t.arrowType!==n.arrowType&&o.replaceChild(P(n.arrowType),s),!t.interactive&&n.interactive?D(e,o):t.interactive&&!n.interactive&&function(e,t){e.removeAttribute("tabindex"),t.removeAttribute("data-interactive")}(e,o),!t.inertia&&n.inertia?A(o):t.inertia&&!n.inertia&&function(e){e.removeAttribute("data-inertia")}(o),t.theme!==n.theme&&(H(o,"remove",t.theme),H(o,"add",n.theme))}(V.popper,t,n),V.popperChildren=L(V.popper),V.popperInstance&&(V.popperInstance.update(),u.some(function(t){return b(e,t)})&&(V.popperInstance.destroy(),ce(),V.state.isVisible||V.popperInstance.disableEventListeners(),V.props.followCursor&&a&&G(a)))}function ge(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:g(V.props.duration,0,c.duration[0]);if(!V.state.isDestroyed&&V.state.isEnabled&&(!z||V.props.touch))return b(V.reference,"isVirtual")||document.documentElement.contains(V.reference)?void(V.reference.hasAttribute("disabled")||!1!==V.props.onShow(V)&&(V.popper.style.visibility="visible",V.state.isVisible=!0,V.props.interactive&&V.reference.classList.add("tippy-active"),M([V.popper,V.popperChildren.tooltip,V.popperChildren.backdrop],0),function(e){var t=!(ue()||"initial"===V.props.followCursor&&z);V.popperInstance?(ue()||(V.popperInstance.scheduleUpdate(),t&&V.popperInstance.enableEventListeners()),O(V.popperInstance.modifiers,V.props.flip)):(ce(),t||V.popperInstance.disableEventListeners()),V.popperInstance.reference=V.reference;var n=V.popperChildren.arrow;if(ue()){n&&(n.style.margin="0");var r=g(V.props.delay,0,c.delay);i.type&&G(r&&a?a:i)}else n&&(n.style.margin="");z&&a&&"initial"===V.props.followCursor&&(G(a),n&&(n.style.margin="0")),function(e,t){var n=e.popper,r=e.options,o=r.onCreate,i=r.onUpdate;r.onCreate=r.onUpdate=function(e){!function(e){e.offsetHeight}(n),t(),i(e),r.onCreate=o,r.onUpdate=i}}(V.popperInstance,e);var o=V.props.appendTo;(Y="parent"===o?V.reference.parentNode:S(o,[V.reference])).contains(V.popper)||(Y.appendChild(V.popper),V.props.onMount(V),V.state.isMounted=!0)}(function(){V.state.isVisible&&(ue()||V.popperInstance.update(),M([V.popper],n.updateDuration),M(ve(),e),V.popperChildren.backdrop&&(V.popperChildren.content.style.transitionDelay=Math.round(e/12)+"ms"),V.props.sticky&&(M([V.popper],s?0:V.props.updateDuration),function e(){V.popperInstance&&V.popperInstance.scheduleUpdate(),V.state.isMounted?requestAnimationFrame(e):M([V.popper],0)}()),B(ve(),"visible"),function(e,t){de(e,t)}(e,function(){V.popperChildren.tooltip.classList.add("tippy-notransition"),V.props.aria&&V.reference.setAttribute("aria-".concat(V.props.aria),V.popper.id),V.props.onShown(V),V.state.isShown=!0}))}))):_e()}function we(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:g(V.props.duration,1,c.duration[1]);!V.state.isDestroyed&&V.state.isEnabled&&!1!==V.props.onHide(V)&&(V.popperChildren.tooltip.classList.remove("tippy-notransition"),V.props.interactive&&V.reference.classList.remove("tippy-active"),V.popper.style.visibility="hidden",V.state.isVisible=!1,V.state.isShown=!1,M(ve(),e),B(ve(),"hidden"),function(e,t){de(e,function(){!V.state.isVisible&&Y&&Y.contains(V.popper)&&t()})}(e,function(){f||te(),V.props.aria&&V.reference.removeAttribute("aria-".concat(V.props.aria)),V.popperInstance.disableEventListeners(),V.popperInstance.options.placement=V.props.placement,Y.removeChild(V.popper),V.props.onHidden(V),V.state.isMounted=!1}))}function _e(e){V.state.isDestroyed||(V.state.isMounted&&we(0),me(),delete V.reference._tippy,V.props.target&&e&&m(V.reference.querySelectorAll(V.props.target)).forEach(function(e){e._tippy&&e._tippy.destroy()}),V.popperInstance&&V.popperInstance.destroy(),V.state.isDestroyed=!0)}}var Q=!1;function ee(e,t){Z(t,c),Q||(document.addEventListener("click",X,!0),document.addEventListener("touchstart",Y,F),window.addEventListener("blur",V),Q=!0);var n,r=o({},c,t);n=e,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(e){var t={isVirtual:!0,attributes:e.attributes||{},setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},hasAttribute:function(t){return t in e.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){delete e.classList.classNames[t]},contains:function(t){return t in e.classList.classNames}}};for(var n in t)e[n]=t[n]}(e);var i=function(e){if(k(e))return[e];if(e instanceof NodeList)return m(e);if(Array.isArray(e))return e;try{return m(document.querySelectorAll(e))}catch(e){return[]}}(e).reduce(function(e,t){var n=t&&J(t,r);return n&&e.push(n),e},[]);return k(e)?i[0]:i}ee.version="4.0.4",ee.defaults=c,ee.setDefaults=function(e){Object.keys(e).forEach(function(t){c[t]=e[t]})},ee.hideAll=N,ee.group=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.delay,r=void 0===n?e[0].props.delay:n,o=t.duration,i=void 0===o?0:o,a=!1;function s(e){a=e,u()}function l(t){t._originalProps.onShow(t),e.forEach(function(e){e.set({duration:i}),e.hide()}),s(!0)}function p(e){e._originalProps.onHide(e),s(!1)}function c(e){e._originalProps.onShown(e),e.set({duration:e._originalProps.duration})}function u(){e.forEach(function(e){e.set({onShow:l,onShown:c,onHide:p,delay:a?[0,Array.isArray(r)?r[1]:r]:r,duration:a?i:e._originalProps.duration})})}e.forEach(function(e){e._originalProps={duration:e.props.duration,onHide:e.props.onHide,onShow:e.props.onShow,onShown:e.props.onShown}}),u()},i&&setTimeout(function(){m(document.querySelectorAll("[data-tippy]")).forEach(function(e){var t=e.getAttribute("data-tippy");t&&ee(e,{content:t})})}),function(e){if(i){var t=document.createElement("style");t.type="text/css",t.textContent=e;var n=document.head,r=n.firstChild;r?n.insertBefore(t,r):n.appendChild(t)}}('.tippy-iOS{cursor:pointer!important}.tippy-notransition{transition:none}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;will-change:transform;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}'),t.default=ee},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=d(n(1)),i=d(n(32)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(9)),s=d(n(6)),l=d(n(33)),p=d(n(8)),c=n(0),u=n(7);function d(e){return e&&e.__esModule?e:{default:e}}function f(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return null===e?function(e,t){return console.log(e,t),e="N/A"===e?"!":e,t="N/A"===t?"!":t,(e=isNaN(+e)?e:+e)<(t=isNaN(+t)?t:+t)?-1:e>t?1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?-1:t[e]>n[e]?1:t[e]>=n[e]?0:NaN}}function h(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return null===e?function(e,t){return e<t?1:e>t?-1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?1:t[e]>n[e]?-1:t[e]>=n[e]?0:NaN}}var m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.name="FiftyStateView",this.field="debt_percent_SPI",this.bars=[],this.barContainers=[],this.lastPositions={},this.highlightedBars={},this.groupByFn=null!==this.groupBy?function(e){return e[n.groupBy]}:function(e){return null!==e},this.selections=this.parent.createComponent(this.model,l.default,"div.js-fifty-state-selections",{parent:this,rerenderOnDataMismatch:!0,renderToSelector:"#selections-container"}),this.sortValueKey="state",this.sortValuesFn=f,this.groupBy="null",this.nestData(),this.pushBars(),(e=this.children).push.apply(e,[this.selections].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.bars))),this.prerendered&&!this.rerender)return r;this.renderSelections(),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.updateExplainerText("field",this.field,!0);var o=this.renderCharts();return r.appendChild(o),r}},{key:"nestData",value:function(){this.nestedData=a.nest().key(this.groupByFn).sortKeys(f()).sortValues(this.sortValuesFn(this.sortValueKey)).entries(this.model.data),console.log(this.nestedData)}},{key:"pushBars",value:function(){var e=this;this.bars.length=0,this.barContainers.length=0,this.nestedData.forEach(function(t){t.values.forEach(function(t){e.bars.push(e.parent.createComponent(e.model,s.default,"div.bar-state-"+t.code,{parent:e,data:{d:t,field:e.field,color:2}})),e.barContainers.push(e.parent.createComponent(e.model,o.default,"div#barContainer-"+t.code))})})}},{key:"renderSelections",value:function(){this.selections.container.appendChild(this.selections.el)}},{key:"renderCharts",value:function(){var e=this,t=document.createElement("div"),n=0;return t.classList.add("js-fifty-chart-container"),this.nestedData.forEach(function(r){var o=document.createElement("div");o.classList.add(i.default.groupDiv),o.innerHTML="null"!==e.groupBy?'<h3 class="'+i.default.groupHeader+'">'+(void 0!==e.model.dict[e.groupBy]?e.model.dict[e.groupBy][r.key]:r.key)+"</h3>":"",r.values.forEach(function(t){var r=e.barContainers[n].el;r.classList.add(i.default.barContainer),e.highlightedBars[r.id]&&r.classList.add(i.default.isHighlighted);var a=document.createElement("p"),s=document.createElement("div"),l=document.createElement("div");l.classList.add(i.default.barInnerContainer),a.classList.add(i.default.barLabel),a.innerHTML=t.state,s.classList.add(i.default.placeHolder),r.appendChild(a),l.appendChild(e.bars[n].el),r.appendChild(l),r.appendChild(s),r.insertAdjacentHTML("beforeend",e.returnDataLabel(n)),o.appendChild(r),n++}),t.appendChild(o)}),this.bars.forEach(function(e){e.checkIfZero()}),t}},{key:"returnDataLabel",value:function(e){return'<div class="'+i.default.dataLabel+'" style="transform: translateX('+this.returnTranslateValue(e)+')">\n                    '+this.formatValue(this.bars[e].data.d,this.bars[e].data.field).replace("-","–")+"\n                </div>"}},{key:"returnTranslateValue",value:function(e){var t=this;return this.bars[e].data.d[this.bars[e].data.field]<0&&this.model.types.find(function(n){return n.field===t.bars[e].data.field}).crossesZero?(100*this.bars[e].placeZero(this.bars[e].data.field)).toFixed(1)+"%":(100*(this.bars[e].linearScale(this.bars[e].data.d,this.bars[e].data.field)+this.bars[e].placeZero(this.bars[e].data.field))).toFixed(1)+"%"}},{key:"formatValue",value:function(){return u.formatValue.apply(this,arguments)}},{key:"invertPositions",value:function(){var e=this;this.barContainers.forEach(function(t){var n=t.el.getBoundingClientRect(),r=e.firstPositions[t.el.id].top-n.top;t.el.style.transitionDuration="0",t.el.style.transform="translateY("+r+"px)",window.requestAnimationFrame(function(){t.el.style.transitionDuration="0.8s",t.el.style.transform="translateY(0)"})})}},{key:"init",value:function(){var e=this;p.default.setSubs([["field",function(t,n){e.updateBars(t,n),e.updateDataLabels(t,n),e.updateExplainerText(t,n)}],["group",function(t,n){e.updateGroups(t,n),e.updateExplainerText(t,n)}],["sort",function(t,n){e.sortBars(t,n)}],["resize",function(){e.adjustExplainerTextHeight()}]]),this.children.forEach(function(e){e.init()}),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.initHighlightBars(),this.initClearAllHighlights()}},{key:"updateExplainerText",value:function(e,t,n){var r=this;console.log(e,t,this);var o,a=this.model.types.find(function(e){return e.field===t}),s=a?"<p><strong>"+(isNaN(a.label)?a.label:"Credit rating "+a.label)+".</strong> "+a.tooltip+" </p>":"";"field"===e&&(this.field=t,o=this.fieldExplainer),"group"===e&&(this.groupBy=t,o=this.groupExplainer),n||(this.explainerWrapper.style.height=this.explainerWrapper.offsetHeight+"px"),o.fadeInContent(s).then(function(){var e=r.parent.returnMoreLink(t);e&&(e.classList.add(i.default.moreLink),o.lastChild.appendChild(e)),r.adjustExplainerTextHeight(),console.log(o.lastChild)})}},{key:"adjustExplainerTextHeight",value:function(){var e=[this.fieldExplainer,this.groupExplainer].reduce(function(e,t){var n=t.querySelector("p"),r=n?window.getComputedStyle(t.querySelector("p")):null;return r?+e+n.offsetHeight+parseInt(r["margin-top"])+parseInt(r["margin-bottom"]):+e},0);this.explainerWrapper.style.height=e+"px"}},{key:"initHighlightBars",value:function(){var e=this;document.querySelectorAll("."+i.default.barContainer).forEach(function(t){t.addEventListener("click",function(){e.highlightedBars[t.id]=!e.highlightedBars[t.id],e.highlightedBars[t.id]&&(0,c.GTMPush)("StateDebt|FiftyState|Highlight|"+t.id),t.classList.toggle(i.default.isHighlighted)})})}},{key:"initClearAllHighlights",value:function(){var e=this;document.querySelector("#clear-all-highlight").addEventListener("click",function(t){t.preventDefault(),document.querySelectorAll("."+i.default.barContainer).forEach(function(t){t.classList.remove(i.default.isHighlighted),e.highlightedBars={}}),(0,c.GTMPush)("StateDebt|FiftyState|RemoveHighlights")})}},{key:"updateDataLabels",value:function(){var e=this;this.barContainers.forEach(function(t,n){var r=t.el.querySelector("."+i.default.dataLabel);r.fadeInContent(e.formatValue(e.bars[n].data.d,e.bars[n].data.field).replace("-","–")),window.requestAnimationFrame(function(){console.log(e.bars[n].data.d),r.style.transform="translateX("+e.returnTranslateValue(n)+")"})})}},{key:"updateBars",value:function(e,t){this.field=t,this.bars.forEach(function(e){e.data.field=t,e.update()}),console.log(this.sortValueKey),"state"!==this.sortValueKey&&(this.sortValueKey=t,setTimeout(this.FLIP.bind(this),500))}},{key:"recordFirstPositions",value:function(){this.firstPositions=this.barContainers.reduce(function(e,t){return e[t.el.id]=t.el.getBoundingClientRect(),e},{})}},{key:"FLIP",value:function(){this.recordFirstPositions(),this.nestData(),this.el.innerHTML="",this.pushBars(),this.el.appendChild(this.renderCharts()),this.initHighlightBars(),this.invertPositions()}},{key:"updateGroups",value:function(e,t){this.groupBy=t,console.log(this.groupBy),this.FLIP()}},{key:"sortBars",value:function(e,t){this.sortValueKey="alpha"===t?"state":this.field,this.sortValuesFn="desc"===t?h:f,this.FLIP()}}]),t}();t.default=m},function(e,t,n){e.exports={groupHeader:"src-views-fifty-state--groupHeader",barLabel:"src-views-fifty-state--barLabel",groupDiv:"src-views-fifty-state--groupDiv",barContainer:"src-views-fifty-state--barContainer",isHighlighted:"src-views-fifty-state--isHighlighted",barInnerContainer:"src-views-fifty-state--barInnerContainer",dataLabel:"src-views-fifty-state--dataLabel",placeHolder:"src-views-fifty-state--placeHolder",moreLink:"src-views-fifty-state--moreLink"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=p(n(1)),i=p(n(34)),a=p(n(35)),s=n(2),l=n(0);function p(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this),o=[{label:"Select field:",data:this.model.types.filter(function(e){return"text"!==e.type}),type:"field"},{label:"Group by:",data:this.model.types.filter(function(e){return"text"===e.type}),type:"group"}];if(this.dropdowns=[],o.forEach(function(e){n.dropdowns.push(n.parent.parent.createComponent(n.model,a.default,"div.js-dropdown-"+e.label.cleanString(),{parent:n,data:e,rerenderOnDataMismatch:!0}))}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.dropdowns)),this.prerendered&&!this.rerender)return r;var s=document.createElement("div");return s.classList.add(i.default.dropdownWrapper),o.forEach(function(e,t){console.log(e);var r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("label"),l=n.dropdowns[t];l.el.querySelector(".js-input-div").id="label-dropdown-"+e.type+"-value",l.el.setAttribute("aria-labelledby","label-dropdown-"+e.type+" label-dropdown-"+e.type+"-value"),l.el.querySelector("ul").setAttribute("aria-controls","fifty-state-view"),o.classList.add(i.default.dropdownOuter),a.innerText=e.label,a.setAttribute("id","label-dropdown-"+e.type),r.classList.add(i.default.dropdownInner),r.appendChild(l.el),o.appendChild(a),o.appendChild(r),s.appendChild(o)}),r.appendChild(s),r.insertAdjacentHTML("beforeend",'\n            <div id="explainer-wrapper">\n                <div id="field-explainer"></div>\n                <div id="group-explainer"></div>\n            </div>\n            <div class="flex">\n                <p class="'+i.default.label+" "+i.default.labelSort+' flex"><span>Sort by:</span> <span><a class="'+i.default.sortBy+" "+i.default.sortActive+'" data-sort="alpha" href="#">A–Z</a> | <a class="'+i.default.sortBy+'" data-sort="asc" href="#">Low–High</a> | <a class="'+i.default.sortBy+'" data-sort="desc" href="#">High–Low</a></span></p>\n                <p class="'+i.default.label+" "+i.default.labelHighlight+'">Select a state to highlight | <a id="clear-all-highlight" href="#">Clear all</a></p>\n            </div>\n        '),r}},{key:"init",value:function(){this.children.forEach(function(e){e.init()}),document.querySelectorAll("."+i.default.sortBy).forEach(function(e){e.addEventListener("click",function(t){t.preventDefault(),document.querySelector("."+i.default.sortActive).classList.remove(i.default.sortActive),e.classList.add(i.default.sortActive),(0,l.GTMPush)("StateDebt|FiftyState|Sort|"+e.dataset.sort),s.stateModule.setState("sort",e.dataset.sort)})})}}]),t}();t.default=c},function(e,t,n){e.exports={dropdownWrapper:"src-views-fifty-state-selections--dropdownWrapper",dropdownOuter:"src-views-fifty-state-selections--dropdownOuter",dropdownInner:"src-views-fifty-state-selections--dropdownInner",label:"src-views-fifty-state-selections--label",sortActive:"src-views-fifty-state-selections--sortActive",labelSort:"src-views-fifty-state-selections--labelSort",sortBy:"src-views-fifty-state-selections--sortBy"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(36),s=(r=a)&&r.__esModule?r:{default:r},l=n(37),p=n(2),c=n(0);var u=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=[],o=n.data.type;n.data.data.forEach(function(e){r.push({value:e.field,name:isNaN(+e.label)?e.label:"Credit rating "+e.label,selected:!!e.isDefaultSelection})}),n.data=r.sort(function(e,t){return e.name<t.name?-1:e.name>t.name?1:e.name>=t.name?0:NaN}),"group"===o&&n.data.unshift({value:null,name:"— None —",selected:!0});var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return i.dropdownType=o,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.Dropdown),o(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(e.classList.add(s.default.dropdown),e)}},{key:"init",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this)}},{key:"onChange",value:function(){(0,c.GTMPush)("StateDebt|FiftyState|"+this.dropdownType+"|"+this.selectedOption.dataset.value),p.stateModule.setState(this.dropdownType,this.selectedOption.dataset.value)}}]),t}();t.default=u},function(e,t,n){e.exports={dropdown:"src-components-dropdown--dropdown"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=t.TextInput=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=n(0),a=l(n(1)),s=l(n(38));function l(e){return e&&e.__esModule?e:{default:e}}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.TextInput=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"input",n=arguments[1];return p(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return u(t,a.default),r(t,[{key:"prerender",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered?e:(e.setAttribute("type","text"),e)}},{key:"init",value:function(){}}]),t}(),t.Dropdown=function(e){function t(e,n){p(this,t),console.log(e);var r,o,i=e.split(".")[0].split("#")[0];"div"!==i&&(e.split(".").length>1&&(r=e.split(".")[0].split("#")[0]),e.split("#").length>1&&(o=e.split("#")[0].split(".")[0]),console.log("Dropdown element must be a div; coercing . . ."),e=(i="div")+(void 0!==o?"#"+o:"")+(void 0!==r?"."+r:""));var a=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return a.options=a.el.querySelector("ul"),a.body=document.querySelector("body"),a._isOpen=!1,a}return u(t,a.default),r(t,[{key:"prerender",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.prerendered)return e;e.setAttribute("aria-haspopup","listbox"),e.setAttribute("aria-expanded","false"),e.setAttribute("role","button");var n=i.DOMHelpers.c("div.js-input-div"),r=i.DOMHelpers.c("ul");return console.log(this),r.setAttribute("aria-role","listbox"),this.data.forEach(function(e){var t=i.DOMHelpers.c("li");t.setAttribute("data-value",e.value),t.setAttribute("aria-role","option"),t.innerHTML=e.name,t.id="dropdown-item-"+e.value,e.selected&&(t.setAttribute("aria-selected","true"),t.classList.add("selected"),n.textContent=e.name,r.setAttribute("aria-activedescendant",t.id)),r.appendChild(t)}),e.appendChild(n),e.appendChild(r),e.classList.add(s.default.PCTDropdown),e.setAttribute("tabindex","0"),e}},{key:"init",value:function(){var e=this;console.log(this),this.input=this.el.querySelector(".js-input-div"),this.el.querySelectorAll("li").forEach(function(t){t.addEventListener("click",function(n){n.stopPropagation(),e.itemClickHandler(t)})}),this._selectedOption=this.el.querySelector("li.selected"),this.toBeSelected=this.el.querySelector("li.selected"),this.el.addEventListener("click",this.clickHandler.bind(this)),this.el.addEventListener("keydown",function(t){if(console.log(t.keyCode),9!==t.keyCode)return[32,38,40].indexOf(t.keyCode)>-1?(t.preventDefault(),void e.spaceAndArrowHandler.call(e,t)):void([13,27].indexOf(t.keyCode>-1)&&e.isOpen&&e.enterAndEscapeHandler.call(e,t));e.tabHandler.call(e,t)})}},{key:"itemClickHandler",value:function(e){console.log(this,e),this.toBeSelected.classList.remove("selected"),this.toBeSelected.removeAttribute("aria-selected"),this.toBeSelected=e,this.toBeSelected.classList.add("selected"),this.toBeSelected.setAttribute("aria-selected","true"),this.options.setAttribute("aria-activedescendant",e.id),this.selectedOption=this.toBeSelected}},{key:"enterAndEscapeHandler",value:function(e){27===e.keyCode?(console.log("escape key"),this.toBeSelected.classList.remove("selected"),this.selectedOption.classList.add("selected"),this.toBeSelected=this.selectedOption,this.isOpen=!1):this.selectedOption=this.toBeSelected}},{key:"spaceAndArrowHandler",value:function(e){if(32!==e.keyCode)if(this.isOpen){var t=38===e.keyCode?this.toBeSelected.previousElementSibling:this.toBeSelected.nextElementSibling;t&&(this.toBeSelected.classList.remove("selected"),this.toBeSelected=t,this.toBeSelected.classList.add("selected"))}else this.isOpen=!0;else this.isOpen||(this.isOpen=!0)}},{key:"tabHandler",value:function(e){this.isOpen&&e.preventDefault()}},{key:"clickHandler",value:function(e){!this.isOpen&&this.body.UIControlIsOpen||(e.stopPropagation(),this.isOpen=!this.isOpen)}},{key:"isOpen",set:function(e){function t(){this.isOpen=!1}this._isOpen=e,e?(this.el.classList.add(s.default.isOpen),this.el.setAttribute("aria-expanded",!0),this.body.UIControlIsOpen=!0,this.body.addEventListener("click",t.bind(this))):(this.el.classList.remove(s.default.isOpen),this.el.setAttribute("aria-expanded",!1),this.body.UIControlIsOpen=!1,this.body.removeEventListener("click",t.bind(this)))},get:function(){return this._isOpen}},{key:"selectedOption",set:function(e){this._selectedOption=e,this.isOpen=!1,this.input.textContent=this._selectedOption.innerText,this.onChange?this.onChange():console.log("Instance of Dropdown class needs an onChange method to handle selection of a new value")},get:function(){return this._selectedOption}}]),t}()},function(e,t,n){e.exports={PCTDropdown:"submodules-UI-js-inputs--PCTDropdown",isOpen:"submodules-UI-js-inputs--isOpen"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(40),s=(r=a)&&r.__esModule?r:{default:r};var l=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.el=document.querySelector(t),Object.keys(n).forEach(function(e){r[e]=n[e]})}return i(e,[{key:"init",value:function(e){this.needsRouter&&(this.router=new s.default,this.router.init(e)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var e=!1,t=document.body,n=0;function r(){new Date-n<500||e||(t.classList.add("has-hover"),e=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){e&&(t.classList.remove("has-hover"),e=!1)},!0),document.addEventListener("mousemove",r,!0),r()}},{key:"createComponent",value:function(e,t,n,r){var i=Object.create({children:[],data:null,model:e,parent:null,rerenderOnDataMismatch:!1});if(null!==r&&"object"===(void 0===r?"undefined":o(r)))for(var a in r)r.hasOwnProperty(a)&&(i[a]=r[a]);return new t(n,i)}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return o(e,[{key:"init",value:function(e){var t=this;if(void 0===e||"object"!==(void 0===e?"undefined":r(e)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof e.encode||"function"!=typeof e.decode||!Array.isArray(e.views)||"object"!==r(e.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=e.encode,this.decodeHash=e.decode,this.viewPromises=e.views.map(function(e){return e.isReady}),this.PS=e.PS,Promise.all(this.viewPromises).then(function(){t.decodeHash()}),this.PS.setSubs(e.subscriptions.map(function(e){return[e,function(e,n){t.hashChange.call(t,e,n)}]}))}},{key:"hashChange",value:function(e,t){this.setStateObj(e,t),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(e,t){this.stateObj[e]=t}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),e}();t.default=i},function(e,t){e.exports='<section id="section-overview">\n    <h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">Overview</h2>\n    <div class="js-inner-content">\n        <p>\n            Because no universal guidelines exist for how much debt state governments\n            can afford, when policymakers try to assess how much borrowing to take on\n            for projects such as roads, bridges, and schools, they often compare debt\n            levels in their state to those of others. To make these comparisons, many\n            policymakers evaluate how their state stacks up against geographic\n            neighbors or other states with a common credit rating.\n        </p>\n        <p>\n            But selecting a peer group based only on these traits overlooks many\n            factors that influence borrowing levels. States with growing populations, for example, may wish to borrow more\n            to ensure that their infrastructure adequately serves residents’ needs.\n            Similarly, having a debt limit or other constraining budget policy can\n            influence the share of borrowing taken on by state governments or\n            localities.\n        </p>\n        <p>\n            This interactive tool allows users to compare debt levels across more\n            tailored peer groups, including comparing states with similar borrowing\n            practices, constraints, and needs. The tool includes key measures that may\n            influence borrowing levels, such as debt limit policies; the degree to\n            which borrowing is conducted by the state itself, compared to component\n            units such as independent agencies and authorities; and the division of\n            borrowing between the state and local governments. The tool also includes\n            traits that states more commonly consider when choosing peers, such as\n            credit ratings and geographic proximity.\n        </p>\n        <p>\n            In the <a class="pct-static-anchor" id="state-comparison" href="#section-comparison">“State comparison” section</a>, users can compare these data, including\n            debt levels, for any two states, or any state to the U.S. median. In the\n            section labeled <a class="pct-static-anchor" id="fifty-state" href="#section-states">“50-state data,”</a> users can sort and group all 50 states\n            using multiple criteria, allowing users to identify groupings using a mix\n            of measures. Information about the measures and the underlying data may be\n            found in the <a class="pct-static-anchor" id="fifty-state" href="#section-about">“About the data” section</a> at the bottom of this page.\n        </p>\n        <p>\n            States can use these data to select more appropriate peer groups, giving\n            them a deeper understanding of how similarly positioned states manage their\n            borrowing.\n        </p>\n    </div>\n</section>\n<section id="section-comparison">\n    <h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">State Comparison</h2>\n    <div class="js-inner-content">\n        <div class="compare-selection-wrapper">\n            <span class="compare-label">Compare</span><br />\n            <div class="flex flex-start flex-baseline autoComplete_outerWrapper">\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-0">\n                    <input autocomplete="off" type="text" id="compare-input-0">\n                </div>\n                <span>to</span>\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-1">\n                    <input autocomplete="off" type="text" id="compare-input-1">\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n<section id="section-states">\n    <h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">50-State Data</h2>\n    <div class="js-inner-content">\n        <div id="selections-container"></div>\n        <div id="fifty-state-container"></div>\n    </div>\n</section>\n<section id="section-about">\n    <h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">About the Data</h2>\n    <div class="js-inner-content">\n        <p>\n            The measures were selected based on evidence in the debt affordability and\n            management literature that they relate to state debt levels, the\n            feasibility of collecting the data, and a desire to avoid redundancy.<sup>1</sup> Pew also limited the\n            number of measures to make the tool easy to use and understand.\n        </p>\n        <p>\n            This tool is not intended to be an exhaustive catalog of the factors that\n            might affect state borrowing levels. Instead, the tool is intended to help\n            states consider relevant criteria when constructing peer groups.\n        </p>\n        <p>\n            Each measure is described below.\n        </p>\n        <a name="debt_limit_type" id="debt_limit_type"></a>\n        <h3 class="js-debt_limit_type">\n            General obligation debt limit type (2018)\n        </h3>\n        <p>\n            General obligation (GO) debt is backed by a state’s full faith and credit,\n            the strongest possible pledge. As a result, GO debt is typically a state’s\n            highest rated and lowest cost form of debt.<sup>2</sup>\n        </p>\n        <p>\n            All but two states have legal GO debt limits, which vary in restrictiveness\n            and structure. For example, Connecticut limits this debt to 1.6 times its\n            total estimated general fund tax receipts, while Arizona effectively\n            prohibits its issuance.<sup>3</sup>\n        </p>\n        <p>\n            Pew has classified each state’s limit for GO debt as one of the following\n            types:\n        </p>\n        <ul>\n            <li>\n                <strong>Constitutional amendment.</strong>\n                Three states—Alabama, Ohio, and West Virginia—require an amendment to\n                their constitutions to issue GO debt.\n            </li>\n            <li>\n                <strong>Metric.</strong>\n                In 11 states—Connecticut, Georgia, Hawaii, Mississippi, Nevada, New\n                Hampshire, North Dakota, Oregon, Tennessee, Utah, and Wisconsin—debt or\n                annual debt service is not allowed to exceed a certain metric-based\n                threshold. Tennessee, for example, caps debt service at 10 percent of\n                combined revenues in its general, debt service, and highway funds.\n            </li>\n            <li>\n                <strong>Metric-based with referendum to exceed.</strong>\n                North Carolina, Pennsylvania, and Wyoming use a metric to cap debt but\n                allow issuance above the cap with voter approval.\n            </li>\n            <li>\n                <strong>No limit.</strong>\n                Maryland and Vermont place no restrictions on GO debt.\n            </li>\n            <li>\n                <strong>Prohibition.</strong>\n                Arizona, Colorado, Indiana, and Nebraska effectively prohibit GO debt.\n                Indiana law forbids any GO debt to be issued; the others authorize\n                amounts so low—$350,000 or less—as to be equivalent to prohibitions.\n            </li>\n            <li>\n                <strong>Referendum and/or supermajority.</strong>\n                Thirteen states—Alaska, Arkansas, California, Idaho, Iowa, Kansas,\n                Kentucky, Maine, Michigan, Minnesota, Missouri, Montana, and Rhode\n                Island—require some combination of voter approval and/or a legislative\n                supermajority (generally, three-fifths or two-thirds) to issue debt.\n            </li>\n            <li>\n                <strong>Referendum and/or supermajority and metric.</strong>\n                Fourteen states—Delaware, Florida, Illinois, Louisiana, Massachusetts,\n                New Jersey, New Mexico, New York, Oklahoma, South Carolina, South\n                Dakota, Texas, Virginia, and Washington—require a referendum and/or\n                supermajority and have a metric-based cap on debt or debt service.\n            </li>\n        </ul>\n        <div class="pct-note">\n            <p>\n                <strong>Note:</strong> The classification system is a variation on the approach taken in D.\n                Roderick Kiewiet and Kristin Szakaly, “Constitutional Limitations on\n                Borrowing: An Analysis of State Bonded Indebtedness,” <em>The Journal of Law, Economics &amp; Organization</em> 12, no. 1 (1996):\n                62-97,\n                <a href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents">\n                    https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents\n                </a>\n                .\n            </p>\n            <p>\n                <strong>Source:</strong> Pew analysis of state constitutions and statutes\n            </p>\n        </div>\n        <a name="centralization" id="centralization"></a>\n        <h3 class="js-centralization">\n            Centralization (fiscal year 2014)\n        </h3>\n        <p>\n            In some states, component units of government, such as independent agencies\n            and authorities, conduct much of the borrowing, rather than the primary\n            state government. Centralization measures primary government debt as a\n            share of the total debt issued by the primary government and its component\n            units. Across the states, centralization ranges from 0 percent—meaning that\n            all borrowing is by entities other than the primary government—to 100\n            percent, meaning the primary government does all of the borrowing.\n        </p>\n        <p>\n            Component unit debt generally relies less on state general funds for\n            repayment than primary government debt does. Often, lenders have no legal\n            claim on state general funds if a component unit defaults. As a result,\n            state comparisons based only on total debt may be misleading. Montana and\n            Delaware, for example, have about the same total debt, but most of\n            Montana’s debt is held by component units and most of Delaware’s is held by\n            the state. When comparing measures of “total debt,” choosing peers based on\n            the degree of centralization of debt may provide more appropriate\n            comparisons.\n        </p>\n        <p>\n            <strong>Note:</strong> To calculate centralization in a state, Pew calculated primary\n            government debt from states’ 2014 comprehensive annual financial reports.\n            It then calculated debt held by major component units, as reported in their\n            annual financial statements. Adding the two sums created a measure of\n            “total debt,” from which the percentage held by the primary\n            government—centralization—was determined.<sup>4</sup>\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Source:</strong> Pew analysis of fiscal year 2014 state comprehensive financial\n                annual reports\n            </p>\n        </div>\n        <a name="state_local_division" id="state_local_division"></a>\n        <h3 class="js-state_local_division">\n            The state-local borrowing division (2015)\n        </h3>\n        <p>\n            In some states, local governments are responsible for paying for most\n            capital projects within their jurisdictions. In others, the state\n            government is responsible for those projects, increasing its overall\n            borrowing. The division of borrowing responsibility is related to the debt\n            limit: In general, local governments in states with highly restrictive\n            state debt limits have higher debt levels.<sup>5</sup> This measure compares\n            local government borrowing to the combined debt held by the state and local\n            governments. Higher numbers indicate a greater share of total debt is held\n            by local governments. The state-local borrowing division ranges from 17.9\n            percent to 88 percent.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Source:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n                State and Local Government Finances: 2015 Data Release” (2018),\n                <a href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html">\n                    https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html\n                </a>\n            </p>\n        </div>\n        <a name="revenue_volatility" id="revenue_volatility"></a>\n        <h3 class="js-revenue_volatility">\n            Revenue volatility (1998-2017)\n        </h3>\n        <p>\n            Revenue volatility is the annual fluctuation in tax collections and is\n            affected by several factors, including a state’s mix of tax streams. The\n            score reflects the standard deviation of yearly percentage change in total\n            tax revenue between 1998 and 2017.<sup>6</sup> Pew controlled for the\n            effects of tax policy changes using the National Conference of State\n            Legislatures’ State Tax Actions Report.\n        </p>\n        <p>\n            A low volatility score means that revenue levels were similar from year to\n            year, and a high score indicates that revenue grew or declined more\n            dramatically. The scores range from 2.7 to 37.6. States with more volatile\n            revenue face shared budget challenges. When revenues drop, fixed costs—such\n            as debt service—may crowd out operating spending.<sup>7</sup>\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Sources:</strong> Pew’s calculation of volatility scores is based on data from the\n                U.S. Census Bureau’s Annual Survey of\n                <a href="https://www.census.gov/programs-surveys/stc.html">\n                    State Government Tax Collections\n                </a>\n                historical data series for 1997 to 2017, and the National Conference of\n                State Legislatures’ “\n                <a href="http://www.ncsl.org/research/fiscal-policy/state-tax-actions-database.aspx">\n                    State Tax Actions” reports\n                </a>\n                for 1997 to 2016. For additional information about the methodology and\n                underlying data, please see: The Pew Charitable Trusts, “Tax Revenue\n                Volatility, FY 1998-2017,” last modified Aug. 29, 2018,\n                <a href="http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6">\n                    http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6\n                </a>\n            </p>\n        </div>\n        <a name="ten_year_pop_growth" id="ten_year_pop_growth"></a>\n        <h3 class="js-ten_year_pop_growth">\n            Population growth (2008-17)\n        </h3>\n        <p>\n            Research has found that population growth in a state is associated with\n            an increase in borrowing.\n            <sup>8</sup>\n            From 2008 to 2017, state populations shrank or grew within a range of -1.3\n            percent to 16.5 percent.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n                State and Local Government Finances: 2015 Data Release” (2018),\n                <a href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html">\n                    https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html\n                </a>\n                ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n                United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n                2017,” Table 1,\n                <a href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx">\n                    https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx\n                </a>\n                ; U.S. Census Bureau, “Intercensal Estimates of the Resident Population for\n                the United States, Regions, States, and Puerto Rico: April 1, 2000 to July\n                1, 2010,” Table 1,\n                <a href="https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls">\n                    https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls\n                </a>\n            </p>\n        </div>\n        <h3 class="static">\n            Debt levels (2015)\n        </h3>\n        <p>\n            States compare their debt levels to peers through a variety of measures,\n            including total outstanding debt and metrics that normalize debt levels by\n            population or wealth to create a level scale across states of various\n            sizes. Pew’s tool includes two ratios: debt per capita and debt as a\n            percentage of state personal income. States often use a ratio of debt\n            service to revenue when they evaluate debt levels and set limits. This\n            ratio is not included in this tool due to cross-state comparability\n            challenges.<sup>9</sup>\n        </p>\n        <aside class="pct-box">\n            <h4>\n                <strong>\n                    Measuring State Debt: U.S. Census Data vs. Moody’s Net Tax-Supported\n                    Debt Calculations\n                </strong>\n            </h4>\n            <p>\n                The two measures of state debt levels included in this tool—debt per capita\n                and debt as a percentage of state personal income—rely on U.S. Census\n                Bureau data. These data capture a broad scope of debt, including some\n                obligations held by component units, such as independent agencies and\n                public authorities that “operate separately or somewhat autonomously from\n                the central state government but where the state government maintains\n                administrative or fiscal control over their activities.”<sup>10</sup> These measures are\n                intended to capture a broad universe of debt related to state government\n                activities across the 50 states.\n            </p>\n            <p>\n                States’ own debt affordability studies often use Moody’s Investors Service\n                Inc. calculations of state net tax-supported debt, which do not include\n                self-supporting (debt paid for from specified pledged revenue) or component\n                unit debt, to compare borrowing levels. Instead, these measures capture\n                obligations supported by state funds that might otherwise be available to\n                fund other state priorities.\n            </p>\n            <p>\n                There are tradeoffs associated with any definition of state debt. This\n                tool relies on a broader definition of long-term bonded debt to inform\n                examinations of the breadth of state functions relying on debt\n                financing. This definition may not be appropriate for all analyses.\n            </p>\n        </aside>\n        <a name="debt_per_capita" id="debt_per_capita"></a>\n        <h3 class="js-debt_per_capita">\n            Debt per capita\n        </h3>\n        <p>\n            Debt per capita, which measures total debt against a state’s\n            population, facilitates comparisons between states of different sizes.\n            It also helps policymakers understand the debt burden on individual\n            residents, who provide much of the revenue states use to repay debt in the\n            form of taxes and user fees. The range of debt per capita is $870 to\n            $11,059.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n                State and Local Government Finances: 2015 Data Release” (2018),\n                <a href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html">\n                    https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html\n                </a>\n                ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n                United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n                2017,” Table 1,\n                <a href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx">\n                    https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx\n                </a>\n            </p>\n        </div>\n        <a name="debt_percent_SPI" id="debt_percent_SPI"></a>\n        <h3 class="js-debt_percent_SPI">\n            Debt as a percentage of state personal income\n        </h3>\n        <p>\n            Considering a state’s debt level relative to its available resources for\n            repayment is a common practice used by states, credit rating agencies, and\n            academics.<sup>11</sup> State\n            personal income is one measure of a state’s ability to service debt. Debt\n            as a percentage of personal income ranges from 1.9 percent to 17.6 percent.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n                State and Local Government Finances: 2015 Data Release” (2018),\n                <a href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html">\n                    https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html\n                </a>\n                ; U.S. Bureau of Economic Analysis, “SA1 Personal Income Summary: Personal\n                Income, Population, Per Capita Personal Income,”\n                https://www.bea.gov/data/income-saving/personal-income-by-state\n            </p>\n        </div>\n        <a name="credit_rating" id="credit_rating"></a>\n        <h3 class="js-credit_rating static">\n            Credit ratings (September 2018 and September 2015)\n        </h3>\n        <p>\n            This tool allows users to group states by S&amp;P Global Ratings’ credit\n            ratings to compare those with similar credit profiles. The user can select\n            credit ratings from 2018 or 2015 to look at either recent information or\n            information corresponding to other data points in this tool.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Note:</strong> Pew collected ratings on general obligation issuance as of September\n                2018 and September 2015.\n                If the state does not issue GO bonds, the rating on the senior-most\n                tax-backed issuance was used instead.\n            </p>\n            <p>\n                <strong>Source:</strong> S&amp;P Global Ratings, state briefs,\n                <a href="https://www.spratings.com/en_US/topic/-/render/topic-detail/u-s-states">\n                    https://www.spratings.com/en_US/topic/-/render/topic-detail/u-s-states\n                </a>\n            </p>\n        </div>\n        <a name="census_region" id="census_region"></a>\n        <h3 class="js-census static">\n            Census region and division\n        </h3>\n        <p>\n            This tool allows users to group states by U.S. Census region and subregion\n            (“division”) to make geographical comparisons. There are four regions and\n            nine divisions. Although geography alone is not always a useful benchmark,\n            state officials often wish to understand more about their neighbors’\n            conditions.\n        </p>\n        <div class="pct-note">\n            <p>\n                <strong>Source:</strong> U.S. Census Bureau, “Census Regions and Divisions of the United\n                States,”\n                <a href="https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf">\n                    https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf\n                </a>\n            </p>\n        </div>\n        <h1>\n        </h1>\n        <br clear="all" />\n        <p>\n            <strong></strong>\n        </p>\n        <div class="pct-endnotes">\n            <div id="edn1">\n                <p>\n                    1.\n                    The literature reviewed included Robert W. Wassmer and Ronald C.\n                    Fisher, “State and Local Government Debt, 1992-2008,” <em>State Tax Notes</em>, Aug. 15, 2011: 427-436; and W. Bartley\n                    Hildreth and Gerald J. Miller, “Debt and Local Economy: Problems in\n                    Benchmarking Local Government Debt Affordability,” <em>Public Budgeting &amp; Finance</em> 22, no. 4 (2002): 99-113.\n                </p>\n            </div>\n            <div id="edn2">\n                <p>\n                    2.\n                    The Pew Charitable Trusts, “Strategies for Managing State Debt”\n                    (2017),\n                    <a href="http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt">\n                        http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt\n                    </a>\n                    .\n                </p>\n            </div>\n            <div id="edn3">\n                <p>\n                    3.\n                    Ibid.\n                </p>\n            </div>\n            <div id="edn4">\n                <p>\n                    4.\n                    For more detail on these data, see The Pew Charitable Trusts,\n                    “Strategies for Managing State Debt,” methodology.\n                </p>\n            </div>\n            <div id="edn5">\n                <p>\n                    5.\n                    For a discussion of the relationship between debt limits and local\n                    borrowing, see D. Roderick Kiewiet and Kristin Szakaly,\n                    “Constitutional Limitations on Borrowing: An Analysis of State\n                    Bonded Indebtedness,” <em>The Journal of Law, Economics &amp; Organization </em>12, no. 1\n                    (1996): 62-97,\n                    <a href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents">\n                        https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents\n                    </a>\n                    .\n                </p>\n            </div>\n            <div id="edn6">\n                <p>\n                    6.\n                    The Pew Charitable Trusts, “Tax Revenue Volatility Varies Across\n                    States, Revenue Streams,” accessed Sept. 10, 2018,\n                    <a href="http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6">\n                        http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6\n                    </a>\n                    .\n                </p>\n            </div>\n            <div id="edn7">\n                <p>\n                    7.\n                    One study found that as economic volatility increases, states\n                    prefer to pay for infrastructure projects with cash rather than\n                    through financing. Wen Wang, Yilin Hou, and William Duncome,\n                    “Determinants of Pay-as-You-Go Financing of Capital Projects:\n                    Evidence From the States,” <em>Public Budgeting &amp; Finance </em>\n                    27, no. 4 (2007): 18-42,\n                    <a href="https://doi.org/10.1111/j.1540-5850.2007.00892.x">\n                        https://doi.org/10.1111/j.1540-5850.2007.00892.x\n                    </a>\n                    .\n                </p>\n            </div>\n            <div id="edn8">\n                <p>\n                    8.\n                    Roy Bahl and William Duncombe, “State and Local Debt Burdens in the\n                    1980s: A Study in Contrast,” <em>Public Administration Review</em>\n                    53, No. 1 (1993): 31-40.\n                </p>\n            </div>\n            <div id="edn9">\n                <p>\n                    9.\n                    States do not use uniform definitions of debt service in their\n                    comprehensive annual financial reports. Each reports debt service\n                    from a unique combination of disparate funds. Using these sources\n                    to create a comparable cross-state measure of debt service to\n                    revenues is therefore difficult without a detailed understanding of\n                    each state’s reporting practices. As a result, many cross-state\n                    comparisons of debt service to revenues are inexact.\n                </p>\n            </div>\n            <div id="edn10">\n                <p>\n                    10.\n                    U.S. Census Bureau, “Annual Survey of State Government Finances,”\n                    <a href="https://www.census.gov/econ/overview/go1500.html">\n                        https://www.census.gov/econ/overview/go1500.html\n                    </a>\n                    . Examples of component units, which are legally separate entities\n                    from the primary state government but perform key functions,\n                    include housing authorities, economic development corporations, and\n                    universities.\n                </p>\n            </div>\n            <div id="edn11">\n                <p>\n                    11.\n                    Jennifer Weiner, “A Guide to State Debt Affordability Studies:\n                    Common Elements and Best Practices,” New England Public Policy\n                    Center at the Federal Reserve Bank of Boston (2013),\n                    <a href="https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx">\n                        https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx\n                    </a>\n                    ; Charles Brecher, Kurt Richwerger, and Marcia Van Wagner, “An\n                    Approach to Measuring the Affordability of State Debt,” <em>Public Budgeting &amp; Finance</em> 23, no. 4 (2003): 65-85,\n                    <a href="https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x">\n                        https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x\n                    </a>\n                    .\n                </p>\n            </div>\n        </div>\n    </div>\n</section>'},function(e,t){e.exports='<footer>\n\t\t<div>\n\t\t\t<p><strong>Download resources:</strong>\n\t\t\t\t\t<a class="pct-download" href="">[placeholder]</a>\n\t\t\t\t\t<a class="pct-download" href="">[placeholder]</a>\n\t\t\t\t</p></div>\n</footer>'},function(e,t,n){e.exports={static:"src-css--static"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
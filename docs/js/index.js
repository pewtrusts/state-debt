!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1);var o=function(){function e(t,n){var r=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"!=typeof t)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=t,this.model=n.model,this.parent=n.parent,this.renderToSelector=n.renderToSelector,this.container=i.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.el=this.prerender(arguments),this.isReady=new Promise(function(e,t){r.resolve=e,r.reject=t})}return r(e,[{key:"prerender",value:function(){var e=i.DOMHelpers.q(this.selector);return e&&!this.rerender?(this.prerendered=!0,e):e?(e.innerHTML="",e):i.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GTMPush=function(e){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:e})},t.publishWindowResize=function(e){var t;window.addEventListener("resize",function(){t||(t=setTimeout(function(){e.setState("resize",document.documentElement.clientWidth),t=null},350))},!1)};t.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(e,t){var n=this,r=t||0;return t&&(this.style.transition="opacity "+t+"s ease-in-out"),new Promise(function(t){var i=window.getComputedStyle(n).getPropertyValue("transition-duration")||r,o=1e3*parseFloat(i);n.fadeOutContent(),setTimeout(function(){n.innerHTML=e,n.classList.remove("no-opacity"),t(!0)},o)})})),t.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(e,t){if(this.length<=e)return this;var n=this.substr(0,e-1);return(t?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var e,t=0;if(0===this.length)return t;for(e=0;e<this.length;e++)t=(t<<5)-t+this.charCodeAt(e),t|=0;return t})),t.DOMHelpers={c:function(e){if(-1!==e.indexOf(".")||-1!==e.indexOf("#")){var t=e.match(/\.([^#.]*)/g)||[],n=e.match(/#([^.]*)/),r=e.match(/^([^.#]+)/),i=document.createElement(r[0]);return t.forEach(function(e){i.classList.add(e.replace(".",""))}),null!==n&&i.setAttribute("id",n[1]),i}return document.createElement(e)},q:function(e){return document.querySelector(e)},qa:function(e){return document.querySelectorAll(e)}}},function(e,t,n){const r=n(3),i={};function o(){console.log(i)}Array.prototype.compare=Array.prototype.compare||function(e){if(this.length!=e.length)return!1;if(0===this.length&&0===e.length)return!0;console.log("in compare"),console.log(this);for(var t=0;t<e.length;t++)if(this[t]!==e[t])return!1;return!0},t.stateModule={logState:o,getState:function(e){return void 0!==i[e]?i[e][0]:void 0},getPreviousState:function(e){return void 0!==i[e]&&void 0!==i[e][1]?i[e][1]:void 0},setState:function(e,t){void 0===i[e]?(i[e]=[t],r.publish(e,t),o()):("string"==typeof t||"number"==typeof t?i[e][0]!==t:!Array.isArray(t)||!Array.isArray(i[e][0])||!t.compare(i[e][0]))&&(i[e].unshift(t),r.publish(e,t),o(),i[e].length>2&&(i[e].length=2))}}},function(e,t,n){(function(e){!function(n,r){"use strict";var i={};n.PubSub=i;var o=n.define;!function(e){var t={},n=-1;function r(e){var t;for(t in e)if(e.hasOwnProperty(t))return!0;return!1}function i(e,t,n){try{e(t,n)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function o(e,t,n){e(t,n)}function a(e,n,r,a){var s,l=t[n],p=a?o:i;if(t.hasOwnProperty(n))for(s in l)l.hasOwnProperty(s)&&p(l[s],e,r)}function s(e,n,i,o){var s=function(e,t,n){return function(){var r=String(e),i=r.lastIndexOf(".");for(a(e,e,t,n);-1!==i;)r=r.substr(0,i),i=r.lastIndexOf("."),a(e,r,t,n)}}(e="symbol"==typeof e?e.toString():e,n,o),l=function(e){var n=String(e),i=Boolean(t.hasOwnProperty(n)&&r(t[n])),o=n.lastIndexOf(".");for(;!i&&-1!==o;)n=n.substr(0,o),o=n.lastIndexOf("."),i=Boolean(t.hasOwnProperty(n)&&r(t[n]));return i}(e);return!!l&&(!0===i?s():setTimeout(s,0),!0)}e.publish=function(t,n){return s(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return s(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,r){if("function"!=typeof r)return!1;e="symbol"==typeof e?e.toString():e,t.hasOwnProperty(e)||(t[e]={});var i="uid_"+String(++n);return t[e][i]=r,i},e.subscribeOnce=function(t,n){var r=e.subscribe(t,function(){e.unsubscribe(r),n.apply(this,arguments)});return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)t.hasOwnProperty(n)&&0===n.indexOf(e)&&delete t[n]},e.unsubscribe=function(n){var r,i,o,a="string"==typeof n&&(t.hasOwnProperty(n)||function(e){var n;for(n in t)if(t.hasOwnProperty(n)&&0===n.indexOf(e))return!0;return!1}(n)),s=!a&&"string"==typeof n,l="function"==typeof n,p=!1;if(!a){for(r in t)if(t.hasOwnProperty(r)){if(i=t[r],s&&i[n]){delete i[n],p=n;break}if(l)for(o in i)i.hasOwnProperty(o)&&i[o]===n&&(delete i[o],p=!0)}return p}e.clearSubscriptions(n)}}(i),"function"==typeof o&&o.amd?o(function(){return i}):(void 0!==e&&e.exports&&(t=e.exports=i),t.PubSub=i,e.exports=t=i)}("object"==typeof window&&window||this)}).call(this,n(14)(e))},function(e,t,n){e.exports={compareColor1:"src-components-comparison--compareColor1",compareColor2:"src-components-comparison--compareColor2",chartContainer:"src-components-comparison--chartContainer",chartLabel:"src-components-comparison--chartLabel",chartLabelText:"src-components-comparison--chartLabelText",chartLabel1:"src-components-comparison--chartLabel1",chartLabel2:"src-components-comparison--chartLabel2",barContainer:"src-components-comparison--barContainer",barContainer1:"src-components-comparison--barContainer1",barContainer2:"src-components-comparison--barContainer2",dataLabel:"src-components-comparison--dataLabel"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=(r=o)&&r.__esModule?r:{default:r};var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),i(t,[{key:"prerender",value:function(){var e=this,n=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.matches=[],this.matches[0]=this.model.data.find(function(t){return t.code===e.data.comparison[0]}),this.matches[1]=this.model.data.find(function(t){return t.code===e.data.comparison[1]}),this.prerendered&&this.rerender,n}},{key:"update",value:function(e,t){this.matches[e]=this.model.data.find(function(e){return e.code===t})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(25)),o=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"prerender",value:function(){var e=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(e.classList.add(i.default.bar,i.default["barColor"+this.data.color]),e.style.transform="translateX("+("FiftyStateView"===this.parent.constructor.name?100*this.placeZero(this.data.field)+"%":0)+") scaleX("+this.linearScale(this.data.d,this.data.field)+")",e)}},{key:"linearScale",value:function(e,t){var n=this.model.types.find(function(e){return e.field===t}),r="FiftyStateView"!==this.parent.constructor.name&&"percent"===n.type?e[t]/1:(e[t]-n.min)/n.spread,i=this.placeZero(t),o=n.crossesZero||"FiftyStateView"!==this.parent.constructor.name?0:.01;return"FiftyStateView"!==this.parent.constructor.name?o+r*(1-o):o+r*(1-o)-i}},{key:"placeZero",value:function(e){var t=this.model.types.find(function(t){return t.field===e}),n=(0-t.min)/t.spread;return n>0?n:0}},{key:"checkIfZero",value:function(){0===this.data.d[this.data.field]?this.el.parentNode.classList.add(i.default.isZero):this.el.parentNode.classList.remove(i.default.isZero)}},{key:"update",value:function(){var e=this;this.checkIfZero(),window.requestAnimationFrame(function(){e.el.style.transform="translateX("+("FiftyStateView"===e.parent.constructor.name?100*e.placeZero(e.data.field)+"%":0)+") scaleX("+e.linearScale(e.data.d,e.data.field)+")"})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatValue=function(e,t){var n,r=this.model.types.find(function(e){return e.field===t}),i=r.type,o=void 0!==r.decimals?r.decimals:"number"===i?1:"currency"===i?2:"percent"===i?1:void 0,a=e[t];switch(i){case"number":n=a.toLocaleString("en-US",{minimumFractionDigits:o});break;case"currency":n=0===o?Math.round(a).toLocaleString("en-US",{style:i,currency:"USD"}).slice(0,-3):a.toLocaleString("en-US",{style:i,currency:"USD"});break;case"percent":n=a.toLocaleString("en-US",{style:i,minimumFractionDigits:o});break;default:n="[unformatted]"+a}return n}},function(e,t,n){var r=n(27),i=n(3),o={};function a(e,t){var n=r(t.toString());return{token:"sub"+r(e+t),fn:n}}e.exports={logSubs:function(){console.log(o)},setSubs:function(e){e.forEach(function(e){var t=e[0],n=e[1],r=a(t,n);if(void 0===o[r.fn]&&(o[r.fn]={}),void 0!==o[r.fn][t])throw"Subscription token is already in use.";o[r.fn][t]=i.subscribe(t,n)})},cancelSub:function(e,t){var n=a(e,t);if(void 0===o[n.fn]||void 0===o[n.fn][e])throw"Subscription does not exist.";i.unsubscribe(o[n.fn][e]),delete o[n.fn][e],0===Object.keys(o[n.fn]).length&&delete o[n.fn]}}},function(e,t,n){"use strict";n.r(t);function r(){}function i(e,t){var n=new r;if(e instanceof r)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var i,o=-1,a=e.length;if(null==t)for(;++o<a;)n.set(o,e[o]);else for(;++o<a;)n.set(t(i=e[o],o,e),i)}else if(e)for(var s in e)n.set(s,e[s]);return n}r.prototype=i.prototype={constructor:r,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var o=i,a=function(){var e,t,n,r=[],i=[];function a(n,i,s,l){if(i>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var p,c,u,d=-1,f=n.length,h=r[i++],m=o(),v=s();++d<f;)(u=m.get(p=h(c=n[d])+""))?u.push(c):m.set(p,[c]);return m.each(function(e,t){l(v,t,a(e,i,s,l))}),v}return n={object:function(e){return a(e,0,s,l)},map:function(e){return a(e,0,p,c)},entries:function(e){return function e(n,o){if(++o>r.length)return n;var a,s=i[o-1];return null!=t&&o>=r.length?a=n.entries():(a=[],n.each(function(t,n){a.push({key:n,values:e(t,o)})})),null!=s?a.sort(function(e,t){return s(e.key,t.key)}):a}(a(e,0,p,c),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return i[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function s(){return{}}function l(e,t,n){e[t]=n}function p(){return o()}function c(e,t,n){e.set(t,n)}function u(){}var d=o.prototype;function f(e,t){var n=new u;if(e instanceof u)e.each(function(e){n.add(e)});else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)n.add(e[r]);else for(;++r<i;)n.add(t(e[r],r,e))}return n}u.prototype=f.prototype={constructor:u,has:d.has,add:function(e){return this["$"+(e+="")]=e,this},remove:d.remove,clear:d.clear,values:d.keys,size:d.size,empty:d.empty,each:d.each};var h=f,m=function(e){var t=[];for(var n in e)t.push(n);return t},v=function(e){var t=[];for(var n in e)t.push(e[n]);return t},y=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t};n.d(t,"nest",function(){return a}),n.d(t,"set",function(){return h}),n.d(t,"map",function(){return o}),n.d(t,"keys",function(){return m}),n.d(t,"values",function(){return v}),n.d(t,"entries",function(){return y})},function(e,t,n){"use strict";(function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.7
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,o=0;o<r.length;o+=1)if(n&&navigator.userAgent.indexOf(r[o])>=0){i=1;break}var a=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},i))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function l(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function p(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=l(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:c(p(e))}var u=n&&!(!window.MSInputMethodContext||!document.documentMode),d=n&&/MSIE 10/.test(navigator.userAgent);function f(e){return 11===e?u:10===e?d:u||d}function h(e){if(!e)return document.documentElement;for(var t=f(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===l(n,"position")?h(n):n:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function v(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,s,l=o.commonAncestorContainer;if(e!==l&&t!==l||r.contains(i))return"BODY"===(s=(a=l).nodeName)||"HTML"!==s&&h(a.firstElementChild)!==a?h(l):l;var p=m(e);return p.host?v(p.host,t):v(e,m(t).host)}function y(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function b(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function g(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],f(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function w(e){var t=e.body,n=e.documentElement,r=f(10)&&getComputedStyle(n);return{height:g("Height",t,n,r),width:g("Width",t,n,r)}}var x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),k=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function C(e){return O({},e,{right:e.left+e.width,bottom:e.top+e.height})}function S(e){var t={};try{if(f(10)){t=e.getBoundingClientRect();var n=y(e,"top"),r=y(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?w(e.ownerDocument):{},a=o.width||e.clientWidth||i.right-i.left,s=o.height||e.clientHeight||i.bottom-i.top,p=e.offsetWidth-a,c=e.offsetHeight-s;if(p||c){var u=l(e);p-=b(u,"x"),c-=b(u,"y"),i.width-=p,i.height-=c}return C(i)}function E(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=f(10),i="HTML"===t.nodeName,o=S(e),a=S(t),s=c(e),p=l(t),u=parseFloat(p.borderTopWidth,10),d=parseFloat(p.borderLeftWidth,10);n&&i&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var h=C({top:o.top-a.top-u,left:o.left-a.left-d,width:o.width,height:o.height});if(h.marginTop=0,h.marginLeft=0,!r&&i){var m=parseFloat(p.marginTop,10),v=parseFloat(p.marginLeft,10);h.top-=u-m,h.bottom-=u-m,h.left-=d-v,h.right-=d-v,h.marginTop=m,h.marginLeft=v}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=y(t,"top"),i=y(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}(h,t)),h}function L(e){if(!e||!e.parentElement||f())return document.documentElement;for(var t=e.parentElement;t&&"none"===l(t,"transform");)t=t.parentElement;return t||document.documentElement}function A(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=i?L(e):v(e,t);if("viewport"===r)o=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=E(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:y(n),s=t?0:y(n,"left");return C({top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:o})}(a,i);else{var s=void 0;"scrollParent"===r?"BODY"===(s=c(p(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===r?e.ownerDocument.documentElement:r;var u=E(s,a,i);if("HTML"!==s.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===l(t,"position"))return!0;var r=p(t);return!!r&&e(r)}(a))o=u;else{var d=w(e.ownerDocument),f=d.height,h=d.width;o.top+=u.top-u.marginTop,o.bottom=f+u.top,o.left+=u.left-u.marginLeft,o.right=h+u.left}}var m="number"==typeof(n=n||0);return o.left+=m?n:n.left||0,o.top+=m?n:n.top||0,o.right-=m?n:n.right||0,o.bottom-=m?n:n.bottom||0,o}function P(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=A(n,r,o,i),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map(function(e){return O({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),p=l.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=p.length>0?p[0].key:l[0].key,u=e.split("-")[1];return c+(u?"-"+u:"")}function T(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return E(n,r?L(t):v(t,n),r)}function j(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function D(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function M(e,t,n){n=n.split("-")[0];var r=j(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",l=o?"height":"width",p=o?"width":"height";return i[a]=t[a]+t[l]/2-r[l]/2,i[s]=n===s?t[s]-r[p]:t[D(s)],i}function I(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function R(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=I(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&s(n)&&(t.offsets.popper=C(t.offsets.popper),t.offsets.reference=C(t.offsets.reference),t=n(t,e))}),t}function B(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function N(e){var t=e.ownerDocument;return t?t.defaultView:window}function F(e,t,n,r){n.updateBound=r,N(e).addEventListener("resize",n.updateBound,{passive:!0});var i=c(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,a=o?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),o||e(c(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function z(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,N(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function q(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function W(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&q(t[n])&&(r="px"),e.style[n]=t[n]+r})}var U=n&&/Firefox/i.test(navigator.userAgent);function Y(e,t,n){var r=I(e,function(e){return e.name===t}),i=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!i){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var V=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],X=V.slice(3);function G(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=X.indexOf(e),r=X.slice(n+1).concat(X.slice(0,n));return t?r.reverse():r}var K={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Z(e,t,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(I(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,p=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(p=p.map(function(e,r){var i=(1===r?!o:o)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return C(s)[t]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(e,i,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){q(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))})}),i}var $={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",p=s?"width":"height",c={start:k({},l,o[l]),end:k({},l,o[l]+o[p]-a[p])};e.offsets.popper=O({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,o=i.popper,a=i.reference,s=r.split("-")[0],l=void 0;return l=q(+n)?[+n,0]:Z(n,o,a,s),"left"===s?(o.top+=l[0],o.left-=l[1]):"right"===s?(o.top+=l[0],o.left+=l[1]):"top"===s?(o.left+=l[0],o.top-=l[1]):"bottom"===s&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||h(e.instance.popper);e.instance.reference===n&&(n=h(n));var r=H("transform"),i=e.instance.popper.style,o=i.top,a=i.left,s=i[r];i.top="",i.left="",i[r]="";var l=A(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);i.top=o,i.left=a,i[r]=s,t.boundaries=l;var p=t.priority,c=e.offsets.popper,u={primary:function(e){var n=c[e];return c[e]<l[e]&&!t.escapeWithReference&&(n=Math.max(c[e],l[e])),k({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>l[e]&&!t.escapeWithReference&&(r=Math.min(c[n],l[e]-("right"===e?c.width:c.height))),k({},n,r)}};return p.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=O({},c,u[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",l=a?"left":"top",p=a?"width":"height";return n[s]<o(r[l])&&(e.offsets.popper[l]=o(r[l])-n[p]),n[l]>o(r[s])&&(e.offsets.popper[l]=o(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!Y(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,a=o.popper,s=o.reference,p=-1!==["left","right"].indexOf(i),c=p?"height":"width",u=p?"Top":"Left",d=u.toLowerCase(),f=p?"left":"top",h=p?"bottom":"right",m=j(r)[c];s[h]-m<a[d]&&(e.offsets.popper[d]-=a[d]-(s[h]-m)),s[d]+m>a[h]&&(e.offsets.popper[d]+=s[d]+m-a[h]),e.offsets.popper=C(e.offsets.popper);var v=s[d]+s[c]/2-m/2,y=l(e.instance.popper),b=parseFloat(y["margin"+u],10),g=parseFloat(y["border"+u+"Width"],10),w=v-e.offsets.popper[d]-b-g;return w=Math.max(Math.min(a[c]-m,w),0),e.arrowElement=r,e.offsets.arrow=(k(n={},d,Math.round(w)),k(n,f,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(B(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=A(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],i=D(r),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case K.FLIP:a=[r,i];break;case K.CLOCKWISE:a=G(r);break;case K.COUNTERCLOCKWISE:a=G(r,!0);break;default:a=t.behavior}return a.forEach(function(s,l){if(r!==s||a.length===l+1)return e;r=e.placement.split("-")[0],i=D(r);var p=e.offsets.popper,c=e.offsets.reference,u=Math.floor,d="left"===r&&u(p.right)>u(c.left)||"right"===r&&u(p.left)<u(c.right)||"top"===r&&u(p.bottom)>u(c.top)||"bottom"===r&&u(p.top)<u(c.bottom),f=u(p.left)<u(n.left),h=u(p.right)>u(n.right),m=u(p.top)<u(n.top),v=u(p.bottom)>u(n.bottom),y="left"===r&&f||"right"===r&&h||"top"===r&&m||"bottom"===r&&v,b=-1!==["top","bottom"].indexOf(r),g=!!t.flipVariations&&(b&&"start"===o&&f||b&&"end"===o&&h||!b&&"start"===o&&m||!b&&"end"===o&&v);(d||y||g)&&(e.flipped=!0,(d||y)&&(r=a[l+1]),g&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=r+(o?"-"+o:""),e.offsets.popper=O({},e.offsets.popper,M(e.instance.popper,e.offsets.reference,e.placement)),e=R(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(s?i[a?"width":"height"]:0),e.placement=D(t),e.offsets.popper=C(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!Y(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=I(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=I(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,s=h(e.instance.popper),l=S(s),p={position:i.position},c=function(e,t){var n=e.offsets,r=n.popper,i=n.reference,o=Math.round,a=Math.floor,s=function(e){return e},l=o(i.width),p=o(r.width),c=-1!==["left","right"].indexOf(e.placement),u=-1!==e.placement.indexOf("-"),d=t?c||u||l%2==p%2?o:a:s,f=t?o:s;return{left:d(l%2==1&&p%2==1&&!u&&t?r.left-1:r.left),top:f(r.top),bottom:f(r.bottom),right:d(r.right)}}(e,window.devicePixelRatio<2||!U),u="bottom"===n?"top":"bottom",d="right"===r?"left":"right",f=H("transform"),m=void 0,v=void 0;if(v="bottom"===u?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-l.height+c.bottom:c.top,m="right"===d?"HTML"===s.nodeName?-s.clientWidth+c.right:-l.width+c.right:c.left,a&&f)p[f]="translate3d("+m+"px, "+v+"px, 0)",p[u]=0,p[d]=0,p.willChange="transform";else{var y="bottom"===u?-1:1,b="right"===d?-1:1;p[u]=v*y,p[d]=m*b,p.willChange=u+", "+d}var g={"x-placement":e.placement};return e.attributes=O({},g,e.attributes),e.styles=O({},p,e.styles),e.arrowStyles=O({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return W(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&W(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var o=T(i,t,e,n.positionFixed),a=P(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),W(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},J=function(){function e(t,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=a(this.update.bind(this)),this.options=O({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(O({},e.Defaults.modifiers,i.modifiers)).forEach(function(t){r.options.modifiers[t]=O({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return O({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return _(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=T(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=P(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=M(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=R(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,B(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return z.call(this)}}]),e}();J.Utils=("undefined"!=typeof window?window:e).PopperUtils,J.placements=V,J.Defaults=$,t.a=J}).call(this,n(29))},function(e,t,n){"use strict";n(1);var r,i=n(12),o=(r=i)&&r.__esModule?r:{default:r};n(42);var a=new o.default("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&a.prerender(),a.init()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(9)),o=y(n(13)),a=n(2),s=n(1),l=y(n(15)),p=y(n(16)),c=y(n(17)),u=y(n(18)),d=y(n(19)),f=y(n(30)),h=y(n(38)),m=y(n(40)),v=y(n(41));function y(e){return e&&e.__esModule?e:{default:e}}function b(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(0,s.publishWindowResize)(a.stateModule);var g={groups:p.default,types:c.default,dict:u.default},w=[],x=0;function _(){var e=this;return new Promise(function(t,n){var r=e.el;o.default.parse(""+l.default,{download:!0,dynamicTyping:!0,header:!0,fastMode:!0,skipEmptyLines:!0,beforeFirstChunk:function(e){var t=e.hashCode();window.IS_PRERENDERING?r.setAttribute("data-data-hash",t):t.toString()!==r.getAttribute("data-data-hash")&&(r.setAttribute("data-data-mismatch",!0),console.log("data mismatch"),g.isMismatched=!0)},complete:function(n){w.length=0;var r=n.data;g.data=r,g.types.forEach(function(e){if("text"!==e.type){var t=r.map(function(t){return t[e.field]}).filter(function(e){return null!==e});e.max=Math.max.apply(Math,b(t)),e.min=Math.min.apply(Math,b(t)),e.spread=e.max-e.min,e.crossesZero=e.max*e.min<=0}}),g.typesNested=i.nest().key(function(e){return e.group}).entries(g.types),console.log(g),w.push(e.createComponent(g,d.default,"div#comparison-view",{renderToSelector:"#section-comparison .js-inner-content",rerenderOnDataMismatch:!0,parent:e}),e.createComponent(g,f.default,"div#fifty-state-view",{renderToSelector:"#section-states .js-inner-content",rerenderOnDataMismatch:!0,parent:e})),t(!0)},error:function(e){n(e)}})})}var k=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,h.default),r(t,[{key:"prerender",value:function(){console.log("prerender"),this.el.insertAdjacentHTML("beforeend",m.default),this.el.insertAdjacentHTML("beforeend",v.default),_.call(this).then(function(){console.log(g),w.forEach(function(e){e.container.appendChild(e.el)})})}},{key:"init",value:function(){var e=this;console.log("init"),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this),this.attachSectionOpenClose(),this.initStaticAnchorLinks(),_.call(this).then(function(){w.forEach(function(t){t.init(e)})})}},{key:"initStaticAnchorLinks",value:function(){document.querySelectorAll(".pct-static-anchor").forEach(function(e){var t=document.querySelector("#"+e.href.split("#")[1]);e.addEventListener("click",function(e){e.preventDefault(),t.scrollIntoView({behavior:"smooth"})})})}},{key:"attachSectionOpenClose",value:function(){function e(){console.log(this.parentNode),this.parentNode.querySelector(".js-inner-content").classList.toggle("pct-hide"),this.classList.toggle("pct-is-closed"),this.blur()}document.querySelectorAll("#pew-app section > h2").forEach(function(t){t.addEventListener("click",e),t.addEventListener("keyup",function(t){13===t.keyCode&&e.call(this)})})}},{key:"returnMoreLink",value:function(e){function t(){window.scrollTo({top:x,behavior:"smooth"}),this.removeEventListener("click",t),this.classList.remove("showGoBack")}console.log(e);var n=document.createElement("a");"credit2015"!==e&&"credit2018"!==e||(e="credit_rating");var r=document.querySelector(".js-"+e);return n.innerText="more",n.href="#"+e,n.addEventListener("click",function(e){e.preventDefault(),x=window.pageYOffset,r&&(r.scrollIntoView({behavior:"smooth",block:"center"}),document.querySelectorAll(".showGoBack").forEach(function(e){e.classList.remove("showGoBack")}),r.classList.add("showGoBack"),r.addEventListener("click",t))}),r?n:null}}]),t}();t.default=k},function(e,t,n){var r,i,o;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),i=[],void 0===(o="function"==typeof(r=function(){"use strict";var e,t,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},r=!n.document&&!!n.postMessage,i=r&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),o=!1,a={},s=0,l={parse:function(t,r){var i=(r=r||{}).dynamicTyping||!1;if(k(i)&&(r.dynamicTypingFunction=i,i={}),r.dynamicTyping=i,r.transform=!!k(r.transform)&&r.transform,r.worker&&l.WORKERS_SUPPORTED){var p=function(){if(!l.WORKERS_SUPPORTED)return!1;if(!o&&null===l.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var t=l.SCRIPT_PATH||e;t+=(-1!==t.indexOf("?")?"&":"?")+"papaworker";var r=new n.Worker(t);return r.onmessage=b,r.id=s++,a[r.id]=r}();return p.userStep=r.step,p.userChunk=r.chunk,p.userComplete=r.complete,p.userError=r.error,r.step=k(r.step),r.chunk=k(r.chunk),r.complete=k(r.complete),r.error=k(r.error),delete r.worker,void p.postMessage({input:t,config:r,workerId:p.id})}var c=null;return l.NODE_STREAM_INPUT,"string"==typeof t?c=r.download?new u(r):new f(r):!0===t.readable&&k(t.read)&&k(t.on)?c=new h(r):(n.File&&t instanceof File||t instanceof Object)&&(c=new d(r)),c.stream(t)},unparse:function(e,t){var n=!1,r=!0,i=",",o="\r\n",a='"',s=!1;"object"==typeof t&&("string"!=typeof t.delimiter||l.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(i=t.delimiter),("boolean"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(s=t.skipEmptyLines),"string"==typeof t.newline&&(o=t.newline),"string"==typeof t.quoteChar&&(a=t.quoteChar),"boolean"==typeof t.header&&(r=t.header));var p=new RegExp(v(a),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,s);if("object"==typeof e[0])return u(c(e[0]),e,s)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:c(e.data[0])),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],s);throw"exception: Unable to serialize unrecognized input";function c(e){if("object"!=typeof e)return[];var t=[];for(var n in e)t.push(n);return t}function u(e,t,n){var a="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var s=Array.isArray(e)&&0<e.length,l=!Array.isArray(t[0]);if(s&&r){for(var p=0;p<e.length;p++)0<p&&(a+=i),a+=d(e[p],p);0<t.length&&(a+=o)}for(var c=0;c<t.length;c++){var u=s?e.length:t[c].length,f=!1,h=s?0===Object.keys(t[c]).length:0===t[c].length;if(n&&!s&&(f="greedy"===n?""===t[c].join("").trim():1===t[c].length&&0===t[c][0].length),"greedy"===n&&s){for(var m=[],v=0;v<u;v++){var y=l?e[v]:v;m.push(t[c][y])}f=""===m.join("").trim()}if(!f){for(var b=0;b<u;b++){0<b&&!h&&(a+=i);var g=s&&l?e[b]:b;a+=d(t[c][g],b)}c<t.length-1&&(!n||0<u&&!h)&&(a+=o)}}return a}function d(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);e=e.toString().replace(p,a+a);var r="boolean"==typeof n&&n||Array.isArray(n)&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(-1<e.indexOf(t[n]))return!0;return!1}(e,l.BAD_DELIMITERS)||-1<e.indexOf(i)||" "===e.charAt(0)||" "===e.charAt(e.length-1);return r?a+e+a:e}}};if(l.RECORD_SEP=String.fromCharCode(30),l.UNIT_SEP=String.fromCharCode(31),l.BYTE_ORDER_MARK="\ufeff",l.BAD_DELIMITERS=["\r","\n",'"',l.BYTE_ORDER_MARK],l.WORKERS_SUPPORTED=!r&&!!n.Worker,l.SCRIPT_PATH=null,l.NODE_STREAM_INPUT=1,l.LocalChunkSize=10485760,l.RemoteChunkSize=5242880,l.DefaultDelimiter=",",l.Parser=y,l.ParserHandle=m,l.NetworkStreamer=u,l.FileStreamer=d,l.StringStreamer=f,l.ReadableStreamStreamer=h,n.jQuery){var p=n.jQuery;p.fn.parse=function(e){var t=e.config||{},r=[];return this.each(function(e){if("INPUT"!==p(this).prop("tagName").toUpperCase()||"file"!==p(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var i=0;i<this.files.length;i++)r.push({file:this.files[i],inputElem:this,instanceConfig:p.extend({},t)})}),i(),this;function i(){if(0!==r.length){var t,n,i,a=r[0];if(k(e.before)){var s=e.before(a.file,a.inputElem);if("object"==typeof s){if("abort"===s.action)return t=a.file,n=a.inputElem,i=s.reason,void(k(e.error)&&e.error({name:"AbortError"},t,n,i));if("skip"===s.action)return void o();"object"==typeof s.config&&(a.instanceConfig=p.extend(a.instanceConfig,s.config))}else if("skip"===s)return void o()}var c=a.instanceConfig.complete;a.instanceConfig.complete=function(e){k(c)&&c(e,a.file,a.inputElem),o()},l.parse(a.file,a.instanceConfig)}else k(e.complete)&&e.complete()}function o(){r.splice(0,1),i()}}}function c(e){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=x(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new m(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&k(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1;var o=this._partialLine+e;this._partialLine="";var a=this._handle.parse(o,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=a.meta.cursor;this._finished||(this._partialLine=o.substring(s-this._baseIndex),this._baseIndex=s),a&&a.data&&(this._rowCount+=a.data.length);var p=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(i)n.postMessage({results:a,workerId:l.WORKER_ID,finished:p});else if(k(this._config.chunk)&&!t){if(this._config.chunk(a,this._handle),this._handle.paused()||this._handle.aborted())return;a=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(a.data),this._completeResults.errors=this._completeResults.errors.concat(a.errors),this._completeResults.meta=a.meta),this._completed||!p||!k(this._config.complete)||a&&a.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),p||a&&a.meta.paused||this._nextChunk(),a}},this._sendError=function(e){k(this._config.error)?this._config.error(e):i&&this._config.error&&n.postMessage({workerId:l.WORKER_ID,error:e,finished:!1})}}function u(e){var t;(e=e||{}).chunkSize||(e.chunkSize=l.RemoteChunkSize),c.call(this,e),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),r||(t.onload=_(this._chunkLoaded,this),t.onerror=_(this._chunkError,this)),t.open("GET",this._input,!r),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var n in e)t.setRequestHeader(n,e[n])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+i),t.setRequestHeader("If-None-Match","webkit-no-cache")}try{t.send()}catch(e){this._chunkError(e.message)}r&&0===t.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var e;4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(e=t.getResponseHeader("Content-Range"))?-1:parseInt(e.substr(e.lastIndexOf("/")+1))),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(new Error(n))}}function d(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=l.LocalChunkSize),c.call(this,e);var r="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,r?((t=new FileReader).onload=_(this._chunkLoaded,this),t.onerror=_(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var i=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,i)}var o=t.readAsText(e,this._config.encoding);r||this._chunkLoaded({target:{result:o}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function f(e){var t;c.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,n=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(n)}}}function h(e){c.call(this,e=e||{});var t=[],n=!0,r=!1;this.pause=function(){c.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){c.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):n=!0},this._streamData=_(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=_(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=_(function(){this._streamCleanUp(),r=!0,this._streamData("")},this),this._streamCleanUp=_(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function m(e){var t,n,r,i=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,o=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,a=this,s=0,p=0,c=!1,u=!1,d=[],f={data:[],errors:[],meta:{}};if(k(e.step)){var h=e.step;e.step=function(t){if(f=t,g())b();else{if(b(),0===f.data.length)return;s+=t.data.length,e.preview&&s>e.preview?n.abort():h(f,a)}}}function m(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function b(){if(f&&r&&(_("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+l.DefaultDelimiter+"'"),r=!1),e.skipEmptyLines)for(var t=0;t<f.data.length;t++)m(f.data[t])&&f.data.splice(t--,1);return g()&&function(){if(f){for(var t=0;g()&&t<f.data.length;t++)for(var n=0;n<f.data[t].length;n++){var r=f.data[t][n];e.trimHeaders&&(r=r.trim()),d.push(r)}f.data.splice(0,1)}}(),function(){if(!f||!e.header&&!e.dynamicTyping&&!e.transform)return f;for(var t=0;t<f.data.length;t++){var n,r=e.header?{}:[];for(n=0;n<f.data[t].length;n++){var i=n,o=f.data[t][n];e.header&&(i=n>=d.length?"__parsed_extra":d[n]),e.transform&&(o=e.transform(o,i)),o=w(i,o),"__parsed_extra"===i?(r[i]=r[i]||[],r[i].push(o)):r[i]=o}f.data[t]=r,e.header&&(n>d.length?_("FieldMismatch","TooManyFields","Too many fields: expected "+d.length+" fields but parsed "+n,p+t):n<d.length&&_("FieldMismatch","TooFewFields","Too few fields: expected "+d.length+" fields but parsed "+n,p+t))}return e.header&&f.meta&&(f.meta.fields=d),p+=f.data.length,f}()}function g(){return e.header&&0===d.length}function w(t,n){return r=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[r]&&(e.dynamicTyping[r]=e.dynamicTypingFunction(r)),!0===(e.dynamicTyping[r]||e.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(i.test(n)?parseFloat(n):o.test(n)?new Date(n):""===n?null:n):n;var r}function _(e,t,n,r){f.errors.push({type:e,code:t,message:n,row:r})}this.parse=function(i,o,a){var s=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substr(0,1048576);var n=new RegExp(v(t)+"([^]*?)"+v(t),"gm"),r=(e=e.replace(n,"")).split("\r"),i=e.split("\n"),o=1<i.length&&i[0].length<r[0].length;if(1===r.length||o)return"\n";for(var a=0,s=0;s<r.length;s++)"\n"===r[s][0]&&a++;return a>=r.length/2?"\r\n":"\r"}(i,s)),r=!1,e.delimiter)k(e.delimiter)&&(e.delimiter=e.delimiter(i),f.meta.delimiter=e.delimiter);else{var p=function(t,n,r,i){for(var o,a,s,p=[",","\t","|",";",l.RECORD_SEP,l.UNIT_SEP],c=0;c<p.length;c++){var u=p[c],d=0,f=0,h=0;s=void 0;for(var v=new y({comments:i,delimiter:u,newline:n,preview:10}).parse(t),b=0;b<v.data.length;b++)if(r&&m(v.data[b]))h++;else{var g=v.data[b].length;f+=g,void 0!==s?1<g&&(d+=Math.abs(g-s),s=g):s=0}0<v.data.length&&(f/=v.data.length-h),(void 0===a||a<d)&&1.99<f&&(a=d,o=u)}return{successful:!!(e.delimiter=o),bestDelimiter:o}}(i,e.newline,e.skipEmptyLines,e.comments);p.successful?e.delimiter=p.bestDelimiter:(r=!0,e.delimiter=l.DefaultDelimiter),f.meta.delimiter=e.delimiter}var u=x(e);return e.preview&&e.header&&u.preview++,t=i,n=new y(u),f=n.parse(t,o,a),b(),c?{meta:{paused:!0}}:f||{meta:{paused:!1}}},this.paused=function(){return c},this.pause=function(){c=!0,n.abort(),t=t.substr(n.getCharIndex())},this.resume=function(){c=!1,a.streamer.parseChunk(t,!0)},this.aborted=function(){return u},this.abort=function(){u=!0,n.abort(),f.meta.aborted=!0,k(e.complete)&&e.complete(f),t=""}}function v(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function y(e){var t,n=(e=e||{}).delimiter,r=e.newline,i=e.comments,o=e.step,a=e.preview,s=e.fastMode,p=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(p=e.escapeChar),("string"!=typeof n||-1<l.BAD_DELIMITERS.indexOf(n))&&(n=","),i===n)throw"Comment character same as delimiter";!0===i?i="#":("string"!=typeof i||-1<l.BAD_DELIMITERS.indexOf(i))&&(i=!1),"\n"!==r&&"\r"!==r&&"\r\n"!==r&&(r="\n");var c=0,u=!1;this.parse=function(e,l,d){if("string"!=typeof e)throw"Input must be a string";var f=e.length,h=n.length,m=r.length,y=i.length,b=k(o),g=[],w=[],x=[],_=c=0;if(!e)return R();if(s||!1!==s&&-1===e.indexOf(t)){for(var O=e.split(r),C=0;C<O.length;C++){if(x=O[C],c+=x.length,C!==O.length-1)c+=r.length;else if(d)return R();if(!i||x.substr(0,y)!==i){if(b){if(g=[],j(x.split(n)),B(),u)return R()}else j(x.split(n));if(a&&a<=C)return g=g.slice(0,a),R(!0)}}return R()}for(var S,E=e.indexOf(n,c),L=e.indexOf(r,c),A=new RegExp(v(p)+v(t),"g");;)if(e[c]!==t)if(i&&0===x.length&&e.substr(c,y)===i){if(-1===L)return R();c=L+m,L=e.indexOf(r,c),E=e.indexOf(n,c)}else if(-1!==E&&(E<L||-1===L))x.push(e.substring(c,E)),c=E+h,E=e.indexOf(n,c);else{if(-1===L)break;if(x.push(e.substring(c,L)),I(L+m),b&&(B(),u))return R();if(a&&g.length>=a)return R(!0)}else for(S=c,c++;;){if(-1===(S=e.indexOf(t,S+1)))return d||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:g.length,index:c}),M();if(S===f-1)return M(e.substring(c,S).replace(A,t));if(t!==p||e[S+1]!==p){if(t===p||0===S||e[S-1]!==p){var P=D(-1===L?E:Math.min(E,L));if(e[S+1+P]===n){x.push(e.substring(c,S).replace(A,t)),c=S+1+P+h,E=e.indexOf(n,c),L=e.indexOf(r,c);break}var T=D(L);if(e.substr(S+1+T,m)===r){if(x.push(e.substring(c,S).replace(A,t)),I(S+1+T+m),E=e.indexOf(n,c),b&&(B(),u))return R();if(a&&g.length>=a)return R(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:g.length,index:c}),S++}}else S++}return M();function j(e){g.push(e),_=c}function D(t){var n=0;if(-1!==t){var r=e.substring(S+1,t);r&&""===r.trim()&&(n=r.length)}return n}function M(t){return d||(void 0===t&&(t=e.substr(c)),x.push(t),c=f,j(x),b&&B()),R()}function I(t){c=t,j(x),x=[],L=e.indexOf(r,c)}function R(e){return{data:g,errors:w,meta:{delimiter:n,linebreak:r,aborted:u,truncated:!!e,cursor:_+(l||0)}}}function B(){o(R()),g=[],w=[]}},this.abort=function(){u=!0},this.getCharIndex=function(){return c}}function b(e){var t=e.data,n=a[t.workerId],r=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var i={abort:function(){r=!0,g(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(k(n.userStep)){for(var o=0;o<t.results.data.length&&(n.userStep({data:[t.results.data[o]],errors:t.results.errors,meta:t.results.meta},i),!r);o++);delete t.results}else k(n.userChunk)&&(n.userChunk(t.results,i,t.file),delete t.results)}t.finished&&!r&&g(t.workerId,t.results)}function g(e,t){var n=a[e];k(n.userComplete)&&n.userComplete(t),n.terminate(),delete a[e]}function w(){throw"Not implemented."}function x(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var n in e)t[n]=x(e[n]);return t}function _(e,t){return function(){e.apply(t,arguments)}}function k(e){return"function"==typeof e}return i?n.onmessage=function(e){var t=e.data;if(void 0===l.WORKER_ID&&t&&(l.WORKER_ID=t.workerId),"string"==typeof t.input)n.postMessage({workerId:l.WORKER_ID,results:l.parse(t.input,t.config),finished:!0});else if(n.File&&t.input instanceof File||t.input instanceof Object){var r=l.parse(t.input,t.config);r&&n.postMessage({workerId:l.WORKER_ID,results:r,finished:!0})}}:l.WORKERS_SUPPORTED&&(t=document.getElementsByTagName("script"),e=t.length?t[t.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){o=!0},!0):o=!0),(u.prototype=Object.create(c.prototype)).constructor=u,(d.prototype=Object.create(c.prototype)).constructor=d,(f.prototype=Object.create(f.prototype)).constructor=f,(h.prototype=Object.create(c.prototype)).constructor=h,l})?r.apply(t,i):r)||(e.exports=o)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){e.exports=n.p+"data/data.csv?v=ddda10"},function(e){e.exports=["Borrowing Practices","Fiscal Conditions and Infrastructure Needs","Debt Levels","Credit Rating"]},function(e){e.exports=[{field:"debt_limit_type",type:"text",group:1,order:1,label:"General obligation debt limit type",tooltip:"The kind of limit the state has on general obligation borrowing, one of the most common types of debt issued by states. These limits affect how states borrow."},{field:"centralization",type:"percent",group:1,order:2,label:"Centralization",tooltip:"The degree to which borrowing is done by the state itself rather than by component units. Higher values mean that borrowing in the state is more centralized."},{field:"state_local_division",type:"percent",group:1,order:3,label:"State-local borrowing division",tooltip:"The share of combined state and local debt issued by local governments. States in which local governments borrow less tend to have higher state debt levels."},{field:"revenue_volatility",type:"number",group:2,order:1,label:"Revenue volatility",tooltip:"A measure of variation in tax collections. Low scores mean that revenue levels are similar from year to year, while high scores indicate that revenue varies more. More volatile states should plan for greater uncertainty."},{field:"ten_year_pop_growth",type:"percent",group:2,order:2,label:"Population growth",tooltip:"The 10-year population growth rate from 2008 to 2017. Growing populations are associated with greater infrastructure investment."},{field:"debt_per_capita",type:"currency",decimals:0,group:3,order:1,label:"Debt per capita",tooltip:"Total debt relative to a state’s population."},{field:"debt_percent_SPI",type:"percent",group:3,order:2,label:"Debt as a percentage of SPI",tooltip:"Total debt relative to state personal income, a measure of economic resources.",isDefaultSelection:!0},{field:"credit2015",type:"text",group:4,order:1,label:2015,tooltip:"Standard & Poor’s general obligation or issuer credit rating."},{field:"credit2018",type:"text",group:4,order:2,label:2018,tooltip:"Standard & Poor’s general obligation or issuer credit rating."},{field:"census",type:"text",group:null,order:null,label:"Census region and division",tooltip:"Policymakers are often interested in understanding trends in neighboring states, but borrowing practices often differ widely among states with shared borders."}]},function(e){e.exports={census:["N/A","Northeast—New England","Northeast—Middle Atlantic","Midwest—East North Central","Midwest—West North Central","South—South Atlantic","South—East South Central","South—West South Central","West—Mountain","West—Pacific"],credit2018:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"],credit2015:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=d(n(0));n(20);var o=d(n(21));n(22);var a=n(2),s=d(n(23)),l=d(n(24)),p=d(n(26)),c=d(n(8)),u=d(n(28));function d(e){return e&&e.__esModule?e:{default:e}}var f=["US","AL"],h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,[{key:"prerender",value:function(){var e,n=this;this.comparisons=[],this.model.groups.forEach(function(e,t){n.model.typesNested[t].values.forEach(function(e){var t;t="text"===e.type?n.parent.createComponent(n.model,s.default,"div.js-text-compare-"+e.field,{rerenderOnDataMismatch:!0,parent:n,data:{comparison:f,field:e.field}}):n.parent.createComponent(n.model,l.default,"div.js-text-compare-"+e.field,{rerenderOnDataMismatch:!0,parent:n,data:{comparison:f,field:e.field}}),n.comparisons.push(t)})}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.comparisons));var r=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.prerendered&&!this.rerender)return r;var i=0;return this.model.groups.forEach(function(e,t){var a=document.createElement("div");a.classList.add(o.default[e.cleanString()]),a.insertAdjacentHTML("afterbegin",'<h3 class="'+o.default.groupHeader+'">'+e+"</h3>");var s=document.createElement("div");s.classList.add(o.default.typeContainer,o.default[e.cleanString()]),n.model.typesNested[t].values.forEach(function(e){var t=document.createElement("div");t.classList.add(o.default.typeDiv,o.default[e.field]),t.insertAdjacentHTML("afterbegin",'<h4 class="'+o.default.typeHeader+" "+(e.tooltip?o.default.withTooltip:"withoutTooltip")+'" data-field="'+e.field+'" data-content="'+(e.tooltip?e.tooltip:"")+'">'+e.label+"</h4>"),t.appendChild(n.comparisons[i].el),i++,s.appendChild(t)}),a.appendChild(s),r.appendChild(a)}),r}},{key:"init",value:function(){var e=this;this.initializeAutocompletes(),this.initializeTooltips(),c.default.setSubs([["compare",function(t,n){e.update(t,n)}]]);var t,n,r=this.model.data.map(function(e){return e.code}),i=r.indexOf("US");r.splice(i,1),a.stateModule.setState("compare.1",r[(t=0,n=r.length-1,Math.floor(Math.random()*(n-t+1)+t))])}},{key:"initializeTooltips",value:function(){var e=document.querySelectorAll("."+o.default.withTooltip),t=this;(0,u.default)(e,{interactive:!0,content:function(e){var n=document.createElement("div"),r=t.parent.returnMoreLink(e.dataset.field);return n.textContent=e.dataset.content+" ",r&&n.appendChild(t.parent.returnMoreLink(e.dataset.field)),n}})}},{key:"update",value:function(e,t){console.log(this,e,t),this.comparisons.forEach(function(n){n.update(e,t)}),document.querySelector("#compare-input-"+e.split(".")[1]).value=this.model.data.find(function(e){return e.code===t}).state}},{key:"initializeAutocompletes",value:function(){var e=this,t=this.model.data.map(function(e){return{state:e.state,code:e.code}}),n=[!1,!1];function r(e){console.log(this,e),"mouseenter"===e.type&&this.focus(),"click"===e.type&&(console.log(this.parentNode.parentNode),this.parentNode.parentNode.focus())}function i(e){var r=a.stateModule.getState("compare."+e)||f[e],i=this.parentNode.querySelectorAll(".autoComplete_results_list li");console.log(r),this.value=t.find(function(e){return e.code===r}).state,i[0]&&(i[0].parentNode.innerHTML=""),n[e]=!1}[0,1].forEach(function(s){var l=document.querySelector("#compare-input-"+s),c=document.querySelector("#autoComplete_wrapper-"+s);l.addEventListener("click",function(e){e.stopPropagation()}),document.body.addEventListener("click",function(){console.log(n),n[s]&&i.call(l,s)}),l.classList.add("autoComplete",o.default["autoComplete"+s]),c.classList.add(o.default["autoComplete_wrapper-"+s]),l.addEventListener("keyup",function(){n[s]=!0,this.parentNode.querySelectorAll(".autoComplete_results_list li").forEach(function(e){console.log(e),e.addEventListener("mouseenter",r),e.addEventListener("mouseleave",r)})}),l.addEventListener("keydown",function(e){var r=this;console.log(e,this);var o=this.parentNode.querySelectorAll(".autoComplete_results_list li");9===e.keyCode&&1===o.length&&(this.value!==o[0].dataset.result?(e.preventDefault(),this.value=o[0].dataset.result):i.call(this,s)),9===e.keyCode&&(o.length>1||0===o.length)&&i.call(this,s),13===e.keyCode&&1===o.length&&(this.value=o[0].dataset.result,a.stateModule.setState("compare."+s,t.find(function(e){return e.state===r.value}).code),o[0].parentNode.innerHTML="",n[s]=!1)}),e.children.push(new p.default({data:{src:t,key:"state"},highlight:!0,onSelection:function(t){console.log(t,e),a.stateModule.setState("compare."+s,t.selection.code),l.value=t.selection.state,l.focus(),n[s]=!1},placeHolder:"Select state",resultsList:{container:function(){return"autoComplete_results_list"},destination:document.querySelector("#compare-input-"+s),position:"afterend"},searchEngine:"strict",selector:"#compare-input-"+s,threshold:2})),function(e){var t=document.querySelector("#autoComplete_wrapper-"+e+" .autoComplete_results_list");new MutationObserver(function(e,t){console.log(e,t),e.forEach(function(e){e.addedNodes.forEach(function(e){e.addEventListener("mouseenter",r),e.setAttribute("tabindex",0)})})}).observe(t,{attributes:!1,childList:!0,subtree:!1})}(s),l.setAttribute("value",e.model.data.find(function(e){return e.code===f[s]}).state),console.log(e.children)})}}]),t}();t.default=h},function(e,t,n){e.exports={autoComplete_wrapper:"autoComplete_wrapper",autoComplete:"autoComplete",autoComplete_results_list:"autoComplete_results_list",autoComplete_result:"autoComplete_result",autoComplete_highlighted:"autoComplete_highlighted"}},function(e,t,n){e.exports={groupHeader:"src-views-state-comparison--groupHeader",typeContainer:"src-views-state-comparison--typeContainer","credit-rating":"src-views-state-comparison--credit-rating",typeDiv:"src-views-state-comparison--typeDiv",typeHeader:"src-views-state-comparison--typeHeader",debt_limit_type:"src-views-state-comparison--debt_limit_type",credit2015:"src-views-state-comparison--credit2015",credit2018:"src-views-state-comparison--credit2018",autoComplete0:"src-views-state-comparison--autoComplete0","autoComplete_wrapper-0":"src-views-state-comparison--autoComplete_wrapper-0",autoComplete1:"src-views-state-comparison--autoComplete1","autoComplete_wrapper-1":"src-views-state-comparison--autoComplete_wrapper-1",withTooltip:"src-views-state-comparison--withTooltip"}},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=s(n(4)),a=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(console.log(this.model.dict,this.data.field),e.innerHTML=this.returnTemplate(0)+this.returnTemplate(1),e)}},{key:"update",value:function(e,n){var r=parseInt(e.split(".")[1]);console.log(r),i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"update",this).call(this,r,n),console.log(this,r),this.el.children[r].fadeInContent(this.returnTemplate(r))}},{key:"returnTemplate",value:function(e){return'<p class="'+o.default.chartLabel+" "+o.default.chartLabelText+'">'+this.matches[e].state+': <span class="'+o.default["compareColor"+(e+1)]+'">'+(void 0!==this.model.dict[this.data.field]?this.model.dict[this.data.field][[this.matches[e][this.data.field]]]:this.matches[e][this.data.field])+"</span></p>"}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=p(n(4)),a=p(n(5)),s=p(n(6)),l=n(7);function p(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.bars=[],[0,1].forEach(function(e){n.bars.push(n.parent.parent.createComponent(n.model,s.default,"div.js-bar-compare-"+n.data.field+"-"+e,{parent:n,data:{d:n.matches[e],field:n.data.field,color:e+1}}))}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.bars)),this.prerendered&&!this.rerender?r:(r.innerHTML=this.returnTemplate(),r)}},{key:"returnTemplate",value:function(){return' \n                        <div class="'+o.default.chartContainer+'">\n                            '+this.partialTemplate(0)+"\n                            "+this.partialTemplate(1)+"\n                        </div>\n                       "}},{key:"returnTranslateValue",value:function(e){var t=this;return this.bars[e].data.d[this.bars[e].data.field]<0&&this.model.types.find(function(n){return n.field===t.bars[e].data.field}).crossesZero?0:(100*this.bars[e].linearScale(this.matches[e],this.data.field)).toFixed(1)+"%"}},{key:"partialTemplate",value:function(e){return'\n                <p class="'+o.default.chartLabel+" "+o.default["chartLabel"+(e+1)]+'">\n                    '+this.matches[e].state+'\n                </p>\n                <div class="'+o.default.barContainer+" "+o.default["barContainer"+(e+1)]+'">\n                    '+this.bars[e].el.outerHTML+'                        \n                    <div class="'+o.default.dataLabel+'" style="transform: translateX('+this.returnTranslateValue.call(this,e)+')">\n                        '+this.formatValue(this.matches[e],this.data.field).replace("-","–")+"\n                    </div>\n                </div>\n        "}},{key:"linearScale",value:function(e,t){var n=this.model.types.find(function(e){return e.field===t});return(e[t]-n.min)/n.spread}},{key:"formatValue",value:function(){return l.formatValue.apply(this,arguments)}},{key:"update",value:function(e,n){console.log(e,n);var r=parseInt(e.split(".")[1]),a=this.el.querySelectorAll("."+o.default.dataLabel)[r];i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"update",this).call(this,r,n),console.log(this),this.el.querySelectorAll("."+o.default.chartLabel)[r].fadeInContent(this.matches[r].state),this.children[r].data.d=this.matches[r],this.children[r].update(r),console.log("HERE—",this.children[r].data.d),a.fadeInContent(this.formatValue(this.matches[r],this.data.field).replace("-","–")),a.style.transform="translateX("+this.returnTranslateValue.call(this,r)+")"}}]),t}();t.default=c},function(e,t,n){e.exports={bar:"src-components-bar--bar",barColor1:"src-components-bar--barColor1",barColor2:"src-components-bar--barColor2",isZero:"src-components-bar--isZero"}},function(e,t,n){e.exports=function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t={resultsList:"autoComplete_results_list",result:"autoComplete_result",highlight:"autoComplete_highlighted"},n=function(e){return"string"==typeof e?document.querySelector(e):e()},r=function(e){return e.innerHTML=""},i={getInput:n,createResultsList:function(e){var n=document.createElement("ul");return e.container&&(t.resultsList=e.container(n)||t.resultsList),n.classList.add(t.resultsList),e.destination.insertAdjacentElement(e.position,n),n},highlight:function(e){return"<span class=".concat(t.highlight,">").concat(e,"</span>")},addResultsToList:function(e,n,r,i){n.forEach(function(o,a){var s=document.createElement("li"),l=n[a].source[r]||n[a].source;s.setAttribute("data-result",l),s.setAttribute("class",t.result),s.setAttribute("tabindex","1"),s.innerHTML=i?i(o,s):o.match||o,e.appendChild(s)})},navigation:function(e,t){var r=n(e),i=t.firstChild;document.onkeydown=function(e){var n=document.activeElement;switch(e.keyCode){case 38:n!==i&&n!==r?n.previousSibling.focus():n===i&&r.focus();break;case 40:n===r&&t.childNodes.length>0?i.focus():n!==t.lastChild&&n.nextSibling.focus()}}},clearResults:r,getSelection:function(e,i,o,a,s){var l=i.querySelectorAll(".".concat(t.result));Object.keys(l).forEach(function(p){["mousedown","keydown"].forEach(function(c){l[p].addEventListener(c,function(l){"mousedown"!==c&&13!==l.keyCode||(o({event:l,query:n(e).value,results:a.map(function(e){return e.source}),selection:a.find(function(e){var n=e.source[s]||e.source;return n===l.target.closest(".".concat(t.result)).getAttribute("data-result")}).source}),r(i))})})})}};return function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.selector=e.selector||"#autoComplete",this.data={src:function(){return"function"==typeof e.data.src?e.data.src():e.data.src},key:e.data.key},this.searchEngine="loose"===e.searchEngine?"loose":"strict",this.threshold=e.threshold||0,this.resultsList=i.createResultsList({container:!(!e.resultsList||!e.resultsList.container)&&e.resultsList.container,destination:e.resultsList&&e.resultsList.destination?e.resultsList.destination:i.getInput(this.selector),position:e.resultsList&&e.resultsList.position?e.resultsList.position:"afterend"}),this.placeHolder=e.placeHolder,this.maxResults=e.maxResults||5,this.resultItem=e.resultItem,this.highlight=e.highlight||!1,this.onSelection=e.onSelection,this.init()}return n=t,(r=[{key:"search",value:function(e,t){var n=this.highlight,r=t.toLowerCase();if("loose"===this.searchEngine){e=e.replace(/ /g,"");for(var o=[],a=0,s=0;s<r.length;s++){var l=r[s];a<e.length&&l===e[a]&&(l=n?i.highlight(l):l,a++),o.push(l)}return a===e.length&&o.join("")}if(r.includes(e)){if(n){var p=i.getInput(this.selector).value.toLowerCase();return r.replace(p,i.highlight(p))}return r}}},{key:"listMatchedResults",value:function(e){var t=this,n=[],r=i.getInput(this.selector).value.toLowerCase();e.filter(function(e){var i=t.search(r,e[t.data.key]||e);i&&n.push({match:i,source:e})});var o=n.slice(0,this.maxResults);return i.addResultsToList(this.resultsList,o,this.data.key,this.resultItem),i.navigation(this.selector,this.resultsList),o}},{key:"ignite",value:function(e){var t=this,n=this.selector,r=i.getInput(n),o=this.placeHolder,a=this.onSelection;o&&r.setAttribute("placeholder",o),r.onkeyup=function(){var o=t.resultsList;if(i.clearResults(o),r.value.length>t.threshold&&r.value.replace(/ /g,"").length){var s=t.listMatchedResults(e);a&&i.getSelection(n,o,a,s,t.data.key)}}}},{key:"init",value:function(){var e=this,t=this.data.src();t instanceof Promise?t.then(function(t){return e.ignite(t)}):this.ignite(t)}}])&&e(n.prototype,r),o&&e(n,o),t;var n,r,o}()}()},function(e,t,n){"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},function(e,t,n){"use strict";n.r(t);var r=n(10);
/**!
* tippy.js v4.0.4
* (c) 2017-2019 atomiks
* MIT License
*/function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var o="undefined"!=typeof window,a=o&&navigator.userAgent,s=/MSIE |Trident\//.test(a),l=/UCBrowser\//.test(a),p=o&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,c={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:[0,20],distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",updateDuration:0,wait:null,zIndex:9999},u=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],d={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow"},f=o?Element.prototype:{},h=f.matches||f.matchesSelector||f.webkitMatchesSelector||f.mozMatchesSelector||f.msMatchesSelector;function m(e){return[].slice.call(e)}function v(e,t){return(f.closest||function(e){for(var t=this;t;){if(h.call(t,e))return t;t=t.parentElement}}).call(e,t)}function y(e,t){for(;e;){if(t(e))return e;e=e.parentElement}}function b(e,t){return{}.hasOwnProperty.call(e,t)}function g(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?n:r}return e}function w(e,t){var n;return function(){var r=this,i=arguments;clearTimeout(n),n=setTimeout(function(){return e.apply(r,i)},t)}}function x(e,t){return e&&e.modifiers&&e.modifiers[t]}function _(e,t){return e.indexOf(t)>-1}function k(e){return!(!e||!b(e,"isVirtual"))||e instanceof Element}function O(e,t){return"function"==typeof e?e.apply(null,t):e}function C(e,t){e.filter(function(e){return"flip"===e.name})[0].enabled=t}function S(){return document.createElement("div")}function E(e,t){e.innerHTML=t instanceof Element?t.innerHTML:t}function L(e,t){t.content instanceof Element?(E(e,""),e.appendChild(t.content)):e[t.allowHTML?"innerHTML":"textContent"]=t.content}function A(e){return{tooltip:e.querySelector(d.TOOLTIP),backdrop:e.querySelector(d.BACKDROP),content:e.querySelector(d.CONTENT),arrow:e.querySelector(d.ARROW)||e.querySelector(d.ROUND_ARROW)}}function P(e){e.setAttribute("data-inertia","")}function T(e){var t=S();return"round"===e?(t.className="tippy-roundarrow",E(t,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):t.className="tippy-arrow",t}function j(){var e=S();return e.className="tippy-backdrop",e.setAttribute("data-state","hidden"),e}function D(e,t){e.setAttribute("tabindex","-1"),t.setAttribute("data-interactive","")}function M(e,t){e.forEach(function(e){e&&(e.style.transitionDuration="".concat(t,"ms"))})}function I(e,t,n){var r=l&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";e[t+"EventListener"](r,n)}function R(e){var t=e.getAttribute("x-placement");return t?t.split("-")[0]:""}function B(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function H(e,t,n){n.split(" ").forEach(function(n){e.classList[t](n+"-theme")})}function N(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.checkHideOnClick,n=e.exclude,r=e.duration;m(document.querySelectorAll(d.POPPER)).forEach(function(e){var i=e._tippy;!i||t&&!0!==i.props.hideOnClick||n&&e===n.popper||i.hide(r)})}var F={passive:!0},z=4,q=!1;function W(){q||(q=!0,p&&document.body.classList.add("tippy-iOS"),window.performance&&document.addEventListener("mousemove",Y))}var U=0;function Y(){var e=performance.now();e-U<20&&(q=!1,document.removeEventListener("mousemove",Y),p||document.body.classList.remove("tippy-iOS")),U=e}function V(e){var t=e.target;if(!(t instanceof Element))return N();var n=v(t,d.POPPER);if(!(n&&n._tippy&&n._tippy.props.interactive)){var r=y(t,function(e){return e._tippy&&e._tippy.reference===e});if(r){var i=r._tippy,o=_(i.props.trigger,"click");if(q||o)return N({exclude:i,checkHideOnClick:!0});if(!0!==i.props.hideOnClick||o)return;i.clearDelayTimeouts()}N({checkHideOnClick:!0})}}function X(){var e=document.activeElement;e&&e.blur&&e._tippy&&e.blur()}var G=Object.keys(c);function K(e,t){var n=i({},t,{content:O(t.content,[e])},t.ignoreAttributes?{}:function(e){return G.reduce(function(t,n){var r=(e.getAttribute("data-tippy-".concat(n))||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})}(e));return(n.arrow||l)&&(n.animateFill=!1),n}function Z(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;Object.keys(e).forEach(function(e){if(!b(t,e))throw new Error("[tippy]: `".concat(e,"` is not a valid option"))})}var $=1;function J(e,t){var n=K(e,t);if(!n.multiple&&e._tippy)return null;var o={},a=null,l=0,p=0,f=!1,k=function(){},E=[],N=n.interactiveDebounce>0?w(ie,n.interactiveDebounce):ie,W=null,U=$++,Y=function(e,t){var n=S();n.className="tippy-popper",n.id="tippy-".concat(e),n.style.zIndex=t.zIndex,t.role&&n.setAttribute("role",t.role);var r=S();r.className="tippy-tooltip",r.style.maxWidth=t.maxWidth+("number"==typeof t.maxWidth?"px":""),r.setAttribute("data-size",t.size),r.setAttribute("data-animation",t.animation),r.setAttribute("data-state","hidden"),H(r,"add",t.theme);var i=S();return i.className="tippy-content",i.setAttribute("data-state","hidden"),t.interactive&&D(n,r),t.arrow&&r.appendChild(T(t.arrowType)),t.animateFill&&(r.appendChild(j()),r.setAttribute("data-animatefill","")),t.inertia&&P(r),L(i,t),r.appendChild(i),n.appendChild(r),n}(U,n);Y.addEventListener("mouseenter",function(e){X.props.interactive&&X.state.isVisible&&"mouseenter"===o.type&&Q(e)}),Y.addEventListener("mouseleave",function(){X.props.interactive&&"mouseenter"===o.type&&document.addEventListener("mousemove",N)});var V,X={id:U,reference:e,popper:Y,popperChildren:A(Y),popperInstance:null,props:n,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:ye,set:be,setContent:function(e){be({content:e})},show:ge,hide:we,enable:function(){X.state.isEnabled=!0},disable:function(){X.state.isEnabled=!1},destroy:xe};return he(),n.lazy||(ce(),X.popperInstance.disableEventListeners()),n.showOnInit&&Q(),n.a11y&&!n.target&&((V=e)instanceof Element&&(!h.call(V,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")||V.hasAttribute("disabled")))&&e.setAttribute("tabindex","0"),e._tippy=X,Y._tippy=X,X;function G(e){var t=a=e,n=t.clientX,r=t.clientY;if(X.popperInstance){var i=R(X.popper),o=X.props.arrow?z+("round"===X.props.arrowType?18:16):z,s=_(["top","bottom"],i),l=_(["left","right"],i),p=s?Math.max(o,n):n,c=l?Math.max(o,r):r;s&&p>o&&(p=Math.min(n,window.innerWidth-o)),l&&c>o&&(c=Math.min(r,window.innerHeight-o));var u=X.reference.getBoundingClientRect(),d=X.props.followCursor,f="horizontal"===d,h="vertical"===d;X.popperInstance.reference={getBoundingClientRect:function(){return{width:0,height:0,top:f?u.top:c,bottom:f?u.bottom:c,left:h?u.left:p,right:h?u.right:p}},clientWidth:0,clientHeight:0},X.popperInstance.scheduleUpdate(),"initial"===d&&X.state.isVisible&&te()}}function Q(e){if(ye(),!X.state.isVisible){if(X.props.target)return function(e){var n=v(e.target,X.props.target);n&&!n._tippy&&(J(n,i({},X.props,{content:O(t.content,[n]),appendTo:t.appendTo,target:"",showOnInit:!0})),Q(e))}(e);if(f=!0,X.props.wait)return X.props.wait(X,e);ue()&&!X.state.isMounted&&document.addEventListener("mousemove",G);var n=g(X.props.delay,0,c.delay);n?l=setTimeout(function(){ge()},n):ge()}}function ee(){if(ye(),!X.state.isVisible)return te();f=!1;var e=g(X.props.delay,1,c.delay);e?p=setTimeout(function(){X.state.isVisible&&we()},e):we()}function te(){document.removeEventListener("mousemove",G)}function ne(){document.body.removeEventListener("mouseleave",ee),document.removeEventListener("mousemove",N)}function re(e){X.state.isEnabled&&!pe(e)&&(X.state.isVisible||(o=e,e instanceof MouseEvent&&(a=e)),"click"===e.type&&!1!==X.props.hideOnClick&&X.state.isVisible?ee():Q(e))}function ie(e){var t=y(e.target,function(e){return e._tippy}),n=v(e.target,d.POPPER)===X.popper,r=t===X.reference;n||r||function(e,t,n,r){if(!e)return!0;var i=n.clientX,o=n.clientY,a=r.interactiveBorder,s=r.distance,l=t.top-o>("top"===e?a+s:a),p=o-t.bottom>("bottom"===e?a+s:a),c=t.left-i>("left"===e?a+s:a),u=i-t.right>("right"===e?a+s:a);return l||p||c||u}(R(X.popper),X.popper.getBoundingClientRect(),e,X.props)&&(ne(),ee())}function oe(e){if(!pe(e))return X.props.interactive?(document.body.addEventListener("mouseleave",ee),void document.addEventListener("mousemove",N)):void ee()}function ae(e){e.target===X.reference&&(X.props.interactive&&e.relatedTarget&&X.popper.contains(e.relatedTarget)||ee())}function se(e){v(e.target,X.props.target)&&Q(e)}function le(e){v(e.target,X.props.target)&&ee()}function pe(e){var t="ontouchstart"in window,n=_(e.type,"touch"),r=X.props.touchHold;return t&&q&&r&&!n||q&&!r&&n}function ce(){var e=X.props.popperOptions,t=X.popperChildren,n=t.tooltip,o=t.arrow;X.popperInstance=new r.a(X.reference,X.popper,i({placement:X.props.placement},e,{modifiers:i({},e?e.modifiers:{},{preventOverflow:i({boundariesElement:X.props.boundary,padding:z},x(e,"preventOverflow")),arrow:i({element:o,enabled:!!o},x(e,"arrow")),flip:i({enabled:X.props.flip,padding:X.props.distance+z,behavior:X.props.flipBehavior},x(e,"flip")),offset:i({offset:X.props.offset},x(e,"offset"))}),onUpdate:function(t){X.props.flip&&!X.props.flipOnUpdate&&(t.flipped&&(X.popperInstance.options.placement=t.placement),C(X.popperInstance.modifiers,!1));var r=R(X.popper),i=n.style;i.top="",i.bottom="",i.left="",i.right="",i[r]=-(X.props.distance-10)+"px";var o={top:z,bottom:z,left:z,right:z};o[r]=z+X.props.distance,X.popperInstance.modifiers.filter(function(e){return"preventOverflow"===e.name})[0].padding=o,e&&e.onUpdate&&e.onUpdate(t)}}))}function ue(){return X.props.followCursor&&!q&&"focus"!==o.type}function de(e,t){function n(e){e.target===r&&(I(r,"remove",n),t())}if(0===e)return t();var r=X.popperChildren.tooltip;I(r,"remove",k),I(r,"add",n),k=n}function fe(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];X.reference.addEventListener(e,t,n),E.push({eventType:e,handler:t,options:n})}function he(){X.props.touchHold&&!X.props.target&&(fe("touchstart",re,F),fe("touchend",oe,F)),X.props.trigger.trim().split(" ").forEach(function(e){if("manual"!==e)if(X.props.target)switch(e){case"mouseenter":fe("mouseover",se),fe("mouseout",le);break;case"focus":fe("focusin",se),fe("focusout",le);break;case"click":fe(e,se)}else switch(fe(e,re),e){case"mouseenter":fe("mouseleave",oe);break;case"focus":fe(s?"focusout":"blur",ae)}})}function me(){E.forEach(function(e){var t=e.eventType,n=e.handler,r=e.options;X.reference.removeEventListener(t,n,r)}),E=[]}function ve(){return[X.popperChildren.tooltip,X.popperChildren.backdrop,X.popperChildren.content]}function ye(){clearTimeout(l),clearTimeout(p)}function be(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Z(e,c);var t=X.props,n=K(X.reference,i({},X.props,e,{ignoreAttributes:!0}));n.ignoreAttributes=b(e,"ignoreAttributes")?e.ignoreAttributes:t.ignoreAttributes,X.props=n,(b(e,"trigger")||b(e,"touchHold"))&&(me(),he()),b(e,"interactiveDebounce")&&(ne(),N=w(ie,e.interactiveDebounce)),function(e,t,n){var r=A(e),i=r.tooltip,o=r.content,a=r.backdrop,s=r.arrow;e.style.zIndex=n.zIndex,i.setAttribute("data-size",n.size),i.setAttribute("data-animation",n.animation),i.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?e.setAttribute("role",n.role):e.removeAttribute("role"),t.content!==n.content&&L(o,n),!t.animateFill&&n.animateFill?(i.appendChild(j()),i.setAttribute("data-animatefill","")):t.animateFill&&!n.animateFill&&(i.removeChild(a),i.removeAttribute("data-animatefill")),!t.arrow&&n.arrow?i.appendChild(T(n.arrowType)):t.arrow&&!n.arrow&&i.removeChild(s),t.arrow&&n.arrow&&t.arrowType!==n.arrowType&&i.replaceChild(T(n.arrowType),s),!t.interactive&&n.interactive?D(e,i):t.interactive&&!n.interactive&&function(e,t){e.removeAttribute("tabindex"),t.removeAttribute("data-interactive")}(e,i),!t.inertia&&n.inertia?P(i):t.inertia&&!n.inertia&&function(e){e.removeAttribute("data-inertia")}(i),t.theme!==n.theme&&(H(i,"remove",t.theme),H(i,"add",n.theme))}(X.popper,t,n),X.popperChildren=A(X.popper),X.popperInstance&&(X.popperInstance.update(),u.some(function(t){return b(e,t)})&&(X.popperInstance.destroy(),ce(),X.state.isVisible||X.popperInstance.disableEventListeners(),X.props.followCursor&&a&&G(a)))}function ge(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:g(X.props.duration,0,c.duration[0]);if(!X.state.isDestroyed&&X.state.isEnabled&&(!q||X.props.touch))return b(X.reference,"isVirtual")||document.documentElement.contains(X.reference)?void(X.reference.hasAttribute("disabled")||!1!==X.props.onShow(X)&&(X.popper.style.visibility="visible",X.state.isVisible=!0,X.props.interactive&&X.reference.classList.add("tippy-active"),M([X.popper,X.popperChildren.tooltip,X.popperChildren.backdrop],0),function(e){var t=!(ue()||"initial"===X.props.followCursor&&q);X.popperInstance?(ue()||(X.popperInstance.scheduleUpdate(),t&&X.popperInstance.enableEventListeners()),C(X.popperInstance.modifiers,X.props.flip)):(ce(),t||X.popperInstance.disableEventListeners()),X.popperInstance.reference=X.reference;var n=X.popperChildren.arrow;if(ue()){n&&(n.style.margin="0");var r=g(X.props.delay,0,c.delay);o.type&&G(r&&a?a:o)}else n&&(n.style.margin="");q&&a&&"initial"===X.props.followCursor&&(G(a),n&&(n.style.margin="0")),function(e,t){var n=e.popper,r=e.options,i=r.onCreate,o=r.onUpdate;r.onCreate=r.onUpdate=function(e){!function(e){e.offsetHeight}(n),t(),o(e),r.onCreate=i,r.onUpdate=o}}(X.popperInstance,e);var i=X.props.appendTo;(W="parent"===i?X.reference.parentNode:O(i,[X.reference])).contains(X.popper)||(W.appendChild(X.popper),X.props.onMount(X),X.state.isMounted=!0)}(function(){X.state.isVisible&&(ue()||X.popperInstance.update(),M([X.popper],n.updateDuration),M(ve(),e),X.popperChildren.backdrop&&(X.popperChildren.content.style.transitionDelay=Math.round(e/12)+"ms"),X.props.sticky&&(M([X.popper],s?0:X.props.updateDuration),function e(){X.popperInstance&&X.popperInstance.scheduleUpdate(),X.state.isMounted?requestAnimationFrame(e):M([X.popper],0)}()),B(ve(),"visible"),function(e,t){de(e,t)}(e,function(){X.popperChildren.tooltip.classList.add("tippy-notransition"),X.props.aria&&X.reference.setAttribute("aria-".concat(X.props.aria),X.popper.id),X.props.onShown(X),X.state.isShown=!0}))}))):xe()}function we(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:g(X.props.duration,1,c.duration[1]);!X.state.isDestroyed&&X.state.isEnabled&&!1!==X.props.onHide(X)&&(X.popperChildren.tooltip.classList.remove("tippy-notransition"),X.props.interactive&&X.reference.classList.remove("tippy-active"),X.popper.style.visibility="hidden",X.state.isVisible=!1,X.state.isShown=!1,M(ve(),e),B(ve(),"hidden"),function(e,t){de(e,function(){!X.state.isVisible&&W&&W.contains(X.popper)&&t()})}(e,function(){f||te(),X.props.aria&&X.reference.removeAttribute("aria-".concat(X.props.aria)),X.popperInstance.disableEventListeners(),X.popperInstance.options.placement=X.props.placement,W.removeChild(X.popper),X.props.onHidden(X),X.state.isMounted=!1}))}function xe(e){X.state.isDestroyed||(X.state.isMounted&&we(0),me(),delete X.reference._tippy,X.props.target&&e&&m(X.reference.querySelectorAll(X.props.target)).forEach(function(e){e._tippy&&e._tippy.destroy()}),X.popperInstance&&X.popperInstance.destroy(),X.state.isDestroyed=!0)}}var Q=!1;function ee(e,t){Z(t,c),Q||(document.addEventListener("click",V,!0),document.addEventListener("touchstart",W,F),window.addEventListener("blur",X),Q=!0);var n,r=i({},c,t);n=e,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(e){var t={isVirtual:!0,attributes:e.attributes||{},setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},hasAttribute:function(t){return t in e.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){delete e.classList.classNames[t]},contains:function(t){return t in e.classList.classNames}}};for(var n in t)e[n]=t[n]}(e);var o=function(e){if(k(e))return[e];if(e instanceof NodeList)return m(e);if(Array.isArray(e))return e;try{return m(document.querySelectorAll(e))}catch(e){return[]}}(e).reduce(function(e,t){var n=t&&J(t,r);return n&&e.push(n),e},[]);return k(e)?o[0]:o}ee.version="4.0.4",ee.defaults=c,ee.setDefaults=function(e){Object.keys(e).forEach(function(t){c[t]=e[t]})},ee.hideAll=N,ee.group=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.delay,r=void 0===n?e[0].props.delay:n,i=t.duration,o=void 0===i?0:i,a=!1;function s(e){a=e,u()}function l(t){t._originalProps.onShow(t),e.forEach(function(e){e.set({duration:o}),e.hide()}),s(!0)}function p(e){e._originalProps.onHide(e),s(!1)}function c(e){e._originalProps.onShown(e),e.set({duration:e._originalProps.duration})}function u(){e.forEach(function(e){e.set({onShow:l,onShown:c,onHide:p,delay:a?[0,Array.isArray(r)?r[1]:r]:r,duration:a?o:e._originalProps.duration})})}e.forEach(function(e){e._originalProps={duration:e.props.duration,onHide:e.props.onHide,onShow:e.props.onShow,onShown:e.props.onShown}}),u()},o&&setTimeout(function(){m(document.querySelectorAll("[data-tippy]")).forEach(function(e){var t=e.getAttribute("data-tippy");t&&ee(e,{content:t})})}),function(e){if(o){var t=document.createElement("style");t.type="text/css",t.textContent=e;var n=document.head,r=n.firstChild;r?n.insertBefore(t,r):n.appendChild(t)}}('.tippy-iOS{cursor:pointer!important}.tippy-notransition{transition:none}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;will-change:transform;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}'),t.default=ee},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=u(n(0)),o=u(n(31)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(9)),s=u(n(6)),l=u(n(32)),p=u(n(8)),c=n(7);function u(e){return e&&e.__esModule?e:{default:e}}function d(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return null===e?function(e,t){return console.log(e,t),e="N/A"===e?"!":e,t="N/A"===t?"!":t,(e=isNaN(+e)?e:+e)<(t=isNaN(+t)?t:+t)?-1:e>t?1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?-1:t[e]>n[e]?1:t[e]>=n[e]?0:NaN}}function f(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return null===e?function(e,t){return e<t?1:e>t?-1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?1:t[e]>n[e]?-1:t[e]>=n[e]?0:NaN}}var h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.field="debt_percent_SPI",this.bars=[],this.barContainers=[],this.lastPositions={},this.highlightedBars={},this.groupByFn=null!==this.groupBy?function(e){return e[n.groupBy]}:function(e){return null!==e},this.selections=this.parent.createComponent(this.model,l.default,"div.js-fifty-state-selections",{parent:this}),this.sortValueKey="state",this.sortValuesFn=d,this.groupBy="null",this.nestData(),this.pushBars(),(e=this.children).push.apply(e,[this.selections].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.bars))),this.prerendered&&!this.rerender)return r;this.renderSelections(),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.updateExplainerText("field",this.field,!0);var i=this.renderCharts();return r.appendChild(i),r}},{key:"nestData",value:function(){this.nestedData=a.nest().key(this.groupByFn).sortKeys(d()).sortValues(this.sortValuesFn(this.sortValueKey)).entries(this.model.data),console.log(this.nestedData)}},{key:"pushBars",value:function(){var e=this;this.bars.length=0,this.barContainers.length=0,this.nestedData.forEach(function(t){t.values.forEach(function(t){e.bars.push(e.parent.createComponent(e.model,s.default,"div.bar-state-"+t.code,{parent:e,data:{d:t,field:e.field,color:2}})),e.barContainers.push(e.parent.createComponent(e.model,i.default,"div#barContainer-"+t.code))})})}},{key:"renderSelections",value:function(){this.container.appendChild(this.selections.el)}},{key:"renderCharts",value:function(){var e=this,t=document.createElement("div"),n=0;return t.classList.add("js-fifty-chart-container"),this.nestedData.forEach(function(r){var i=document.createElement("div");i.classList.add(o.default.groupDiv),i.innerHTML="null"!==e.groupBy?'<h3 class="'+o.default.groupHeader+'">'+(void 0!==e.model.dict[e.groupBy]?e.model.dict[e.groupBy][r.key]:r.key)+"</h3>":"",r.values.forEach(function(t){var r=e.barContainers[n].el;r.classList.add(o.default.barContainer),e.highlightedBars[r.id]&&r.classList.add(o.default.isHighlighted);var a=document.createElement("p"),s=document.createElement("div"),l=document.createElement("div");l.classList.add(o.default.barInnerContainer),a.classList.add(o.default.barLabel),a.innerHTML=t.state,s.classList.add(o.default.placeHolder),r.appendChild(a),l.appendChild(e.bars[n].el),r.appendChild(l),r.appendChild(s),r.insertAdjacentHTML("beforeend",e.returnDataLabel(n)),i.appendChild(r),n++}),t.appendChild(i)}),this.bars.forEach(function(e){e.checkIfZero()}),t}},{key:"returnDataLabel",value:function(e){return'<div class="'+o.default.dataLabel+'" style="transform: translateX('+this.returnTranslateValue(e)+')">\n                    '+this.formatValue(this.bars[e].data.d,this.bars[e].data.field).replace("-","–")+"\n                </div>"}},{key:"returnTranslateValue",value:function(e){var t=this;return this.bars[e].data.d[this.bars[e].data.field]<0&&this.model.types.find(function(n){return n.field===t.bars[e].data.field}).crossesZero?(100*this.bars[e].placeZero(this.bars[e].data.field)).toFixed(1)+"%":(100*(this.bars[e].linearScale(this.bars[e].data.d,this.bars[e].data.field)+this.bars[e].placeZero(this.bars[e].data.field))).toFixed(1)+"%"}},{key:"formatValue",value:function(){return c.formatValue.apply(this,arguments)}},{key:"invertPositions",value:function(){var e=this;this.barContainers.forEach(function(t){var n=t.el.getBoundingClientRect(),r=e.firstPositions[t.el.id].top-n.top;t.el.style.transitionDuration="0",t.el.style.transform="translateY("+r+"px)",window.requestAnimationFrame(function(){t.el.style.transitionDuration="0.8s",t.el.style.transform="translateY(0)"})})}},{key:"init",value:function(){var e=this;p.default.setSubs([["field",function(t,n){e.updateBars(t,n),e.updateDataLabels(t,n),e.updateExplainerText(t,n)}],["group",function(t,n){e.updateGroups(t,n),e.updateExplainerText(t,n)}],["sort",function(t,n){e.sortBars(t,n)}],["resize",function(){e.adjustExplainerTextHeight()}]]),this.children.forEach(function(e){e.init()}),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.initHighlightBars(),this.initClearAllHighlights()}},{key:"updateExplainerText",value:function(e,t,n){var r=this;console.log(e,t,this);var i,a=this.model.types.find(function(e){return e.field===t}),s=a?"<p><strong>"+(isNaN(a.label)?a.label:"Credit rating "+a.label)+".</strong> "+a.tooltip+" </p>":"";"field"===e&&(this.field=t,i=this.fieldExplainer),"group"===e&&(this.groupBy=t,i=this.groupExplainer),n||(this.explainerWrapper.style.height=this.explainerWrapper.offsetHeight+"px"),i.fadeInContent(s).then(function(){var e=r.parent.returnMoreLink(t);e&&(e.classList.add(o.default.moreLink),i.lastChild.appendChild(e)),r.adjustExplainerTextHeight(),console.log(i.lastChild)})}},{key:"adjustExplainerTextHeight",value:function(){var e=[this.fieldExplainer,this.groupExplainer].reduce(function(e,t){var n=t.querySelector("p"),r=n?window.getComputedStyle(t.querySelector("p")):null;return r?+e+n.offsetHeight+parseInt(r["margin-top"])+parseInt(r["margin-bottom"]):+e},0);this.explainerWrapper.style.height=e+"px"}},{key:"initHighlightBars",value:function(){var e=this;document.querySelectorAll("."+o.default.barContainer).forEach(function(t){t.addEventListener("click",function(){e.highlightedBars[t.id]=!e.highlightedBars[t.id],t.classList.toggle(o.default.isHighlighted)})})}},{key:"initClearAllHighlights",value:function(){var e=this;document.querySelector("#clear-all-highlight").addEventListener("click",function(t){t.preventDefault(),document.querySelectorAll("."+o.default.barContainer).forEach(function(t){t.classList.remove(o.default.isHighlighted),e.highlightedBars={}})})}},{key:"updateDataLabels",value:function(){var e=this;this.barContainers.forEach(function(t,n){var r=t.el.querySelector("."+o.default.dataLabel);r.fadeInContent(e.formatValue(e.bars[n].data.d,e.bars[n].data.field).replace("-","–")),window.requestAnimationFrame(function(){console.log(e.bars[n].data.d),r.style.transform="translateX("+e.returnTranslateValue(n)+")"})})}},{key:"updateBars",value:function(e,t){this.field=t,this.bars.forEach(function(e){e.data.field=t,e.update()}),console.log(this.sortValueKey),"state"!==this.sortValueKey&&(this.sortValueKey=t,setTimeout(this.FLIP.bind(this),500))}},{key:"recordFirstPositions",value:function(){this.firstPositions=this.barContainers.reduce(function(e,t){return e[t.el.id]=t.el.getBoundingClientRect(),e},{})}},{key:"FLIP",value:function(){this.recordFirstPositions(),this.nestData(),this.el.innerHTML="",this.pushBars(),this.el.appendChild(this.renderCharts()),this.initHighlightBars(),this.invertPositions()}},{key:"updateGroups",value:function(e,t){this.groupBy=t,console.log(this.groupBy),this.FLIP()}},{key:"sortBars",value:function(e,t){this.sortValueKey="alpha"===t?"state":this.field,this.sortValuesFn="desc"===t?f:d,this.FLIP()}}]),t}();t.default=h},function(e,t,n){e.exports={groupHeader:"src-views-fifty-state--groupHeader",barLabel:"src-views-fifty-state--barLabel",groupDiv:"src-views-fifty-state--groupDiv",barContainer:"src-views-fifty-state--barContainer",isHighlighted:"src-views-fifty-state--isHighlighted",barInnerContainer:"src-views-fifty-state--barInnerContainer",dataLabel:"src-views-fifty-state--dataLabel",placeHolder:"src-views-fifty-state--placeHolder",moreLink:"src-views-fifty-state--moreLink"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=l(n(0)),o=l(n(33)),a=l(n(34)),s=n(2);function l(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,[{key:"prerender",value:function(){var e,n=this,r=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this),i=[{label:"Select field:",data:this.model.types.filter(function(e){return"text"!==e.type}),type:"field"},{label:"Group by:",data:this.model.types.filter(function(e){return"text"===e.type}),type:"group"}];if(this.dropdowns=[],i.forEach(function(e){n.dropdowns.push(n.parent.parent.createComponent(n.model,a.default,"div.js-dropdown-"+e.label.cleanString(),{parent:n,data:e}))}),(e=this.children).push.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.dropdowns)),this.prerendered&&!this.rerender)return r;var s=document.createElement("div");return s.classList.add(o.default.dropdownWrapper),i.forEach(function(e,t){var r=document.createElement("div"),i=document.createElement("label"),a=n.dropdowns[t];i.classList.add(o.default.dropdownOuter),i.innerText=e.label,r.classList.add(o.default.dropdownInner),r.appendChild(a.el),i.appendChild(r),s.appendChild(i)}),r.appendChild(s),r.insertAdjacentHTML("beforeend",'\n            <div id="explainer-wrapper">\n                <div id="field-explainer"></div>\n                <div id="group-explainer"></div>\n            </div>\n            <div class="flex">\n                <p class="'+o.default.label+" "+o.default.labelSort+' flex"><span>Sort by:</span> <span><a class="'+o.default.sortBy+" "+o.default.sortActive+'" data-sort="alpha" href="#">A–Z</a> | <a class="'+o.default.sortBy+'" data-sort="asc" href="#">Low–High</a> | <a class="'+o.default.sortBy+'" data-sort="desc" href="#">High–Low</a></span></p>\n                <p class="'+o.default.label+" "+o.default.labelHighlight+'">Select a state to highlight | <a id="clear-all-highlight" href="#">Clear all</a></p>\n            </div>\n        '),r}},{key:"init",value:function(){this.children.forEach(function(e){e.init()}),document.querySelectorAll("."+o.default.sortBy).forEach(function(e){e.addEventListener("click",function(t){t.preventDefault(),document.querySelector("."+o.default.sortActive).classList.remove(o.default.sortActive),e.classList.add(o.default.sortActive),s.stateModule.setState("sort",e.dataset.sort)})})}}]),t}();t.default=p},function(e,t,n){e.exports={dropdownWrapper:"src-views-fifty-state-selections--dropdownWrapper",dropdownOuter:"src-views-fifty-state-selections--dropdownOuter",dropdownInner:"src-views-fifty-state-selections--dropdownInner",label:"src-views-fifty-state-selections--label",sortActive:"src-views-fifty-state-selections--sortActive",labelSort:"src-views-fifty-state-selections--labelSort",sortBy:"src-views-fifty-state-selections--sortBy"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},a=n(35),s=(r=a)&&r.__esModule?r:{default:r},l=n(36),p=n(2);var c=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=[],i=n.data.type;n.data.data.forEach(function(e){r.push({value:e.field,name:isNaN(+e.label)?e.label:"Credit rating "+e.label,selected:!!e.isDefaultSelection})}),n.data=r.sort(function(e,t){return e.name<t.name?-1:e.name>t.name?1:e.name>=t.name?0:NaN}),"group"===i&&n.data.unshift({value:null,name:"— None —",selected:!0});var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments));return o.dropdownType=i,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.Dropdown),i(t,[{key:"prerender",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?e:(e.classList.add(s.default.dropdown),e)}},{key:"init",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this)}},{key:"onChange",value:function(){p.stateModule.setState(this.dropdownType,this.selectedOption.dataset.value)}}]),t}();t.default=c},function(e,t,n){e.exports={dropdown:"src-components-dropdown--dropdown"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=t.TextInput=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=n(1),a=l(n(0)),s=l(n(37));function l(e){return e&&e.__esModule?e:{default:e}}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.TextInput=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"input",n=arguments[1];return p(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return u(t,a.default),r(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered?e:(e.setAttribute("type","text"),e)}},{key:"init",value:function(){}}]),t}(),t.Dropdown=function(e){function t(e,n){p(this,t),console.log(e);var r,i,o=e.split(".")[0].split("#")[0];"div"!==o&&(e.split(".").length>1&&(r=e.split(".")[0].split("#")[0]),e.split("#").length>1&&(i=e.split("#")[0].split(".")[0]),console.log("Dropdown element must be a div; coercing . . ."),e=(o="div")+(void 0!==i?"#"+i:"")+(void 0!==r?"."+r:""));var a=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return a.options=a.el.querySelector("ul"),a.body=document.querySelector("body"),a._isOpen=!1,a}return u(t,a.default),r(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.prerendered)return e;var n=o.DOMHelpers.c("div.js-input-div"),r=o.DOMHelpers.c("ul");return this.data.forEach(function(e){var t=o.DOMHelpers.c("li");t.setAttribute("data-value",e.value),t.innerHTML=e.name,e.selected&&(t.classList.add("selected"),n.textContent=e.name),r.appendChild(t)}),e.appendChild(n),e.appendChild(r),e.classList.add(s.default.PCTDropdown),e.setAttribute("tabindex","0"),e}},{key:"init",value:function(){var e=this;console.log(this),this.input=this.el.querySelector(".js-input-div"),this.el.querySelectorAll("li").forEach(function(t){t.addEventListener("click",function(n){n.stopPropagation(),e.itemClickHandler(t)})}),this._selectedOption=this.el.querySelector("li.selected"),this.toBeSelected=this.el.querySelector("li.selected"),this.el.addEventListener("click",this.clickHandler.bind(this)),this.el.addEventListener("keydown",function(t){if(console.log(t.keyCode),9!==t.keyCode)return[32,38,40].indexOf(t.keyCode)>-1?(t.preventDefault(),void e.spaceAndArrowHandler.call(e,t)):void([13,27].indexOf(t.keyCode>-1)&&e.isOpen&&e.enterAndEscapeHandler.call(e,t));e.tabHandler.call(e,t)})}},{key:"itemClickHandler",value:function(e){this.toBeSelected.classList.remove("selected"),this.toBeSelected=e,this.toBeSelected.classList.add("selected"),this.selectedOption=this.toBeSelected}},{key:"enterAndEscapeHandler",value:function(e){27===e.keyCode?(console.log("escape key"),this.toBeSelected.classList.remove("selected"),this.selectedOption.classList.add("selected"),this.toBeSelected=this.selectedOption,this.isOpen=!1):this.selectedOption=this.toBeSelected}},{key:"spaceAndArrowHandler",value:function(e){if(32!==e.keyCode)if(this.isOpen){var t=38===e.keyCode?this.toBeSelected.previousElementSibling:this.toBeSelected.nextElementSibling;t&&(this.toBeSelected.classList.remove("selected"),this.toBeSelected=t,this.toBeSelected.classList.add("selected"))}else this.isOpen=!0;else this.isOpen||(this.isOpen=!0)}},{key:"tabHandler",value:function(e){this.isOpen&&e.preventDefault()}},{key:"clickHandler",value:function(e){!this.isOpen&&this.body.UIControlIsOpen||(e.stopPropagation(),this.isOpen=!this.isOpen)}},{key:"isOpen",set:function(e){function t(){this.isOpen=!1}this._isOpen=e,e?(this.el.classList.add(s.default.isOpen),this.body.UIControlIsOpen=!0,this.body.addEventListener("click",t.bind(this))):(this.el.classList.remove(s.default.isOpen),this.body.UIControlIsOpen=!1,this.body.removeEventListener("click",t.bind(this)))},get:function(){return this._isOpen}},{key:"selectedOption",set:function(e){this._selectedOption=e,this.isOpen=!1,this.input.textContent=this._selectedOption.innerText,this.onChange?this.onChange():console.log("Instance of Dropdown class needs an onChange method to handle selection of a new value")},get:function(){return this._selectedOption}}]),t}()},function(e,t,n){e.exports={PCTDropdown:"submodules-UI-js-inputs--PCTDropdown",isOpen:"submodules-UI-js-inputs--isOpen"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(39),s=(r=a)&&r.__esModule?r:{default:r};var l=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.el=document.querySelector(t),Object.keys(n).forEach(function(e){r[e]=n[e]})}return o(e,[{key:"init",value:function(e){this.needsRouter&&(this.router=new s.default,this.router.init(e)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var e=!1,t=document.body,n=0;function r(){new Date-n<500||e||(t.classList.add("has-hover"),e=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){e&&(t.classList.remove("has-hover"),e=!1)},!0),document.addEventListener("mousemove",r,!0),r()}},{key:"createComponent",value:function(e,t,n,r){var o=Object.create({children:[],data:null,model:e,parent:null,rerenderOnDataMismatch:!1});if(null!==r&&"object"===(void 0===r?"undefined":i(r)))for(var a in r)r.hasOwnProperty(a)&&(o[a]=r[a]);return new t(n,o)}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return i(e,[{key:"init",value:function(e){var t=this;if(void 0===e||"object"!==(void 0===e?"undefined":r(e)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof e.encode||"function"!=typeof e.decode||!Array.isArray(e.views)||"object"!==r(e.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=e.encode,this.decodeHash=e.decode,this.viewPromises=e.views.map(function(e){return e.isReady}),this.PS=e.PS,Promise.all(this.viewPromises).then(function(){t.decodeHash()}),this.PS.setSubs(e.subscriptions.map(function(e){return[e,function(e,n){t.hashChange.call(t,e,n)}]}))}},{key:"hashChange",value:function(e,t){this.setStateObj(e,t),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(e,t){this.stateObj[e]=t}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),e}();t.default=o},function(e,t){e.exports='<section id="section-overview">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">Overview</h2>\n    <div class="js-inner-content">\n    \n\t<p>\n        When state policymakers try to assess how much debt to take on for projects such as roads, bridges, and schools, they often compare debt levels in their state to those of others. Because no universal guidelines exist for how much debt is affordable, many policymakers evaluate how their state stacks up against others with a common credit rating or national median debt levels.\n    </p>\n    <p>\n        But selecting a peer group based only on a common rating or using national benchmarks overlooks many factors that influence borrowing levels. States with growing populations, for example, tend to borrow more; a state’s fiscal health affects the funds available for debt service; and policies meant to limit state debt can influence how much local governments and other state entities borrow for capital projects.\n    </p>\n    <p>\n        To address this gap, The Pew Charitable Trusts has created an interactive tool to allow policymakers to compare states based on seven characteristics related to debt. States can use these data to select more tailored peer groups, giving them a deeper understanding of how states with similar borrowing practices, constraints, and needs manage their borrowing. Ultimately, these improved comparisons will help states make better-informed decisions.\n    </p>\n    <p>\n        More information about these characteristics and why Pew chose them may be\n        found in the <a class="pct-static-anchor" id="about-the-data" href="#section-about">About the Data</a> section at the bottom of this page.\n    </p>\n    </div>\n    </section>\n<section id="section-comparison">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">State Comparison</h2>\n    <div class="js-inner-content">\n        <div class="compare-selection-wrapper">\n            <span class="compare-label">Compare</span><br />\n            <div class="flex flex-start flex-baseline autoComplete_outerWrapper">\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-0">\n                    <input autocomplete="off" type="text" id="compare-input-0">\n                </div>\n                <span>to</span>\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-1">\n                    <input autocomplete="off" type="text" id="compare-input-1">\n                </div>\n            </div>\n        </div>\n    </div>\n    </section>\n<section id="section-states">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">50-State Data</h2>\n    <div class="js-inner-content">\n    </div>\n    </section>\n<section id="section-about">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">About the Data</h2>\n    <div class="js-inner-content">\n    \n<p>\n    Pew researchers developed this list of characteristics by examining relevant literature and consulting subject matter experts. The final set of seven characteristics included in the tool was selected based on evidence in the literature that the characteristics are related to state debt, the feasibility of collecting the data used to construct the characteristic, and a desire to avoid redundancy. Pew also limited the number of characteristics to make the tool easy to use and understand.\n</p>\n<p>\n    The goal of this tool is not to create an exhaustive catalog of the factors that might affect state borrowing levels, so states should not feel the need to limit themselves to the data in it when selecting peers. Instead, the tool is intended to help states consider these differences when constructing peer groups. \n</p>\n<h3 class="static">\n    Borrowing practices\n</h3>\n<p>\n    How states borrow also affects how they should make comparisons: General obligation (GO) debt limits, centralization, and the division of state-local borrowing in a state can affect state borrowing practices. \n</p>\n<a name="debt_limit_type" id="debt_limit_type"></a>\n<h4 class="js-debt_limit_type">\n    General obligation debt limit type (2018)\n</h4>\n<p>\n    GO debt is one of the most common types issued by states. It carries a state’s full faith and credit, the strongest possible pledge. As a result, GO debt is typically a state’s highest rated and lowest cost because credit rating agencies and bond purchasers strongly believe that the state will repay it.<sup>1</sup>\n</p>\n<p>\n    Not all states issue much GO debt. All but two have GO debt limits, which vary in restrictiveness and structure. For example, Connecticut limits this debt to 1.6 times total estimated general fund tax receipts, while Arizona effectively prohibits its issuance.<sup>2</sup> Comparing Connecticut and Arizona, then, might not be appropriate because Connecticut has significant GO debt and Arizona has none. Connecticut’s debt will draw on the state’s general fund in a way that Arizona’s won’t. (GO debt is typically supported by a state’s general fund.) Because analyzing the revenue streams available for debt repayment is important, this is a key difference. \n</p>\n<p>\n    These limits sometimes apply to state debt beyond just GO borrowing. For example, West Virginia’s limit applies to net tax-supported debt, which includes GO.\n</p>\n<p>\n    Pew has classified each state’s limit for GO debt as one of the following\n    types:\n</p>\n<ul>\n    <li>\n        <strong>Constitutional amendment.</strong>\n        Three states—Alabama, Ohio, and West Virginia—require an amendment to\n        their constitutions to issue GO debt.\n    </li>\n    <li>\n        <strong>Metric.</strong>\n        In 11 states—Connecticut, Georgia, Hawaii, Mississippi, Nevada, New\n        Hampshire, North Dakota, Oregon, Tennessee, Utah, and Wisconsin—debt is\n        not allowed to exceed a certain metric-based threshold. Tennessee, for\n        example, caps debt service at 10 percent of combined revenues in its\n        general, debt service, and highway funds.\n    </li>\n    <li>\n        <strong>Metric-based with referendum to exceed.</strong>\n        North Carolina, Pennsylvania, and Wyoming use a metric to cap debt but\n        allow issuance above the cap with voter approval.\n    </li>\n    <li>\n        <strong>No limit.</strong>\n        Maryland and Vermont place no restrictions on GO debt.\n    </li>\n    <li>\n        <strong>Prohibition.</strong>\n        Arizona, Colorado, Indiana, and Nebraska effectively prohibit GO debt.\n        Indiana law forbids any GO debt to be issued; the others authorize\n        amounts so low—$350,000 or less—as to be equivalent to prohibitions.\n    </li>\n    <li>\n        <strong>Referendum and/or supermajority.</strong>\n        Thirteen states—Alaska, Arkansas, California, Idaho, Iowa, Kansas,\n        Kentucky, Maine, Michigan, Minnesota, Missouri, Montana, and Rhode\n        Island—require some combination of voter approval and/or a legislative\n        supermajority (generally, three-fifths or two-thirds) to issue debt.\n    </li>\n    <li>\n        <strong>Referendum and/or supermajority and metric.</strong>\n        Fourteen states—Delaware, Florida, Illinois, Louisiana, Massachusetts,\n        New Jersey, New Mexico, New York, Oklahoma, South Carolina, South\n        Dakota, Texas, Virginia, and Washington—require a referendum and/or\n        supermajority and have a metric-based cap on debt or debt service.\n    </li>\n</ul>\n<div class="pct-note"><p>\n    <strong>Note:</strong> The classification system is a variation on the approach taken in D.\n    Roderick Kiewiet and Kristin Szakaly, “Constitutional Limitations on\nBorrowing: An Analysis of State Bonded Indebtedness,”    <cite>The Journal of Law, Economics &amp; Organization</cite> 12, no. 1 (1996):\n    62-97,\n    <a href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents">\n        https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents</a>.\n</p>\n<p>\n    <strong>Source:</strong> Pew analysis of state constitutions and statutes\n</p></div>\n<a name="centralization" id="centralization"></a>\n<h4 class="js-centralization">\n    Centralization (fiscal year 2014)\n</h4>\n<p>\n    In some states, borrowing is done by entities other than the primary—\n    meaning state—government, including the independent agencies and\n    authorities known as component units. Centralization measures primary\n    government debt as a share of the total debt issued by both the primary\n    government and its component units.\n</p>\n<p>\n    Component unit debt generally relies less on state funds for repayment than\n    primary government debt does. Often, lenders have no legal claim on state\n    general funds if the component unit defaults. As a result, state\n    comparisons based on total debt may be misleading. Montana and Delaware,\n    for example, have about the same total debt, but most of Montana’s debt is\n    held by component units and most of Delaware’s is held by the state.\n</p>\n<div class="pct-note"><p>\n    <strong>Note:</strong> To calculate centralization in a state, Pew first analyzed the state’s comprehensive annual financial report for fiscal year 2014 to determine how much debt was held by the primary government. That figure was then compared to a sum of the debt of major component units as reported in their annual financial statements.<sup>3</sup>\n</p></div>\n<a name="state_local_division" id="state_local_division"></a>\n<h4 class="js-state_local_division">\n    The state-local borrowing division (2015)\n</h4>\n<p>\n    One factor that influences state debt levels is the division of borrowing between state and local governments. In some states, local governments are responsible for paying for most capital projects within their jurisdictions. In other places, the state is responsible for those projects. Instead of a city or town bonding to finance them, the state takes on this debt-increasing its overall borrowing. The division of borrowing responsibility is related to the debt limit. Local governments in Arizona, for example, borrow more than the state does because the state’s ability to borrow is so restricted.<sup>4</sup>  This tool compares local government borrowing to the combined debt of state and local governments within a state. \n</p>\n<div class="pct-note"><p>\n    <strong>Source:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances: 2015 Data Release” (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n</p></div>\n<p>\n    <strong></strong>\n</p>\n<h3 class="static">\n    Fiscal conditions and infrastructure needs\n</h3>\n<p>\n    Fiscal conditions may affect a state’s willingness to issue debt and ability to repay it, while infrastructure needs might increase a state’s demand for debt. Observing trends and variations among states in both categories can allow officials to create more appropriate peer groups. \n</p>\n<a name="revenue_volatility" id="revenue_volatility"></a>\n<h4 class="js-revenue_volatility">\n    Revenue volatility (1998-2017)\n</h4>\n<p>\n    Revenue volatility is the annual fluctuation in tax collections and is\n    affected by each state’s mix of tax streams. It indicates whether a state\n    can expect to dedicate a relatively consistent share of its revenue to its\n    liabilities year to year or whether that share will show greater\n    fluctuation as revenue varies. States with stable revenue can plan debt\n    issuances and pay down debt more easily than states with uncertain tax\n    collections can.<sup>5</sup> States with more volatile revenue may therefore wish to\n    compare themselves to states with similar concerns.\n</p>\n<p>\n    Pew used data from 1998 to 2017 to calculate a revenue volatility score for\n    each state. The score reflects variations in yearly percentage changes in\n    revenue between 1998 and 2017.<sup>6</sup> States have differing levels of volatility\n    because they have unique revenue mixes. Alaska has a highly volatile\n    revenue stream because much of its collections come from unpredictable\n    severance taxes on oil. Other states—such as South Dakota, which earns more\n    of its revenue from stable sources such as personal income taxes—have less\n    volatility. A low volatility score means that revenue levels were similar\n    from year to year, and a high score indicates that revenue grew or declined\n    more dramatically. The scores range from 2.7 to 37.6.\n</p>\n<div>\n    <div id="edn1">\n    </div>\n</div>\n<div class="pct-note"><p>\n    <strong>Source:</strong> The Pew Charitable Trusts, “Tax Revenue Volatility, FY 1998-2017,”\n    last modified Aug. 29, 2018,\n    <a\n        href="http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6"\n    >\n        http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6</a>\n</p></div>\n<a name="ten_year_pop_growth" id="ten_year_pop_growth"></a>\n<h4 class="js-ten_year_pop_growth">\n    Population growth (2008-17)\n</h4>\n<p>\n    Population growth drives infrastructure needs. More people means greater\n    pressure on a state’s infrastructure, necessitating improvements and new\n    construction. Research shows that as a state’s population grows, so too\ndoes its demand for, and in some cases spending on, capital construction.<sup>7</sup>\n</p>\n<p>\n    As a result, states with similar growth patterns may have similar demands\n    for infrastructure. For this reason, Pew used population growth as a proxy\n    for infrastructure demand, a metric for which exact, reliable sources are\n    scarce. Observing population growth can help identify peers and provides a\n    data point not often used in interstate debt comparisons.\n</p>\n<p>\n    Pew selected a 10-year population growth rate, measured as the increase or\n    decrease in state population between 2008 and 2017. Although no consensus\n    exists in academic literature regarding the appropriate time span for\n    examining population trends, this period captured the trough of the Great\n    Recession, the subsequent economic expansion, and the resulting demographic\n    and geographic shifts.<sup>8</sup>\n</p>\n\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances: 2015 Data Release” (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n    United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n    2017,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx</a>\n    ; U.S. Census Bureau, “Intercensal Estimates of the Resident Population for\n    the United States, Regions, States, and Puerto Rico: April 1, 2000 to July\n    1, 2010,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls</a>\n</p></div>\n<h3 class="static">\n    Debt levels (2015)\n</h3>\n<p>\n    Debt levels are a natural point of comparison and are influenced by the\n    preceding characteristics. Although an absolute dollar amount provides\n    useful information, it does not put the amount of debt into context\n    relative to the state’s resources.<sup>9</sup> Given size, population, and economic\n    differences among states, a dollar amount is also less useful for state\n    comparisons. Instead, normalized ratios allow states of various sizes to\n    compare themselves. Consistent with the best practices for understanding\n    debt affordability, Pew’s tool includes two ratios—debt per capita and debt\n    as a percentage of state personal income—to give a more complete measure of\n    a state’s debt. State-based analyses often use a ratio of debt service to\n    revenue when evaluating debt levels and setting limits. This ratio is not\n    included in this tool due to cross-state comparability issues.<sup>10</sup>\n</p>\n<a name="debt_per_capita" id="debt_per_capita"></a>\n<h4 class="js-debt_per_capita">\n    Debt per capita\n</h4>\n<p>\n    Because debt is repaid through revenue generally in the form of taxes or user fees paid by residents, assessing debt relative to its repayment source-the resident-is a common approach. Debt per capita, which measures total debt against a state’s population, makes comparisons between states of different sizes feasible and helps policymakers understand the debt burden on individual residents.\n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances,” 2015 Data Release (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n    United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n    2017,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx</a>\n</p></div>\n<a name="debt_percent_SPI" id="debt_percent_SPI"></a>\n<h4 class="js-debt_percent_SPI">\n    Debt as a percentage of state personal income\n</h4>\n<p>\n    Another common practice, used by credit rating agencies and academics, is to consider a state’s debt level relative to resources available for repayment.<sup>11</sup> A ratio comparing debt not only to population but to taxpayer earning power or wealth is therefore beneficial.<sup>12</sup>  Debt as a percentage of state personal income addresses this and is commonly used by states to evaluate debt levels.\n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances,” 2015 Data Release (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Bureau of Economic Analysis, “SA1 Personal Income Summary: Personal\n    Income, Population, Per Capita Personal Income,”\n    https://www.bea.gov/data/income-saving/personal-income-by-state.\n</p></div>\n<aside class="pct-box">\n        <h4>Census Data vs. Moody’s Net Tax-Supported Debt Calculations</h4>\n    \n\t<p>\n        Although debt affordability studies often use Moody’s Investors Service\n        Inc. calculations of state net tax-supported debt to compare borrowing, The\n        Pew Charitable Trusts used U.S. Census Bureau data for two reasons.\n    </p>\n    <p>\n        First, the Census Bureau captures a broader scope of debt than does\n        Moody’s, including some debt held by dependent agencies such as public\n        authorities and component units,<sup>13</sup> giving a more accurate representation of\n        the debt burden supported by a state’s residents.<sup>14</sup> Second, the bureau\n        analyzes how closely the dependent agencies it includes in its definition\n        of state debt are fiscally or administratively tied to the state. Because\n        ultimate responsibility for a debt can be nebulous—and a state may not\n        support the liabilities of its more independent entities—this further\n        ensures an accurate description of state debt.<sup>15</sup>\n    </p>\n</aside>\n<a name="credit_rating" id="credit_rating"></a>\n<h3 class="js-credit_rating static">\n    Credit ratings (September 2018 and September 2015)\n</h3>\n<p>\n    This tool allows users to group states by Standard &amp; Poor’s credit ratings to explore differences among those with similar credit profiles. The user can select credit ratings from 2018 or 2015 to look at either recent information or information corresponding to other, earlier data points in this tool.\n</p>\n<div class="pct-note"><p>\n    <strong>Note:</strong> Pew collected ratings on general obligation issuance as of September\n    2018 and September 2015. If the state does not issue GO bonds, the rating\n    on the senior-most tax-backed issuance was used instead. In addition to\n    S&amp;P, there are two other major credit rating agencies: Moody’s and\n    Fitch. There is little variation in ratings among the three agencies.\n</p></div>\n<div class="pct-endnotes">\n    \n    <div id="edn1">\n        <p>\n 1. \n            The Pew Charitable Trusts, “Strategies for Managing State Debt”\n            (2017),\n            <a\n                href="http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt"\n            >\n                http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt</a>.\n        </p>\n    </div>\n    <div id="edn2">\n        <p>\n 2. \n            Ibid.\n        </p>\n    </div>\n    \n    <div id="edn4">\n        <p>\n 3. \n            For more detail on how we collected these data, see The Pew\n            Charitable Trusts, “Strategies for Managing State Debt,”\n            methodology.\n        </p>\n    </div>\n    <div id="edn5">\n        <p>\n 4. \n            For a discussion of the relationship between debt limits and local\n            borrowing, see D. Roderick Kiewiet and Kristin Szakaly,\n            “Constitutional Limitations on Borrowing: An Analysis of State\nBonded Indebtedness,”            <cite>The Journal of Law, Economics &amp; Organization </cite>12, no. 1\n            (1996): 62-97,\n            <a\n                href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents"\n            >\n                https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents</a>.\n        </p>\n    </div>\n    <div id="edn6">\n        <p>\n 5. \n            One study found that as economic volatility increases, states\n            prefer to pay for infrastructure projects with cash rather than\n            through financing. Wen Wang, Yilin Hou, and William Duncome,\n            “Determinants of Pay-as-You-Go Financing of Capital Projects:\n            Evidence From the States,” <cite>Public Budgeting &amp; Finance </cite>\n            27, no. 4 (2007): 18-42,\n            <a href="https://doi.org/10.1111/j.1540-5850.2007.00892.x">\n                https://doi.org/10.1111/j.1540-5850.2007.00892.x</a>.\n        </p>\n    </div>\n    <div id="edn7">\n        <p>\n 6. \n            The Pew Charitable Trusts, “Tax Revenue Volatility Varies Across\n            States, Revenue Streams,” accessed Sept. 10, 2018,\n            <a\n                href="http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6"\n            >\n                http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6</a>.\n        </p>\n    </div>\n    <div id="edn8">\n        <p>\n 7. \n            Ronald C. Fisher and Robert W. Wassmer, “The Issuance of State and\nLocal Debt During the United States Great Recession,”            <cite>National Tax Journal</cite> 67, no. 1 (2014): 113-50,\n            <a\n                href="https://ideas.repec.org/a/ntj/journl/v67y2014i1p113-150.html"\n            >\n                https://ideas.repec.org/a/ntj/journl/v67y2014i1p113-150.html</a>\n            ; Ronald C. Fisher and Robert W. Wassmer, “An Analysis of\nState-Local Government Capital Expenditure During the 2000s,”            <cite>Public Budgeting &amp; Finance</cite> 35, no. 1 (2015): 3-28,\n            <a\n                href="https://onlinelibrary.wiley.com/doi/abs/10.1111/pbaf.12062"\n            >\n                https://onlinelibrary.wiley.com/doi/abs/10.1111/pbaf.12062</a>.\n        </p>\n    </div>\n    <div id="edn9">\n        <p>\n 8. \n            The National Bureau of Economic Research, “US Business Cycle\n            Expansions and Contractions,” Sept. 20, 2010,\n            <a href="http://www.nber.org/cycles.html">\n                http://www.nber.org/cycles.html</a>.\n        </p>\n    </div>\n    <div id="edn10">\n        <p>\n 9. \n            Jennifer Weiner, “Assessing the Affordability of State Debt,” New\n            England Public Policy Center at the Federal Reserve Bank of Boston\n            (2013),\n            <a\n                href="https://www.bostonfed.org/publications/new-england-public-policy-center-research-report/2013/assessing-the-affordability-of-state-debt.aspx"\n            >\n                https://www.bostonfed.org/publications/new-england-public-policy-center-research-report/2013/assessing-the-affordability-of-state-debt.aspx</a>.\n        </p>\n    </div>\n    <div id="edn11">\n        <p>\n 10. \n            In CAFRs, states report debt service payments from a variety of\n            funds. Using this information to construct a comparable measure of\n            debt service as a share of general fund revenue requires a detailed\n            understanding of each state’s reporting practices.\n        </p>\n    </div>\n    <div id="edn12">\n        <p>\n 11. \n            Jennifer Weiner, “A Guide to State Debt Affordability Studies:\n            Common Elements and Best Practices,” New England Public Policy\n            Center at the Federal Reserve Bank of Boston (2013),\n            <a\n                href="https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx"\n            >\n                https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx</a>\n            ; Charles Brecher, Kurt Richwerger, and Marcia Van Wagner, “An\nApproach to Measuring the Affordability of State Debt,”            <cite>Public Budgeting &amp; Finance</cite> 23, no. 4 (2003): 65-85,\n            <a\n                href="https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x"\n            >\n                https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x</a>.\n        </p>\n    </div>\n    <div id="edn13">\n        <p>\n 12. \n            W. Bartley Hildreth and Gerald J. Miller, “Debt and the Local\n            Economy: Problems in Benchmarking Local Government Debt\n            Affordability,” <cite>Public Budgeting &amp; Finance</cite> 22, no. 4\n            (2003): 99-113,\n            <a href="https://doi.org/10.1111/1540-5850.00091">\n                https://doi.org/10.1111/1540-5850.00091</a>.\n        </p>\n    </div>\n    <div id="edn14">\n        <p>\n 13. \n            Component units are entities that are legally separate from a state\n            but perform state functions. They typically include bodies such as\n            housing authorities, economic development corporations, and\n            universities.\n        </p>\n    </div>\n    <div id="edn15">\n        <p>\n 14. \n            Weiner, “A Guide.”\n        </p>\n    </div>\n    <div id="edn16">\n        <p>\n 15. \n            Bo Zhao and Wen Wang, “Transparency in State Debt Disclosure,” New\n            England Public Policy Center at the Federal Reserve Bank of Boston\n            (2017),\n            <a\n                href="https://www.bostonfed.org/publications/research-department-working-paper/2017/transparency-in-state-debt-disclosure.aspx"\n            >\n                https://www.bostonfed.org/publications/research-department-working-paper/2017/transparency-in-state-debt-disclosure.aspx</a>.\n        </p>\n    </div>\n</div>\n\n    </div>\n    </section>'},function(e,t){e.exports='<footer>\n\t\t<div>\n\t\t\t<p><strong>Download resources:</strong>\n\t\t\t\t\t<a class="pct-download" href="">Resource 1</a>\n\t\t\t\t\t<a class="pct-download" href="">Resource 2</a>\n\t\t\t\t</p></div>\n</footer>'},function(e,t,n){e.exports={static:"src-css--static"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VSS1qcy9lbGVtZW50L2luZGV4LmpzIiwid2VicGFjazovLy8uL3N1Ym1vZHVsZXMvVVRJTFMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0YXRlZnVsLWRlYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YnN1Yi1qcy9zcmMvcHVic3ViLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbXBhcmlzb24vc3R5bGVzLnNjc3M/MDFmNyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb21wYXJpc29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Jhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWV0aG9kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVic3ViLXNldHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9uZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0ZS1kZWJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXBhcGFyc2UvcGFwYXBhcnNlLm1pbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9kYXRhL2RhdGEuY3N2Iiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0ZS1jb21wYXJpc29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3N1Ym1vZHVsZXMvYXV0b0NvbXBsZXRlLmpzL2Rpc3QvY3NzL2F1dG9Db21wbGV0ZS5jc3M/OTk1NyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdGUtY29tcGFyaXNvbi9zdHlsZXMuc2Nzcz8zY2U4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbXBhcmlzb24vdGV4dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb21wYXJpc29uL2NoYXJ0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Jhci9zdHlsZXMuc2Nzcz8yY2FlIiwid2VicGFjazovLy8uL3N1Ym1vZHVsZXMvYXV0b0NvbXBsZXRlLmpzL2Rpc3QvanMvYXV0b0NvbXBsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmctaGFzaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlwcHkuanMvZXNtL2luZGV4LmFsbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9maWZ0eS1zdGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvZmlmdHktc3RhdGUvc3R5bGVzLnNjc3M/ODFjMCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvZmlmdHktc3RhdGUvc2VsZWN0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvZmlmdHktc3RhdGUvc2VsZWN0aW9ucy9zdHlsZXMuc2Nzcz82YjZjIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Ryb3Bkb3duL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Ryb3Bkb3duL3N0eWxlcy5zY3NzP2VjZmUiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VSS1qcy9pbnB1dHMvaW5wdXRzLmpzIiwid2VicGFjazovLy8uL3N1Ym1vZHVsZXMvVUktanMvaW5wdXRzL3N0eWxlcy5zY3NzPzRjNjQiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9QQ1RBcHAtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9ST1VUUi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvc2VjdGlvbnMuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvZm9vdGVyLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Nzcy9zdHlsZXMuc2Nzcz8zODI5Il0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX1V0aWxzIiwiRWxlbWVudCIsInNlbGVjdG9yIiwib3B0aW9ucyIsIl90aGlzIiwidGhpcyIsIl9jbGFzc0NhbGxDaGVjayIsIm1vZGVsIiwicGFyZW50IiwicmVuZGVyVG9TZWxlY3RvciIsImNvbnRhaW5lciIsIiRkIiwicSIsImNoaWxkcmVuIiwicmVyZW5kZXIiLCJyZXJlbmRlck9uRGF0YU1pc21hdGNoIiwiaXNNaXNtYXRjaGVkIiwiZGF0YSIsImVsIiwicHJlcmVuZGVyIiwiYXJndW1lbnRzIiwiaXNSZWFkeSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXhpc3RpbmciLCJwcmVyZW5kZXJlZCIsImlubmVySFRNTCIsIkdUTVB1c2giLCJldmVudExhYmVsIiwiZGF0YUxheWVyIiwicHVzaCIsImV2ZW50IiwiZXZlbnREYXRhIiwicHVibGlzaFdpbmRvd1Jlc2l6ZSIsIlMiLCJyZXNpemVUaW1lb3V0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJzZXRTdGF0ZSIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJGYWRlSW5UZXh0IiwiSFRNTEVsZW1lbnQiLCJmYWRlT3V0Q29udGVudCIsImNsYXNzTGlzdCIsImFkZCIsImZhZGVJbkNvbnRlbnQiLCJjb250ZW50IiwiZHVyYXRpb25TIiwic3R5bGUiLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb25TdHIiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImR1cmF0aW9uIiwicGFyc2VGbG9hdCIsInJlbW92ZSIsIlN0cmluZ0hlbHBlcnMiLCJTdHJpbmciLCJjbGVhblN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsInJlbW92ZVVuZGVyc2NvcmVzIiwidW5kb0NhbWVsQ2FzZSIsInRydW5jIiwidXNlV29yZEJvdW5kYXJ5IiwibGVuZ3RoIiwic3ViU3RyaW5nIiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJoYXNoQ29kZSIsImhhc2giLCJjaGFyQ29kZUF0IiwiRE9NSGVscGVycyIsImluZGV4T2YiLCJjbGFzc1N0cmluZ3MiLCJtYXRjaCIsImlkU3RyaW5nIiwiZWxTdHJpbmciLCJjcmVhdGVFbGVtZW50IiwiZm9yRWFjaCIsImtsYXNzIiwic2V0QXR0cmlidXRlIiwicXVlcnlTZWxlY3RvciIsInFhIiwicXVlcnlTZWxlY3RvckFsbCIsIlB1YlN1YiIsInN0YXRlIiwiX2xvZ1N0YXRlIiwiY29uc29sZSIsImxvZyIsIkFycmF5IiwiY29tcGFyZSIsInRlc3RBcnIiLCJzdGF0ZU1vZHVsZSIsImxvZ1N0YXRlIiwiZ2V0U3RhdGUiLCJ1bmRlZmluZWQiLCJnZXRQcmV2aW91c1N0YXRlIiwicHVibGlzaCIsImlzQXJyYXkiLCJ1bnNoaWZ0Iiwicm9vdCIsImZhY3RvcnkiLCJkZWZpbmUiLCJtZXNzYWdlcyIsImxhc3RVaWQiLCJoYXNLZXlzIiwib2JqIiwiY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMiLCJzdWJzY3JpYmVyIiwibWVzc2FnZSIsImV4IiwidGhyb3dFeGNlcHRpb24iLCJjYWxsU3Vic2NyaWJlcldpdGhJbW1lZGlhdGVFeGNlcHRpb25zIiwiZGVsaXZlck1lc3NhZ2UiLCJvcmlnaW5hbE1lc3NhZ2UiLCJtYXRjaGVkTWVzc2FnZSIsImltbWVkaWF0ZUV4Y2VwdGlvbnMiLCJzdWJzY3JpYmVycyIsImNhbGxTdWJzY3JpYmVyIiwic3luYyIsImRlbGl2ZXIiLCJ0b3BpYyIsInBvc2l0aW9uIiwiY3JlYXRlRGVsaXZlcnlGdW5jdGlvbiIsInRvU3RyaW5nIiwiaGFzU3Vic2NyaWJlcnMiLCJmb3VuZCIsIkJvb2xlYW4iLCJtZXNzYWdlSGFzU3Vic2NyaWJlcnMiLCJwdWJsaXNoU3luYyIsInN1YnNjcmliZSIsImZ1bmMiLCJ0b2tlbiIsInN1YnNjcmliZU9uY2UiLCJ1bnN1YnNjcmliZSIsImFwcGx5IiwiY2xlYXJBbGxTdWJzY3JpcHRpb25zIiwiY2xlYXJTdWJzY3JpcHRpb25zIiwiaXNUb3BpYyIsImRlc2NlbmRhbnRUb3BpY0V4aXN0cyIsImlzVG9rZW4iLCJpc0Z1bmN0aW9uIiwicmVzdWx0IiwiYW1kIiwiY29tcGFyZUNvbG9yMSIsImNvbXBhcmVDb2xvcjIiLCJjaGFydENvbnRhaW5lciIsImNoYXJ0TGFiZWwiLCJjaGFydExhYmVsVGV4dCIsImNoYXJ0TGFiZWwxIiwiY2hhcnRMYWJlbDIiLCJiYXJDb250YWluZXIiLCJiYXJDb250YWluZXIxIiwiYmFyQ29udGFpbmVyMiIsImRhdGFMYWJlbCIsIl9lbGVtZW50IiwiQ29tcGFyaXNvbiIsIl90aGlzMiIsImRpdiIsIm1hdGNoZXMiLCJmaW5kIiwiY29kZSIsImNvbXBhcmlzb24iLCJpbmRleCIsIkJhciIsImJhciIsImNvbG9yIiwidHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJwbGFjZVplcm8iLCJmaWVsZCIsImxpbmVhclNjYWxlIiwidHlwZU9iamVjdCIsInR5cGVzIiwic2NhbGUiLCJ0eXBlIiwibWluIiwic3ByZWFkIiwiemVyb1BsYWNlbWVudCIsIm9mZnNldCIsImNyb3NzZXNaZXJvIiwicmF3IiwicGFyZW50Tm9kZSIsImlzWmVybyIsImNoZWNrSWZaZXJvIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZm9ybWF0VmFsdWUiLCJmb3JtYXR0ZWRWYWx1ZVN0cmluZyIsIm1ldGFEYXRhIiwiZGVjaW1hbHMiLCJ0b0xvY2FsZVN0cmluZyIsIm1pbmltdW1GcmFjdGlvbkRpZ2l0cyIsIk1hdGgiLCJyb3VuZCIsImN1cnJlbmN5Iiwic2xpY2UiLCJzdWJzY3JpcHRpb25zIiwiY3JlYXRlVG9rZW4iLCJmblJlZiIsImZ1bmN0aW9uSGFzaCIsImZuIiwibG9nU3VicyIsInNldFN1YnMiLCJzdWJzQXJyYXkiLCJwYWlyIiwidG9rZW5PYmoiLCJjYW5jZWxTdWIiLCJrZXlzIiwiTWFwIiwibWFwIiwiZiIsImVhY2giLCJzZXQiLCJoYXMiLCJjbGVhciIsInZhbHVlcyIsImVudHJpZXMiLCJzaXplIiwiZW1wdHkiLCJzcmNfbWFwIiwic3JjX25lc3QiLCJzb3J0VmFsdWVzIiwicm9sbHVwIiwibmVzdCIsInNvcnRLZXlzIiwiYXJyYXkiLCJkZXB0aCIsImNyZWF0ZVJlc3VsdCIsInNldFJlc3VsdCIsInNvcnQiLCJrZXlWYWx1ZSIsInZhbHVlc0J5S2V5IiwiY3JlYXRlT2JqZWN0Iiwic2V0T2JqZWN0IiwiY3JlYXRlTWFwIiwic2V0TWFwIiwic29ydEtleSIsInYiLCJrIiwiYSIsImIiLCJvcmRlciIsIlNldCIsInByb3RvIiwic3JjX3NldCIsInNyY19rZXlzIiwic3JjX3ZhbHVlcyIsInNyY19lbnRyaWVzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImdsb2JhbCIsImlzQnJvd3NlciIsImxvbmdlclRpbWVvdXRCcm93c2VycyIsInRpbWVvdXREdXJhdGlvbiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRlYm91bmNlIiwiY2FsbGVkIiwidGhlbiIsInNjaGVkdWxlZCIsImZ1bmN0aW9uVG9DaGVjayIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsImVsZW1lbnQiLCJub2RlVHlwZSIsImNzcyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImdldFBhcmVudE5vZGUiLCJub2RlTmFtZSIsImhvc3QiLCJnZXRTY3JvbGxQYXJlbnQiLCJib2R5IiwiX2dldFN0eWxlQ29tcHV0ZWRQcm9wIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJ0ZXN0IiwiaXNJRTExIiwiTVNJbnB1dE1ldGhvZENvbnRleHQiLCJkb2N1bWVudE1vZGUiLCJpc0lFMTAiLCJpc0lFIiwidmVyc2lvbiIsImdldE9mZnNldFBhcmVudCIsIm5vT2Zmc2V0UGFyZW50Iiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0Um9vdCIsIm5vZGUiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInN0YXJ0IiwiZW5kIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJjb250YWlucyIsImZpcnN0RWxlbWVudENoaWxkIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwiaHRtbCIsInNjcm9sbGluZ0VsZW1lbnQiLCJnZXRCb3JkZXJzU2l6ZSIsInN0eWxlcyIsImF4aXMiLCJzaWRlQSIsInNpZGVCIiwiZ2V0U2l6ZSIsImNvbXB1dGVkU3R5bGUiLCJtYXgiLCJwYXJzZUludCIsImdldFdpbmRvd1NpemVzIiwiaGVpZ2h0Iiwid2lkdGgiLCJjbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJjcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9leHRlbmRzIiwiYXNzaWduIiwic291cmNlIiwiZ2V0Q2xpZW50UmVjdCIsIm9mZnNldHMiLCJyaWdodCIsImxlZnQiLCJib3R0b20iLCJ0b3AiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZWN0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImUiLCJzaXplcyIsImNsaWVudEhlaWdodCIsImhvcml6U2Nyb2xsYmFyIiwib2Zmc2V0V2lkdGgiLCJ2ZXJ0U2Nyb2xsYmFyIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJzdWJ0cmFjdCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZ2V0Qm91bmRhcmllcyIsInBvcHBlciIsInJlZmVyZW5jZSIsInBhZGRpbmciLCJib3VuZGFyaWVzRWxlbWVudCIsImJvdW5kYXJpZXMiLCJleGNsdWRlU2Nyb2xsIiwicmVsYXRpdmVPZmZzZXQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsImlzRml4ZWQiLCJfZ2V0V2luZG93U2l6ZXMiLCJpc1BhZGRpbmdOdW1iZXIiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInBsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiYXJlYSIsIl9yZWYiLCJmaWx0ZXJlZEFyZWFzIiwiZmlsdGVyIiwiX3JlZjIiLCJjb21wdXRlZFBsYWNlbWVudCIsInZhcmlhdGlvbiIsInNwbGl0IiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsImdldE91dGVyU2l6ZXMiLCJ4IiwibWFyZ2luQm90dG9tIiwieSIsIm1hcmdpblJpZ2h0IiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJtYXRjaGVkIiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwiYXJyIiwiY2hlY2siLCJydW5Nb2RpZmllcnMiLCJtb2RpZmllcnMiLCJlbmRzIiwicHJvcCIsImZpbmRJbmRleCIsImN1ciIsIndhcm4iLCJlbmFibGVkIiwiaXNNb2RpZmllckVuYWJsZWQiLCJtb2RpZmllck5hbWUiLCJzb21lIiwiZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lIiwicHJlZml4ZXMiLCJ1cHBlclByb3AiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInByZWZpeCIsInRvQ2hlY2siLCJnZXRXaW5kb3ciLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwidXBkYXRlQm91bmQiLCJwYXNzaXZlIiwic2Nyb2xsRWxlbWVudCIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsImNhbGxiYWNrIiwic2Nyb2xsUGFyZW50cyIsImlzQm9keSIsImV2ZW50c0VuYWJsZWQiLCJkaXNhYmxlRXZlbnRMaXN0ZW5lcnMiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInNjaGVkdWxlVXBkYXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzTnVtZXJpYyIsImlzTmFOIiwiaXNGaW5pdGUiLCJzZXRTdHlsZXMiLCJ1bml0IiwiaXNGaXJlZm94IiwiaXNNb2RpZmllclJlcXVpcmVkIiwicmVxdWVzdGluZ05hbWUiLCJyZXF1ZXN0ZWROYW1lIiwicmVxdWVzdGluZyIsImlzUmVxdWlyZWQiLCJfcmVxdWVzdGluZyIsInJlcXVlc3RlZCIsInBsYWNlbWVudHMiLCJ2YWxpZFBsYWNlbWVudHMiLCJjbG9ja3dpc2UiLCJjb3VudGVyIiwiY29uY2F0IiwicmV2ZXJzZSIsIkJFSEFWSU9SUyIsIkZMSVAiLCJDTE9DS1dJU0UiLCJDT1VOVEVSQ0xPQ0tXSVNFIiwicGFyc2VPZmZzZXQiLCJiYXNlUGxhY2VtZW50IiwidXNlSGVpZ2h0IiwiZnJhZ21lbnRzIiwiZnJhZyIsInRyaW0iLCJkaXZpZGVyIiwic2VhcmNoIiwic3BsaXRSZWdleCIsIm9wcyIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJyZWR1Y2UiLCJzdHIiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJwb3NpdGlvbkZpeGVkIiwicmVtb3ZlT25EZXN0cm95Iiwib25DcmVhdGUiLCJvblVwZGF0ZSIsInNoaWZ0Iiwic2hpZnR2YXJpYXRpb24iLCJfZGF0YSRvZmZzZXRzIiwiaXNWZXJ0aWNhbCIsInNpZGUiLCJzaGlmdE9mZnNldHMiLCJwcmV2ZW50T3ZlcmZsb3ciLCJ0cmFuc2Zvcm1Qcm9wIiwicG9wcGVyU3R5bGVzIiwicHJpb3JpdHkiLCJwcmltYXJ5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsInNlY29uZGFyeSIsImtlZXBUb2dldGhlciIsImZsb29yIiwib3BTaWRlIiwiYXJyb3ciLCJfZGF0YSRvZmZzZXRzJGFycm93IiwiYXJyb3dFbGVtZW50IiwibGVuIiwic2lkZUNhcGl0YWxpemVkIiwiYWx0U2lkZSIsImFycm93RWxlbWVudFNpemUiLCJjZW50ZXIiLCJwb3BwZXJNYXJnaW5TaWRlIiwicG9wcGVyQm9yZGVyU2lkZSIsInNpZGVWYWx1ZSIsImZsaXAiLCJmbGlwcGVkIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsImJlaGF2aW9yIiwic3RlcCIsInJlZk9mZnNldHMiLCJvdmVybGFwc1JlZiIsIm92ZXJmbG93c0xlZnQiLCJvdmVyZmxvd3NSaWdodCIsIm92ZXJmbG93c1RvcCIsIm92ZXJmbG93c0JvdHRvbSIsIm92ZXJmbG93c0JvdW5kYXJpZXMiLCJmbGlwcGVkVmFyaWF0aW9uIiwiZmxpcFZhcmlhdGlvbnMiLCJnZXRPcHBvc2l0ZVZhcmlhdGlvbiIsImlubmVyIiwic3VidHJhY3RMZW5ndGgiLCJoaWRlIiwiYm91bmQiLCJhdHRyaWJ1dGVzIiwiY29tcHV0ZVN0eWxlIiwibGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIiwiZ3B1QWNjZWxlcmF0aW9uIiwib2Zmc2V0UGFyZW50UmVjdCIsInNob3VsZFJvdW5kIiwibm9Sb3VuZCIsInJlZmVyZW5jZVdpZHRoIiwicG9wcGVyV2lkdGgiLCJpc1ZhcmlhdGlvbiIsImhvcml6b250YWxUb0ludGVnZXIiLCJ2ZXJ0aWNhbFRvSW50ZWdlciIsImdldFJvdW5kZWRPZmZzZXRzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInByZWZpeGVkUHJvcGVydHkiLCJ3aWxsQ2hhbmdlIiwiaW52ZXJ0VG9wIiwiaW52ZXJ0TGVmdCIsIngtcGxhY2VtZW50IiwiYXJyb3dTdHlsZXMiLCJhcHBseVN0eWxlIiwicmVtb3ZlQXR0cmlidXRlIiwib25Mb2FkIiwibW9kaWZpZXJPcHRpb25zIiwiUG9wcGVyIiwidXBkYXRlIiwiaXNEZXN0cm95ZWQiLCJpc0NyZWF0ZWQiLCJqcXVlcnkiLCJlbmFibGVFdmVudExpc3RlbmVycyIsInJlbW92ZUNoaWxkIiwiVXRpbHMiLCJQb3BwZXJVdGlscyIsIl9zdGF0ZURlYnQiLCJBcHAiLCJTdGF0ZURlYnQiLCJuZWVkc1JvdXRlciIsIklTX1BSRVJFTkRFUklORyIsImluaXQiLCJkMyIsIl9zdGF0ZWZ1bERlYWQiLCJncm91cHMiLCJkaWN0Iiwidmlld3MiLCJzY3JvbGxQb3NpdGlvbiIsImdldFJ1bnRpbWVEYXRhIiwiYXBwQ29udGFpbmVyIiwiUGFwYSIsInBhcnNlIiwiZG93bmxvYWQiLCJkeW5hbWljVHlwaW5nIiwiaGVhZGVyIiwiZmFzdE1vZGUiLCJza2lwRW1wdHlMaW5lcyIsImJlZm9yZUZpcnN0Q2h1bmsiLCJjaHVuayIsImRhdGFIYXNoIiwiZ2V0QXR0cmlidXRlIiwiY29tcGxldGUiLCJyZXNwb25zZSIsImRhdGFBcnJheSIsIl90b0NvbnN1bWFibGVBcnJheSIsInR5cGVzTmVzdGVkIiwiZ3JvdXAiLCJjcmVhdGVDb21wb25lbnQiLCJDb21wYXJpc29uVmlldyIsIkZpZnR5U3RhdGVWaWV3IiwiZXJyb3IiLCJQQ1RBcHAiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJzZWN0aW9ucyIsImZvb3RlciIsInZpZXciLCJhcHBlbmRDaGlsZCIsIl90aGlzMyIsIl9nZXQiLCJfX3Byb3RvX18iLCJnZXRQcm90b3R5cGVPZiIsImF0dGFjaFNlY3Rpb25PcGVuQ2xvc2UiLCJpbml0U3RhdGljQW5jaG9yTGlua3MiLCJsaW5rIiwiaHJlZiIsInByZXZlbnREZWZhdWx0Iiwic2Nyb2xsSW50b1ZpZXciLCJ0b2dnbGVTZWN0aW9uIiwidG9nZ2xlIiwiYmx1ciIsImhlYWRpbmciLCJrZXlDb2RlIiwic2Nyb2xsQmFjayIsInNjcm9sbFRvIiwiaW5uZXJUZXh0IiwicGFnZVlPZmZzZXQiLCJibG9jayIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsInNlbGYiLCJwb3N0TWVzc2FnZSIsImxvY2F0aW9uIiwiaCIsInUiLCJ6IiwiZHluYW1pY1R5cGluZ0Z1bmN0aW9uIiwid29ya2VyIiwiV09SS0VSU19TVVBQT1JURUQiLCJTQ1JJUFRfUEFUSCIsIkVycm9yIiwiV29ya2VyIiwib25tZXNzYWdlIiwiaWQiLCJ1c2VyU3RlcCIsInVzZXJDaHVuayIsInVzZXJDb21wbGV0ZSIsInVzZXJFcnJvciIsImlucHV0IiwiY29uZmlnIiwid29ya2VySWQiLCJOT0RFX1NUUkVBTV9JTlBVVCIsIl8iLCJyZWFkYWJsZSIsInJlYWQiLCJvbiIsImciLCJGaWxlIiwic3RyZWFtIiwidW5wYXJzZSIsImRlbGltaXRlciIsIkJBRF9ERUxJTUlURVJTIiwicXVvdGVzIiwibmV3bGluZSIsInF1b3RlQ2hhciIsIlJlZ0V4cCIsIk0iLCJKU09OIiwiZmllbGRzIiwibWV0YSIsImpvaW4iLCJEYXRlIiwic3RyaW5naWZ5IiwiUkVDT1JEX1NFUCIsImZyb21DaGFyQ29kZSIsIlVOSVRfU0VQIiwiQllURV9PUkRFUl9NQVJLIiwiTG9jYWxDaHVua1NpemUiLCJSZW1vdGVDaHVua1NpemUiLCJEZWZhdWx0RGVsaW1pdGVyIiwiUGFyc2VyIiwiUGFyc2VySGFuZGxlIiwiTmV0d29ya1N0cmVhbWVyIiwiRmlsZVN0cmVhbWVyIiwiU3RyaW5nU3RyZWFtZXIiLCJSZWFkYWJsZVN0cmVhbVN0cmVhbWVyIiwialF1ZXJ5IiwiYXR0ciIsIkZpbGVSZWFkZXIiLCJmaWxlcyIsImZpbGUiLCJpbnB1dEVsZW0iLCJpbnN0YW5jZUNvbmZpZyIsImV4dGVuZCIsImJlZm9yZSIsImFjdGlvbiIsInJlYXNvbiIsInNwbGljZSIsIl9oYW5kbGUiLCJfZmluaXNoZWQiLCJfY29tcGxldGVkIiwiX2lucHV0IiwiX2Jhc2VJbmRleCIsIl9wYXJ0aWFsTGluZSIsIl9yb3dDb3VudCIsIl9zdGFydCIsIl9uZXh0Q2h1bmsiLCJpc0ZpcnN0Q2h1bmsiLCJfY29tcGxldGVSZXN1bHRzIiwiZXJyb3JzIiwiRSIsImNodW5rU2l6ZSIsInN0cmVhbWVyIiwiX2NvbmZpZyIsInBhcnNlQ2h1bmsiLCJwYXVzZWQiLCJhYm9ydGVkIiwiY3Vyc29yIiwic3Vic3RyaW5nIiwicHJldmlldyIsInJlc3VsdHMiLCJXT1JLRVJfSUQiLCJmaW5pc2hlZCIsIl9zZW5kRXJyb3IiLCJfcmVhZENodW5rIiwiX2NodW5rTG9hZGVkIiwiWE1MSHR0cFJlcXVlc3QiLCJ3aXRoQ3JlZGVudGlhbHMiLCJvbmxvYWQiLCJ3Iiwib25lcnJvciIsIl9jaHVua0Vycm9yIiwib3BlbiIsImRvd25sb2FkUmVxdWVzdEhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInN0YXR1cyIsInJlYWR5U3RhdGUiLCJnZXRSZXNwb25zZUhlYWRlciIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJ3ZWJraXRTbGljZSIsIm1velNsaWNlIiwiRmlsZVJlYWRlclN5bmMiLCJyZWFkQXNUZXh0IiwiZW5jb2RpbmciLCJwYXVzZSIsInJlc3VtZSIsIl9zdHJlYW1EYXRhIiwiX3N0cmVhbUVuZCIsIl9zdHJlYW1FcnJvciIsIl9jaGVja0lzRmluaXNoZWQiLCJfc3RyZWFtQ2xlYW5VcCIsInJlbW92ZUxpc3RlbmVyIiwiYWJvcnQiLCJ0cmltSGVhZGVycyIsInJvdyIsImNvbW1lbnRzIiwiYWJzIiwic3VjY2Vzc2Z1bCIsImJlc3REZWxpbWl0ZXIiLCJnZXRDaGFySW5kZXgiLCJPIiwiVCIsIkkiLCJBIiwiRCIsIkwiLCJlc2NhcGVDaGFyIiwiUCIsIkYiLCJDIiwiUiIsImxpbmVicmVhayIsInRydW5jYXRlZCIsInRlcm1pbmF0ZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3JjIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJpbml0aWFsQ29tcGFyZSIsIl9jaGlsZHJlbiIsImNvbXBhcmlzb25zIiwiQ29tcGFyaXNvblRleHQiLCJDb21wYXJpc29uQ2hhcnQiLCJjb21wb3VuZEluZGV4IiwiZ3JvdXBEaXYiLCJncm91cEhlYWRlciIsInR5cGVDb250YWluZXIiLCJ0eXBlRGl2IiwidHlwZUhlYWRlciIsInRvb2x0aXAiLCJ3aXRoVG9vbHRpcCIsImxhYmVsIiwiX3RoaXM0IiwiaW5pdGlhbGl6ZUF1dG9jb21wbGV0ZXMiLCJpbml0aWFsaXplVG9vbHRpcHMiLCJQUyIsIm1zZyIsInN0YXRlcyIsInJhbmRvbSIsImVscyIsIl90aXBweTIiLCJkZWZhdWx0IiwiaW50ZXJhY3RpdmUiLCJyZXR1cm5Nb3JlTGluayIsImRhdGFzZXQiLCJ0ZXh0Q29udGVudCIsIl90aGlzNiIsImF1dG9Db21wbGV0ZXNBcmVEaXJ0eSIsInN1Z2dlc3Rpb25Nb3VzZUhhbmRsZXIiLCJmb2N1cyIsInJldmVydFRvUHJldmlvdXMiLCJjdXJyZW50U3RhdGVBYmJyIiwic3VnZ2VzdGlvbnMiLCJ3cmFwcGVyIiwic3RvcFByb3BhZ2F0aW9uIiwic3VnZ2VzdGlvbiIsIl90aGlzNSIsIkF1dG9Db21wbGV0ZSIsImhpZ2hsaWdodCIsIm9uU2VsZWN0aW9uIiwiZmVlZGJhY2siLCJzZWxlY3Rpb24iLCJwbGFjZUhvbGRlciIsInJlc3VsdHNMaXN0IiwiZGVzdGluYXRpb24iLCJzZWFyY2hFbmdpbmUiLCJ0aHJlc2hvbGQiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25MaXN0Iiwib2JzZXJ2ZXIiLCJtdXRhdGlvbiIsImFkZGVkTm9kZXMiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsInNldE11dGF0aW9uT2JzZXJ2ZXIiLCJhdXRvQ29tcGxldGVfd3JhcHBlciIsImF1dG9Db21wbGV0ZSIsImF1dG9Db21wbGV0ZV9yZXN1bHRzX2xpc3QiLCJhdXRvQ29tcGxldGVfcmVzdWx0IiwiYXV0b0NvbXBsZXRlX2hpZ2hsaWdodGVkIiwiY3JlZGl0LXJhdGluZyIsImRlYnRfbGltaXRfdHlwZSIsImNyZWRpdDIwMTUiLCJjcmVkaXQyMDE4IiwiYXV0b0NvbXBsZXRlMCIsImF1dG9Db21wbGV0ZV93cmFwcGVyLTAiLCJhdXRvQ29tcGxldGUxIiwiYXV0b0NvbXBsZXRlX3dyYXBwZXItMSIsInJldHVyblRlbXBsYXRlIiwiX21ldGhvZHMiLCJiYXJzIiwicGFydGlhbFRlbXBsYXRlIiwidG9GaXhlZCIsIm91dGVySFRNTCIsInJldHVyblRyYW5zbGF0ZVZhbHVlIiwiYmFyQ29sb3IxIiwiYmFyQ29sb3IyIiwiX2RlZmluZVByb3BlcnRpZXMiLCJzZWxlY3QiLCJnZXRJbnB1dCIsImNsZWFyUmVzdWx0cyIsImF1dG9Db21wbGV0ZVZpZXciLCJjcmVhdGVSZXN1bHRzTGlzdCIsInJlbmRlclJlc3VsdHMiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJhZGRSZXN1bHRzVG9MaXN0IiwiZGF0YVNyYyIsImRhdGFLZXkiLCJyZWNvcmQiLCJyZXN1bHRWYWx1ZSIsIm5hdmlnYXRpb24iLCJmaXJzdCIsImZpcnN0Q2hpbGQiLCJvbmtleWRvd24iLCJhY3RpdmUiLCJhY3RpdmVFbGVtZW50IiwicHJldmlvdXNTaWJsaW5nIiwiY2hpbGROb2RlcyIsImxhc3RDaGlsZCIsIm5leHRTaWJsaW5nIiwiZ2V0U2VsZWN0aW9uIiwicmVzdWx0c1ZhbHVlcyIsImV2ZW50VHlwZSIsInF1ZXJ5IiwicmVzVmFsdWUiLCJjbG9zZXN0IiwibWF4UmVzdWx0cyIsInJlc3VsdEl0ZW0iLCJyZWNvcmRMb3dlckNhc2UiLCJzZWFyY2hQb3NpdGlvbiIsIm51bWJlciIsInJlY29yZENoYXIiLCJpbmNsdWRlcyIsImlucHV0VmFsdWUiLCJyZXNMaXN0IiwibGlzdCIsIm9ua2V5dXAiLCJsaXN0TWF0Y2hlZFJlc3VsdHMiLCJpZ25pdGUiLCJwb3BwZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInVhIiwiaXNVQ0Jyb3dzZXIiLCJpc0lPUyIsInBsYXRmb3JtIiwiTVNTdHJlYW0iLCJhMTF5IiwiYWxsb3dIVE1MIiwiYW5pbWF0ZUZpbGwiLCJhbmltYXRpb24iLCJhcHBlbmRUbyIsImFyaWEiLCJhcnJvd1R5cGUiLCJib3VuZGFyeSIsImRlbGF5IiwiZGlzdGFuY2UiLCJmbGlwQmVoYXZpb3IiLCJmbGlwT25VcGRhdGUiLCJmb2xsb3dDdXJzb3IiLCJoaWRlT25DbGljayIsImlnbm9yZUF0dHJpYnV0ZXMiLCJpbmVydGlhIiwiaW50ZXJhY3RpdmVCb3JkZXIiLCJpbnRlcmFjdGl2ZURlYm91bmNlIiwibGF6eSIsIm1heFdpZHRoIiwibXVsdGlwbGUiLCJvbkhpZGRlbiIsIm9uSGlkZSIsIm9uTW91bnQiLCJvblNob3ciLCJvblNob3duIiwicG9wcGVyT3B0aW9ucyIsInJvbGUiLCJzaG93T25Jbml0Iiwic3RpY2t5IiwidGhlbWUiLCJ0b3VjaCIsInRvdWNoSG9sZCIsInRyaWdnZXIiLCJ1cGRhdGVEdXJhdGlvbiIsIndhaXQiLCJ6SW5kZXgiLCJQT1BQRVJfSU5TVEFOQ0VfREVQRU5ERU5DSUVTIiwiU2VsZWN0b3JzIiwiUE9QUEVSIiwiVE9PTFRJUCIsIkNPTlRFTlQiLCJCQUNLRFJPUCIsIkFSUk9XIiwiUk9VTkRfQVJST1ciLCJlbGVtZW50UHJvdG8iLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImFycmF5RnJvbSIsInBhcmVudFNlbGVjdG9yIiwiY2xvc2VzdENhbGxiYWNrIiwiZ2V0VmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJtcyIsInRpbWVvdXRJZCIsIl9hcmd1bWVudHMiLCJjbGVhclRpbWVvdXQiLCJnZXRNb2RpZmllciIsImlzU2luZ3VsYXIiLCJldmFsdWF0ZVZhbHVlIiwiYXJncyIsInNldEZsaXBNb2RpZmllckVuYWJsZWQiLCJzZXRJbm5lckhUTUwiLCJzZXRDb250ZW50IiwiY29udGVudEVsIiwiZ2V0Q2hpbGRyZW4iLCJiYWNrZHJvcCIsImFkZEluZXJ0aWEiLCJjcmVhdGVBcnJvd0VsZW1lbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVCYWNrZHJvcEVsZW1lbnQiLCJhZGRJbnRlcmFjdGl2ZSIsImFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidG9nZ2xlVHJhbnNpdGlvbkVuZExpc3RlbmVyIiwibGlzdGVuZXIiLCJldmVudE5hbWUiLCJ3ZWJraXRUcmFuc2l0aW9uIiwiZ2V0UG9wcGVyUGxhY2VtZW50IiwiZnVsbFBsYWNlbWVudCIsInNldFZpc2liaWxpdHlTdGF0ZSIsInRvZ2dsZVRoZW1lIiwidGhlbWVOYW1lIiwiaGlkZUFsbCIsImNoZWNrSGlkZU9uQ2xpY2siLCJleGNsdWRlIiwiX3RpcHB5IiwiUEFTU0lWRSIsIlBBRERJTkciLCJpc1VzaW5nVG91Y2giLCJvbkRvY3VtZW50VG91Y2giLCJwZXJmb3JtYW5jZSIsIm9uRG9jdW1lbnRNb3VzZU1vdmUiLCJsYXN0TW91c2VNb3ZlVGltZSIsIm5vdyIsIm9uRG9jdW1lbnRDbGljayIsImlzQ2xpY2tUcmlnZ2VyIiwiY2xlYXJEZWxheVRpbWVvdXRzIiwib25XaW5kb3dCbHVyIiwiZXZhbHVhdGVQcm9wcyIsIm91dCIsImFjYyIsInZhbHVlQXNTdHJpbmciLCJnZXREYXRhQXR0cmlidXRlT3B0aW9ucyIsInZhbGlkYXRlT3B0aW9ucyIsImRlZmF1bHRzIiwib3B0aW9uIiwiaWRDb3VudGVyIiwiY3JlYXRlVGlwcHkiLCJjb2xsZWN0aW9uUHJvcHMiLCJsYXN0VHJpZ2dlckV2ZW50IiwibGFzdE1vdXNlTW92ZUV2ZW50Iiwic2hvd1RpbWVvdXRJZCIsImhpZGVUaW1lb3V0SWQiLCJpc1NjaGVkdWxlZFRvU2hvdyIsInRyYW5zaXRpb25FbmRMaXN0ZW5lciIsImxpc3RlbmVycyIsImRlYm91bmNlZE9uTW91c2VNb3ZlIiwib25Nb3VzZU1vdmUiLCJjcmVhdGVQb3BwZXJFbGVtZW50IiwiaXNWaXNpYmxlIiwic2NoZWR1bGVTaG93IiwicG9wcGVyQ2hpbGRyZW4iLCJwb3BwZXJJbnN0YW5jZSIsImlzRW5hYmxlZCIsImlzTW91bnRlZCIsImlzU2hvd24iLCJzaG93IiwiZW5hYmxlIiwiZGlzYWJsZSIsImRlc3Ryb3kiLCJhZGRUcmlnZ2Vyc1RvUmVmZXJlbmNlIiwiY3JlYXRlUG9wcGVySW5zdGFuY2UiLCJoYXNBdHRyaWJ1dGUiLCJwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yIiwiX2xhc3RNb3VzZU1vdmVFdmVudCIsImNsaWVudFgiLCJjbGllbnRZIiwiaXNWZXJ0aWNhbFBsYWNlbWVudCIsImlzSG9yaXpvbnRhbFBsYWNlbWVudCIsImlzSG9yaXpvbnRhbCIsInJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyIiwidGFyZ2V0RWwiLCJjcmVhdGVEZWxlZ2F0ZUNoaWxkVGlwcHkiLCJoYXNGb2xsb3dDdXJzb3JCZWhhdmlvciIsInNjaGVkdWxlSGlkZSIsImNsZWFudXBPbGRNb3VzZUxpc3RlbmVycyIsIm9uVHJpZ2dlciIsImlzRXZlbnRMaXN0ZW5lclN0b3BwZWQiLCJNb3VzZUV2ZW50IiwicmVmZXJlbmNlVGhlQ3Vyc29ySXNPdmVyIiwiaXNDdXJzb3JPdmVyUG9wcGVyIiwiaXNDdXJzb3JPdmVyUmVmZXJlbmNlIiwicG9wcGVyUGxhY2VtZW50IiwiZXhjZWVkc1RvcCIsImV4Y2VlZHNCb3R0b20iLCJleGNlZWRzTGVmdCIsImV4Y2VlZHNSaWdodCIsImlzQ3Vyc29yT3V0c2lkZUludGVyYWN0aXZlQm9yZGVyIiwib25Nb3VzZUxlYXZlIiwib25CbHVyIiwicmVsYXRlZFRhcmdldCIsIm9uRGVsZWdhdGVTaG93Iiwib25EZWxlZ2F0ZUhpZGUiLCJzdXBwb3J0c1RvdWNoIiwiaXNUb3VjaEV2ZW50IiwiX2luc3RhbmNlJHBvcHBlckNoaWxkIiwib25UcmFuc2l0aW9uRW5kIiwiaGFuZGxlciIsInJlbW92ZVRyaWdnZXJzRnJvbVJlZmVyZW5jZSIsImdldElubmVyRWxlbWVudHMiLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJfZ2V0Q2hpbGRyZW4iLCJyZXBsYWNlQ2hpbGQiLCJyZW1vdmVJbnRlcmFjdGl2ZSIsInJlbW92ZUluZXJ0aWEiLCJ1cGRhdGVQb3BwZXJFbGVtZW50IiwidmlzaWJpbGl0eSIsInNob3VsZEVuYWJsZUxpc3RlbmVycyIsIm1hcmdpbiIsInJlZmxvdyIsImFmdGVyUG9wcGVyUG9zaXRpb25VcGRhdGVzIiwibW91bnQiLCJ0cmFuc2l0aW9uRGVsYXkiLCJ1cGRhdGVQb3NpdGlvbiIsIm9uVHJhbnNpdGlvbmVkSW4iLCJvblRyYW5zaXRpb25lZE91dCIsImRlc3Ryb3lUYXJnZXRJbnN0YW5jZXMiLCJjaGlsZCIsImdsb2JhbEV2ZW50TGlzdGVuZXJzQm91bmQiLCJ0aXBweSIsInRhcmdldHMiLCJ2aXJ0dWFsUmVmZXJlbmNlIiwicG9seWZpbGxzIiwiaXNWaXJ0dWFsIiwiY2xhc3NOYW1lcyIsInBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXMiLCJpbnN0YW5jZXMiLCJOb2RlTGlzdCIsImdldEFycmF5T2ZFbGVtZW50cyIsInNldERlZmF1bHRzIiwicGFydGlhbERlZmF1bHRzIiwiX3JlZiRkZWxheSIsIl9yZWYkZHVyYXRpb24iLCJpc0FueVRpcHB5T3BlbiIsInNldElzQW55VGlwcHlPcGVuIiwidXBkYXRlSW5zdGFuY2VzIiwiX29yaWdpbmFsUHJvcHMiLCJoZWFkIiwiaW5zZXJ0QmVmb3JlIiwiaW5qZWN0Q1NTIiwiRnVuY3Rpb24iLCJhc2NlbmRpbmciLCJOYU4iLCJkZXNjZW5kaW5nIiwiYmFyQ29udGFpbmVycyIsImxhc3RQb3NpdGlvbnMiLCJoaWdobGlnaHRlZEJhcnMiLCJncm91cEJ5Rm4iLCJncm91cEJ5Iiwic2VsZWN0aW9ucyIsIlNlbGVjdGlvbnMiLCJzb3J0VmFsdWVLZXkiLCJzb3J0VmFsdWVzRm4iLCJuZXN0RGF0YSIsInB1c2hCYXJzIiwicmVuZGVyU2VsZWN0aW9ucyIsImV4cGxhaW5lcldyYXBwZXIiLCJmaWVsZEV4cGxhaW5lciIsImdyb3VwRXhwbGFpbmVyIiwidXBkYXRlRXhwbGFpbmVyVGV4dCIsImNoYXJ0cyIsInJlbmRlckNoYXJ0cyIsIm5lc3RlZERhdGEiLCJpc0hpZ2hsaWdodGVkIiwiYmFySW5uZXJDb250YWluZXIiLCJiYXJMYWJlbCIsInJldHVybkRhdGFMYWJlbCIsImxhc3RQb3NpdGlvbiIsImRlbHRhWSIsImZpcnN0UG9zaXRpb25zIiwiX3RoaXM3IiwidXBkYXRlQmFycyIsInVwZGF0ZURhdGFMYWJlbHMiLCJ1cGRhdGVHcm91cHMiLCJzb3J0QmFycyIsImFkanVzdEV4cGxhaW5lclRleHRIZWlnaHQiLCJpbml0SGlnaGxpZ2h0QmFycyIsImluaXRDbGVhckFsbEhpZ2hsaWdodHMiLCJjYWxsZWRGcm9tUHJlcmVuZGVyIiwiX3RoaXM4IiwibW9yZUxpbmsiLCJjb21wdXRlZFN0eWxlcyIsIl90aGlzOSIsIl90aGlzMTAiLCJfdGhpczExIiwicmVjb3JkRmlyc3RQb3NpdGlvbnMiLCJpbnZlcnRQb3NpdGlvbnMiLCJkcm9wZG93bkRhdGEiLCJkcm9wZG93bnMiLCJUaGlzRHJvcGRvd24iLCJkcm9wZG93bldyYXBwZXIiLCJkcm9wZG93bklubmVyIiwiZHJvcGRvd25PdXRlciIsImRyb3Bkb3duIiwibGFiZWxTb3J0Iiwic29ydEJ5Iiwic29ydEFjdGl2ZSIsImxhYmVsSGlnaGxpZ2h0IiwiX3N0eWxlcyIsIl9pbnB1dHMiLCJfZGF0YSIsImRyb3Bkb3duVHlwZSIsInNlbGVjdGVkIiwiaXNEZWZhdWx0U2VsZWN0aW9uIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJEcm9wZG93biIsInNlbGVjdGVkT3B0aW9uIiwiVGV4dElucHV0IiwiX2lzT3BlbiIsIm9wdGlvbnNMaXN0IiwiUENURHJvcGRvd24iLCJpdGVtIiwiaXRlbUNsaWNrSGFuZGxlciIsIl9zZWxlY3RlZE9wdGlvbiIsInRvQmVTZWxlY3RlZCIsImNsaWNrSGFuZGxlciIsInNwYWNlQW5kQXJyb3dIYW5kbGVyIiwiaXNPcGVuIiwiZW50ZXJBbmRFc2NhcGVIYW5kbGVyIiwidGFiSGFuZGxlciIsIm5leHQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiVUlDb250cm9sSXNPcGVuIiwiYm9vbCIsImJvZHlDbGlja0hhbmRsZXIiLCJvbkNoYW5nZSIsIl9Sb3V0ZXIiLCJyb3V0ZXJPcHRpb25zIiwicm91dGVyIiwiUm91dGVyIiwiZGlzYWJsZUhvdmVyT25Ub3VjaCIsImhhc0hvdmVyQ2xhc3MiLCJsYXN0VG91Y2hUaW1lIiwiZW5hYmxlSG92ZXIiLCJjb21wb25lbnQiLCJfb3B0aW9ucyIsIl90eXBlb2YiLCJlbmNvZGUiLCJkZWNvZGUiLCJzdGF0ZU9iaiIsImhhc2hTdGF0ZSIsImRlY29kZUhhc2giLCJ2aWV3UHJvbWlzZXMiLCJhbGwiLCJoYXNoQ2hhbmdlIiwic2V0U3RhdGVPYmoiLCJyZXBsYWNlU3RhdGUiLCJoaXN0b3J5IiwiaGFzaFN0cmluZyIsInN0YXRpYyJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElB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SXp4QixHQUNsQmIsRUFBS2t0QyxXQUFXbnZDLEtBQUtpQyxFQUFLc3lCLEVBQUl6eEIsMkNBTS9CeXhCLEVBQUl6eEIsR0FDWFosS0FBS2t0QyxZQUFZN2EsRUFBSXp4QixHQUNyQlosS0FBSzZzQyxZQUNMN3NDLEtBQUttdEMsbURBRUc5YSxFQUFLenhCLEdBQ2JaLEtBQUs0c0MsU0FBU3ZhLEdBQU96eEIseUNBSXJCb0IsT0FBT29yQyxRQUFRRCxhQUFhbnRDLEtBQUs0c0MsU0FBUyxHQUFHNXNDLEtBQUtxdEMsK0JBM0NyQ25CLGlCQ0FyQnh1QyxFQUFBRCxRQUFBLHdsNEJDQUFDLEVBQUFELFFBQUEseU9DQ0FDLEVBQUFELFFBQUEsQ0FBa0I2dkMsT0FBQSIsImZpbGUiOiJqcy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMSk7XG4iLCJpbXBvcnQgeyBET01IZWxwZXJzIGFzICRkIH0gZnJvbSAnQFV0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCBvcHRpb25zKXtcbiAgICAgICAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnICl7XG4gICAgICAgICAgICB0aHJvdyBgRmlyc3QgcGFyYW1ldGVyIG11c3QgYmUgYSBzdHJpbmcgcmVmZXJlbmNpbmcgdGhlIENTUy1saWtlIHNlbGVjdG9yIG9mIHRoZSBlbGVtZW50IHRvIGJlIGNyZWF0ZWQgXG4gICAgICAgICAgICAgICAgICAgIChcImRpdiNkaXZJRC5kaXZDbGFzc1wiKS5gO1xuICAgICAgICB9IFxuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgICAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50OyAvLyBwYXJlbnQgaXMgYSBKUyBvYmplY3RcbiAgICAgICAgdGhpcy5yZW5kZXJUb1NlbGVjdG9yID0gb3B0aW9ucy5yZW5kZXJUb1NlbGVjdG9yO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9ICRkLnEodGhpcy5yZW5kZXJUb1NlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG9wdGlvbnMuY2hpbGRyZW47XG4gICAgICAgIHRoaXMucmVyZW5kZXIgPSAoIG9wdGlvbnMucmVyZW5kZXJPbkRhdGFNaXNtYXRjaCAmJiBvcHRpb25zLm1vZGVsLmlzTWlzbWF0Y2hlZCApO1xuICAgICAgICB0aGlzLmRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmVsID0gdGhpcy5wcmVyZW5kZXIoYXJndW1lbnRzKTsgLy8gd2lsbCBjYWxsIHRoZSBpbnN0YW5jZSdzIHByZXJlbmRlclxuICAgICAgICB0aGlzLmlzUmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIFxuICAgICAgICB2YXIgZXhpc3RpbmcgPSAkZC5xKHRoaXMuc2VsZWN0b3IpO1xuICAgICAgICBpZiAoIGV4aXN0aW5nICYmICF0aGlzLnJlcmVuZGVyICkge1xuICAgICAgICAgICAgICAgIC8vIGllIGlzIGV4aXN0aW5nIGFuZCBubyBuZWVkIHRvIHJlcmVuZGVyXG4gICAgICAgICAgICB0aGlzLnByZXJlbmRlcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9IGVsc2UgaWYgKCBleGlzdGluZyApIHsgLy8gaWUgaXMgZXhpc3RpbmcgYnV0IHRoZXJlIGlzIGEgbmVlZCB0byByZXJlbmRlclxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleGlzdGluZy5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWwgPSAkZC5jKHRoaXMuc2VsZWN0b3IpO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgXG4gICAgfVxufSIsIi8qIGdsb2JhbCBkYXRhTGF5ZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiBHVE1QdXNoKGV2ZW50TGFiZWwpIHtcbiAgICBpZiAoZGF0YUxheWVyKSB7XG4gICAgICAgIGRhdGFMYXllci5wdXNoKHsgJ2V2ZW50JzogJ0ludGVyYWN0aXZlIENsaWNrJywgJ2V2ZW50RGF0YSc6IGV2ZW50TGFiZWwgfSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2hXaW5kb3dSZXNpemUoUykgeyAvLyBuZWVkIHRvIHBhc3MgaW4gdGhlIFN0YXRlTW9kdWxlXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVGhyb3R0bGVyLCBmYWxzZSk7XG5cbiAgICB2YXIgcmVzaXplVGltZW91dDtcblxuICAgIGZ1bmN0aW9uIHJlc2l6ZVRocm90dGxlcigpIHsgLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy9yZXNpemUjc2V0VGltZW91dFxuICAgICAgICAvLyBpZ25vcmUgcmVzaXplIGV2ZW50cyBhcyBsb25nIGFzIGFuIGFjdHVhbFJlc2l6ZUhhbmRsZXIgZXhlY3V0aW9uIGlzIGluIHRoZSBxdWV1ZVxuICAgICAgICBpZiAoIXJlc2l6ZVRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFjdHVhbFJlc2l6ZUhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgICByZXNpemVUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIH0sIDM1MCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY3R1YWxSZXNpemVIYW5kbGVyKCkge1xuICAgICAgICBcbiAgICAgICAgUy5zZXRTdGF0ZSgncmVzaXplJywgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRmFkZUluVGV4dCA9IChmdW5jdGlvbigpe1xuICAgIEhUTUxFbGVtZW50LnByb3RvdHlwZS5mYWRlT3V0Q29udGVudCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ25vLW9wYWNpdHknKTtcbiAgICB9O1xuICAgIEhUTUxFbGVtZW50LnByb3RvdHlwZS5mYWRlSW5Db250ZW50ID0gZnVuY3Rpb24oY29udGVudCwgcyl7XG4gICAgICAgIHZhciBkdXJhdGlvblMgPSBzIHx8IDA7XG4gICAgICAgIGlmICggcyApe1xuICAgICAgICAgICAgdGhpcy5zdHlsZS50cmFuc2l0aW9uID0gJ29wYWNpdHkgJyArIHMgKyAncyBlYXNlLWluLW91dCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb25TdHIgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2l0aW9uLWR1cmF0aW9uJykgfHwgZHVyYXRpb25TLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gcGFyc2VGbG9hdChkdXJhdGlvblN0cikgKiAxMDAwO1xuICAgICAgICAgICAgdGhpcy5mYWRlT3V0Q29udGVudCgpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBjb250ZW50O1xuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnbm8tb3BhY2l0eScpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICAgIH0pO1xuICAgIH07XG59KSgpO1xuZXhwb3J0IGNvbnN0IFN0cmluZ0hlbHBlcnMgPSAoZnVuY3Rpb24oKXtcbiAgICBTdHJpbmcucHJvdG90eXBlLmNsZWFuU3RyaW5nID0gZnVuY3Rpb24oKSB7IC8vIGxvd2VyY2FzZSBhbmQgcmVtb3ZlIHB1bmN0dWF0aW9uIGFuZCByZXBsYWNlIHNwYWNlcyB3aXRoIGh5cGhlbnM7IGRlbGV0ZSBwdW5jdHVhdGlvblxuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9bIC9dL2csJy0nKS5yZXBsYWNlKC9bJ1wi4oCd4oCZ4oCc4oCYLC4hPzsoKSY6XS9nLCcnKS50b0xvd2VyQ2FzZSgpO1xuICAgIH07XG5cbiAgICBTdHJpbmcucHJvdG90eXBlLnJlbW92ZVVuZGVyc2NvcmVzID0gZnVuY3Rpb24oKSB7IFxuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9fL2csJyAnKTtcbiAgICB9O1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS51bmRvQ2FtZWxDYXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoLyhbQS1aXSkvZywgJyAkMScpLnRvTG93ZXJDYXNlKCk7XG4gICAgfTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUudHJ1bmMgPSBTdHJpbmcucHJvdG90eXBlLnRydW5jIHx8IC8vIGh0IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMTk5NDIwXG4gICAgICAgICBmdW5jdGlvbiggbiwgdXNlV29yZEJvdW5kYXJ5ICl7XG4gICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoIDw9IG4pIHsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgICAgICB2YXIgc3ViU3RyaW5nID0gdGhpcy5zdWJzdHIoMCwgbi0xKTtcbiAgICAgICAgICAgICByZXR1cm4gKHVzZVdvcmRCb3VuZGFyeSBcbiAgICAgICAgICAgICAgICA/IHN1YlN0cmluZy5zdWJzdHIoMCwgc3ViU3RyaW5nLmxhc3RJbmRleE9mKCcgJykpIFxuICAgICAgICAgICAgICAgIDogc3ViU3RyaW5nKSArIFwiLi4uXCI7XG4gICAgICAgICAgfTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUuaGFzaENvZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBoYXNoID0gMCwgaSwgY2hyO1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gaGFzaDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNociAgID0gdGhpcy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hyO1xuICAgICAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfTtcbn0pKClcblxuZXhwb3J0IGNvbnN0IERPTUhlbHBlcnMgPSB7XG4gYzogIChzKSA9PiB7XG4gICAgIFxuICAgICBpZiAoIHMuaW5kZXhPZignLicpICE9PSAtMSB8fCBzLmluZGV4T2YoJyMnKSAhPT0gLTEgKXtcbiAgICAgICAgIGxldCBjbGFzc1N0cmluZ3MgPSBzLm1hdGNoKC9cXC4oW14jLl0qKS9nKSB8fCBbXTtcbiAgICAgICAgIGxldCBpZFN0cmluZyA9IHMubWF0Y2goLyMoW14uXSopLyk7XG4gICAgICAgICBsZXQgZWxTdHJpbmcgPSBzLm1hdGNoKC9eKFteLiNdKykvKTtcbiAgICAgICAgIFxuICAgICAgICAgXG4gICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsU3RyaW5nWzBdKTtcbiAgICAgICAgIGNsYXNzU3RyaW5ncy5mb3JFYWNoKGtsYXNzID0+IHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoa2xhc3MucmVwbGFjZSgnLicsJycpKTtcbiAgICAgICAgIH0pO1xuICAgICAgICAgaWYgKCBpZFN0cmluZyAhPT0gbnVsbCApe1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkU3RyaW5nWzFdKTtcbiAgICAgICAgIH1cbiAgICAgICAgIHJldHVybiBlbDtcbiAgICAgfVxuICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChzKTtcbiB9LFxuIHE6ICAocykgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzKSxcbiBxYTogKHMpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocylcbn1cbiIsImNvbnN0IFB1YlN1YiA9IHJlcXVpcmUoJ3B1YnN1Yi1qcycpO1xuY29uc3Qgc3RhdGUgPSB7fTtcblxuLy9hcnJheS5jb21wYXJlKG90aGVyQXJyYXkpIC8vSFQgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjIyOTE5Ny9ob3ctdG8ta25vdy1pZi10d28tYXJyYXlzLWhhdmUtdGhlLXNhbWUtdmFsdWVzXG5BcnJheS5wcm90b3R5cGUuY29tcGFyZSA9IEFycmF5LnByb3RvdHlwZS5jb21wYXJlIHx8IGZ1bmN0aW9uKHRlc3RBcnIpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggIT0gdGVzdEFyci5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDAgJiYgdGVzdEFyci5sZW5ndGggPT09IDApIHJldHVybiB0cnVlO1xuICAgIGNvbnNvbGUubG9nKFwiaW4gY29tcGFyZVwiKTtcbiAgICBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlc3RBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXNbaV0gIT09IHRlc3RBcnJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9sb2dTdGF0ZSgpe1xuICAgIGNvbnNvbGUubG9nKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gX2dldFN0YXRlKHByb3BlcnR5KXtcbiAgICByZXR1cm4gKCBzdGF0ZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCApID8gc3RhdGVbcHJvcGVydHldWzBdIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJldmlvdXNTdGF0ZShwcm9wZXJ0eSl7XG4gICAgcmV0dXJuICggc3RhdGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQgJiYgc3RhdGVbcHJvcGVydHldWzFdICE9PSB1bmRlZmluZWQgKSA/IHN0YXRlW3Byb3BlcnR5XVsxXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3NldFN0YXRlKGtleSx2YWx1ZSkgeyBcblxuICAgIGlmICggc3RhdGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7IC8vIGllIGZpcnN0IHRpbWUgc3RhdGUgcHJvcGVydHkgaXMgYmVpbmcgZGVmaW5lZFxuICAgICAgICBzdGF0ZVtrZXldID0gW3ZhbHVlXTtcbiAgICAgICAgUHViU3ViLnB1Ymxpc2goa2V5LCB2YWx1ZSk7XG4gICAgICAgIF9sb2dTdGF0ZSgpO1xuICAgIH0gZWxzZSB7IC8vIG5vdCB0aGUgZmlyc3QgdGltZSB0aGUgcHJvcGVydHkgaXMgYmVpbmcgZGVmaW5lZFxuICAgIC8vSWYgaXQncyBhIHN0cmluZyBvciBhcnJheSBhbmQgdmFsdWVzIGFyZSB0aGUgc2FtZSwgc3RhdGVDaGFuZ2VkPUZhbHNlK1xuICAgICAgICB2YXIgc3RhdGVDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgc3RhdGVDaGFuZ2VkID0gKHN0YXRlW2tleV1bMF0gIT09IHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiBBcnJheS5pc0FycmF5KHN0YXRlW2tleV1bMF0pKSB7XG4gICAgICAgICAgICBzdGF0ZUNoYW5nZWQgPSAhdmFsdWUuY29tcGFyZShzdGF0ZVtrZXldWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlQ2hhbmdlZCA9IHRydWU7IC8vYXNzdW1lIGl0J3MgY2hhbmdlZCBpZiB3ZSBjYW4ndCB2ZXJpZnlcbiAgICAgICAgfSAgICAgICAgICAgICAgXG4gICAgICAgIC8vT25seSBwdWJsaXNoIGlmIHdlJ3ZlIGNoYW5nZWQgc3RhdGVcbiAgICAgICAgaWYgKCBzdGF0ZUNoYW5nZWQgKSB7IFxuICAgICAgICAgICAgc3RhdGVba2V5XS51bnNoaWZ0KHZhbHVlKTtcbiAgICAgICAgICAgIFB1YlN1Yi5wdWJsaXNoKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgX2xvZ1N0YXRlKCk7XG4gICAgICAgICAgICBpZiAoIHN0YXRlW2tleV0ubGVuZ3RoID4gMiApIHtcbiAgICAgICAgICAgICAgICBzdGF0ZVtrZXldLmxlbmd0aCA9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydHMuc3RhdGVNb2R1bGUgPSB7XG4gICAgbG9nU3RhdGU6IF9sb2dTdGF0ZSxcbiAgICBnZXRTdGF0ZTogX2dldFN0YXRlLFxuICAgIGdldFByZXZpb3VzU3RhdGU6IF9nZXRQcmV2aW91c1N0YXRlLFxuICAgIHNldFN0YXRlOiBfc2V0U3RhdGVcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAsMjAxMSwyMDEyLDIwMTMsMjAxNCBNb3JnYW4gUm9kZXJpY2sgaHR0cDovL3JvZGVyaWNrLmRrXG4gKiBMaWNlbnNlOiBNSVQgLSBodHRwOi8vbXJnbnJkcmNrLm1pdC1saWNlbnNlLm9yZ1xuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tcm9kZXJpY2svUHViU3ViSlNcbiAqL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3Rvcnkpe1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBQdWJTdWIgPSB7fTtcbiAgICByb290LlB1YlN1YiA9IFB1YlN1YjtcblxuICAgIHZhciBkZWZpbmUgPSByb290LmRlZmluZTtcblxuICAgIGZhY3RvcnkoUHViU3ViKTtcblxuICAgIC8vIEFNRCBzdXBwb3J0XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCl7XG4gICAgICAgIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIFB1YlN1YjsgfSk7XG5cbiAgICAgICAgLy8gQ29tbW9uSlMgYW5kIE5vZGUuanMgbW9kdWxlIHN1cHBvcnRcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jyl7XG4gICAgICAgIGlmIChtb2R1bGUgIT09IHVuZGVmaW5lZCAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gUHViU3ViOyAvLyBOb2RlLmpzIHNwZWNpZmljIGBtb2R1bGUuZXhwb3J0c2BcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRzLlB1YlN1YiA9IFB1YlN1YjsgLy8gQ29tbW9uSlMgbW9kdWxlIDEuMS4xIHNwZWNcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gUHViU3ViOyAvLyBDb21tb25KU1xuICAgIH1cblxufSgoIHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdyApIHx8IHRoaXMsIGZ1bmN0aW9uIChQdWJTdWIpe1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBtZXNzYWdlcyA9IHt9LFxuICAgICAgICBsYXN0VWlkID0gLTE7XG5cbiAgICBmdW5jdGlvbiBoYXNLZXlzKG9iail7XG4gICAgICAgIHZhciBrZXk7XG5cbiAgICAgICAgZm9yIChrZXkgaW4gb2JqKXtcbiAgICAgICAgICAgIGlmICggb2JqLmhhc093blByb3BlcnR5KGtleSkgKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgdGhyb3dzIHRoZSBwYXNzZWQgZXhjZXB0aW9uLCBmb3IgdXNlIGFzIGFyZ3VtZW50IGZvciBzZXRUaW1lb3V0XG4gICAgICogQGFsaWFzIHRocm93RXhjZXB0aW9uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsgT2JqZWN0IH0gZXggQW4gRXJyb3Igb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3dFeGNlcHRpb24oIGV4ICl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiByZVRocm93RXhjZXB0aW9uKCl7XG4gICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyggc3Vic2NyaWJlciwgbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3Vic2NyaWJlciggbWVzc2FnZSwgZGF0YSApO1xuICAgICAgICB9IGNhdGNoKCBleCApe1xuICAgICAgICAgICAgc2V0VGltZW91dCggdGhyb3dFeGNlcHRpb24oIGV4ICksIDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbFN1YnNjcmliZXJXaXRoSW1tZWRpYXRlRXhjZXB0aW9ucyggc3Vic2NyaWJlciwgbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICBzdWJzY3JpYmVyKCBtZXNzYWdlLCBkYXRhICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsaXZlck1lc3NhZ2UoIG9yaWdpbmFsTWVzc2FnZSwgbWF0Y2hlZE1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgdmFyIHN1YnNjcmliZXJzID0gbWVzc2FnZXNbbWF0Y2hlZE1lc3NhZ2VdLFxuICAgICAgICAgICAgY2FsbFN1YnNjcmliZXIgPSBpbW1lZGlhdGVFeGNlcHRpb25zID8gY2FsbFN1YnNjcmliZXJXaXRoSW1tZWRpYXRlRXhjZXB0aW9ucyA6IGNhbGxTdWJzY3JpYmVyV2l0aERlbGF5ZWRFeGNlcHRpb25zLFxuICAgICAgICAgICAgcztcblxuICAgICAgICBpZiAoICFtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggbWF0Y2hlZE1lc3NhZ2UgKSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocyBpbiBzdWJzY3JpYmVycyl7XG4gICAgICAgICAgICBpZiAoIHN1YnNjcmliZXJzLmhhc093blByb3BlcnR5KHMpKXtcbiAgICAgICAgICAgICAgICBjYWxsU3Vic2NyaWJlciggc3Vic2NyaWJlcnNbc10sIG9yaWdpbmFsTWVzc2FnZSwgZGF0YSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGVsaXZlcnlGdW5jdGlvbiggbWVzc2FnZSwgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZGVsaXZlck5hbWVzcGFjZWQoKXtcbiAgICAgICAgICAgIHZhciB0b3BpYyA9IFN0cmluZyggbWVzc2FnZSApLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoICcuJyApO1xuXG4gICAgICAgICAgICAvLyBkZWxpdmVyIHRoZSBtZXNzYWdlIGFzIGl0IGlzIG5vd1xuICAgICAgICAgICAgZGVsaXZlck1lc3NhZ2UobWVzc2FnZSwgbWVzc2FnZSwgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyk7XG5cbiAgICAgICAgICAgIC8vIHRyaW0gdGhlIGhpZXJhcmNoeSBhbmQgZGVsaXZlciBtZXNzYWdlIHRvIGVhY2ggbGV2ZWxcbiAgICAgICAgICAgIHdoaWxlKCBwb3NpdGlvbiAhPT0gLTEgKXtcbiAgICAgICAgICAgICAgICB0b3BpYyA9IHRvcGljLnN1YnN0ciggMCwgcG9zaXRpb24gKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICAgICAgICAgICAgZGVsaXZlck1lc3NhZ2UoIG1lc3NhZ2UsIHRvcGljLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVzc2FnZUhhc1N1YnNjcmliZXJzKCBtZXNzYWdlICl7XG4gICAgICAgIHZhciB0b3BpYyA9IFN0cmluZyggbWVzc2FnZSApLFxuICAgICAgICAgICAgZm91bmQgPSBCb29sZWFuKG1lc3NhZ2VzLmhhc093blByb3BlcnR5KCB0b3BpYyApICYmIGhhc0tleXMobWVzc2FnZXNbdG9waWNdKSksXG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcblxuICAgICAgICB3aGlsZSAoICFmb3VuZCAmJiBwb3NpdGlvbiAhPT0gLTEgKXtcbiAgICAgICAgICAgIHRvcGljID0gdG9waWMuc3Vic3RyKCAwLCBwb3NpdGlvbiApO1xuICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG4gICAgICAgICAgICBmb3VuZCA9IEJvb2xlYW4obWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIHRvcGljICkgJiYgaGFzS2V5cyhtZXNzYWdlc1t0b3BpY10pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCBzeW5jLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIG1lc3NhZ2UgPSAodHlwZW9mIG1lc3NhZ2UgPT09ICdzeW1ib2wnKSA/IG1lc3NhZ2UudG9TdHJpbmcoKSA6IG1lc3NhZ2U7XG5cbiAgICAgICAgdmFyIGRlbGl2ZXIgPSBjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICksXG4gICAgICAgICAgICBoYXNTdWJzY3JpYmVycyA9IG1lc3NhZ2VIYXNTdWJzY3JpYmVycyggbWVzc2FnZSApO1xuXG4gICAgICAgIGlmICggIWhhc1N1YnNjcmliZXJzICl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHN5bmMgPT09IHRydWUgKXtcbiAgICAgICAgICAgIGRlbGl2ZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIGRlbGl2ZXIsIDAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoZXMgdGhlIG1lc3NhZ2UsIHBhc3NpbmcgdGhlIGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBwdWJsaXNoXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBwdWJsaXNoXG4gICAgICogQHBhcmFtIHt9IGRhdGEgVGhlIGRhdGEgdG8gcGFzcyB0byBzdWJzY3JpYmVyc1xuICAgICAqIEByZXR1cm4geyBCb29sZWFuIH1cbiAgICAgKi9cbiAgICBQdWJTdWIucHVibGlzaCA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHJldHVybiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCBmYWxzZSwgUHViU3ViLmltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIHRoZSB0aGUgbWVzc2FnZSBzeW5jaHJvbm91c2x5LCBwYXNzaW5nIHRoZSBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAYWxpYXMgcHVibGlzaFN5bmNcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHB1Ymxpc2hcbiAgICAgKiBAcGFyYW0ge30gZGF0YSBUaGUgZGF0YSB0byBwYXNzIHRvIHN1YnNjcmliZXJzXG4gICAgICogQHJldHVybiB7IEJvb2xlYW4gfVxuICAgICAqL1xuICAgIFB1YlN1Yi5wdWJsaXNoU3luYyA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHJldHVybiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCB0cnVlLCBQdWJTdWIuaW1tZWRpYXRlRXhjZXB0aW9ucyApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVzIHRoZSBwYXNzZWQgZnVuY3Rpb24gdG8gdGhlIHBhc3NlZCBtZXNzYWdlLiBFdmVyeSByZXR1cm5lZCB0b2tlbiBpcyB1bmlxdWUgYW5kIHNob3VsZCBiZSBzdG9yZWQgaWYgeW91IG5lZWQgdG8gdW5zdWJzY3JpYmVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAYWxpYXMgc3Vic2NyaWJlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzdWJzY3JpYmUgdG9cbiAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhIG5ldyBtZXNzYWdlIGlzIHB1Ymxpc2hlZFxuICAgICAqIEByZXR1cm4geyBTdHJpbmcgfVxuICAgICAqL1xuICAgIFB1YlN1Yi5zdWJzY3JpYmUgPSBmdW5jdGlvbiggbWVzc2FnZSwgZnVuYyApe1xuICAgICAgICBpZiAoIHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lc3NhZ2UgPSAodHlwZW9mIG1lc3NhZ2UgPT09ICdzeW1ib2wnKSA/IG1lc3NhZ2UudG9TdHJpbmcoKSA6IG1lc3NhZ2U7XG5cbiAgICAgICAgLy8gbWVzc2FnZSBpcyBub3QgcmVnaXN0ZXJlZCB5ZXRcbiAgICAgICAgaWYgKCAhbWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIG1lc3NhZ2UgKSApe1xuICAgICAgICAgICAgbWVzc2FnZXNbbWVzc2FnZV0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZvcmNpbmcgdG9rZW4gYXMgU3RyaW5nLCB0byBhbGxvdyBmb3IgZnV0dXJlIGV4cGFuc2lvbnMgd2l0aG91dCBicmVha2luZyB1c2FnZVxuICAgICAgICAvLyBhbmQgYWxsb3cgZm9yIGVhc3kgdXNlIGFzIGtleSBuYW1lcyBmb3IgdGhlICdtZXNzYWdlcycgb2JqZWN0XG4gICAgICAgIHZhciB0b2tlbiA9ICd1aWRfJyArIFN0cmluZygrK2xhc3RVaWQpO1xuICAgICAgICBtZXNzYWdlc1ttZXNzYWdlXVt0b2tlbl0gPSBmdW5jO1xuICAgICAgICBcbiAgICAgICAgLy8gcmV0dXJuIHRva2VuIGZvciB1bnN1YnNjcmliaW5nXG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0aGUgcGFzc2VkIGZ1bmN0aW9uIHRvIHRoZSBwYXNzZWQgbWVzc2FnZSBvbmNlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHN1YnNjcmliZU9uY2VcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHN1YnNjcmliZSB0b1xuICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgbmV3IG1lc3NhZ2UgaXMgcHVibGlzaGVkXG4gICAgICogQHJldHVybiB7IFB1YlN1YiB9XG4gICAgICovXG4gICAgUHViU3ViLnN1YnNjcmliZU9uY2UgPSBmdW5jdGlvbiggbWVzc2FnZSwgZnVuYyApe1xuICAgICAgICB2YXIgdG9rZW4gPSBQdWJTdWIuc3Vic2NyaWJlKCBtZXNzYWdlLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy8gYmVmb3JlIGZ1bmMgYXBwbHksIHVuc3Vic2NyaWJlIG1lc3NhZ2VcbiAgICAgICAgICAgIFB1YlN1Yi51bnN1YnNjcmliZSggdG9rZW4gKTtcbiAgICAgICAgICAgIGZ1bmMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFB1YlN1YjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBzdWJzY3JpcHRpb25zXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBjbGVhckFsbFN1YnNjcmlwdGlvbnNcbiAgICAgKi9cbiAgICBQdWJTdWIuY2xlYXJBbGxTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gY2xlYXJBbGxTdWJzY3JpcHRpb25zKCl7XG4gICAgICAgIG1lc3NhZ2VzID0ge307XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFyIHN1YnNjcmlwdGlvbnMgYnkgdGhlIHRvcGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBjbGVhckFsbFN1YnNjcmlwdGlvbnNcbiAgICAgKi9cbiAgICBQdWJTdWIuY2xlYXJTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gY2xlYXJTdWJzY3JpcHRpb25zKHRvcGljKXtcbiAgICAgICAgdmFyIG07XG4gICAgICAgIGZvciAobSBpbiBtZXNzYWdlcyl7XG4gICAgICAgICAgICBpZiAobWVzc2FnZXMuaGFzT3duUHJvcGVydHkobSkgJiYgbS5pbmRleE9mKHRvcGljKSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VzW21dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgc3Vic2NyaXB0aW9uc1xuICAgICAqXG4gICAgICogLSBXaGVuIHBhc3NlZCBhIHRva2VuLCByZW1vdmVzIGEgc3BlY2lmaWMgc3Vic2NyaXB0aW9uLlxuICAgICAqXG5cdCAqIC0gV2hlbiBwYXNzZWQgYSBmdW5jdGlvbiwgcmVtb3ZlcyBhbGwgc3Vic2NyaXB0aW9ucyBmb3IgdGhhdCBmdW5jdGlvblxuICAgICAqXG5cdCAqIC0gV2hlbiBwYXNzZWQgYSB0b3BpYywgcmVtb3ZlcyBhbGwgc3Vic2NyaXB0aW9ucyBmb3IgdGhhdCB0b3BpYyAoaGllcmFyY2h5KVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgc3Vic2NyaWJlT25jZVxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB8IEZ1bmN0aW9uIH0gdmFsdWUgQSB0b2tlbiwgZnVuY3Rpb24gb3IgdG9waWMgdG8gdW5zdWJzY3JpYmUgZnJvbVxuICAgICAqIEBleGFtcGxlIC8vIFVuc3Vic2NyaWJpbmcgd2l0aCBhIHRva2VuXG4gICAgICogdmFyIHRva2VuID0gUHViU3ViLnN1YnNjcmliZSgnbXl0b3BpYycsIG15RnVuYyk7XG4gICAgICogUHViU3ViLnVuc3Vic2NyaWJlKHRva2VuKTtcbiAgICAgKiBAZXhhbXBsZSAvLyBVbnN1YnNjcmliaW5nIHdpdGggYSBmdW5jdGlvblxuICAgICAqIFB1YlN1Yi51bnN1YnNjcmliZShteUZ1bmMpO1xuICAgICAqIEBleGFtcGxlIC8vIFVuc3Vic2NyaWJpbmcgZnJvbSBhIHRvcGljXG4gICAgICogUHViU3ViLnVuc3Vic2NyaWJlKCdteXRvcGljJyk7XG4gICAgICovXG4gICAgUHViU3ViLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICB2YXIgZGVzY2VuZGFudFRvcGljRXhpc3RzID0gZnVuY3Rpb24odG9waWMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbTtcbiAgICAgICAgICAgICAgICBmb3IgKCBtIGluIG1lc3NhZ2VzICl7XG4gICAgICAgICAgICAgICAgICAgIGlmICggbWVzc2FnZXMuaGFzT3duUHJvcGVydHkobSkgJiYgbS5pbmRleE9mKHRvcGljKSA9PT0gMCApe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBkZXNjZW5kYW50IG9mIHRoZSB0b3BpYyBleGlzdHM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1RvcGljICAgID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAoIG1lc3NhZ2VzLmhhc093blByb3BlcnR5KHZhbHVlKSB8fCBkZXNjZW5kYW50VG9waWNFeGlzdHModmFsdWUpICksXG4gICAgICAgICAgICBpc1Rva2VuICAgID0gIWlzVG9waWMgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgICAgIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZSxcbiAgICAgICAgICAgIG0sIG1lc3NhZ2UsIHQ7XG5cbiAgICAgICAgaWYgKGlzVG9waWMpe1xuICAgICAgICAgICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKCBtIGluIG1lc3NhZ2VzICl7XG4gICAgICAgICAgICBpZiAoIG1lc3NhZ2VzLmhhc093blByb3BlcnR5KCBtICkgKXtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZXNbbV07XG5cbiAgICAgICAgICAgICAgICBpZiAoIGlzVG9rZW4gJiYgbWVzc2FnZVt2YWx1ZV0gKXtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VbdmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdG9rZW5zIGFyZSB1bmlxdWUsIHNvIHdlIGNhbiBqdXN0IHN0b3AgaGVyZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKCB0IGluIG1lc3NhZ2UgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmhhc093blByb3BlcnR5KHQpICYmIG1lc3NhZ2VbdF0gPT09IHZhbHVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZVt0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufSkpO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImNvbXBhcmVDb2xvcjFcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWNvbXBhcmVDb2xvcjFcIixcImNvbXBhcmVDb2xvcjJcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWNvbXBhcmVDb2xvcjJcIixcImNoYXJ0Q29udGFpbmVyXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1jaGFydENvbnRhaW5lclwiLFwiY2hhcnRMYWJlbFwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tY2hhcnRMYWJlbFwiLFwiY2hhcnRMYWJlbFRleHRcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWNoYXJ0TGFiZWxUZXh0XCIsXCJjaGFydExhYmVsMVwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tY2hhcnRMYWJlbDFcIixcImNoYXJ0TGFiZWwyXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1jaGFydExhYmVsMlwiLFwiYmFyQ29udGFpbmVyXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1iYXJDb250YWluZXJcIixcImJhckNvbnRhaW5lcjFcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWJhckNvbnRhaW5lcjFcIixcImJhckNvbnRhaW5lcjJcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWJhckNvbnRhaW5lcjJcIixcImRhdGFMYWJlbFwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tZGF0YUxhYmVsXCJ9OyIsImltcG9ydCBFbGVtZW50IGZyb20gJ0BVSS9lbGVtZW50Lyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBhcmlzb24gZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgdmFyIGRpdiA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICB0aGlzLm1hdGNoZXMgPSBbXTtcbiAgICAgICAgdGhpcy5tYXRjaGVzWzBdID0gdGhpcy5tb2RlbC5kYXRhLmZpbmQoZCA9PiBkLmNvZGUgPT09IHRoaXMuZGF0YS5jb21wYXJpc29uWzBdKTtcbiAgICAgICAgdGhpcy5tYXRjaGVzWzFdID0gdGhpcy5tb2RlbC5kYXRhLmZpbmQoZCA9PiBkLmNvZGUgPT09IHRoaXMuZGF0YS5jb21wYXJpc29uWzFdKTtcbiAgICAgICAgXG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGRpdjtcbiAgICAgICAgfVxuICAgICAgICBcblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cbiAgICB1cGRhdGUoaW5kZXgsZGF0YSl7XG4gICAgICAgIHRoaXMubWF0Y2hlc1tpbmRleF0gPSB0aGlzLm1vZGVsLmRhdGEuZmluZChkID0+IGQuY29kZSA9PT0gZGF0YSk7XG4gICAgfVxuXG59IiwiaW1wb3J0IHMgZnJvbSAnLi9zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5cbiBleHBvcnQgZGVmYXVsdCBjbGFzcyBCYXIgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgdmFyIGRpdiA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cbiAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQocy5iYXIsIHNbJ2JhckNvbG9yJyArIHRoaXMuZGF0YS5jb2xvcl0pO1xuICAgICAgICBkaXYuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0aGlzLnBhcmVudC5jb25zdHJ1Y3Rvci5uYW1lID09PSAnRmlmdHlTdGF0ZVZpZXcnID8gdGhpcy5wbGFjZVplcm8odGhpcy5kYXRhLmZpZWxkKSAqIDEwMCArICclJyA6IDB9KSBzY2FsZVgoJHt0aGlzLmxpbmVhclNjYWxlKHRoaXMuZGF0YS5kLCB0aGlzLmRhdGEuZmllbGQpfSlgO1xuXG4gICAgICAgIHJldHVybiBkaXY7XG4gICAgfVxuICAgIGxpbmVhclNjYWxlKG1hdGNoLCBmaWVsZCl7XG4gICAgICAgIFxuICAgICAgICB2YXIgdHlwZU9iamVjdCA9IHRoaXMubW9kZWwudHlwZXMuZmluZCh0ID0+IHQuZmllbGQgPT09IGZpZWxkKSxcbiAgICAgICAgICAgIC8vbWF4ID0gTWF0aC5tYXgodHlwZU9iamVjdC5tYXgsIDEwMCksXG4gICAgICAgICAgICAvL21pbiA9IE1hdGgubWluKHR5cGVPYmplY3QubWluLCAwKSxcbiAgICAgICAgICAgIHNjYWxlID0gdGhpcy5wYXJlbnQuY29uc3RydWN0b3IubmFtZSAhPT0gJ0ZpZnR5U3RhdGVWaWV3JyAmJiB0eXBlT2JqZWN0LnR5cGUgPT09ICdwZXJjZW50JyA/IG1hdGNoW2ZpZWxkXSAvIDEgOiAoIG1hdGNoW2ZpZWxkXSAtIHR5cGVPYmplY3QubWluICkgLyB0eXBlT2JqZWN0LnNwcmVhZCxcbiAgICAgICAgICAgIHplcm9QbGFjZW1lbnQgPSB0aGlzLnBsYWNlWmVybyhmaWVsZCksXG4gICAgICAgICAgICBvZmZzZXQgPSB0eXBlT2JqZWN0LmNyb3NzZXNaZXJvIHx8IHRoaXMucGFyZW50LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdGaWZ0eVN0YXRlVmlldycgPyAwIDogLjAxLFxuICAgICAgICAgICAgYWRqdXN0ZWQgPSB0aGlzLnBhcmVudC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnRmlmdHlTdGF0ZVZpZXcnID8gb2Zmc2V0ICsgKCBzY2FsZSAqICggMSAtIG9mZnNldCkgKSA6IG9mZnNldCArICggc2NhbGUgKiAoIDEgLSBvZmZzZXQpICkgLSB6ZXJvUGxhY2VtZW50O1xuICAgICAgICByZXR1cm4gYWRqdXN0ZWQ7XG4gICAgfVxuICAgIHBsYWNlWmVybyhmaWVsZCl7XG4gICAgICAgIHZhciB0eXBlT2JqZWN0ID0gdGhpcy5tb2RlbC50eXBlcy5maW5kKHQgPT4gdC5maWVsZCA9PT0gZmllbGQpLFxuICAgICAgICAgICAgcmF3ID0gKCAwIC0gdHlwZU9iamVjdC5taW4gKSAvIHR5cGVPYmplY3Quc3ByZWFkO1xuICAgICAgICByZXR1cm4gcmF3ID4gMCA/IHJhdyA6IDA7XG4gICAgfVxuICAgIGNoZWNrSWZaZXJvKCl7XG4gICAgICAgIGlmICggdGhpcy5kYXRhLmRbdGhpcy5kYXRhLmZpZWxkXSA9PT0gMCApe1xuICAgICAgICAgICAgdGhpcy5lbC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQocy5pc1plcm8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUocy5pc1plcm8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZSgpe1xuICAgICAgICB0aGlzLmNoZWNrSWZaZXJvKCk7XG4gICAgICAgIC8vIGluIGRldmVsb3BtZW50IG1vZGUsIHRoaXMuZWwgaXMgYSBqcyBvYmplY3QgYnV0IGRvZXMgbm90IHJlZmVyIHRvIGVsZW1lbnQgcmVuZGVyZWQgb24gdGhlIHBhZ2VcbiAgICAgICAgLy92YXIgZWwgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5qcy1iYXItY29tcGFyZS0ke3RoaXMuZGF0YS5maWVsZH0tJHtpbmRleH1gKSA6IHRoaXMuZWw7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RoaXMucGFyZW50LmNvbnN0cnVjdG9yLm5hbWUgPT09ICdGaWZ0eVN0YXRlVmlldycgPyB0aGlzLnBsYWNlWmVybyh0aGlzLmRhdGEuZmllbGQpICogMTAwICsgJyUnIDogMH0pIHNjYWxlWCgke3RoaXMubGluZWFyU2NhbGUodGhpcy5kYXRhLmQsIHRoaXMuZGF0YS5maWVsZCl9KWA7XG4gICAgICAgIH0pOyAgICAgICBcbiAgICB9XG5cbn0iLCJleHBvcnQgZnVuY3Rpb24gZm9ybWF0VmFsdWUobWF0Y2gsIGZpZWxkKXtcbiAgICB2YXIgbWV0YURhdGEgPSB0aGlzLm1vZGVsLnR5cGVzLmZpbmQoZCA9PiBkLmZpZWxkID09PSBmaWVsZCksXG4gICAgICAgIHN0eWxlID0gbWV0YURhdGEudHlwZSxcbiAgICAgICAgZGVjaW1hbHMgPSBtZXRhRGF0YS5kZWNpbWFscyAhPT0gdW5kZWZpbmVkID8gbWV0YURhdGEuZGVjaW1hbHMgOiBzdHlsZSA9PT0gJ251bWJlcicgPyAxIDogc3R5bGUgPT09ICdjdXJyZW5jeScgPyAyIDogc3R5bGUgPT09ICdwZXJjZW50JyA/IDEgOiB1bmRlZmluZWQsXG4gICAgICAgIHZhbHVlID0gbWF0Y2hbZmllbGRdLFxuICAgICAgICBmb3JtYXR0ZWRWYWx1ZVN0cmluZztcbiAgICBzd2l0Y2goc3R5bGUpe1xuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWVTdHJpbmcgPSB2YWx1ZS50b0xvY2FsZVN0cmluZygnZW4tVVMnLCB7bWluaW11bUZyYWN0aW9uRGlnaXRzOiBkZWNpbWFsc30pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2N1cnJlbmN5JzpcbiAgICAgICAgICAgIGlmICggZGVjaW1hbHMgPT09IDAgKXtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZVN0cmluZyA9IE1hdGgucm91bmQodmFsdWUpLnRvTG9jYWxlU3RyaW5nKCdlbi1VUycsIHtzdHlsZSxjdXJyZW5jeTonVVNEJ30pLnNsaWNlKDAsLTMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZVN0cmluZyA9IHZhbHVlLnRvTG9jYWxlU3RyaW5nKCdlbi1VUycsIHtzdHlsZSxjdXJyZW5jeTonVVNEJ30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BlcmNlbnQnOlxuICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWVTdHJpbmcgPSB2YWx1ZS50b0xvY2FsZVN0cmluZygnZW4tVVMnLCB7c3R5bGUsIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogZGVjaW1hbHN9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWVTdHJpbmcgPSAnW3VuZm9ybWF0dGVkXScgKyB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0dGVkVmFsdWVTdHJpbmc7XG59IiwidmFyIGhhc2ggPSByZXF1aXJlKFwic3RyaW5nLWhhc2hcIik7XG52YXIgUHViU3ViID0gcmVxdWlyZShcInB1YnN1Yi1qc1wiKTtcbnZhciBzdWJzY3JpcHRpb25zID0ge307XG5mdW5jdGlvbiBsb2dTdWJzKCkge1xuICAgIGNvbnNvbGUubG9nKHN1YnNjcmlwdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUb2tlbih0b3BpYywgZm5SZWYpe1xuICAgIHZhciBmdW5jdGlvbkhhc2ggPSBoYXNoKGZuUmVmLnRvU3RyaW5nKCkpO1xuICAgIHZhciBzdHIgPSB0b3BpYyArIGZuUmVmO1xuICAgIHZhciB0b2tlbiA9ICdzdWInICsgaGFzaChzdHIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRva2VuOiB0b2tlbixcbiAgICAgICAgZm46IGZ1bmN0aW9uSGFzaFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHNldFN1YnMoc3Vic0FycmF5KSB7IC8vIHN1YnNBcnJheSBpcyBhcnJheSBvZiB0b3BpYy9mdW5jdGlvbiBwYWlyIGFycmF5c1xuICAgIHN1YnNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHBhaXIpe1xuICAgICAgICB2YXIgdG9waWMgPSBwYWlyWzBdLFxuICAgICAgICAgICAgZm5SZWYgPSBwYWlyWzFdLFxuICAgICAgICAgICAgdG9rZW5PYmogPSBjcmVhdGVUb2tlbih0b3BpYyxmblJlZik7XG4gICAgICAgIFxuICAgICAgICBpZiAoIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICggc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl1bdG9waWNdID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXVt0b3BpY10gPSBQdWJTdWIuc3Vic2NyaWJlKHRvcGljLGZuUmVmKTsgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgJ1N1YnNjcmlwdGlvbiB0b2tlbiBpcyBhbHJlYWR5IGluIHVzZS4nO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNhbmNlbFN1Yih0b3BpYyxmblJlZikgeyAvLyBmb3IgY2FuY2VsaW5nIHNpbmdsZSBzdWJzY3JpcHRpb25cbiAgICB2YXIgdG9rZW5PYmogPSBjcmVhdGVUb2tlbih0b3BpYyxmblJlZik7XG4gICAgaWYgKCBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSAhPT0gdW5kZWZpbmVkICYmIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICBQdWJTdWIudW5zdWJzY3JpYmUoIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXSApO1xuICAgICAgICBkZWxldGUgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl1bdG9waWNdO1xuICAgICAgICBpZiAoIE9iamVjdC5rZXlzKHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dKS5sZW5ndGggPT09IDAgKSB7XG4gICAgICAgICAgICBkZWxldGUgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl07XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyAnU3Vic2NyaXB0aW9uIGRvZXMgbm90IGV4aXN0Lic7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBsb2dTdWJzOmxvZ1N1YnMsXG4gICAgc2V0U3ViczpzZXRTdWJzLFxuICAgIGNhbmNlbFN1YjpjYW5jZWxTdWJcbn07IiwiZXhwb3J0IHZhciBwcmVmaXggPSBcIiRcIjtcblxuZnVuY3Rpb24gTWFwKCkge31cblxuTWFwLnByb3RvdHlwZSA9IG1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXAsXG4gIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHByb3BlcnR5ID0gcHJlZml4ICsga2V5O1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH0sXG4gIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSxcbiAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZW50cmllcy5wdXNoKHtrZXk6IHByb3BlcnR5LnNsaWNlKDEpLCB2YWx1ZTogdGhpc1twcm9wZXJ0eV19KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfSxcbiAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBlYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwKG9iamVjdCwgZikge1xuICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWFwKSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7IG1hcC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuXG4gIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgIG87XG5cbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgb2JqZWN0IHRvIG1hcC5cbiAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcDtcbiIsImltcG9ydCBtYXAgZnJvbSBcIi4vbWFwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IFtdLFxuICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICByb2xsdXAsXG4gICAgICBuZXN0O1xuXG4gIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGFycmF5LnNvcnQoc29ydFZhbHVlcyk7XG4gICAgICByZXR1cm4gcm9sbHVwICE9IG51bGwgPyByb2xsdXAoYXJyYXkpIDogYXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAga2V5VmFsdWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCgpLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkodmFsdWUgPSBhcnJheVtpXSkgKyBcIlwiKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZXNCeUtleS5zZXQoa2V5VmFsdWUsIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlc0J5S2V5LmVhY2goZnVuY3Rpb24odmFsdWVzLCBrZXkpIHtcbiAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyaWVzKG1hcCwgZGVwdGgpIHtcbiAgICBpZiAoKytkZXB0aCA+IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgaWYgKHJvbGx1cCAhPSBudWxsICYmIGRlcHRoID49IGtleXMubGVuZ3RoKSBhcnJheSA9IG1hcC5lbnRyaWVzKCk7XG4gICAgZWxzZSBhcnJheSA9IFtdLCBtYXAuZWFjaChmdW5jdGlvbih2LCBrKSB7IGFycmF5LnB1c2goe2tleTogaywgdmFsdWVzOiBlbnRyaWVzKHYsIGRlcHRoKX0pOyB9KTtcbiAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gIH1cblxuICByZXR1cm4gbmVzdCA9IHtcbiAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgIG1hcDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCk7IH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGVudHJpZXMoYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKSwgMCk7IH0sXG4gICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydEtleXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydFZhbHVlczogZnVuY3Rpb24ob3JkZXIpIHsgc29ydFZhbHVlcyA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gbWFwKCk7XG59XG5cbmZ1bmN0aW9uIHNldE1hcChtYXAsIGtleSwgdmFsdWUpIHtcbiAgbWFwLnNldChrZXksIHZhbHVlKTtcbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBtYXAsIHByZWZpeH0gZnJvbSBcIi4vbWFwXCI7XG5cbmZ1bmN0aW9uIFNldCgpIHt9XG5cbnZhciBwcm90byA9IG1hcC5wcm90b3R5cGU7XG5cblNldC5wcm90b3R5cGUgPSBzZXQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2V0LFxuICBoYXM6IHByb3RvLmhhcyxcbiAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhbHVlICs9IFwiXCI7XG4gICAgdGhpc1twcmVmaXggKyB2YWx1ZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBwcm90by5yZW1vdmUsXG4gIGNsZWFyOiBwcm90by5jbGVhcixcbiAgdmFsdWVzOiBwcm90by5rZXlzLFxuICBzaXplOiBwcm90by5zaXplLFxuICBlbXB0eTogcHJvdG8uZW1wdHksXG4gIGVhY2g6IHByb3RvLmVhY2hcbn07XG5cbmZ1bmN0aW9uIHNldChvYmplY3QsIGYpIHtcbiAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgZWxzZSBpZiAob2JqZWN0KSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKGYob2JqZWN0W2ldLCBpLCBvYmplY3QpKTtcbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXApIHtcbiAgdmFyIHZhbHVlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSB2YWx1ZXMucHVzaChtYXBba2V5XSk7XG4gIHJldHVybiB2YWx1ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXApIHtcbiAgdmFyIGVudHJpZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkgZW50cmllcy5wdXNoKHtrZXk6IGtleSwgdmFsdWU6IG1hcFtrZXldfSk7XG4gIHJldHVybiBlbnRyaWVzO1xufVxuIiwiZXhwb3J0IHtkZWZhdWx0IGFzIG5lc3R9IGZyb20gXCIuL25lc3RcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzZXR9IGZyb20gXCIuL3NldFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIG1hcH0gZnJvbSBcIi4vbWFwXCI7XG5leHBvcnQge2RlZmF1bHQgYXMga2V5c30gZnJvbSBcIi4va2V5c1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHZhbHVlc30gZnJvbSBcIi4vdmFsdWVzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZW50cmllc30gZnJvbSBcIi4vZW50cmllc1wiO1xuIiwiLyoqIVxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxuICogQHZlcnNpb24gMS4xNC43XG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IEZlZGVyaWNvIFppdm9sbyBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqL1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG52YXIgdGltZW91dER1cmF0aW9uID0gMDtcbmZvciAodmFyIGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkge1xuICAgIHRpbWVvdXREdXJhdGlvbiA9IDE7XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWljcm90YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB3aW5kb3cuUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSBmYWxzZTtcbiAgICAgIGZuKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRhc2tEZWJvdW5jZShmbikge1xuICB2YXIgc2NoZWR1bGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIGZuKCk7XG4gICAgICB9LCB0aW1lb3V0RHVyYXRpb24pO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHN1cHBvcnRzTWljcm9UYXNrcyA9IGlzQnJvd3NlciAmJiB3aW5kb3cuUHJvbWlzZTtcblxuLyoqXG4qIENyZWF0ZSBhIGRlYm91bmNlZCB2ZXJzaW9uIG9mIGEgbWV0aG9kLCB0aGF0J3MgYXN5bmNocm9ub3VzbHkgZGVmZXJyZWRcbiogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLlxuKlxuKiBAbWV0aG9kXG4qIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiogQGFyZ3VtZW50IHtGdW5jdGlvbn0gZm5cbiogQHJldHVybnMge0Z1bmN0aW9ufVxuKi9cbnZhciBkZWJvdW5jZSA9IHN1cHBvcnRzTWljcm9UYXNrcyA/IG1pY3JvdGFza0RlYm91bmNlIDogdGFza0RlYm91bmNlO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG86IGlzIGEgZnVuY3Rpb24/XG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XG4gIHZhciBnZXRUeXBlID0ge307XG4gIHJldHVybiBmdW5jdGlvblRvQ2hlY2sgJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogR2V0IENTUyBjb21wdXRlZCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIGNzcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbHxvdmVybGF5KS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbnZhciBpc0lFMTEgPSBpc0Jyb3dzZXIgJiYgISEod2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRVxuICovXG5mdW5jdGlvbiBpc0lFKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDExKSB7XG4gICAgcmV0dXJuIGlzSUUxMTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gMTApIHtcbiAgICByZXR1cm4gaXNJRTEwO1xuICB9XG4gIHJldHVybiBpc0lFMTEgfHwgaXNJRTEwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIHZhciBub09mZnNldFBhcmVudCA9IGlzSUUoMTApID8gZG9jdW1lbnQuYm9keSA6IG51bGw7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50IHx8IG51bGw7XG4gIC8vIFNraXAgaGlkZGVuIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYW4gb2Zmc2V0UGFyZW50XG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgPT09IG5vT2Zmc2V0UGFyZW50ICYmIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gKGVsZW1lbnQgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykub2Zmc2V0UGFyZW50O1xuICB9XG5cbiAgdmFyIG5vZGVOYW1lID0gb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudC5ub2RlTmFtZTtcblxuICBpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEgsIFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoWydUSCcsICdURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cbiAgdmFyIG9yZGVyID0gZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gIHZhciBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7XG4gIHJhbmdlLnNldEVuZChlbmQsIDApO1xuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50XG5cbiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgdmFyIGVsZW1lbnQxcm9vdCA9IGdldFJvb3QoZWxlbWVudDEpO1xuICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHtcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xuXG4gIHZhciB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuXG4vKlxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1YnRyYWN0IC0gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gc3VidHJhY3QgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxuICovXG5mdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuXG4vKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIHZhciBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10sIDEwKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSwgMTApO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IHBhcnNlSW50KGh0bWxbJ29mZnNldCcgKyBheGlzXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ1RvcCcgOiAnTGVmdCcpXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnKV0pIDogMCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKGRvY3VtZW50KSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRSgxMCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksXG4gICAgd2lkdGg6IGdldFNpemUoJ1dpZHRoJywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSlcbiAgfTtcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xuICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dFxuICovXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvZmZzZXRzLCB7XG4gICAgcmlnaHQ6IG9mZnNldHMubGVmdCArIG9mZnNldHMud2lkdGgsXG4gICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtPYmplY3R9IGNsaWVudCByZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0ge307XG5cbiAgLy8gSUUxMCAxMCBGSVg6IFBsZWFzZSwgZG9uJ3QgYXNrLCB0aGUgZWxlbWVudCBpc24ndFxuICAvLyBjb25zaWRlcmVkIGluIERPTSBpbiBzb21lIGNpcmN1bXN0YW5jZXMuLi5cbiAgLy8gVGhpcyBpc24ndCByZXByb2R1Y2libGUgaW4gSUUxMCBjb21wYXRpYmlsaXR5IG1vZGUgb2YgSUUxMVxuICB0cnkge1xuICAgIGlmIChpc0lFKDEwKSkge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gIH07XG5cbiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplc1xuICB2YXIgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcyhlbGVtZW50Lm93bmVyRG9jdW1lbnQpIDoge307XG4gIHZhciB3aWR0aCA9IHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LnJpZ2h0IC0gcmVzdWx0LmxlZnQ7XG4gIHZhciBoZWlnaHQgPSBzaXplcy5oZWlnaHQgfHwgZWxlbWVudC5jbGllbnRIZWlnaHQgfHwgcmVzdWx0LmJvdHRvbSAtIHJlc3VsdC50b3A7XG5cbiAgdmFyIGhvcml6U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRXaWR0aCAtIHdpZHRoO1xuICB2YXIgdmVydFNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0O1xuXG4gIC8vIGlmIGFuIGh5cG90aGV0aWNhbCBzY3JvbGxiYXIgaXMgZGV0ZWN0ZWQsIHdlIG11c3QgYmUgc3VyZSBpdCdzIG5vdCBhIGBib3JkZXJgXG4gIC8vIHdlIG1ha2UgdGhpcyBjaGVjayBjb25kaXRpb25hbCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICBpZiAoaG9yaXpTY3JvbGxiYXIgfHwgdmVydFNjcm9sbGJhcikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gICAgaG9yaXpTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneCcpO1xuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xuXG4gICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyO1xuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcbiAgfVxuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShjaGlsZHJlbiwgcGFyZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgaXNJRTEwID0gaXNJRSgxMCk7XG4gIHZhciBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJztcbiAgdmFyIGNoaWxkcmVuUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChjaGlsZHJlbik7XG4gIHZhciBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pO1xuXG4gIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTtcbiAgdmFyIGJvcmRlclRvcFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyVG9wV2lkdGgsIDEwKTtcbiAgdmFyIGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCwgMTApO1xuXG4gIC8vIEluIGNhc2VzIHdoZXJlIHRoZSBwYXJlbnQgaXMgZml4ZWQsIHdlIG11c3QgaWdub3JlIG5lZ2F0aXZlIHNjcm9sbCBpbiBvZmZzZXQgY2FsY1xuICBpZiAoZml4ZWRQb3NpdGlvbiAmJiBpc0hUTUwpIHtcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcbiAgICBwYXJlbnRSZWN0LmxlZnQgPSBNYXRoLm1heChwYXJlbnRSZWN0LmxlZnQsIDApO1xuICB9XG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wLCAxMCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBleGNsdWRlU2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIHZhciBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XG4gIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3Qob2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBmaXhlZCBvciBpcyBpbnNpZGUgYSBmaXhlZCBwYXJlbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gXCJpc0ZpeGVkP1wiXG4gKi9cbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgcGFyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChwYXJlbnROb2RlKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0lFKCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHBhcmFtIHtCb29sZWFufSBmaXhlZFBvc2l0aW9uIC0gSXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG5cbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMocG9wcGVyLm93bmVyRG9jdW1lbnQpLFxuICAgICAgICAgIGhlaWdodCA9IF9nZXRXaW5kb3dTaXplcy5oZWlnaHQsXG4gICAgICAgICAgd2lkdGggPSBfZ2V0V2luZG93U2l6ZXMud2lkdGg7XG5cbiAgICAgIGJvdW5kYXJpZXMudG9wICs9IG9mZnNldHMudG9wIC0gb2Zmc2V0cy5tYXJnaW5Ub3A7XG4gICAgICBib3VuZGFyaWVzLmJvdHRvbSA9IGhlaWdodCArIG9mZnNldHMudG9wO1xuICAgICAgYm91bmRhcmllcy5sZWZ0ICs9IG9mZnNldHMubGVmdCAtIG9mZnNldHMubWFyZ2luTGVmdDtcbiAgICAgIGJvdW5kYXJpZXMucmlnaHQgPSB3aWR0aCArIG9mZnNldHMubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIGFsbCB0aGUgb3RoZXIgRE9NIGVsZW1lbnRzLCB0aGlzIG9uZSBpcyBnb29kXG4gICAgICBib3VuZGFyaWVzID0gb2Zmc2V0cztcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFkZGluZ3NcbiAgcGFkZGluZyA9IHBhZGRpbmcgfHwgMDtcbiAgdmFyIGlzUGFkZGluZ051bWJlciA9IHR5cGVvZiBwYWRkaW5nID09PSAnbnVtYmVyJztcbiAgYm91bmRhcmllcy5sZWZ0ICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmxlZnQgfHwgMDtcbiAgYm91bmRhcmllcy50b3AgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wIHx8IDA7XG4gIGJvdW5kYXJpZXMucmlnaHQgLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcucmlnaHQgfHwgMDtcbiAgYm91bmRhcmllcy5ib3R0b20gLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcuYm90dG9tIHx8IDA7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSB8fCAwKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0IHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQgfHwgMCk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHZhciBoYXNoID0geyBsZWZ0OiAncmlnaHQnLCByaWdodDogJ2xlZnQnLCBib3R0b206ICd0b3AnLCB0b3A6ICdib3R0b20nIH07XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTtcblxuICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0XG4gIHZhciBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHRcbiAgfTtcblxuICAvLyBkZXBlbmRpbmcgYnkgdGhlIHBvcHBlciBwbGFjZW1lbnQgd2UgaGF2ZSB0byBjb21wdXRlIGl0cyBvZmZzZXRzIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW21haW5TaWRlXSArIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoc2Vjb25kYXJ5U2lkZSldO1xuICB9XG5cbiAgcmV0dXJuIHBvcHBlck9mZnNldHM7XG59XG5cbi8qKlxuICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmQoYXJyLCBjaGVjaykge1xuICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgIHJldHVybiBhcnIuZmluZChjaGVjayk7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYFxuICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG5cbi8qKlxuICogTG9vcCB0cm91Z2ggdGhlIGxpc3Qgb2YgbW9kaWZpZXJzIGFuZCBydW4gdGhlbSBpbiBvcmRlcixcbiAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IGVuZHMgLSBPcHRpb25hbCBtb2RpZmllciBuYW1lIHVzZWQgYXMgc3RvcHBlclxuICogQHJldHVybnMge2RhdGFPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHtcbiAgdmFyIG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkID8gbW9kaWZpZXJzIDogbW9kaWZpZXJzLnNsaWNlKDAsIGZpbmRJbmRleChtb2RpZmllcnMsICduYW1lJywgZW5kcykpO1xuXG4gIG1vZGlmaWVyc1RvUnVuLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKG1vZGlmaWVyWydmdW5jdGlvbiddKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgY29uc29sZS53YXJuKCdgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIScpO1xuICAgIH1cbiAgICB2YXIgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcbiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+XG4gKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyBpZiBwb3BwZXIgaXMgZGVzdHJveWVkLCBkb24ndCBwZXJmb3JtIGFueSBmdXJ0aGVyIHVwZGF0ZVxuICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhID0ge1xuICAgIGluc3RhbmNlOiB0aGlzLFxuICAgIHN0eWxlczoge30sXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGZsaXBwZWQ6IGZhbHNlLFxuICAgIG9mZnNldHM6IHt9XG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgaXMgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyRW5hYmxlZChtb2RpZmllcnMsIG1vZGlmaWVyTmFtZSkge1xuICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgZW5hYmxlZCA9IF9yZWYuZW5hYmxlZDtcbiAgICByZXR1cm4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICB2YXIgcHJlZml4ZXMgPSBbZmFsc2UsICdtcycsICdXZWJraXQnLCAnTW96JywgJ08nXTtcbiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgdG9DaGVjayA9IHByZWZpeCA/ICcnICsgcHJlZml4ICsgdXBwZXJQcm9wIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIERlc3Ryb3lzIHRoZSBwb3BwZXIuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuXG4gIC8vIHRvdWNoIERPTSBvbmx5IGlmIGBhcHBseVN0eWxlYCBtb2RpZmllciBpcyBlbmFibGVkXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZCh0aGlzLm1vZGlmaWVycywgJ2FwcGx5U3R5bGUnKSkge1xuICAgIHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKTtcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnRvcCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmxlZnQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5yaWdodCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmJvdHRvbSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLndpbGxDaGFuZ2UgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZVtnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpXSA9ICcnO1xuICB9XG5cbiAgdGhpcy5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0eSBhc2tlZCBmb3IgdGhlIGRlbGV0aW9uIG9uIGRlc3Ryb3lcbiAgLy8gZG8gbm90IHVzZSBgcmVtb3ZlYCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7XG4gICAgdGhpcy5wb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBvcHBlcik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogR2V0IHRoZSB3aW5kb3cgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtXaW5kb3d9XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxQYXJlbnQsIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cykge1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50Lm5vZGVOYW1lID09PSAnQk9EWSc7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBzY3JvbGxQYXJlbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHNjcm9sbFBhcmVudDtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgaWYgKCFpc0JvZHkpIHtcbiAgICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoZ2V0U2Nyb2xsUGFyZW50KHRhcmdldC5wYXJlbnROb2RlKSwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKTtcbiAgfVxuICBzY3JvbGxQYXJlbnRzLnB1c2godGFyZ2V0KTtcbn1cblxuLyoqXG4gKiBTZXR1cCBuZWVkZWQgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldHVwRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBvcHRpb25zLCBzdGF0ZSwgdXBkYXRlQm91bmQpIHtcbiAgLy8gUmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBzdGF0ZS51cGRhdGVCb3VuZCA9IHVwZGF0ZUJvdW5kO1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIC8vIFNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICB2YXIgc2Nyb2xsRWxlbWVudCA9IGdldFNjcm9sbFBhcmVudChyZWZlcmVuY2UpO1xuICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsRWxlbWVudCwgJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kLCBzdGF0ZS5zY3JvbGxQYXJlbnRzKTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IHNjcm9sbEVsZW1lbnQ7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSB0cnVlO1xuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIGFkZCByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgc3RhcnQgcmVjYWxjdWxhdGluZ1xuICogcG9zaXRpb24gb2YgdGhlIHBvcHBlciBlbGVtZW50IHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICB0aGlzLnN0YXRlID0gc2V0dXBFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLCB0aGlzLnN0YXRlLCB0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBzdGF0ZSkge1xuICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG5cbiAgLy8gUmVtb3ZlIHNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG4gIH0pO1xuXG4gIC8vIFJlc2V0IHN0YXRlXG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gbnVsbDtcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IFtdO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gbnVsbDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGZhbHNlO1xuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCByZW1vdmUgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHdvbid0IHJlY2FsY3VsYXRlIHBvcHBlciBwb3NpdGlvblxuICogd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuIEl0IGFsc28gd29uJ3QgdHJpZ2dlciBgb25VcGRhdGVgIGNhbGxiYWNrIGFueW1vcmUsXG4gKiB1bmxlc3MgeW91IGNhbGwgYHVwZGF0ZWAgbWV0aG9kIG1hbnVhbGx5LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICh0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgICB0aGlzLnN0YXRlID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMuc3RhdGUpO1xuICB9XG59XG5cbi8qKlxuICogVGVsbHMgaWYgYSBnaXZlbiBpbnB1dCBpcyBhIG51bWJlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHsqfSBpbnB1dCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNOdW1lcmljKG4pIHtcbiAgcmV0dXJuIG4gIT09ICcnICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB1bml0ID0gJyc7XG4gICAgLy8gYWRkIHVuaXQgaWYgdGhlIHZhbHVlIGlzIG51bWVyaWMgYW5kIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gICAgaWYgKFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLmluZGV4T2YocHJvcCkgIT09IC0xICYmIGlzTnVtZXJpYyhzdHlsZXNbcHJvcF0pKSB7XG4gICAgICB1bml0ID0gJ3B4JztcbiAgICB9XG4gICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlc1twcm9wXSArIHVuaXQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgYXR0cmlidXRlcyB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBhdHRyaWJ1dGVzIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcF07XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocHJvcCwgYXR0cmlidXRlc1twcm9wXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5zdHlsZXMgLSBMaXN0IG9mIHN0eWxlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLmF0dHJpYnV0ZXMgLSBMaXN0IG9mIGF0dHJpYnV0ZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc2FtZSBkYXRhIG9iamVjdFxuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlKGRhdGEpIHtcbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuc3R5bGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gaW4gdGhpcyB3YXkgd2UgY2FuIG1ha2UgdGhlIDNyZCBwYXJ0eSBtb2RpZmllcnMgYWRkIGN1c3RvbSBzdHlsZXMgdG8gaXRcbiAgLy8gQmUgYXdhcmUsIG1vZGlmaWVycyBjb3VsZCBvdmVycmlkZSB0aGUgcHJvcGVydGllcyBkZWZpbmVkIGluIHRoZSBwcmV2aW91c1xuICAvLyBsaW5lcyBvZiB0aGlzIG1vZGlmaWVyIVxuICBzZXRTdHlsZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuc3R5bGVzKTtcblxuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5hdHRyaWJ1dGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gdGhleSB3aWxsIGJlIHNldCBhcyBIVE1MIGF0dHJpYnV0ZXMgb2YgdGhlIGVsZW1lbnRcbiAgc2V0QXR0cmlidXRlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5hdHRyaWJ1dGVzKTtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgZGVmaW5lZCBhbmQgYXJyb3dTdHlsZXMgaGFzIHNvbWUgcHJvcGVydGllc1xuICBpZiAoZGF0YS5hcnJvd0VsZW1lbnQgJiYgT2JqZWN0LmtleXMoZGF0YS5hcnJvd1N0eWxlcykubGVuZ3RoKSB7XG4gICAgc2V0U3R5bGVzKGRhdGEuYXJyb3dFbGVtZW50LCBkYXRhLmFycm93U3R5bGVzKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFNldCB0aGUgeC1wbGFjZW1lbnQgYXR0cmlidXRlIGJlZm9yZSBldmVyeXRoaW5nIGVsc2UgYmVjYXVzZSBpdCBjb3VsZCBiZSB1c2VkXG4gKiB0byBhZGQgbWFyZ2lucyB0byB0aGUgcG9wcGVyIG1hcmdpbnMgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZCB0byBnZXQgdGhlXG4gKiBjb3JyZWN0IHBvcHBlciBvZmZzZXRzLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5tb2RpZmllcnNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUG9wcGVyLmpzIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBzdGF0ZSkge1xuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgdmFyIHJlZmVyZW5jZU9mZnNldHMgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgdmFyIHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KG9wdGlvbnMucGxhY2VtZW50LCByZWZlcmVuY2VPZmZzZXRzLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHBsYWNlbWVudCk7XG5cbiAgLy8gQXBwbHkgYHBvc2l0aW9uYCB0byBwb3BwZXIgYmVmb3JlIGFueXRoaW5nIGVsc2UgYmVjYXVzZVxuICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9uc1xuICBzZXRTdHlsZXMocG9wcGVyLCB7IHBvc2l0aW9uOiBvcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJyB9KTtcblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gc2hvdWxkUm91bmQgLSBJZiB0aGUgb2Zmc2V0cyBzaG91bGQgYmUgcm91bmRlZCBhdCBhbGxcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwb3BwZXIncyBwb3NpdGlvbiBvZmZzZXRzIHJvdW5kZWRcbiAqXG4gKiBUaGUgdGFsZSBvZiBwaXhlbC1wZXJmZWN0IHBvc2l0aW9uaW5nLiBJdCdzIHN0aWxsIG5vdCAxMDAlIHBlcmZlY3QsIGJ1dCBhc1xuICogZ29vZCBhcyBpdCBjYW4gYmUgd2l0aGluIHJlYXNvbi5cbiAqIERpc2N1c3Npb24gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvcHVsbC83MTVcbiAqXG4gKiBMb3cgRFBJIHNjcmVlbnMgY2F1c2UgYSBwb3BwZXIgdG8gYmUgYmx1cnJ5IGlmIG5vdCB1c2luZyBmdWxsIHBpeGVscyAoU2FmYXJpXG4gKiBhcyB3ZWxsIG9uIEhpZ2ggRFBJIHNjcmVlbnMpLlxuICpcbiAqIEZpcmVmb3ggcHJlZmVycyBubyByb3VuZGluZyBmb3IgcG9zaXRpb25pbmcgYW5kIGRvZXMgbm90IGhhdmUgYmx1cnJpbmVzcyBvblxuICogaGlnaCBEUEkgc2NyZWVucy5cbiAqXG4gKiBPbmx5IGhvcml6b250YWwgcGxhY2VtZW50IGFuZCBsZWZ0L3JpZ2h0IHZhbHVlcyBuZWVkIHRvIGJlIGNvbnNpZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHNob3VsZFJvdW5kKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICAgIGZsb29yID0gTWF0aC5mbG9vcjtcblxuICB2YXIgbm9Sb3VuZCA9IGZ1bmN0aW9uIG5vUm91bmQodikge1xuICAgIHJldHVybiB2O1xuICB9O1xuXG4gIHZhciByZWZlcmVuY2VXaWR0aCA9IHJvdW5kKHJlZmVyZW5jZS53aWR0aCk7XG4gIHZhciBwb3BwZXJXaWR0aCA9IHJvdW5kKHBvcHBlci53aWR0aCk7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGRhdGEucGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBpc1ZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LmluZGV4T2YoJy0nKSAhPT0gLTE7XG4gIHZhciBzYW1lV2lkdGhQYXJpdHkgPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IHBvcHBlcldpZHRoICUgMjtcbiAgdmFyIGJvdGhPZGRXaWR0aCA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gMSAmJiBwb3BwZXJXaWR0aCAlIDIgPT09IDE7XG5cbiAgdmFyIGhvcml6b250YWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogaXNWZXJ0aWNhbCB8fCBpc1ZhcmlhdGlvbiB8fCBzYW1lV2lkdGhQYXJpdHkgPyByb3VuZCA6IGZsb29yO1xuICB2YXIgdmVydGljYWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogcm91bmQ7XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBob3Jpem9udGFsVG9JbnRlZ2VyKGJvdGhPZGRXaWR0aCAmJiAhaXNWYXJpYXRpb24gJiYgc2hvdWxkUm91bmQgPyBwb3BwZXIubGVmdCAtIDEgOiBwb3BwZXIubGVmdCksXG4gICAgdG9wOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIudG9wKSxcbiAgICBib3R0b206IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBob3Jpem9udGFsVG9JbnRlZ2VyKHBvcHBlci5yaWdodClcbiAgfTtcbn1cblxudmFyIGlzRmlyZWZveCA9IGlzQnJvd3NlciAmJiAvRmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciB4ID0gb3B0aW9ucy54LFxuICAgICAgeSA9IG9wdGlvbnMueTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVnYWN5IHN1cHBvcnQgaW4gUG9wcGVyLmpzIHYyXG5cbiAgdmFyIGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZSc7XG4gIH0pLmdwdUFjY2VsZXJhdGlvbjtcbiAgaWYgKGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpO1xuICB9XG4gIHZhciBncHVBY2NlbGVyYXRpb24gPSBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCA/IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA6IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uO1xuXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgb2Zmc2V0UGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuXG4gIC8vIFN0eWxlc1xuICB2YXIgc3R5bGVzID0ge1xuICAgIHBvc2l0aW9uOiBwb3BwZXIucG9zaXRpb25cbiAgfTtcblxuICB2YXIgb2Zmc2V0cyA9IGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDwgMiB8fCAhaXNGaXJlZm94KTtcblxuICB2YXIgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIHZhciBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG5cbiAgLy8gbm93LCBsZXQncyBtYWtlIGEgc3RlcCBiYWNrIGFuZCBsb29rIGF0IHRoaXMgY29kZSBjbG9zZWx5ICh3dGY/KVxuICAvLyBJZiB0aGUgY29udGVudCBvZiB0aGUgcG9wcGVyIGdyb3dzIG9uY2UgaXQncyBiZWVuIHBvc2l0aW9uZWQsIGl0XG4gIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50XG4gIC8vIG92ZXJmbG93aW5nIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUbyBhdm9pZCB0aGlzIHByb2JsZW0sIHdlIHByb3ZpZGUgdHdvIG9wdGlvbnMgKHggYW5kIHkpLCB3aGljaCBhbGxvd1xuICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLlxuICAvLyBJZiB3ZSBwb3NpdGlvbiBhIHBvcHBlciBvbiB0b3Agb2YgYSByZWZlcmVuY2UgZWxlbWVudCwgd2UgY2FuIHNldFxuICAvLyBgeGAgdG8gYHRvcGAgdG8gbWFrZSB0aGUgcG9wcGVyIGdyb3cgdG93YXJkcyBpdHMgdG9wIGluc3RlYWQgb2ZcbiAgLy8gaXRzIGJvdHRvbS5cbiAgdmFyIGxlZnQgPSB2b2lkIDAsXG4gICAgICB0b3AgPSB2b2lkIDA7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICAvLyB3aGVuIG9mZnNldFBhcmVudCBpcyA8aHRtbD4gdGhlIHBvc2l0aW9uaW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiAoZXhjbHVkaW5nIHRoZSBzY3JvbGxiYXIpXG4gICAgLy8gYW5kIG5vdCB0aGUgYm90dG9tIG9mIHRoZSBodG1sIGVsZW1lbnRcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnRSZWN0LmhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVmdCA9IG9mZnNldHMubGVmdDtcbiAgfVxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uICYmIHByZWZpeGVkUHJvcGVydHkpIHtcbiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSAndHJhbnNsYXRlM2QoJyArIGxlZnQgKyAncHgsICcgKyB0b3AgKyAncHgsIDApJztcbiAgICBzdHlsZXNbc2lkZUFdID0gMDtcbiAgICBzdHlsZXNbc2lkZUJdID0gMDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aHdlcmlzZSwgd2UgdXNlIHRoZSBzdGFuZGFyZCBgdG9wYCwgYGxlZnRgLCBgYm90dG9tYCBhbmQgYHJpZ2h0YCBwcm9wZXJ0aWVzXG4gICAgdmFyIGludmVydFRvcCA9IHNpZGVBID09PSAnYm90dG9tJyA/IC0xIDogMTtcbiAgICB2YXIgaW52ZXJ0TGVmdCA9IHNpZGVCID09PSAncmlnaHQnID8gLTEgOiAxO1xuICAgIHN0eWxlc1tzaWRlQV0gPSB0b3AgKiBpbnZlcnRUb3A7XG4gICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0O1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gc2lkZUEgKyAnLCAnICsgc2lkZUI7XG4gIH1cblxuICAvLyBBdHRyaWJ1dGVzXG4gIHZhciBhdHRyaWJ1dGVzID0ge1xuICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50XG4gIH07XG5cbiAgLy8gVXBkYXRlIGBkYXRhYCBhdHRyaWJ1dGVzLCBzdHlsZXMgYW5kIGFycm93U3R5bGVzXG4gIGRhdGEuYXR0cmlidXRlcyA9IF9leHRlbmRzKHt9LCBhdHRyaWJ1dGVzLCBkYXRhLmF0dHJpYnV0ZXMpO1xuICBkYXRhLnN0eWxlcyA9IF9leHRlbmRzKHt9LCBzdHlsZXMsIGRhdGEuc3R5bGVzKTtcbiAgZGF0YS5hcnJvd1N0eWxlcyA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMuYXJyb3csIGRhdGEuYXJyb3dTdHlsZXMpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGRlcGVuZHMgZnJvbSBhbm90aGVyIG9uZS48YnIgLz5cbiAqIEl0IGNoZWNrcyBpZiB0aGUgbmVlZGVkIG1vZGlmaWVyIGlzIGxpc3RlZCBhbmQgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVycyAtIGxpc3Qgb2YgbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGluZ05hbWUgLSBuYW1lIG9mIHJlcXVlc3RpbmcgbW9kaWZpZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0ZWROYW1lIC0gbmFtZSBvZiByZXF1ZXN0ZWQgbW9kaWZpZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyUmVxdWlyZWQobW9kaWZpZXJzLCByZXF1ZXN0aW5nTmFtZSwgcmVxdWVzdGVkTmFtZSkge1xuICB2YXIgcmVxdWVzdGluZyA9IGZpbmQobW9kaWZpZXJzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgIHJldHVybiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZTtcbiAgfSk7XG5cbiAgdmFyIGlzUmVxdWlyZWQgPSAhIXJlcXVlc3RpbmcgJiYgbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09IHJlcXVlc3RlZE5hbWUgJiYgbW9kaWZpZXIuZW5hYmxlZCAmJiBtb2RpZmllci5vcmRlciA8IHJlcXVlc3Rpbmcub3JkZXI7XG4gIH0pO1xuXG4gIGlmICghaXNSZXF1aXJlZCkge1xuICAgIHZhciBfcmVxdWVzdGluZyA9ICdgJyArIHJlcXVlc3RpbmdOYW1lICsgJ2AnO1xuICAgIHZhciByZXF1ZXN0ZWQgPSAnYCcgKyByZXF1ZXN0ZWROYW1lICsgJ2AnO1xuICAgIGNvbnNvbGUud2FybihyZXF1ZXN0ZWQgKyAnIG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5ICcgKyBfcmVxdWVzdGluZyArICcgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAnICsgX3JlcXVlc3RpbmcgKyAnIScpO1xuICB9XG4gIHJldHVybiBpc1JlcXVpcmVkO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyRhcnJvdztcblxuICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrXG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnYXJyb3cnLCAna2VlcFRvZ2V0aGVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGEgc3RyaW5nLCBzdXBwb3NlIGl0J3MgYSBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIGFycm93RWxlbWVudCBpc24ndCBhIHF1ZXJ5IHNlbGVjdG9yIHdlIG11c3QgY2hlY2sgdGhhdCB0aGVcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcbiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50IScpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XG4gIHZhciBzaWRlID0gc2lkZUNhcGl0YWxpemVkLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbHRTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcbiAgdmFyIGFycm93RWxlbWVudFNpemUgPSBnZXRPdXRlclNpemVzKGFycm93RWxlbWVudClbbGVuXTtcblxuICAvL1xuICAvLyBleHRlbmRzIGtlZXBUb2dldGhlciBiZWhhdmlvciBtYWtpbmcgc3VyZSB0aGUgcG9wcGVyIGFuZCBpdHNcbiAgLy8gcmVmZXJlbmNlIGhhdmUgZW5vdWdoIHBpeGVscyBpbiBjb25qdW5jdGlvblxuICAvL1xuXG4gIC8vIHRvcC9sZWZ0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSA8IHBvcHBlcltzaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLT0gcG9wcGVyW3NpZGVdIC0gKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSk7XG4gIH1cbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgPiBwb3BwZXJbb3BTaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz0gcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdO1xuICB9XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuXG4gIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXJcbiAgdmFyIGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICB2YXIgY3NzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIHBvcHBlck1hcmdpblNpZGUgPSBwYXJzZUZsb2F0KGNzc1snbWFyZ2luJyArIHNpZGVDYXBpdGFsaXplZF0sIDEwKTtcbiAgdmFyIHBvcHBlckJvcmRlclNpZGUgPSBwYXJzZUZsb2F0KGNzc1snYm9yZGVyJyArIHNpZGVDYXBpdGFsaXplZCArICdXaWR0aCddLCAxMCk7XG4gIHZhciBzaWRlVmFsdWUgPSBjZW50ZXIgLSBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC0gcG9wcGVyTWFyZ2luU2lkZSAtIHBvcHBlckJvcmRlclNpZGU7XG5cbiAgLy8gcHJldmVudCBhcnJvd0VsZW1lbnQgZnJvbSBiZWluZyBwbGFjZWQgbm90IGNvbnRpZ3VvdXNseSB0byBpdHMgcG9wcGVyXG4gIHNpZGVWYWx1ZSA9IE1hdGgubWF4KE1hdGgubWluKHBvcHBlcltsZW5dIC0gYXJyb3dFbGVtZW50U2l6ZSwgc2lkZVZhbHVlKSwgMCk7XG5cbiAgZGF0YS5hcnJvd0VsZW1lbnQgPSBhcnJvd0VsZW1lbnQ7XG4gIGRhdGEub2Zmc2V0cy5hcnJvdyA9IChfZGF0YSRvZmZzZXRzJGFycm93ID0ge30sIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIHNpZGUsIE1hdGgucm91bmQoc2lkZVZhbHVlKSksIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIGFsdFNpZGUsICcnKSwgX2RhdGEkb2Zmc2V0cyRhcnJvdyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgdmFyaWF0aW9uIG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudCB2YXJpYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKSB7XG4gIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7XG4gICAgcmV0dXJuICdzdGFydCc7XG4gIH0gZWxzZSBpZiAodmFyaWF0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgcmV0dXJuICdlbmQnO1xuICB9XG4gIHJldHVybiB2YXJpYXRpb247XG59XG5cbi8qKlxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cbiAqIFZhbGlkIHBsYWNlbWVudHMgYXJlOlxuICogLSBgYXV0b2BcbiAqIC0gYHRvcGBcbiAqIC0gYHJpZ2h0YFxuICogLSBgYm90dG9tYFxuICogLSBgbGVmdGBcbiAqXG4gKiBFYWNoIHBsYWNlbWVudCBjYW4gaGF2ZSBhIHZhcmlhdGlvbiBmcm9tIHRoaXMgbGlzdDpcbiAqIC0gYC1zdGFydGBcbiAqIC0gYC1lbmRgXG4gKlxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XG4gKiB3cml0dGVuIGxhbmd1YWdlcy4gSG9yaXpvbnRhbGx5IChgdG9wYCBhbmQgYGJvdHRvbWApLCBgc3RhcnRgIGlzIGxlZnQgYW5kIGBlbmRgXG4gKiBpcyByaWdodC48YnIgLz5cbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXG4gKlxuICogU29tZSB2YWxpZCBleGFtcGxlcyBhcmU6XG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcbiAqIC0gYHJpZ2h0LXN0YXJ0YCAob24gcmlnaHQgb2YgcmVmZXJlbmNlLCB0b3AgYWxpZ25lZClcbiAqIC0gYGJvdHRvbWAgKG9uIGJvdHRvbSwgY2VudGVyZWQpXG4gKiAtIGBhdXRvLWVuZGAgKG9uIHRoZSBzaWRlIHdpdGggbW9yZSBzcGFjZSBhdmFpbGFibGUsIGFsaWdubWVudCBkZXBlbmRzIGJ5IHBsYWNlbWVudClcbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAZW51bSB7U3RyaW5nfVxuICogQHJlYWRvbmx5XG4gKiBAbWV0aG9kIHBsYWNlbWVudHNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIHBsYWNlbWVudHMgPSBbJ2F1dG8tc3RhcnQnLCAnYXV0bycsICdhdXRvLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJywgJ3RvcC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAncmlnaHQtZW5kJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tJywgJ2JvdHRvbS1zdGFydCcsICdsZWZ0LWVuZCcsICdsZWZ0JywgJ2xlZnQtc3RhcnQnXTtcblxuLy8gR2V0IHJpZCBvZiBgYXV0b2AgYGF1dG8tc3RhcnRgIGFuZCBgYXV0by1lbmRgXG52YXIgdmFsaWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5zbGljZSgzKTtcblxuLyoqXG4gKiBHaXZlbiBhbiBpbml0aWFsIHBsYWNlbWVudCwgcmV0dXJucyBhbGwgdGhlIHN1YnNlcXVlbnQgcGxhY2VtZW50c1xuICogY2xvY2t3aXNlIChvciBjb3VudGVyLWNsb2Nrd2lzZSkuXG4gKlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCAtIEEgdmFsaWQgcGxhY2VtZW50IChpdCBhY2NlcHRzIHZhcmlhdGlvbnMpXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IGNvdW50ZXIgLSBTZXQgdG8gdHJ1ZSB0byB3YWxrIHRoZSBwbGFjZW1lbnRzIGNvdW50ZXJjbG9ja3dpc2VcbiAqIEByZXR1cm5zIHtBcnJheX0gcGxhY2VtZW50cyBpbmNsdWRpbmcgdGhlaXIgdmFyaWF0aW9uc1xuICovXG5mdW5jdGlvbiBjbG9ja3dpc2UocGxhY2VtZW50KSB7XG4gIHZhciBjb3VudGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaW5kZXggPSB2YWxpZFBsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpO1xuICB2YXIgYXJyID0gdmFsaWRQbGFjZW1lbnRzLnNsaWNlKGluZGV4ICsgMSkuY29uY2F0KHZhbGlkUGxhY2VtZW50cy5zbGljZSgwLCBpbmRleCkpO1xuICByZXR1cm4gY291bnRlciA/IGFyci5yZXZlcnNlKCkgOiBhcnI7XG59XG5cbnZhciBCRUhBVklPUlMgPSB7XG4gIEZMSVA6ICdmbGlwJyxcbiAgQ0xPQ0tXSVNFOiAnY2xvY2t3aXNlJyxcbiAgQ09VTlRFUkNMT0NLV0lTRTogJ2NvdW50ZXJjbG9ja3dpc2UnXG59O1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gZmxpcChkYXRhLCBvcHRpb25zKSB7XG4gIC8vIGlmIGBpbm5lcmAgbW9kaWZpZXIgaXMgZW5hYmxlZCwgd2UgY2FuJ3QgdXNlIHRoZSBgZmxpcGAgbW9kaWZpZXJcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaW5uZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgaWYgKGRhdGEuZmxpcHBlZCAmJiBkYXRhLnBsYWNlbWVudCA9PT0gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCkge1xuICAgIC8vIHNlZW1zIGxpa2UgZmxpcCBpcyB0cnlpbmcgdG8gbG9vcCwgcHJvYmFibHkgdGhlcmUncyBub3QgZW5vdWdoIHNwYWNlIG9uIGFueSBvZiB0aGUgZmxpcHBhYmxlIHNpZGVzXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnO1xuXG4gIHZhciBmbGlwT3JkZXIgPSBbXTtcblxuICBzd2l0Y2ggKG9wdGlvbnMuYmVoYXZpb3IpIHtcbiAgICBjYXNlIEJFSEFWSU9SUy5GTElQOlxuICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DT1VOVEVSQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjtcbiAgfVxuXG4gIGZsaXBPcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwLCBpbmRleCkge1xuICAgIGlmIChwbGFjZW1lbnQgIT09IHN0ZXAgfHwgZmxpcE9yZGVyLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICAgIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBwb3BwZXJPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcbiAgICB2YXIgcmVmT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgICAvLyB1c2luZyBmbG9vciBiZWNhdXNlIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyBtYXkgY29udGFpbiBkZWNpbWFscyB3ZSBhcmUgbm90IGdvaW5nIHRvIGNvbnNpZGVyIGhlcmVcbiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgIHZhciBvdmVybGFwc1JlZiA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IocmVmT2Zmc2V0cy5sZWZ0KSB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKHJlZk9mZnNldHMucmlnaHQpIHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IocmVmT2Zmc2V0cy50b3ApIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IocmVmT2Zmc2V0cy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0xlZnQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IoYm91bmRhcmllcy5sZWZ0KTtcbiAgICB2YXIgb3ZlcmZsb3dzUmlnaHQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKGJvdW5kYXJpZXMucmlnaHQpO1xuICAgIHZhciBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7XG4gICAgdmFyIG92ZXJmbG93c0JvdHRvbSA9IGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NCb3VuZGFyaWVzID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBvdmVyZmxvd3NUb3AgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBvdmVyZmxvd3NCb3R0b207XG5cbiAgICAvLyBmbGlwIHRoZSB2YXJpYXRpb24gaWYgcmVxdWlyZWRcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3AgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXG4gICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlO1xuXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xuICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgICAgdmFyaWF0aW9uID0gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xuXG4gICAgICAvLyB0aGlzIG9iamVjdCBjb250YWlucyBgcG9zaXRpb25gLCB3ZSB3YW50IHRvIHByZXNlcnZlIGl0IGFsb25nIHdpdGhcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHByb3BlcnR5IHdlIG1heSBhZGQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMucG9wcGVyLCBnZXRQb3BwZXJPZmZzZXRzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCkpO1xuXG4gICAgICBkYXRhID0gcnVuTW9kaWZpZXJzKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBkYXRhLCAnZmxpcCcpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pIC0gcG9wcGVyW21lYXN1cmVtZW50XTtcbiAgfVxuICBpZiAocG9wcGVyW29wU2lkZV0gPiBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsdWUgKyB1bml0IGludG8gYSBweCB2YWx1ZSBudW1iZXJcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nXG4gKiBAYXJndW1lbnQge1N0cmluZ30gbWVhc3VyZW1lbnQgLSBgaGVpZ2h0YCBvciBgd2lkdGhgXG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEByZXR1cm5zIHtOdW1iZXJ8U3RyaW5nfVxuICogVmFsdWUgaW4gcGl4ZWxzLCBvciBvcmlnaW5hbCBzdHJpbmcgaWYgbm8gdmFsdWVzIHdlcmUgZXh0cmFjdGVkXG4gKi9cbmZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgdmFyIHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKTtcbiAgdmFyIHZhbHVlID0gK3NwbGl0WzFdO1xuICB2YXIgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICB2YXIgZWxlbWVudCA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7XG4gICAgcmV0dXJuIHJlY3RbbWVhc3VyZW1lbnRdIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3ZoJyB8fCB1bml0ID09PSAndncnKSB7XG4gICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydFxuICAgIHZhciBzaXplID0gdm9pZCAwO1xuICAgIGlmICh1bml0ID09PSAndmgnKSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZVxuICAgIC8vIGlmIGlzIGFuIGltcGxpY2l0IHVuaXQsIGl0J3MgcHgsIGFuZCB3ZSByZXR1cm4ganVzdCB0aGUgdmFsdWVcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBgb2Zmc2V0YCBzdHJpbmcgdG8gZXh0cmFwb2xhdGUgYHhgIGFuZCBgeWAgbnVtZXJpYyBvZmZzZXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IG9mZnNldFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gYmFzZVBsYWNlbWVudFxuICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cywgYmFzZVBsYWNlbWVudCkge1xuICB2YXIgb2Zmc2V0cyA9IFswLCAwXTtcblxuICAvLyBVc2UgaGVpZ2h0IGlmIHBsYWNlbWVudCBpcyBsZWZ0IG9yIHJpZ2h0IGFuZCBpbmRleCBpcyAwIG90aGVyd2lzZSB1c2Ugd2lkdGhcbiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZVxuICAvLyB3aWxsIHVzZSB0aGUgb3RoZXIgb25lXG4gIHZhciB1c2VIZWlnaHQgPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHNcbiAgLy8gVGhlIHJlZ2V4IGFkZHJlc3NlcyB2YWx1ZXMgd2l0aCB0aGUgcGx1cyBvciBtaW51cyBzaWduIGluIGZyb250ICgrMTAsIC0yMCwgZXRjKVxuICB2YXIgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy50cmltKCk7XG4gIH0pO1xuXG4gIC8vIERldGVjdCBpZiB0aGUgb2Zmc2V0IHN0cmluZyBjb250YWlucyBhIHBhaXIgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIG9uZVxuICAvLyB0aGV5IGNvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYSBvciBzcGFjZVxuICB2YXIgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKGZpbmQoZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTE7XG4gIH0pKTtcblxuICBpZiAoZnJhZ21lbnRzW2RpdmlkZXJdICYmIGZyYWdtZW50c1tkaXZpZGVyXS5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgY29uc29sZS53YXJuKCdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJyk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICB2YXIgc3BsaXRSZWdleCA9IC9cXHMqLFxccyp8XFxzKy87XG4gIHZhciBvcHMgPSBkaXZpZGVyICE9PSAtMSA/IFtmcmFnbWVudHMuc2xpY2UoMCwgZGl2aWRlcikuY29uY2F0KFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMF1dKSwgW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVsxXV0uY29uY2F0KGZyYWdtZW50cy5zbGljZShkaXZpZGVyICsgMSkpXSA6IFtmcmFnbWVudHNdO1xuXG4gIC8vIENvbnZlcnQgdGhlIHZhbHVlcyB3aXRoIHVuaXRzIHRvIGFic29sdXRlIHBpeGVscyB0byBhbGxvdyBvdXIgY29tcHV0YXRpb25zXG4gIG9wcyA9IG9wcy5tYXAoZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXJcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSAoaW5kZXggPT09IDEgPyAhdXNlSGVpZ2h0IDogdXNlSGVpZ2h0KSA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gb3BcbiAgICAvLyBUaGlzIGFnZ3JlZ2F0ZXMgYW55IGArYCBvciBgLWAgc2lnbiB0aGF0IGFyZW4ndCBjb25zaWRlcmVkIG9wZXJhdG9yc1xuICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV1cbiAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZiAoYVthLmxlbmd0aCAtIDFdID09PSAnJyAmJiBbJysnLCAnLSddLmluZGV4T2YoYikgIT09IC0xKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgIH1cbiAgICB9LCBbXSlcbiAgICAvLyBIZXJlIHdlIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZXMgaW50byBudW1iZXIgdmFsdWVzIChpbiBweClcbiAgICAubWFwKGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHJldHVybiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBMb29wIHRyb3VnaCB0aGUgb2Zmc2V0cyBhcnJheXMgYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbnNcbiAgb3BzLmZvckVhY2goZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4Mikge1xuICAgICAgaWYgKGlzTnVtZXJpYyhmcmFnKSkge1xuICAgICAgICBvZmZzZXRzW2luZGV4XSArPSBmcmFnICogKG9wW2luZGV4MiAtIDFdID09PSAnLScgPyAtMSA6IDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQGFyZ3VtZW50IHtOdW1iZXJ8U3RyaW5nfSBvcHRpb25zLm9mZnNldD0wXG4gKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHtcbiAgdmFyIG9mZnNldCA9IF9yZWYub2Zmc2V0O1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQsXG4gICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIHZhciBvZmZzZXRzID0gdm9pZCAwO1xuICBpZiAoaXNOdW1lcmljKCtvZmZzZXQpKSB7XG4gICAgb2Zmc2V0cyA9IFsrb2Zmc2V0LCAwXTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRzID0gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYmFzZVBsYWNlbWVudCk7XG4gIH1cblxuICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTtcbiAgfVxuXG4gIGRhdGEucG9wcGVyID0gcG9wcGVyO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuXG4gIC8vIElmIG9mZnNldFBhcmVudCBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIHJlYWxseSB3YW50IHRvXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xuICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuXG4gIGlmIChkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSA9PT0gYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XG4gIH1cblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzZXRzIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBkb2N1bWVudCBzaXplIGNhbiBiZSBjYWxjdWxhdGVkIGV4Y2x1ZGluZ1xuICAvLyB0aGUgc2l6ZSBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgaXRzZWxmXG4gIHZhciB0cmFuc2Zvcm1Qcm9wID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcbiAgdmFyIHBvcHBlclN0eWxlcyA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnN0eWxlOyAvLyBhc3NpZ25tZW50IHRvIGhlbHAgbWluaWZpY2F0aW9uXG4gIHZhciB0b3AgPSBwb3BwZXJTdHlsZXMudG9wLFxuICAgICAgbGVmdCA9IHBvcHBlclN0eWxlcy5sZWZ0LFxuICAgICAgdHJhbnNmb3JtID0gcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdO1xuXG4gIHBvcHBlclN0eWxlcy50b3AgPSAnJztcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSAnJztcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gJyc7XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzdG9yZXMgdGhlIG9yaWdpbmFsIHN0eWxlIHByb3BlcnRpZXMgYWZ0ZXIgdGhlIG9mZnNldHMgaGF2ZSBiZWVuIGNvbXB1dGVkXG4gIHBvcHBlclN0eWxlcy50b3AgPSB0b3A7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gbGVmdDtcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtO1xuXG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XG5cbiAgdmFyIG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgdmFyIGNoZWNrID0ge1xuICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JztcbiAgICBwb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGVja1tzaWRlXShwbGFjZW1lbnQpKTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyO1xuXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHtcbiAgICAgIHN0YXJ0OiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdKSxcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKVxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciByZWZSZWN0ID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdwcmV2ZW50T3ZlcmZsb3cnO1xuICB9KS5ib3VuZGFyaWVzO1xuXG4gIGlmIChyZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fCByZWZSZWN0LmxlZnQgPiBib3VuZC5yaWdodCB8fCByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fCByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdCkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBpbm5lcihkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xuXG4gIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID0gcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC0gKHN1YnRyYWN0TGVuZ3RoID8gcG9wcGVyW2lzSG9yaXogPyAnd2lkdGgnIDogJ2hlaWdodCddIDogMCk7XG5cbiAgZGF0YS5wbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChwb3BwZXIpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cbiAqIFRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZSwgdGhpcyBtZWFucyB0aGF0IHlvdSBtdXN0XG4gKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuXG4gKlxuICogQGZ1bmN0aW9uIE1vZGlmaWVyRm5cbiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5cbi8qKlxuICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz5cbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcbiAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS5cbiAqXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cbiAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLlxuICogQG5hbWVzcGFjZSBtb2RpZmllcnNcbiAqL1xudmFyIG1vZGlmaWVycyA9IHtcbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gc2hpZnQgdGhlIHBvcHBlciBvbiB0aGUgc3RhcnQgb3IgZW5kIG9mIGl0cyByZWZlcmVuY2VcbiAgICogZWxlbWVudC48YnIgLz5cbiAgICogSXQgd2lsbCByZWFkIHRoZSB2YXJpYXRpb24gb2YgdGhlIGBwbGFjZW1lbnRgIHByb3BlcnR5LjxiciAvPlxuICAgKiBJdCBjYW4gYmUgb25lIGVpdGhlciBgLWVuZGAgb3IgYC1zdGFydGAuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBzaGlmdDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0xMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDEwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHNoaWZ0XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy5cbiAgICpcbiAgICogSXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHVuaXRzOlxuICAgKiAtIGBweGAgb3IgdW5pdC1sZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBgaGVpZ2h0YC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcbiAgICogYXMgYFN0cmluZ2AgZGl2aWRlZCBieSBhIGNvbW1hIG9yIG9uZSAob3IgbW9yZSkgd2hpdGUgc3BhY2VzLjxiciAvPlxuICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmVcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cbiAgICogQWRkaXRpb25hbGx5LCBpdCBhY2NlcHRzIGFkZGl0aW9ucyBhbmQgc3VidHJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzLlxuICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC5cbiAgICpcbiAgICogVmFsaWQgZXhhbXBsZXMgYXJlOlxuICAgKiBgYGBcbiAgICogMTBcbiAgICogJzEwJSdcbiAgICogJzEwLCAxMCdcbiAgICogJzEwJSwgMTAnXG4gICAqICcxMCArIDEwJSdcbiAgICogJzEwIC0gNXZoICsgMyUnXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXG4gICAqIGBgYFxuICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcFxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxuICAgKiA+IFlvdSBjYW4gcmVhZCBtb3JlIG9uIHRoaXMgYXQgdGhpcyBbaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgb2Zmc2V0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTIwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogb2Zmc2V0LFxuICAgIC8qKiBAcHJvcCB7TnVtYmVyfFN0cmluZ30gb2Zmc2V0PTBcbiAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBvZmZzZXQ6IDBcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBwcmV2ZW50IHRoZSBwb3BwZXIgZnJvbSBiZWluZyBwb3NpdGlvbmVkIG91dHNpZGUgdGhlIGJvdW5kYXJ5LlxuICAgKlxuICAgKiBBIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIuIFRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGFsd2F5cyBoYXMgYSBsaXR0bGUgcGFkZGluZ1xuICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXJcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXG4gICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllci4gQ2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCxcbiAgICAgKiBgdmlld3BvcnRgIG9yIGFueSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHJlZmVyZW5jZSBhbmQgaXRzIHBvcHBlciBzdGF5IG5lYXIgZWFjaCBvdGhlclxuICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEVzcGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzXG4gICAqIGVuYWJsZWQgYW5kIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGl0IHBvaW50cyB0byBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEl0IGNhcmVzIG9ubHkgYWJvdXQgdGhlIGZpcnN0IGF4aXMuIFlvdSBjYW4gc3RpbGwgaGF2ZSBwb3BwZXJzIHdpdGggbWFyZ2luXG4gICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAga2VlcFRvZ2V0aGVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTQwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNDAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjoga2VlcFRvZ2V0aGVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2VcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgb3V0ZXIgc2l6ZSBvZiB0aGUgYGFycm93RWxlbWVudGAgbm9kZSB0byBkZXRlY3QgaG93IG1hbnlcbiAgICogcGl4ZWxzIG9mIGNvbmp1bmN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XSdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBmbGlwIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQgd2hlbiBpdCBzdGFydHMgdG8gb3ZlcmxhcCBpdHNcbiAgICogcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICpcbiAgICogKipOT1RFOioqIHRoaXMgbW9kaWZpZXIgd2lsbCBpbnRlcnJ1cHQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlIGFuZCB3aWxsXG4gICAqIHJlc3RhcnQgaXQgaWYgaXQgZGV0ZWN0cyB0aGUgbmVlZCB0byBmbGlwIHRoZSBwbGFjZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBmbGlwOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTYwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogZmxpcCxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEFycmF5fSBiZWhhdmlvcj0nZmxpcCdcbiAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZlxuICAgICAqIGBmbGlwYCwgYGNsb2Nrd2lzZWAsIGBjb3VudGVyY2xvY2t3aXNlYCBvciBhbiBhcnJheSB3aXRoIGEgbGlzdCBvZiB2YWxpZFxuICAgICAqIHBsYWNlbWVudHMgKHdpdGggb3B0aW9uYWwgdmFyaWF0aW9ucylcbiAgICAgKi9cbiAgICBiZWhhdmlvcjogJ2ZsaXAnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0ndmlld3BvcnQnXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbi5cbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllc1xuICAgICAqIChleGNlcHQgaWYgYGtlZXBUb2dldGhlcmAgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2JvdHRvbSddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgYm90dG9tYFxuICAgICAqL1xuICAgIHg6ICdib3R0b20nLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdsZWZ0J11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGByaWdodGBcbiAgICAgKi9cbiAgICB5OiAncmlnaHQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGNvbXB1dGVkIHN0eWxlcyB0byB0aGUgcG9wcGVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgYXJlIGxpbWl0ZWQgdG8gdGhpcyBtb2RpZmllci4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZVxuICAgKiB5b3Ugd2FudCB0byBpbnRlZ3JhdGUgUG9wcGVyLmpzIGluc2lkZSBhIGZyYW1ld29yayBvciB2aWV3IGxpYnJhcnkgYW5kIHlvdVxuICAgKiB3YW50IHRvIGRlbGVnYXRlIGFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgdG8gaXQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3UgZGlzYWJsZSB0aGlzIG1vZGlmaWVyLCB5b3UgbXVzdCBtYWtlIHN1cmUgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIGhhcyBpdHMgcG9zaXRpb24gc2V0IHRvIGBhYnNvbHV0ZWAgYmVmb3JlIFBvcHBlci5qcyBjYW4gZG8gaXRzIHdvcmshXG4gICAqXG4gICAqIEp1c3QgZGlzYWJsZSB0aGlzIG1vZGlmaWVyIGFuZCBkZWZpbmUgeW91ciBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWRcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb24gdXNlZCBieSBQb3BwZXIuanMuXG4gKiBUaGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXG4gKiBAbmFtZSBkYXRhT2JqZWN0XG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCBQbGFjZW1lbnQgb3JpZ2luYWxseSBkZWZpbmVkIG9uIGluaXRcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50c1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5wb3BwZXIgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDBcbiAqL1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+XG4gKiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWVcbiAqIHN0cnVjdHVyZSBvZiB0aGUgYG9wdGlvbnNgIG9iamVjdCwgYXMgdGhlIDNyZCBhcmd1bWVudC4gRm9yIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50LlxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcblxuICAvKipcbiAgICogU2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3Ugd2FudCBwb3BwZXIgdG8gcG9zaXRpb24gaXQgc2VsZiBpbiAnZml4ZWQnIG1vZGVcbiAgICogQHByb3Age0Jvb2xlYW59IHBvc2l0aW9uRml4ZWQ9ZmFsc2VcbiAgICovXG4gIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZW50cyAocmVzaXplLCBzY3JvbGwpIGFyZSBpbml0aWFsbHkgZW5hYmxlZC5cbiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZVxuICAgKi9cbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSByZW1vdmUgdGhlIHBvcHBlciB3aGVuXG4gICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcmVtb3ZlT25EZXN0cm95PWZhbHNlXG4gICAqL1xuICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uQ3JlYXRlfVxuICAgKi9cbiAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZC4gVGhpcyBjYWxsYmFjayBpcyBub3QgY2FsbGVkXG4gICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50XG4gICAqIHVwZGF0ZXMuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uVXBkYXRlfVxuICAgKi9cbiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuXG4gICAqIFRoZXkgcHJvdmlkZSBtb3N0IG9mIHRoZSBmdW5jdGlvbmFsaXRpZXMgb2YgUG9wcGVyLmpzLlxuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZS5cbiAgICogQGNsYXNzIFBvcHBlclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fHJlZmVyZW5jZU9iamVjdH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFlvdXIgY3VzdG9tIG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIG9uZXMgZGVmaW5lZCBpbiBbRGVmYXVsdHNdKCNkZWZhdWx0cylcbiAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZSAtIFRoZSBnZW5lcmF0ZWQgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqL1xuICBmdW5jdGlvbiBQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHBlcik7XG5cbiAgICB0aGlzLnNjaGVkdWxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy51cGRhdGUpO1xuICAgIH07XG5cbiAgICAvLyBtYWtlIHVwZGF0ZSgpIGRlYm91bmNlZCwgc28gdGhhdCBpdCBvbmx5IHJ1bnMgYXQgbW9zdCBvbmNlLXBlci10aWNrXG4gICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIHdpdGgge30gd2UgY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvcHRpb25zIGluc2lkZSBpdFxuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgLy8gaW5pdCBzdGF0ZVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0Rlc3Ryb3llZDogZmFsc2UsXG4gICAgICBpc0NyZWF0ZWQ6IGZhbHNlLFxuICAgICAgc2Nyb2xsUGFyZW50czogW11cbiAgICB9O1xuXG4gICAgLy8gZ2V0IHJlZmVyZW5jZSBhbmQgcG9wcGVyIGVsZW1lbnRzIChhbGxvdyBqUXVlcnkgd3JhcHBlcnMpXG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLmpxdWVyeSA/IHJlZmVyZW5jZVswXSA6IHJlZmVyZW5jZTtcbiAgICB0aGlzLnBvcHBlciA9IHBvcHBlciAmJiBwb3BwZXIuanF1ZXJ5ID8gcG9wcGVyWzBdIDogcG9wcGVyO1xuXG4gICAgLy8gRGVlcCBtZXJnZSBtb2RpZmllcnMgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVycywgb3B0aW9ucy5tb2RpZmllcnMpKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzW25hbWVdIHx8IHt9LCBvcHRpb25zLm1vZGlmaWVycyA/IG9wdGlvbnMubW9kaWZpZXJzW25hbWVdIDoge30pO1xuICAgIH0pO1xuXG4gICAgLy8gUmVmYWN0b3JpbmcgbW9kaWZpZXJzJyBsaXN0IChPYmplY3QgPT4gQXJyYXkpXG4gICAgdGhpcy5tb2RpZmllcnMgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kaWZpZXJzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIG5hbWU6IG5hbWVcbiAgICAgIH0sIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdKTtcbiAgICB9KVxuICAgIC8vIHNvcnQgdGhlIG1vZGlmaWVycyBieSBvcmRlclxuICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gICAgfSk7XG5cbiAgICAvLyBtb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIHdoZW4gUG9wcGVyLmpzIGdldCBpbml0ZWRcbiAgICAvLyBzdWNoIGNvZGUgaXMgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgb2YgaXRzIG1vZGlmaWVyXG4gICAgLy8gdGhleSBjb3VsZCBhZGQgbmV3IHByb3BlcnRpZXMgdG8gdGhlaXIgb3B0aW9ucyBjb25maWd1cmF0aW9uXG4gICAgLy8gQkUgQVdBUkU6IGRvbid0IGFkZCBvcHRpb25zIHRvIGBvcHRpb25zLm1vZGlmaWVycy5uYW1lYCBidXQgdG8gYG1vZGlmaWVyT3B0aW9uc2AhXG4gICAgdGhpcy5tb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXJPcHRpb25zKSB7XG4gICAgICBpZiAobW9kaWZpZXJPcHRpb25zLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihtb2RpZmllck9wdGlvbnMub25Mb2FkKSkge1xuICAgICAgICBtb2RpZmllck9wdGlvbnMub25Mb2FkKF90aGlzLnJlZmVyZW5jZSwgX3RoaXMucG9wcGVyLCBfdGhpcy5vcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIF90aGlzLnN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGZpcmUgdGhlIGZpcnN0IHVwZGF0ZSB0byBwb3NpdGlvbiB0aGUgcG9wcGVyIGluIHRoZSByaWdodCBwbGFjZVxuICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICB2YXIgZXZlbnRzRW5hYmxlZCA9IHRoaXMub3B0aW9ucy5ldmVudHNFbmFibGVkO1xuICAgIGlmIChldmVudHNFbmFibGVkKSB7XG4gICAgICAvLyBzZXR1cCBldmVudCBsaXN0ZW5lcnMsIHRoZXkgd2lsbCB0YWtlIGNhcmUgb2YgdXBkYXRlIHRoZSBwb3NpdGlvbiBpbiBzcGVjaWZpYyBzaXR1YXRpb25zXG4gICAgICB0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkID0gZXZlbnRzRW5hYmxlZDtcbiAgfVxuXG4gIC8vIFdlIGNhbid0IHVzZSBjbGFzcyBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBnZXQgbGlzdGVkIGluIHRoZVxuICAvLyBjbGFzcyBwcm90b3R5cGUgYW5kIGJyZWFrIHN0dWZmIGxpa2UgU2lub24gc3R1YnNcblxuXG4gIGNyZWF0ZUNsYXNzKFBvcHBlciwgW3tcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUkJDEoKSB7XG4gICAgICByZXR1cm4gdXBkYXRlLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3kkJDEoKSB7XG4gICAgICByZXR1cm4gZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZW5hYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZGlzYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVzIGFuIHVwZGF0ZS4gSXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZS5cbiAgICAgKiBAbWV0aG9kIHNjaGVkdWxlVXBkYXRlXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuXG4gICAgICogU3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDEuNywgdGhpcyBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgaWYgeW91XG4gICAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAgICpcbiAgICAgKiAqKkRFUFJFQ0FUSU9OKio6IFRoaXMgd2F5IHRvIGFjY2VzcyBQb3BwZXJVdGlscyBpcyBkZXByZWNhdGVkXG4gICAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndFxuICAgICAqIGd1YXJhbnRlZSB0aGVtIHRvIGZvbGxvdyBzZW12ZXIuIFVzZSB0aGVtIGF0IHlvdXIgb3duIHJpc2shXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgICAqIEBtZW1iZXIgVXRpbHNcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cbiAgfV0pO1xuICByZXR1cm4gUG9wcGVyO1xufSgpO1xuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwLlxuICogQG5hbWUgcmVmZXJlbmNlT2JqZWN0XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBkYXRhLmdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZXQgb2YgY29vcmRpbmF0ZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBuYXRpdmUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgbWV0aG9kLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50V2lkdGhcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgd2lkdGggb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRIZWlnaHRcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgaGVpZ2h0IG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICovXG5cblxuUG9wcGVyLlV0aWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKS5Qb3BwZXJVdGlscztcblBvcHBlci5wbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblBvcHBlci5EZWZhdWx0cyA9IERlZmF1bHRzO1xuXG5leHBvcnQgZGVmYXVsdCBQb3BwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXIuanMubWFwXG4iLCIvKiBnbG9iYWwgcHJvY2VzcyAqL1xuLyplc2xpbnQgbm8tdW51c2VkLXZhcnM6IFtcImVycm9yXCIsIHsgXCJ2YXJzSWdub3JlUGF0dGVyblwiOiBcIlN0cmluZ0hlbHBlcnN8RmFkZUluVGV4dFwiIH1dKi8gLy9hbGxvdyBTdHJpbmdIZWxwZXJzIHRvIGJlIGlwb3J0ZWQgKGRlZmluZWQpIGFuZCBub3QgYmVpbmcgZXhwbGljaXRseSBjYWxsZWRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gd2l0aG91dCB0cmlnZ2VyaW5nIGVzbGludCBlcnJvclxuaW1wb3J0IHsgU3RyaW5nSGVscGVycywgRmFkZUluVGV4dCB9IGZyb20gJ0BVdGlscyc7IC8vIHN0cmluZyBoZWxwZXJzIGlzIGFuIElJRkVcbmltcG9ydCBTdGF0ZURlYnQgZnJvbSAnLi9zdGF0ZS1kZWJ0LmpzJztcbmltcG9ydCAnLi9jc3Mvc3R5bGVzLnNjc3MnO1xuXG5cbmNvbnN0IGNvbnRhaW5lciA9ICcjcGV3LWFwcCc7XG5jb25zdCBBcHAgPSBuZXcgU3RhdGVEZWJ0KGNvbnRhaW5lciwgeyAvLyBTdGF0ZURlYnQgZXh0ZW5kcyBQQ1RBcHAtanMuIFBDVEFwcC1qcydzIGNvbnN0cnVjdG9yIG1ldGhvZCBpcyBjYWxsZWQsIHAxIGNvbnRhaXVuZXIsIHAyIG9wdGlvbnNcblx0bmVlZHNSb3V0ZXI6IGZhbHNlXG59KTtcbmlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgd2luZG93LklTX1BSRVJFTkRFUklORyApeyAvLyBwcm9jZXNzIGRldmVsb3BtZW50IG1lYW5zIHVzaW5nIFdlYlBhY2sgZGV2IHNlcnZlci4gd2luZG93IGlzIHByZXJlbmRlcmluZyBtZWFucyBpblxuXHRBcHAucHJlcmVuZGVyKCk7XG59XG5BcHAuaW5pdCgpOyIsIi8qIGdsb2JhbCBQVUJMSUNQQVRIIHByb2Nlc3MgbW9kdWxlICovXG4vL3V0aWxzXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMy1jb2xsZWN0aW9uJztcbmltcG9ydCBQYXBhIGZyb20gJ3BhcGFwYXJzZSc7XG5pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG4vL2ltcG9ydCBQUyBmcm9tICdwdWJzdWItc2V0dGVyJztcbmltcG9ydCB7IHB1Ymxpc2hXaW5kb3dSZXNpemUgfSBmcm9tICdAVXRpbHMnO1xuXG4vL2RhdGEgKCBDU1ZzIGxvYWRlZCBieSBmaWxlLWxvYWRlciBmb3IgdXNlIGJ5IFBhcGFwYXJzZSBhdCBidWlsZCBhbmQgcnVudGltZS4gdGhhdCdzIHNldCBpbiB3ZWJwYWNrLmNvbW1vbi5qcyApXG5pbXBvcnQgZGF0YSBmcm9tICcuL2RhdGEvZGF0YS5jc3YnO1xuaW1wb3J0IGdyb3VwcyBmcm9tICcuL2RhdGEvZ3JvdXBzLmpzb24nO1xuaW1wb3J0IHR5cGVzIGZyb20gJy4vZGF0YS90eXBlcy5qc29uJztcbmltcG9ydCBkaWN0IGZyb20gJy4vZGF0YS9kaWN0aW9uYXJ5Lmpzb24nO1xuXG4vL3ZpZXdzXG5pbXBvcnQgQ29tcGFyaXNvblZpZXcgZnJvbSAnLi92aWV3cy9zdGF0ZS1jb21wYXJpc29uLyc7XG5pbXBvcnQgRmlmdHlTdGF0ZVZpZXcgZnJvbSAnLi92aWV3cy9maWZ0eS1zdGF0ZS8nO1xuXG4vLyBhcHAgcHJvdG90eXBlXG5pbXBvcnQgUENUQXBwIGZyb20gJ0BBcHAnO1xuXG4vL3N0YXRpYyBjb250ZW50XG5pbXBvcnQgc2VjdGlvbnMgZnJvbSAnLi9wYXJ0aWFscy9zZWN0aW9ucy5odG1sJztcbmltcG9ydCBmb290ZXIgZnJvbSAnLi9wYXJ0aWFscy9mb290ZXIuaHRtbCc7XG5cbnB1Ymxpc2hXaW5kb3dSZXNpemUoUyk7XG5cbmNvbnN0IG1vZGVsID0ge1xuICAgIGdyb3VwcyxcbiAgICB0eXBlcyxcbiAgICBkaWN0XG59O1xuXG5jb25zdCB2aWV3cyA9IFtdO1xuXG52YXIgc2Nyb2xsUG9zaXRpb24gPSAwO1xuXG5mdW5jdGlvbiBnZXRSdW50aW1lRGF0YSgpe1xuICAgIHZhciBwdWJsaWNQYXRoID0gJyc7XG4gICAgaWYgKCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nICYmICF3aW5kb3cuSVNfUFJFUkVOREVSSU5HICl7IC8vIHByb2R1Y3Rpb24gYnVpbGQgbmVlZHMgdG8ga25vdyB0aGUgcHVibGljIHBhdGggb2YgYXNzZXRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBkZXYgYW5kIHByZXZpZXcsIGFzc2V0cyBhcmUgYSBjaGlsZCBvZiByb290OyBmb3IgYnVpbGQgdGhleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhcmUgaW4gc29tZSBkaXN0YW50IHBhdGggb24gc2l0ZWNvcmVcbiAgICAgICAgcHVibGljUGF0aCA9IFBVQkxJQ1BBVEg7IC8vIFRPRE86IHNldCBQVUJMSUNQQVRIIHVzaW5nIGRlZmluZSBwbHVnaW4gaW4gd2VicGFjay5idWlsZC5qc1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB2YXIgYXBwQ29udGFpbmVyID0gdGhpcy5lbDtcbiAgICAgICAgUGFwYS5wYXJzZShwdWJsaWNQYXRoICsgZGF0YSwge1xuICAgICAgICAgICAgZG93bmxvYWQ6IHRydWUsXG4gICAgICAgICAgICBkeW5hbWljVHlwaW5nOiB0cnVlLFxuICAgICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgICAgZmFzdE1vZGU6IHRydWUsIC8vIG5vIHN0cmluZyBlc2NhcGVzXG4gICAgICAgICAgICBza2lwRW1wdHlMaW5lczogdHJ1ZSxcbiAgICAgICAgICAgIGJlZm9yZUZpcnN0Q2h1bmsoY2h1bmspeyAvLyBvbiBwcmVyZW5kZXIsIGRvIHNpbXBsZSBoYXNoIG9mIENTViBjb250ZW50cyBhbmQgYXBwZW5kIGFzIGF0dHJpYnV0ZSBvZiB0aGUgYXBwIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF0IHJ1bnRpbWUsIGRvIHNhbWUgaGFzaCBvZiBjc3YgY29udGVudHMgYW5kIGNvbXBhcmUgdG8gb3JpZ2luYWwuIGlmIGhhc2hlcyBtYXRjaCwgYXBwIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250aW51ZSBub3JtYWxseS4gaWYgbWlzbWF0Y2hlZCwgYXBwIHdpbGwgcmVyZW5kZXIgYWxsIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIG5ldyBkYXRhLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIGZvciBgaG90YCB1cGRhdGluZyBvZiB0aGUgbWFpbiBkYXRhIGZpbGUgd2l0aG91dCByZWJ1aWxkaW5nIHRoZSBkaXN0LyBmb2xkZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYG1vZGVsLmlzTWlzbWF0Y2hgIHdpbGwgYmUgc2V0IHRvIGB0cnVlYCBhbmQgdGhlIHByZXJlbmRlcmluZyBmdW5jdGlvbnMgd2lsbCBjaGVjayB0aGF0IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHJlc3BvbmQgYWNjb3JkaW5nbHlcblxuICAgICAgICAgICAgICAgIHZhciBkYXRhSGFzaCA9IGNodW5rLmhhc2hDb2RlKCk7IC8vIGhhc2hDb2RlIGlzIGhlbHBlciBmdW5jdGlvbiBmcm9tIHV0aWxzLCBpbXBvcnRlZCBhbmQgSUlGRSdkIGluIGluZGV4LmpzXG4gICAgICAgICAgICAgICAgaWYgKCB3aW5kb3cuSVNfUFJFUkVOREVSSU5HICl7XG4gICAgICAgICAgICAgICAgICAgIGFwcENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1oYXNoJywgZGF0YUhhc2gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnICYmIGRhdGFIYXNoLnRvU3RyaW5nKCkgIT09IGFwcENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1oYXNoJykgKXtcbiAgICAgICAgICAgICAgICAgICAgYXBwQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS1kYXRhLW1pc21hdGNoJyx0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhdGEgbWlzbWF0Y2gnKTtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuaXNNaXNtYXRjaGVkID0gdHJ1ZTsgLy8gc2V0IHNvIHRoYXQgY29tcG9uZW50cyBjYW4gYWNjZXNzIHRoaXMgdmFsdWUgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiByZXNwb25zZSA9PiB7IC8vIGFycm93IGZ1bmN0aW9uIGhlcmUgdG8ga2VlcCBgdGhpc2AgY29udGV4dCBhcyBTdGF0ZURlYnRcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2aWV3cy5sZW5ndGggPSAwOyAgLy8gSEVSRSBZT1UgTkVFRCBUTyBORVNUIEJZIFVTSU5HIFRIRSBUSEUgR1JPVVAgVEhBVCBUSEUgVkFMVUUgTUFQUyBUT1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAvKiBjb21wbGV0ZSBtb2RlbCBiYXNlZCBvbiBmZXRjaGVkIGRhdGEgKi9cbiAgICAgICAgICAgICAgICBtb2RlbC5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICBtb2RlbC50eXBlcy5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHR5cGUudHlwZSAhPT0gJ3RleHQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhQXJyYXkgPSBkYXRhLm1hcChkID0+IGRbdHlwZS5maWVsZF0pLmZpbHRlcihkID0+IGQgIT09IG51bGwpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUubWF4ID0gTWF0aC5tYXgoLi4uZGF0YUFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUubWluID0gTWF0aC5taW4oLi4uZGF0YUFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUuc3ByZWFkID0gdHlwZS5tYXggLSB0eXBlLm1pbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUuY3Jvc3Nlc1plcm8gPSB0eXBlLm1heCAqIHR5cGUubWluIDw9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtb2RlbC50eXBlc05lc3RlZCA9IGQzLm5lc3QoKS5rZXkoZCA9PiBkLmdyb3VwKS5lbnRyaWVzKG1vZGVsLnR5cGVzKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtb2RlbCk7XG4gICAgICAgICAgICAgICAgLy8gLi4uLlxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLyogcHVzaCB2aWV3cyBub3cgdGhhdCBtb2RlbCBpcyBjb21wbGV0ZSAqL1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZpZXdzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KG1vZGVsLCBDb21wYXJpc29uVmlldywgJ2RpdiNjb21wYXJpc29uLXZpZXcnLCB7cmVuZGVyVG9TZWxlY3RvcjogJyNzZWN0aW9uLWNvbXBhcmlzb24gLmpzLWlubmVyLWNvbnRlbnQnLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXN9KSwgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudChtb2RlbCwgRmlmdHlTdGF0ZVZpZXcsICdkaXYjZmlmdHktc3RhdGUtdmlldycsIHtyZW5kZXJUb1NlbGVjdG9yOiAnI3NlY3Rpb24tc3RhdGVzIC5qcy1pbm5lci1jb250ZW50JywgcmVyZW5kZXJPbkRhdGFNaXNtYXRjaDogdHJ1ZSwgcGFyZW50OiB0aGlzfSkgIFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZURlYnQgZXh0ZW5kcyBQQ1RBcHAge1xuICAgIHByZXJlbmRlcigpe1xuICAgICAgICBjb25zb2xlLmxvZygncHJlcmVuZGVyJyk7XG4gICAgICAgIHRoaXMuZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBzZWN0aW9ucyk7XG4gICAgICAgIHRoaXMuZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBmb290ZXIpO1xuICAgICAgICAvL3RoaXMud2FzUHJlcmVuZGVyZWQgPSBmYWxzZTtcbiAgICAgICAgZ2V0UnVudGltZURhdGEuY2FsbCh0aGlzKS50aGVuKCgpID0+IHsgLy8gYmluZCBTdGF0ZURlYnQgYXMgY29udGV4dCBgdGhpc2AgZm9yIGdldFJ1bnRpbWVEYXRhIHNvIHRoYXQgaXQgY2FuIGFjY2Vlc3MgdGhpcy5lbCwgZXRjXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtb2RlbCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICAgICAgICAgICAgdmlldy5jb250YWluZXIuYXBwZW5kQ2hpbGQodmlldy5lbCk7IC8vIGRpZmZlcmVudCBoZXJlIGZyb20gQ2FwZVRvd246IHZpZXdzIGFyZW4ndCBhcHBlbmRlZCB0byBhcHAgY29udGFpbmVyOyBzb21lIHN0YXRpYyBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzIHByZXNlbnQgYWxyZWFkeS4gdmlld3MgYXBwZW5kZWQgdG8gKnRoZWlyKiBjb250YWluZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncmVuZGVyZWQnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgY29uc29sZS5sb2coJ2luaXQnKTtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLmF0dGFjaFNlY3Rpb25PcGVuQ2xvc2UoKTtcbiAgICAgICAgdGhpcy5pbml0U3RhdGljQW5jaG9yTGlua3MoKTtcbiAgICAgICAgZ2V0UnVudGltZURhdGEuY2FsbCh0aGlzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICAgICAgICAgICB2aWV3LmluaXQodGhpcyk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgIGlmICggbW9kdWxlLmhvdCApe1xuICAgICAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgbW9kdWxlLmhvdC5hY2NlcHQoJy4vdmlld3Mvc3RhdGUtY29tcGFyaXNvbicsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYWNjZXB0IScsIGFyZ3VtZW50cywgdGhhdCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlY3Rpb24tY29tcGFyaXNvbiAuanMtaW5uZXItY29udGVudCcpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IHRoYXQuY3JlYXRlQ29tcG9uZW50KG1vZGVsLCBDb21wYXJpc29uVmlldywgJ2RpdiNjb21wYXJpc29uLXZpZXcnLCB7cmVuZGVyVG9TZWxlY3RvcjogJyNzZWN0aW9uLWNvbXBhcmlzb24gLmpzLWlubmVyLWNvbnRlbnQnLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVwbGFjZW1lbnQpO1xuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50LmNvbnRhaW5lci5hcHBlbmRDaGlsZChyZXBsYWNlbWVudC5lbCk7XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluaXRTdGF0aWNBbmNob3JMaW5rcygpe1xuICAgICAgICB2YXIgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGN0LXN0YXRpYy1hbmNob3InKTtcbiAgICAgICAgbGlua3MuZm9yRWFjaChsaW5rID0+IHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGxpbmsuaHJlZi5zcGxpdCgnIycpWzFdKTtcbiAgICAgICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnNjcm9sbEludG9WaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXR0YWNoU2VjdGlvbk9wZW5DbG9zZSgpe1xuICAgICAgICBmdW5jdGlvbiB0b2dnbGVTZWN0aW9uKCl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5qcy1pbm5lci1jb250ZW50JykuY2xhc3NMaXN0LnRvZ2dsZSgncGN0LWhpZGUnKTtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnRvZ2dsZSgncGN0LWlzLWNsb3NlZCcpO1xuICAgICAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3Bldy1hcHAgc2VjdGlvbiA+IGgyJykuZm9yRWFjaChoZWFkaW5nID0+IHtcbiAgICAgICAgICAgIGhlYWRpbmcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVTZWN0aW9uKTtcbiAgICAgICAgICAgIGhlYWRpbmcuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAxMyl7XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZVNlY3Rpb24uY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybk1vcmVMaW5rKGZpZWxkKXtcbiAgICAgICAgY29uc29sZS5sb2coZmllbGQpO1xuICAgICAgICBmdW5jdGlvbiBzY3JvbGxCYWNrKCl7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgIHRvcDogc2Nyb2xsUG9zaXRpb24sXG4gICAgICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzY3JvbGxCYWNrKTtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnc2hvd0dvQmFjaycpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICBpZiAoIGZpZWxkID09PSAnY3JlZGl0MjAxNScgfHwgZmllbGQgPT09ICdjcmVkaXQyMDE4JyApe1xuICAgICAgICAgICAgZmllbGQgPSAnY3JlZGl0X3JhdGluZyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy0nICsgZmllbGQpO1xuICAgICAgICBsaW5rLmlubmVyVGV4dCA9ICdtb3JlJztcbiAgICAgICAgbGluay5ocmVmID0gJyMnICsgZmllbGQ7XG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHNjcm9sbFBvc2l0aW9uID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICAgICAgaWYgKCBoZWFkZXIgKXtcbiAgICAgICAgICAgICAgICBoZWFkZXIuc2Nyb2xsSW50b1ZpZXcoe1xuICAgICAgICAgICAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrOiAnY2VudGVyJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNob3dHb0JhY2snKS5mb3JFYWNoKGZ1bmN0aW9uKGVhY2gpe1xuICAgICAgICAgICAgICAgICAgICBlYWNoLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3dHb0JhY2snKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZCgnc2hvd0dvQmFjaycpO1xuICAgICAgICAgICAgICAgIGhlYWRlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNjcm9sbEJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGhlYWRlciA/IGxpbmsgOiBudWxsO1xuICAgIH1cbn0iLCIvKiBAbGljZW5zZVxuUGFwYSBQYXJzZVxudjQuNi4zXG5odHRwczovL2dpdGh1Yi5jb20vbWhvbHQvUGFwYVBhcnNlXG5MaWNlbnNlOiBNSVRcbiovXG5BcnJheS5pc0FycmF5fHwoQXJyYXkuaXNBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9KSxmdW5jdGlvbihlLHQpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9dCgpOmUuUGFwYT10KCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgcyxlLGY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp2b2lkIDAhPT1mP2Y6e30sbj0hZi5kb2N1bWVudCYmISFmLnBvc3RNZXNzYWdlLG89biYmLyhcXD98JilwYXBhd29ya2VyKD18JnwkKS8udGVzdChmLmxvY2F0aW9uLnNlYXJjaCksYT0hMSxoPXt9LHU9MCxrPXtwYXJzZTpmdW5jdGlvbihlLHQpe3ZhciByPSh0PXR8fHt9KS5keW5hbWljVHlwaW5nfHwhMTt6KHIpJiYodC5keW5hbWljVHlwaW5nRnVuY3Rpb249cixyPXt9KTtpZih0LmR5bmFtaWNUeXBpbmc9cix0LnRyYW5zZm9ybT0hIXoodC50cmFuc2Zvcm0pJiZ0LnRyYW5zZm9ybSx0LndvcmtlciYmay5XT1JLRVJTX1NVUFBPUlRFRCl7dmFyIGk9ZnVuY3Rpb24oKXtpZighay5XT1JLRVJTX1NVUFBPUlRFRClyZXR1cm4hMTtpZighYSYmbnVsbD09PWsuU0NSSVBUX1BBVEgpdGhyb3cgbmV3IEVycm9yKFwiU2NyaXB0IHBhdGggY2Fubm90IGJlIGRldGVybWluZWQgYXV0b21hdGljYWxseSB3aGVuIFBhcGEgUGFyc2UgaXMgbG9hZGVkIGFzeW5jaHJvbm91c2x5LiBZb3UgbmVlZCB0byBzZXQgUGFwYS5TQ1JJUFRfUEFUSCBtYW51YWxseS5cIik7dmFyIGU9ay5TQ1JJUFRfUEFUSHx8cztlKz0oLTEhPT1lLmluZGV4T2YoXCI/XCIpP1wiJlwiOlwiP1wiKStcInBhcGF3b3JrZXJcIjt2YXIgdD1uZXcgZi5Xb3JrZXIoZSk7cmV0dXJuIHQub25tZXNzYWdlPW0sdC5pZD11KyssaFt0LmlkXT10fSgpO3JldHVybiBpLnVzZXJTdGVwPXQuc3RlcCxpLnVzZXJDaHVuaz10LmNodW5rLGkudXNlckNvbXBsZXRlPXQuY29tcGxldGUsaS51c2VyRXJyb3I9dC5lcnJvcix0LnN0ZXA9eih0LnN0ZXApLHQuY2h1bms9eih0LmNodW5rKSx0LmNvbXBsZXRlPXoodC5jb21wbGV0ZSksdC5lcnJvcj16KHQuZXJyb3IpLGRlbGV0ZSB0Lndvcmtlcix2b2lkIGkucG9zdE1lc3NhZ2Uoe2lucHV0OmUsY29uZmlnOnQsd29ya2VySWQ6aS5pZH0pfXZhciBuPW51bGw7ay5OT0RFX1NUUkVBTV9JTlBVVCxcInN0cmluZ1wiPT10eXBlb2YgZT9uPXQuZG93bmxvYWQ/bmV3IGModCk6bmV3IF8odCk6ITA9PT1lLnJlYWRhYmxlJiZ6KGUucmVhZCkmJnooZS5vbik/bj1uZXcgZyh0KTooZi5GaWxlJiZlIGluc3RhbmNlb2YgRmlsZXx8ZSBpbnN0YW5jZW9mIE9iamVjdCkmJihuPW5ldyBwKHQpKTtyZXR1cm4gbi5zdHJlYW0oZSl9LHVucGFyc2U6ZnVuY3Rpb24oZSx0KXt2YXIgaT0hMSxnPSEwLG09XCIsXCIseT1cIlxcclxcblwiLG49J1wiJyxyPSExOyFmdW5jdGlvbigpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiB0KXJldHVybjtcInN0cmluZ1wiIT10eXBlb2YgdC5kZWxpbWl0ZXJ8fGsuQkFEX0RFTElNSVRFUlMuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybi0xIT09dC5kZWxpbWl0ZXIuaW5kZXhPZihlKX0pLmxlbmd0aHx8KG09dC5kZWxpbWl0ZXIpOyhcImJvb2xlYW5cIj09dHlwZW9mIHQucXVvdGVzfHxBcnJheS5pc0FycmF5KHQucXVvdGVzKSkmJihpPXQucXVvdGVzKTtcImJvb2xlYW5cIiE9dHlwZW9mIHQuc2tpcEVtcHR5TGluZXMmJlwic3RyaW5nXCIhPXR5cGVvZiB0LnNraXBFbXB0eUxpbmVzfHwocj10LnNraXBFbXB0eUxpbmVzKTtcInN0cmluZ1wiPT10eXBlb2YgdC5uZXdsaW5lJiYoeT10Lm5ld2xpbmUpO1wic3RyaW5nXCI9PXR5cGVvZiB0LnF1b3RlQ2hhciYmKG49dC5xdW90ZUNoYXIpO1wiYm9vbGVhblwiPT10eXBlb2YgdC5oZWFkZXImJihnPXQuaGVhZGVyKX0oKTt2YXIgcz1uZXcgUmVnRXhwKE0obiksXCJnXCIpO1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1KU09OLnBhcnNlKGUpKTtpZihBcnJheS5pc0FycmF5KGUpKXtpZighZS5sZW5ndGh8fEFycmF5LmlzQXJyYXkoZVswXSkpcmV0dXJuIG8obnVsbCxlLHIpO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBlWzBdKXJldHVybiBvKGEoZVswXSksZSxyKX1lbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKXJldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlLmRhdGEmJihlLmRhdGE9SlNPTi5wYXJzZShlLmRhdGEpKSxBcnJheS5pc0FycmF5KGUuZGF0YSkmJihlLmZpZWxkc3x8KGUuZmllbGRzPWUubWV0YSYmZS5tZXRhLmZpZWxkcyksZS5maWVsZHN8fChlLmZpZWxkcz1BcnJheS5pc0FycmF5KGUuZGF0YVswXSk/ZS5maWVsZHM6YShlLmRhdGFbMF0pKSxBcnJheS5pc0FycmF5KGUuZGF0YVswXSl8fFwib2JqZWN0XCI9PXR5cGVvZiBlLmRhdGFbMF18fChlLmRhdGE9W2UuZGF0YV0pKSxvKGUuZmllbGRzfHxbXSxlLmRhdGF8fFtdLHIpO3Rocm93XCJleGNlcHRpb246IFVuYWJsZSB0byBzZXJpYWxpemUgdW5yZWNvZ25pemVkIGlucHV0XCI7ZnVuY3Rpb24gYShlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZSlyZXR1cm5bXTt2YXIgdD1bXTtmb3IodmFyIHIgaW4gZSl0LnB1c2gocik7cmV0dXJuIHR9ZnVuY3Rpb24gbyhlLHQscil7dmFyIGk9XCJcIjtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9SlNPTi5wYXJzZShlKSksXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PUpTT04ucGFyc2UodCkpO3ZhciBuPUFycmF5LmlzQXJyYXkoZSkmJjA8ZS5sZW5ndGgscz0hQXJyYXkuaXNBcnJheSh0WzBdKTtpZihuJiZnKXtmb3IodmFyIGE9MDthPGUubGVuZ3RoO2ErKykwPGEmJihpKz1tKSxpKz12KGVbYV0sYSk7MDx0Lmxlbmd0aCYmKGkrPXkpfWZvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKXt2YXIgaD1uP2UubGVuZ3RoOnRbb10ubGVuZ3RoLHU9ITEsZj1uPzA9PT1PYmplY3Qua2V5cyh0W29dKS5sZW5ndGg6MD09PXRbb10ubGVuZ3RoO2lmKHImJiFuJiYodT1cImdyZWVkeVwiPT09cj9cIlwiPT09dFtvXS5qb2luKFwiXCIpLnRyaW0oKToxPT09dFtvXS5sZW5ndGgmJjA9PT10W29dWzBdLmxlbmd0aCksXCJncmVlZHlcIj09PXImJm4pe2Zvcih2YXIgZD1bXSxsPTA7bDxoO2wrKyl7dmFyIGM9cz9lW2xdOmw7ZC5wdXNoKHRbb11bY10pfXU9XCJcIj09PWQuam9pbihcIlwiKS50cmltKCl9aWYoIXUpe2Zvcih2YXIgcD0wO3A8aDtwKyspezA8cCYmIWYmJihpKz1tKTt2YXIgXz1uJiZzP2VbcF06cDtpKz12KHRbb11bX10scCl9bzx0Lmxlbmd0aC0xJiYoIXJ8fDA8aCYmIWYpJiYoaSs9eSl9fXJldHVybiBpfWZ1bmN0aW9uIHYoZSx0KXtpZihudWxsPT1lKXJldHVyblwiXCI7aWYoZS5jb25zdHJ1Y3Rvcj09PURhdGUpcmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpLnNsaWNlKDEsMjUpO2U9ZS50b1N0cmluZygpLnJlcGxhY2UocyxuK24pO3ZhciByPVwiYm9vbGVhblwiPT10eXBlb2YgaSYmaXx8QXJyYXkuaXNBcnJheShpKSYmaVt0XXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKylpZigtMTxlLmluZGV4T2YodFtyXSkpcmV0dXJuITA7cmV0dXJuITF9KGUsay5CQURfREVMSU1JVEVSUyl8fC0xPGUuaW5kZXhPZihtKXx8XCIgXCI9PT1lLmNoYXJBdCgwKXx8XCIgXCI9PT1lLmNoYXJBdChlLmxlbmd0aC0xKTtyZXR1cm4gcj9uK2UrbjplfX19O2lmKGsuUkVDT1JEX1NFUD1TdHJpbmcuZnJvbUNoYXJDb2RlKDMwKSxrLlVOSVRfU0VQPVN0cmluZy5mcm9tQ2hhckNvZGUoMzEpLGsuQllURV9PUkRFUl9NQVJLPVwiXFx1ZmVmZlwiLGsuQkFEX0RFTElNSVRFUlM9W1wiXFxyXCIsXCJcXG5cIiwnXCInLGsuQllURV9PUkRFUl9NQVJLXSxrLldPUktFUlNfU1VQUE9SVEVEPSFuJiYhIWYuV29ya2VyLGsuU0NSSVBUX1BBVEg9bnVsbCxrLk5PREVfU1RSRUFNX0lOUFVUPTEsay5Mb2NhbENodW5rU2l6ZT0xMDQ4NTc2MCxrLlJlbW90ZUNodW5rU2l6ZT01MjQyODgwLGsuRGVmYXVsdERlbGltaXRlcj1cIixcIixrLlBhcnNlcj12LGsuUGFyc2VySGFuZGxlPXIsay5OZXR3b3JrU3RyZWFtZXI9YyxrLkZpbGVTdHJlYW1lcj1wLGsuU3RyaW5nU3RyZWFtZXI9XyxrLlJlYWRhYmxlU3RyZWFtU3RyZWFtZXI9ZyxmLmpRdWVyeSl7dmFyIGQ9Zi5qUXVlcnk7ZC5mbi5wYXJzZT1mdW5jdGlvbihvKXt2YXIgcj1vLmNvbmZpZ3x8e30saD1bXTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpe2lmKCEoXCJJTlBVVFwiPT09ZCh0aGlzKS5wcm9wKFwidGFnTmFtZVwiKS50b1VwcGVyQ2FzZSgpJiZcImZpbGVcIj09PWQodGhpcykuYXR0cihcInR5cGVcIikudG9Mb3dlckNhc2UoKSYmZi5GaWxlUmVhZGVyKXx8IXRoaXMuZmlsZXN8fDA9PT10aGlzLmZpbGVzLmxlbmd0aClyZXR1cm4hMDtmb3IodmFyIHQ9MDt0PHRoaXMuZmlsZXMubGVuZ3RoO3QrKyloLnB1c2goe2ZpbGU6dGhpcy5maWxlc1t0XSxpbnB1dEVsZW06dGhpcyxpbnN0YW5jZUNvbmZpZzpkLmV4dGVuZCh7fSxyKX0pfSksZSgpLHRoaXM7ZnVuY3Rpb24gZSgpe2lmKDAhPT1oLmxlbmd0aCl7dmFyIGUsdCxyLGksbj1oWzBdO2lmKHooby5iZWZvcmUpKXt2YXIgcz1vLmJlZm9yZShuLmZpbGUsbi5pbnB1dEVsZW0pO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBzKXtpZihcImFib3J0XCI9PT1zLmFjdGlvbilyZXR1cm4gZT1cIkFib3J0RXJyb3JcIix0PW4uZmlsZSxyPW4uaW5wdXRFbGVtLGk9cy5yZWFzb24sdm9pZCh6KG8uZXJyb3IpJiZvLmVycm9yKHtuYW1lOmV9LHQscixpKSk7aWYoXCJza2lwXCI9PT1zLmFjdGlvbilyZXR1cm4gdm9pZCB1KCk7XCJvYmplY3RcIj09dHlwZW9mIHMuY29uZmlnJiYobi5pbnN0YW5jZUNvbmZpZz1kLmV4dGVuZChuLmluc3RhbmNlQ29uZmlnLHMuY29uZmlnKSl9ZWxzZSBpZihcInNraXBcIj09PXMpcmV0dXJuIHZvaWQgdSgpfXZhciBhPW4uaW5zdGFuY2VDb25maWcuY29tcGxldGU7bi5pbnN0YW5jZUNvbmZpZy5jb21wbGV0ZT1mdW5jdGlvbihlKXt6KGEpJiZhKGUsbi5maWxlLG4uaW5wdXRFbGVtKSx1KCl9LGsucGFyc2Uobi5maWxlLG4uaW5zdGFuY2VDb25maWcpfWVsc2UgeihvLmNvbXBsZXRlKSYmby5jb21wbGV0ZSgpfWZ1bmN0aW9uIHUoKXtoLnNwbGljZSgwLDEpLGUoKX19fWZ1bmN0aW9uIGwoZSl7dGhpcy5faGFuZGxlPW51bGwsdGhpcy5fZmluaXNoZWQ9ITEsdGhpcy5fY29tcGxldGVkPSExLHRoaXMuX2lucHV0PW51bGwsdGhpcy5fYmFzZUluZGV4PTAsdGhpcy5fcGFydGlhbExpbmU9XCJcIix0aGlzLl9yb3dDb3VudD0wLHRoaXMuX3N0YXJ0PTAsdGhpcy5fbmV4dENodW5rPW51bGwsdGhpcy5pc0ZpcnN0Q2h1bms9ITAsdGhpcy5fY29tcGxldGVSZXN1bHRzPXtkYXRhOltdLGVycm9yczpbXSxtZXRhOnt9fSxmdW5jdGlvbihlKXt2YXIgdD1FKGUpO3QuY2h1bmtTaXplPXBhcnNlSW50KHQuY2h1bmtTaXplKSxlLnN0ZXB8fGUuY2h1bmt8fCh0LmNodW5rU2l6ZT1udWxsKTt0aGlzLl9oYW5kbGU9bmV3IHIodCksKHRoaXMuX2hhbmRsZS5zdHJlYW1lcj10aGlzKS5fY29uZmlnPXR9LmNhbGwodGhpcyxlKSx0aGlzLnBhcnNlQ2h1bms9ZnVuY3Rpb24oZSx0KXtpZih0aGlzLmlzRmlyc3RDaHVuayYmeih0aGlzLl9jb25maWcuYmVmb3JlRmlyc3RDaHVuaykpe3ZhciByPXRoaXMuX2NvbmZpZy5iZWZvcmVGaXJzdENodW5rKGUpO3ZvaWQgMCE9PXImJihlPXIpfXRoaXMuaXNGaXJzdENodW5rPSExO3ZhciBpPXRoaXMuX3BhcnRpYWxMaW5lK2U7dGhpcy5fcGFydGlhbExpbmU9XCJcIjt2YXIgbj10aGlzLl9oYW5kbGUucGFyc2UoaSx0aGlzLl9iYXNlSW5kZXgsIXRoaXMuX2ZpbmlzaGVkKTtpZighdGhpcy5faGFuZGxlLnBhdXNlZCgpJiYhdGhpcy5faGFuZGxlLmFib3J0ZWQoKSl7dmFyIHM9bi5tZXRhLmN1cnNvcjt0aGlzLl9maW5pc2hlZHx8KHRoaXMuX3BhcnRpYWxMaW5lPWkuc3Vic3RyaW5nKHMtdGhpcy5fYmFzZUluZGV4KSx0aGlzLl9iYXNlSW5kZXg9cyksbiYmbi5kYXRhJiYodGhpcy5fcm93Q291bnQrPW4uZGF0YS5sZW5ndGgpO3ZhciBhPXRoaXMuX2ZpbmlzaGVkfHx0aGlzLl9jb25maWcucHJldmlldyYmdGhpcy5fcm93Q291bnQ+PXRoaXMuX2NvbmZpZy5wcmV2aWV3O2lmKG8pZi5wb3N0TWVzc2FnZSh7cmVzdWx0czpuLHdvcmtlcklkOmsuV09SS0VSX0lELGZpbmlzaGVkOmF9KTtlbHNlIGlmKHoodGhpcy5fY29uZmlnLmNodW5rKSYmIXQpe2lmKHRoaXMuX2NvbmZpZy5jaHVuayhuLHRoaXMuX2hhbmRsZSksdGhpcy5faGFuZGxlLnBhdXNlZCgpfHx0aGlzLl9oYW5kbGUuYWJvcnRlZCgpKXJldHVybjtuPXZvaWQgMCx0aGlzLl9jb21wbGV0ZVJlc3VsdHM9dm9pZCAwfXJldHVybiB0aGlzLl9jb25maWcuc3RlcHx8dGhpcy5fY29uZmlnLmNodW5rfHwodGhpcy5fY29tcGxldGVSZXN1bHRzLmRhdGE9dGhpcy5fY29tcGxldGVSZXN1bHRzLmRhdGEuY29uY2F0KG4uZGF0YSksdGhpcy5fY29tcGxldGVSZXN1bHRzLmVycm9ycz10aGlzLl9jb21wbGV0ZVJlc3VsdHMuZXJyb3JzLmNvbmNhdChuLmVycm9ycyksdGhpcy5fY29tcGxldGVSZXN1bHRzLm1ldGE9bi5tZXRhKSx0aGlzLl9jb21wbGV0ZWR8fCFhfHwheih0aGlzLl9jb25maWcuY29tcGxldGUpfHxuJiZuLm1ldGEuYWJvcnRlZHx8KHRoaXMuX2NvbmZpZy5jb21wbGV0ZSh0aGlzLl9jb21wbGV0ZVJlc3VsdHMsdGhpcy5faW5wdXQpLHRoaXMuX2NvbXBsZXRlZD0hMCksYXx8biYmbi5tZXRhLnBhdXNlZHx8dGhpcy5fbmV4dENodW5rKCksbn19LHRoaXMuX3NlbmRFcnJvcj1mdW5jdGlvbihlKXt6KHRoaXMuX2NvbmZpZy5lcnJvcik/dGhpcy5fY29uZmlnLmVycm9yKGUpOm8mJnRoaXMuX2NvbmZpZy5lcnJvciYmZi5wb3N0TWVzc2FnZSh7d29ya2VySWQ6ay5XT1JLRVJfSUQsZXJyb3I6ZSxmaW5pc2hlZDohMX0pfX1mdW5jdGlvbiBjKGUpe3ZhciBpOyhlPWV8fHt9KS5jaHVua1NpemV8fChlLmNodW5rU2l6ZT1rLlJlbW90ZUNodW5rU2l6ZSksbC5jYWxsKHRoaXMsZSksdGhpcy5fbmV4dENodW5rPW4/ZnVuY3Rpb24oKXt0aGlzLl9yZWFkQ2h1bmsoKSx0aGlzLl9jaHVua0xvYWRlZCgpfTpmdW5jdGlvbigpe3RoaXMuX3JlYWRDaHVuaygpfSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXt0aGlzLl9pbnB1dD1lLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9yZWFkQ2h1bms9ZnVuY3Rpb24oKXtpZih0aGlzLl9maW5pc2hlZCl0aGlzLl9jaHVua0xvYWRlZCgpO2Vsc2V7aWYoaT1uZXcgWE1MSHR0cFJlcXVlc3QsdGhpcy5fY29uZmlnLndpdGhDcmVkZW50aWFscyYmKGkud2l0aENyZWRlbnRpYWxzPXRoaXMuX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpLG58fChpLm9ubG9hZD13KHRoaXMuX2NodW5rTG9hZGVkLHRoaXMpLGkub25lcnJvcj13KHRoaXMuX2NodW5rRXJyb3IsdGhpcykpLGkub3BlbihcIkdFVFwiLHRoaXMuX2lucHV0LCFuKSx0aGlzLl9jb25maWcuZG93bmxvYWRSZXF1ZXN0SGVhZGVycyl7dmFyIGU9dGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnM7Zm9yKHZhciB0IGluIGUpaS5zZXRSZXF1ZXN0SGVhZGVyKHQsZVt0XSl9aWYodGhpcy5fY29uZmlnLmNodW5rU2l6ZSl7dmFyIHI9dGhpcy5fc3RhcnQrdGhpcy5fY29uZmlnLmNodW5rU2l6ZS0xO2kuc2V0UmVxdWVzdEhlYWRlcihcIlJhbmdlXCIsXCJieXRlcz1cIit0aGlzLl9zdGFydCtcIi1cIityKSxpLnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Ob25lLU1hdGNoXCIsXCJ3ZWJraXQtbm8tY2FjaGVcIil9dHJ5e2kuc2VuZCgpfWNhdGNoKGUpe3RoaXMuX2NodW5rRXJyb3IoZS5tZXNzYWdlKX1uJiYwPT09aS5zdGF0dXM/dGhpcy5fY2h1bmtFcnJvcigpOnRoaXMuX3N0YXJ0Kz10aGlzLl9jb25maWcuY2h1bmtTaXplfX0sdGhpcy5fY2h1bmtMb2FkZWQ9ZnVuY3Rpb24oKXs0PT09aS5yZWFkeVN0YXRlJiYoaS5zdGF0dXM8MjAwfHw0MDA8PWkuc3RhdHVzP3RoaXMuX2NodW5rRXJyb3IoKToodGhpcy5fZmluaXNoZWQ9IXRoaXMuX2NvbmZpZy5jaHVua1NpemV8fHRoaXMuX3N0YXJ0PmZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVJhbmdlXCIpO2lmKG51bGw9PT10KXJldHVybi0xO3JldHVybiBwYXJzZUludCh0LnN1YnN0cih0Lmxhc3RJbmRleE9mKFwiL1wiKSsxKSl9KGkpLHRoaXMucGFyc2VDaHVuayhpLnJlc3BvbnNlVGV4dCkpKX0sdGhpcy5fY2h1bmtFcnJvcj1mdW5jdGlvbihlKXt2YXIgdD1pLnN0YXR1c1RleHR8fGU7dGhpcy5fc2VuZEVycm9yKG5ldyBFcnJvcih0KSl9fWZ1bmN0aW9uIHAoZSl7dmFyIGksbjsoZT1lfHx7fSkuY2h1bmtTaXplfHwoZS5jaHVua1NpemU9ay5Mb2NhbENodW5rU2l6ZSksbC5jYWxsKHRoaXMsZSk7dmFyIHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEZpbGVSZWFkZXI7dGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7dGhpcy5faW5wdXQ9ZSxuPWUuc2xpY2V8fGUud2Via2l0U2xpY2V8fGUubW96U2xpY2Uscz8oKGk9bmV3IEZpbGVSZWFkZXIpLm9ubG9hZD13KHRoaXMuX2NodW5rTG9hZGVkLHRoaXMpLGkub25lcnJvcj13KHRoaXMuX2NodW5rRXJyb3IsdGhpcykpOmk9bmV3IEZpbGVSZWFkZXJTeW5jLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9uZXh0Q2h1bms9ZnVuY3Rpb24oKXt0aGlzLl9maW5pc2hlZHx8dGhpcy5fY29uZmlnLnByZXZpZXcmJiEodGhpcy5fcm93Q291bnQ8dGhpcy5fY29uZmlnLnByZXZpZXcpfHx0aGlzLl9yZWFkQ2h1bmsoKX0sdGhpcy5fcmVhZENodW5rPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5faW5wdXQ7aWYodGhpcy5fY29uZmlnLmNodW5rU2l6ZSl7dmFyIHQ9TWF0aC5taW4odGhpcy5fc3RhcnQrdGhpcy5fY29uZmlnLmNodW5rU2l6ZSx0aGlzLl9pbnB1dC5zaXplKTtlPW4uY2FsbChlLHRoaXMuX3N0YXJ0LHQpfXZhciByPWkucmVhZEFzVGV4dChlLHRoaXMuX2NvbmZpZy5lbmNvZGluZyk7c3x8dGhpcy5fY2h1bmtMb2FkZWQoe3RhcmdldDp7cmVzdWx0OnJ9fSl9LHRoaXMuX2NodW5rTG9hZGVkPWZ1bmN0aW9uKGUpe3RoaXMuX3N0YXJ0Kz10aGlzLl9jb25maWcuY2h1bmtTaXplLHRoaXMuX2ZpbmlzaGVkPSF0aGlzLl9jb25maWcuY2h1bmtTaXplfHx0aGlzLl9zdGFydD49dGhpcy5faW5wdXQuc2l6ZSx0aGlzLnBhcnNlQ2h1bmsoZS50YXJnZXQucmVzdWx0KX0sdGhpcy5fY2h1bmtFcnJvcj1mdW5jdGlvbigpe3RoaXMuX3NlbmRFcnJvcihpLmVycm9yKX19ZnVuY3Rpb24gXyhlKXt2YXIgcjtsLmNhbGwodGhpcyxlPWV8fHt9KSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gcj1lLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9uZXh0Q2h1bms9ZnVuY3Rpb24oKXtpZighdGhpcy5fZmluaXNoZWQpe3ZhciBlPXRoaXMuX2NvbmZpZy5jaHVua1NpemUsdD1lP3Iuc3Vic3RyKDAsZSk6cjtyZXR1cm4gcj1lP3Iuc3Vic3RyKGUpOlwiXCIsdGhpcy5fZmluaXNoZWQ9IXIsdGhpcy5wYXJzZUNodW5rKHQpfX19ZnVuY3Rpb24gZyhlKXtsLmNhbGwodGhpcyxlPWV8fHt9KTt2YXIgdD1bXSxyPSEwLGk9ITE7dGhpcy5wYXVzZT1mdW5jdGlvbigpe2wucHJvdG90eXBlLnBhdXNlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9pbnB1dC5wYXVzZSgpfSx0aGlzLnJlc3VtZT1mdW5jdGlvbigpe2wucHJvdG90eXBlLnJlc3VtZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5faW5wdXQucmVzdW1lKCl9LHRoaXMuc3RyZWFtPWZ1bmN0aW9uKGUpe3RoaXMuX2lucHV0PWUsdGhpcy5faW5wdXQub24oXCJkYXRhXCIsdGhpcy5fc3RyZWFtRGF0YSksdGhpcy5faW5wdXQub24oXCJlbmRcIix0aGlzLl9zdHJlYW1FbmQpLHRoaXMuX2lucHV0Lm9uKFwiZXJyb3JcIix0aGlzLl9zdHJlYW1FcnJvcil9LHRoaXMuX2NoZWNrSXNGaW5pc2hlZD1mdW5jdGlvbigpe2kmJjE9PT10Lmxlbmd0aCYmKHRoaXMuX2ZpbmlzaGVkPSEwKX0sdGhpcy5fbmV4dENodW5rPWZ1bmN0aW9uKCl7dGhpcy5fY2hlY2tJc0ZpbmlzaGVkKCksdC5sZW5ndGg/dGhpcy5wYXJzZUNodW5rKHQuc2hpZnQoKSk6cj0hMH0sdGhpcy5fc3RyZWFtRGF0YT13KGZ1bmN0aW9uKGUpe3RyeXt0LnB1c2goXCJzdHJpbmdcIj09dHlwZW9mIGU/ZTplLnRvU3RyaW5nKHRoaXMuX2NvbmZpZy5lbmNvZGluZykpLHImJihyPSExLHRoaXMuX2NoZWNrSXNGaW5pc2hlZCgpLHRoaXMucGFyc2VDaHVuayh0LnNoaWZ0KCkpKX1jYXRjaChlKXt0aGlzLl9zdHJlYW1FcnJvcihlKX19LHRoaXMpLHRoaXMuX3N0cmVhbUVycm9yPXcoZnVuY3Rpb24oZSl7dGhpcy5fc3RyZWFtQ2xlYW5VcCgpLHRoaXMuX3NlbmRFcnJvcihlKX0sdGhpcyksdGhpcy5fc3RyZWFtRW5kPXcoZnVuY3Rpb24oKXt0aGlzLl9zdHJlYW1DbGVhblVwKCksaT0hMCx0aGlzLl9zdHJlYW1EYXRhKFwiXCIpfSx0aGlzKSx0aGlzLl9zdHJlYW1DbGVhblVwPXcoZnVuY3Rpb24oKXt0aGlzLl9pbnB1dC5yZW1vdmVMaXN0ZW5lcihcImRhdGFcIix0aGlzLl9zdHJlYW1EYXRhKSx0aGlzLl9pbnB1dC5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLHRoaXMuX3N0cmVhbUVuZCksdGhpcy5faW5wdXQucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLHRoaXMuX3N0cmVhbUVycm9yKX0sdGhpcyl9ZnVuY3Rpb24gcihnKXt2YXIgYSxvLGgsaT0vXlxccyotPyhcXGQqXFwuP1xcZCt8XFxkK1xcLj9cXGQqKShlWy0rXT9cXGQrKT9cXHMqJC9pLG49LyhcXGR7NH0tWzAxXVxcZC1bMC0zXVxcZFRbMC0yXVxcZDpbMC01XVxcZDpbMC01XVxcZFxcLlxcZCsoWystXVswLTJdXFxkOlswLTVdXFxkfFopKXwoXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGQoWystXVswLTJdXFxkOlswLTVdXFxkfFopKXwoXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQoWystXVswLTJdXFxkOlswLTVdXFxkfFopKS8sdD10aGlzLHI9MCxzPTAsdT0hMSxlPSExLGY9W10sZD17ZGF0YTpbXSxlcnJvcnM6W10sbWV0YTp7fX07aWYoeihnLnN0ZXApKXt2YXIgbD1nLnN0ZXA7Zy5zdGVwPWZ1bmN0aW9uKGUpe2lmKGQ9ZSxwKCkpYygpO2Vsc2V7aWYoYygpLDA9PT1kLmRhdGEubGVuZ3RoKXJldHVybjtyKz1lLmRhdGEubGVuZ3RoLGcucHJldmlldyYmcj5nLnByZXZpZXc/by5hYm9ydCgpOmwoZCx0KX19fWZ1bmN0aW9uIG0oZSl7cmV0dXJuXCJncmVlZHlcIj09PWcuc2tpcEVtcHR5TGluZXM/XCJcIj09PWUuam9pbihcIlwiKS50cmltKCk6MT09PWUubGVuZ3RoJiYwPT09ZVswXS5sZW5ndGh9ZnVuY3Rpb24gYygpe2lmKGQmJmgmJih5KFwiRGVsaW1pdGVyXCIsXCJVbmRldGVjdGFibGVEZWxpbWl0ZXJcIixcIlVuYWJsZSB0byBhdXRvLWRldGVjdCBkZWxpbWl0aW5nIGNoYXJhY3RlcjsgZGVmYXVsdGVkIHRvICdcIitrLkRlZmF1bHREZWxpbWl0ZXIrXCInXCIpLGg9ITEpLGcuc2tpcEVtcHR5TGluZXMpZm9yKHZhciBlPTA7ZTxkLmRhdGEubGVuZ3RoO2UrKyltKGQuZGF0YVtlXSkmJmQuZGF0YS5zcGxpY2UoZS0tLDEpO3JldHVybiBwKCkmJmZ1bmN0aW9uKCl7aWYoIWQpcmV0dXJuO2Zvcih2YXIgZT0wO3AoKSYmZTxkLmRhdGEubGVuZ3RoO2UrKylmb3IodmFyIHQ9MDt0PGQuZGF0YVtlXS5sZW5ndGg7dCsrKXt2YXIgcj1kLmRhdGFbZV1bdF07Zy50cmltSGVhZGVycyYmKHI9ci50cmltKCkpLGYucHVzaChyKX1kLmRhdGEuc3BsaWNlKDAsMSl9KCksZnVuY3Rpb24oKXtpZighZHx8IWcuaGVhZGVyJiYhZy5keW5hbWljVHlwaW5nJiYhZy50cmFuc2Zvcm0pcmV0dXJuIGQ7Zm9yKHZhciBlPTA7ZTxkLmRhdGEubGVuZ3RoO2UrKyl7dmFyIHQscj1nLmhlYWRlcj97fTpbXTtmb3IodD0wO3Q8ZC5kYXRhW2VdLmxlbmd0aDt0Kyspe3ZhciBpPXQsbj1kLmRhdGFbZV1bdF07Zy5oZWFkZXImJihpPXQ+PWYubGVuZ3RoP1wiX19wYXJzZWRfZXh0cmFcIjpmW3RdKSxnLnRyYW5zZm9ybSYmKG49Zy50cmFuc2Zvcm0obixpKSksbj1fKGksbiksXCJfX3BhcnNlZF9leHRyYVwiPT09aT8ocltpXT1yW2ldfHxbXSxyW2ldLnB1c2gobikpOnJbaV09bn1kLmRhdGFbZV09cixnLmhlYWRlciYmKHQ+Zi5sZW5ndGg/eShcIkZpZWxkTWlzbWF0Y2hcIixcIlRvb01hbnlGaWVsZHNcIixcIlRvbyBtYW55IGZpZWxkczogZXhwZWN0ZWQgXCIrZi5sZW5ndGgrXCIgZmllbGRzIGJ1dCBwYXJzZWQgXCIrdCxzK2UpOnQ8Zi5sZW5ndGgmJnkoXCJGaWVsZE1pc21hdGNoXCIsXCJUb29GZXdGaWVsZHNcIixcIlRvbyBmZXcgZmllbGRzOiBleHBlY3RlZCBcIitmLmxlbmd0aCtcIiBmaWVsZHMgYnV0IHBhcnNlZCBcIit0LHMrZSkpfWcuaGVhZGVyJiZkLm1ldGEmJihkLm1ldGEuZmllbGRzPWYpO3JldHVybiBzKz1kLmRhdGEubGVuZ3RoLGR9KCl9ZnVuY3Rpb24gcCgpe3JldHVybiBnLmhlYWRlciYmMD09PWYubGVuZ3RofWZ1bmN0aW9uIF8oZSx0KXtyZXR1cm4gcj1lLGcuZHluYW1pY1R5cGluZ0Z1bmN0aW9uJiZ2b2lkIDA9PT1nLmR5bmFtaWNUeXBpbmdbcl0mJihnLmR5bmFtaWNUeXBpbmdbcl09Zy5keW5hbWljVHlwaW5nRnVuY3Rpb24ocikpLCEwPT09KGcuZHluYW1pY1R5cGluZ1tyXXx8Zy5keW5hbWljVHlwaW5nKT9cInRydWVcIj09PXR8fFwiVFJVRVwiPT09dHx8XCJmYWxzZVwiIT09dCYmXCJGQUxTRVwiIT09dCYmKGkudGVzdCh0KT9wYXJzZUZsb2F0KHQpOm4udGVzdCh0KT9uZXcgRGF0ZSh0KTpcIlwiPT09dD9udWxsOnQpOnQ7dmFyIHJ9ZnVuY3Rpb24geShlLHQscixpKXtkLmVycm9ycy5wdXNoKHt0eXBlOmUsY29kZTp0LG1lc3NhZ2U6cixyb3c6aX0pfXRoaXMucGFyc2U9ZnVuY3Rpb24oZSx0LHIpe3ZhciBpPWcucXVvdGVDaGFyfHwnXCInO2lmKGcubmV3bGluZXx8KGcubmV3bGluZT1mdW5jdGlvbihlLHQpe2U9ZS5zdWJzdHIoMCwxMDQ4NTc2KTt2YXIgcj1uZXcgUmVnRXhwKE0odCkrXCIoW15dKj8pXCIrTSh0KSxcImdtXCIpLGk9KGU9ZS5yZXBsYWNlKHIsXCJcIikpLnNwbGl0KFwiXFxyXCIpLG49ZS5zcGxpdChcIlxcblwiKSxzPTE8bi5sZW5ndGgmJm5bMF0ubGVuZ3RoPGlbMF0ubGVuZ3RoO2lmKDE9PT1pLmxlbmd0aHx8cylyZXR1cm5cIlxcblwiO2Zvcih2YXIgYT0wLG89MDtvPGkubGVuZ3RoO28rKylcIlxcblwiPT09aVtvXVswXSYmYSsrO3JldHVybiBhPj1pLmxlbmd0aC8yP1wiXFxyXFxuXCI6XCJcXHJcIn0oZSxpKSksaD0hMSxnLmRlbGltaXRlcil6KGcuZGVsaW1pdGVyKSYmKGcuZGVsaW1pdGVyPWcuZGVsaW1pdGVyKGUpLGQubWV0YS5kZWxpbWl0ZXI9Zy5kZWxpbWl0ZXIpO2Vsc2V7dmFyIG49ZnVuY3Rpb24oZSx0LHIsaSl7Zm9yKHZhciBuLHMsYSxvPVtcIixcIixcIlxcdFwiLFwifFwiLFwiO1wiLGsuUkVDT1JEX1NFUCxrLlVOSVRfU0VQXSxoPTA7aDxvLmxlbmd0aDtoKyspe3ZhciB1PW9baF0sZj0wLGQ9MCxsPTA7YT12b2lkIDA7Zm9yKHZhciBjPW5ldyB2KHtjb21tZW50czppLGRlbGltaXRlcjp1LG5ld2xpbmU6dCxwcmV2aWV3OjEwfSkucGFyc2UoZSkscD0wO3A8Yy5kYXRhLmxlbmd0aDtwKyspaWYociYmbShjLmRhdGFbcF0pKWwrKztlbHNle3ZhciBfPWMuZGF0YVtwXS5sZW5ndGg7ZCs9Xyx2b2lkIDAhPT1hPzE8XyYmKGYrPU1hdGguYWJzKF8tYSksYT1fKTphPTB9MDxjLmRhdGEubGVuZ3RoJiYoZC89Yy5kYXRhLmxlbmd0aC1sKSwodm9pZCAwPT09c3x8czxmKSYmMS45OTxkJiYocz1mLG49dSl9cmV0dXJue3N1Y2Nlc3NmdWw6ISEoZy5kZWxpbWl0ZXI9biksYmVzdERlbGltaXRlcjpufX0oZSxnLm5ld2xpbmUsZy5za2lwRW1wdHlMaW5lcyxnLmNvbW1lbnRzKTtuLnN1Y2Nlc3NmdWw/Zy5kZWxpbWl0ZXI9bi5iZXN0RGVsaW1pdGVyOihoPSEwLGcuZGVsaW1pdGVyPWsuRGVmYXVsdERlbGltaXRlciksZC5tZXRhLmRlbGltaXRlcj1nLmRlbGltaXRlcn12YXIgcz1FKGcpO3JldHVybiBnLnByZXZpZXcmJmcuaGVhZGVyJiZzLnByZXZpZXcrKyxhPWUsbz1uZXcgdihzKSxkPW8ucGFyc2UoYSx0LHIpLGMoKSx1P3ttZXRhOntwYXVzZWQ6ITB9fTpkfHx7bWV0YTp7cGF1c2VkOiExfX19LHRoaXMucGF1c2VkPWZ1bmN0aW9uKCl7cmV0dXJuIHV9LHRoaXMucGF1c2U9ZnVuY3Rpb24oKXt1PSEwLG8uYWJvcnQoKSxhPWEuc3Vic3RyKG8uZ2V0Q2hhckluZGV4KCkpfSx0aGlzLnJlc3VtZT1mdW5jdGlvbigpe3U9ITEsdC5zdHJlYW1lci5wYXJzZUNodW5rKGEsITApfSx0aGlzLmFib3J0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sdGhpcy5hYm9ydD1mdW5jdGlvbigpe2U9ITAsby5hYm9ydCgpLGQubWV0YS5hYm9ydGVkPSEwLHooZy5jb21wbGV0ZSkmJmcuY29tcGxldGUoZCksYT1cIlwifX1mdW5jdGlvbiBNKGUpe3JldHVybiBlLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLFwiXFxcXCQmXCIpfWZ1bmN0aW9uIHYoZSl7dmFyIFMsTz0oZT1lfHx7fSkuZGVsaW1pdGVyLHg9ZS5uZXdsaW5lLFQ9ZS5jb21tZW50cyxJPWUuc3RlcCxBPWUucHJldmlldyxEPWUuZmFzdE1vZGUsTD1TPXZvaWQgMD09PWUucXVvdGVDaGFyPydcIic6ZS5xdW90ZUNoYXI7aWYodm9pZCAwIT09ZS5lc2NhcGVDaGFyJiYoTD1lLmVzY2FwZUNoYXIpLChcInN0cmluZ1wiIT10eXBlb2YgT3x8LTE8ay5CQURfREVMSU1JVEVSUy5pbmRleE9mKE8pKSYmKE89XCIsXCIpLFQ9PT1PKXRocm93XCJDb21tZW50IGNoYXJhY3RlciBzYW1lIGFzIGRlbGltaXRlclwiOyEwPT09VD9UPVwiI1wiOihcInN0cmluZ1wiIT10eXBlb2YgVHx8LTE8ay5CQURfREVMSU1JVEVSUy5pbmRleE9mKFQpKSYmKFQ9ITEpLFwiXFxuXCIhPT14JiZcIlxcclwiIT09eCYmXCJcXHJcXG5cIiE9PXgmJih4PVwiXFxuXCIpO3ZhciBQPTAsRj0hMTt0aGlzLnBhcnNlPWZ1bmN0aW9uKGksdCxyKXtpZihcInN0cmluZ1wiIT10eXBlb2YgaSl0aHJvd1wiSW5wdXQgbXVzdCBiZSBhIHN0cmluZ1wiO3ZhciBuPWkubGVuZ3RoLGU9Ty5sZW5ndGgscz14Lmxlbmd0aCxhPVQubGVuZ3RoLG89eihJKSxoPVtdLHU9W10sZj1bXSxkPVA9MDtpZighaSlyZXR1cm4gQygpO2lmKER8fCExIT09RCYmLTE9PT1pLmluZGV4T2YoUykpe2Zvcih2YXIgbD1pLnNwbGl0KHgpLGM9MDtjPGwubGVuZ3RoO2MrKyl7aWYoZj1sW2NdLFArPWYubGVuZ3RoLGMhPT1sLmxlbmd0aC0xKVArPXgubGVuZ3RoO2Vsc2UgaWYocilyZXR1cm4gQygpO2lmKCFUfHxmLnN1YnN0cigwLGEpIT09VCl7aWYobyl7aWYoaD1bXSxrKGYuc3BsaXQoTykpLFIoKSxGKXJldHVybiBDKCl9ZWxzZSBrKGYuc3BsaXQoTykpO2lmKEEmJkE8PWMpcmV0dXJuIGg9aC5zbGljZSgwLEEpLEMoITApfX1yZXR1cm4gQygpfWZvcih2YXIgcCxfPWkuaW5kZXhPZihPLFApLGc9aS5pbmRleE9mKHgsUCksbT1uZXcgUmVnRXhwKE0oTCkrTShTKSxcImdcIik7OylpZihpW1BdIT09UylpZihUJiYwPT09Zi5sZW5ndGgmJmkuc3Vic3RyKFAsYSk9PT1UKXtpZigtMT09PWcpcmV0dXJuIEMoKTtQPWcrcyxnPWkuaW5kZXhPZih4LFApLF89aS5pbmRleE9mKE8sUCl9ZWxzZSBpZigtMSE9PV8mJihfPGd8fC0xPT09ZykpZi5wdXNoKGkuc3Vic3RyaW5nKFAsXykpLFA9XytlLF89aS5pbmRleE9mKE8sUCk7ZWxzZXtpZigtMT09PWcpYnJlYWs7aWYoZi5wdXNoKGkuc3Vic3RyaW5nKFAsZykpLHcoZytzKSxvJiYoUigpLEYpKXJldHVybiBDKCk7aWYoQSYmaC5sZW5ndGg+PUEpcmV0dXJuIEMoITApfWVsc2UgZm9yKHA9UCxQKys7Oyl7aWYoLTE9PT0ocD1pLmluZGV4T2YoUyxwKzEpKSlyZXR1cm4gcnx8dS5wdXNoKHt0eXBlOlwiUXVvdGVzXCIsY29kZTpcIk1pc3NpbmdRdW90ZXNcIixtZXNzYWdlOlwiUXVvdGVkIGZpZWxkIHVudGVybWluYXRlZFwiLHJvdzpoLmxlbmd0aCxpbmRleDpQfSksRSgpO2lmKHA9PT1uLTEpcmV0dXJuIEUoaS5zdWJzdHJpbmcoUCxwKS5yZXBsYWNlKG0sUykpO2lmKFMhPT1MfHxpW3ArMV0hPT1MKXtpZihTPT09THx8MD09PXB8fGlbcC0xXSE9PUwpe3ZhciB5PWIoLTE9PT1nP186TWF0aC5taW4oXyxnKSk7aWYoaVtwKzEreV09PT1PKXtmLnB1c2goaS5zdWJzdHJpbmcoUCxwKS5yZXBsYWNlKG0sUykpLFA9cCsxK3krZSxfPWkuaW5kZXhPZihPLFApLGc9aS5pbmRleE9mKHgsUCk7YnJlYWt9dmFyIHY9YihnKTtpZihpLnN1YnN0cihwKzErdixzKT09PXgpe2lmKGYucHVzaChpLnN1YnN0cmluZyhQLHApLnJlcGxhY2UobSxTKSksdyhwKzErditzKSxfPWkuaW5kZXhPZihPLFApLG8mJihSKCksRikpcmV0dXJuIEMoKTtpZihBJiZoLmxlbmd0aD49QSlyZXR1cm4gQyghMCk7YnJlYWt9dS5wdXNoKHt0eXBlOlwiUXVvdGVzXCIsY29kZTpcIkludmFsaWRRdW90ZXNcIixtZXNzYWdlOlwiVHJhaWxpbmcgcXVvdGUgb24gcXVvdGVkIGZpZWxkIGlzIG1hbGZvcm1lZFwiLHJvdzpoLmxlbmd0aCxpbmRleDpQfSkscCsrfX1lbHNlIHArK31yZXR1cm4gRSgpO2Z1bmN0aW9uIGsoZSl7aC5wdXNoKGUpLGQ9UH1mdW5jdGlvbiBiKGUpe3ZhciB0PTA7aWYoLTEhPT1lKXt2YXIgcj1pLnN1YnN0cmluZyhwKzEsZSk7ciYmXCJcIj09PXIudHJpbSgpJiYodD1yLmxlbmd0aCl9cmV0dXJuIHR9ZnVuY3Rpb24gRShlKXtyZXR1cm4gcnx8KHZvaWQgMD09PWUmJihlPWkuc3Vic3RyKFApKSxmLnB1c2goZSksUD1uLGsoZiksbyYmUigpKSxDKCl9ZnVuY3Rpb24gdyhlKXtQPWUsayhmKSxmPVtdLGc9aS5pbmRleE9mKHgsUCl9ZnVuY3Rpb24gQyhlKXtyZXR1cm57ZGF0YTpoLGVycm9yczp1LG1ldGE6e2RlbGltaXRlcjpPLGxpbmVicmVhazp4LGFib3J0ZWQ6Rix0cnVuY2F0ZWQ6ISFlLGN1cnNvcjpkKyh0fHwwKX19fWZ1bmN0aW9uIFIoKXtJKEMoKSksaD1bXSx1PVtdfX0sdGhpcy5hYm9ydD1mdW5jdGlvbigpe0Y9ITB9LHRoaXMuZ2V0Q2hhckluZGV4PWZ1bmN0aW9uKCl7cmV0dXJuIFB9fWZ1bmN0aW9uIG0oZSl7dmFyIHQ9ZS5kYXRhLHI9aFt0LndvcmtlcklkXSxpPSExO2lmKHQuZXJyb3Ipci51c2VyRXJyb3IodC5lcnJvcix0LmZpbGUpO2Vsc2UgaWYodC5yZXN1bHRzJiZ0LnJlc3VsdHMuZGF0YSl7dmFyIG49e2Fib3J0OmZ1bmN0aW9uKCl7aT0hMCx5KHQud29ya2VySWQse2RhdGE6W10sZXJyb3JzOltdLG1ldGE6e2Fib3J0ZWQ6ITB9fSl9LHBhdXNlOmIscmVzdW1lOmJ9O2lmKHooci51c2VyU3RlcCkpe2Zvcih2YXIgcz0wO3M8dC5yZXN1bHRzLmRhdGEubGVuZ3RoJiYoci51c2VyU3RlcCh7ZGF0YTpbdC5yZXN1bHRzLmRhdGFbc11dLGVycm9yczp0LnJlc3VsdHMuZXJyb3JzLG1ldGE6dC5yZXN1bHRzLm1ldGF9LG4pLCFpKTtzKyspO2RlbGV0ZSB0LnJlc3VsdHN9ZWxzZSB6KHIudXNlckNodW5rKSYmKHIudXNlckNodW5rKHQucmVzdWx0cyxuLHQuZmlsZSksZGVsZXRlIHQucmVzdWx0cyl9dC5maW5pc2hlZCYmIWkmJnkodC53b3JrZXJJZCx0LnJlc3VsdHMpfWZ1bmN0aW9uIHkoZSx0KXt2YXIgcj1oW2VdO3ooci51c2VyQ29tcGxldGUpJiZyLnVzZXJDb21wbGV0ZSh0KSxyLnRlcm1pbmF0ZSgpLGRlbGV0ZSBoW2VdfWZ1bmN0aW9uIGIoKXt0aHJvd1wiTm90IGltcGxlbWVudGVkLlwifWZ1bmN0aW9uIEUoZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVybiBlO3ZhciB0PUFycmF5LmlzQXJyYXkoZSk/W106e307Zm9yKHZhciByIGluIGUpdFtyXT1FKGVbcl0pO3JldHVybiB0fWZ1bmN0aW9uIHcoZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtlLmFwcGx5KHQsYXJndW1lbnRzKX19ZnVuY3Rpb24geihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfXJldHVybiBvP2Yub25tZXNzYWdlPWZ1bmN0aW9uKGUpe3ZhciB0PWUuZGF0YTt2b2lkIDA9PT1rLldPUktFUl9JRCYmdCYmKGsuV09SS0VSX0lEPXQud29ya2VySWQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0LmlucHV0KWYucG9zdE1lc3NhZ2Uoe3dvcmtlcklkOmsuV09SS0VSX0lELHJlc3VsdHM6ay5wYXJzZSh0LmlucHV0LHQuY29uZmlnKSxmaW5pc2hlZDohMH0pO2Vsc2UgaWYoZi5GaWxlJiZ0LmlucHV0IGluc3RhbmNlb2YgRmlsZXx8dC5pbnB1dCBpbnN0YW5jZW9mIE9iamVjdCl7dmFyIHI9ay5wYXJzZSh0LmlucHV0LHQuY29uZmlnKTtyJiZmLnBvc3RNZXNzYWdlKHt3b3JrZXJJZDprLldPUktFUl9JRCxyZXN1bHRzOnIsZmluaXNoZWQ6ITB9KX19OmsuV09SS0VSU19TVVBQT1JURUQmJihlPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpLHM9ZS5sZW5ndGg/ZVtlLmxlbmd0aC0xXS5zcmM6XCJcIixkb2N1bWVudC5ib2R5P2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZnVuY3Rpb24oKXthPSEwfSwhMCk6YT0hMCksKGMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobC5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1jLChwLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSkuY29uc3RydWN0b3I9cCwoXy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShfLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPV8sKGcucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobC5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1nLGt9KTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkYXRhL2RhdGEuY3N2P3Y9ZGRkYTEwXCI7IiwiaW1wb3J0IEVsZW1lbnQgZnJvbSAnQFVJL2VsZW1lbnQnO1xuaW1wb3J0ICdAQXV0b0NvbXBsZXRlL2Nzcy9hdXRvQ29tcGxldGUuY3NzJztcbmltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0ICcuL3RpcHB5LXN0eWxlcy5zY3NzJztcbmltcG9ydCB7IHN0YXRlTW9kdWxlIGFzIFMgfSBmcm9tICdzdGF0ZWZ1bC1kZWFkJztcbmltcG9ydCBDb21wYXJpc29uVGV4dCBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2NvbXBhcmlzb24vdGV4dCc7XG5pbXBvcnQgQ29tcGFyaXNvbkNoYXJ0IGZyb20gJ0BQcm9qZWN0L2NvbXBvbmVudHMvY29tcGFyaXNvbi9jaGFydCc7XG5pbXBvcnQgQXV0b0NvbXBsZXRlIGZyb20gJ0BBdXRvQ29tcGxldGUvanMvYXV0b0NvbXBsZXRlLmpzJztcbmltcG9ydCBQUyBmcm9tICdwdWJzdWItc2V0dGVyJztcbmltcG9ydCB0aXBweSBmcm9tICd0aXBweS5qcyc7XG5cbmNvbnN0IGluaXRpYWxDb21wYXJlID0gWydVUycsJ0FMJ107XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGFyaXNvbiBleHRlbmRzIEVsZW1lbnQge1xuICAgIHByZXJlbmRlcigpeyAvLyB0aGlzIHByZXJlbmRlciBpcyBjYWxsZWQgYXMgcGFydCBvZiB0aGUgc3VwZXIgY29uc3RydWN0b3JcbiBcbiAgICAgICAgdGhpcy5jb21wYXJpc29ucyA9IFtdO1xuICAgICAgICAvLyBmaXJzdCBsb29wIHRocm91Z2ggdG8gaW5zdGFudGlhdGUgdGhlIENvbXBhcmlzb25zLiBpZiBwcmVyZW5kZXJlZCwgY29tcGFyaXNvbi5lbCB3aWxsIGJlIHRoZSByZW5kZXJzIGh0bWwuIGlmIG5vdCwgaXQgd2lsbCBiZSBjcmVhdGVkXG4gICAgICAgIHRoaXMubW9kZWwuZ3JvdXBzLmZvckVhY2goKGdyb3VwLCBpKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLnR5cGVzTmVzdGVkW2ldLnZhbHVlcy5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgdmFyIGNvbXBhcmlzb247XG4gICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS50eXBlID09PSAndGV4dCcgKXtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyaXNvbiA9IHRoaXMucGFyZW50LmNyZWF0ZUNvbXBvbmVudCh0aGlzLm1vZGVsLCBDb21wYXJpc29uVGV4dCwgYGRpdi5qcy10ZXh0LWNvbXBhcmUtJHt2YWx1ZS5maWVsZH1gLCB7cmVyZW5kZXJPbkRhdGFNaXNtYXRjaDogdHJ1ZSwgcGFyZW50OiB0aGlzLCBkYXRhOiB7Y29tcGFyaXNvbjogaW5pdGlhbENvbXBhcmUsIGZpZWxkOiB2YWx1ZS5maWVsZH19KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gdGhpcy5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIENvbXBhcmlzb25DaGFydCwgYGRpdi5qcy10ZXh0LWNvbXBhcmUtJHt2YWx1ZS5maWVsZH1gLCB7cmVyZW5kZXJPbkRhdGFNaXNtYXRjaDogdHJ1ZSwgcGFyZW50OiB0aGlzLCBkYXRhOiB7Y29tcGFyaXNvbjogaW5pdGlhbENvbXBhcmUsIGZpZWxkOiB2YWx1ZS5maWVsZH19KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jb21wYXJpc29ucy5wdXNoKGNvbXBhcmlzb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goLi4udGhpcy5jb21wYXJpc29ucyk7XG5cbiAgICAgICAgLy90aGVuIGVpdGhlciByZXR1cm4gdGhlIHByZW5kZXJlZCBET00gZWxlbWVudCBvciBjcmVhdGUgaXQsIGFwcGVuZGluZyB0aGUgRE9NIGVsZW1lbnRzIGZyb20gdGhlIGNvbXBhcmlzb25zIGluc3RhbnRpYXRlZCBhYm92ZSBcblxuICAgICAgICAvL2NvbnRhaW5lclxuICAgICAgICB2YXIgdmlldyA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICAvL3RoaXMuY2hpbGRyZW4gPSBbXTsgYWxyZWFkeSBzZXQgYXMgcGFydCBvZiBjcmVhdGVDb21wb25lbnQgbWV0aG9kXG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXc7IC8vIGlmIHByZXJlbmRlcmVkIGFuZCBubyBuZWVkIHRvIHJlbmRlciAobm8gZGF0YSBtaXNtYXRjaClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGNvbXBvdW5kSW5kZXggPSAwO1xuICAgICAgICB0aGlzLm1vZGVsLmdyb3Vwcy5mb3JFYWNoKChncm91cCwgaSkgPT4ge1xuICAgICAgICAgICAgdmFyIGdyb3VwRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBncm91cERpdi5jbGFzc0xpc3QuYWRkKHNbZ3JvdXAuY2xlYW5TdHJpbmcoKV0pO1xuICAgICAgICAgICAgZ3JvdXBEaXYuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgYDxoMyBjbGFzcz1cIiR7cy5ncm91cEhlYWRlcn1cIj4ke2dyb3VwfTwvaDM+YCk7XG4gICAgICAgICAgICB2YXIgdHlwZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdHlwZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMudHlwZUNvbnRhaW5lciwgc1tncm91cC5jbGVhblN0cmluZygpXSk7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLnR5cGVzTmVzdGVkW2ldLnZhbHVlcy5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgdHlwZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOyBcbiAgICAgICAgICAgICAgICB0eXBlRGl2LmNsYXNzTGlzdC5hZGQocy50eXBlRGl2LCBzW3ZhbHVlLmZpZWxkXSk7XG4gICAgICAgICAgICAgICAgdHlwZURpdi5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBgPGg0IGNsYXNzPVwiJHtzLnR5cGVIZWFkZXJ9ICR7IHZhbHVlLnRvb2x0aXAgPyBzLndpdGhUb29sdGlwIDogJ3dpdGhvdXRUb29sdGlwJyB9XCIgZGF0YS1maWVsZD1cIiR7dmFsdWUuZmllbGR9XCIgZGF0YS1jb250ZW50PVwiJHt2YWx1ZS50b29sdGlwID8gdmFsdWUudG9vbHRpcCA6ICcnfVwiPiR7dmFsdWUubGFiZWx9PC9oND5gKTtcbiAgICAgICAgICAgICAgICB0eXBlRGl2LmFwcGVuZENoaWxkKHRoaXMuY29tcGFyaXNvbnNbY29tcG91bmRJbmRleF0uZWwpO1xuICAgICAgICAgICAgICAgIGNvbXBvdW5kSW5kZXgrKztcbiAgICAgICAgICAgICAgICB0eXBlQ29udGFpbmVyLmFwcGVuZENoaWxkKHR5cGVEaXYpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGdyb3VwRGl2LmFwcGVuZENoaWxkKHR5cGVDb250YWluZXIpO1xuICAgICAgICAgICAgdmlldy5hcHBlbmRDaGlsZChncm91cERpdik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICB0aGlzLmluaXRpYWxpemVBdXRvY29tcGxldGVzKCk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZVRvb2x0aXBzKCk7XG4gICAgICAgIFBTLnNldFN1YnMoW1xuICAgICAgICAgICAgWydjb21wYXJlJywgKG1zZyxkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUobXNnLCBkYXRhKTsgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIH1dXG4gICAgICAgIF0pO1xuICAgICAgICBmdW5jdGlvbiByYW5kb21JbnRGcm9tSW50ZXJ2YWwobWluLG1heCl7IC8vIG1pbiBhbmQgbWF4IGluY2x1ZGVkIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83MjI4MzIyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihtYXgtbWluKzEpK21pbik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0YXRlcyA9IHRoaXMubW9kZWwuZGF0YS5tYXAoZCA9PiBkLmNvZGUpO1xuICAgICAgICB2YXIgaW5kZXggPSBzdGF0ZXMuaW5kZXhPZignVVMnKTtcbiAgICAgICAgc3RhdGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIFMuc2V0U3RhdGUoJ2NvbXBhcmUuMScsIHN0YXRlc1tyYW5kb21JbnRGcm9tSW50ZXJ2YWwoMCwgc3RhdGVzLmxlbmd0aCAtMSldKTtcbiAgICAgICAgXG4gICAgfVxuICAgIGluaXRpYWxpemVUb29sdGlwcygpe1xuICAgICAgICB2YXIgZWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLndpdGhUb29sdGlwKSxcbiAgICAgICAgICAgIF90aGlzID0gdGhpcztcbiAgICAgICAgXG4gICAgICAgIHRpcHB5KGVscyx7XG4gICAgICAgICAgICBpbnRlcmFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRlbnQocmVmZXJlbmNlKXtcbiAgICAgICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmsgPSBfdGhpcy5wYXJlbnQucmV0dXJuTW9yZUxpbmsocmVmZXJlbmNlLmRhdGFzZXQuZmllbGQpO1xuICAgICAgICAgICAgICAgIGRpdi50ZXh0Q29udGVudCA9IHJlZmVyZW5jZS5kYXRhc2V0LmNvbnRlbnQgKyAnICc7XG4gICAgICAgICAgICAgICAgaWYgKCBsaW5rICkge1xuICAgICAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoX3RoaXMucGFyZW50LnJldHVybk1vcmVMaW5rKHJlZmVyZW5jZS5kYXRhc2V0LmZpZWxkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGUobXNnLGRhdGEpe1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLCBtc2csIGRhdGEpO1xuICAgICAgICB0aGlzLmNvbXBhcmlzb25zLmZvckVhY2goY29tcGFyaXNvbiA9PiB7XG4gICAgICAgICAgICBjb21wYXJpc29uLnVwZGF0ZShtc2csIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbXBhcmUtaW5wdXQtJyArIG1zZy5zcGxpdCgnLicpWzFdKTtcbiAgICAgICAgaW5wdXQudmFsdWUgPSB0aGlzLm1vZGVsLmRhdGEuZmluZChkID0+IGQuY29kZSA9PT0gZGF0YSkuc3RhdGU7XG4gICAgfVxuICAgIGluaXRpYWxpemVBdXRvY29tcGxldGVzKCl7XG4gICAgICAgIFxuICAgICAgICB2YXIgc3JjID0gdGhpcy5tb2RlbC5kYXRhLm1hcChkID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZC5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogZC5jb2RlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAga2V5ID0gJ3N0YXRlJztcbiAgICAgICAgdmFyIGF1dG9Db21wbGV0ZXNBcmVEaXJ0eSA9IFtmYWxzZSxmYWxzZV07XG4gICAgICAgIGZ1bmN0aW9uIHN1Z2dlc3Rpb25Nb3VzZUhhbmRsZXIoZSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLGUpO1xuICAgICAgICAgICAgaWYgKCBlLnR5cGUgPT09ICdtb3VzZWVudGVyJyApe1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggZS50eXBlID09PSAnY2xpY2snICl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5wYXJlbnROb2RlLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5wYXJlbnROb2RlLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmV2ZXJ0VG9QcmV2aW91cyhpbmRleCl7IC8vIHRoaXMgaW4gdGhlIGlucHV0IGVsZW1lbnRcbiAgICAgICAgICAgIHZhciBjdXJyZW50U3RhdGVBYmJyID0gUy5nZXRTdGF0ZSgnY29tcGFyZS4nICsgaW5kZXgpIHx8IGluaXRpYWxDb21wYXJlW2luZGV4XTtcbiAgICAgICAgICAgIHZhciBzdWdnZXN0aW9ucyA9IHRoaXMucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcuYXV0b0NvbXBsZXRlX3Jlc3VsdHNfbGlzdCBsaScpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coY3VycmVudFN0YXRlQWJicik7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gc3JjLmZpbmQocyA9PiBzLmNvZGUgPT09IGN1cnJlbnRTdGF0ZUFiYnIpLnN0YXRlO1xuICAgICAgICAgICAgaWYgKCBzdWdnZXN0aW9uc1swXSApe1xuICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zWzBdLnBhcmVudE5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdXRvQ29tcGxldGVzQXJlRGlydHlbaW5kZXhdID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuXG4gICAgICAgIGZ1bmN0aW9uIHNldE11dGF0aW9uT2JzZXJ2ZXIoaW5kZXgpe1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhdXRvQ29tcGxldGVfd3JhcHBlci0nICsgaW5kZXggKyAnIC5hdXRvQ29tcGxldGVfcmVzdWx0c19saXN0Jyk7XG4gICAgICAgICAgICB2YXIgY29uZmlnID0geyBhdHRyaWJ1dGVzOiBmYWxzZSwgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiBmYWxzZSB9O1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24obXV0YXRpb25MaXN0LCBvYnNlcnZlcil7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobXV0YXRpb25MaXN0LCBvYnNlcnZlcik7XG4gICAgICAgICAgICAgICAgbXV0YXRpb25MaXN0LmZvckVhY2gobXV0YXRpb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgc3VnZ2VzdGlvbk1vdXNlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywwKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvKiAgICBpZiAoIG11dGF0aW9uTGlzdFttdXRhdGlvbkxpc3QubGVuZ3RoIC0gMV0udGFyZ2V0LmNoaWxkcmVuLmxlbmd0aCA+IDAgJiYgIWJvZHlIYXNFdmVudExpc3RlbmVyICl7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYm9keSBjbGljaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJ0VG9QcmV2aW91cy5jYWxsKG11dGF0aW9uLnRhcmdldC5wYXJlbnROb2RlLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spO1xuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgWzAsMV0uZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29tcGFyZS1pbnB1dC0nICsgaW5kZXgpLFxuICAgICAgICAgICAgICAgIHdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXV0b0NvbXBsZXRlX3dyYXBwZXItJyArIGluZGV4KTtcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXV0b0NvbXBsZXRlc0FyZURpcnR5KTtcbiAgICAgICAgICAgICAgICBpZiAoYXV0b0NvbXBsZXRlc0FyZURpcnR5W2luZGV4XSl7XG4gICAgICAgICAgICAgICAgICAgIHJldmVydFRvUHJldmlvdXMuY2FsbChpbnB1dCwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pOyBcbiAgICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ2F1dG9Db21wbGV0ZScsIHNbJ2F1dG9Db21wbGV0ZScgKyBpbmRleF0pO1xuICAgICAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKHNbJ2F1dG9Db21wbGV0ZV93cmFwcGVyLScgKyBpbmRleF0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZXNBcmVEaXJ0eVtpbmRleF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBzdWdnZXN0aW9ucyA9IHRoaXMucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcuYXV0b0NvbXBsZXRlX3Jlc3VsdHNfbGlzdCBsaScpO1xuICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zLmZvckVhY2goc3VnZ2VzdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN1Z2dlc3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHN1Z2dlc3Rpb25Nb3VzZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICBzdWdnZXN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBzdWdnZXN0aW9uTW91c2VIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgdmFyIHN1Z2dlc3Rpb25zID0gdGhpcy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hdXRvQ29tcGxldGVfcmVzdWx0c19saXN0IGxpJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCBlLmtleUNvZGUgPT09IDkgJiYgc3VnZ2VzdGlvbnMubGVuZ3RoID09PSAxICkgeyAvLyB0YWIga2V5XG4gICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy52YWx1ZSAhPT0gc3VnZ2VzdGlvbnNbMF0uZGF0YXNldC5yZXN1bHQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBzdWdnZXN0aW9uc1swXS5kYXRhc2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldmVydFRvUHJldmlvdXMuY2FsbCh0aGlzLCBpbmRleCk7ICAgXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIGUua2V5Q29kZSA9PT0gOSAmJiAoIHN1Z2dlc3Rpb25zLmxlbmd0aCA+IDEgIHx8IHN1Z2dlc3Rpb25zLmxlbmd0aCA9PT0gMCApICkgeyAvLyB0YWIga2V5XG4gICAgICAgICAgICAgICAgICAgIHJldmVydFRvUHJldmlvdXMuY2FsbCh0aGlzLCBpbmRleCk7ICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICggZS5rZXlDb2RlID09PSAxMyAmJiBzdWdnZXN0aW9ucy5sZW5ndGggPT09IDEpIHsgLy8gZW50ZXIga2V5XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBzdWdnZXN0aW9uc1swXS5kYXRhc2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgUy5zZXRTdGF0ZSgnY29tcGFyZS4nICsgaW5kZXgsIHNyYy5maW5kKHMgPT4gcy5zdGF0ZSA9PT0gdGhpcy52YWx1ZSkuY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zWzBdLnBhcmVudE5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZXNBcmVEaXJ0eVtpbmRleF0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzLmJsdXIoKTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IEF1dG9Db21wbGV0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHQ6IHRydWUsICAgICAgICAgICAgICAgICAgICAgICAvLyBIaWdobGlnaHQgbWF0Y2hpbmcgcmVzdWx0cyAgICAgIHwgKE9wdGlvbmFsKVxuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdGlvbjogZmVlZGJhY2sgPT4geyAgICAgICAgICAgICAvLyBBY3Rpb24gc2NyaXB0IG9uU2VsZWN0aW9uIGV2ZW50IHwgKE9wdGlvbmFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZmVlZGJhY2ssIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgUy5zZXRTdGF0ZSgnY29tcGFyZS4nICsgaW5kZXgsIGZlZWRiYWNrLnNlbGVjdGlvbi5jb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gZmVlZGJhY2suc2VsZWN0aW9uLnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZXNBcmVEaXJ0eVtpbmRleF0gPSBmYWxzZTtcbiAgLy8gICAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIGZlZWRiYWNrLnNlbGVjdGlvbi5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlSG9sZGVyOiAnU2VsZWN0IHN0YXRlJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c0xpc3Q6IHsgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbmRlcmVkIHJlc3VsdHMgbGlzdCBvYmplY3QgICAgICB8IChPcHRpb25hbClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogKCkgPT4gJ2F1dG9Db21wbGV0ZV9yZXN1bHRzX2xpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb21wYXJlLWlucHV0LScgKyBpbmRleCksXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2FmdGVyZW5kJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hFbmdpbmU6IFwic3RyaWN0XCIsICAgICAgICAgICAgICAvLyBTZWFyY2ggRW5naW5lIHR5cGUvbW9kZSAgICAgICAgICAgfCAoT3B0aW9uYWwpXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI2NvbXBhcmUtaW5wdXQtJyArIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IDIsICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWluLiBDaGFycyBsZW5ndGggdG8gc3RhcnQgRW5naW5lIHwgKE9wdGlvbmFsKVxuICAgICAgICAgICAgICAgICAgICAvL21heFJlc3VsdHM6IDUsICAgICAgICAgICAgICAgICAgICAgICAgIC9cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHNldE11dGF0aW9uT2JzZXJ2ZXIoaW5kZXgpO1xuICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHRoaXMubW9kZWwuZGF0YS5maW5kKGQgPT4gZC5jb2RlID09PSBpbml0aWFsQ29tcGFyZVtpbmRleF0pLnN0YXRlKTtcbiAgICAgICAgICAgIC8vaW5wdXQudmFsdWUgPSB0aGlzLm1vZGVsLmRhdGEuZmluZChkID0+IGQuY29kZSA9PT0gaW5pdGlhbENvbXBhcmVbaW5kZXhdKS5zdGF0ZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY2hpbGRyZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImF1dG9Db21wbGV0ZV93cmFwcGVyXCI6XCJhdXRvQ29tcGxldGVfd3JhcHBlclwiLFwiYXV0b0NvbXBsZXRlXCI6XCJhdXRvQ29tcGxldGVcIixcImF1dG9Db21wbGV0ZV9yZXN1bHRzX2xpc3RcIjpcImF1dG9Db21wbGV0ZV9yZXN1bHRzX2xpc3RcIixcImF1dG9Db21wbGV0ZV9yZXN1bHRcIjpcImF1dG9Db21wbGV0ZV9yZXN1bHRcIixcImF1dG9Db21wbGV0ZV9oaWdobGlnaHRlZFwiOlwiYXV0b0NvbXBsZXRlX2hpZ2hsaWdodGVkXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJncm91cEhlYWRlclwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWdyb3VwSGVhZGVyXCIsXCJ0eXBlQ29udGFpbmVyXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tdHlwZUNvbnRhaW5lclwiLFwiY3JlZGl0LXJhdGluZ1wiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWNyZWRpdC1yYXRpbmdcIixcInR5cGVEaXZcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS10eXBlRGl2XCIsXCJ0eXBlSGVhZGVyXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tdHlwZUhlYWRlclwiLFwiZGVidF9saW1pdF90eXBlXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tZGVidF9saW1pdF90eXBlXCIsXCJjcmVkaXQyMDE1XCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tY3JlZGl0MjAxNVwiLFwiY3JlZGl0MjAxOFwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWNyZWRpdDIwMThcIixcImF1dG9Db21wbGV0ZTBcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS1hdXRvQ29tcGxldGUwXCIsXCJhdXRvQ29tcGxldGVfd3JhcHBlci0wXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tYXV0b0NvbXBsZXRlX3dyYXBwZXItMFwiLFwiYXV0b0NvbXBsZXRlMVwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWF1dG9Db21wbGV0ZTFcIixcImF1dG9Db21wbGV0ZV93cmFwcGVyLTFcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS1hdXRvQ29tcGxldGVfd3JhcHBlci0xXCIsXCJ3aXRoVG9vbHRpcFwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLXdpdGhUb29sdGlwXCJ9OyIsImltcG9ydCBzIGZyb20gJy4vLi4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IENvbXBhcmlzb24gZnJvbSAnLi4vJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGFyaXNvblRleHQgZXh0ZW5kcyBDb21wYXJpc29uIHtcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgdmFyIGRpdiA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMubW9kZWwuZGljdCwgdGhpcy5kYXRhLmZpZWxkKTtcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IHRoaXMucmV0dXJuVGVtcGxhdGUoMCkgKyB0aGlzLnJldHVyblRlbXBsYXRlKDEpO1xuICAgICAgICBcblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cbiAgICB1cGRhdGUobXNnLCBkYXRhKXsgLy8gc29tZSBoZXJlIGNvdWxkIGJlIGluIHRoZSBzdXBlclxuICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludChtc2cuc3BsaXQoJy4nKVsxXSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGluZGV4KTtcbiAgICAgICAgc3VwZXIudXBkYXRlKGluZGV4LGRhdGEpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLCBpbmRleCk7XG4gICAgICAgIHRoaXMuZWwuY2hpbGRyZW5baW5kZXhdLmZhZGVJbkNvbnRlbnQodGhpcy5yZXR1cm5UZW1wbGF0ZShpbmRleCkpO1xuICAgICAgICAvL3RoaXMuZWwuaW5uZXJIVE1MID0gdGhpcy5yZXR1cm5UZW1wbGF0ZShpbmRleCk7XG5cbiAgICB9XG4gICAgcmV0dXJuVGVtcGxhdGUoaSl7XG4gICAgICAgIHJldHVybiBgPHAgY2xhc3M9XCIke3MuY2hhcnRMYWJlbH0gJHtzLmNoYXJ0TGFiZWxUZXh0fVwiPiR7dGhpcy5tYXRjaGVzW2ldLnN0YXRlfTogPHNwYW4gY2xhc3M9XCIke3NbJ2NvbXBhcmVDb2xvcicgKyAoaSArMSldfVwiPiR7dGhpcy5tb2RlbC5kaWN0W3RoaXMuZGF0YS5maWVsZF0gIT09IHVuZGVmaW5lZCA/IHRoaXMubW9kZWwuZGljdFt0aGlzLmRhdGEuZmllbGRdW1t0aGlzLm1hdGNoZXNbaV1bdGhpcy5kYXRhLmZpZWxkXV1dIDogdGhpcy5tYXRjaGVzW2ldW3RoaXMuZGF0YS5maWVsZF19PC9zcGFuPjwvcD5gO1xuICAgIH1cbn1cbiIsImltcG9ydCBzIGZyb20gJy4vLi4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IENvbXBhcmlzb24gZnJvbSAnLi4vJztcbmltcG9ydCBCYXIgZnJvbSAnQFByb2plY3QvY29tcG9uZW50cy9iYXInO1xuaW1wb3J0IHsgZm9ybWF0VmFsdWUgfSBmcm9tICdAUHJvamVjdC9tZXRob2RzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wYXJpc29uQ2hhcnQgZXh0ZW5kcyBDb21wYXJpc29uIHtcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgdmFyIGRpdiA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICB0aGlzLmJhcnMgPSBbXTtcbiAgICAgICAgWzAsMV0uZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICAgICAgICB0aGlzLmJhcnMucHVzaCh0aGlzLnBhcmVudC5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIEJhciwgYGRpdi5qcy1iYXItY29tcGFyZS0ke3RoaXMuZGF0YS5maWVsZH0tJHtpbmRleH1gLCB7cGFyZW50OiB0aGlzLCBkYXRhOiB7ZDogdGhpcy5tYXRjaGVzW2luZGV4XSwgZmllbGQ6IHRoaXMuZGF0YS5maWVsZCwgY29sb3I6IGluZGV4ICsgMX19KSlcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCguLi50aGlzLmJhcnMpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cblxuICAgICAgICBcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IHRoaXMucmV0dXJuVGVtcGxhdGUoKTtcbiAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICB9XG4gICAgcmV0dXJuVGVtcGxhdGUoKXtcbiAgICAgICAgcmV0dXJuIGAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiJHtzLmNoYXJ0Q29udGFpbmVyfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7dGhpcy5wYXJ0aWFsVGVtcGxhdGUoMCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHt0aGlzLnBhcnRpYWxUZW1wbGF0ZSgxKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICBgO1xuICAgIH1cbiAgICByZXR1cm5UcmFuc2xhdGVWYWx1ZShpbmRleCl7XG4gICAgICAgIGlmICggdGhpcy5iYXJzW2luZGV4XS5kYXRhLmRbdGhpcy5iYXJzW2luZGV4XS5kYXRhLmZpZWxkXSA8IDAgJiYgdGhpcy5tb2RlbC50eXBlcy5maW5kKHQgPT4gdC5maWVsZCA9PT0gdGhpcy5iYXJzW2luZGV4XS5kYXRhLmZpZWxkKS5jcm9zc2VzWmVybyApe1xuICAgICAgICAgICAgcmV0dXJuIDA7ICAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7KCB0aGlzLmJhcnNbaW5kZXhdLmxpbmVhclNjYWxlKHRoaXMubWF0Y2hlc1tpbmRleF0sIHRoaXMuZGF0YS5maWVsZCkgKiAxMDApLnRvRml4ZWQoMSkgfSVgO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBhcnRpYWxUZW1wbGF0ZShpbmRleCl7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCIke3MuY2hhcnRMYWJlbH0gJHtzWydjaGFydExhYmVsJyArIChpbmRleCArIDEpXX1cIj5cbiAgICAgICAgICAgICAgICAgICAgJHt0aGlzLm1hdGNoZXNbaW5kZXhdLnN0YXRlfVxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiJHtzLmJhckNvbnRhaW5lcn0gJHtzWydiYXJDb250YWluZXInICsgKGluZGV4ICsgMSldfVwiPlxuICAgICAgICAgICAgICAgICAgICAke3RoaXMuYmFyc1tpbmRleF0uZWwub3V0ZXJIVE1MfSAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiJHtzLmRhdGFMYWJlbH1cIiBzdHlsZT1cInRyYW5zZm9ybTogdHJhbnNsYXRlWCgke3RoaXMucmV0dXJuVHJhbnNsYXRlVmFsdWUuY2FsbCh0aGlzLCBpbmRleCl9KVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgJHt0aGlzLmZvcm1hdFZhbHVlKHRoaXMubWF0Y2hlc1tpbmRleF0sIHRoaXMuZGF0YS5maWVsZCkucmVwbGFjZSgnLScsJ+KAkycpfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG4gICAgbGluZWFyU2NhbGUobWF0Y2gsIGZpZWxkKXtcbiAgICAgICAgdmFyIHR5cGVPYmplY3QgPSB0aGlzLm1vZGVsLnR5cGVzLmZpbmQodCA9PiB0LmZpZWxkID09PSBmaWVsZCksXG4gICAgICAgICAgICBzY2FsZSA9ICggbWF0Y2hbZmllbGRdIC0gdHlwZU9iamVjdC5taW4gKSAvIHR5cGVPYmplY3Quc3ByZWFkO1xuXG4gICAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG4gICAgZm9ybWF0VmFsdWUoKXtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtcbiAgICB9XG4gICAgdXBkYXRlKG1zZywgZGF0YSl7XG4gICAgICAgIGNvbnNvbGUubG9nKG1zZyxkYXRhKTtcbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQobXNnLnNwbGl0KCcuJylbMV0pLFxuICAgICAgICAgICAgZGF0YUxhYmVsID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMuZGF0YUxhYmVsKVtpbmRleF07XG4gICAgICAgIHN1cGVyLnVwZGF0ZShpbmRleCxkYXRhKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xuICAgICAgICAvLyB1cGRhdGUgbGFiZWxcbiAgICAgICAgdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMuY2hhcnRMYWJlbClbaW5kZXhdLmZhZGVJbkNvbnRlbnQodGhpcy5tYXRjaGVzW2luZGV4XS5zdGF0ZSk7XG4gICAgICAgIFxuICAgICAgICAvL3VwZGF0ZSBiYXJzXG4gICAgICAgIHRoaXMuY2hpbGRyZW5baW5kZXhdLmRhdGEuZCA9IHRoaXMubWF0Y2hlc1tpbmRleF07XG4gICAgICAgIHRoaXMuY2hpbGRyZW5baW5kZXhdLnVwZGF0ZShpbmRleCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdIRVJF4oCUJyx0aGlzLmNoaWxkcmVuW2luZGV4XS5kYXRhLmQpO1xuICAgICAgICAvL3VwZGF0ZSBkYXRhTGFiZWxcbiAgICAgICAgZGF0YUxhYmVsLmZhZGVJbkNvbnRlbnQodGhpcy5mb3JtYXRWYWx1ZSh0aGlzLm1hdGNoZXNbaW5kZXhdLCB0aGlzLmRhdGEuZmllbGQpLnJlcGxhY2UoJy0nLCfigJMnKSk7XG4gICAgICAgIGRhdGFMYWJlbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RoaXMucmV0dXJuVHJhbnNsYXRlVmFsdWUuY2FsbCh0aGlzLCBpbmRleCl9KWA7XG4gICAgfVxufVxuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImJhclwiOlwic3JjLWNvbXBvbmVudHMtYmFyLS1iYXJcIixcImJhckNvbG9yMVwiOlwic3JjLWNvbXBvbmVudHMtYmFyLS1iYXJDb2xvcjFcIixcImJhckNvbG9yMlwiOlwic3JjLWNvbXBvbmVudHMtYmFyLS1iYXJDb2xvcjJcIixcImlzWmVyb1wiOlwic3JjLWNvbXBvbmVudHMtYmFyLS1pc1plcm9cIn07IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsLmF1dG9Db21wbGV0ZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgdmFyIGRhdGFBdHRyaWJ1dGUgPSBcImRhdGEtcmVzdWx0XCI7XG4gIHZhciBzZWxlY3QgPSB7XG4gICAgcmVzdWx0c0xpc3Q6IFwiYXV0b0NvbXBsZXRlX3Jlc3VsdHNfbGlzdFwiLFxuICAgIHJlc3VsdDogXCJhdXRvQ29tcGxldGVfcmVzdWx0XCIsXG4gICAgaGlnaGxpZ2h0OiBcImF1dG9Db21wbGV0ZV9oaWdobGlnaHRlZFwiXG4gIH07XG4gIHZhciBnZXRJbnB1dCA9IGZ1bmN0aW9uIGdldElucHV0KHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIDogc2VsZWN0b3IoKTtcbiAgfTtcbiAgdmFyIGNyZWF0ZVJlc3VsdHNMaXN0ID0gZnVuY3Rpb24gY3JlYXRlUmVzdWx0c0xpc3QocmVuZGVyUmVzdWx0cykge1xuICAgIHZhciByZXN1bHRzTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICBpZiAocmVuZGVyUmVzdWx0cy5jb250YWluZXIpIHtcbiAgICAgIHNlbGVjdC5yZXN1bHRzTGlzdCA9IHJlbmRlclJlc3VsdHMuY29udGFpbmVyKHJlc3VsdHNMaXN0KSB8fCBzZWxlY3QucmVzdWx0c0xpc3Q7XG4gICAgfVxuICAgIHJlc3VsdHNMaXN0LmNsYXNzTGlzdC5hZGQoc2VsZWN0LnJlc3VsdHNMaXN0KTtcbiAgICByZW5kZXJSZXN1bHRzLmRlc3RpbmF0aW9uLmluc2VydEFkamFjZW50RWxlbWVudChyZW5kZXJSZXN1bHRzLnBvc2l0aW9uLCByZXN1bHRzTGlzdCk7XG4gICAgcmV0dXJuIHJlc3VsdHNMaXN0O1xuICB9O1xuICB2YXIgaGlnaGxpZ2h0ID0gZnVuY3Rpb24gaGlnaGxpZ2h0KHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiPHNwYW4gY2xhc3M9XCIuY29uY2F0KHNlbGVjdC5oaWdobGlnaHQsIFwiPlwiKS5jb25jYXQodmFsdWUsIFwiPC9zcGFuPlwiKTtcbiAgfTtcbiAgdmFyIGFkZFJlc3VsdHNUb0xpc3QgPSBmdW5jdGlvbiBhZGRSZXN1bHRzVG9MaXN0KHJlc3VsdHNMaXN0LCBkYXRhU3JjLCBkYXRhS2V5LCBjYWxsYmFjaykge1xuICAgIGRhdGFTcmMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQsIHJlY29yZCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgIHZhciByZXN1bHRWYWx1ZSA9IGRhdGFTcmNbcmVjb3JkXS5zb3VyY2VbZGF0YUtleV0gfHwgZGF0YVNyY1tyZWNvcmRdLnNvdXJjZTtcbiAgICAgIHJlc3VsdC5zZXRBdHRyaWJ1dGUoZGF0YUF0dHJpYnV0ZSwgcmVzdWx0VmFsdWUpO1xuICAgICAgcmVzdWx0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHNlbGVjdC5yZXN1bHQpO1xuICAgICAgcmVzdWx0LnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMVwiKTtcbiAgICAgIHJlc3VsdC5pbm5lckhUTUwgPSBjYWxsYmFjayA/IGNhbGxiYWNrKGV2ZW50LCByZXN1bHQpIDogZXZlbnQubWF0Y2ggfHwgZXZlbnQ7XG4gICAgICByZXN1bHRzTGlzdC5hcHBlbmRDaGlsZChyZXN1bHQpO1xuICAgIH0pO1xuICB9O1xuICB2YXIgbmF2aWdhdGlvbiA9IGZ1bmN0aW9uIG5hdmlnYXRpb24oc2VsZWN0b3IsIHJlc3VsdHNMaXN0KSB7XG4gICAgdmFyIGlucHV0ID0gZ2V0SW5wdXQoc2VsZWN0b3IpO1xuICAgIHZhciBmaXJzdCA9IHJlc3VsdHNMaXN0LmZpcnN0Q2hpbGQ7XG4gICAgZG9jdW1lbnQub25rZXlkb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgYWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgIGlmIChhY3RpdmUgIT09IGZpcnN0ICYmIGFjdGl2ZSAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgIGFjdGl2ZS5wcmV2aW91c1NpYmxpbmcuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFjdGl2ZSA9PT0gZmlyc3QpIHtcbiAgICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgIGlmIChhY3RpdmUgPT09IGlucHV0ICYmIHJlc3VsdHNMaXN0LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZmlyc3QuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFjdGl2ZSAhPT0gcmVzdWx0c0xpc3QubGFzdENoaWxkKSB7XG4gICAgICAgICAgICBhY3RpdmUubmV4dFNpYmxpbmcuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgdmFyIGNsZWFyUmVzdWx0cyA9IGZ1bmN0aW9uIGNsZWFyUmVzdWx0cyhyZXN1bHRzTGlzdCkge1xuICAgIHJldHVybiByZXN1bHRzTGlzdC5pbm5lckhUTUwgPSBcIlwiO1xuICB9O1xuICB2YXIgZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKGZpZWxkLCByZXN1bHRzTGlzdCwgY2FsbGJhY2ssIHJlc3VsdHNWYWx1ZXMsIGRhdGFLZXkpIHtcbiAgICB2YXIgcmVzdWx0cyA9IHJlc3VsdHNMaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIuY29uY2F0KHNlbGVjdC5yZXN1bHQpKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgIFtcIm1vdXNlZG93blwiLCBcImtleWRvd25cIl0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XG4gICAgICAgIHJlc3VsdHNbc2VsZWN0aW9uXS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGV2ZW50VHlwZSA9PT0gXCJtb3VzZWRvd25cIiB8fCBldmVudC5rZXlDb2RlID09PSAxMykge1xuICAgICAgICAgICAgY2FsbGJhY2soe1xuICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgIHF1ZXJ5OiBnZXRJbnB1dChmaWVsZCkudmFsdWUsXG4gICAgICAgICAgICAgIHJlc3VsdHM6IHJlc3VsdHNWYWx1ZXMubWFwKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkLnNvdXJjZTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHNlbGVjdGlvbjogcmVzdWx0c1ZhbHVlcy5maW5kKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXNWYWx1ZSA9IHZhbHVlLnNvdXJjZVtkYXRhS2V5XSB8fCB2YWx1ZS5zb3VyY2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc1ZhbHVlID09PSBldmVudC50YXJnZXQuY2xvc2VzdChcIi5cIi5jb25jYXQoc2VsZWN0LnJlc3VsdCkpLmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlKTtcbiAgICAgICAgICAgICAgfSkuc291cmNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNsZWFyUmVzdWx0cyhyZXN1bHRzTGlzdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICB2YXIgYXV0b0NvbXBsZXRlVmlldyA9IHtcbiAgICBnZXRJbnB1dDogZ2V0SW5wdXQsXG4gICAgY3JlYXRlUmVzdWx0c0xpc3Q6IGNyZWF0ZVJlc3VsdHNMaXN0LFxuICAgIGhpZ2hsaWdodDogaGlnaGxpZ2h0LFxuICAgIGFkZFJlc3VsdHNUb0xpc3Q6IGFkZFJlc3VsdHNUb0xpc3QsXG4gICAgbmF2aWdhdGlvbjogbmF2aWdhdGlvbixcbiAgICBjbGVhclJlc3VsdHM6IGNsZWFyUmVzdWx0cyxcbiAgICBnZXRTZWxlY3Rpb246IGdldFNlbGVjdGlvblxuICB9O1xuXG4gIHZhciBhdXRvQ29tcGxldGUgPVxuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gYXV0b0NvbXBsZXRlKGNvbmZpZykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIGF1dG9Db21wbGV0ZSk7XG4gICAgICB0aGlzLnNlbGVjdG9yID0gY29uZmlnLnNlbGVjdG9yIHx8IFwiI2F1dG9Db21wbGV0ZVwiO1xuICAgICAgdGhpcy5kYXRhID0ge1xuICAgICAgICBzcmM6IGZ1bmN0aW9uIHNyYygpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIGNvbmZpZy5kYXRhLnNyYyA9PT0gXCJmdW5jdGlvblwiID8gY29uZmlnLmRhdGEuc3JjKCkgOiBjb25maWcuZGF0YS5zcmM7XG4gICAgICAgIH0sXG4gICAgICAgIGtleTogY29uZmlnLmRhdGEua2V5XG4gICAgICB9O1xuICAgICAgdGhpcy5zZWFyY2hFbmdpbmUgPSBjb25maWcuc2VhcmNoRW5naW5lID09PSBcImxvb3NlXCIgPyBcImxvb3NlXCIgOiBcInN0cmljdFwiO1xuICAgICAgdGhpcy50aHJlc2hvbGQgPSBjb25maWcudGhyZXNob2xkIHx8IDA7XG4gICAgICB0aGlzLnJlc3VsdHNMaXN0ID0gYXV0b0NvbXBsZXRlVmlldy5jcmVhdGVSZXN1bHRzTGlzdCh7XG4gICAgICAgIGNvbnRhaW5lcjogY29uZmlnLnJlc3VsdHNMaXN0ICYmIGNvbmZpZy5yZXN1bHRzTGlzdC5jb250YWluZXIgPyBjb25maWcucmVzdWx0c0xpc3QuY29udGFpbmVyIDogZmFsc2UsXG4gICAgICAgIGRlc3RpbmF0aW9uOiBjb25maWcucmVzdWx0c0xpc3QgJiYgY29uZmlnLnJlc3VsdHNMaXN0LmRlc3RpbmF0aW9uID8gY29uZmlnLnJlc3VsdHNMaXN0LmRlc3RpbmF0aW9uIDogYXV0b0NvbXBsZXRlVmlldy5nZXRJbnB1dCh0aGlzLnNlbGVjdG9yKSxcbiAgICAgICAgcG9zaXRpb246IGNvbmZpZy5yZXN1bHRzTGlzdCAmJiBjb25maWcucmVzdWx0c0xpc3QucG9zaXRpb24gPyBjb25maWcucmVzdWx0c0xpc3QucG9zaXRpb24gOiBcImFmdGVyZW5kXCJcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wbGFjZUhvbGRlciA9IGNvbmZpZy5wbGFjZUhvbGRlcjtcbiAgICAgIHRoaXMubWF4UmVzdWx0cyA9IGNvbmZpZy5tYXhSZXN1bHRzIHx8IDU7XG4gICAgICB0aGlzLnJlc3VsdEl0ZW0gPSBjb25maWcucmVzdWx0SXRlbTtcbiAgICAgIHRoaXMuaGlnaGxpZ2h0ID0gY29uZmlnLmhpZ2hsaWdodCB8fCBmYWxzZTtcbiAgICAgIHRoaXMub25TZWxlY3Rpb24gPSBjb25maWcub25TZWxlY3Rpb247XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgX2NyZWF0ZUNsYXNzKGF1dG9Db21wbGV0ZSwgW3tcbiAgICAgIGtleTogXCJzZWFyY2hcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2gocXVlcnksIHJlY29yZCkge1xuICAgICAgICB2YXIgaGlnaGxpZ2h0ID0gdGhpcy5oaWdobGlnaHQ7XG4gICAgICAgIHZhciByZWNvcmRMb3dlckNhc2UgPSByZWNvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHRoaXMuc2VhcmNoRW5naW5lID09PSBcImxvb3NlXCIpIHtcbiAgICAgICAgICBxdWVyeSA9IHF1ZXJ5LnJlcGxhY2UoLyAvZywgXCJcIik7XG4gICAgICAgICAgdmFyIG1hdGNoID0gW107XG4gICAgICAgICAgdmFyIHNlYXJjaFBvc2l0aW9uID0gMDtcbiAgICAgICAgICBmb3IgKHZhciBudW1iZXIgPSAwOyBudW1iZXIgPCByZWNvcmRMb3dlckNhc2UubGVuZ3RoOyBudW1iZXIrKykge1xuICAgICAgICAgICAgdmFyIHJlY29yZENoYXIgPSByZWNvcmRMb3dlckNhc2VbbnVtYmVyXTtcbiAgICAgICAgICAgIGlmIChzZWFyY2hQb3NpdGlvbiA8IHF1ZXJ5Lmxlbmd0aCAmJiByZWNvcmRDaGFyID09PSBxdWVyeVtzZWFyY2hQb3NpdGlvbl0pIHtcbiAgICAgICAgICAgICAgcmVjb3JkQ2hhciA9IGhpZ2hsaWdodCA/IGF1dG9Db21wbGV0ZVZpZXcuaGlnaGxpZ2h0KHJlY29yZENoYXIpIDogcmVjb3JkQ2hhcjtcbiAgICAgICAgICAgICAgc2VhcmNoUG9zaXRpb24rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hdGNoLnB1c2gocmVjb3JkQ2hhcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWFyY2hQb3NpdGlvbiAhPT0gcXVlcnkubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtYXRjaC5qb2luKFwiXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChyZWNvcmRMb3dlckNhc2UuaW5jbHVkZXMocXVlcnkpKSB7XG4gICAgICAgICAgICBpZiAoaGlnaGxpZ2h0KSB7XG4gICAgICAgICAgICAgIHZhciBpbnB1dFZhbHVlID0gYXV0b0NvbXBsZXRlVmlldy5nZXRJbnB1dCh0aGlzLnNlbGVjdG9yKS52YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkTG93ZXJDYXNlLnJlcGxhY2UoaW5wdXRWYWx1ZSwgYXV0b0NvbXBsZXRlVmlldy5oaWdobGlnaHQoaW5wdXRWYWx1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZExvd2VyQ2FzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibGlzdE1hdGNoZWRSZXN1bHRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdE1hdGNoZWRSZXN1bHRzKGRhdGEpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlc0xpc3QgPSBbXTtcbiAgICAgICAgdmFyIGlucHV0VmFsdWUgPSBhdXRvQ29tcGxldGVWaWV3LmdldElucHV0KHRoaXMuc2VsZWN0b3IpLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGRhdGEuZmlsdGVyKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5zZWFyY2goaW5wdXRWYWx1ZSwgcmVjb3JkW190aGlzLmRhdGEua2V5XSB8fCByZWNvcmQpO1xuICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgcmVzTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgICAgICAgICBzb3VyY2U6IHJlY29yZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGxpc3QgPSByZXNMaXN0LnNsaWNlKDAsIHRoaXMubWF4UmVzdWx0cyk7XG4gICAgICAgIGF1dG9Db21wbGV0ZVZpZXcuYWRkUmVzdWx0c1RvTGlzdCh0aGlzLnJlc3VsdHNMaXN0LCBsaXN0LCB0aGlzLmRhdGEua2V5LCB0aGlzLnJlc3VsdEl0ZW0pO1xuICAgICAgICBhdXRvQ29tcGxldGVWaWV3Lm5hdmlnYXRpb24odGhpcy5zZWxlY3RvciwgdGhpcy5yZXN1bHRzTGlzdCk7XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpZ25pdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpZ25pdGUoZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgdmFyIGlucHV0ID0gYXV0b0NvbXBsZXRlVmlldy5nZXRJbnB1dChzZWxlY3Rvcik7XG4gICAgICAgIHZhciBwbGFjZUhvbGRlciA9IHRoaXMucGxhY2VIb2xkZXI7XG4gICAgICAgIHZhciBvblNlbGVjdGlvbiA9IHRoaXMub25TZWxlY3Rpb247XG4gICAgICAgIGlmIChwbGFjZUhvbGRlcikge1xuICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIHBsYWNlSG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dC5vbmtleXVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciByZXN1bHRzTGlzdCA9IF90aGlzMi5yZXN1bHRzTGlzdDtcbiAgICAgICAgICB2YXIgY2xlYXJSZXN1bHRzID0gYXV0b0NvbXBsZXRlVmlldy5jbGVhclJlc3VsdHMocmVzdWx0c0xpc3QpO1xuICAgICAgICAgIGlmIChpbnB1dC52YWx1ZS5sZW5ndGggPiBfdGhpczIudGhyZXNob2xkICYmIGlucHV0LnZhbHVlLnJlcGxhY2UoLyAvZywgXCJcIikubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgbGlzdCA9IF90aGlzMi5saXN0TWF0Y2hlZFJlc3VsdHMoZGF0YSk7XG4gICAgICAgICAgICBpZiAob25TZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlVmlldy5nZXRTZWxlY3Rpb24oc2VsZWN0b3IsIHJlc3VsdHNMaXN0LCBvblNlbGVjdGlvbiwgbGlzdCwgX3RoaXMyLmRhdGEua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImluaXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgICAgdmFyIGRhdGFTcmMgPSB0aGlzLmRhdGEuc3JjKCk7XG4gICAgICAgIGlmIChkYXRhU3JjIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgIGRhdGFTcmMudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5pZ25pdGUoZGF0YSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pZ25pdGUoZGF0YVNyYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIGF1dG9Db21wbGV0ZTtcbiAgfSgpO1xuXG4gIHJldHVybiBhdXRvQ29tcGxldGU7XG5cbn0pKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgdmFyIGhhc2ggPSA1MzgxLFxuICAgICAgaSAgICA9IHN0ci5sZW5ndGg7XG5cbiAgd2hpbGUoaSkge1xuICAgIGhhc2ggPSAoaGFzaCAqIDMzKSBeIHN0ci5jaGFyQ29kZUF0KC0taSk7XG4gIH1cblxuICAvKiBKYXZhU2NyaXB0IGRvZXMgYml0d2lzZSBvcGVyYXRpb25zIChsaWtlIFhPUiwgYWJvdmUpIG9uIDMyLWJpdCBzaWduZWRcbiAgICogaW50ZWdlcnMuIFNpbmNlIHdlIHdhbnQgdGhlIHJlc3VsdHMgdG8gYmUgYWx3YXlzIHBvc2l0aXZlLCBjb252ZXJ0IHRoZVxuICAgKiBzaWduZWQgaW50IHRvIGFuIHVuc2lnbmVkIGJ5IGRvaW5nIGFuIHVuc2lnbmVkIGJpdHNoaWZ0LiAqL1xuICByZXR1cm4gaGFzaCA+Pj4gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoO1xuIiwiLyoqIVxuKiB0aXBweS5qcyB2NC4wLjRcbiogKGMpIDIwMTctMjAxOSBhdG9taWtzXG4qIE1JVCBMaWNlbnNlXG4qL1xuaW1wb3J0IFBvcHBlciBmcm9tICdwb3BwZXIuanMnO1xuXG52YXIgY3NzID0gXCIudGlwcHktaU9Te2N1cnNvcjpwb2ludGVyIWltcG9ydGFudH0udGlwcHktbm90cmFuc2l0aW9ue3RyYW5zaXRpb246bm9uZX0udGlwcHktcG9wcGVye3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMTY1LC44NCwuNDQsMSk7bWF4LXdpZHRoOmNhbGMoMTAwJSAtIDhweCk7cG9pbnRlci1ldmVudHM6bm9uZTtvdXRsaW5lOjB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3B7Ym9yZGVyLXJhZGl1czo0MCUgNDAlIDAgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1yb3VuZGFycm93e2JvdHRvbTotN3B4O2JvdHRvbTotNi41cHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAwO3RyYW5zZm9ybS1vcmlnaW46NTAlIDA7bWFyZ2luOjAgM3B4fS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gLnRpcHB5LXJvdW5kYXJyb3cgc3Zne3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYXJyb3d7Ym9yZGVyLXRvcDo4cHggc29saWQgIzMzMztib3JkZXItcmlnaHQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1sZWZ0OjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3R0b206LTdweDttYXJnaW46MCAzcHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAwO3RyYW5zZm9ybS1vcmlnaW46NTAlIDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjAgMjUlO3RyYW5zZm9ybS1vcmlnaW46MCAyNSV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTUlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTU1JSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT1oaWRkZW5dey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTUwJSwtNDUlKTt0cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlLC00NSUpO29wYWNpdHk6MH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpib3R0b207dHJhbnNmb3JtLW9yaWdpbjpib3R0b219LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoLTEwcHgpIHJvdGF0ZVgoMCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKC0xMHB4KSByb3RhdGVYKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDApIHJvdGF0ZVgoNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgwKSByb3RhdGVYKDYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpib3R0b207dHJhbnNmb3JtLW9yaWdpbjpib3R0b219LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKDEpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoLjUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LWJhY2tkcm9we2JvcmRlci1yYWRpdXM6MCAwIDMwJSAzMCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktcm91bmRhcnJvd3t0b3A6LTdweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDEwMCU7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMTAwJTttYXJnaW46MCAzcHh9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LWFycm93e2JvcmRlci1ib3R0b206OHB4IHNvbGlkICMzMzM7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItbGVmdDo4cHggc29saWQgdHJhbnNwYXJlbnQ7dG9wOi03cHg7bWFyZ2luOjAgM3B4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo1MCUgMTAwJTt0cmFuc2Zvcm0tb3JpZ2luOjUwJSAxMDAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LWJhY2tkcm9wey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjowIC01MCU7dHJhbnNmb3JtLW9yaWdpbjowIC01MCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNDUlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTQ1JSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT1oaWRkZW5dey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTUwJSk7dHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTUwJSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wO3RyYW5zZm9ybS1vcmlnaW46dG9wfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDEwcHgpIHJvdGF0ZVgoMCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDEwcHgpIHJvdGF0ZVgoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMCkgcm90YXRlWCgtNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgwKSByb3RhdGVYKC02MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wO3RyYW5zZm9ybS1vcmlnaW46dG9wfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCkgc2NhbGUoMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSguNSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCkgc2NhbGUoLjUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1iYWNrZHJvcHtib3JkZXItcmFkaXVzOjUwJSAwIDAgNTAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1yb3VuZGFycm93e3JpZ2h0Oi0xMnB4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjozMy4zMzMzMzMzMyUgNTAlO3RyYW5zZm9ybS1vcmlnaW46MzMuMzMzMzMzMzMlIDUwJTttYXJnaW46M3B4IDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LXJvdW5kYXJyb3cgc3Zne3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1hcnJvd3tib3JkZXItbGVmdDo4cHggc29saWQgIzMzMztib3JkZXItdG9wOjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjhweCBzb2xpZCB0cmFuc3BhcmVudDtyaWdodDotN3B4O21hcmdpbjozcHggMDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46MCA1MCU7dHJhbnNmb3JtLW9yaWdpbjowIDUwJX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAwO3RyYW5zZm9ybS1vcmlnaW46NTAlIDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWJhY2tkcm9wW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSk7dHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC01MCUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNzUlLC01MCUpO3RyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC03NSUsLTUwJSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0O3RyYW5zZm9ybS1vcmlnaW46cmlnaHR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKC0xMHB4KSByb3RhdGVZKDApO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgtMTBweCkgcm90YXRlWSgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMCkgcm90YXRlWSgtNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgwKSByb3RhdGVZKC02MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodDt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0fS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KSBzY2FsZSgxKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCkgc2NhbGUoLjUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3B7Ym9yZGVyLXJhZGl1czowIDUwJSA1MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LXJvdW5kYXJyb3d7bGVmdDotMTJweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NjYuNjY2NjY2NjYlIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjY2LjY2NjY2NjY2JSA1MCU7bWFyZ2luOjNweCAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LWFycm93e2JvcmRlci1yaWdodDo4cHggc29saWQgIzMzMztib3JkZXItdG9wOjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjhweCBzb2xpZCB0cmFuc3BhcmVudDtsZWZ0Oi03cHg7bWFyZ2luOjNweCAwOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjoxMDAlIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjEwMCUgNTAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOi01MCUgMDt0cmFuc2Zvcm0tb3JpZ2luOi01MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LWJhY2tkcm9wW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSk7dHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC01MCUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT1oaWRkZW5dey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTI1JSwtNTAlKTt0cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtMjUlLC01MCUpO29wYWNpdHk6MH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQ7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0fS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMTBweCkgcm90YXRlWSgwKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMTBweCkgcm90YXRlWSgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKDApIHJvdGF0ZVkoNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgwKSByb3RhdGVZKDYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpIHNjYWxlKDEpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpIHNjYWxlKDEpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KSBzY2FsZSguNSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCkgc2NhbGUoLjUpfS50aXBweS10b29sdGlwe3Bvc2l0aW9uOnJlbGF0aXZlO2NvbG9yOiNmZmY7Ym9yZGVyLXJhZGl1czouMjVyZW07Zm9udC1zaXplOi44NzVyZW07cGFkZGluZzouMzEyNXJlbSAuNTYyNXJlbTtsaW5lLWhlaWdodDoxLjQ7dGV4dC1hbGlnbjpjZW50ZXI7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtO2JhY2tncm91bmQtY29sb3I6IzMzM30udGlwcHktdG9vbHRpcFtkYXRhLXNpemU9c21hbGxde3BhZGRpbmc6LjE4NzVyZW0gLjM3NXJlbTtmb250LXNpemU6Ljc1cmVtfS50aXBweS10b29sdGlwW2RhdGEtc2l6ZT1sYXJnZV17cGFkZGluZzouMzc1cmVtIC43NXJlbTtmb250LXNpemU6MXJlbX0udGlwcHktdG9vbHRpcFtkYXRhLWFuaW1hdGVmaWxsXXtvdmVyZmxvdzpoaWRkZW47YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH0udGlwcHktdG9vbHRpcFtkYXRhLWludGVyYWN0aXZlXSwudGlwcHktdG9vbHRpcFtkYXRhLWludGVyYWN0aXZlXSBwYXRoe3BvaW50ZXItZXZlbnRzOmF1dG99LnRpcHB5LXRvb2x0aXBbZGF0YS1pbmVydGlhXVtkYXRhLXN0YXRlPXZpc2libGVde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNTQsMS41LC4zOCwxLjExKX0udGlwcHktdG9vbHRpcFtkYXRhLWluZXJ0aWFdW2RhdGEtc3RhdGU9aGlkZGVuXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlfS50aXBweS1hcnJvdywudGlwcHktcm91bmRhcnJvd3twb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDowO2hlaWdodDowfS50aXBweS1yb3VuZGFycm93e3dpZHRoOjE4cHg7aGVpZ2h0OjdweDtmaWxsOiMzMzM7cG9pbnRlci1ldmVudHM6bm9uZX0udGlwcHktYmFja2Ryb3B7cG9zaXRpb246YWJzb2x1dGU7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtO2JhY2tncm91bmQtY29sb3I6IzMzMztib3JkZXItcmFkaXVzOjUwJTt3aWR0aDpjYWxjKDExMCUgKyAycmVtKTtsZWZ0OjUwJTt0b3A6NTAlO3otaW5kZXg6LTE7dHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKC40NiwuMSwuNTIsLjk4KTstd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6aGlkZGVuO2JhY2tmYWNlLXZpc2liaWxpdHk6aGlkZGVufS50aXBweS1iYWNrZHJvcDphZnRlcntjb250ZW50OlxcXCJcXFwiO2Zsb2F0OmxlZnQ7cGFkZGluZy10b3A6MTAwJX0udGlwcHktYmFja2Ryb3ArLnRpcHB5LWNvbnRlbnR7dHJhbnNpdGlvbi1wcm9wZXJ0eTpvcGFjaXR5O3dpbGwtY2hhbmdlOm9wYWNpdHl9LnRpcHB5LWJhY2tkcm9wKy50aXBweS1jb250ZW50W2RhdGEtc3RhdGU9dmlzaWJsZV17b3BhY2l0eToxfS50aXBweS1iYWNrZHJvcCsudGlwcHktY29udGVudFtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowfVwiO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgdmVyc2lvbiA9IFwiNC4wLjRcIjtcblxudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIHVhID0gaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQ7XG52YXIgaXNJRSA9IC9NU0lFIHxUcmlkZW50XFwvLy50ZXN0KHVhKTtcbnZhciBpc1VDQnJvd3NlciA9IC9VQ0Jyb3dzZXJcXC8vLnRlc3QodWEpO1xudmFyIGlzSU9TID0gLy8gQHRzLWlnbm9yZVxuaXNCcm93c2VyICYmIC9pUGhvbmV8aVBhZHxpUG9kLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkgJiYgIXdpbmRvdy5NU1N0cmVhbTtcblxudmFyIERlZmF1bHRzID0ge1xuICBhMTF5OiB0cnVlLFxuICBhbGxvd0hUTUw6IHRydWUsXG4gIGFuaW1hdGVGaWxsOiB0cnVlLFxuICBhbmltYXRpb246ICdzaGlmdC1hd2F5JyxcbiAgYXBwZW5kVG86IGZ1bmN0aW9uIGFwcGVuZFRvKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9LFxuICBhcmlhOiAnZGVzY3JpYmVkYnknLFxuICBhcnJvdzogZmFsc2UsXG4gIGFycm93VHlwZTogJ3NoYXJwJyxcbiAgYm91bmRhcnk6ICdzY3JvbGxQYXJlbnQnLFxuICBjb250ZW50OiAnJyxcbiAgZGVsYXk6IFswLCAyMF0sXG4gIGRpc3RhbmNlOiAxMCxcbiAgZHVyYXRpb246IFszMjUsIDI3NV0sXG4gIGZsaXA6IHRydWUsXG4gIGZsaXBCZWhhdmlvcjogJ2ZsaXAnLFxuICBmbGlwT25VcGRhdGU6IGZhbHNlLFxuICBmb2xsb3dDdXJzb3I6IGZhbHNlLFxuICBoaWRlT25DbGljazogdHJ1ZSxcbiAgaWdub3JlQXR0cmlidXRlczogZmFsc2UsXG4gIGluZXJ0aWE6IGZhbHNlLFxuICBpbnRlcmFjdGl2ZTogZmFsc2UsXG4gIGludGVyYWN0aXZlQm9yZGVyOiAyLFxuICBpbnRlcmFjdGl2ZURlYm91bmNlOiAwLFxuICBsYXp5OiB0cnVlLFxuICBtYXhXaWR0aDogMzUwLFxuICBtdWx0aXBsZTogZmFsc2UsXG4gIG9mZnNldDogMCxcbiAgb25IaWRkZW46IGZ1bmN0aW9uIG9uSGlkZGVuKCkge30sXG4gIG9uSGlkZTogZnVuY3Rpb24gb25IaWRlKCkge30sXG4gIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7fSxcbiAgb25TaG93OiBmdW5jdGlvbiBvblNob3coKSB7fSxcbiAgb25TaG93bjogZnVuY3Rpb24gb25TaG93bigpIHt9LFxuICBwbGFjZW1lbnQ6ICd0b3AnLFxuICBwb3BwZXJPcHRpb25zOiB7fSxcbiAgcm9sZTogJ3Rvb2x0aXAnLFxuICBzaG93T25Jbml0OiBmYWxzZSxcbiAgc2l6ZTogJ3JlZ3VsYXInLFxuICBzdGlja3k6IGZhbHNlLFxuICB0YXJnZXQ6ICcnLFxuICB0aGVtZTogJ2RhcmsnLFxuICB0b3VjaDogdHJ1ZSxcbiAgdG91Y2hIb2xkOiBmYWxzZSxcbiAgdHJpZ2dlcjogJ21vdXNlZW50ZXIgZm9jdXMnLFxuICB1cGRhdGVEdXJhdGlvbjogMCxcbiAgd2FpdDogbnVsbCxcbiAgekluZGV4OiA5OTk5XG4gIC8qKlxuICAgKiBJZiB0aGUgc2V0KCkgbWV0aG9kIGVuY291bnRlcnMgb25lIG9mIHRoZXNlLCB0aGUgcG9wcGVySW5zdGFuY2UgbXVzdCBiZVxuICAgKiByZWNyZWF0ZWRcbiAgICovXG5cbn07XG52YXIgUE9QUEVSX0lOU1RBTkNFX0RFUEVOREVOQ0lFUyA9IFsnYXJyb3cnLCAnYXJyb3dUeXBlJywgJ2JvdW5kYXJ5JywgJ2Rpc3RhbmNlJywgJ2ZsaXAnLCAnZmxpcEJlaGF2aW9yJywgJ2ZsaXBPblVwZGF0ZScsICdvZmZzZXQnLCAncGxhY2VtZW50JywgJ3BvcHBlck9wdGlvbnMnXTtcblxudmFyIFNlbGVjdG9ycyA9IHtcbiAgUE9QUEVSOiAnLnRpcHB5LXBvcHBlcicsXG4gIFRPT0xUSVA6ICcudGlwcHktdG9vbHRpcCcsXG4gIENPTlRFTlQ6ICcudGlwcHktY29udGVudCcsXG4gIEJBQ0tEUk9QOiAnLnRpcHB5LWJhY2tkcm9wJyxcbiAgQVJST1c6ICcudGlwcHktYXJyb3cnLFxuICBST1VORF9BUlJPVzogJy50aXBweS1yb3VuZGFycm93J1xufTtcblxudmFyIGVsZW1lbnRQcm90byA9IGlzQnJvd3NlciA/IEVsZW1lbnQucHJvdG90eXBlIDoge307XG52YXIgbWF0Y2hlcyA9IGVsZW1lbnRQcm90by5tYXRjaGVzIHx8IGVsZW1lbnRQcm90by5tYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudFByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBlbGVtZW50UHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnRQcm90by5tc01hdGNoZXNTZWxlY3Rvcjtcbi8qKlxuICogUG9ueWZpbGwgZm9yIEFycmF5LmZyb20gLSBjb252ZXJ0cyBpdGVyYWJsZSB2YWx1ZXMgdG8gYW4gYXJyYXlcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSB2YWx1ZVxuICogQHJldHVybiB7YW55W119XG4gKi9cblxuZnVuY3Rpb24gYXJyYXlGcm9tKHZhbHVlKSB7XG4gIHJldHVybiBbXS5zbGljZS5jYWxsKHZhbHVlKTtcbn1cbi8qKlxuICogUG9ueWZpbGwgZm9yIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3RcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHBhcmVudFNlbGVjdG9yXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5cbmZ1bmN0aW9uIGNsb3Nlc3QoZWxlbWVudCwgcGFyZW50U2VsZWN0b3IpIHtcbiAgcmV0dXJuIChlbGVtZW50UHJvdG8uY2xvc2VzdCB8fCBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICB2YXIgZWwgPSB0aGlzO1xuXG4gICAgd2hpbGUgKGVsKSB7XG4gICAgICBpZiAobWF0Y2hlcy5jYWxsKGVsLCBzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfVxuXG4gICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICB9KS5jYWxsKGVsZW1lbnQsIHBhcmVudFNlbGVjdG9yKTtcbn1cbi8qKlxuICogV29ya3MgbGlrZSBFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0LCBidXQgdXNlcyBhIGNhbGxiYWNrIGluc3RlYWRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gY2xvc2VzdENhbGxiYWNrKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gIHdoaWxlIChlbGVtZW50KSB7XG4gICAgaWYgKGNhbGxiYWNrKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB9XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgXCJiYXJlXCIgdmlydHVhbCBlbGVtZW50IChiZWZvcmUgbXV0YXRpb25zIGRvbmVcbiAqIGJ5IGBwb2x5ZmlsbEVsZW1lbnRQcm90b3R5cGVQcm9wZXJ0aWVzKClgKS4gSlNET00gZWxlbWVudHMgc2hvdyB1cCBhc1xuICogW29iamVjdCBPYmplY3RdLCB3ZSBjYW4gY2hlY2sgaWYgdGhlIHZhbHVlIGlzIFwiZWxlbWVudC1saWtlXCIgaWYgaXQgaGFzXG4gKiBgYWRkRXZlbnRMaXN0ZW5lcmBcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc0JhcmVWaXJ0dWFsRWxlbWVudCh2YWx1ZSkge1xuICByZXR1cm4ge30udG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nICYmICF2YWx1ZS5hZGRFdmVudExpc3RlbmVyO1xufVxuLyoqXG4gKiBTYWZlIC5oYXNPd25Qcm9wZXJ0eSBjaGVjaywgZm9yIHByb3RvdHlwZS1sZXNzIG9iamVjdHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBrZXkpIHtcbiAgcmV0dXJuIHt9Lmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIGJhc2VkIG9uIHRoZSB2YWx1ZVxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfEVsZW1lbnR8RWxlbWVudFtdfE5vZGVMaXN0fSB2YWx1ZVxuICogQHJldHVybiB7RWxlbWVudFtdfVxuICovXG5cbmZ1bmN0aW9uIGdldEFycmF5T2ZFbGVtZW50cyh2YWx1ZSkge1xuICBpZiAoaXNTaW5ndWxhcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgfVxuXG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XG4gICAgcmV0dXJuIGFycmF5RnJvbSh2YWx1ZSk7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBhcnJheUZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG4vKipcbiAqIFJldHVybnMgYSB2YWx1ZSBhdCBhIGdpdmVuIGluZGV4IGRlcGVuZGluZyBvbiBpZiBpdCdzIGFuIGFycmF5IG9yIG51bWJlclxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge051bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7YW55fSBbZGVmYXVsdFZhbHVlXVxuICovXG5cbmZ1bmN0aW9uIGdldFZhbHVlKHZhbHVlLCBpbmRleCwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhciB2ID0gdmFsdWVbaW5kZXhdO1xuICAgIHJldHVybiB2ID09IG51bGwgPyBkZWZhdWx0VmFsdWUgOiB2O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBEZWJvdW5jZSB1dGlsaXR5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKi9cblxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIG1zKSB7XG4gIHZhciB0aW1lb3V0SWQ7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpOyAvLyBAdHMtaWdub3JlXG5cbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShfdGhpcywgX2FyZ3VtZW50cyk7XG4gICAgfSwgbXMpO1xuICB9O1xufVxuLyoqXG4gKiBQcmV2ZW50cyBlcnJvcnMgZnJvbSBiZWluZyB0aHJvd24gd2hpbGUgYWNjZXNzaW5nIG5lc3RlZCBtb2RpZmllciBvYmplY3RzXG4gKiBpbiBgcG9wcGVyT3B0aW9uc2BcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBnZXRNb2RpZmllcihvYmosIGtleSkge1xuICByZXR1cm4gb2JqICYmIG9iai5tb2RpZmllcnMgJiYgb2JqLm1vZGlmaWVyc1trZXldO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGFycmF5IG9yIHN0cmluZyBpbmNsdWRlcyBhIHZhbHVlXG4gKiBAcGFyYW0ge2FueVtdfFN0cmluZ30gYVxuICogQHBhcmFtIHthbnl9IGJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gaW5jbHVkZXMoYSwgYikge1xuICByZXR1cm4gYS5pbmRleE9mKGIpID4gLTE7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIHZhbHVlIGlzIHNpbmd1bGFyLWxpa2VcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc1Npbmd1bGFyKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiBoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgJ2lzVmlydHVhbCcpKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG59XG4vKipcbiAqIEZpcmVmb3ggZXh0ZW5zaW9ucyBkb24ndCBhbGxvdyBzZXR0aW5nIC5pbm5lckhUTUwgZGlyZWN0bHksIHRoaXMgd2lsbCB0cmljayBpdFxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGlubmVySFRNTCgpIHtcbiAgcmV0dXJuICdpbm5lckhUTUwnO1xufVxuLyoqXG4gKiBFdmFsdWF0ZXMgYSBmdW5jdGlvbiBpZiBvbmUsIG9yIHJldHVybnMgdGhlIHZhbHVlXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7YW55W119IGFyZ3NcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuXG5mdW5jdGlvbiBldmFsdWF0ZVZhbHVlKHZhbHVlLCBhcmdzKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyB2YWx1ZS5hcHBseShudWxsLCBhcmdzKSA6IHZhbHVlO1xufVxuLyoqXG4gKiBTZXRzIGEgcG9wcGVySW5zdGFuY2UgYGZsaXBgIG1vZGlmaWVyJ3MgZW5hYmxlZCBzdGF0ZVxuICogQHBhcmFtIHtPYmplY3RbXX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gc2V0RmxpcE1vZGlmaWVyRW5hYmxlZChtb2RpZmllcnMsIHZhbHVlKSB7XG4gIG1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gbS5uYW1lID09PSAnZmxpcCc7XG4gIH0pWzBdLmVuYWJsZWQgPSB2YWx1ZTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhbiBlbGVtZW50IGNhbiByZWNlaXZlIGZvY3VzXG4gKiBBbHdheXMgcmV0dXJucyB0cnVlIGZvciB2aXJ0dWFsIG9iamVjdHNcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBjYW5SZWNlaXZlRm9jdXMoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIEVsZW1lbnQgPyBtYXRjaGVzLmNhbGwoZWxlbWVudCwgJ2FbaHJlZl0sYXJlYVtocmVmXSxidXR0b24sZGV0YWlscyxpbnB1dCx0ZXh0YXJlYSxzZWxlY3QsaWZyYW1lLFt0YWJpbmRleF0nKSAmJiAhZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgOiB0cnVlO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGBkaXZgIGVsZW1lbnRcbiAqIEByZXR1cm4ge0hUTUxEaXZFbGVtZW50fVxuICovXG5cbmZ1bmN0aW9uIGRpdigpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGlubmVySFRNTCBvZiBhbiBlbGVtZW50IHdoaWxlIHRyaWNraW5nIGxpbnRlcnMgJiBtaW5pZmllcnNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGh0bWxcbiAqL1xuXG5mdW5jdGlvbiBzZXRJbm5lckhUTUwoZWxlbWVudCwgaHRtbCkge1xuICBlbGVtZW50W2lubmVySFRNTCgpXSA9IGh0bWwgaW5zdGFuY2VvZiBFbGVtZW50ID8gaHRtbFtpbm5lckhUTUwoKV0gOiBodG1sO1xufVxuLyoqXG4gKiBTZXRzIHRoZSBjb250ZW50IG9mIGEgdG9vbHRpcFxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gY29udGVudEVsXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHNcbiAqL1xuXG5mdW5jdGlvbiBzZXRDb250ZW50KGNvbnRlbnRFbCwgcHJvcHMpIHtcbiAgaWYgKHByb3BzLmNvbnRlbnQgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgc2V0SW5uZXJIVE1MKGNvbnRlbnRFbCwgJycpO1xuICAgIGNvbnRlbnRFbC5hcHBlbmRDaGlsZChwcm9wcy5jb250ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZW50RWxbcHJvcHMuYWxsb3dIVE1MID8gJ2lubmVySFRNTCcgOiAndGV4dENvbnRlbnQnXSA9IHByb3BzLmNvbnRlbnQ7XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY2hpbGQgZWxlbWVudHMgb2YgYSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gcG9wcGVyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gZ2V0Q2hpbGRyZW4ocG9wcGVyKSB7XG4gIHJldHVybiB7XG4gICAgdG9vbHRpcDogcG9wcGVyLnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3JzLlRPT0xUSVApLFxuICAgIGJhY2tkcm9wOiBwb3BwZXIucXVlcnlTZWxlY3RvcihTZWxlY3RvcnMuQkFDS0RST1ApLFxuICAgIGNvbnRlbnQ6IHBvcHBlci5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5DT05URU5UKSxcbiAgICBhcnJvdzogcG9wcGVyLnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3JzLkFSUk9XKSB8fCBwb3BwZXIucXVlcnlTZWxlY3RvcihTZWxlY3RvcnMuUk9VTkRfQVJST1cpXG4gIH07XG59XG4vKipcbiAqIEFkZHMgYGRhdGEtaW5lcnRpYWAgYXR0cmlidXRlXG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSB0b29sdGlwXG4gKi9cblxuZnVuY3Rpb24gYWRkSW5lcnRpYSh0b29sdGlwKSB7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWluZXJ0aWEnLCAnJyk7XG59XG4vKipcbiAqIFJlbW92ZXMgYGRhdGEtaW5lcnRpYWAgYXR0cmlidXRlXG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSB0b29sdGlwXG4gKi9cblxuZnVuY3Rpb24gcmVtb3ZlSW5lcnRpYSh0b29sdGlwKSB7XG4gIHRvb2x0aXAucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWluZXJ0aWEnKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJvdyBlbGVtZW50IGFuZCByZXR1cm5zIGl0XG4gKiBAcGFyYW0ge1N0cmluZ30gYXJyb3dUeXBlXG4gKiBAcmV0dXJuIHtIVE1MRGl2RWxlbWVudH1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVBcnJvd0VsZW1lbnQoYXJyb3dUeXBlKSB7XG4gIHZhciBhcnJvdyA9IGRpdigpO1xuXG4gIGlmIChhcnJvd1R5cGUgPT09ICdyb3VuZCcpIHtcbiAgICBhcnJvdy5jbGFzc05hbWUgPSAndGlwcHktcm91bmRhcnJvdyc7XG4gICAgc2V0SW5uZXJIVE1MKGFycm93LCAnPHN2ZyB2aWV3Qm94PVwiMCAwIDE4IDdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0wIDdzMi4wMjEtLjAxNSA1LjI1My00LjIxOEM2LjU4NCAxLjA1MSA3Ljc5Ny4wMDcgOSAwYzEuMjAzLS4wMDcgMi40MTYgMS4wMzUgMy43NjEgMi43ODJDMTYuMDEyIDcuMDA1IDE4IDcgMTggN0gwelwiLz48L3N2Zz4nKTtcbiAgfSBlbHNlIHtcbiAgICBhcnJvdy5jbGFzc05hbWUgPSAndGlwcHktYXJyb3cnO1xuICB9XG5cbiAgcmV0dXJuIGFycm93O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgYmFja2Ryb3AgZWxlbWVudCBhbmQgcmV0dXJucyBpdFxuICogQHJldHVybiB7SFRNTERpdkVsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQmFja2Ryb3BFbGVtZW50KCkge1xuICB2YXIgYmFja2Ryb3AgPSBkaXYoKTtcbiAgYmFja2Ryb3AuY2xhc3NOYW1lID0gJ3RpcHB5LWJhY2tkcm9wJztcbiAgYmFja2Ryb3Auc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgJ2hpZGRlbicpO1xuICByZXR1cm4gYmFja2Ryb3A7XG59XG4vKipcbiAqIEFkZHMgaW50ZXJhY3RpdmUtcmVsYXRlZCBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqL1xuXG5mdW5jdGlvbiBhZGRJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApIHtcbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW50ZXJhY3RpdmUnLCAnJyk7XG59XG4vKipcbiAqIFJlbW92ZXMgaW50ZXJhY3RpdmUtcmVsYXRlZCBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqL1xuXG5mdW5jdGlvbiByZW1vdmVJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApIHtcbiAgcG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgdG9vbHRpcC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtaW50ZXJhY3RpdmUnKTtcbn1cbi8qKlxuICogQXBwbGllcyBhIHRyYW5zaXRpb24gZHVyYXRpb24gdG8gYSBsaXN0IG9mIGVsZW1lbnRzXG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50W119IGVsc1xuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24oZWxzLCB2YWx1ZSkge1xuICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiXCIuY29uY2F0KHZhbHVlLCBcIm1zXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIEFkZC9yZW1vdmUgdHJhbnNpdGlvbmVuZCBsaXN0ZW5lciBmcm9tIHRvb2x0aXBcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqIEBwYXJhbSB7U3RyaW5nfSBhY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyXG4gKi9cblxuZnVuY3Rpb24gdG9nZ2xlVHJhbnNpdGlvbkVuZExpc3RlbmVyKHRvb2x0aXAsIGFjdGlvbiwgbGlzdGVuZXIpIHtcbiAgLy8gVUMgQnJvd3NlciBoYXNuJ3QgYWRvcHRlZCB0aGUgYHRyYW5zaXRpb25lbmRgIGV2ZW50IGRlc3BpdGUgc3VwcG9ydGluZ1xuICAvLyB1bnByZWZpeGVkIHRyYW5zaXRpb25zLi4uXG4gIHZhciBldmVudE5hbWUgPSBpc1VDQnJvd3NlciAmJiBkb2N1bWVudC5ib2R5LnN0eWxlLndlYmtpdFRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCA/ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyA6ICd0cmFuc2l0aW9uZW5kJztcbiAgdG9vbHRpcFthY3Rpb24gKyAnRXZlbnRMaXN0ZW5lciddKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQsIGlnbm9yaW5nIHNoaWZ0aW5nICh0b3Atc3RhcnQsIGV0YylcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHBvcHBlclxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGdldFBvcHBlclBsYWNlbWVudChwb3BwZXIpIHtcbiAgdmFyIGZ1bGxQbGFjZW1lbnQgPSBwb3BwZXIuZ2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICByZXR1cm4gZnVsbFBsYWNlbWVudCA/IGZ1bGxQbGFjZW1lbnQuc3BsaXQoJy0nKVswXSA6ICcnO1xufVxuLyoqXG4gKiBTZXRzIHRoZSB2aXNpYmlsaXR5IHN0YXRlIHRvIGVsZW1lbnRzIHNvIHRoZXkgY2FuIGJlZ2luIHRvIHRyYW5zaXRpb25cbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnRbXX0gZWxzXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZXRWaXNpYmlsaXR5U3RhdGUoZWxzLCBzdGF0ZSkge1xuICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0ZScsIHN0YXRlKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUcmlnZ2VycyByZWZsb3dcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHBvcHBlclxuICovXG5cbmZ1bmN0aW9uIHJlZmxvdyhwb3BwZXIpIHtcbiAgdm9pZCBwb3BwZXIub2Zmc2V0SGVpZ2h0O1xufVxuLyoqXG4gKiBBZGRzL3JlbW92ZXMgdGhlbWUgZnJvbSB0b29sdGlwJ3MgY2xhc3NMaXN0XG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSB0b29sdGlwXG4gKiBAcGFyYW0ge1N0cmluZ30gYWN0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gdGhlbWVcbiAqL1xuXG5mdW5jdGlvbiB0b2dnbGVUaGVtZSh0b29sdGlwLCBhY3Rpb24sIHRoZW1lKSB7XG4gIHRoZW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAodGhlbWVOYW1lKSB7XG4gICAgdG9vbHRpcC5jbGFzc0xpc3RbYWN0aW9uXSh0aGVtZU5hbWUgKyAnLXRoZW1lJyk7XG4gIH0pO1xufVxuLyoqXG4gKiBDb25zdHJ1Y3RzIHRoZSBwb3BwZXIgZWxlbWVudCBhbmQgcmV0dXJucyBpdFxuICogQHBhcmFtIHtOdW1iZXJ9IGlkXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHNcbiAqIEByZXR1cm4ge0hUTUxEaXZFbGVtZW50fVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVBvcHBlckVsZW1lbnQoaWQsIHByb3BzKSB7XG4gIHZhciBwb3BwZXIgPSBkaXYoKTtcbiAgcG9wcGVyLmNsYXNzTmFtZSA9ICd0aXBweS1wb3BwZXInO1xuICBwb3BwZXIuaWQgPSBcInRpcHB5LVwiLmNvbmNhdChpZCk7XG4gIHBvcHBlci5zdHlsZS56SW5kZXggPSBwcm9wcy56SW5kZXg7XG5cbiAgaWYgKHByb3BzLnJvbGUpIHtcbiAgICBwb3BwZXIuc2V0QXR0cmlidXRlKCdyb2xlJywgcHJvcHMucm9sZSk7XG4gIH1cblxuICB2YXIgdG9vbHRpcCA9IGRpdigpO1xuICB0b29sdGlwLmNsYXNzTmFtZSA9ICd0aXBweS10b29sdGlwJztcbiAgdG9vbHRpcC5zdHlsZS5tYXhXaWR0aCA9IHByb3BzLm1heFdpZHRoICsgKHR5cGVvZiBwcm9wcy5tYXhXaWR0aCA9PT0gJ251bWJlcicgPyAncHgnIDogJycpO1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1zaXplJywgcHJvcHMuc2l6ZSk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGlvbicsIHByb3BzLmFuaW1hdGlvbik7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgJ2hpZGRlbicpO1xuICB0b2dnbGVUaGVtZSh0b29sdGlwLCAnYWRkJywgcHJvcHMudGhlbWUpO1xuICB2YXIgY29udGVudCA9IGRpdigpO1xuICBjb250ZW50LmNsYXNzTmFtZSA9ICd0aXBweS1jb250ZW50JztcbiAgY29udGVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG5cbiAgaWYgKHByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgYWRkSW50ZXJhY3RpdmUocG9wcGVyLCB0b29sdGlwKTtcbiAgfVxuXG4gIGlmIChwcm9wcy5hcnJvdykge1xuICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQoY3JlYXRlQXJyb3dFbGVtZW50KHByb3BzLmFycm93VHlwZSkpO1xuICB9XG5cbiAgaWYgKHByb3BzLmFuaW1hdGVGaWxsKSB7XG4gICAgdG9vbHRpcC5hcHBlbmRDaGlsZChjcmVhdGVCYWNrZHJvcEVsZW1lbnQoKSk7XG4gICAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0ZWZpbGwnLCAnJyk7XG4gIH1cblxuICBpZiAocHJvcHMuaW5lcnRpYSkge1xuICAgIGFkZEluZXJ0aWEodG9vbHRpcCk7XG4gIH1cblxuICBzZXRDb250ZW50KGNvbnRlbnQsIHByb3BzKTtcbiAgdG9vbHRpcC5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgcG9wcGVyLmFwcGVuZENoaWxkKHRvb2x0aXApO1xuICByZXR1cm4gcG9wcGVyO1xufVxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3BwZXIgZWxlbWVudCBiYXNlZCBvbiB0aGUgbmV3IHByb3BzXG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcmV2UHJvcHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBuZXh0UHJvcHNcbiAqL1xuXG5mdW5jdGlvbiB1cGRhdGVQb3BwZXJFbGVtZW50KHBvcHBlciwgcHJldlByb3BzLCBuZXh0UHJvcHMpIHtcbiAgdmFyIF9nZXRDaGlsZHJlbiA9IGdldENoaWxkcmVuKHBvcHBlciksXG4gICAgICB0b29sdGlwID0gX2dldENoaWxkcmVuLnRvb2x0aXAsXG4gICAgICBjb250ZW50ID0gX2dldENoaWxkcmVuLmNvbnRlbnQsXG4gICAgICBiYWNrZHJvcCA9IF9nZXRDaGlsZHJlbi5iYWNrZHJvcCxcbiAgICAgIGFycm93ID0gX2dldENoaWxkcmVuLmFycm93O1xuXG4gIHBvcHBlci5zdHlsZS56SW5kZXggPSBuZXh0UHJvcHMuekluZGV4O1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1zaXplJywgbmV4dFByb3BzLnNpemUpO1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRpb24nLCBuZXh0UHJvcHMuYW5pbWF0aW9uKTtcbiAgdG9vbHRpcC5zdHlsZS5tYXhXaWR0aCA9IG5leHRQcm9wcy5tYXhXaWR0aCArICh0eXBlb2YgbmV4dFByb3BzLm1heFdpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJyk7XG5cbiAgaWYgKG5leHRQcm9wcy5yb2xlKSB7XG4gICAgcG9wcGVyLnNldEF0dHJpYnV0ZSgncm9sZScsIG5leHRQcm9wcy5yb2xlKTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXIucmVtb3ZlQXR0cmlidXRlKCdyb2xlJyk7XG4gIH1cblxuICBpZiAocHJldlByb3BzLmNvbnRlbnQgIT09IG5leHRQcm9wcy5jb250ZW50KSB7XG4gICAgc2V0Q29udGVudChjb250ZW50LCBuZXh0UHJvcHMpO1xuICB9IC8vIGFuaW1hdGVGaWxsXG5cblxuICBpZiAoIXByZXZQcm9wcy5hbmltYXRlRmlsbCAmJiBuZXh0UHJvcHMuYW5pbWF0ZUZpbGwpIHtcbiAgICB0b29sdGlwLmFwcGVuZENoaWxkKGNyZWF0ZUJhY2tkcm9wRWxlbWVudCgpKTtcbiAgICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRlZmlsbCcsICcnKTtcbiAgfSBlbHNlIGlmIChwcmV2UHJvcHMuYW5pbWF0ZUZpbGwgJiYgIW5leHRQcm9wcy5hbmltYXRlRmlsbCkge1xuICAgIHRvb2x0aXAucmVtb3ZlQ2hpbGQoYmFja2Ryb3ApO1xuICAgIHRvb2x0aXAucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWFuaW1hdGVmaWxsJyk7XG4gIH0gLy8gYXJyb3dcblxuXG4gIGlmICghcHJldlByb3BzLmFycm93ICYmIG5leHRQcm9wcy5hcnJvdykge1xuICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQoY3JlYXRlQXJyb3dFbGVtZW50KG5leHRQcm9wcy5hcnJvd1R5cGUpKTtcbiAgfSBlbHNlIGlmIChwcmV2UHJvcHMuYXJyb3cgJiYgIW5leHRQcm9wcy5hcnJvdykge1xuICAgIHRvb2x0aXAucmVtb3ZlQ2hpbGQoYXJyb3cpO1xuICB9IC8vIGFycm93VHlwZVxuXG5cbiAgaWYgKHByZXZQcm9wcy5hcnJvdyAmJiBuZXh0UHJvcHMuYXJyb3cgJiYgcHJldlByb3BzLmFycm93VHlwZSAhPT0gbmV4dFByb3BzLmFycm93VHlwZSkge1xuICAgIHRvb2x0aXAucmVwbGFjZUNoaWxkKGNyZWF0ZUFycm93RWxlbWVudChuZXh0UHJvcHMuYXJyb3dUeXBlKSwgYXJyb3cpO1xuICB9IC8vIGludGVyYWN0aXZlXG5cblxuICBpZiAoIXByZXZQcm9wcy5pbnRlcmFjdGl2ZSAmJiBuZXh0UHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICBhZGRJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5pbnRlcmFjdGl2ZSAmJiAhbmV4dFByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgcmVtb3ZlSW50ZXJhY3RpdmUocG9wcGVyLCB0b29sdGlwKTtcbiAgfSAvLyBpbmVydGlhXG5cblxuICBpZiAoIXByZXZQcm9wcy5pbmVydGlhICYmIG5leHRQcm9wcy5pbmVydGlhKSB7XG4gICAgYWRkSW5lcnRpYSh0b29sdGlwKTtcbiAgfSBlbHNlIGlmIChwcmV2UHJvcHMuaW5lcnRpYSAmJiAhbmV4dFByb3BzLmluZXJ0aWEpIHtcbiAgICByZW1vdmVJbmVydGlhKHRvb2x0aXApO1xuICB9IC8vIHRoZW1lXG5cblxuICBpZiAocHJldlByb3BzLnRoZW1lICE9PSBuZXh0UHJvcHMudGhlbWUpIHtcbiAgICB0b2dnbGVUaGVtZSh0b29sdGlwLCAncmVtb3ZlJywgcHJldlByb3BzLnRoZW1lKTtcbiAgICB0b2dnbGVUaGVtZSh0b29sdGlwLCAnYWRkJywgbmV4dFByb3BzLnRoZW1lKTtcbiAgfVxufVxuLyoqXG4gKiBSdW5zIHRoZSBjYWxsYmFjayBhZnRlciB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gaGFzIGJlZW4gdXBkYXRlZFxuICogdXBkYXRlKCkgaXMgZGVib3VuY2VkIHdpdGggUHJvbWlzZS5yZXNvbHZlKCkgb3Igc2V0VGltZW91dCgpXG4gKiBzY2hlZHVsZVVwZGF0ZSgpIGlzIHVwZGF0ZSgpIHdyYXBwZWQgaW4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKClcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3BwZXJJbnN0YW5jZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuXG5mdW5jdGlvbiBhZnRlclBvcHBlclBvc2l0aW9uVXBkYXRlcyhwb3BwZXJJbnN0YW5jZSwgY2FsbGJhY2spIHtcbiAgdmFyIHBvcHBlciA9IHBvcHBlckluc3RhbmNlLnBvcHBlcixcbiAgICAgIG9wdGlvbnMgPSBwb3BwZXJJbnN0YW5jZS5vcHRpb25zO1xuICB2YXIgb25DcmVhdGUgPSBvcHRpb25zLm9uQ3JlYXRlLFxuICAgICAgb25VcGRhdGUgPSBvcHRpb25zLm9uVXBkYXRlO1xuXG4gIG9wdGlvbnMub25DcmVhdGUgPSBvcHRpb25zLm9uVXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZWZsb3cocG9wcGVyKTtcbiAgICBjYWxsYmFjaygpO1xuICAgIG9uVXBkYXRlKGRhdGEpO1xuICAgIG9wdGlvbnMub25DcmVhdGUgPSBvbkNyZWF0ZTtcbiAgICBvcHRpb25zLm9uVXBkYXRlID0gb25VcGRhdGU7XG4gIH07XG59XG4vKipcbiAqIEhpZGVzIGFsbCB2aXNpYmxlIHBvcHBlcnMgb24gdGhlIGRvY3VtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5cbmZ1bmN0aW9uIGhpZGVBbGwoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIGNoZWNrSGlkZU9uQ2xpY2sgPSBfcmVmLmNoZWNrSGlkZU9uQ2xpY2ssXG4gICAgICBleGNsdWRlID0gX3JlZi5leGNsdWRlLFxuICAgICAgZHVyYXRpb24gPSBfcmVmLmR1cmF0aW9uO1xuXG4gIGFycmF5RnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9ycy5QT1BQRVIpKS5mb3JFYWNoKGZ1bmN0aW9uIChwb3BwZXIpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBwb3BwZXIuX3RpcHB5O1xuXG4gICAgaWYgKGluc3RhbmNlICYmIChjaGVja0hpZGVPbkNsaWNrID8gaW5zdGFuY2UucHJvcHMuaGlkZU9uQ2xpY2sgPT09IHRydWUgOiB0cnVlKSAmJiAoIWV4Y2x1ZGUgfHwgcG9wcGVyICE9PSBleGNsdWRlLnBvcHBlcikpIHtcbiAgICAgIGluc3RhbmNlLmhpZGUoZHVyYXRpb24pO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIG1vdXNlIGN1cnNvciBpcyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIncyBpbnRlcmFjdGl2ZSBib3JkZXJcbiAqIHJlZ2lvblxuICogQHBhcmFtIHtTdHJpbmd9IHBvcHBlclBsYWNlbWVudFxuICogQHBhcmFtIHtDbGllbnRSZWN0fSBwb3BwZXJSZWN0XG4gKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHNcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gaXNDdXJzb3JPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIocG9wcGVyUGxhY2VtZW50LCBwb3BwZXJSZWN0LCBldmVudCwgcHJvcHMpIHtcbiAgaWYgKCFwb3BwZXJQbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciB4ID0gZXZlbnQuY2xpZW50WCxcbiAgICAgIHkgPSBldmVudC5jbGllbnRZO1xuICB2YXIgaW50ZXJhY3RpdmVCb3JkZXIgPSBwcm9wcy5pbnRlcmFjdGl2ZUJvcmRlcixcbiAgICAgIGRpc3RhbmNlID0gcHJvcHMuZGlzdGFuY2U7XG4gIHZhciBleGNlZWRzVG9wID0gcG9wcGVyUmVjdC50b3AgLSB5ID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ3RvcCcgPyBpbnRlcmFjdGl2ZUJvcmRlciArIGRpc3RhbmNlIDogaW50ZXJhY3RpdmVCb3JkZXIpO1xuICB2YXIgZXhjZWVkc0JvdHRvbSA9IHkgLSBwb3BwZXJSZWN0LmJvdHRvbSA+IChwb3BwZXJQbGFjZW1lbnQgPT09ICdib3R0b20nID8gaW50ZXJhY3RpdmVCb3JkZXIgKyBkaXN0YW5jZSA6IGludGVyYWN0aXZlQm9yZGVyKTtcbiAgdmFyIGV4Y2VlZHNMZWZ0ID0gcG9wcGVyUmVjdC5sZWZ0IC0geCA+IChwb3BwZXJQbGFjZW1lbnQgPT09ICdsZWZ0JyA/IGludGVyYWN0aXZlQm9yZGVyICsgZGlzdGFuY2UgOiBpbnRlcmFjdGl2ZUJvcmRlcik7XG4gIHZhciBleGNlZWRzUmlnaHQgPSB4IC0gcG9wcGVyUmVjdC5yaWdodCA+IChwb3BwZXJQbGFjZW1lbnQgPT09ICdyaWdodCcgPyBpbnRlcmFjdGl2ZUJvcmRlciArIGRpc3RhbmNlIDogaW50ZXJhY3RpdmVCb3JkZXIpO1xuICByZXR1cm4gZXhjZWVkc1RvcCB8fCBleGNlZWRzQm90dG9tIHx8IGV4Y2VlZHNMZWZ0IHx8IGV4Y2VlZHNSaWdodDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZGlzdGFuY2Ugb2Zmc2V0LCB0YWtpbmcgaW50byBhY2NvdW50IHRoZSBkZWZhdWx0IG9mZnNldCBkdWUgdG9cbiAqIHRoZSB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgpIHJ1bGUgKDEwcHgpIGluIENTU1xuICogQHBhcmFtIHtOdW1iZXJ9IGRpc3RhbmNlXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0RGlzdGFuY2VJblB4KGRpc3RhbmNlKSB7XG4gIHJldHVybiAtKGRpc3RhbmNlIC0gMTApICsgJ3B4Jztcbn1cblxudmFyIFBBU1NJVkUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG52YXIgUEFERElORyA9IDQ7XG5cbnZhciBpc1VzaW5nVG91Y2ggPSBmYWxzZTtcbmZ1bmN0aW9uIG9uRG9jdW1lbnRUb3VjaCgpIHtcbiAgaWYgKGlzVXNpbmdUb3VjaCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlzVXNpbmdUb3VjaCA9IHRydWU7XG5cbiAgaWYgKGlzSU9TKSB7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCd0aXBweS1pT1MnKTtcbiAgfVxuXG4gIGlmICh3aW5kb3cucGVyZm9ybWFuY2UpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkRvY3VtZW50TW91c2VNb3ZlKTtcbiAgfVxufVxudmFyIGxhc3RNb3VzZU1vdmVUaW1lID0gMDtcbmZ1bmN0aW9uIG9uRG9jdW1lbnRNb3VzZU1vdmUoKSB7XG4gIHZhciBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTsgLy8gQ2hyb21lIDYwKyBpcyAxIG1vdXNlbW92ZSBwZXIgYW5pbWF0aW9uIGZyYW1lLCB1c2UgMjBtcyB0aW1lIGRpZmZlcmVuY2VcblxuICBpZiAobm93IC0gbGFzdE1vdXNlTW92ZVRpbWUgPCAyMCkge1xuICAgIGlzVXNpbmdUb3VjaCA9IGZhbHNlO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpO1xuXG4gICAgaWYgKCFpc0lPUykge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCd0aXBweS1pT1MnKTtcbiAgICB9XG4gIH1cblxuICBsYXN0TW91c2VNb3ZlVGltZSA9IG5vdztcbn1cbmZ1bmN0aW9uIG9uRG9jdW1lbnRDbGljayhfcmVmKSB7XG4gIHZhciB0YXJnZXQgPSBfcmVmLnRhcmdldDtcblxuICAvLyBTaW11bGF0ZWQgZXZlbnRzIGRpc3BhdGNoZWQgb24gdGhlIGRvY3VtZW50XG4gIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGhpZGVBbGwoKTtcbiAgfSAvLyBDbGlja2VkIG9uIGFuIGludGVyYWN0aXZlIHBvcHBlclxuXG5cbiAgdmFyIHBvcHBlciA9IGNsb3Nlc3QodGFyZ2V0LCBTZWxlY3RvcnMuUE9QUEVSKTsgLy8gQHRzLWlnbm9yZVxuXG4gIGlmIChwb3BwZXIgJiYgcG9wcGVyLl90aXBweSAmJiBwb3BwZXIuX3RpcHB5LnByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENsaWNrZWQgb24gYSByZWZlcmVuY2VcblxuXG4gIHZhciByZWZlcmVuY2UgPSBjbG9zZXN0Q2FsbGJhY2sodGFyZ2V0LCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50Ll90aXBweSAmJiBlbGVtZW50Ll90aXBweS5yZWZlcmVuY2UgPT09IGVsZW1lbnQ7XG4gIH0pO1xuXG4gIGlmIChyZWZlcmVuY2UpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIGluc3RhbmNlID0gcmVmZXJlbmNlLl90aXBweTtcbiAgICB2YXIgaXNDbGlja1RyaWdnZXIgPSBpbmNsdWRlcyhpbnN0YW5jZS5wcm9wcy50cmlnZ2VyLCAnY2xpY2snKTtcblxuICAgIGlmIChpc1VzaW5nVG91Y2ggfHwgaXNDbGlja1RyaWdnZXIpIHtcbiAgICAgIHJldHVybiBoaWRlQWxsKHtcbiAgICAgICAgZXhjbHVkZTogaW5zdGFuY2UsXG4gICAgICAgIGNoZWNrSGlkZU9uQ2xpY2s6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayAhPT0gdHJ1ZSB8fCBpc0NsaWNrVHJpZ2dlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLmNsZWFyRGVsYXlUaW1lb3V0cygpO1xuICB9XG5cbiAgaGlkZUFsbCh7XG4gICAgY2hlY2tIaWRlT25DbGljazogdHJ1ZVxuICB9KTtcbn1cbmZ1bmN0aW9uIG9uV2luZG93Qmx1cigpIHtcbiAgdmFyIF9kb2N1bWVudCA9IGRvY3VtZW50LFxuICAgICAgYWN0aXZlRWxlbWVudCA9IF9kb2N1bWVudC5hY3RpdmVFbGVtZW50OyAvLyBAdHMtaWdub3JlXG5cbiAgaWYgKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC5ibHVyICYmIGFjdGl2ZUVsZW1lbnQuX3RpcHB5KSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG59XG4vKipcbiAqIEFkZHMgdGhlIG5lZWRlZCBnbG9iYWwgZXZlbnQgbGlzdGVuZXJzXG4gKi9cblxuZnVuY3Rpb24gYmluZEdsb2JhbEV2ZW50TGlzdGVuZXJzKCkge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uRG9jdW1lbnRDbGljaywgdHJ1ZSk7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkRvY3VtZW50VG91Y2gsIFBBU1NJVkUpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uV2luZG93Qmx1cik7XG59XG5cbnZhciBrZXlzID0gT2JqZWN0LmtleXMoRGVmYXVsdHMpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBvcHRpb25hbCBwcm9wcyBmcm9tIGRhdGEtdGlwcHktKiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGdldERhdGFBdHRyaWJ1dGVPcHRpb25zKHJlZmVyZW5jZSkge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgdmFyIHZhbHVlQXNTdHJpbmcgPSAocmVmZXJlbmNlLmdldEF0dHJpYnV0ZShcImRhdGEtdGlwcHktXCIuY29uY2F0KGtleSkpIHx8ICcnKS50cmltKCk7XG5cbiAgICBpZiAoIXZhbHVlQXNTdHJpbmcpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBhY2Nba2V5XSA9IHZhbHVlQXNTdHJpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGFjY1trZXldID0gSlNPTi5wYXJzZSh2YWx1ZUFzU3RyaW5nKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgYWNjW2tleV0gPSB2YWx1ZUFzU3RyaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbi8qKlxuICogUG9seWZpbGxzIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSAocGxhaW4gb2JqZWN0KSB3aXRoIEVsZW1lbnQucHJvdG90eXBlIHByb3BzXG4gKiBNdXRhdGluZyBiZWNhdXNlIERPTSBlbGVtZW50cyBhcmUgbXV0YXRlZCwgYWRkcyBgX3RpcHB5YCBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IHZpcnR1YWxSZWZlcmVuY2VcbiAqL1xuXG5mdW5jdGlvbiBwb2x5ZmlsbEVsZW1lbnRQcm90b3R5cGVQcm9wZXJ0aWVzKHZpcnR1YWxSZWZlcmVuY2UpIHtcbiAgdmFyIHBvbHlmaWxscyA9IHtcbiAgICBpc1ZpcnR1YWw6IHRydWUsXG4gICAgYXR0cmlidXRlczogdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzIHx8IHt9LFxuICAgIHNldEF0dHJpYnV0ZTogZnVuY3Rpb24gc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpIHtcbiAgICAgIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlc1trZXldID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZShrZXkpIHtcbiAgICAgIHJldHVybiB2aXJ0dWFsUmVmZXJlbmNlLmF0dHJpYnV0ZXNba2V5XTtcbiAgICB9LFxuICAgIHJlbW92ZUF0dHJpYnV0ZTogZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlKGtleSkge1xuICAgICAgZGVsZXRlIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlc1trZXldO1xuICAgIH0sXG4gICAgaGFzQXR0cmlidXRlOiBmdW5jdGlvbiBoYXNBdHRyaWJ1dGUoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5IGluIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlcztcbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gICAgY2xhc3NMaXN0OiB7XG4gICAgICBjbGFzc05hbWVzOiB7fSxcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKGtleSkge1xuICAgICAgICB2aXJ0dWFsUmVmZXJlbmNlLmNsYXNzTGlzdC5jbGFzc05hbWVzW2tleV0gPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGtleSkge1xuICAgICAgICBkZWxldGUgdmlydHVhbFJlZmVyZW5jZS5jbGFzc0xpc3QuY2xhc3NOYW1lc1trZXldO1xuICAgICAgfSxcbiAgICAgIGNvbnRhaW5zOiBmdW5jdGlvbiBjb250YWlucyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSBpbiB2aXJ0dWFsUmVmZXJlbmNlLmNsYXNzTGlzdC5jbGFzc05hbWVzO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcG9seWZpbGxzKSB7XG4gICAgdmlydHVhbFJlZmVyZW5jZVtrZXldID0gcG9seWZpbGxzW2tleV07XG4gIH1cbn1cblxuLyoqXG4gKiBFdmFsdWF0ZXMgdGhlIHByb3BzIG9iamVjdCBieSBtZXJnaW5nIGRhdGEgYXR0cmlidXRlcyBhbmRcbiAqIGRpc2FibGluZyBjb25mbGljdGluZyBvcHRpb25zIHdoZXJlIG5lY2Vzc2FyeVxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGV2YWx1YXRlUHJvcHMocmVmZXJlbmNlLCBwcm9wcykge1xuICB2YXIgb3V0ID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29udGVudDogZXZhbHVhdGVWYWx1ZShwcm9wcy5jb250ZW50LCBbcmVmZXJlbmNlXSlcbiAgfSwgcHJvcHMuaWdub3JlQXR0cmlidXRlcyA/IHt9IDogZ2V0RGF0YUF0dHJpYnV0ZU9wdGlvbnMocmVmZXJlbmNlKSk7XG5cbiAgaWYgKG91dC5hcnJvdyB8fCBpc1VDQnJvd3Nlcikge1xuICAgIG91dC5hbmltYXRlRmlsbCA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVmFsaWRhdGVzIGFuIG9iamVjdCBvZiBvcHRpb25zIHdpdGggdGhlIHZhbGlkIGRlZmF1bHQgcHJvcHMgb2JqZWN0XG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IGRlZmF1bHRzXG4gKi9cblxuZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBkZWZhdWx0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5KGRlZmF1bHRzLCBvcHRpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbdGlwcHldOiBgXCIuY29uY2F0KG9wdGlvbiwgXCJgIGlzIG5vdCBhIHZhbGlkIG9wdGlvblwiKSk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGlkQ291bnRlciA9IDE7XG4vKipcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBUaXBweSBvYmplY3QuIFdlJ3JlIHVzaW5nIGEgY2xvc3VyZSBwYXR0ZXJuIGluc3RlYWQgb2ZcbiAqIGEgY2xhc3Mgc28gdGhhdCB0aGUgZXhwb3NlZCBvYmplY3QgQVBJIGlzIGNsZWFuIHdpdGhvdXQgcHJpdmF0ZSBtZW1iZXJzXG4gKiBwcmVmaXhlZCB3aXRoIGBfYC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge09iamVjdH0gY29sbGVjdGlvblByb3BzXG4gKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlVGlwcHkocmVmZXJlbmNlLCBjb2xsZWN0aW9uUHJvcHMpIHtcbiAgdmFyIHByb3BzID0gZXZhbHVhdGVQcm9wcyhyZWZlcmVuY2UsIGNvbGxlY3Rpb25Qcm9wcyk7IC8vIElmIHRoZSByZWZlcmVuY2Ugc2hvdWxkbid0IGhhdmUgbXVsdGlwbGUgdGlwcHlzLCByZXR1cm4gbnVsbCBlYXJseVxuICAvLyBAdHMtaWdub3JlXG5cbiAgaWYgKCFwcm9wcy5tdWx0aXBsZSAmJiByZWZlcmVuY2UuX3RpcHB5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT0g8J+UkiBQcml2YXRlIG1lbWJlcnMg8J+UkiA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuICAvLyBUaGUgbGFzdCB0cmlnZ2VyIGV2ZW50IG9iamVjdCB0aGF0IGNhdXNlZCB0aGUgdGlwcHkgdG8gc2hvd1xuXG5cbiAgdmFyIGxhc3RUcmlnZ2VyRXZlbnQgPSB7fTsgLy8gVGhlIGxhc3QgbW91c2Vtb3ZlIGV2ZW50IG9iamVjdCBjcmVhdGVkIGJ5IHRoZSBkb2N1bWVudCBtb3VzZW1vdmUgZXZlbnRcblxuICB2YXIgbGFzdE1vdXNlTW92ZUV2ZW50ID0gbnVsbDsgLy8gVGltZW91dCBjcmVhdGVkIGJ5IHRoZSBzaG93IGRlbGF5XG5cbiAgdmFyIHNob3dUaW1lb3V0SWQgPSAwOyAvLyBUaW1lb3V0IGNyZWF0ZWQgYnkgdGhlIGhpZGUgZGVsYXlcblxuICB2YXIgaGlkZVRpbWVvdXRJZCA9IDA7IC8vIEZsYWcgdG8gZGV0ZXJtaW5lIGlmIHRoZSB0aXBweSBpcyBzY2hlZHVsZWQgdG8gc2hvdyBkdWUgdG8gdGhlIHNob3cgdGltZW91dFxuXG4gIHZhciBpc1NjaGVkdWxlZFRvU2hvdyA9IGZhbHNlOyAvLyBUaGUgY3VycmVudCBgdHJhbnNpdGlvbmVuZGAgY2FsbGJhY2sgcmVmZXJlbmNlXG5cbiAgdmFyIHRyYW5zaXRpb25FbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmRMaXN0ZW5lcigpIHt9OyAvLyBBcnJheSBvZiBldmVudCBsaXN0ZW5lcnMgY3VycmVudGx5IGF0dGFjaGVkIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuXG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdOyAvLyBQcml2YXRlIG9uTW91c2VNb3ZlIGhhbmRsZXIgcmVmZXJlbmNlLCBkZWJvdW5jZWQgb3Igbm90XG5cbiAgdmFyIGRlYm91bmNlZE9uTW91c2VNb3ZlID0gcHJvcHMuaW50ZXJhY3RpdmVEZWJvdW5jZSA+IDAgPyBkZWJvdW5jZShvbk1vdXNlTW92ZSwgcHJvcHMuaW50ZXJhY3RpdmVEZWJvdW5jZSkgOiBvbk1vdXNlTW92ZTsgLy8gTm9kZSB0aGUgdGlwcHkgaXMgY3VycmVudGx5IGFwcGVuZGVkIHRvXG5cbiAgdmFyIHBhcmVudE5vZGUgPSBudWxsO1xuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PSDwn5SRIFB1YmxpYyBtZW1iZXJzIPCflJEgPT09PT09PT09PT09PT09PT09PT09PT0gKi9cbiAgLy8gaWQgdXNlZCBmb3IgdGhlIGBhcmlhLWRlc2NyaWJlZGJ5YCAvIGBhcmlhLWxhYmVsbGVkYnlgIGF0dHJpYnV0ZVxuXG4gIHZhciBpZCA9IGlkQ291bnRlcisrOyAvLyBQb3BwZXIgZWxlbWVudCByZWZlcmVuY2VcblxuICB2YXIgcG9wcGVyID0gY3JlYXRlUG9wcGVyRWxlbWVudChpZCwgcHJvcHMpOyAvLyBQcmV2ZW50IGEgdGlwcHkgd2l0aCBhIGRlbGF5IGZyb20gaGlkaW5nIGlmIHRoZSBjdXJzb3IgbGVmdCB0aGVuIHJldHVybmVkXG4gIC8vIGJlZm9yZSBpdCBzdGFydGVkIGhpZGluZ1xuXG4gIHBvcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJiBsYXN0VHJpZ2dlckV2ZW50LnR5cGUgPT09ICdtb3VzZWVudGVyJykge1xuICAgICAgc2NoZWR1bGVTaG93KGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBwb3BwZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgbGFzdFRyaWdnZXJFdmVudC50eXBlID09PSAnbW91c2VlbnRlcicpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGRlYm91bmNlZE9uTW91c2VNb3ZlKTtcbiAgICB9XG4gIH0pOyAvLyBQb3BwZXIgZWxlbWVudCBjaGlsZHJlbjogeyBhcnJvdywgYmFja2Ryb3AsIGNvbnRlbnQsIHRvb2x0aXAgfVxuXG4gIHZhciBwb3BwZXJDaGlsZHJlbiA9IGdldENoaWxkcmVuKHBvcHBlcik7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICAvLyBJcyB0aGUgaW5zdGFuY2UgY3VycmVudGx5IGVuYWJsZWQ/XG4gICAgaXNFbmFibGVkOiB0cnVlLFxuICAgIC8vIElzIHRoZSB0aXBweSBjdXJyZW50bHkgc2hvd2luZyBhbmQgbm90IHRyYW5zaXRpb25pbmcgb3V0P1xuICAgIGlzVmlzaWJsZTogZmFsc2UsXG4gICAgLy8gSGFzIHRoZSBpbnN0YW5jZSBiZWVuIGRlc3Ryb3llZD9cbiAgICBpc0Rlc3Ryb3llZDogZmFsc2UsXG4gICAgLy8gSXMgdGhlIHRpcHB5IGN1cnJlbnRseSBtb3VudGVkIHRvIHRoZSBET00/XG4gICAgaXNNb3VudGVkOiBmYWxzZSxcbiAgICAvLyBIYXMgdGhlIHRpcHB5IGZpbmlzaGVkIHRyYW5zaXRpb25pbmcgaW4/XG4gICAgaXNTaG93bjogZmFsc2UgLy8gUG9wcGVyLmpzIGluc3RhbmNlIGZvciB0aGUgdGlwcHkgaXMgbGF6aWx5IGNyZWF0ZWRcblxuICB9O1xuICB2YXIgcG9wcGVySW5zdGFuY2UgPSBudWxsO1xuICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgLy8gcHJvcGVydGllc1xuICAgIGlkOiBpZCxcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgICBwb3BwZXI6IHBvcHBlcixcbiAgICBwb3BwZXJDaGlsZHJlbjogcG9wcGVyQ2hpbGRyZW4sXG4gICAgcG9wcGVySW5zdGFuY2U6IHBvcHBlckluc3RhbmNlLFxuICAgIHByb3BzOiBwcm9wcyxcbiAgICBzdGF0ZTogc3RhdGUsXG4gICAgLy8gbWV0aG9kc1xuICAgIGNsZWFyRGVsYXlUaW1lb3V0czogY2xlYXJEZWxheVRpbWVvdXRzLFxuICAgIHNldDogc2V0LFxuICAgIHNldENvbnRlbnQ6IHNldENvbnRlbnQkJDEsXG4gICAgc2hvdzogc2hvdyxcbiAgICBoaWRlOiBoaWRlLFxuICAgIGVuYWJsZTogZW5hYmxlLFxuICAgIGRpc2FibGU6IGRpc2FibGUsXG4gICAgZGVzdHJveTogZGVzdHJveVxuICB9O1xuICBhZGRUcmlnZ2Vyc1RvUmVmZXJlbmNlKCk7XG5cbiAgaWYgKCFwcm9wcy5sYXp5KSB7XG4gICAgY3JlYXRlUG9wcGVySW5zdGFuY2UoKTtcbiAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIGlmIChwcm9wcy5zaG93T25Jbml0KSB7XG4gICAgc2NoZWR1bGVTaG93KCk7XG4gIH0gLy8gRW5zdXJlIHRoZSByZWZlcmVuY2UgZWxlbWVudCBjYW4gcmVjZWl2ZSBmb2N1cyAoYW5kIGlzIG5vdCBhIGRlbGVnYXRlKVxuXG5cbiAgaWYgKHByb3BzLmExMXkgJiYgIXByb3BzLnRhcmdldCAmJiAhY2FuUmVjZWl2ZUZvY3VzKHJlZmVyZW5jZSkpIHtcbiAgICByZWZlcmVuY2Uuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG4gIH0gLy8gSW5zdGFsbCBzaG9ydGN1dHNcbiAgLy8gQHRzLWlnbm9yZVxuXG5cbiAgcmVmZXJlbmNlLl90aXBweSA9IGluc3RhbmNlOyAvLyBAdHMtaWdub3JlXG5cbiAgcG9wcGVyLl90aXBweSA9IGluc3RhbmNlO1xuICByZXR1cm4gaW5zdGFuY2U7XG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09IPCflJIgUHJpdmF0ZSBtZXRob2RzIPCflJIgPT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAvKipcbiAgICogUG9zaXRpb25zIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBuZWFyIHRoZSBjdXJzb3JcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudFxuICAgKi9cblxuICBmdW5jdGlvbiBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKGV2ZW50KSB7XG4gICAgdmFyIF9sYXN0TW91c2VNb3ZlRXZlbnQgPSBsYXN0TW91c2VNb3ZlRXZlbnQgPSBldmVudCxcbiAgICAgICAgY2xpZW50WCA9IF9sYXN0TW91c2VNb3ZlRXZlbnQuY2xpZW50WCxcbiAgICAgICAgY2xpZW50WSA9IF9sYXN0TW91c2VNb3ZlRXZlbnQuY2xpZW50WTtcblxuICAgIGlmICghaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEVuc3VyZSB2aXJ0dWFsIHJlZmVyZW5jZSBpcyBwYWRkZWQgdG8gcHJldmVudCB0b29sdGlwIGZyb21cbiAgICAvLyBvdmVyZmxvd2luZy4gTWF5YmUgUG9wcGVyLmpzIGlzc3VlP1xuXG5cbiAgICB2YXIgcGxhY2VtZW50ID0gZ2V0UG9wcGVyUGxhY2VtZW50KGluc3RhbmNlLnBvcHBlcik7XG4gICAgdmFyIHBhZGRpbmcgPSBpbnN0YW5jZS5wcm9wcy5hcnJvdyA/IFBBRERJTkcgKyAoaW5zdGFuY2UucHJvcHMuYXJyb3dUeXBlID09PSAncm91bmQnID8gMTggOiAxNikgOiBQQURESU5HO1xuICAgIHZhciBpc1ZlcnRpY2FsUGxhY2VtZW50ID0gaW5jbHVkZXMoWyd0b3AnLCAnYm90dG9tJ10sIHBsYWNlbWVudCk7XG4gICAgdmFyIGlzSG9yaXpvbnRhbFBsYWNlbWVudCA9IGluY2x1ZGVzKFsnbGVmdCcsICdyaWdodCddLCBwbGFjZW1lbnQpOyAvLyBUb3AgLyBsZWZ0IGJvdW5kYXJ5XG5cbiAgICB2YXIgeCA9IGlzVmVydGljYWxQbGFjZW1lbnQgPyBNYXRoLm1heChwYWRkaW5nLCBjbGllbnRYKSA6IGNsaWVudFg7XG4gICAgdmFyIHkgPSBpc0hvcml6b250YWxQbGFjZW1lbnQgPyBNYXRoLm1heChwYWRkaW5nLCBjbGllbnRZKSA6IGNsaWVudFk7IC8vIEJvdHRvbSAvIHJpZ2h0IGJvdW5kYXJ5XG5cbiAgICBpZiAoaXNWZXJ0aWNhbFBsYWNlbWVudCAmJiB4ID4gcGFkZGluZykge1xuICAgICAgeCA9IE1hdGgubWluKGNsaWVudFgsIHdpbmRvdy5pbm5lcldpZHRoIC0gcGFkZGluZyk7XG4gICAgfVxuXG4gICAgaWYgKGlzSG9yaXpvbnRhbFBsYWNlbWVudCAmJiB5ID4gcGFkZGluZykge1xuICAgICAgeSA9IE1hdGgubWluKGNsaWVudFksIHdpbmRvdy5pbm5lckhlaWdodCAtIHBhZGRpbmcpO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gaW5zdGFuY2UucmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBmb2xsb3dDdXJzb3IgPSBpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3I7XG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IGZvbGxvd0N1cnNvciA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciBpc1ZlcnRpY2FsID0gZm9sbG93Q3Vyc29yID09PSAndmVydGljYWwnO1xuICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnJlZmVyZW5jZSA9IHtcbiAgICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdDogZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICB0b3A6IGlzSG9yaXpvbnRhbCA/IHJlY3QudG9wIDogeSxcbiAgICAgICAgICBib3R0b206IGlzSG9yaXpvbnRhbCA/IHJlY3QuYm90dG9tIDogeSxcbiAgICAgICAgICBsZWZ0OiBpc1ZlcnRpY2FsID8gcmVjdC5sZWZ0IDogeCxcbiAgICAgICAgICByaWdodDogaXNWZXJ0aWNhbCA/IHJlY3QucmlnaHQgOiB4XG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgY2xpZW50V2lkdGg6IDAsXG4gICAgICBjbGllbnRIZWlnaHQ6IDBcbiAgICB9O1xuICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnNjaGVkdWxlVXBkYXRlKCk7XG5cbiAgICBpZiAoZm9sbG93Q3Vyc29yID09PSAnaW5pdGlhbCcgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICByZW1vdmVGb2xsb3dDdXJzb3JMaXN0ZW5lcigpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgdGlwcHkgaW5zdGFuY2UgZm9yIGEgZGVsZWdhdGUgd2hlbiBpdCdzIGJlZW4gdHJpZ2dlcmVkXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gY3JlYXRlRGVsZWdhdGVDaGlsZFRpcHB5KGV2ZW50KSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciB0YXJnZXRFbCA9IGNsb3Nlc3QoZXZlbnQudGFyZ2V0LCBpbnN0YW5jZS5wcm9wcy50YXJnZXQpOyAvLyBAdHMtaWdub3JlXG5cbiAgICBpZiAodGFyZ2V0RWwgJiYgIXRhcmdldEVsLl90aXBweSkge1xuICAgICAgY3JlYXRlVGlwcHkodGFyZ2V0RWwsIF9leHRlbmRzKHt9LCBpbnN0YW5jZS5wcm9wcywge1xuICAgICAgICBjb250ZW50OiBldmFsdWF0ZVZhbHVlKGNvbGxlY3Rpb25Qcm9wcy5jb250ZW50LCBbdGFyZ2V0RWxdKSxcbiAgICAgICAgYXBwZW5kVG86IGNvbGxlY3Rpb25Qcm9wcy5hcHBlbmRUbyxcbiAgICAgICAgdGFyZ2V0OiAnJyxcbiAgICAgICAgc2hvd09uSW5pdDogdHJ1ZVxuICAgICAgfSkpO1xuICAgICAgc2NoZWR1bGVTaG93KGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldHVwIGJlZm9yZSBzaG93KCkgaXMgaW52b2tlZCAoZGVsYXlzLCBldGMuKVxuICAgKiBAcGFyYW0ge0V2ZW50fSBbZXZlbnRdXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVTaG93KGV2ZW50KSB7XG4gICAgY2xlYXJEZWxheVRpbWVvdXRzKCk7XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJcyBhIGRlbGVnYXRlLCBjcmVhdGUgYW4gaW5zdGFuY2UgZm9yIHRoZSBjaGlsZCB0YXJnZXRcblxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnRhcmdldCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZURlbGVnYXRlQ2hpbGRUaXBweShldmVudCk7XG4gICAgfVxuXG4gICAgaXNTY2hlZHVsZWRUb1Nob3cgPSB0cnVlO1xuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLndhaXQpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5wcm9wcy53YWl0KGluc3RhbmNlLCBldmVudCk7XG4gICAgfSAvLyBJZiB0aGUgdG9vbHRpcCBoYXMgYSBkZWxheSwgd2UgbmVlZCB0byBiZSBsaXN0ZW5pbmcgdG8gdGhlIG1vdXNlbW92ZSBhc1xuICAgIC8vIHNvb24gYXMgdGhlIHRyaWdnZXIgZXZlbnQgaXMgZmlyZWQsIHNvIHRoYXQgaXQncyBpbiB0aGUgY29ycmVjdCBwb3NpdGlvblxuICAgIC8vIHVwb24gbW91bnQuXG4gICAgLy8gRWRnZSBjYXNlOiBpZiB0aGUgdG9vbHRpcCBpcyBzdGlsbCBtb3VudGVkLCBidXQgdGhlbiBzY2hlZHVsZVNob3coKSBpc1xuICAgIC8vIGNhbGxlZCwgaXQgY2F1c2VzIGEganVtcC5cblxuXG4gICAgaWYgKGhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkgJiYgIWluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgcG9zaXRpb25WaXJ0dWFsUmVmZXJlbmNlTmVhckN1cnNvcik7XG4gICAgfVxuXG4gICAgdmFyIGRlbGF5ID0gZ2V0VmFsdWUoaW5zdGFuY2UucHJvcHMuZGVsYXksIDAsIERlZmF1bHRzLmRlbGF5KTtcblxuICAgIGlmIChkZWxheSkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgc2hvd1RpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzaG93KCk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3coKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldHVwIGJlZm9yZSBoaWRlKCkgaXMgaW52b2tlZCAoZGVsYXlzLCBldGMuKVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlSGlkZSgpIHtcbiAgICBjbGVhckRlbGF5VGltZW91dHMoKTtcblxuICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm4gcmVtb3ZlRm9sbG93Q3Vyc29yTGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICBpc1NjaGVkdWxlZFRvU2hvdyA9IGZhbHNlO1xuICAgIHZhciBkZWxheSA9IGdldFZhbHVlKGluc3RhbmNlLnByb3BzLmRlbGF5LCAxLCBEZWZhdWx0cy5kZWxheSk7XG5cbiAgICBpZiAoZGVsYXkpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGhpZGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaWRlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBmb2xsb3cgY3Vyc29yIGxpc3RlbmVyXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVtb3ZlRm9sbG93Q3Vyc29yTGlzdGVuZXIoKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgcG9zaXRpb25WaXJ0dWFsUmVmZXJlbmNlTmVhckN1cnNvcik7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFucyB1cCBvbGQgbGlzdGVuZXJzXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gY2xlYW51cE9sZE1vdXNlTGlzdGVuZXJzKCkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHNjaGVkdWxlSGlkZSk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICB9XG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lciBpbnZva2VkIHVwb24gdHJpZ2dlclxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uVHJpZ2dlcihldmVudCkge1xuICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkIHx8IGlzRXZlbnRMaXN0ZW5lclN0b3BwZWQoZXZlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIGxhc3RUcmlnZ2VyRXZlbnQgPSBldmVudDtcblxuICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTW91c2VFdmVudCkge1xuICAgICAgICBsYXN0TW91c2VNb3ZlRXZlbnQgPSBldmVudDtcbiAgICAgIH1cbiAgICB9IC8vIFRvZ2dsZSBzaG93L2hpZGUgd2hlbiBjbGlja2luZyBjbGljay10cmlnZ2VyZWQgdG9vbHRpcHNcblxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgaW5zdGFuY2UucHJvcHMuaGlkZU9uQ2xpY2sgIT09IGZhbHNlICYmIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgc2NoZWR1bGVIaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVkdWxlU2hvdyhldmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lciB1c2VkIGZvciBpbnRlcmFjdGl2ZSB0b29sdGlwcyB0byBkZXRlY3Qgd2hlbiB0aGV5IHNob3VsZFxuICAgKiBoaWRlXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbk1vdXNlTW92ZShldmVudCkge1xuICAgIHZhciByZWZlcmVuY2VUaGVDdXJzb3JJc092ZXIgPSBjbG9zZXN0Q2FsbGJhY2soIC8vIEB0cy1pZ25vcmVcbiAgICBldmVudC50YXJnZXQsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGVsLl90aXBweTtcbiAgICB9KTtcbiAgICB2YXIgaXNDdXJzb3JPdmVyUG9wcGVyID0gLy8gQHRzLWlnbm9yZVxuICAgIGNsb3Nlc3QoZXZlbnQudGFyZ2V0LCBTZWxlY3RvcnMuUE9QUEVSKSA9PT0gaW5zdGFuY2UucG9wcGVyO1xuICAgIHZhciBpc0N1cnNvck92ZXJSZWZlcmVuY2UgPSByZWZlcmVuY2VUaGVDdXJzb3JJc092ZXIgPT09IGluc3RhbmNlLnJlZmVyZW5jZTtcblxuICAgIGlmIChpc0N1cnNvck92ZXJQb3BwZXIgfHwgaXNDdXJzb3JPdmVyUmVmZXJlbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzQ3Vyc29yT3V0c2lkZUludGVyYWN0aXZlQm9yZGVyKGdldFBvcHBlclBsYWNlbWVudChpbnN0YW5jZS5wb3BwZXIpLCBpbnN0YW5jZS5wb3BwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGV2ZW50LCBpbnN0YW5jZS5wcm9wcykpIHtcbiAgICAgIGNsZWFudXBPbGRNb3VzZUxpc3RlbmVycygpO1xuICAgICAgc2NoZWR1bGVIaWRlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lciBpbnZva2VkIHVwb24gbW91c2VsZWF2ZVxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25Nb3VzZUxlYXZlKGV2ZW50KSB7XG4gICAgaWYgKGlzRXZlbnRMaXN0ZW5lclN0b3BwZWQoZXZlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBzY2hlZHVsZUhpZGUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNjaGVkdWxlSGlkZSgpO1xuICB9XG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lciBpbnZva2VkIHVwb24gYmx1clxuICAgKiBAcGFyYW0ge0ZvY3VzRXZlbnR9IGV2ZW50XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25CbHVyKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gaW5zdGFuY2UucmVmZXJlbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIGV2ZW50LnJlbGF0ZWRUYXJnZXQgJiYgLy8gQHRzLWlnbm9yZVxuICAgIGluc3RhbmNlLnBvcHBlci5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNjaGVkdWxlSGlkZSgpO1xuICB9XG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lciBpbnZva2VkIHdoZW4gYSBjaGlsZCB0YXJnZXQgaXMgdHJpZ2dlcmVkXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25EZWxlZ2F0ZVNob3coZXZlbnQpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKGNsb3Nlc3QoZXZlbnQudGFyZ2V0LCBpbnN0YW5jZS5wcm9wcy50YXJnZXQpKSB7XG4gICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXZlbnQgbGlzdGVuZXIgaW52b2tlZCB3aGVuIGEgY2hpbGQgdGFyZ2V0IHNob3VsZCBoaWRlXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25EZWxlZ2F0ZUhpZGUoZXZlbnQpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKGNsb3Nlc3QoZXZlbnQudGFyZ2V0LCBpbnN0YW5jZS5wcm9wcy50YXJnZXQpKSB7XG4gICAgICBzY2hlZHVsZUhpZGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgYW4gZXZlbnQgbGlzdGVuZXIgc2hvdWxkIHN0b3AgZnVydGhlciBleGVjdXRpb24gZHVlIHRvIHRoZVxuICAgKiBgdG91Y2hIb2xkYCBvcHRpb25cbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBpc0V2ZW50TGlzdGVuZXJTdG9wcGVkKGV2ZW50KSB7XG4gICAgdmFyIHN1cHBvcnRzVG91Y2ggPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3c7XG4gICAgdmFyIGlzVG91Y2hFdmVudCA9IGluY2x1ZGVzKGV2ZW50LnR5cGUsICd0b3VjaCcpO1xuICAgIHZhciB0b3VjaEhvbGQgPSBpbnN0YW5jZS5wcm9wcy50b3VjaEhvbGQ7XG4gICAgcmV0dXJuIHN1cHBvcnRzVG91Y2ggJiYgaXNVc2luZ1RvdWNoICYmIHRvdWNoSG9sZCAmJiAhaXNUb3VjaEV2ZW50IHx8IGlzVXNpbmdUb3VjaCAmJiAhdG91Y2hIb2xkICYmIGlzVG91Y2hFdmVudDtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgcG9wcGVyIGluc3RhbmNlIGZvciB0aGUgaW5zdGFuY2VcbiAgICovXG5cblxuICBmdW5jdGlvbiBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpIHtcbiAgICB2YXIgcG9wcGVyT3B0aW9ucyA9IGluc3RhbmNlLnByb3BzLnBvcHBlck9wdGlvbnM7XG4gICAgdmFyIF9pbnN0YW5jZSRwb3BwZXJDaGlsZCA9IGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLFxuICAgICAgICB0b29sdGlwID0gX2luc3RhbmNlJHBvcHBlckNoaWxkLnRvb2x0aXAsXG4gICAgICAgIGFycm93ID0gX2luc3RhbmNlJHBvcHBlckNoaWxkLmFycm93O1xuICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlID0gbmV3IFBvcHBlcihpbnN0YW5jZS5yZWZlcmVuY2UsIGluc3RhbmNlLnBvcHBlciwgX2V4dGVuZHMoe1xuICAgICAgcGxhY2VtZW50OiBpbnN0YW5jZS5wcm9wcy5wbGFjZW1lbnRcbiAgICB9LCBwb3BwZXJPcHRpb25zLCB7XG4gICAgICBtb2RpZmllcnM6IF9leHRlbmRzKHt9LCBwb3BwZXJPcHRpb25zID8gcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMgOiB7fSwge1xuICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IF9leHRlbmRzKHtcbiAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogaW5zdGFuY2UucHJvcHMuYm91bmRhcnksXG4gICAgICAgICAgcGFkZGluZzogUEFERElOR1xuICAgICAgICB9LCBnZXRNb2RpZmllcihwb3BwZXJPcHRpb25zLCAncHJldmVudE92ZXJmbG93JykpLFxuICAgICAgICBhcnJvdzogX2V4dGVuZHMoe1xuICAgICAgICAgIGVsZW1lbnQ6IGFycm93LFxuICAgICAgICAgIGVuYWJsZWQ6ICEhYXJyb3dcbiAgICAgICAgfSwgZ2V0TW9kaWZpZXIocG9wcGVyT3B0aW9ucywgJ2Fycm93JykpLFxuICAgICAgICBmbGlwOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgZW5hYmxlZDogaW5zdGFuY2UucHJvcHMuZmxpcCxcbiAgICAgICAgICAvLyBUaGUgdG9vbHRpcCBpcyBvZmZzZXQgYnkgMTBweCBmcm9tIHRoZSBwb3BwZXIgaW4gQ1NTLFxuICAgICAgICAgIC8vIHdlIG5lZWQgdG8gYWNjb3VudCBmb3IgaXRzIGRpc3RhbmNlXG4gICAgICAgICAgcGFkZGluZzogaW5zdGFuY2UucHJvcHMuZGlzdGFuY2UgKyBQQURESU5HLFxuICAgICAgICAgIGJlaGF2aW9yOiBpbnN0YW5jZS5wcm9wcy5mbGlwQmVoYXZpb3JcbiAgICAgICAgfSwgZ2V0TW9kaWZpZXIocG9wcGVyT3B0aW9ucywgJ2ZsaXAnKSksXG4gICAgICAgIG9mZnNldDogX2V4dGVuZHMoe1xuICAgICAgICAgIG9mZnNldDogaW5zdGFuY2UucHJvcHMub2Zmc2V0XG4gICAgICAgIH0sIGdldE1vZGlmaWVyKHBvcHBlck9wdGlvbnMsICdvZmZzZXQnKSlcbiAgICAgIH0pLFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmZsaXAgJiYgIWluc3RhbmNlLnByb3BzLmZsaXBPblVwZGF0ZSkge1xuICAgICAgICAgIGlmIChkYXRhLmZsaXBwZWQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLm9wdGlvbnMucGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2V0RmxpcE1vZGlmaWVyRW5hYmxlZChpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5tb2RpZmllcnMsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0UG9wcGVyUGxhY2VtZW50KGluc3RhbmNlLnBvcHBlcik7XG4gICAgICAgIHZhciBzdHlsZXMgPSB0b29sdGlwLnN0eWxlOyAvLyBBY2NvdW50IGZvciB0aGUgYGRpc3RhbmNlYCBvZmZzZXRcblxuICAgICAgICBzdHlsZXMudG9wID0gJyc7XG4gICAgICAgIHN0eWxlcy5ib3R0b20gPSAnJztcbiAgICAgICAgc3R5bGVzLmxlZnQgPSAnJztcbiAgICAgICAgc3R5bGVzLnJpZ2h0ID0gJyc7XG4gICAgICAgIHN0eWxlc1tiYXNlUGxhY2VtZW50XSA9IGdldE9mZnNldERpc3RhbmNlSW5QeChpbnN0YW5jZS5wcm9wcy5kaXN0YW5jZSk7IC8vIEF2b2lkIF9kZWZpbmVQcm9wZXJ0eSBoZWxwZXIgZnVuY3Rpb24gY3JlYXRlZCBieSBCYWJlbFxuXG4gICAgICAgIHZhciBwYWRkaW5nID0ge1xuICAgICAgICAgIHRvcDogUEFERElORyxcbiAgICAgICAgICBib3R0b206IFBBRERJTkcsXG4gICAgICAgICAgbGVmdDogUEFERElORyxcbiAgICAgICAgICByaWdodDogUEFERElOR1xuICAgICAgICB9O1xuICAgICAgICBwYWRkaW5nW2Jhc2VQbGFjZW1lbnRdID0gUEFERElORyArIGluc3RhbmNlLnByb3BzLmRpc3RhbmNlO1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5tb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0ubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gICAgICAgIH0pWzBdLnBhZGRpbmcgPSBwYWRkaW5nO1xuXG4gICAgICAgIGlmIChwb3BwZXJPcHRpb25zICYmIHBvcHBlck9wdGlvbnMub25VcGRhdGUpIHtcbiAgICAgICAgICBwb3BwZXJPcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkpO1xuICB9XG4gIC8qKlxuICAgKiBNb3VudHMgdGhlIHRvb2x0aXAgdG8gdGhlIERPTSwgY2FsbGJhY2sgdG8gc2hvdyB0b29sdGlwIGlzIHJ1biAqKmFmdGVyKipcbiAgICogcG9wcGVyJ3MgcG9zaXRpb24gaGFzIHVwZGF0ZWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG5cblxuICBmdW5jdGlvbiBtb3VudChjYWxsYmFjaykge1xuICAgIHZhciBzaG91bGRFbmFibGVMaXN0ZW5lcnMgPSAhaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSAmJiAhKGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciA9PT0gJ2luaXRpYWwnICYmIGlzVXNpbmdUb3VjaCk7XG5cbiAgICBpZiAoIWluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuXG4gICAgICBpZiAoIXNob3VsZEVuYWJsZUxpc3RlbmVycykge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFoYXNGb2xsb3dDdXJzb3JCZWhhdmlvcigpKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnNjaGVkdWxlVXBkYXRlKCk7XG5cbiAgICAgICAgaWYgKHNob3VsZEVuYWJsZUxpc3RlbmVycykge1xuICAgICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2V0RmxpcE1vZGlmaWVyRW5hYmxlZChpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5tb2RpZmllcnMsIGluc3RhbmNlLnByb3BzLmZsaXApO1xuICAgIH0gLy8gSWYgdGhlIGluc3RhbmNlIHByZXZpb3VzbHkgaGFkIGZvbGxvd0N1cnNvciBiZWhhdmlvciwgaXQgd2lsbCBiZVxuICAgIC8vIHBvc2l0aW9uZWQgaW5jb3JyZWN0bHkgaWYgdHJpZ2dlcmVkIGJ5IGBmb2N1c2AgYWZ0ZXJ3YXJkcy5cbiAgICAvLyBVcGRhdGUgdGhlIHJlZmVyZW5jZSBiYWNrIHRvIHRoZSByZWFsIERPTSBlbGVtZW50XG5cblxuICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnJlZmVyZW5jZSA9IGluc3RhbmNlLnJlZmVyZW5jZTtcbiAgICB2YXIgYXJyb3cgPSBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi5hcnJvdztcblxuICAgIGlmIChoYXNGb2xsb3dDdXJzb3JCZWhhdmlvcigpKSB7XG4gICAgICBpZiAoYXJyb3cpIHtcbiAgICAgICAgYXJyb3cuc3R5bGUubWFyZ2luID0gJzAnO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVsYXkgPSBnZXRWYWx1ZShpbnN0YW5jZS5wcm9wcy5kZWxheSwgMCwgRGVmYXVsdHMuZGVsYXkpO1xuXG4gICAgICBpZiAobGFzdFRyaWdnZXJFdmVudC50eXBlKSB7XG4gICAgICAgIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IoZGVsYXkgJiYgbGFzdE1vdXNlTW92ZUV2ZW50ID8gbGFzdE1vdXNlTW92ZUV2ZW50IDogbGFzdFRyaWdnZXJFdmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcnJvdykge1xuICAgICAgYXJyb3cuc3R5bGUubWFyZ2luID0gJyc7XG4gICAgfSAvLyBBbGxvdyBmb2xsb3dDdXJzb3I6ICdpbml0aWFsJyBvbiB0b3VjaCBkZXZpY2VzXG5cblxuICAgIGlmIChpc1VzaW5nVG91Y2ggJiYgbGFzdE1vdXNlTW92ZUV2ZW50ICYmIGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKGxhc3RNb3VzZU1vdmVFdmVudCk7XG5cbiAgICAgIGlmIChhcnJvdykge1xuICAgICAgICBhcnJvdy5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWZ0ZXJQb3BwZXJQb3NpdGlvblVwZGF0ZXMoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UsIGNhbGxiYWNrKTtcbiAgICB2YXIgYXBwZW5kVG8gPSBpbnN0YW5jZS5wcm9wcy5hcHBlbmRUbztcbiAgICBwYXJlbnROb2RlID0gYXBwZW5kVG8gPT09ICdwYXJlbnQnID8gaW5zdGFuY2UucmVmZXJlbmNlLnBhcmVudE5vZGUgOiBldmFsdWF0ZVZhbHVlKGFwcGVuZFRvLCBbaW5zdGFuY2UucmVmZXJlbmNlXSk7XG5cbiAgICBpZiAoIXBhcmVudE5vZGUuY29udGFpbnMoaW5zdGFuY2UucG9wcGVyKSkge1xuICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChpbnN0YW5jZS5wb3BwZXIpO1xuICAgICAgaW5zdGFuY2UucHJvcHMub25Nb3VudChpbnN0YW5jZSk7XG4gICAgICBpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgaW5zdGFuY2UgaXMgaW4gYGZvbGxvd0N1cnNvcmAgbW9kZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkge1xuICAgIHJldHVybiBpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IgJiYgIWlzVXNpbmdUb3VjaCAmJiBsYXN0VHJpZ2dlckV2ZW50LnR5cGUgIT09ICdmb2N1cyc7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHRvb2x0aXAncyBwb3NpdGlvbiBvbiBlYWNoIGFuaW1hdGlvbiBmcmFtZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG1ha2VTdGlja3koKSB7XG4gICAgYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24oW2luc3RhbmNlLnBvcHBlcl0sIGlzSUUgPyAwIDogaW5zdGFuY2UucHJvcHMudXBkYXRlRHVyYXRpb24pO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgICBpZiAoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlUG9zaXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24oW2luc3RhbmNlLnBvcHBlcl0sIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZVBvc2l0aW9uKCk7XG4gIH1cbiAgLyoqXG4gICAqIEludm9rZXMgYSBjYWxsYmFjayBvbmNlIHRoZSB0b29sdGlwIGhhcyBmdWxseSB0cmFuc2l0aW9uZWQgb3V0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbmVkT3V0KGR1cmF0aW9uLCBjYWxsYmFjaykge1xuICAgIG9uVHJhbnNpdGlvbkVuZChkdXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgJiYgcGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmNvbnRhaW5zKGluc3RhbmNlLnBvcHBlcikpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW52b2tlcyBhIGNhbGxiYWNrIG9uY2UgdGhlIHRvb2x0aXAgaGFzIGZ1bGx5IHRyYW5zaXRpb25lZCBpblxuICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG5cblxuICBmdW5jdGlvbiBvblRyYW5zaXRpb25lZEluKGR1cmF0aW9uLCBjYWxsYmFjaykge1xuICAgIG9uVHJhbnNpdGlvbkVuZChkdXJhdGlvbiwgY2FsbGJhY2spO1xuICB9XG4gIC8qKlxuICAgKiBJbnZva2VzIGEgY2FsbGJhY2sgb25jZSB0aGUgdG9vbHRpcCdzIENTUyB0cmFuc2l0aW9uIGVuZHNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8qKlxuICAgICAqIExpc3RlbmVyIGFkZGVkIGFzIHRoZSBgdHJhbnNpdGlvbmVuZGAgaGFuZGxlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0b29sdGlwKSB7XG4gICAgICAgIHRvZ2dsZVRyYW5zaXRpb25FbmRMaXN0ZW5lcih0b29sdGlwLCAncmVtb3ZlJywgbGlzdGVuZXIpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0gLy8gTWFrZSBjYWxsYmFjayBzeW5jaHJvbm91cyBpZiBkdXJhdGlvbiBpcyAwXG4gICAgLy8gYHRyYW5zaXRpb25lbmRgIHdvbid0IGZpcmUgb3RoZXJ3aXNlXG5cblxuICAgIGlmIChkdXJhdGlvbiA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgdmFyIHRvb2x0aXAgPSBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi50b29sdGlwO1xuICAgIHRvZ2dsZVRyYW5zaXRpb25FbmRMaXN0ZW5lcih0b29sdGlwLCAncmVtb3ZlJywgdHJhbnNpdGlvbkVuZExpc3RlbmVyKTtcbiAgICB0b2dnbGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIodG9vbHRpcCwgJ2FkZCcsIGxpc3RlbmVyKTtcbiAgICB0cmFuc2l0aW9uRW5kTGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byB0aGUgcmVmZXJlbmNlIGFuZCBzdG9yZXMgaXQgaW4gYGxpc3RlbmVyc2BcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50VHlwZVxuICAgKiBAcGFyYW0ge0V2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3R9IGhhbmRsZXJcbiAgICogQHBhcmFtIHtPYmplY3R8Qm9vbGVhbn0gb3B0aW9uc1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uKGV2ZW50VHlwZSwgaGFuZGxlcikge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgICBpbnN0YW5jZS5yZWZlcmVuY2UuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIGxpc3RlbmVycy5wdXNoKHtcbiAgICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlLFxuICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIHJlZmVyZW5jZSBiYXNlZCBvbiB0aGUgYHRyaWdnZXJgIHByb3BcbiAgICovXG5cblxuICBmdW5jdGlvbiBhZGRUcmlnZ2Vyc1RvUmVmZXJlbmNlKCkge1xuICAgIGlmIChpbnN0YW5jZS5wcm9wcy50b3VjaEhvbGQgJiYgIWluc3RhbmNlLnByb3BzLnRhcmdldCkge1xuICAgICAgb24oJ3RvdWNoc3RhcnQnLCBvblRyaWdnZXIsIFBBU1NJVkUpO1xuICAgICAgb24oJ3RvdWNoZW5kJywgb25Nb3VzZUxlYXZlLCBQQVNTSVZFKTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5wcm9wcy50cmlnZ2VyLnRyaW0oKS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50VHlwZSkge1xuICAgICAgaWYgKGV2ZW50VHlwZSA9PT0gJ21hbnVhbCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBOb24tZGVsZWdhdGVzXG5cblxuICAgICAgaWYgKCFpbnN0YW5jZS5wcm9wcy50YXJnZXQpIHtcbiAgICAgICAgb24oZXZlbnRUeXBlLCBvblRyaWdnZXIpO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XG4gICAgICAgICAgY2FzZSAnbW91c2VlbnRlcic6XG4gICAgICAgICAgICBvbignbW91c2VsZWF2ZScsIG9uTW91c2VMZWF2ZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2ZvY3VzJzpcbiAgICAgICAgICAgIG9uKGlzSUUgPyAnZm9jdXNvdXQnIDogJ2JsdXInLCBvbkJsdXIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIERlbGVnYXRlc1xuICAgICAgICBzd2l0Y2ggKGV2ZW50VHlwZSkge1xuICAgICAgICAgIGNhc2UgJ21vdXNlZW50ZXInOlxuICAgICAgICAgICAgb24oJ21vdXNlb3ZlcicsIG9uRGVsZWdhdGVTaG93KTtcbiAgICAgICAgICAgIG9uKCdtb3VzZW91dCcsIG9uRGVsZWdhdGVIaWRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnZm9jdXMnOlxuICAgICAgICAgICAgb24oJ2ZvY3VzaW4nLCBvbkRlbGVnYXRlU2hvdyk7XG4gICAgICAgICAgICBvbignZm9jdXNvdXQnLCBvbkRlbGVnYXRlSGlkZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2NsaWNrJzpcbiAgICAgICAgICAgIG9uKGV2ZW50VHlwZSwgb25EZWxlZ2F0ZVNob3cpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMgZnJvbSB0aGUgcmVmZXJlbmNlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVtb3ZlVHJpZ2dlcnNGcm9tUmVmZXJlbmNlKCkge1xuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZXZlbnRUeXBlID0gX3JlZi5ldmVudFR5cGUsXG4gICAgICAgICAgaGFuZGxlciA9IF9yZWYuaGFuZGxlcixcbiAgICAgICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICAgICAgaW5zdGFuY2UucmVmZXJlbmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgICBsaXN0ZW5lcnMgPSBbXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBpbm5lciBlbGVtZW50cyB1c2VkIGluIHNob3cvaGlkZSBtZXRob2RzXG4gICAqIEByZXR1cm4ge0hUTUxEaXZFbGVtZW50W119XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0SW5uZXJFbGVtZW50cygpIHtcbiAgICByZXR1cm4gW2luc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXAsIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmJhY2tkcm9wLCBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi5jb250ZW50XTtcbiAgfVxuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PSDwn5SRIFB1YmxpYyBtZXRob2RzIPCflJEgPT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAvKipcbiAgICogRW5hYmxlcyB0aGUgaW5zdGFuY2UgdG8gYWxsb3cgaXQgdG8gc2hvdyBvciBoaWRlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIGluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIERpc2FibGVzIHRoZSBpbnN0YW5jZSB0byBkaXNhbGxvdyBpdCB0byBzaG93IG9yIGhpZGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCA9IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgcGVuZGluZyB0aW1lb3V0cyByZWxhdGVkIHRvIHRoZSBgZGVsYXlgIHByb3AgaWYgYW55XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gY2xlYXJEZWxheVRpbWVvdXRzKCkge1xuICAgIGNsZWFyVGltZW91dChzaG93VGltZW91dElkKTtcbiAgICBjbGVhclRpbWVvdXQoaGlkZVRpbWVvdXRJZCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgbmV3IHByb3BzIGZvciB0aGUgaW5zdGFuY2UgYW5kIHJlZHJhd3MgdGhlIHRvb2x0aXBcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICovXG5cblxuICBmdW5jdGlvbiBzZXQoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zLCBEZWZhdWx0cyk7XG4gICAgdmFyIHByZXZQcm9wcyA9IGluc3RhbmNlLnByb3BzO1xuICAgIHZhciBuZXh0UHJvcHMgPSBldmFsdWF0ZVByb3BzKGluc3RhbmNlLnJlZmVyZW5jZSwgX2V4dGVuZHMoe30sIGluc3RhbmNlLnByb3BzLCBvcHRpb25zLCB7XG4gICAgICBpZ25vcmVBdHRyaWJ1dGVzOiB0cnVlXG4gICAgfSkpO1xuICAgIG5leHRQcm9wcy5pZ25vcmVBdHRyaWJ1dGVzID0gaGFzT3duUHJvcGVydHkob3B0aW9ucywgJ2lnbm9yZUF0dHJpYnV0ZXMnKSA/IG9wdGlvbnMuaWdub3JlQXR0cmlidXRlcyA6IHByZXZQcm9wcy5pZ25vcmVBdHRyaWJ1dGVzO1xuICAgIGluc3RhbmNlLnByb3BzID0gbmV4dFByb3BzO1xuXG4gICAgaWYgKGhhc093blByb3BlcnR5KG9wdGlvbnMsICd0cmlnZ2VyJykgfHwgaGFzT3duUHJvcGVydHkob3B0aW9ucywgJ3RvdWNoSG9sZCcpKSB7XG4gICAgICByZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UoKTtcbiAgICAgIGFkZFRyaWdnZXJzVG9SZWZlcmVuY2UoKTtcbiAgICB9XG5cbiAgICBpZiAoaGFzT3duUHJvcGVydHkob3B0aW9ucywgJ2ludGVyYWN0aXZlRGVib3VuY2UnKSkge1xuICAgICAgY2xlYW51cE9sZE1vdXNlTGlzdGVuZXJzKCk7XG4gICAgICBkZWJvdW5jZWRPbk1vdXNlTW92ZSA9IGRlYm91bmNlKG9uTW91c2VNb3ZlLCBvcHRpb25zLmludGVyYWN0aXZlRGVib3VuY2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZVBvcHBlckVsZW1lbnQoaW5zdGFuY2UucG9wcGVyLCBwcmV2UHJvcHMsIG5leHRQcm9wcyk7XG4gICAgaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4gPSBnZXRDaGlsZHJlbihpbnN0YW5jZS5wb3BwZXIpO1xuXG4gICAgaWYgKGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS51cGRhdGUoKTtcblxuICAgICAgaWYgKFBPUFBFUl9JTlNUQU5DRV9ERVBFTkRFTkNJRVMuc29tZShmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkob3B0aW9ucywgcHJvcCk7XG4gICAgICB9KSkge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICAgIGNyZWF0ZVBvcHBlckluc3RhbmNlKCk7XG5cbiAgICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IgJiYgbGFzdE1vdXNlTW92ZUV2ZW50KSB7XG4gICAgICAgICAgcG9zaXRpb25WaXJ0dWFsUmVmZXJlbmNlTmVhckN1cnNvcihsYXN0TW91c2VNb3ZlRXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTaG9ydGN1dCBmb3IgLnNldCh7IGNvbnRlbnQ6IG5ld0NvbnRlbnQgfSlcbiAgICogQHBhcmFtIHtTdHJpbmd8RWxlbWVudHxGdW5jdGlvbn0gY29udGVudFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHNldENvbnRlbnQkJDEoY29udGVudCkge1xuICAgIHNldCh7XG4gICAgICBjb250ZW50OiBjb250ZW50XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNob3dzIHRoZSB0b29sdGlwXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHNob3coKSB7XG4gICAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBnZXRWYWx1ZShpbnN0YW5jZS5wcm9wcy5kdXJhdGlvbiwgMCwgRGVmYXVsdHMuZHVyYXRpb25bMF0pO1xuXG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkIHx8ICFpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQgfHwgaXNVc2luZ1RvdWNoICYmICFpbnN0YW5jZS5wcm9wcy50b3VjaCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRGVzdHJveSB0b29sdGlwIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBubyBsb25nZXIgb24gdGhlIERPTVxuXG5cbiAgICBpZiAoIC8vIEB0cy1pZ25vcmVcbiAgICAhaGFzT3duUHJvcGVydHkoaW5zdGFuY2UucmVmZXJlbmNlLCAnaXNWaXJ0dWFsJykgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyhpbnN0YW5jZS5yZWZlcmVuY2UpKSB7XG4gICAgICByZXR1cm4gZGVzdHJveSgpO1xuICAgIH0gLy8gRG8gbm90IHNob3cgdG9vbHRpcCBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaGFzIGEgYGRpc2FibGVkYCBhdHRyaWJ1dGVcblxuXG4gICAgaWYgKGluc3RhbmNlLnJlZmVyZW5jZS5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMub25TaG93KGluc3RhbmNlKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5wb3BwZXIuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgPSB0cnVlO1xuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgICBpbnN0YW5jZS5yZWZlcmVuY2UuY2xhc3NMaXN0LmFkZCgndGlwcHktYWN0aXZlJyk7XG4gICAgfSAvLyBQcmV2ZW50IGEgdHJhbnNpdGlvbiBpZiB0aGUgcG9wcGVyIGlzIGF0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnRcblxuXG4gICAgYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24oW2luc3RhbmNlLnBvcHBlciwgaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4udG9vbHRpcCwgaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uYmFja2Ryb3BdLCAwKTtcbiAgICBtb3VudChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEFycm93IHdpbGwgc29tZXRpbWVzIG5vdCBiZSBwb3NpdGlvbmVkIGNvcnJlY3RseS4gRm9yY2UgYW5vdGhlciB1cGRhdGVcblxuXG4gICAgICBpZiAoIWhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkpIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKFtpbnN0YW5jZS5wb3BwZXJdLCBwcm9wcy51cGRhdGVEdXJhdGlvbik7XG4gICAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihnZXRJbm5lckVsZW1lbnRzKCksIGR1cmF0aW9uKTtcblxuICAgICAgaWYgKGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmJhY2tkcm9wKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmNvbnRlbnQuc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gTWF0aC5yb3VuZChkdXJhdGlvbiAvIDEyKSArICdtcyc7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5zdGlja3kpIHtcbiAgICAgICAgbWFrZVN0aWNreSgpO1xuICAgICAgfVxuXG4gICAgICBzZXRWaXNpYmlsaXR5U3RhdGUoZ2V0SW5uZXJFbGVtZW50cygpLCAndmlzaWJsZScpO1xuICAgICAgb25UcmFuc2l0aW9uZWRJbihkdXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi50b29sdGlwLmNsYXNzTGlzdC5hZGQoJ3RpcHB5LW5vdHJhbnNpdGlvbicpO1xuXG4gICAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5hcmlhKSB7XG4gICAgICAgICAgaW5zdGFuY2UucmVmZXJlbmNlLnNldEF0dHJpYnV0ZShcImFyaWEtXCIuY29uY2F0KGluc3RhbmNlLnByb3BzLmFyaWEpLCBpbnN0YW5jZS5wb3BwZXIuaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5zdGFuY2UucHJvcHMub25TaG93bihpbnN0YW5jZSk7XG4gICAgICAgIGluc3RhbmNlLnN0YXRlLmlzU2hvd24gPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEhpZGVzIHRoZSB0b29sdGlwXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBnZXRWYWx1ZShpbnN0YW5jZS5wcm9wcy5kdXJhdGlvbiwgMSwgRGVmYXVsdHMuZHVyYXRpb25bMV0pO1xuXG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkIHx8ICFpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMub25IaWRlKGluc3RhbmNlKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi50b29sdGlwLmNsYXNzTGlzdC5yZW1vdmUoJ3RpcHB5LW5vdHJhbnNpdGlvbicpO1xuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgICBpbnN0YW5jZS5yZWZlcmVuY2UuY2xhc3NMaXN0LnJlbW92ZSgndGlwcHktYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2UucG9wcGVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc1Nob3duID0gZmFsc2U7XG4gICAgYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24oZ2V0SW5uZXJFbGVtZW50cygpLCBkdXJhdGlvbik7XG4gICAgc2V0VmlzaWJpbGl0eVN0YXRlKGdldElubmVyRWxlbWVudHMoKSwgJ2hpZGRlbicpO1xuICAgIG9uVHJhbnNpdGlvbmVkT3V0KGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWlzU2NoZWR1bGVkVG9TaG93KSB7XG4gICAgICAgIHJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5hcmlhKSB7XG4gICAgICAgIGluc3RhbmNlLnJlZmVyZW5jZS5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLVwiLmNvbmNhdChpbnN0YW5jZS5wcm9wcy5hcmlhKSk7XG4gICAgICB9XG5cbiAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5wbGFjZW1lbnQgPSBpbnN0YW5jZS5wcm9wcy5wbGFjZW1lbnQ7XG4gICAgICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKGluc3RhbmNlLnBvcHBlcik7XG4gICAgICBpbnN0YW5jZS5wcm9wcy5vbkhpZGRlbihpbnN0YW5jZSk7XG4gICAgICBpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIHRvb2x0aXBcbiAgICogQHBhcmFtIHtCb29sZWFufSBbZGVzdHJveVRhcmdldEluc3RhbmNlc11cbiAgICovXG5cblxuICBmdW5jdGlvbiBkZXN0cm95KGRlc3Ryb3lUYXJnZXRJbnN0YW5jZXMpIHtcbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHRoZSBwb3BwZXIgaXMgY3VycmVudGx5IG1vdW50ZWQgdG8gdGhlIERPTSwgd2Ugd2FudCB0byBlbnN1cmUgaXQgZ2V0c1xuICAgIC8vIGhpZGRlbiBhbmQgdW5tb3VudGVkIGluc3RhbnRseSB1cG9uIGRlc3RydWN0aW9uXG5cblxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgIGhpZGUoMCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlVHJpZ2dlcnNGcm9tUmVmZXJlbmNlKCk7IC8vIEB0cy1pZ25vcmVcblxuICAgIGRlbGV0ZSBpbnN0YW5jZS5yZWZlcmVuY2UuX3RpcHB5O1xuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnRhcmdldCAmJiBkZXN0cm95VGFyZ2V0SW5zdGFuY2VzKSB7XG4gICAgICBhcnJheUZyb20oaW5zdGFuY2UucmVmZXJlbmNlLnF1ZXJ5U2VsZWN0b3JBbGwoaW5zdGFuY2UucHJvcHMudGFyZ2V0KSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKGNoaWxkLl90aXBweSkge1xuICAgICAgICAgIGNoaWxkLl90aXBweS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEdyb3VwcyBhbiBhcnJheSBvZiBpbnN0YW5jZXMgYnkgdGFraW5nIGNvbnRyb2wgb2YgdGhlaXIgcHJvcHMgZHVyaW5nXG4gKiBjZXJ0YWluIGxpZmVjeWNsZXMuXG4gKiBAcGFyYW0ge09iamVjdFtdfSBpbnN0YW5jZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGdyb3VwKGluc3RhbmNlcykge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJGRlbGF5ID0gX3JlZi5kZWxheSxcbiAgICAgIGRlbGF5ID0gX3JlZiRkZWxheSA9PT0gdm9pZCAwID8gaW5zdGFuY2VzWzBdLnByb3BzLmRlbGF5IDogX3JlZiRkZWxheSxcbiAgICAgIF9yZWYkZHVyYXRpb24gPSBfcmVmLmR1cmF0aW9uLFxuICAgICAgZHVyYXRpb24gPSBfcmVmJGR1cmF0aW9uID09PSB2b2lkIDAgPyAwIDogX3JlZiRkdXJhdGlvbjtcblxuICB2YXIgaXNBbnlUaXBweU9wZW4gPSBmYWxzZTtcbiAgaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMgPSB7XG4gICAgICBkdXJhdGlvbjogaW5zdGFuY2UucHJvcHMuZHVyYXRpb24sXG4gICAgICBvbkhpZGU6IGluc3RhbmNlLnByb3BzLm9uSGlkZSxcbiAgICAgIG9uU2hvdzogaW5zdGFuY2UucHJvcHMub25TaG93LFxuICAgICAgb25TaG93bjogaW5zdGFuY2UucHJvcHMub25TaG93blxuICAgIH07XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHNldElzQW55VGlwcHlPcGVuKHZhbHVlKSB7XG4gICAgaXNBbnlUaXBweU9wZW4gPSB2YWx1ZTtcbiAgICB1cGRhdGVJbnN0YW5jZXMoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU2hvdyhpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLm9uU2hvdyhpbnN0YW5jZSk7XG5cbiAgICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgIGluc3RhbmNlLnNldCh7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvblxuICAgICAgfSk7XG4gICAgICBpbnN0YW5jZS5oaWRlKCk7XG4gICAgfSk7XG4gICAgc2V0SXNBbnlUaXBweU9wZW4odHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkhpZGUoaW5zdGFuY2UpIHtcbiAgICBpbnN0YW5jZS5fb3JpZ2luYWxQcm9wcy5vbkhpZGUoaW5zdGFuY2UpO1xuXG4gICAgc2V0SXNBbnlUaXBweU9wZW4oZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25TaG93bihpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLm9uU2hvd24oaW5zdGFuY2UpO1xuXG4gICAgaW5zdGFuY2Uuc2V0KHtcbiAgICAgIGR1cmF0aW9uOiBpbnN0YW5jZS5fb3JpZ2luYWxQcm9wcy5kdXJhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlSW5zdGFuY2VzKCkge1xuICAgIGluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2Uuc2V0KHtcbiAgICAgICAgb25TaG93OiBvblNob3csXG4gICAgICAgIG9uU2hvd246IG9uU2hvd24sXG4gICAgICAgIG9uSGlkZTogb25IaWRlLFxuICAgICAgICBkZWxheTogaXNBbnlUaXBweU9wZW4gPyBbMCwgQXJyYXkuaXNBcnJheShkZWxheSkgPyBkZWxheVsxXSA6IGRlbGF5XSA6IGRlbGF5LFxuICAgICAgICBkdXJhdGlvbjogaXNBbnlUaXBweU9wZW4gPyBkdXJhdGlvbiA6IGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLmR1cmF0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZUluc3RhbmNlcygpO1xufVxuXG52YXIgZ2xvYmFsRXZlbnRMaXN0ZW5lcnNCb3VuZCA9IGZhbHNlO1xuLyoqXG4gKiBFeHBvcnRlZCBtb2R1bGVcbiAqIEBwYXJhbSB7U3RyaW5nfEVsZW1lbnR8RWxlbWVudFtdfE5vZGVMaXN0fE9iamVjdH0gdGFyZ2V0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiB0aXBweSh0YXJnZXRzLCBvcHRpb25zKSB7XG4gIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zLCBEZWZhdWx0cyk7XG5cbiAgaWYgKCFnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kKSB7XG4gICAgYmluZEdsb2JhbEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgZ2xvYmFsRXZlbnRMaXN0ZW5lcnNCb3VuZCA9IHRydWU7XG4gIH1cblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgRGVmYXVsdHMsIG9wdGlvbnMpOyAvLyBJZiB0aGV5IGFyZSBzcGVjaWZ5aW5nIGEgdmlydHVhbCBwb3NpdGlvbmluZyByZWZlcmVuY2UsIHdlIG5lZWQgdG8gcG9seWZpbGxcbiAgLy8gc29tZSBuYXRpdmUgRE9NIHByb3BzXG5cblxuICBpZiAoaXNCYXJlVmlydHVhbEVsZW1lbnQodGFyZ2V0cykpIHtcbiAgICBwb2x5ZmlsbEVsZW1lbnRQcm90b3R5cGVQcm9wZXJ0aWVzKHRhcmdldHMpO1xuICB9XG5cbiAgdmFyIGluc3RhbmNlcyA9IGdldEFycmF5T2ZFbGVtZW50cyh0YXJnZXRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcmVmZXJlbmNlKSB7XG4gICAgdmFyIGluc3RhbmNlID0gcmVmZXJlbmNlICYmIGNyZWF0ZVRpcHB5KHJlZmVyZW5jZSwgcHJvcHMpO1xuXG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICBhY2MucHVzaChpbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwgW10pO1xuICByZXR1cm4gaXNTaW5ndWxhcih0YXJnZXRzKSA/IGluc3RhbmNlc1swXSA6IGluc3RhbmNlcztcbn1cbi8qKlxuICogU3RhdGljIHByb3BzXG4gKi9cblxuXG50aXBweS52ZXJzaW9uID0gdmVyc2lvbjtcbnRpcHB5LmRlZmF1bHRzID0gRGVmYXVsdHM7XG4vKipcbiAqIFN0YXRpYyBtZXRob2RzXG4gKi9cblxudGlwcHkuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAocGFydGlhbERlZmF1bHRzKSB7XG4gIE9iamVjdC5rZXlzKHBhcnRpYWxEZWZhdWx0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgRGVmYXVsdHNba2V5XSA9IHBhcnRpYWxEZWZhdWx0c1trZXldO1xuICB9KTtcbn07XG5cbnRpcHB5LmhpZGVBbGwgPSBoaWRlQWxsO1xudGlwcHkuZ3JvdXAgPSBncm91cDtcbi8qKlxuICogQXV0by1pbml0IHRvb2x0aXBzIGZvciBlbGVtZW50cyB3aXRoIGEgYGRhdGEtdGlwcHk9XCIuLi5cImAgYXR0cmlidXRlXG4gKi9cblxuZnVuY3Rpb24gYXV0b0luaXQoKSB7XG4gIGFycmF5RnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10aXBweV0nKSkuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICB2YXIgY29udGVudCA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS10aXBweScpO1xuXG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIHRpcHB5KGVsLCB7XG4gICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmlmIChpc0Jyb3dzZXIpIHtcbiAgc2V0VGltZW91dChhdXRvSW5pdCk7XG59XG5cbi8qKlxuICogSW5qZWN0cyBhIHN0cmluZyBvZiBDU1Mgc3R5bGVzIHRvIGEgc3R5bGUgbm9kZSBpbiA8aGVhZD5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NcbiAqL1xuXG5mdW5jdGlvbiBpbmplY3RDU1MoY3NzKSB7XG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgIHN0eWxlLnRleHRDb250ZW50ID0gY3NzO1xuICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IGhlYWQuZmlyc3RDaGlsZDtcblxuICAgIGlmIChmaXJzdENoaWxkKSB7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZSwgZmlyc3RDaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgfVxufVxuXG5pbmplY3RDU1MoY3NzKTtcblxuZXhwb3J0IGRlZmF1bHQgdGlwcHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5hbGwuanMubWFwXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKmVzbGludCBuby11bnVzZWQtdmFyczogW1wiZXJyb3JcIiwgeyBcInZhcnNJZ25vcmVQYXR0ZXJuXCI6IFwiYXNjZW5kaW5nfGRlc2NlbmRpbmdcIiB9XSAqL1xuXG5pbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzLWNvbGxlY3Rpb24nO1xuaW1wb3J0IEJhciBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2Jhcic7XG5pbXBvcnQgU2VsZWN0aW9ucyBmcm9tICcuL3NlbGVjdGlvbnMnO1xuaW1wb3J0IFBTIGZyb20gJ3B1YnN1Yi1zZXR0ZXInO1xuXG5pbXBvcnQgeyBmb3JtYXRWYWx1ZSB9IGZyb20gJ0BQcm9qZWN0L21ldGhvZHMnO1xuXG4vLyBwYXJ0aWFsc1xuXG5mdW5jdGlvbiBhc2NlbmRpbmcoa2V5ID0gbnVsbCkge1xuICAgIHJldHVybiBrZXkgPT09IG51bGwgPyBcbiAgICAgICAgZnVuY3Rpb24oYSxiKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGEsYik7XG4gICAgICAgICAgICBhID0gYSA9PT0gJ04vQScgPyAnIScgOiBhOyAvLyB0aGlzIGVuc3VyZXMgbi9hIGlzIGFsd2F5cyBmaXJzdFxuICAgICAgICAgICAgYiA9IGIgPT09ICdOL0EnID8gJyEnIDogYjtcbiAgICAgICAgICAgIGEgPSAhaXNOYU4oK2EpID8gK2EgOiBhOyAvLyBjb2VyY2luZyBzdHJpbmdpZmllZCBudW1iZXJzIGludG8gbnVtYmVycyBzbyB0aGF0IGNvcnJlY3Qgb3JkZXIgY2FuIGJlIHRha2VuXG4gICAgICAgICAgICBiID0gIWlzTmFOKCtiKSA/ICtiIDogYjtcbiAgICAgICAgICAgIHZhciBydG4gPSBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbiAgICAgICAgICAgIHJldHVybiBydG47XG4gICAgICAgIH0gOlxuICAgICAgICBmdW5jdGlvbihhLGIpe1xuICAgICAgICAgICAgcmV0dXJuIGFba2V5XSA8IGJba2V5XSA/IC0xIDogYVtrZXldID4gYltrZXldID8gMSA6IGFba2V5XSA+PSBiW2tleV0gPyAwIDogTmFOO1xuICAgICAgICB9XG59XG5mdW5jdGlvbiBkZXNjZW5kaW5nKGtleSA9IG51bGwpIHtcbiAgICByZXR1cm4ga2V5ID09PSBudWxsID8gXG4gICAgICAgIGZ1bmN0aW9uKGEsYil7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhIDwgYiA/IDEgOiBhID4gYiA/IC0xIDogYSA+PSBiID8gMCA6IE5hTjtcbiAgICAgICAgfSA6XG4gICAgICAgIGZ1bmN0aW9uKGEsYil7XG4gICAgICAgICAgICByZXR1cm4gYVtrZXldIDwgYltrZXldID8gMSA6IGFba2V5XSA+IGJba2V5XSA/IC0xIDogYVtrZXldID49IGJba2V5XSA/IDAgOiBOYU47XG4gICAgICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpZnR5U3RhdGVWaWV3IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgXG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgICAvL2NvbnRhaW5lclxuICAgICAgICB2YXIgdmlldyA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICB0aGlzLmZpZWxkID0gJ2RlYnRfcGVyY2VudF9TUEknO1xuICAgICAgICB0aGlzLmJhcnMgPSBbXTtcbiAgICAgICAgdGhpcy5iYXJDb250YWluZXJzID0gW107XG4gICAgICAgIHRoaXMubGFzdFBvc2l0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkQmFycyA9IHt9O1xuICAgICAgICB0aGlzLmdyb3VwQnlGbiA9IHRoaXMuZ3JvdXBCeSAhPT0gbnVsbCA/IGQgPT4gZFt0aGlzLmdyb3VwQnldIDogZCA9PiBkICE9PSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSB0aGlzLnBhcmVudC5jcmVhdGVDb21wb25lbnQodGhpcy5tb2RlbCwgU2VsZWN0aW9ucywgYGRpdi5qcy1maWZ0eS1zdGF0ZS1zZWxlY3Rpb25zYCwge3BhcmVudDogdGhpc30pO1xuICAgICAgICB0aGlzLnNvcnRWYWx1ZUtleSA9ICdzdGF0ZSc7XG4gICAgICAgIHRoaXMuc29ydFZhbHVlc0ZuID0gYXNjZW5kaW5nO1xuICAgICAgICB0aGlzLmdyb3VwQnkgPSAnbnVsbCc7XG4gICAgICAgIHRoaXMubmVzdERhdGEoKTsgICAgICAgIFxuICAgICAgICB0aGlzLnB1c2hCYXJzKCk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCh0aGlzLnNlbGVjdGlvbnMsIC4uLnRoaXMuYmFycyk7XG5cbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldzsgLy8gaWYgcHJlcmVuZGVyZWQgYW5kIG5vIG5lZWQgdG8gcmVuZGVyIChubyBkYXRhIG1pc21hdGNoKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnJlbmRlclNlbGVjdGlvbnMoKTtcbiAgICAgICAgdGhpcy5leHBsYWluZXJXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2V4cGxhaW5lci13cmFwcGVyJyk7XG4gICAgICAgIHRoaXMuZmllbGRFeHBsYWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmllbGQtZXhwbGFpbmVyJyk7XG4gICAgICAgIHRoaXMuZ3JvdXBFeHBsYWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ3JvdXAtZXhwbGFpbmVyJyk7XG4gICAgICAgIHRoaXMudXBkYXRlRXhwbGFpbmVyVGV4dCgnZmllbGQnLCB0aGlzLmZpZWxkLCB0cnVlKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBjaGFydHMgPSB0aGlzLnJlbmRlckNoYXJ0cygpO1xuICAgICAgICB2aWV3LmFwcGVuZENoaWxkKGNoYXJ0cyk7XG4gICAgICAgXG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbiAgICBuZXN0RGF0YSgpe1xuICAgICAgICB0aGlzLm5lc3RlZERhdGEgPSBkMy5uZXN0KCkua2V5KHRoaXMuZ3JvdXBCeUZuKS5zb3J0S2V5cyhhc2NlbmRpbmcoKSkuc29ydFZhbHVlcyh0aGlzLnNvcnRWYWx1ZXNGbih0aGlzLnNvcnRWYWx1ZUtleSkpLmVudHJpZXModGhpcy5tb2RlbC5kYXRhKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5uZXN0ZWREYXRhKTtcbiAgICB9XG4gICAgcHVzaEJhcnMoKXtcbiAgICAgICAgdGhpcy5iYXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuYmFyQ29udGFpbmVycy5sZW5ndGggPSAwO1xuXG4gICAgICAgIHRoaXMubmVzdGVkRGF0YS5mb3JFYWNoKGdyb3VwID0+IHtcbiAgICAgICAgICAgIGdyb3VwLnZhbHVlcy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYmFycy5wdXNoKHRoaXMucGFyZW50LmNyZWF0ZUNvbXBvbmVudCh0aGlzLm1vZGVsLCBCYXIsIGBkaXYuYmFyLXN0YXRlLSR7ZC5jb2RlfWAsIHtwYXJlbnQ6IHRoaXMsIGRhdGE6IHtkLGZpZWxkOiB0aGlzLmZpZWxkLCBjb2xvcjoyfX0pKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhckNvbnRhaW5lcnMucHVzaCh0aGlzLnBhcmVudC5jcmVhdGVDb21wb25lbnQodGhpcy5tb2RlbCwgRWxlbWVudCwgYGRpdiNiYXJDb250YWluZXItJHtkLmNvZGV9YCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pOyBcbiAgICAgICAgXG4gICAgfVxuICAgIHJlbmRlclNlbGVjdGlvbnMoKXtcbiAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5zZWxlY3Rpb25zLmVsKTtcbiAgICB9XG4gICAgcmVuZGVyQ2hhcnRzKCl7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2pzLWZpZnR5LWNoYXJ0LWNvbnRhaW5lcicpO1xuXG4gICAgICAgIHRoaXMubmVzdGVkRGF0YS5mb3JFYWNoKGdyb3VwID0+IHtcbiAgICAgICAgICAgIHZhciBncm91cERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZ3JvdXBEaXYuY2xhc3NMaXN0LmFkZChzLmdyb3VwRGl2KTtcbiAgICAgICAgICAgIGdyb3VwRGl2LmlubmVySFRNTCA9IHRoaXMuZ3JvdXBCeSAhPT0gJ251bGwnID8gYDxoMyBjbGFzcz1cIiR7cy5ncm91cEhlYWRlcn1cIj4ke3RoaXMubW9kZWwuZGljdFt0aGlzLmdyb3VwQnldICE9PSB1bmRlZmluZWQgPyB0aGlzLm1vZGVsLmRpY3RbdGhpcy5ncm91cEJ5XVtncm91cC5rZXldIDogZ3JvdXAua2V5fTwvaDM+YCA6ICcnO1xuICAgICAgICAgICAgZ3JvdXAudmFsdWVzLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGJhckNvbnRhaW5lciA9IHRoaXMuYmFyQ29udGFpbmVyc1tpbmRleF0uZWw7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQocy5iYXJDb250YWluZXIpO1xuICAgICAgICAgICAgICAgIGlmICggdGhpcy5oaWdobGlnaHRlZEJhcnNbYmFyQ29udGFpbmVyLmlkXSApIHtcbiAgICAgICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQocy5pc0hpZ2hsaWdodGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZUhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAgICAgICAgICAgICBiYXJJbm5lckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGJhcklubmVyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQocy5iYXJJbm5lckNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZChzLmJhckxhYmVsKTtcbiAgICAgICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSBkLnN0YXRlO1xuICAgICAgICAgICAgICAgIHBsYWNlSG9sZGVyLmNsYXNzTGlzdC5hZGQocy5wbGFjZUhvbGRlcik7XG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgICAgICAgICBiYXJJbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmJhcnNbaW5kZXhdLmVsKTtcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQoYmFySW5uZXJDb250YWluZXIpO1xuICAgICAgICAgICAgICAgIGJhckNvbnRhaW5lci5hcHBlbmRDaGlsZChwbGFjZUhvbGRlcik7XG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgdGhpcy5yZXR1cm5EYXRhTGFiZWwoaW5kZXgpKTtcbiAgICAgICAgICAgICAgICBncm91cERpdi5hcHBlbmRDaGlsZChiYXJDb250YWluZXIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChncm91cERpdik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYmFycy5mb3JFYWNoKGJhciA9PiB7XG4gICAgICAgICAgICBiYXIuY2hlY2tJZlplcm8oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuICAgIHJldHVybkRhdGFMYWJlbChpbmRleCl7XG4gICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cIiR7cy5kYXRhTGFiZWx9XCIgc3R5bGU9XCJ0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoJHt0aGlzLnJldHVyblRyYW5zbGF0ZVZhbHVlKGluZGV4KX0pXCI+XG4gICAgICAgICAgICAgICAgICAgICR7dGhpcy5mb3JtYXRWYWx1ZSh0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZCwgdGhpcy5iYXJzW2luZGV4XS5kYXRhLmZpZWxkKS5yZXBsYWNlKCctJywn4oCTJyl9XG4gICAgICAgICAgICAgICAgPC9kaXY+YDtcbiAgICB9XG4gICAgcmV0dXJuVHJhbnNsYXRlVmFsdWUoaW5kZXgpe1xuICAgICAgICBpZiAoIHRoaXMuYmFyc1tpbmRleF0uZGF0YS5kW3RoaXMuYmFyc1tpbmRleF0uZGF0YS5maWVsZF0gPCAwICYmIHRoaXMubW9kZWwudHlwZXMuZmluZCh0ID0+IHQuZmllbGQgPT09IHRoaXMuYmFyc1tpbmRleF0uZGF0YS5maWVsZCkuY3Jvc3Nlc1plcm8gKXtcbiAgICAgICAgICAgIHJldHVybiBgJHsodGhpcy5iYXJzW2luZGV4XS5wbGFjZVplcm8odGhpcy5iYXJzW2luZGV4XS5kYXRhLmZpZWxkKSAqIDEwMCkudG9GaXhlZCgxKX0lYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgJHsoICggdGhpcy5iYXJzW2luZGV4XS5saW5lYXJTY2FsZSh0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZCwgdGhpcy5iYXJzW2luZGV4XS5kYXRhLmZpZWxkKSArIHRoaXMuYmFyc1tpbmRleF0ucGxhY2VaZXJvKHRoaXMuYmFyc1tpbmRleF0uZGF0YS5maWVsZCkgKSAqIDEwMCkudG9GaXhlZCgxKSB9JWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9ybWF0VmFsdWUoKXtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGludmVydFBvc2l0aW9ucygpe1xuICAgICAgICB0aGlzLmJhckNvbnRhaW5lcnMuZm9yRWFjaChiYXJDb250YWluZXIgPT4ge1xuICAgICAgICAgICAgdmFyIGxhc3RQb3NpdGlvbiA9IGJhckNvbnRhaW5lci5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICBkZWx0YVkgPSB0aGlzLmZpcnN0UG9zaXRpb25zW2JhckNvbnRhaW5lci5lbC5pZF0udG9wIC0gbGFzdFBvc2l0aW9uLnRvcDtcbiAgICAgICAgICAgIGJhckNvbnRhaW5lci5lbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMCc7XG4gICAgICAgICAgICBiYXJDb250YWluZXIuZWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHtkZWx0YVl9cHgpYDtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGJhckNvbnRhaW5lci5lbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMC44cyc7XG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmVsLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuXG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgUFMuc2V0U3VicyhbXG4gICAgICAgICAgICBbJ2ZpZWxkJywgKG1zZyxkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCYXJzKG1zZyxkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZURhdGFMYWJlbHMobXNnLGRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRXhwbGFpbmVyVGV4dChtc2csZGF0YSk7XG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFsnZ3JvdXAnLCAobXNnLGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUdyb3Vwcyhtc2csZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFeHBsYWluZXJUZXh0KG1zZyxkYXRhKTtcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgWydzb3J0JywgKG1zZyxkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0QmFycyhtc2csZGF0YSk7XG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIFsncmVzaXplJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRqdXN0RXhwbGFpbmVyVGV4dEhlaWdodCgpO1xuICAgICAgICAgICAgfV1cbiAgICAgICAgXSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgY2hpbGQuaW5pdCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5leHBsYWluZXJXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2V4cGxhaW5lci13cmFwcGVyJyk7XG4gICAgICAgIHRoaXMuZmllbGRFeHBsYWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmllbGQtZXhwbGFpbmVyJyk7XG4gICAgICAgIHRoaXMuZ3JvdXBFeHBsYWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ3JvdXAtZXhwbGFpbmVyJyk7XG4gICAgICAgIHRoaXMuaW5pdEhpZ2hsaWdodEJhcnMoKTtcbiAgICAgICAgdGhpcy5pbml0Q2xlYXJBbGxIaWdobGlnaHRzKCk7XG4gICAgfVxuICAgIHVwZGF0ZUV4cGxhaW5lclRleHQobXNnLGRhdGEsIGNhbGxlZEZyb21QcmVyZW5kZXIpe1xuICAgICAgICBjb25zb2xlLmxvZyhtc2csZGF0YSwgdGhpcyk7XG4gICAgICAgIHZhciBtYXRjaCA9IHRoaXMubW9kZWwudHlwZXMuZmluZCh0ID0+IHQuZmllbGQgPT09IGRhdGEpLFxuICAgICAgICAgICAgY29udGVudCA9IG1hdGNoID8gYDxwPjxzdHJvbmc+JHshaXNOYU4obWF0Y2gubGFiZWwpID8gJ0NyZWRpdCByYXRpbmcgJyArIG1hdGNoLmxhYmVsIDogbWF0Y2gubGFiZWwgfS48L3N0cm9uZz4gJHttYXRjaC50b29sdGlwfSA8L3A+YCA6ICcnLFxuICAgICAgICAgICAgZWw7XG4gICAgICAgIGlmICggbXNnID09PSAnZmllbGQnICkge1xuICAgICAgICAgICAgdGhpcy5maWVsZCA9IGRhdGE7IC8vIHNvIHRoYXQgdGhlIG9yZGVyIG9mIHN1YnMgZG9lc24ndCBtYXR0ZXJcbiAgICAgICAgICAgIGVsID0gdGhpcy5maWVsZEV4cGxhaW5lcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIG1zZyA9PT0gJ2dyb3VwJyApe1xuICAgICAgICAgICAgdGhpcy5ncm91cEJ5ID0gZGF0YTsgLy8gc28gdGhhdCB0aGUgb3JkZXIgb2Ygc3VicyBkb2Vzbid0IG1hdHRlclxuICAgICAgICAgICAgZWwgPSB0aGlzLmdyb3VwRXhwbGFpbmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmICggIWNhbGxlZEZyb21QcmVyZW5kZXIgKSB7XG4gICAgICAgICAgICB0aGlzLmV4cGxhaW5lcldyYXBwZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5leHBsYWluZXJXcmFwcGVyLm9mZnNldEhlaWdodCArICdweCc7ICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGVsLmZhZGVJbkNvbnRlbnQoY29udGVudCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB2YXIgbGluayA9IHRoaXMucGFyZW50LnJldHVybk1vcmVMaW5rKGRhdGEpO1xuICAgICAgICAgICAgaWYgKCBsaW5rICkge1xuICAgICAgICAgICAgICAgIGxpbmsuY2xhc3NMaXN0LmFkZChzLm1vcmVMaW5rKTtcbiAgICAgICAgICAgICAgICBlbC5sYXN0Q2hpbGQuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFkanVzdEV4cGxhaW5lclRleHRIZWlnaHQoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVsLmxhc3RDaGlsZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGp1c3RFeHBsYWluZXJUZXh0SGVpZ2h0KCl7XG4gICAgICAgIHZhciBpbm5lckhlaWdodCA9IFt0aGlzLmZpZWxkRXhwbGFpbmVyLCB0aGlzLmdyb3VwRXhwbGFpbmVyXS5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICAgICAgICB2YXIgZWwgPSBjdXIucXVlcnlTZWxlY3RvcigncCcpO1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGVzID0gZWwgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjdXIucXVlcnlTZWxlY3RvcigncCcpKSA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gY29tcHV0ZWRTdHlsZXMgPyArYWNjICsgZWwub2Zmc2V0SGVpZ2h0ICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZXNbJ21hcmdpbi10b3AnXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlc1snbWFyZ2luLWJvdHRvbSddKSA6ICthY2M7XG4gICAgICAgIH0sMCk7XG4gICAgICAgIHRoaXMuZXhwbGFpbmVyV3JhcHBlci5zdHlsZS5oZWlnaHQgPSBpbm5lckhlaWdodCArICdweCc7XG4gICAgfVxuICAgIGluaXRIaWdobGlnaHRCYXJzKCl7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5iYXJDb250YWluZXIpLmZvckVhY2goYmFyQ29udGFpbmVyID0+IHtcbiAgICAgICAgICAgIGJhckNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodGVkQmFyc1tiYXJDb250YWluZXIuaWRdID0gIXRoaXMuaGlnaGxpZ2h0ZWRCYXJzW2JhckNvbnRhaW5lci5pZF07XG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUocy5pc0hpZ2hsaWdodGVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5pdENsZWFyQWxsSGlnaGxpZ2h0cygpe1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2xlYXItYWxsLWhpZ2hsaWdodCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5iYXJDb250YWluZXIpLmZvckVhY2goYmFyQ29udGFpbmVyID0+IHtcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShzLmlzSGlnaGxpZ2h0ZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRCYXJzID0ge307XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZURhdGFMYWJlbHMoKXtcbiAgICAgICAgdGhpcy5iYXJDb250YWluZXJzLmZvckVhY2goKGJhckNvbnRhaW5lciwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHZhciBkYXRhTGFiZWwgPSBiYXJDb250YWluZXIuZWwucXVlcnlTZWxlY3RvcignLicgKyBzLmRhdGFMYWJlbCk7XG4gICAgICAgICAgICBkYXRhTGFiZWwuZmFkZUluQ29udGVudCh0aGlzLmZvcm1hdFZhbHVlKHRoaXMuYmFyc1tpbmRleF0uZGF0YS5kLCB0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZmllbGQpLnJlcGxhY2UoJy0nLCfigJMnKSk7XG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZCk7XG4gICAgICAgICAgICAgICAgZGF0YUxhYmVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7dGhpcy5yZXR1cm5UcmFuc2xhdGVWYWx1ZShpbmRleCl9KWA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZUJhcnMobXNnLGRhdGEpe1xuICAgICAgICB0aGlzLmZpZWxkID0gZGF0YTtcbiAgICAgICAgdGhpcy5iYXJzLmZvckVhY2goYmFyID0+IHtcbiAgICAgICAgICAgIGJhci5kYXRhLmZpZWxkID0gZGF0YTtcbiAgICAgICAgICAgIGJhci51cGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc29ydFZhbHVlS2V5KTtcbiAgICAgICAgaWYgKCB0aGlzLnNvcnRWYWx1ZUtleSAhPT0gJ3N0YXRlJyApe1xuICAgICAgICAgICAgdGhpcy5zb3J0VmFsdWVLZXkgPSBkYXRhO1xuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLkZMSVAuYmluZCh0aGlzKSw1MDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlY29yZEZpcnN0UG9zaXRpb25zKCl7XG4gICAgICAgIHRoaXMuZmlyc3RQb3NpdGlvbnMgPSB0aGlzLmJhckNvbnRhaW5lcnMucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhY2NbY3VyLmVsLmlkXSA9IGN1ci5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0se30pO1xuICAgICAgICBcbiAgICB9XG4gICAgRkxJUCgpe1xuICAgICAgICB0aGlzLnJlY29yZEZpcnN0UG9zaXRpb25zKCk7XG4gICAgICAgIHRoaXMubmVzdERhdGEoKTtcbiAgICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPSAnJzsgXG4gICAgICAgIHRoaXMucHVzaEJhcnMoKTsgICAgICAgIFxuICAgICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKHRoaXMucmVuZGVyQ2hhcnRzKCkpO1xuICAgICAgICB0aGlzLmluaXRIaWdobGlnaHRCYXJzKCk7XG4gICAgICAgIHRoaXMuaW52ZXJ0UG9zaXRpb25zKCk7XG4gICAgfVxuICAgIHVwZGF0ZUdyb3Vwcyhtc2csIGRhdGEpe1xuICAgICAgICB0aGlzLmdyb3VwQnkgPSBkYXRhO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmdyb3VwQnkpO1xuICAgICAgICB0aGlzLkZMSVAoKTtcbiAgICB9XG4gICAgc29ydEJhcnMobXNnLCBkYXRhKXtcbiAgICAgICAgdGhpcy5zb3J0VmFsdWVLZXkgPSBkYXRhID09PSAnYWxwaGEnID8gJ3N0YXRlJyA6IHRoaXMuZmllbGQ7XG4gICAgICAgIHRoaXMuc29ydFZhbHVlc0ZuID0gZGF0YSA9PT0gJ2Rlc2MnID8gZGVzY2VuZGluZyA6IGFzY2VuZGluZztcbiAgICAgICAgdGhpcy5GTElQKCk7ICAgIFxuICAgIH1cbiAgICBcbn0iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiZ3JvdXBIZWFkZXJcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS0tZ3JvdXBIZWFkZXJcIixcImJhckxhYmVsXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtLWJhckxhYmVsXCIsXCJncm91cERpdlwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1ncm91cERpdlwiLFwiYmFyQ29udGFpbmVyXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtLWJhckNvbnRhaW5lclwiLFwiaXNIaWdobGlnaHRlZFwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1pc0hpZ2hsaWdodGVkXCIsXCJiYXJJbm5lckNvbnRhaW5lclwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1iYXJJbm5lckNvbnRhaW5lclwiLFwiZGF0YUxhYmVsXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtLWRhdGFMYWJlbFwiLFwicGxhY2VIb2xkZXJcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS0tcGxhY2VIb2xkZXJcIixcIm1vcmVMaW5rXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtLW1vcmVMaW5rXCJ9OyIsImltcG9ydCBFbGVtZW50IGZyb20gJ0BVSS9lbGVtZW50JztcbmltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IFRoaXNEcm9wZG93biBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2Ryb3Bkb3duJztcbmltcG9ydCB7IHN0YXRlTW9kdWxlIGFzIFMgfSBmcm9tICdzdGF0ZWZ1bC1kZWFkJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0aW9ucyBleHRlbmRzIEVsZW1lbnQge1xuICAgIHByZXJlbmRlcigpe1xuICAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIHZpZXcgPSBzdXBlci5wcmVyZW5kZXIoKSxcbiAgICAgICAgICAgIGRyb3Bkb3duRGF0YSA9IFsgLy8gVE9ETzogc290ciBmbiBuZWVkcyB0byBiZSBEUlllciwgYWRkIHRvIHV0aWxzIEFycmF5LnByb3RvdHlwZS5zb3J0QXNjZW5kaW5nIG9yIHN0XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTZWxlY3QgZmllbGQ6JyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLm1vZGVsLnR5cGVzLmZpbHRlcih0ID0+IHQudHlwZSAhPT0gJ3RleHQnKSwgXG4gICAgICAgICAgICAgICAgdHlwZTogJ2ZpZWxkJ1xuICAgICAgICAgICAgfSx7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdHcm91cCBieTonLCAvLyBBR0hHIFRPRE86IGRvIHRoZSBzb3J0IHVuZGVyIHRoZSBjb21wbmVudFxuICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMubW9kZWwudHlwZXMuZmlsdGVyKHQgPT4gdC50eXBlID09PSAndGV4dCcpLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdncm91cCdcbiAgICAgICAgICAgIH0vKix7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdIaWdobGlnaHQ6JyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLm1vZGVsLmRhdGEubWFwKGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGQuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBkLnN0YXRlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaGlnaGxpZ2h0J1xuICAgICAgICAgICAgfSovXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuZHJvcGRvd25zID0gW107XG4gICAgICAgIGRyb3Bkb3duRGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgdGhpcy5kcm9wZG93bnMucHVzaCh0aGlzLnBhcmVudC5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIFRoaXNEcm9wZG93biwgYGRpdi5qcy1kcm9wZG93bi0ke2QubGFiZWwuY2xlYW5TdHJpbmcoKX1gLCB7cGFyZW50OiB0aGlzLCBkYXRhOiBkfSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKC4uLnRoaXMuZHJvcGRvd25zKTtcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldzsgLy8gaWYgcHJlcmVuZGVyZWQgYW5kIG5vIG5lZWQgdG8gcmVuZGVyIChubyBkYXRhIG1pc21hdGNoKVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRyb3Bkb3duV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkcm9wZG93bldyYXBwZXIuY2xhc3NMaXN0LmFkZChzLmRyb3Bkb3duV3JhcHBlcik7XG4gICAgICAgIGRyb3Bkb3duRGF0YS5mb3JFYWNoKChkLGkpID0+IHtcbiAgICAgICAgICAgIHZhciBkcm9wZG93bklubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgICAgICAgICAgZHJvcGRvd25PdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyksXG4gICAgICAgICAgICAgICAgZHJvcGRvd24gPSB0aGlzLmRyb3Bkb3duc1tpXTtcbiAgICAgICAgICAgIGRyb3Bkb3duT3V0ZXIuY2xhc3NMaXN0LmFkZChzLmRyb3Bkb3duT3V0ZXIpO1xuICAgICAgICAgICAgZHJvcGRvd25PdXRlci5pbm5lclRleHQgPSBkLmxhYmVsO1xuICAgICAgICAgICAgZHJvcGRvd25Jbm5lci5jbGFzc0xpc3QuYWRkKHMuZHJvcGRvd25Jbm5lcik7XG4gICAgICAgICAgICBkcm9wZG93bklubmVyLmFwcGVuZENoaWxkKGRyb3Bkb3duLmVsKTtcbiAgICAgICAgICAgIGRyb3Bkb3duT3V0ZXIuYXBwZW5kQ2hpbGQoZHJvcGRvd25Jbm5lcik7XG4gICAgICAgICAgICBkcm9wZG93bldyYXBwZXIuYXBwZW5kQ2hpbGQoZHJvcGRvd25PdXRlcik7XG4gICAgICAgIH0pO1xuICAgICAgICB2aWV3LmFwcGVuZENoaWxkKGRyb3Bkb3duV3JhcHBlcik7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdmlldy5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGBcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJleHBsYWluZXItd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJmaWVsZC1leHBsYWluZXJcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZ3JvdXAtZXhwbGFpbmVyXCI+PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4XCI+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCIke3MubGFiZWx9ICR7cy5sYWJlbFNvcnR9IGZsZXhcIj48c3Bhbj5Tb3J0IGJ5Ojwvc3Bhbj4gPHNwYW4+PGEgY2xhc3M9XCIke3Muc29ydEJ5fSAke3Muc29ydEFjdGl2ZX1cIiBkYXRhLXNvcnQ9XCJhbHBoYVwiIGhyZWY9XCIjXCI+QeKAk1o8L2E+IHwgPGEgY2xhc3M9XCIke3Muc29ydEJ5fVwiIGRhdGEtc29ydD1cImFzY1wiIGhyZWY9XCIjXCI+TG934oCTSGlnaDwvYT4gfCA8YSBjbGFzcz1cIiR7cy5zb3J0Qnl9XCIgZGF0YS1zb3J0PVwiZGVzY1wiIGhyZWY9XCIjXCI+SGlnaOKAk0xvdzwvYT48L3NwYW4+PC9wPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiJHtzLmxhYmVsfSAke3MubGFiZWxIaWdobGlnaHR9XCI+U2VsZWN0IGEgc3RhdGUgdG8gaGlnaGxpZ2h0IHwgPGEgaWQ9XCJjbGVhci1hbGwtaGlnaGxpZ2h0XCIgaHJlZj1cIiNcIj5DbGVhciBhbGw8L2E+PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGApO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgY2hpbGQuaW5pdCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLnNvcnRCeSkuZm9yRWFjaChlYWNoID0+IHtcbiAgICAgICAgICAgIGVhY2guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMuc29ydEFjdGl2ZSkuY2xhc3NMaXN0LnJlbW92ZShzLnNvcnRBY3RpdmUpO1xuICAgICAgICAgICAgICAgIGVhY2guY2xhc3NMaXN0LmFkZChzLnNvcnRBY3RpdmUpO1xuICAgICAgICAgICAgICAgIFMuc2V0U3RhdGUoJ3NvcnQnLCBlYWNoLmRhdGFzZXQuc29ydCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJkcm9wZG93bldyYXBwZXJcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS1zZWxlY3Rpb25zLS1kcm9wZG93bldyYXBwZXJcIixcImRyb3Bkb3duT3V0ZXJcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS1zZWxlY3Rpb25zLS1kcm9wZG93bk91dGVyXCIsXCJkcm9wZG93bklubmVyXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtc2VsZWN0aW9ucy0tZHJvcGRvd25Jbm5lclwiLFwibGFiZWxcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS1zZWxlY3Rpb25zLS1sYWJlbFwiLFwic29ydEFjdGl2ZVwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnMtLXNvcnRBY3RpdmVcIixcImxhYmVsU29ydFwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnMtLWxhYmVsU29ydFwiLFwic29ydEJ5XCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtc2VsZWN0aW9ucy0tc29ydEJ5XCJ9OyIsImltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IHsgRHJvcGRvd24gfSBmcm9tICdAVUkvaW5wdXRzL2lucHV0cy5qcyc7XG5pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRoaXNEcm9wZG93biBleHRlbmRzIERyb3Bkb3duIHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvciwgb3B0aW9ucyl7XG4gICAgICAgIHZhciBfZGF0YSA9IFtdO1xuICAgICAgICB2YXIgZHJvcGRvd25UeXBlID0gb3B0aW9ucy5kYXRhLnR5cGU7XG4gICAgICAgIG9wdGlvbnMuZGF0YS5kYXRhLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgICAvKmlmICggZHJvcGRvd25UeXBlID09PSAnaGlnaGxpZ2h0JyApeyAvLyB0cmFuc2Zvcm0gc3RhdGUgZGF0YSBpbnRvIGZvcm0gRHJvcGRvd24gY2FuIHVzZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGQpO1xuICAgICAgICAgICAgICAgIF9kYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZC5jb2RlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBkLnN0YXRlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpZSBkLnR5cGUgaXMgZmllbGQgb3IgZ3JvdXAgKi9cbiAgICAgICAgICAgICAgICBfZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGQuZmllbGQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGlzTmFOKCtkLmxhYmVsKSA/IGQubGFiZWwgOiAnQ3JlZGl0IHJhdGluZyAnICsgZC5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGQuaXNEZWZhdWx0U2VsZWN0aW9uID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAvLyAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBvcHRpb25zLmRhdGEgPSBfZGF0YS5zb3J0KGZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIGEubmFtZSA8IGIubmFtZSA/IC0xIDogYS5uYW1lID4gYi5uYW1lID8gMSA6IGEubmFtZSA+PSBiLm5hbWUgPyAwIDogTmFOO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCBkcm9wZG93blR5cGUgPT09ICdncm91cCcgKXtcbiAgICAgICAgICAgIG9wdGlvbnMuZGF0YS51bnNoaWZ0KHt2YWx1ZTogbnVsbCwgbmFtZTogJ+KAlCBOb25lIOKAlCcsIHNlbGVjdGVkOiB0cnVlfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5kcm9wZG93blR5cGUgPSBkcm9wZG93blR5cGU7XG4gICAgfVxuICAgIHByZXJlbmRlcigpe1xuICAgICAgICAvL2NvbnRhaW5lclxuICAgICAgICB2YXIgZHJvcGRvd24gPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZHJvcGRvd247IC8vIGlmIHByZXJlbmRlcmVkIGFuZCBubyBuZWVkIHRvIHJlbmRlciAobm8gZGF0YSBtaXNtYXRjaClcbiAgICAgICAgfVxuICAgICAgICBkcm9wZG93bi5jbGFzc0xpc3QuYWRkKHMuZHJvcGRvd24pO1xuICAgICAgICAvL2Ryb3Bkb3duLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGRyb3Bkb3duO1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIHN1cGVyLmluaXQoKTtcbiAgICAgICAgLypjb25zb2xlLmxvZygnaW5pdCBkcm9wZG93bicsIHRoaXMpO1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGUgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSwgdGhpcyk7XG4gICAgICAgICAgICBTLnNldFN0YXRlKHRoaXMuZHJvcGRvd25UeXBlLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH0pOyovXG4gICAgfVxuICAgIG9uQ2hhbmdlKCl7XG4gICAgICAgIFMuc2V0U3RhdGUodGhpcy5kcm9wZG93blR5cGUsIHRoaXMuc2VsZWN0ZWRPcHRpb24uZGF0YXNldC52YWx1ZSk7XG4gICAgfVxuICAgIFxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJkcm9wZG93blwiOlwic3JjLWNvbXBvbmVudHMtZHJvcGRvd24tLWRyb3Bkb3duXCJ9OyIsImltcG9ydCB7IERPTUhlbHBlcnMgYXMgJGQgfSBmcm9tICdAVXRpbHMnO1xuaW1wb3J0IEVsZW1lbnQgZnJvbSAnLi8uLi9lbGVtZW50Lyc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcblxuZXhwb3J0IGNsYXNzIFRleHRJbnB1dCBleHRlbmRzIEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yID0gJ2lucHV0Jywgb3B0aW9ucyl7XG4gICAgICAgIHN1cGVyKHNlbGVjdG9yLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIHZhciBpbnB1dCA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7IFxuICAgICAgICB9XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0Jyk7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICBcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEcm9wZG93biBleHRlbmRzIEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCBvcHRpb25zKXtcbiAgICAgICAgY29uc29sZS5sb2coc2VsZWN0b3IpO1xuICAgICAgICB2YXIgZWwgPSBzZWxlY3Rvci5zcGxpdCgnLicpWzBdLnNwbGl0KCcjJylbMF0sXG4gICAgICAgICAgICBrbGFzcyxcbiAgICAgICAgICAgIGlkO1xuXG4gICAgICAgIGlmICggZWwgIT09ICdkaXYnICkge1xuICAgICAgICAgICAgaWYgKCBzZWxlY3Rvci5zcGxpdCgnLicpLmxlbmd0aCA+IDEgKXtcbiAgICAgICAgICAgICAgICBrbGFzcyA9IHNlbGVjdG9yLnNwbGl0KCcuJylbMF0uc3BsaXQoJyMnKVswXTsgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIHNlbGVjdG9yLnNwbGl0KCcjJykubGVuZ3RoID4gMSApe1xuICAgICAgICAgICAgICAgIGlkID0gc2VsZWN0b3Iuc3BsaXQoJyMnKVswXS5zcGxpdCgnLicpWzBdOyBcbiAgICAgICAgICAgIH0gIFxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0Ryb3Bkb3duIGVsZW1lbnQgbXVzdCBiZSBhIGRpdjsgY29lcmNpbmcgLiAuIC4nKTtcbiAgICAgICAgICAgIGVsID0gJ2Rpdic7XG4gICAgICAgICAgICBzZWxlY3RvciA9IGVsICsgKCBpZCAhPT0gdW5kZWZpbmVkID8gJyMnICsgaWQgOiAnJyApICsgKCBrbGFzcyAhPT0gdW5kZWZpbmVkID8gJy4nICsga2xhc3MgOiAnJyApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIoc2VsZWN0b3IsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcigndWwnKTtcbiAgICAgICAgdGhpcy5ib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xuICAgICAgICB0aGlzLl9pc09wZW4gPSBmYWxzZTtcbiAgICB9XG4gICAgc2V0IGlzT3Blbihib29sKXtcblxuICAgICAgICB0aGlzLl9pc09wZW4gPSBib29sO1xuICAgICAgICBmdW5jdGlvbiBib2R5Q2xpY2tIYW5kbGVyKCl7XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICggYm9vbCApe1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKHMuaXNPcGVuKTtcbiAgICAgICAgICAgIHRoaXMuYm9keS5VSUNvbnRyb2xJc09wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYm9keUNsaWNrSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShzLmlzT3Blbik7XG4gICAgICAgICAgICB0aGlzLmJvZHkuVUlDb250cm9sSXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBib2R5Q2xpY2tIYW5kbGVyLmJpbmQodGhpcykpOyAgIFxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBpc09wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc09wZW47XG4gICAgfVxuICAgIHNldCBzZWxlY3RlZE9wdGlvbihpdGVtKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkT3B0aW9uID0gaXRlbTtcbiAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHRoaXMuX3NlbGVjdGVkT3B0aW9uLmlubmVyVGV4dDtcblxuICAgICAgICBpZiAoIHRoaXMub25DaGFuZ2UgKSB7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSW5zdGFuY2Ugb2YgRHJvcGRvd24gY2xhc3MgbmVlZHMgYW4gb25DaGFuZ2UgbWV0aG9kIHRvIGhhbmRsZSBzZWxlY3Rpb24gb2YgYSBuZXcgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgc2VsZWN0ZWRPcHRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZE9wdGlvbjtcbiAgICB9XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIFxuICAgICAgICB2YXIgd3JhcHBlciA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5wdXQgPSAkZC5jKCdkaXYuanMtaW5wdXQtZGl2Jyk7XG4gICAgICAgIHZhciBvcHRpb25zTGlzdCA9ICRkLmMoJ3VsJyk7XG4gICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGVhY2ggPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gJGQuYygnbGknKTtcbiAgICAgICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnLCBlYWNoLnZhbHVlKTtcbiAgICAgICAgICAgIG9wdGlvbi5pbm5lckhUTUwgPSBlYWNoLm5hbWU7XG4gICAgICAgICAgICBpZiAoIGVhY2guc2VsZWN0ZWQgKXtcbiAgICAgICAgICAgICAgICBvcHRpb24uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICBpbnB1dC50ZXh0Q29udGVudCA9IGVhY2gubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnNMaXN0LmFwcGVuZENoaWxkKG9wdGlvbilcbiAgICAgICAgfSk7XG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoaW5wdXQpXG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQob3B0aW9uc0xpc3QpXG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZChzLlBDVERyb3Bkb3duKTtcbiAgICAgICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICAgICB0aGlzLmlucHV0ID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCcuanMtaW5wdXQtZGl2Jyk7XG4gICAgICAgdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1DbGlja0hhbmRsZXIoaXRlbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICB9KTsgXG4gICAgICAgdGhpcy5fc2VsZWN0ZWRPcHRpb24gPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2xpLnNlbGVjdGVkJyk7XG4gICAgICAgdGhpcy50b0JlU2VsZWN0ZWQgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2xpLnNlbGVjdGVkJyk7XG4gICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZS5rZXlDb2RlKTtcbiAgICAgICAgICAgIGlmICggZS5rZXlDb2RlID09PSA5ICkge1xuICAgICAgICAgICAgICAgIHRoaXMudGFiSGFuZGxlci5jYWxsKHRoaXMsZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBbMzIsMzgsNDBdLmluZGV4T2YoZS5rZXlDb2RlKSA+IC0xICl7IC8vIDMyIHNwYWNlLCAzOCB1cCBhcnJvdywgNDAgZG93biBhcnJvd1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gcHJldmVudCBzY3JvbGxpbmcgb24gc3BhY2UgYW5kIGFycm93XG4gICAgICAgICAgICAgICAgdGhpcy5zcGFjZUFuZEFycm93SGFuZGxlci5jYWxsKHRoaXMsIGUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggWzEzLDI3XS5pbmRleE9mKGUua2V5Q29kZSA+IC0xICkgKXsgLy8gMTMgZW50ZXIsIDI3IGVzY2FwZVxuICAgICAgICAgICAgICAgIGlmICggdGhpcy5pc09wZW4gKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW50ZXJBbmRFc2NhcGVIYW5kbGVyLmNhbGwodGhpcywgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgXG4gICAgfVxuICAgIGl0ZW1DbGlja0hhbmRsZXIoaXRlbSl7XG4gICAgICAgIHRoaXMudG9CZVNlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgIHRoaXMudG9CZVNlbGVjdGVkID0gaXRlbTtcbiAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbiA9IHRoaXMudG9CZVNlbGVjdGVkO1xuICAgIH1cbiAgICBlbnRlckFuZEVzY2FwZUhhbmRsZXIoZSl7IC8vIG9ubHkgY2FsbGVkIGlzIHRoaXMuaXNPcGVuXG4gICAgICAgIGlmICggZS5rZXlDb2RlID09PSAyNyApIHsgLy8gZXNjIGtleVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2VzY2FwZSBrZXknKTtcbiAgICAgICAgICAgIHRoaXMudG9CZVNlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9uLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB0aGlzLnRvQmVTZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRPcHRpb247XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlOyAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24gPSB0aGlzLnRvQmVTZWxlY3RlZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzcGFjZUFuZEFycm93SGFuZGxlcihlKXtcbiAgICAgICAgaWYgKCBlLmtleUNvZGUgPT09IDMyICkgeyAvLyBzcGFjZVxuICAgICAgICAgICAgaWYgKCAhdGhpcy5pc09wZW4gKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBoZXJlIGNhbGwgdG8gZm4gdGhhdCBzZWxlY3RzIHRoZSB0b0JlU2xlY3RlZCBvcHRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBhcnJvdyBrZXlzXG4gICAgICAgIGlmICggIXRoaXMuaXNPcGVuICl7XG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXMgb3BlblxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IGUua2V5Q29kZSA9PT0gMzggPyB0aGlzLnRvQmVTZWxlY3RlZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIDogdGhpcy50b0JlU2VsZWN0ZWQubmV4dEVsZW1lbnRTaWJsaW5nOyBcbiAgICAgICAgICAgIGlmICggbmV4dCApIHsgLy8gaWYgdGhlcmUgaXMgYW4gb3B0aW9uIGJlZm9yZS9hZnRlciB0aGUgY3VycmVudGx5IHRvQmVTZWxlY3RlZCBvcHRpb24sIG1ha2UgdGhhdCB0aGUgdG9CZVNlbGVjdGVkIG9wdGlvblxuICAgICAgICAgICAgICAgIHRoaXMudG9CZVNlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQgPSBuZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMudG9CZVNlbGVjdGVkLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGFiSGFuZGxlcihlKXtcbiAgICAgICAgaWYgKCB0aGlzLmlzT3BlbiApe1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsaWNrSGFuZGxlcihlKXtcbiAgICAgICAgaWYgKCB0aGlzLmlzT3BlbiB8fCAhdGhpcy5ib2R5LlVJQ29udHJvbElzT3BlbiApe1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gIXRoaXMuaXNPcGVuO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJQQ1REcm9wZG93blwiOlwic3VibW9kdWxlcy1VSS1qcy1pbnB1dHMtLVBDVERyb3Bkb3duXCIsXCJpc09wZW5cIjpcInN1Ym1vZHVsZXMtVUktanMtaW5wdXRzLS1pc09wZW5cIn07IiwiaW1wb3J0IFJvdXRlciBmcm9tICdAUm91dGVyJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBDVEFwcCB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKXtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgICAgICAgIHRoaXNbb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXQocm91dGVyT3B0aW9ucyl7XG4gICAgICAgIGlmICggdGhpcy5uZWVkc1JvdXRlciApeyAvLyBjb21lcyBmcm9tIG9wdGlvbnMgb2JqZWN0XG4gICAgICAgICAgICB0aGlzLnJvdXRlciA9IG5ldyBSb3V0ZXIoKTtcbiAgICAgICAgICAgIHRoaXMucm91dGVyLmluaXQocm91dGVyT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNhYmxlSG92ZXJPblRvdWNoKCk7XG4gICAgfVxuICAgIGRpc2FibGVIb3Zlck9uVG91Y2goKXtcbiAgICAvLyBIVDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMwMzAzODk4XG4gICAgICAgIHZhciBoYXNIb3ZlckNsYXNzID0gZmFsc2U7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICB2YXIgbGFzdFRvdWNoVGltZSA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gZW5hYmxlSG92ZXIoKSB7XG4gICAgICAgICAgICAvLyBmaWx0ZXIgZW11bGF0ZWQgZXZlbnRzIGNvbWluZyBmcm9tIHRvdWNoIGV2ZW50c1xuICAgICAgICAgICAgaWYgKG5ldyBEYXRlKCkgLSBsYXN0VG91Y2hUaW1lIDwgNTAwKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoaGFzSG92ZXJDbGFzcykgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaGFzLWhvdmVyJyk7XG4gICAgICAgICAgICBoYXNIb3ZlckNsYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRpc2FibGVIb3ZlcigpIHtcbiAgICAgICAgICAgIGlmICghaGFzSG92ZXJDbGFzcykgcmV0dXJuO1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1ob3ZlcicpO1xuICAgICAgICAgICAgaGFzSG92ZXJDbGFzcyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTGFzdFRvdWNoVGltZSgpIHtcbiAgICAgICAgICAgIGxhc3RUb3VjaFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHVwZGF0ZUxhc3RUb3VjaFRpbWUsIHRydWUpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZGlzYWJsZUhvdmVyLCB0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZW5hYmxlSG92ZXIsIHRydWUpO1xuXG4gICAgICAgIGVuYWJsZUhvdmVyKCk7XG4gICAgfVxuICAgIGNyZWF0ZUNvbXBvbmVudChtb2RlbCwgY29tcG9uZW50LCBzZWxlY3RvciwgX29wdGlvbnMpeyBcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIF9vcHRpb25zICE9PSBudWxsICYmIHR5cGVvZiBfb3B0aW9ucyA9PT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIGZvciAoIGxldCBrZXkgaW4gX29wdGlvbnMgKXtcbiAgICAgICAgICAgICAgICBpZiAoIF9vcHRpb25zLmhhc093blByb3BlcnR5KGtleSkgKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gX29wdGlvbnNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgY29tcG9uZW50KHNlbGVjdG9yLCBvcHRpb25zKTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIHsgLy8gdGhpcyBjb3VsZCBiZSBpbnRlZ3JhdGVkIHdpdGggc3RhdGVmdWwgZGVhZFxuICAgIC8qXG4gICAgUm91dGVyIG9mZmVycyBiYXNpYyBzaGFyZWQgZnVuY3Rpb25zIGZvciBhbGwgcm91dGVycy4gTWV0aG9kcyBmb3IgdXBkYXRpbmcgIGhpc3Rvcnkgc3RhdGUgYW5kIHVwZGF0aW5nIHRoZSBoYXNoIHVybC4gQXJyYXkgb2Ygc3Vic2NyaXB0aW9uc1xuICAgIHRoYXQgYWZmZWN0IHRoZSB1cmwgaXMgcGFzc2VkIGluLiBUaGUgUHViU3ViIG1vZHVsZSBpcyBwYXNzZWQgaW4uIHNldEhhc2ggYW5kIGRlY29kZUhhc2ggZnVuY3Rpb25zIGFyZSBwYXNzZWQgaW4gYmMgdGhleSB3aWxsIGJlIGRpZmZcbiAgICBmb3IgZWFjaCBhcHAuIHZpZXdzIGFyZSBwYXNzZWQgaW4gc28gdGhhdCB0aGUgcmVzb2x1dGlvbnMgb2YgdGhlaXIgcHJvbWlzZXMgY2FuIGJlIHRyYWNrZWQgYW5kIGFjdGVkIHVwb24gKGllIHJvdXRlciBkZWNvZGVzIG9ubHkgYWZ0ZXIgXG4gICAgYWxsIHZpZXdzIGFyZSByZWFkeSlcbiAgICAqL1xuICAgIGluaXQocm91dGVyT3B0aW9ucyl7XG4gICAgICAgIFxuICAgICAgICBpZiAoIHJvdXRlck9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygcm91dGVyT3B0aW9ucyAhPT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIHRocm93ICdyb3V0ZXIuaW5pdCBtZXRob2QgcmVxdWlyZXMgYSBjb25maWcgb2JqZWN0IGFzIHBhcmFtZXRlciAxJ1xuICAgICAgICB9XG4gICAgICAgIGlmICggdHlwZW9mIHJvdXRlck9wdGlvbnMuZW5jb2RlICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiByb3V0ZXJPcHRpb25zLmRlY29kZSAhPT0gJ2Z1bmN0aW9uJyB8fCAhQXJyYXkuaXNBcnJheShyb3V0ZXJPcHRpb25zLnZpZXdzKSB8fCB0eXBlb2Ygcm91dGVyT3B0aW9ucy5QUyAhPT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIHRocm93ICdyb3V0ZXJPcHRpb25zIG9iamVjdCBuZWVkcyBlbmNvZGUsIGRlY29kZSwgdmlld3MsIGFuZCBQUyBwcm9wZXJ0aWVzLiBlbmNvZGUgYW5kIGRlY29kZSBtdXN0IGJlIGZ1bmN0aW9uczsgdmlld3MgaXMgYW4gYXJyYXkgb2Ygdmlld3MgZnJvbSB0aGUgYXBwOyBQUyBuZWVkcyB0byBiZSB0aGUgUHViU3ViIHNldHRlci4nXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZU9iaiA9IHt9O1xuICAgICAgICB0aGlzLmhhc2hTdGF0ZSA9IHJvdXRlck9wdGlvbnMuZW5jb2RlO1xuICAgICAgICB0aGlzLmRlY29kZUhhc2ggPSByb3V0ZXJPcHRpb25zLmRlY29kZTtcbiAgICAgICAgdGhpcy52aWV3UHJvbWlzZXMgPSByb3V0ZXJPcHRpb25zLnZpZXdzLm1hcChlYWNoID0+IGVhY2guaXNSZWFkeSk7IC8vIHZpZXcuaXNSZWFkeSBpcyBhIHByb21pc2VkIHJlc29sdmVkIHRydWUgYWZ0ZXIgdGhlIHZpZXcgaXMgcmVuZGVyZWRcbiAgICAgICAgdGhpcy5QUyA9IHJvdXRlck9wdGlvbnMuUFM7XG4gICAgICAgIFxuICAgICAgICBQcm9taXNlLmFsbCh0aGlzLnZpZXdQcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlSGFzaCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5QUy5zZXRTdWJzKHJvdXRlck9wdGlvbnMuc3Vic2NyaXB0aW9ucy5tYXAoZWFjaCA9PiB7IC8vIHN1YnNjcmlwdGlvbnMgdGhhdCBtYXR0ZXIgZm9yIHJvdXRlciBhcmUgbWFkZSB0byB0cmlnZ2VyIGhhc2hDaGFuZ2UgbWV0aG9kIHdoZW4gcHVibGlzaGVkXG4gICAgICAgICAgICB2YXIgYXJyID0gW2VhY2gsIChtc2csZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzaENoYW5nZS5jYWxsKHRoaXMsbXNnLGRhdGEpO1xuICAgICAgICAgICAgfV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgaGFzaENoYW5nZShtc2csZGF0YSl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGVPYmoobXNnLGRhdGEpO1xuICAgICAgICB0aGlzLmhhc2hTdGF0ZSgpO1xuICAgICAgICB0aGlzLnJlcGxhY2VTdGF0ZSgpO1xuICAgIH1cbiAgICBzZXRTdGF0ZU9iaihtc2csIGRhdGEpe1xuICAgICAgICB0aGlzLnN0YXRlT2JqW21zZ10gPSBkYXRhO1xuICAgICAgICBcbiAgICB9XG4gICAgcmVwbGFjZVN0YXRlKCl7ICAgIFxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUodGhpcy5zdGF0ZU9iaiwnJyx0aGlzLmhhc2hTdHJpbmcpXG4gICAgfVxuXG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzZWN0aW9uIGlkPVxcXCJzZWN0aW9uLW92ZXJ2aWV3XFxcIj5cXG5cXHQ8aDIgY2xhc3M9XFxcInN0YXRpY1xcXCIgcm9sZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgYXJpYS1sYWJlbD1cXFwiU2hvdy9oaWRlIGNvbnRlbnRcXFwiPk92ZXJ2aWV3PC9oMj5cXG4gICAgPGRpdiBjbGFzcz1cXFwianMtaW5uZXItY29udGVudFxcXCI+XFxuICAgIFxcblxcdDxwPlxcbiAgICAgICAgV2hlbiBzdGF0ZSBwb2xpY3ltYWtlcnMgdHJ5IHRvIGFzc2VzcyBob3cgbXVjaCBkZWJ0IHRvIHRha2Ugb24gZm9yIHByb2plY3RzIHN1Y2ggYXMgcm9hZHMsIGJyaWRnZXMsIGFuZCBzY2hvb2xzLCB0aGV5IG9mdGVuIGNvbXBhcmUgZGVidCBsZXZlbHMgaW4gdGhlaXIgc3RhdGUgdG8gdGhvc2Ugb2Ygb3RoZXJzLiBCZWNhdXNlIG5vIHVuaXZlcnNhbCBndWlkZWxpbmVzIGV4aXN0IGZvciBob3cgbXVjaCBkZWJ0IGlzIGFmZm9yZGFibGUsIG1hbnkgcG9saWN5bWFrZXJzIGV2YWx1YXRlIGhvdyB0aGVpciBzdGF0ZSBzdGFja3MgdXAgYWdhaW5zdCBvdGhlcnMgd2l0aCBhIGNvbW1vbiBjcmVkaXQgcmF0aW5nIG9yIG5hdGlvbmFsIG1lZGlhbiBkZWJ0IGxldmVscy5cXG4gICAgPC9wPlxcbiAgICA8cD5cXG4gICAgICAgIEJ1dCBzZWxlY3RpbmcgYSBwZWVyIGdyb3VwIGJhc2VkIG9ubHkgb24gYSBjb21tb24gcmF0aW5nIG9yIHVzaW5nIG5hdGlvbmFsIGJlbmNobWFya3Mgb3Zlcmxvb2tzIG1hbnkgZmFjdG9ycyB0aGF0IGluZmx1ZW5jZSBib3Jyb3dpbmcgbGV2ZWxzLiBTdGF0ZXMgd2l0aCBncm93aW5nIHBvcHVsYXRpb25zLCBmb3IgZXhhbXBsZSwgdGVuZCB0byBib3Jyb3cgbW9yZTsgYSBzdGF0ZeKAmXMgZmlzY2FsIGhlYWx0aCBhZmZlY3RzIHRoZSBmdW5kcyBhdmFpbGFibGUgZm9yIGRlYnQgc2VydmljZTsgYW5kIHBvbGljaWVzIG1lYW50IHRvIGxpbWl0IHN0YXRlIGRlYnQgY2FuIGluZmx1ZW5jZSBob3cgbXVjaCBsb2NhbCBnb3Zlcm5tZW50cyBhbmQgb3RoZXIgc3RhdGUgZW50aXRpZXMgYm9ycm93IGZvciBjYXBpdGFsIHByb2plY3RzLlxcbiAgICA8L3A+XFxuICAgIDxwPlxcbiAgICAgICAgVG8gYWRkcmVzcyB0aGlzIGdhcCwgVGhlIFBldyBDaGFyaXRhYmxlIFRydXN0cyBoYXMgY3JlYXRlZCBhbiBpbnRlcmFjdGl2ZSB0b29sIHRvIGFsbG93IHBvbGljeW1ha2VycyB0byBjb21wYXJlIHN0YXRlcyBiYXNlZCBvbiBzZXZlbiBjaGFyYWN0ZXJpc3RpY3MgcmVsYXRlZCB0byBkZWJ0LiBTdGF0ZXMgY2FuIHVzZSB0aGVzZSBkYXRhIHRvIHNlbGVjdCBtb3JlIHRhaWxvcmVkIHBlZXIgZ3JvdXBzLCBnaXZpbmcgdGhlbSBhIGRlZXBlciB1bmRlcnN0YW5kaW5nIG9mIGhvdyBzdGF0ZXMgd2l0aCBzaW1pbGFyIGJvcnJvd2luZyBwcmFjdGljZXMsIGNvbnN0cmFpbnRzLCBhbmQgbmVlZHMgbWFuYWdlIHRoZWlyIGJvcnJvd2luZy4gVWx0aW1hdGVseSwgdGhlc2UgaW1wcm92ZWQgY29tcGFyaXNvbnMgd2lsbCBoZWxwIHN0YXRlcyBtYWtlIGJldHRlci1pbmZvcm1lZCBkZWNpc2lvbnMuXFxuICAgIDwvcD5cXG4gICAgPHA+XFxuICAgICAgICBNb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZXNlIGNoYXJhY3RlcmlzdGljcyBhbmQgd2h5IFBldyBjaG9zZSB0aGVtIG1heSBiZVxcbiAgICAgICAgZm91bmQgaW4gdGhlIDxhIGNsYXNzPVxcXCJwY3Qtc3RhdGljLWFuY2hvclxcXCIgaWQ9XFxcImFib3V0LXRoZS1kYXRhXFxcIiBocmVmPVxcXCIjc2VjdGlvbi1hYm91dFxcXCI+QWJvdXQgdGhlIERhdGE8L2E+IHNlY3Rpb24gYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2UuXFxuICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDwvc2VjdGlvbj5cXG48c2VjdGlvbiBpZD1cXFwic2VjdGlvbi1jb21wYXJpc29uXFxcIj5cXG5cXHQ8aDIgY2xhc3M9XFxcInN0YXRpY1xcXCIgcm9sZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgYXJpYS1sYWJlbD1cXFwiU2hvdy9oaWRlIGNvbnRlbnRcXFwiPlN0YXRlIENvbXBhcmlzb248L2gyPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJqcy1pbm5lci1jb250ZW50XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbXBhcmUtc2VsZWN0aW9uLXdyYXBwZXJcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJjb21wYXJlLWxhYmVsXFxcIj5Db21wYXJlPC9zcGFuPjxiciAvPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZsZXggZmxleC1zdGFydCBmbGV4LWJhc2VsaW5lIGF1dG9Db21wbGV0ZV9vdXRlcldyYXBwZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhdXRvQ29tcGxldGVfd3JhcHBlclxcXCIgaWQ9XFxcImF1dG9Db21wbGV0ZV93cmFwcGVyLTBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGF1dG9jb21wbGV0ZT1cXFwib2ZmXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBpZD1cXFwiY29tcGFyZS1pbnB1dC0wXFxcIj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxzcGFuPnRvPC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhdXRvQ29tcGxldGVfd3JhcHBlclxcXCIgaWQ9XFxcImF1dG9Db21wbGV0ZV93cmFwcGVyLTFcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGF1dG9jb21wbGV0ZT1cXFwib2ZmXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBpZD1cXFwiY29tcGFyZS1pbnB1dC0xXFxcIj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDwvc2VjdGlvbj5cXG48c2VjdGlvbiBpZD1cXFwic2VjdGlvbi1zdGF0ZXNcXFwiPlxcblxcdDxoMiBjbGFzcz1cXFwic3RhdGljXFxcIiByb2xlPVxcXCJidXR0b25cXFwiIHRhYmluZGV4PVxcXCIwXFxcIiBhcmlhLWxhYmVsPVxcXCJTaG93L2hpZGUgY29udGVudFxcXCI+NTAtU3RhdGUgRGF0YTwvaDI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImpzLWlubmVyLWNvbnRlbnRcXFwiPlxcbiAgICA8L2Rpdj5cXG4gICAgPC9zZWN0aW9uPlxcbjxzZWN0aW9uIGlkPVxcXCJzZWN0aW9uLWFib3V0XFxcIj5cXG5cXHQ8aDIgY2xhc3M9XFxcInN0YXRpY1xcXCIgcm9sZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgYXJpYS1sYWJlbD1cXFwiU2hvdy9oaWRlIGNvbnRlbnRcXFwiPkFib3V0IHRoZSBEYXRhPC9oMj5cXG4gICAgPGRpdiBjbGFzcz1cXFwianMtaW5uZXItY29udGVudFxcXCI+XFxuICAgIFxcbjxwPlxcbiAgICBQZXcgcmVzZWFyY2hlcnMgZGV2ZWxvcGVkIHRoaXMgbGlzdCBvZiBjaGFyYWN0ZXJpc3RpY3MgYnkgZXhhbWluaW5nIHJlbGV2YW50IGxpdGVyYXR1cmUgYW5kIGNvbnN1bHRpbmcgc3ViamVjdCBtYXR0ZXIgZXhwZXJ0cy4gVGhlIGZpbmFsIHNldCBvZiBzZXZlbiBjaGFyYWN0ZXJpc3RpY3MgaW5jbHVkZWQgaW4gdGhlIHRvb2wgd2FzIHNlbGVjdGVkIGJhc2VkIG9uIGV2aWRlbmNlIGluIHRoZSBsaXRlcmF0dXJlIHRoYXQgdGhlIGNoYXJhY3RlcmlzdGljcyBhcmUgcmVsYXRlZCB0byBzdGF0ZSBkZWJ0LCB0aGUgZmVhc2liaWxpdHkgb2YgY29sbGVjdGluZyB0aGUgZGF0YSB1c2VkIHRvIGNvbnN0cnVjdCB0aGUgY2hhcmFjdGVyaXN0aWMsIGFuZCBhIGRlc2lyZSB0byBhdm9pZCByZWR1bmRhbmN5LiBQZXcgYWxzbyBsaW1pdGVkIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVyaXN0aWNzIHRvIG1ha2UgdGhlIHRvb2wgZWFzeSB0byB1c2UgYW5kIHVuZGVyc3RhbmQuXFxuPC9wPlxcbjxwPlxcbiAgICBUaGUgZ29hbCBvZiB0aGlzIHRvb2wgaXMgbm90IHRvIGNyZWF0ZSBhbiBleGhhdXN0aXZlIGNhdGFsb2cgb2YgdGhlIGZhY3RvcnMgdGhhdCBtaWdodCBhZmZlY3Qgc3RhdGUgYm9ycm93aW5nIGxldmVscywgc28gc3RhdGVzIHNob3VsZCBub3QgZmVlbCB0aGUgbmVlZCB0byBsaW1pdCB0aGVtc2VsdmVzIHRvIHRoZSBkYXRhIGluIGl0IHdoZW4gc2VsZWN0aW5nIHBlZXJzLiBJbnN0ZWFkLCB0aGUgdG9vbCBpcyBpbnRlbmRlZCB0byBoZWxwIHN0YXRlcyBjb25zaWRlciB0aGVzZSBkaWZmZXJlbmNlcyB3aGVuIGNvbnN0cnVjdGluZyBwZWVyIGdyb3Vwcy4gXFxuPC9wPlxcbjxoMyBjbGFzcz1cXFwic3RhdGljXFxcIj5cXG4gICAgQm9ycm93aW5nIHByYWN0aWNlc1xcbjwvaDM+XFxuPHA+XFxuICAgIEhvdyBzdGF0ZXMgYm9ycm93IGFsc28gYWZmZWN0cyBob3cgdGhleSBzaG91bGQgbWFrZSBjb21wYXJpc29uczogR2VuZXJhbCBvYmxpZ2F0aW9uIChHTykgZGVidCBsaW1pdHMsIGNlbnRyYWxpemF0aW9uLCBhbmQgdGhlIGRpdmlzaW9uIG9mIHN0YXRlLWxvY2FsIGJvcnJvd2luZyBpbiBhIHN0YXRlIGNhbiBhZmZlY3Qgc3RhdGUgYm9ycm93aW5nIHByYWN0aWNlcy4gXFxuPC9wPlxcbjxhIG5hbWU9XFxcImRlYnRfbGltaXRfdHlwZVxcXCIgaWQ9XFxcImRlYnRfbGltaXRfdHlwZVxcXCI+PC9hPlxcbjxoNCBjbGFzcz1cXFwianMtZGVidF9saW1pdF90eXBlXFxcIj5cXG4gICAgR2VuZXJhbCBvYmxpZ2F0aW9uIGRlYnQgbGltaXQgdHlwZSAoMjAxOClcXG48L2g0PlxcbjxwPlxcbiAgICBHTyBkZWJ0IGlzIG9uZSBvZiB0aGUgbW9zdCBjb21tb24gdHlwZXMgaXNzdWVkIGJ5IHN0YXRlcy4gSXQgY2FycmllcyBhIHN0YXRl4oCZcyBmdWxsIGZhaXRoIGFuZCBjcmVkaXQsIHRoZSBzdHJvbmdlc3QgcG9zc2libGUgcGxlZGdlLiBBcyBhIHJlc3VsdCwgR08gZGVidCBpcyB0eXBpY2FsbHkgYSBzdGF0ZeKAmXMgaGlnaGVzdCByYXRlZCBhbmQgbG93ZXN0IGNvc3QgYmVjYXVzZSBjcmVkaXQgcmF0aW5nIGFnZW5jaWVzIGFuZCBib25kIHB1cmNoYXNlcnMgc3Ryb25nbHkgYmVsaWV2ZSB0aGF0IHRoZSBzdGF0ZSB3aWxsIHJlcGF5IGl0LjxzdXA+MTwvc3VwPlxcbjwvcD5cXG48cD5cXG4gICAgTm90IGFsbCBzdGF0ZXMgaXNzdWUgbXVjaCBHTyBkZWJ0LiBBbGwgYnV0IHR3byBoYXZlIEdPIGRlYnQgbGltaXRzLCB3aGljaCB2YXJ5IGluIHJlc3RyaWN0aXZlbmVzcyBhbmQgc3RydWN0dXJlLiBGb3IgZXhhbXBsZSwgQ29ubmVjdGljdXQgbGltaXRzIHRoaXMgZGVidCB0byAxLjYgdGltZXMgdG90YWwgZXN0aW1hdGVkIGdlbmVyYWwgZnVuZCB0YXggcmVjZWlwdHMsIHdoaWxlIEFyaXpvbmEgZWZmZWN0aXZlbHkgcHJvaGliaXRzIGl0cyBpc3N1YW5jZS48c3VwPjI8L3N1cD4gQ29tcGFyaW5nIENvbm5lY3RpY3V0IGFuZCBBcml6b25hLCB0aGVuLCBtaWdodCBub3QgYmUgYXBwcm9wcmlhdGUgYmVjYXVzZSBDb25uZWN0aWN1dCBoYXMgc2lnbmlmaWNhbnQgR08gZGVidCBhbmQgQXJpem9uYSBoYXMgbm9uZS4gQ29ubmVjdGljdXTigJlzIGRlYnQgd2lsbCBkcmF3IG9uIHRoZSBzdGF0ZeKAmXMgZ2VuZXJhbCBmdW5kIGluIGEgd2F5IHRoYXQgQXJpem9uYeKAmXMgd29u4oCZdC4gKEdPIGRlYnQgaXMgdHlwaWNhbGx5IHN1cHBvcnRlZCBieSBhIHN0YXRl4oCZcyBnZW5lcmFsIGZ1bmQuKSBCZWNhdXNlIGFuYWx5emluZyB0aGUgcmV2ZW51ZSBzdHJlYW1zIGF2YWlsYWJsZSBmb3IgZGVidCByZXBheW1lbnQgaXMgaW1wb3J0YW50LCB0aGlzIGlzIGEga2V5IGRpZmZlcmVuY2UuIFxcbjwvcD5cXG48cD5cXG4gICAgVGhlc2UgbGltaXRzIHNvbWV0aW1lcyBhcHBseSB0byBzdGF0ZSBkZWJ0IGJleW9uZCBqdXN0IEdPIGJvcnJvd2luZy4gRm9yIGV4YW1wbGUsIFdlc3QgVmlyZ2luaWHigJlzIGxpbWl0IGFwcGxpZXMgdG8gbmV0IHRheC1zdXBwb3J0ZWQgZGVidCwgd2hpY2ggaW5jbHVkZXMgR08uXFxuPC9wPlxcbjxwPlxcbiAgICBQZXcgaGFzIGNsYXNzaWZpZWQgZWFjaCBzdGF0ZeKAmXMgbGltaXQgZm9yIEdPIGRlYnQgYXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcXG4gICAgdHlwZXM6XFxuPC9wPlxcbjx1bD5cXG4gICAgPGxpPlxcbiAgICAgICAgPHN0cm9uZz5Db25zdGl0dXRpb25hbCBhbWVuZG1lbnQuPC9zdHJvbmc+XFxuICAgICAgICBUaHJlZSBzdGF0ZXPigJRBbGFiYW1hLCBPaGlvLCBhbmQgV2VzdCBWaXJnaW5pYeKAlHJlcXVpcmUgYW4gYW1lbmRtZW50IHRvXFxuICAgICAgICB0aGVpciBjb25zdGl0dXRpb25zIHRvIGlzc3VlIEdPIGRlYnQuXFxuICAgIDwvbGk+XFxuICAgIDxsaT5cXG4gICAgICAgIDxzdHJvbmc+TWV0cmljLjwvc3Ryb25nPlxcbiAgICAgICAgSW4gMTEgc3RhdGVz4oCUQ29ubmVjdGljdXQsIEdlb3JnaWEsIEhhd2FpaSwgTWlzc2lzc2lwcGksIE5ldmFkYSwgTmV3XFxuICAgICAgICBIYW1wc2hpcmUsIE5vcnRoIERha290YSwgT3JlZ29uLCBUZW5uZXNzZWUsIFV0YWgsIGFuZCBXaXNjb25zaW7igJRkZWJ0IGlzXFxuICAgICAgICBub3QgYWxsb3dlZCB0byBleGNlZWQgYSBjZXJ0YWluIG1ldHJpYy1iYXNlZCB0aHJlc2hvbGQuIFRlbm5lc3NlZSwgZm9yXFxuICAgICAgICBleGFtcGxlLCBjYXBzIGRlYnQgc2VydmljZSBhdCAxMCBwZXJjZW50IG9mIGNvbWJpbmVkIHJldmVudWVzIGluIGl0c1xcbiAgICAgICAgZ2VuZXJhbCwgZGVidCBzZXJ2aWNlLCBhbmQgaGlnaHdheSBmdW5kcy5cXG4gICAgPC9saT5cXG4gICAgPGxpPlxcbiAgICAgICAgPHN0cm9uZz5NZXRyaWMtYmFzZWQgd2l0aCByZWZlcmVuZHVtIHRvIGV4Y2VlZC48L3N0cm9uZz5cXG4gICAgICAgIE5vcnRoIENhcm9saW5hLCBQZW5uc3lsdmFuaWEsIGFuZCBXeW9taW5nIHVzZSBhIG1ldHJpYyB0byBjYXAgZGVidCBidXRcXG4gICAgICAgIGFsbG93IGlzc3VhbmNlIGFib3ZlIHRoZSBjYXAgd2l0aCB2b3RlciBhcHByb3ZhbC5cXG4gICAgPC9saT5cXG4gICAgPGxpPlxcbiAgICAgICAgPHN0cm9uZz5ObyBsaW1pdC48L3N0cm9uZz5cXG4gICAgICAgIE1hcnlsYW5kIGFuZCBWZXJtb250IHBsYWNlIG5vIHJlc3RyaWN0aW9ucyBvbiBHTyBkZWJ0LlxcbiAgICA8L2xpPlxcbiAgICA8bGk+XFxuICAgICAgICA8c3Ryb25nPlByb2hpYml0aW9uLjwvc3Ryb25nPlxcbiAgICAgICAgQXJpem9uYSwgQ29sb3JhZG8sIEluZGlhbmEsIGFuZCBOZWJyYXNrYSBlZmZlY3RpdmVseSBwcm9oaWJpdCBHTyBkZWJ0LlxcbiAgICAgICAgSW5kaWFuYSBsYXcgZm9yYmlkcyBhbnkgR08gZGVidCB0byBiZSBpc3N1ZWQ7IHRoZSBvdGhlcnMgYXV0aG9yaXplXFxuICAgICAgICBhbW91bnRzIHNvIGxvd+KAlCQzNTAsMDAwIG9yIGxlc3PigJRhcyB0byBiZSBlcXVpdmFsZW50IHRvIHByb2hpYml0aW9ucy5cXG4gICAgPC9saT5cXG4gICAgPGxpPlxcbiAgICAgICAgPHN0cm9uZz5SZWZlcmVuZHVtIGFuZC9vciBzdXBlcm1ham9yaXR5Ljwvc3Ryb25nPlxcbiAgICAgICAgVGhpcnRlZW4gc3RhdGVz4oCUQWxhc2thLCBBcmthbnNhcywgQ2FsaWZvcm5pYSwgSWRhaG8sIElvd2EsIEthbnNhcyxcXG4gICAgICAgIEtlbnR1Y2t5LCBNYWluZSwgTWljaGlnYW4sIE1pbm5lc290YSwgTWlzc291cmksIE1vbnRhbmEsIGFuZCBSaG9kZVxcbiAgICAgICAgSXNsYW5k4oCUcmVxdWlyZSBzb21lIGNvbWJpbmF0aW9uIG9mIHZvdGVyIGFwcHJvdmFsIGFuZC9vciBhIGxlZ2lzbGF0aXZlXFxuICAgICAgICBzdXBlcm1ham9yaXR5IChnZW5lcmFsbHksIHRocmVlLWZpZnRocyBvciB0d28tdGhpcmRzKSB0byBpc3N1ZSBkZWJ0LlxcbiAgICA8L2xpPlxcbiAgICA8bGk+XFxuICAgICAgICA8c3Ryb25nPlJlZmVyZW5kdW0gYW5kL29yIHN1cGVybWFqb3JpdHkgYW5kIG1ldHJpYy48L3N0cm9uZz5cXG4gICAgICAgIEZvdXJ0ZWVuIHN0YXRlc+KAlERlbGF3YXJlLCBGbG9yaWRhLCBJbGxpbm9pcywgTG91aXNpYW5hLCBNYXNzYWNodXNldHRzLFxcbiAgICAgICAgTmV3IEplcnNleSwgTmV3IE1leGljbywgTmV3IFlvcmssIE9rbGFob21hLCBTb3V0aCBDYXJvbGluYSwgU291dGhcXG4gICAgICAgIERha290YSwgVGV4YXMsIFZpcmdpbmlhLCBhbmQgV2FzaGluZ3RvbuKAlHJlcXVpcmUgYSByZWZlcmVuZHVtIGFuZC9vclxcbiAgICAgICAgc3VwZXJtYWpvcml0eSBhbmQgaGF2ZSBhIG1ldHJpYy1iYXNlZCBjYXAgb24gZGVidCBvciBkZWJ0IHNlcnZpY2UuXFxuICAgIDwvbGk+XFxuPC91bD5cXG48ZGl2IGNsYXNzPVxcXCJwY3Qtbm90ZVxcXCI+PHA+XFxuICAgIDxzdHJvbmc+Tm90ZTo8L3N0cm9uZz4gVGhlIGNsYXNzaWZpY2F0aW9uIHN5c3RlbSBpcyBhIHZhcmlhdGlvbiBvbiB0aGUgYXBwcm9hY2ggdGFrZW4gaW4gRC5cXG4gICAgUm9kZXJpY2sgS2lld2lldCBhbmQgS3Jpc3RpbiBTemFrYWx5LCDigJxDb25zdGl0dXRpb25hbCBMaW1pdGF0aW9ucyBvblxcbkJvcnJvd2luZzogQW4gQW5hbHlzaXMgb2YgU3RhdGUgQm9uZGVkIEluZGVidGVkbmVzcyzigJ0gICAgPGNpdGU+VGhlIEpvdXJuYWwgb2YgTGF3LCBFY29ub21pY3MgJmFtcDsgT3JnYW5pemF0aW9uPC9jaXRlPiAxMiwgbm8uIDEgKDE5OTYpOlxcbiAgICA2Mi05NyxcXG4gICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuanN0b3Iub3JnL3N0YWJsZS83NjUwMzk/c2VxPTEjcGFnZV9zY2FuX3RhYl9jb250ZW50c1xcXCI+XFxuICAgICAgICBodHRwczovL3d3dy5qc3Rvci5vcmcvc3RhYmxlLzc2NTAzOT9zZXE9MSNwYWdlX3NjYW5fdGFiX2NvbnRlbnRzPC9hPi5cXG48L3A+XFxuPHA+XFxuICAgIDxzdHJvbmc+U291cmNlOjwvc3Ryb25nPiBQZXcgYW5hbHlzaXMgb2Ygc3RhdGUgY29uc3RpdHV0aW9ucyBhbmQgc3RhdHV0ZXNcXG48L3A+PC9kaXY+XFxuPGEgbmFtZT1cXFwiY2VudHJhbGl6YXRpb25cXFwiIGlkPVxcXCJjZW50cmFsaXphdGlvblxcXCI+PC9hPlxcbjxoNCBjbGFzcz1cXFwianMtY2VudHJhbGl6YXRpb25cXFwiPlxcbiAgICBDZW50cmFsaXphdGlvbiAoZmlzY2FsIHllYXIgMjAxNClcXG48L2g0PlxcbjxwPlxcbiAgICBJbiBzb21lIHN0YXRlcywgYm9ycm93aW5nIGlzIGRvbmUgYnkgZW50aXRpZXMgb3RoZXIgdGhhbiB0aGUgcHJpbWFyeeKAlFxcbiAgICBtZWFuaW5nIHN0YXRl4oCUZ292ZXJubWVudCwgaW5jbHVkaW5nIHRoZSBpbmRlcGVuZGVudCBhZ2VuY2llcyBhbmRcXG4gICAgYXV0aG9yaXRpZXMga25vd24gYXMgY29tcG9uZW50IHVuaXRzLiBDZW50cmFsaXphdGlvbiBtZWFzdXJlcyBwcmltYXJ5XFxuICAgIGdvdmVybm1lbnQgZGVidCBhcyBhIHNoYXJlIG9mIHRoZSB0b3RhbCBkZWJ0IGlzc3VlZCBieSBib3RoIHRoZSBwcmltYXJ5XFxuICAgIGdvdmVybm1lbnQgYW5kIGl0cyBjb21wb25lbnQgdW5pdHMuXFxuPC9wPlxcbjxwPlxcbiAgICBDb21wb25lbnQgdW5pdCBkZWJ0IGdlbmVyYWxseSByZWxpZXMgbGVzcyBvbiBzdGF0ZSBmdW5kcyBmb3IgcmVwYXltZW50IHRoYW5cXG4gICAgcHJpbWFyeSBnb3Zlcm5tZW50IGRlYnQgZG9lcy4gT2Z0ZW4sIGxlbmRlcnMgaGF2ZSBubyBsZWdhbCBjbGFpbSBvbiBzdGF0ZVxcbiAgICBnZW5lcmFsIGZ1bmRzIGlmIHRoZSBjb21wb25lbnQgdW5pdCBkZWZhdWx0cy4gQXMgYSByZXN1bHQsIHN0YXRlXFxuICAgIGNvbXBhcmlzb25zIGJhc2VkIG9uIHRvdGFsIGRlYnQgbWF5IGJlIG1pc2xlYWRpbmcuIE1vbnRhbmEgYW5kIERlbGF3YXJlLFxcbiAgICBmb3IgZXhhbXBsZSwgaGF2ZSBhYm91dCB0aGUgc2FtZSB0b3RhbCBkZWJ0LCBidXQgbW9zdCBvZiBNb250YW5h4oCZcyBkZWJ0IGlzXFxuICAgIGhlbGQgYnkgY29tcG9uZW50IHVuaXRzIGFuZCBtb3N0IG9mIERlbGF3YXJl4oCZcyBpcyBoZWxkIGJ5IHRoZSBzdGF0ZS5cXG48L3A+XFxuPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPjxwPlxcbiAgICA8c3Ryb25nPk5vdGU6PC9zdHJvbmc+IFRvIGNhbGN1bGF0ZSBjZW50cmFsaXphdGlvbiBpbiBhIHN0YXRlLCBQZXcgZmlyc3QgYW5hbHl6ZWQgdGhlIHN0YXRl4oCZcyBjb21wcmVoZW5zaXZlIGFubnVhbCBmaW5hbmNpYWwgcmVwb3J0IGZvciBmaXNjYWwgeWVhciAyMDE0IHRvIGRldGVybWluZSBob3cgbXVjaCBkZWJ0IHdhcyBoZWxkIGJ5IHRoZSBwcmltYXJ5IGdvdmVybm1lbnQuIFRoYXQgZmlndXJlIHdhcyB0aGVuIGNvbXBhcmVkIHRvIGEgc3VtIG9mIHRoZSBkZWJ0IG9mIG1ham9yIGNvbXBvbmVudCB1bml0cyBhcyByZXBvcnRlZCBpbiB0aGVpciBhbm51YWwgZmluYW5jaWFsIHN0YXRlbWVudHMuPHN1cD4zPC9zdXA+XFxuPC9wPjwvZGl2PlxcbjxhIG5hbWU9XFxcInN0YXRlX2xvY2FsX2RpdmlzaW9uXFxcIiBpZD1cXFwic3RhdGVfbG9jYWxfZGl2aXNpb25cXFwiPjwvYT5cXG48aDQgY2xhc3M9XFxcImpzLXN0YXRlX2xvY2FsX2RpdmlzaW9uXFxcIj5cXG4gICAgVGhlIHN0YXRlLWxvY2FsIGJvcnJvd2luZyBkaXZpc2lvbiAoMjAxNSlcXG48L2g0PlxcbjxwPlxcbiAgICBPbmUgZmFjdG9yIHRoYXQgaW5mbHVlbmNlcyBzdGF0ZSBkZWJ0IGxldmVscyBpcyB0aGUgZGl2aXNpb24gb2YgYm9ycm93aW5nIGJldHdlZW4gc3RhdGUgYW5kIGxvY2FsIGdvdmVybm1lbnRzLiBJbiBzb21lIHN0YXRlcywgbG9jYWwgZ292ZXJubWVudHMgYXJlIHJlc3BvbnNpYmxlIGZvciBwYXlpbmcgZm9yIG1vc3QgY2FwaXRhbCBwcm9qZWN0cyB3aXRoaW4gdGhlaXIganVyaXNkaWN0aW9ucy4gSW4gb3RoZXIgcGxhY2VzLCB0aGUgc3RhdGUgaXMgcmVzcG9uc2libGUgZm9yIHRob3NlIHByb2plY3RzLiBJbnN0ZWFkIG9mIGEgY2l0eSBvciB0b3duIGJvbmRpbmcgdG8gZmluYW5jZSB0aGVtLCB0aGUgc3RhdGUgdGFrZXMgb24gdGhpcyBkZWJ0LWluY3JlYXNpbmcgaXRzIG92ZXJhbGwgYm9ycm93aW5nLiBUaGUgZGl2aXNpb24gb2YgYm9ycm93aW5nIHJlc3BvbnNpYmlsaXR5IGlzIHJlbGF0ZWQgdG8gdGhlIGRlYnQgbGltaXQuIExvY2FsIGdvdmVybm1lbnRzIGluIEFyaXpvbmEsIGZvciBleGFtcGxlLCBib3Jyb3cgbW9yZSB0aGFuIHRoZSBzdGF0ZSBkb2VzIGJlY2F1c2UgdGhlIHN0YXRl4oCZcyBhYmlsaXR5IHRvIGJvcnJvdyBpcyBzbyByZXN0cmljdGVkLjxzdXA+NDwvc3VwPiAgVGhpcyB0b29sIGNvbXBhcmVzIGxvY2FsIGdvdmVybm1lbnQgYm9ycm93aW5nIHRvIHRoZSBjb21iaW5lZCBkZWJ0IG9mIHN0YXRlIGFuZCBsb2NhbCBnb3Zlcm5tZW50cyB3aXRoaW4gYSBzdGF0ZS4gXFxuPC9wPlxcbjxkaXYgY2xhc3M9XFxcInBjdC1ub3RlXFxcIj48cD5cXG4gICAgPHN0cm9uZz5Tb3VyY2U6PC9zdHJvbmc+IFBldyBhbmFseXNpcyBvZiBkYXRhIGZyb20gVS5TLiBDZW5zdXMgQnVyZWF1LCDigJxBbm51YWwgU3VydmV5IG9mXFxuICAgIFN0YXRlIGFuZCBMb2NhbCBHb3Zlcm5tZW50IEZpbmFuY2VzOiAyMDE1IERhdGEgUmVsZWFzZeKAnSAoMjAxOCksXFxuICAgIDxhXFxuICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dy5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvZ292LWZpbmFuY2VzL25ld3Nyb29tL3VwZGF0ZXMvcmVsZWFzZS5odG1sXFxcIlxcbiAgICA+XFxuICAgICAgICBodHRwczovL3d3dy5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvZ292LWZpbmFuY2VzL25ld3Nyb29tL3VwZGF0ZXMvcmVsZWFzZS5odG1sPC9hPlxcbjwvcD48L2Rpdj5cXG48cD5cXG4gICAgPHN0cm9uZz48L3N0cm9uZz5cXG48L3A+XFxuPGgzIGNsYXNzPVxcXCJzdGF0aWNcXFwiPlxcbiAgICBGaXNjYWwgY29uZGl0aW9ucyBhbmQgaW5mcmFzdHJ1Y3R1cmUgbmVlZHNcXG48L2gzPlxcbjxwPlxcbiAgICBGaXNjYWwgY29uZGl0aW9ucyBtYXkgYWZmZWN0IGEgc3RhdGXigJlzIHdpbGxpbmduZXNzIHRvIGlzc3VlIGRlYnQgYW5kIGFiaWxpdHkgdG8gcmVwYXkgaXQsIHdoaWxlIGluZnJhc3RydWN0dXJlIG5lZWRzIG1pZ2h0IGluY3JlYXNlIGEgc3RhdGXigJlzIGRlbWFuZCBmb3IgZGVidC4gT2JzZXJ2aW5nIHRyZW5kcyBhbmQgdmFyaWF0aW9ucyBhbW9uZyBzdGF0ZXMgaW4gYm90aCBjYXRlZ29yaWVzIGNhbiBhbGxvdyBvZmZpY2lhbHMgdG8gY3JlYXRlIG1vcmUgYXBwcm9wcmlhdGUgcGVlciBncm91cHMuIFxcbjwvcD5cXG48YSBuYW1lPVxcXCJyZXZlbnVlX3ZvbGF0aWxpdHlcXFwiIGlkPVxcXCJyZXZlbnVlX3ZvbGF0aWxpdHlcXFwiPjwvYT5cXG48aDQgY2xhc3M9XFxcImpzLXJldmVudWVfdm9sYXRpbGl0eVxcXCI+XFxuICAgIFJldmVudWUgdm9sYXRpbGl0eSAoMTk5OC0yMDE3KVxcbjwvaDQ+XFxuPHA+XFxuICAgIFJldmVudWUgdm9sYXRpbGl0eSBpcyB0aGUgYW5udWFsIGZsdWN0dWF0aW9uIGluIHRheCBjb2xsZWN0aW9ucyBhbmQgaXNcXG4gICAgYWZmZWN0ZWQgYnkgZWFjaCBzdGF0ZeKAmXMgbWl4IG9mIHRheCBzdHJlYW1zLiBJdCBpbmRpY2F0ZXMgd2hldGhlciBhIHN0YXRlXFxuICAgIGNhbiBleHBlY3QgdG8gZGVkaWNhdGUgYSByZWxhdGl2ZWx5IGNvbnNpc3RlbnQgc2hhcmUgb2YgaXRzIHJldmVudWUgdG8gaXRzXFxuICAgIGxpYWJpbGl0aWVzIHllYXIgdG8geWVhciBvciB3aGV0aGVyIHRoYXQgc2hhcmUgd2lsbCBzaG93IGdyZWF0ZXJcXG4gICAgZmx1Y3R1YXRpb24gYXMgcmV2ZW51ZSB2YXJpZXMuIFN0YXRlcyB3aXRoIHN0YWJsZSByZXZlbnVlIGNhbiBwbGFuIGRlYnRcXG4gICAgaXNzdWFuY2VzIGFuZCBwYXkgZG93biBkZWJ0IG1vcmUgZWFzaWx5IHRoYW4gc3RhdGVzIHdpdGggdW5jZXJ0YWluIHRheFxcbiAgICBjb2xsZWN0aW9ucyBjYW4uPHN1cD41PC9zdXA+IFN0YXRlcyB3aXRoIG1vcmUgdm9sYXRpbGUgcmV2ZW51ZSBtYXkgdGhlcmVmb3JlIHdpc2ggdG9cXG4gICAgY29tcGFyZSB0aGVtc2VsdmVzIHRvIHN0YXRlcyB3aXRoIHNpbWlsYXIgY29uY2VybnMuXFxuPC9wPlxcbjxwPlxcbiAgICBQZXcgdXNlZCBkYXRhIGZyb20gMTk5OCB0byAyMDE3IHRvIGNhbGN1bGF0ZSBhIHJldmVudWUgdm9sYXRpbGl0eSBzY29yZSBmb3JcXG4gICAgZWFjaCBzdGF0ZS4gVGhlIHNjb3JlIHJlZmxlY3RzIHZhcmlhdGlvbnMgaW4geWVhcmx5IHBlcmNlbnRhZ2UgY2hhbmdlcyBpblxcbiAgICByZXZlbnVlIGJldHdlZW4gMTk5OCBhbmQgMjAxNy48c3VwPjY8L3N1cD4gU3RhdGVzIGhhdmUgZGlmZmVyaW5nIGxldmVscyBvZiB2b2xhdGlsaXR5XFxuICAgIGJlY2F1c2UgdGhleSBoYXZlIHVuaXF1ZSByZXZlbnVlIG1peGVzLiBBbGFza2EgaGFzIGEgaGlnaGx5IHZvbGF0aWxlXFxuICAgIHJldmVudWUgc3RyZWFtIGJlY2F1c2UgbXVjaCBvZiBpdHMgY29sbGVjdGlvbnMgY29tZSBmcm9tIHVucHJlZGljdGFibGVcXG4gICAgc2V2ZXJhbmNlIHRheGVzIG9uIG9pbC4gT3RoZXIgc3RhdGVz4oCUc3VjaCBhcyBTb3V0aCBEYWtvdGEsIHdoaWNoIGVhcm5zIG1vcmVcXG4gICAgb2YgaXRzIHJldmVudWUgZnJvbSBzdGFibGUgc291cmNlcyBzdWNoIGFzIHBlcnNvbmFsIGluY29tZSB0YXhlc+KAlGhhdmUgbGVzc1xcbiAgICB2b2xhdGlsaXR5LiBBIGxvdyB2b2xhdGlsaXR5IHNjb3JlIG1lYW5zIHRoYXQgcmV2ZW51ZSBsZXZlbHMgd2VyZSBzaW1pbGFyXFxuICAgIGZyb20geWVhciB0byB5ZWFyLCBhbmQgYSBoaWdoIHNjb3JlIGluZGljYXRlcyB0aGF0IHJldmVudWUgZ3JldyBvciBkZWNsaW5lZFxcbiAgICBtb3JlIGRyYW1hdGljYWxseS4gVGhlIHNjb3JlcyByYW5nZSBmcm9tIDIuNyB0byAzNy42LlxcbjwvcD5cXG48ZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG4xXFxcIj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPjxwPlxcbiAgICA8c3Ryb25nPlNvdXJjZTo8L3N0cm9uZz4gVGhlIFBldyBDaGFyaXRhYmxlIFRydXN0cywg4oCcVGF4IFJldmVudWUgVm9sYXRpbGl0eSwgRlkgMTk5OC0yMDE3LOKAnVxcbiAgICBsYXN0IG1vZGlmaWVkIEF1Zy4gMjksIDIwMTgsXFxuICAgIDxhXFxuICAgICAgICBocmVmPVxcXCJodHRwOi8vd3d3LnBld3RydXN0cy5vcmcvZW4vcmVzZWFyY2gtYW5kLWFuYWx5c2lzL2RhdGEtdmlzdWFsaXphdGlvbnMvMjAxNC9maXNjYWwtNTAjaW5kNlxcXCJcXG4gICAgPlxcbiAgICAgICAgaHR0cDovL3d3dy5wZXd0cnVzdHMub3JnL2VuL3Jlc2VhcmNoLWFuZC1hbmFseXNpcy9kYXRhLXZpc3VhbGl6YXRpb25zLzIwMTQvZmlzY2FsLTUwI2luZDY8L2E+XFxuPC9wPjwvZGl2PlxcbjxhIG5hbWU9XFxcInRlbl95ZWFyX3BvcF9ncm93dGhcXFwiIGlkPVxcXCJ0ZW5feWVhcl9wb3BfZ3Jvd3RoXFxcIj48L2E+XFxuPGg0IGNsYXNzPVxcXCJqcy10ZW5feWVhcl9wb3BfZ3Jvd3RoXFxcIj5cXG4gICAgUG9wdWxhdGlvbiBncm93dGggKDIwMDgtMTcpXFxuPC9oND5cXG48cD5cXG4gICAgUG9wdWxhdGlvbiBncm93dGggZHJpdmVzIGluZnJhc3RydWN0dXJlIG5lZWRzLiBNb3JlIHBlb3BsZSBtZWFucyBncmVhdGVyXFxuICAgIHByZXNzdXJlIG9uIGEgc3RhdGXigJlzIGluZnJhc3RydWN0dXJlLCBuZWNlc3NpdGF0aW5nIGltcHJvdmVtZW50cyBhbmQgbmV3XFxuICAgIGNvbnN0cnVjdGlvbi4gUmVzZWFyY2ggc2hvd3MgdGhhdCBhcyBhIHN0YXRl4oCZcyBwb3B1bGF0aW9uIGdyb3dzLCBzbyB0b29cXG5kb2VzIGl0cyBkZW1hbmQgZm9yLCBhbmQgaW4gc29tZSBjYXNlcyBzcGVuZGluZyBvbiwgY2FwaXRhbCBjb25zdHJ1Y3Rpb24uPHN1cD43PC9zdXA+XFxuPC9wPlxcbjxwPlxcbiAgICBBcyBhIHJlc3VsdCwgc3RhdGVzIHdpdGggc2ltaWxhciBncm93dGggcGF0dGVybnMgbWF5IGhhdmUgc2ltaWxhciBkZW1hbmRzXFxuICAgIGZvciBpbmZyYXN0cnVjdHVyZS4gRm9yIHRoaXMgcmVhc29uLCBQZXcgdXNlZCBwb3B1bGF0aW9uIGdyb3d0aCBhcyBhIHByb3h5XFxuICAgIGZvciBpbmZyYXN0cnVjdHVyZSBkZW1hbmQsIGEgbWV0cmljIGZvciB3aGljaCBleGFjdCwgcmVsaWFibGUgc291cmNlcyBhcmVcXG4gICAgc2NhcmNlLiBPYnNlcnZpbmcgcG9wdWxhdGlvbiBncm93dGggY2FuIGhlbHAgaWRlbnRpZnkgcGVlcnMgYW5kIHByb3ZpZGVzIGFcXG4gICAgZGF0YSBwb2ludCBub3Qgb2Z0ZW4gdXNlZCBpbiBpbnRlcnN0YXRlIGRlYnQgY29tcGFyaXNvbnMuXFxuPC9wPlxcbjxwPlxcbiAgICBQZXcgc2VsZWN0ZWQgYSAxMC15ZWFyIHBvcHVsYXRpb24gZ3Jvd3RoIHJhdGUsIG1lYXN1cmVkIGFzIHRoZSBpbmNyZWFzZSBvclxcbiAgICBkZWNyZWFzZSBpbiBzdGF0ZSBwb3B1bGF0aW9uIGJldHdlZW4gMjAwOCBhbmQgMjAxNy4gQWx0aG91Z2ggbm8gY29uc2Vuc3VzXFxuICAgIGV4aXN0cyBpbiBhY2FkZW1pYyBsaXRlcmF0dXJlIHJlZ2FyZGluZyB0aGUgYXBwcm9wcmlhdGUgdGltZSBzcGFuIGZvclxcbiAgICBleGFtaW5pbmcgcG9wdWxhdGlvbiB0cmVuZHMsIHRoaXMgcGVyaW9kIGNhcHR1cmVkIHRoZSB0cm91Z2ggb2YgdGhlIEdyZWF0XFxuICAgIFJlY2Vzc2lvbiwgdGhlIHN1YnNlcXVlbnQgZWNvbm9taWMgZXhwYW5zaW9uLCBhbmQgdGhlIHJlc3VsdGluZyBkZW1vZ3JhcGhpY1xcbiAgICBhbmQgZ2VvZ3JhcGhpYyBzaGlmdHMuPHN1cD44PC9zdXA+XFxuPC9wPlxcblxcbjxkaXYgY2xhc3M9XFxcInBjdC1ub3RlXFxcIj48cD5cXG4gICAgPHN0cm9uZz5Tb3VyY2VzOjwvc3Ryb25nPiBQZXcgYW5hbHlzaXMgb2YgZGF0YSBmcm9tIFUuUy4gQ2Vuc3VzIEJ1cmVhdSwg4oCcQW5udWFsIFN1cnZleSBvZlxcbiAgICBTdGF0ZSBhbmQgTG9jYWwgR292ZXJubWVudCBGaW5hbmNlczogMjAxNSBEYXRhIFJlbGVhc2XigJ0gKDIwMTgpLFxcbiAgICA8YVxcbiAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL2dvdi1maW5hbmNlcy9uZXdzcm9vbS91cGRhdGVzL3JlbGVhc2UuaHRtbFxcXCJcXG4gICAgPlxcbiAgICAgICAgaHR0cHM6Ly93d3cuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL2dvdi1maW5hbmNlcy9uZXdzcm9vbS91cGRhdGVzL3JlbGVhc2UuaHRtbDwvYT5cXG4gICAgOyBVLlMuIENlbnN1cyBCdXJlYXUsIOKAnEFubnVhbCBFc3RpbWF0ZXMgb2YgdGhlIFJlc2lkZW50IFBvcHVsYXRpb24gZm9yIHRoZVxcbiAgICBVbml0ZWQgU3RhdGVzLCBSZWdpb25zLCBTdGF0ZXMsIGFuZCBQdWVydG8gUmljbzogQXByaWwgMSwgMjAxMCB0byBKdWx5IDEsXFxuICAgIDIwMTcs4oCdIFRhYmxlIDEsXFxuICAgIDxhXFxuICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dzIuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3BvcGVzdC90YWJsZXMvMjAxMC0yMDE3L3N0YXRlL3RvdGFscy9uc3QtZXN0MjAxNy0wMS54bHN4XFxcIlxcbiAgICA+XFxuICAgICAgICBodHRwczovL3d3dzIuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3BvcGVzdC90YWJsZXMvMjAxMC0yMDE3L3N0YXRlL3RvdGFscy9uc3QtZXN0MjAxNy0wMS54bHN4PC9hPlxcbiAgICA7IFUuUy4gQ2Vuc3VzIEJ1cmVhdSwg4oCcSW50ZXJjZW5zYWwgRXN0aW1hdGVzIG9mIHRoZSBSZXNpZGVudCBQb3B1bGF0aW9uIGZvclxcbiAgICB0aGUgVW5pdGVkIFN0YXRlcywgUmVnaW9ucywgU3RhdGVzLCBhbmQgUHVlcnRvIFJpY286IEFwcmlsIDEsIDIwMDAgdG8gSnVseVxcbiAgICAxLCAyMDEwLOKAnSBUYWJsZSAxLFxcbiAgICA8YVxcbiAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cyLmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9wb3Blc3QvdGFibGVzLzIwMDAtMjAxMC9pbnRlcmNlbnNhbC9zdGF0ZS9zdC1lc3QwMGludC0wMS54bHNcXFwiXFxuICAgID5cXG4gICAgICAgIGh0dHBzOi8vd3d3Mi5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvcG9wZXN0L3RhYmxlcy8yMDAwLTIwMTAvaW50ZXJjZW5zYWwvc3RhdGUvc3QtZXN0MDBpbnQtMDEueGxzPC9hPlxcbjwvcD48L2Rpdj5cXG48aDMgY2xhc3M9XFxcInN0YXRpY1xcXCI+XFxuICAgIERlYnQgbGV2ZWxzICgyMDE1KVxcbjwvaDM+XFxuPHA+XFxuICAgIERlYnQgbGV2ZWxzIGFyZSBhIG5hdHVyYWwgcG9pbnQgb2YgY29tcGFyaXNvbiBhbmQgYXJlIGluZmx1ZW5jZWQgYnkgdGhlXFxuICAgIHByZWNlZGluZyBjaGFyYWN0ZXJpc3RpY3MuIEFsdGhvdWdoIGFuIGFic29sdXRlIGRvbGxhciBhbW91bnQgcHJvdmlkZXNcXG4gICAgdXNlZnVsIGluZm9ybWF0aW9uLCBpdCBkb2VzIG5vdCBwdXQgdGhlIGFtb3VudCBvZiBkZWJ0IGludG8gY29udGV4dFxcbiAgICByZWxhdGl2ZSB0byB0aGUgc3RhdGXigJlzIHJlc291cmNlcy48c3VwPjk8L3N1cD4gR2l2ZW4gc2l6ZSwgcG9wdWxhdGlvbiwgYW5kIGVjb25vbWljXFxuICAgIGRpZmZlcmVuY2VzIGFtb25nIHN0YXRlcywgYSBkb2xsYXIgYW1vdW50IGlzIGFsc28gbGVzcyB1c2VmdWwgZm9yIHN0YXRlXFxuICAgIGNvbXBhcmlzb25zLiBJbnN0ZWFkLCBub3JtYWxpemVkIHJhdGlvcyBhbGxvdyBzdGF0ZXMgb2YgdmFyaW91cyBzaXplcyB0b1xcbiAgICBjb21wYXJlIHRoZW1zZWx2ZXMuIENvbnNpc3RlbnQgd2l0aCB0aGUgYmVzdCBwcmFjdGljZXMgZm9yIHVuZGVyc3RhbmRpbmdcXG4gICAgZGVidCBhZmZvcmRhYmlsaXR5LCBQZXfigJlzIHRvb2wgaW5jbHVkZXMgdHdvIHJhdGlvc+KAlGRlYnQgcGVyIGNhcGl0YSBhbmQgZGVidFxcbiAgICBhcyBhIHBlcmNlbnRhZ2Ugb2Ygc3RhdGUgcGVyc29uYWwgaW5jb21l4oCUdG8gZ2l2ZSBhIG1vcmUgY29tcGxldGUgbWVhc3VyZSBvZlxcbiAgICBhIHN0YXRl4oCZcyBkZWJ0LiBTdGF0ZS1iYXNlZCBhbmFseXNlcyBvZnRlbiB1c2UgYSByYXRpbyBvZiBkZWJ0IHNlcnZpY2UgdG9cXG4gICAgcmV2ZW51ZSB3aGVuIGV2YWx1YXRpbmcgZGVidCBsZXZlbHMgYW5kIHNldHRpbmcgbGltaXRzLiBUaGlzIHJhdGlvIGlzIG5vdFxcbiAgICBpbmNsdWRlZCBpbiB0aGlzIHRvb2wgZHVlIHRvIGNyb3NzLXN0YXRlIGNvbXBhcmFiaWxpdHkgaXNzdWVzLjxzdXA+MTA8L3N1cD5cXG48L3A+XFxuPGEgbmFtZT1cXFwiZGVidF9wZXJfY2FwaXRhXFxcIiBpZD1cXFwiZGVidF9wZXJfY2FwaXRhXFxcIj48L2E+XFxuPGg0IGNsYXNzPVxcXCJqcy1kZWJ0X3Blcl9jYXBpdGFcXFwiPlxcbiAgICBEZWJ0IHBlciBjYXBpdGFcXG48L2g0PlxcbjxwPlxcbiAgICBCZWNhdXNlIGRlYnQgaXMgcmVwYWlkIHRocm91Z2ggcmV2ZW51ZSBnZW5lcmFsbHkgaW4gdGhlIGZvcm0gb2YgdGF4ZXMgb3IgdXNlciBmZWVzIHBhaWQgYnkgcmVzaWRlbnRzLCBhc3Nlc3NpbmcgZGVidCByZWxhdGl2ZSB0byBpdHMgcmVwYXltZW50IHNvdXJjZS10aGUgcmVzaWRlbnQtaXMgYSBjb21tb24gYXBwcm9hY2guIERlYnQgcGVyIGNhcGl0YSwgd2hpY2ggbWVhc3VyZXMgdG90YWwgZGVidCBhZ2FpbnN0IGEgc3RhdGXigJlzIHBvcHVsYXRpb24sIG1ha2VzIGNvbXBhcmlzb25zIGJldHdlZW4gc3RhdGVzIG9mIGRpZmZlcmVudCBzaXplcyBmZWFzaWJsZSBhbmQgaGVscHMgcG9saWN5bWFrZXJzIHVuZGVyc3RhbmQgdGhlIGRlYnQgYnVyZGVuIG9uIGluZGl2aWR1YWwgcmVzaWRlbnRzLlxcbjwvcD5cXG48ZGl2IGNsYXNzPVxcXCJwY3Qtbm90ZVxcXCI+PHA+XFxuICAgIDxzdHJvbmc+U291cmNlczo8L3N0cm9uZz4gUGV3IGFuYWx5c2lzIG9mIGRhdGEgZnJvbSBVLlMuIENlbnN1cyBCdXJlYXUsIOKAnEFubnVhbCBTdXJ2ZXkgb2ZcXG4gICAgU3RhdGUgYW5kIExvY2FsIEdvdmVybm1lbnQgRmluYW5jZXMs4oCdIDIwMTUgRGF0YSBSZWxlYXNlICgyMDE4KSxcXG4gICAgPGFcXG4gICAgICAgIGhyZWY9XFxcImh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWxcXFwiXFxuICAgID5cXG4gICAgICAgIGh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWw8L2E+XFxuICAgIDsgVS5TLiBDZW5zdXMgQnVyZWF1LCDigJxBbm51YWwgRXN0aW1hdGVzIG9mIHRoZSBSZXNpZGVudCBQb3B1bGF0aW9uIGZvciB0aGVcXG4gICAgVW5pdGVkIFN0YXRlcywgUmVnaW9ucywgU3RhdGVzLCBhbmQgUHVlcnRvIFJpY286IEFwcmlsIDEsIDIwMTAgdG8gSnVseSAxLFxcbiAgICAyMDE3LOKAnSBUYWJsZSAxLFxcbiAgICA8YVxcbiAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cyLmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9wb3Blc3QvdGFibGVzLzIwMTAtMjAxNy9zdGF0ZS90b3RhbHMvbnN0LWVzdDIwMTctMDEueGxzeFxcXCJcXG4gICAgPlxcbiAgICAgICAgaHR0cHM6Ly93d3cyLmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9wb3Blc3QvdGFibGVzLzIwMTAtMjAxNy9zdGF0ZS90b3RhbHMvbnN0LWVzdDIwMTctMDEueGxzeDwvYT5cXG48L3A+PC9kaXY+XFxuPGEgbmFtZT1cXFwiZGVidF9wZXJjZW50X1NQSVxcXCIgaWQ9XFxcImRlYnRfcGVyY2VudF9TUElcXFwiPjwvYT5cXG48aDQgY2xhc3M9XFxcImpzLWRlYnRfcGVyY2VudF9TUElcXFwiPlxcbiAgICBEZWJ0IGFzIGEgcGVyY2VudGFnZSBvZiBzdGF0ZSBwZXJzb25hbCBpbmNvbWVcXG48L2g0PlxcbjxwPlxcbiAgICBBbm90aGVyIGNvbW1vbiBwcmFjdGljZSwgdXNlZCBieSBjcmVkaXQgcmF0aW5nIGFnZW5jaWVzIGFuZCBhY2FkZW1pY3MsIGlzIHRvIGNvbnNpZGVyIGEgc3RhdGXigJlzIGRlYnQgbGV2ZWwgcmVsYXRpdmUgdG8gcmVzb3VyY2VzIGF2YWlsYWJsZSBmb3IgcmVwYXltZW50LjxzdXA+MTE8L3N1cD4gQSByYXRpbyBjb21wYXJpbmcgZGVidCBub3Qgb25seSB0byBwb3B1bGF0aW9uIGJ1dCB0byB0YXhwYXllciBlYXJuaW5nIHBvd2VyIG9yIHdlYWx0aCBpcyB0aGVyZWZvcmUgYmVuZWZpY2lhbC48c3VwPjEyPC9zdXA+ICBEZWJ0IGFzIGEgcGVyY2VudGFnZSBvZiBzdGF0ZSBwZXJzb25hbCBpbmNvbWUgYWRkcmVzc2VzIHRoaXMgYW5kIGlzIGNvbW1vbmx5IHVzZWQgYnkgc3RhdGVzIHRvIGV2YWx1YXRlIGRlYnQgbGV2ZWxzLlxcbjwvcD5cXG48ZGl2IGNsYXNzPVxcXCJwY3Qtbm90ZVxcXCI+PHA+XFxuICAgIDxzdHJvbmc+U291cmNlczo8L3N0cm9uZz4gUGV3IGFuYWx5c2lzIG9mIGRhdGEgZnJvbSBVLlMuIENlbnN1cyBCdXJlYXUsIOKAnEFubnVhbCBTdXJ2ZXkgb2ZcXG4gICAgU3RhdGUgYW5kIExvY2FsIEdvdmVybm1lbnQgRmluYW5jZXMs4oCdIDIwMTUgRGF0YSBSZWxlYXNlICgyMDE4KSxcXG4gICAgPGFcXG4gICAgICAgIGhyZWY9XFxcImh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWxcXFwiXFxuICAgID5cXG4gICAgICAgIGh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWw8L2E+XFxuICAgIDsgVS5TLiBCdXJlYXUgb2YgRWNvbm9taWMgQW5hbHlzaXMsIOKAnFNBMSBQZXJzb25hbCBJbmNvbWUgU3VtbWFyeTogUGVyc29uYWxcXG4gICAgSW5jb21lLCBQb3B1bGF0aW9uLCBQZXIgQ2FwaXRhIFBlcnNvbmFsIEluY29tZSzigJ1cXG4gICAgaHR0cHM6Ly93d3cuYmVhLmdvdi9kYXRhL2luY29tZS1zYXZpbmcvcGVyc29uYWwtaW5jb21lLWJ5LXN0YXRlLlxcbjwvcD48L2Rpdj5cXG48YXNpZGUgY2xhc3M9XFxcInBjdC1ib3hcXFwiPlxcbiAgICAgICAgPGg0PkNlbnN1cyBEYXRhIHZzLiBNb29keeKAmXMgTmV0IFRheC1TdXBwb3J0ZWQgRGVidCBDYWxjdWxhdGlvbnM8L2g0PlxcbiAgICBcXG5cXHQ8cD5cXG4gICAgICAgIEFsdGhvdWdoIGRlYnQgYWZmb3JkYWJpbGl0eSBzdHVkaWVzIG9mdGVuIHVzZSBNb29keeKAmXMgSW52ZXN0b3JzIFNlcnZpY2VcXG4gICAgICAgIEluYy4gY2FsY3VsYXRpb25zIG9mIHN0YXRlIG5ldCB0YXgtc3VwcG9ydGVkIGRlYnQgdG8gY29tcGFyZSBib3Jyb3dpbmcsIFRoZVxcbiAgICAgICAgUGV3IENoYXJpdGFibGUgVHJ1c3RzIHVzZWQgVS5TLiBDZW5zdXMgQnVyZWF1IGRhdGEgZm9yIHR3byByZWFzb25zLlxcbiAgICA8L3A+XFxuICAgIDxwPlxcbiAgICAgICAgRmlyc3QsIHRoZSBDZW5zdXMgQnVyZWF1IGNhcHR1cmVzIGEgYnJvYWRlciBzY29wZSBvZiBkZWJ0IHRoYW4gZG9lc1xcbiAgICAgICAgTW9vZHnigJlzLCBpbmNsdWRpbmcgc29tZSBkZWJ0IGhlbGQgYnkgZGVwZW5kZW50IGFnZW5jaWVzIHN1Y2ggYXMgcHVibGljXFxuICAgICAgICBhdXRob3JpdGllcyBhbmQgY29tcG9uZW50IHVuaXRzLDxzdXA+MTM8L3N1cD4gZ2l2aW5nIGEgbW9yZSBhY2N1cmF0ZSByZXByZXNlbnRhdGlvbiBvZlxcbiAgICAgICAgdGhlIGRlYnQgYnVyZGVuIHN1cHBvcnRlZCBieSBhIHN0YXRl4oCZcyByZXNpZGVudHMuPHN1cD4xNDwvc3VwPiBTZWNvbmQsIHRoZSBidXJlYXVcXG4gICAgICAgIGFuYWx5emVzIGhvdyBjbG9zZWx5IHRoZSBkZXBlbmRlbnQgYWdlbmNpZXMgaXQgaW5jbHVkZXMgaW4gaXRzIGRlZmluaXRpb25cXG4gICAgICAgIG9mIHN0YXRlIGRlYnQgYXJlIGZpc2NhbGx5IG9yIGFkbWluaXN0cmF0aXZlbHkgdGllZCB0byB0aGUgc3RhdGUuIEJlY2F1c2VcXG4gICAgICAgIHVsdGltYXRlIHJlc3BvbnNpYmlsaXR5IGZvciBhIGRlYnQgY2FuIGJlIG5lYnVsb3Vz4oCUYW5kIGEgc3RhdGUgbWF5IG5vdFxcbiAgICAgICAgc3VwcG9ydCB0aGUgbGlhYmlsaXRpZXMgb2YgaXRzIG1vcmUgaW5kZXBlbmRlbnQgZW50aXRpZXPigJR0aGlzIGZ1cnRoZXJcXG4gICAgICAgIGVuc3VyZXMgYW4gYWNjdXJhdGUgZGVzY3JpcHRpb24gb2Ygc3RhdGUgZGVidC48c3VwPjE1PC9zdXA+XFxuICAgIDwvcD5cXG48L2FzaWRlPlxcbjxhIG5hbWU9XFxcImNyZWRpdF9yYXRpbmdcXFwiIGlkPVxcXCJjcmVkaXRfcmF0aW5nXFxcIj48L2E+XFxuPGgzIGNsYXNzPVxcXCJqcy1jcmVkaXRfcmF0aW5nIHN0YXRpY1xcXCI+XFxuICAgIENyZWRpdCByYXRpbmdzIChTZXB0ZW1iZXIgMjAxOCBhbmQgU2VwdGVtYmVyIDIwMTUpXFxuPC9oMz5cXG48cD5cXG4gICAgVGhpcyB0b29sIGFsbG93cyB1c2VycyB0byBncm91cCBzdGF0ZXMgYnkgU3RhbmRhcmQgJmFtcDsgUG9vcuKAmXMgY3JlZGl0IHJhdGluZ3MgdG8gZXhwbG9yZSBkaWZmZXJlbmNlcyBhbW9uZyB0aG9zZSB3aXRoIHNpbWlsYXIgY3JlZGl0IHByb2ZpbGVzLiBUaGUgdXNlciBjYW4gc2VsZWN0IGNyZWRpdCByYXRpbmdzIGZyb20gMjAxOCBvciAyMDE1IHRvIGxvb2sgYXQgZWl0aGVyIHJlY2VudCBpbmZvcm1hdGlvbiBvciBpbmZvcm1hdGlvbiBjb3JyZXNwb25kaW5nIHRvIG90aGVyLCBlYXJsaWVyIGRhdGEgcG9pbnRzIGluIHRoaXMgdG9vbC5cXG48L3A+XFxuPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPjxwPlxcbiAgICA8c3Ryb25nPk5vdGU6PC9zdHJvbmc+IFBldyBjb2xsZWN0ZWQgcmF0aW5ncyBvbiBnZW5lcmFsIG9ibGlnYXRpb24gaXNzdWFuY2UgYXMgb2YgU2VwdGVtYmVyXFxuICAgIDIwMTggYW5kIFNlcHRlbWJlciAyMDE1LiBJZiB0aGUgc3RhdGUgZG9lcyBub3QgaXNzdWUgR08gYm9uZHMsIHRoZSByYXRpbmdcXG4gICAgb24gdGhlIHNlbmlvci1tb3N0IHRheC1iYWNrZWQgaXNzdWFuY2Ugd2FzIHVzZWQgaW5zdGVhZC4gSW4gYWRkaXRpb24gdG9cXG4gICAgUyZhbXA7UCwgdGhlcmUgYXJlIHR3byBvdGhlciBtYWpvciBjcmVkaXQgcmF0aW5nIGFnZW5jaWVzOiBNb29keeKAmXMgYW5kXFxuICAgIEZpdGNoLiBUaGVyZSBpcyBsaXR0bGUgdmFyaWF0aW9uIGluIHJhdGluZ3MgYW1vbmcgdGhlIHRocmVlIGFnZW5jaWVzLlxcbjwvcD48L2Rpdj5cXG48ZGl2IGNsYXNzPVxcXCJwY3QtZW5kbm90ZXNcXFwiPlxcbiAgICBcXG4gICAgPGRpdiBpZD1cXFwiZWRuMVxcXCI+XFxuICAgICAgICA8cD5cXG4gMS4gXFxuICAgICAgICAgICAgVGhlIFBldyBDaGFyaXRhYmxlIFRydXN0cywg4oCcU3RyYXRlZ2llcyBmb3IgTWFuYWdpbmcgU3RhdGUgRGVidOKAnVxcbiAgICAgICAgICAgICgyMDE3KSxcXG4gICAgICAgICAgICA8YVxcbiAgICAgICAgICAgICAgICBocmVmPVxcXCJodHRwOi8vd3d3LnBld3RydXN0cy5vcmcvZW4vcmVzZWFyY2gtYW5kLWFuYWx5c2lzL3JlcG9ydHMvMjAxNy8wNi9zdHJhdGVnaWVzLWZvci1tYW5hZ2luZy1zdGF0ZS1kZWJ0XFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgaHR0cDovL3d3dy5wZXd0cnVzdHMub3JnL2VuL3Jlc2VhcmNoLWFuZC1hbmFseXNpcy9yZXBvcnRzLzIwMTcvMDYvc3RyYXRlZ2llcy1mb3ItbWFuYWdpbmctc3RhdGUtZGVidDwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG4yXFxcIj5cXG4gICAgICAgIDxwPlxcbiAyLiBcXG4gICAgICAgICAgICBJYmlkLlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgXFxuICAgIDxkaXYgaWQ9XFxcImVkbjRcXFwiPlxcbiAgICAgICAgPHA+XFxuIDMuIFxcbiAgICAgICAgICAgIEZvciBtb3JlIGRldGFpbCBvbiBob3cgd2UgY29sbGVjdGVkIHRoZXNlIGRhdGEsIHNlZSBUaGUgUGV3XFxuICAgICAgICAgICAgQ2hhcml0YWJsZSBUcnVzdHMsIOKAnFN0cmF0ZWdpZXMgZm9yIE1hbmFnaW5nIFN0YXRlIERlYnQs4oCdXFxuICAgICAgICAgICAgbWV0aG9kb2xvZ3kuXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG41XFxcIj5cXG4gICAgICAgIDxwPlxcbiA0LiBcXG4gICAgICAgICAgICBGb3IgYSBkaXNjdXNzaW9uIG9mIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiBkZWJ0IGxpbWl0cyBhbmQgbG9jYWxcXG4gICAgICAgICAgICBib3Jyb3dpbmcsIHNlZSBELiBSb2RlcmljayBLaWV3aWV0IGFuZCBLcmlzdGluIFN6YWthbHksXFxuICAgICAgICAgICAg4oCcQ29uc3RpdHV0aW9uYWwgTGltaXRhdGlvbnMgb24gQm9ycm93aW5nOiBBbiBBbmFseXNpcyBvZiBTdGF0ZVxcbkJvbmRlZCBJbmRlYnRlZG5lc3Ms4oCdICAgICAgICAgICAgPGNpdGU+VGhlIEpvdXJuYWwgb2YgTGF3LCBFY29ub21pY3MgJmFtcDsgT3JnYW5pemF0aW9uIDwvY2l0ZT4xMiwgbm8uIDFcXG4gICAgICAgICAgICAoMTk5Nik6IDYyLTk3LFxcbiAgICAgICAgICAgIDxhXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcImh0dHBzOi8vd3d3LmpzdG9yLm9yZy9zdGFibGUvNzY1MDM5P3NlcT0xI3BhZ2Vfc2Nhbl90YWJfY29udGVudHNcXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICBodHRwczovL3d3dy5qc3Rvci5vcmcvc3RhYmxlLzc2NTAzOT9zZXE9MSNwYWdlX3NjYW5fdGFiX2NvbnRlbnRzPC9hPi5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjZcXFwiPlxcbiAgICAgICAgPHA+XFxuIDUuIFxcbiAgICAgICAgICAgIE9uZSBzdHVkeSBmb3VuZCB0aGF0IGFzIGVjb25vbWljIHZvbGF0aWxpdHkgaW5jcmVhc2VzLCBzdGF0ZXNcXG4gICAgICAgICAgICBwcmVmZXIgdG8gcGF5IGZvciBpbmZyYXN0cnVjdHVyZSBwcm9qZWN0cyB3aXRoIGNhc2ggcmF0aGVyIHRoYW5cXG4gICAgICAgICAgICB0aHJvdWdoIGZpbmFuY2luZy4gV2VuIFdhbmcsIFlpbGluIEhvdSwgYW5kIFdpbGxpYW0gRHVuY29tZSxcXG4gICAgICAgICAgICDigJxEZXRlcm1pbmFudHMgb2YgUGF5LWFzLVlvdS1HbyBGaW5hbmNpbmcgb2YgQ2FwaXRhbCBQcm9qZWN0czpcXG4gICAgICAgICAgICBFdmlkZW5jZSBGcm9tIHRoZSBTdGF0ZXMs4oCdIDxjaXRlPlB1YmxpYyBCdWRnZXRpbmcgJmFtcDsgRmluYW5jZSA8L2NpdGU+XFxuICAgICAgICAgICAgMjcsIG5vLiA0ICgyMDA3KTogMTgtNDIsXFxuICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly9kb2kub3JnLzEwLjExMTEvai4xNTQwLTU4NTAuMjAwNy4wMDg5Mi54XFxcIj5cXG4gICAgICAgICAgICAgICAgaHR0cHM6Ly9kb2kub3JnLzEwLjExMTEvai4xNTQwLTU4NTAuMjAwNy4wMDg5Mi54PC9hPi5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjdcXFwiPlxcbiAgICAgICAgPHA+XFxuIDYuIFxcbiAgICAgICAgICAgIFRoZSBQZXcgQ2hhcml0YWJsZSBUcnVzdHMsIOKAnFRheCBSZXZlbnVlIFZvbGF0aWxpdHkgVmFyaWVzIEFjcm9zc1xcbiAgICAgICAgICAgIFN0YXRlcywgUmV2ZW51ZSBTdHJlYW1zLOKAnSBhY2Nlc3NlZCBTZXB0LiAxMCwgMjAxOCxcXG4gICAgICAgICAgICA8YVxcbiAgICAgICAgICAgICAgICBocmVmPVxcXCJodHRwOi8vd3d3LnBld3RydXN0cy5vcmcvZW4vbXVsdGltZWRpYS9kYXRhLXZpc3VhbGl6YXRpb25zLzIwMTQvZmlzY2FsLTUwI2luZDZcXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICBodHRwOi8vd3d3LnBld3RydXN0cy5vcmcvZW4vbXVsdGltZWRpYS9kYXRhLXZpc3VhbGl6YXRpb25zLzIwMTQvZmlzY2FsLTUwI2luZDY8L2E+LlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuOFxcXCI+XFxuICAgICAgICA8cD5cXG4gNy4gXFxuICAgICAgICAgICAgUm9uYWxkIEMuIEZpc2hlciBhbmQgUm9iZXJ0IFcuIFdhc3NtZXIsIOKAnFRoZSBJc3N1YW5jZSBvZiBTdGF0ZSBhbmRcXG5Mb2NhbCBEZWJ0IER1cmluZyB0aGUgVW5pdGVkIFN0YXRlcyBHcmVhdCBSZWNlc3Npb24s4oCdICAgICAgICAgICAgPGNpdGU+TmF0aW9uYWwgVGF4IEpvdXJuYWw8L2NpdGU+IDY3LCBuby4gMSAoMjAxNCk6IDExMy01MCxcXG4gICAgICAgICAgICA8YVxcbiAgICAgICAgICAgICAgICBocmVmPVxcXCJodHRwczovL2lkZWFzLnJlcGVjLm9yZy9hL250ai9qb3VybmwvdjY3eTIwMTRpMXAxMTMtMTUwLmh0bWxcXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICBodHRwczovL2lkZWFzLnJlcGVjLm9yZy9hL250ai9qb3VybmwvdjY3eTIwMTRpMXAxMTMtMTUwLmh0bWw8L2E+XFxuICAgICAgICAgICAgOyBSb25hbGQgQy4gRmlzaGVyIGFuZCBSb2JlcnQgVy4gV2Fzc21lciwg4oCcQW4gQW5hbHlzaXMgb2ZcXG5TdGF0ZS1Mb2NhbCBHb3Zlcm5tZW50IENhcGl0YWwgRXhwZW5kaXR1cmUgRHVyaW5nIHRoZSAyMDAwcyzigJ0gICAgICAgICAgICA8Y2l0ZT5QdWJsaWMgQnVkZ2V0aW5nICZhbXA7IEZpbmFuY2U8L2NpdGU+IDM1LCBuby4gMSAoMjAxNSk6IDMtMjgsXFxuICAgICAgICAgICAgPGFcXG4gICAgICAgICAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly9vbmxpbmVsaWJyYXJ5LndpbGV5LmNvbS9kb2kvYWJzLzEwLjExMTEvcGJhZi4xMjA2MlxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vb25saW5lbGlicmFyeS53aWxleS5jb20vZG9pL2Ficy8xMC4xMTExL3BiYWYuMTIwNjI8L2E+LlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuOVxcXCI+XFxuICAgICAgICA8cD5cXG4gOC4gXFxuICAgICAgICAgICAgVGhlIE5hdGlvbmFsIEJ1cmVhdSBvZiBFY29ub21pYyBSZXNlYXJjaCwg4oCcVVMgQnVzaW5lc3MgQ3ljbGVcXG4gICAgICAgICAgICBFeHBhbnNpb25zIGFuZCBDb250cmFjdGlvbnMs4oCdIFNlcHQuIDIwLCAyMDEwLFxcbiAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHA6Ly93d3cubmJlci5vcmcvY3ljbGVzLmh0bWxcXFwiPlxcbiAgICAgICAgICAgICAgICBodHRwOi8vd3d3Lm5iZXIub3JnL2N5Y2xlcy5odG1sPC9hPi5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjEwXFxcIj5cXG4gICAgICAgIDxwPlxcbiA5LiBcXG4gICAgICAgICAgICBKZW5uaWZlciBXZWluZXIsIOKAnEFzc2Vzc2luZyB0aGUgQWZmb3JkYWJpbGl0eSBvZiBTdGF0ZSBEZWJ0LOKAnSBOZXdcXG4gICAgICAgICAgICBFbmdsYW5kIFB1YmxpYyBQb2xpY3kgQ2VudGVyIGF0IHRoZSBGZWRlcmFsIFJlc2VydmUgQmFuayBvZiBCb3N0b25cXG4gICAgICAgICAgICAoMjAxMyksXFxuICAgICAgICAgICAgPGFcXG4gICAgICAgICAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cuYm9zdG9uZmVkLm9yZy9wdWJsaWNhdGlvbnMvbmV3LWVuZ2xhbmQtcHVibGljLXBvbGljeS1jZW50ZXItcmVzZWFyY2gtcmVwb3J0LzIwMTMvYXNzZXNzaW5nLXRoZS1hZmZvcmRhYmlsaXR5LW9mLXN0YXRlLWRlYnQuYXNweFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmJvc3RvbmZlZC5vcmcvcHVibGljYXRpb25zL25ldy1lbmdsYW5kLXB1YmxpYy1wb2xpY3ktY2VudGVyLXJlc2VhcmNoLXJlcG9ydC8yMDEzL2Fzc2Vzc2luZy10aGUtYWZmb3JkYWJpbGl0eS1vZi1zdGF0ZS1kZWJ0LmFzcHg8L2E+LlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuMTFcXFwiPlxcbiAgICAgICAgPHA+XFxuIDEwLiBcXG4gICAgICAgICAgICBJbiBDQUZScywgc3RhdGVzIHJlcG9ydCBkZWJ0IHNlcnZpY2UgcGF5bWVudHMgZnJvbSBhIHZhcmlldHkgb2ZcXG4gICAgICAgICAgICBmdW5kcy4gVXNpbmcgdGhpcyBpbmZvcm1hdGlvbiB0byBjb25zdHJ1Y3QgYSBjb21wYXJhYmxlIG1lYXN1cmUgb2ZcXG4gICAgICAgICAgICBkZWJ0IHNlcnZpY2UgYXMgYSBzaGFyZSBvZiBnZW5lcmFsIGZ1bmQgcmV2ZW51ZSByZXF1aXJlcyBhIGRldGFpbGVkXFxuICAgICAgICAgICAgdW5kZXJzdGFuZGluZyBvZiBlYWNoIHN0YXRl4oCZcyByZXBvcnRpbmcgcHJhY3RpY2VzLlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuMTJcXFwiPlxcbiAgICAgICAgPHA+XFxuIDExLiBcXG4gICAgICAgICAgICBKZW5uaWZlciBXZWluZXIsIOKAnEEgR3VpZGUgdG8gU3RhdGUgRGVidCBBZmZvcmRhYmlsaXR5IFN0dWRpZXM6XFxuICAgICAgICAgICAgQ29tbW9uIEVsZW1lbnRzIGFuZCBCZXN0IFByYWN0aWNlcyzigJ0gTmV3IEVuZ2xhbmQgUHVibGljIFBvbGljeVxcbiAgICAgICAgICAgIENlbnRlciBhdCB0aGUgRmVkZXJhbCBSZXNlcnZlIEJhbmsgb2YgQm9zdG9uICgyMDEzKSxcXG4gICAgICAgICAgICA8YVxcbiAgICAgICAgICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dy5ib3N0b25mZWQub3JnL3B1YmxpY2F0aW9ucy9uZXctZW5nbGFuZC1wdWJsaWMtcG9saWN5LWNlbnRlci1wb2xpY3ktYnJpZWYvMjAxMy9hLWd1aWRlLXRvLXN0YXRlLWRlYnQtYWZmb3JkYWJpbGl0eS1zdHVkaWVzLWNvbW1vbi1lbGVtZW50cy1hbmQtYmVzdC1wcmFjdGljZXMuYXNweFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmJvc3RvbmZlZC5vcmcvcHVibGljYXRpb25zL25ldy1lbmdsYW5kLXB1YmxpYy1wb2xpY3ktY2VudGVyLXBvbGljeS1icmllZi8yMDEzL2EtZ3VpZGUtdG8tc3RhdGUtZGVidC1hZmZvcmRhYmlsaXR5LXN0dWRpZXMtY29tbW9uLWVsZW1lbnRzLWFuZC1iZXN0LXByYWN0aWNlcy5hc3B4PC9hPlxcbiAgICAgICAgICAgIDsgQ2hhcmxlcyBCcmVjaGVyLCBLdXJ0IFJpY2h3ZXJnZXIsIGFuZCBNYXJjaWEgVmFuIFdhZ25lciwg4oCcQW5cXG5BcHByb2FjaCB0byBNZWFzdXJpbmcgdGhlIEFmZm9yZGFiaWxpdHkgb2YgU3RhdGUgRGVidCzigJ0gICAgICAgICAgICA8Y2l0ZT5QdWJsaWMgQnVkZ2V0aW5nICZhbXA7IEZpbmFuY2U8L2NpdGU+IDIzLCBuby4gNCAoMjAwMyk6IDY1LTg1LFxcbiAgICAgICAgICAgIDxhXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcImh0dHBzOi8vb25saW5lbGlicmFyeS53aWxleS5jb20vZG9pL2Ficy8xMC4xMTExL2ouMDI3NS0xMTAwLjIwMDMuMDIzMDQwMDQueFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vb25saW5lbGlicmFyeS53aWxleS5jb20vZG9pL2Ficy8xMC4xMTExL2ouMDI3NS0xMTAwLjIwMDMuMDIzMDQwMDQueDwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG4xM1xcXCI+XFxuICAgICAgICA8cD5cXG4gMTIuIFxcbiAgICAgICAgICAgIFcuIEJhcnRsZXkgSGlsZHJldGggYW5kIEdlcmFsZCBKLiBNaWxsZXIsIOKAnERlYnQgYW5kIHRoZSBMb2NhbFxcbiAgICAgICAgICAgIEVjb25vbXk6IFByb2JsZW1zIGluIEJlbmNobWFya2luZyBMb2NhbCBHb3Zlcm5tZW50IERlYnRcXG4gICAgICAgICAgICBBZmZvcmRhYmlsaXR5LOKAnSA8Y2l0ZT5QdWJsaWMgQnVkZ2V0aW5nICZhbXA7IEZpbmFuY2U8L2NpdGU+IDIyLCBuby4gNFxcbiAgICAgICAgICAgICgyMDAzKTogOTktMTEzLFxcbiAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vZG9pLm9yZy8xMC4xMTExLzE1NDAtNTg1MC4wMDA5MVxcXCI+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vZG9pLm9yZy8xMC4xMTExLzE1NDAtNTg1MC4wMDA5MTwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG4xNFxcXCI+XFxuICAgICAgICA8cD5cXG4gMTMuIFxcbiAgICAgICAgICAgIENvbXBvbmVudCB1bml0cyBhcmUgZW50aXRpZXMgdGhhdCBhcmUgbGVnYWxseSBzZXBhcmF0ZSBmcm9tIGEgc3RhdGVcXG4gICAgICAgICAgICBidXQgcGVyZm9ybSBzdGF0ZSBmdW5jdGlvbnMuIFRoZXkgdHlwaWNhbGx5IGluY2x1ZGUgYm9kaWVzIHN1Y2ggYXNcXG4gICAgICAgICAgICBob3VzaW5nIGF1dGhvcml0aWVzLCBlY29ub21pYyBkZXZlbG9wbWVudCBjb3Jwb3JhdGlvbnMsIGFuZFxcbiAgICAgICAgICAgIHVuaXZlcnNpdGllcy5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjE1XFxcIj5cXG4gICAgICAgIDxwPlxcbiAxNC4gXFxuICAgICAgICAgICAgV2VpbmVyLCDigJxBIEd1aWRlLuKAnVxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuMTZcXFwiPlxcbiAgICAgICAgPHA+XFxuIDE1LiBcXG4gICAgICAgICAgICBCbyBaaGFvIGFuZCBXZW4gV2FuZywg4oCcVHJhbnNwYXJlbmN5IGluIFN0YXRlIERlYnQgRGlzY2xvc3VyZSzigJ0gTmV3XFxuICAgICAgICAgICAgRW5nbGFuZCBQdWJsaWMgUG9saWN5IENlbnRlciBhdCB0aGUgRmVkZXJhbCBSZXNlcnZlIEJhbmsgb2YgQm9zdG9uXFxuICAgICAgICAgICAgKDIwMTcpLFxcbiAgICAgICAgICAgIDxhXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcImh0dHBzOi8vd3d3LmJvc3RvbmZlZC5vcmcvcHVibGljYXRpb25zL3Jlc2VhcmNoLWRlcGFydG1lbnQtd29ya2luZy1wYXBlci8yMDE3L3RyYW5zcGFyZW5jeS1pbi1zdGF0ZS1kZWJ0LWRpc2Nsb3N1cmUuYXNweFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmJvc3RvbmZlZC5vcmcvcHVibGljYXRpb25zL3Jlc2VhcmNoLWRlcGFydG1lbnQtd29ya2luZy1wYXBlci8yMDE3L3RyYW5zcGFyZW5jeS1pbi1zdGF0ZS1kZWJ0LWRpc2Nsb3N1cmUuYXNweDwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblxcbiAgICA8L2Rpdj5cXG4gICAgPC9zZWN0aW9uPlwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8Zm9vdGVyPlxcblxcdFxcdDxkaXY+XFxuXFx0XFx0XFx0PHA+PHN0cm9uZz5Eb3dubG9hZCByZXNvdXJjZXM6PC9zdHJvbmc+XFxuXFx0XFx0XFx0XFx0XFx0PGEgY2xhc3M9XFxcInBjdC1kb3dubG9hZFxcXCIgaHJlZj1cXFwiXFxcIj5SZXNvdXJjZSAxPC9hPlxcblxcdFxcdFxcdFxcdFxcdDxhIGNsYXNzPVxcXCJwY3QtZG93bmxvYWRcXFwiIGhyZWY9XFxcIlxcXCI+UmVzb3VyY2UgMjwvYT5cXG5cXHRcXHRcXHRcXHQ8L3A+PC9kaXY+XFxuPC9mb290ZXI+XCI7IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInN0YXRpY1wiOlwic3JjLWNzcy0tc3RhdGljXCJ9OyJdLCJzb3VyY2VSb290IjoiIn0=
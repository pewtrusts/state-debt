!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=38)}([function(e,t,n){e.exports={dropdownWrapper:"src-views-fifty-state-selections--dropdownWrapper",dropdownOuter:"src-views-fifty-state-selections--dropdownOuter",dropdownInner:"src-views-fifty-state-selections--dropdownInner",label:"src-views-fifty-state-selections--label",sortActive:"src-views-fifty-state-selections--sortActive",labelSort:"src-views-fifty-state-selections--labelSort",sortBy:"src-views-fifty-state-selections--sortBy"}},function(e,t,n){e.exports={compareColor1:"src-components-comparison--compareColor1",compareColor2:"src-components-comparison--compareColor2",chartContainer:"src-components-comparison--chartContainer",chartLabel:"src-components-comparison--chartLabel",chartLabelText:"src-components-comparison--chartLabelText",chartLabel1:"src-components-comparison--chartLabel1",chartLabel2:"src-components-comparison--chartLabel2",barContainer:"src-components-comparison--barContainer",barContainer1:"src-components-comparison--barContainer1",barContainer2:"src-components-comparison--barContainer2",dataLabel:"src-components-comparison--dataLabel"}},function(e,t,n){e.exports={groupHeader:"src-views-fifty-state--groupHeader",barLabel:"src-views-fifty-state--barLabel",groupDiv:"src-views-fifty-state--groupDiv",barContainer:"src-views-fifty-state--barContainer",isHighlighted:"src-views-fifty-state--isHighlighted",dataLabel:"src-views-fifty-state--dataLabel",placeHolder:"src-views-fifty-state--placeHolder"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(6);var a=function(){function e(t,n){var r=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"!=typeof t)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=t,this.model=n.model,this.parent=n.parent,this.renderToSelector=n.renderToSelector,this.container=i.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.el=this.prerender(arguments),this.isReady=new Promise(function(e,t){r.resolve=e,r.reject=t})}return r(e,[{key:"prerender",value:function(){var e=i.DOMHelpers.q(this.selector);return e&&!this.rerender?(this.prerendered=!0,e):e?(e.innerHTML="",e):i.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),e}();t.default=a},function(e,t,n){e.exports={groupHeader:"src-views-state-comparison--groupHeader",typeContainer:"src-views-state-comparison--typeContainer","credit-rating":"src-views-state-comparison--credit-rating",typeDiv:"src-views-state-comparison--typeDiv",typeHeader:"src-views-state-comparison--typeHeader",debt_limit_type:"src-views-state-comparison--debt_limit_type",credit2015:"src-views-state-comparison--credit2015",credit2018:"src-views-state-comparison--credit2018",autoComplete0:"src-views-state-comparison--autoComplete0","autoComplete_wrapper-0":"src-views-state-comparison--autoComplete_wrapper-0",autoComplete1:"src-views-state-comparison--autoComplete1","autoComplete_wrapper-1":"src-views-state-comparison--autoComplete_wrapper-1",withTooltip:"src-views-state-comparison--withTooltip"}},function(e,t,n){const r=n(10),i={};function a(){console.log(i)}Array.prototype.compare=Array.prototype.compare||function(e){if(this.length!=e.length)return!1;if(0===this.length&&0===e.length)return!0;console.log("in compare"),console.log(this);for(var t=0;t<e.length;t++)if(this[t]!==e[t])return!1;return!0},t.stateModule={logState:a,getState:function(e){return void 0!==i[e]?i[e][0]:void 0},getPreviousState:function(e){return void 0!==i[e]&&void 0!==i[e][1]?i[e][1]:void 0},setState:function(e,t){void 0===i[e]?(i[e]=[t],r.publish(e,t),a()):("string"==typeof t||"number"==typeof t?i[e][0]!==t:!Array.isArray(t)||!Array.isArray(i[e][0])||!t.compare(i[e][0]))&&(i[e].unshift(t),r.publish(e,t),a(),i[e].length>2&&(i[e].length=2))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GTMPush=function(e){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:e})},t.publishWindowResize=function(e){var t;window.addEventListener("resize",function(){t||(t=setTimeout(function(){e.setState("resize",document.documentElement.clientWidth),t=null},350))},!1)};t.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(e,t){var n=this,r=t||0;return t&&(this.style.transition="opacity "+t+"s ease-in-out"),new Promise(function(t){var i=window.getComputedStyle(n).getPropertyValue("transition-duration")||r,a=1e3*parseFloat(i);n.fadeOutContent(),setTimeout(function(){n.innerHTML=e,n.classList.remove("no-opacity"),t(!0)},a)})})),t.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(e,t){if(this.length<=e)return this;var n=this.substr(0,e-1);return(t?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var e,t=0;if(0===this.length)return t;for(e=0;e<this.length;e++)t=(t<<5)-t+this.charCodeAt(e),t|=0;return t})),t.DOMHelpers={c:function(e){if(-1!==e.indexOf(".")||-1!==e.indexOf("#")){var t=e.match(/\.([^#.]*)/g)||[],n=e.match(/#([^.]*)/),r=e.match(/^([^.#]+)/),i=document.createElement(r[0]);return t.forEach(function(e){i.classList.add(e.replace(".",""))}),null!==n&&i.setAttribute("id",n[1]),i}return document.createElement(e)},q:function(e){return document.querySelector(e)},qa:function(e){return document.querySelectorAll(e)}}},function(e,t,n){var r=n(33),i=n(10),a={};function o(e,t){var n=r(t.toString());return{token:"sub"+r(e+t),fn:n}}e.exports={logSubs:function(){console.log(a)},setSubs:function(e){e.forEach(function(e){var t=e[0],n=e[1],r=o(t,n);if(void 0===a[r.fn]&&(a[r.fn]={}),void 0!==a[r.fn][t])throw"Subscription token is already in use.";a[r.fn][t]=i.subscribe(t,n)})},cancelSub:function(e,t){var n=o(e,t);if(void 0===a[n.fn]||void 0===a[n.fn][e])throw"Subscription does not exist.";i.unsubscribe(a[n.fn][e]),delete a[n.fn][e],0===Object.keys(a[n.fn]).length&&delete a[n.fn]}}},function(e,t){e.exports="<p><strong>Credit rating:</strong> Standard &amp; Poor’s general obligation credit rating.</p>\n"},function(e,t,n){e.exports={bar:"src-components-bar--bar",barColor1:"src-components-bar--barColor1",barColor2:"src-components-bar--barColor2"}},function(e,t,n){(function(e){!function(n,r){"use strict";var i={};n.PubSub=i;var a=n.define;!function(e){var t={},n=-1;function r(e){var t;for(t in e)if(e.hasOwnProperty(t))return!0;return!1}function i(e,t,n){try{e(t,n)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function a(e,t,n){e(t,n)}function o(e,n,r,o){var s,p=t[n],l=o?a:i;if(t.hasOwnProperty(n))for(s in p)p.hasOwnProperty(s)&&l(p[s],e,r)}function s(e,n,i,a){var s=function(e,t,n){return function(){var r=String(e),i=r.lastIndexOf(".");for(o(e,e,t,n);-1!==i;)r=r.substr(0,i),i=r.lastIndexOf("."),o(e,r,t,n)}}(e="symbol"==typeof e?e.toString():e,n,a),p=function(e){var n=String(e),i=Boolean(t.hasOwnProperty(n)&&r(t[n])),a=n.lastIndexOf(".");for(;!i&&-1!==a;)n=n.substr(0,a),a=n.lastIndexOf("."),i=Boolean(t.hasOwnProperty(n)&&r(t[n]));return i}(e);return!!p&&(!0===i?s():setTimeout(s,0),!0)}e.publish=function(t,n){return s(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return s(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,r){if("function"!=typeof r)return!1;e="symbol"==typeof e?e.toString():e,t.hasOwnProperty(e)||(t[e]={});var i="uid_"+String(++n);return t[e][i]=r,i},e.subscribeOnce=function(t,n){var r=e.subscribe(t,function(){e.unsubscribe(r),n.apply(this,arguments)});return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)t.hasOwnProperty(n)&&0===n.indexOf(e)&&delete t[n]},e.unsubscribe=function(n){var r,i,a,o="string"==typeof n&&(t.hasOwnProperty(n)||function(e){var n;for(n in t)if(t.hasOwnProperty(n)&&0===n.indexOf(e))return!0;return!1}(n)),s=!o&&"string"==typeof n,p="function"==typeof n,l=!1;if(!o){for(r in t)if(t.hasOwnProperty(r)){if(i=t[r],s&&i[n]){delete i[n],l=n;break}if(p)for(a in i)i.hasOwnProperty(a)&&i[a]===n&&(delete i[a],l=!0)}return l}e.clearSubscriptions(n)}}(i),"function"==typeof a&&a.amd?a(function(){return i}):(void 0!==e&&e.exports&&(t=e.exports=i),t.PubSub=i,e.exports=t=i)}("object"==typeof window&&window||this)}).call(this,n(30)(e))},function(e,t,n){var r,i,a;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),i=[],void 0===(a="function"==typeof(r=function(){"use strict";var e,t,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},r=!n.document&&!!n.postMessage,i=r&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),a=!1,o={},s=0,p={parse:function(t,r){var i=(r=r||{}).dynamicTyping||!1;if(k(i)&&(r.dynamicTypingFunction=i,i={}),r.dynamicTyping=i,r.transform=!!k(r.transform)&&r.transform,r.worker&&p.WORKERS_SUPPORTED){var l=function(){if(!p.WORKERS_SUPPORTED)return!1;if(!a&&null===p.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var t=p.SCRIPT_PATH||e;t+=(-1!==t.indexOf("?")?"&":"?")+"papaworker";var r=new n.Worker(t);return r.onmessage=v,r.id=s++,o[r.id]=r}();return l.userStep=r.step,l.userChunk=r.chunk,l.userComplete=r.complete,l.userError=r.error,r.step=k(r.step),r.chunk=k(r.chunk),r.complete=k(r.complete),r.error=k(r.error),delete r.worker,void l.postMessage({input:t,config:r,workerId:l.id})}var c=null;return p.NODE_STREAM_INPUT,"string"==typeof t?c=r.download?new d(r):new h(r):!0===t.readable&&k(t.read)&&k(t.on)?c=new f(r):(n.File&&t instanceof File||t instanceof Object)&&(c=new u(r)),c.stream(t)},unparse:function(e,t){var n=!1,r=!0,i=",",a="\r\n",o='"',s=!1;"object"==typeof t&&("string"!=typeof t.delimiter||p.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(i=t.delimiter),("boolean"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(s=t.skipEmptyLines),"string"==typeof t.newline&&(a=t.newline),"string"==typeof t.quoteChar&&(o=t.quoteChar),"boolean"==typeof t.header&&(r=t.header));var l=new RegExp(g(o),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return d(null,e,s);if("object"==typeof e[0])return d(c(e[0]),e,s)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:c(e.data[0])),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),d(e.fields||[],e.data||[],s);throw"exception: Unable to serialize unrecognized input";function c(e){if("object"!=typeof e)return[];var t=[];for(var n in e)t.push(n);return t}function d(e,t,n){var o="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var s=Array.isArray(e)&&0<e.length,p=!Array.isArray(t[0]);if(s&&r){for(var l=0;l<e.length;l++)0<l&&(o+=i),o+=u(e[l],l);0<t.length&&(o+=a)}for(var c=0;c<t.length;c++){var d=s?e.length:t[c].length,h=!1,f=s?0===Object.keys(t[c]).length:0===t[c].length;if(n&&!s&&(h="greedy"===n?""===t[c].join("").trim():1===t[c].length&&0===t[c][0].length),"greedy"===n&&s){for(var m=[],g=0;g<d;g++){var b=p?e[g]:g;m.push(t[c][b])}h=""===m.join("").trim()}if(!h){for(var v=0;v<d;v++){0<v&&!f&&(o+=i);var y=s&&p?e[v]:v;o+=u(t[c][y],v)}c<t.length-1&&(!n||0<d&&!f)&&(o+=a)}}return o}function u(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);e=e.toString().replace(l,o+o);var r="boolean"==typeof n&&n||Array.isArray(n)&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(-1<e.indexOf(t[n]))return!0;return!1}(e,p.BAD_DELIMITERS)||-1<e.indexOf(i)||" "===e.charAt(0)||" "===e.charAt(e.length-1);return r?o+e+o:e}}};if(p.RECORD_SEP=String.fromCharCode(30),p.UNIT_SEP=String.fromCharCode(31),p.BYTE_ORDER_MARK="\ufeff",p.BAD_DELIMITERS=["\r","\n",'"',p.BYTE_ORDER_MARK],p.WORKERS_SUPPORTED=!r&&!!n.Worker,p.SCRIPT_PATH=null,p.NODE_STREAM_INPUT=1,p.LocalChunkSize=10485760,p.RemoteChunkSize=5242880,p.DefaultDelimiter=",",p.Parser=b,p.ParserHandle=m,p.NetworkStreamer=d,p.FileStreamer=u,p.StringStreamer=h,p.ReadableStreamStreamer=f,n.jQuery){var l=n.jQuery;l.fn.parse=function(e){var t=e.config||{},r=[];return this.each(function(e){if("INPUT"!==l(this).prop("tagName").toUpperCase()||"file"!==l(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var i=0;i<this.files.length;i++)r.push({file:this.files[i],inputElem:this,instanceConfig:l.extend({},t)})}),i(),this;function i(){if(0!==r.length){var t,n,i,o=r[0];if(k(e.before)){var s=e.before(o.file,o.inputElem);if("object"==typeof s){if("abort"===s.action)return t=o.file,n=o.inputElem,i=s.reason,void(k(e.error)&&e.error({name:"AbortError"},t,n,i));if("skip"===s.action)return void a();"object"==typeof s.config&&(o.instanceConfig=l.extend(o.instanceConfig,s.config))}else if("skip"===s)return void a()}var c=o.instanceConfig.complete;o.instanceConfig.complete=function(e){k(c)&&c(e,o.file,o.inputElem),a()},p.parse(o.file,o.instanceConfig)}else k(e.complete)&&e.complete()}function a(){r.splice(0,1),i()}}}function c(e){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=x(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new m(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&k(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1;var a=this._partialLine+e;this._partialLine="";var o=this._handle.parse(a,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=o.meta.cursor;this._finished||(this._partialLine=a.substring(s-this._baseIndex),this._baseIndex=s),o&&o.data&&(this._rowCount+=o.data.length);var l=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(i)n.postMessage({results:o,workerId:p.WORKER_ID,finished:l});else if(k(this._config.chunk)&&!t){if(this._config.chunk(o,this._handle),this._handle.paused()||this._handle.aborted())return;o=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(o.data),this._completeResults.errors=this._completeResults.errors.concat(o.errors),this._completeResults.meta=o.meta),this._completed||!l||!k(this._config.complete)||o&&o.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),l||o&&o.meta.paused||this._nextChunk(),o}},this._sendError=function(e){k(this._config.error)?this._config.error(e):i&&this._config.error&&n.postMessage({workerId:p.WORKER_ID,error:e,finished:!1})}}function d(e){var t;(e=e||{}).chunkSize||(e.chunkSize=p.RemoteChunkSize),c.call(this,e),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),r||(t.onload=C(this._chunkLoaded,this),t.onerror=C(this._chunkError,this)),t.open("GET",this._input,!r),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var n in e)t.setRequestHeader(n,e[n])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+i),t.setRequestHeader("If-None-Match","webkit-no-cache")}try{t.send()}catch(e){this._chunkError(e.message)}r&&0===t.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var e;4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(e=t.getResponseHeader("Content-Range"))?-1:parseInt(e.substr(e.lastIndexOf("/")+1))),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(new Error(n))}}function u(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=p.LocalChunkSize),c.call(this,e);var r="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,r?((t=new FileReader).onload=C(this._chunkLoaded,this),t.onerror=C(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var i=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,i)}var a=t.readAsText(e,this._config.encoding);r||this._chunkLoaded({target:{result:a}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function h(e){var t;c.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,n=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(n)}}}function f(e){c.call(this,e=e||{});var t=[],n=!0,r=!1;this.pause=function(){c.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){c.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):n=!0},this._streamData=C(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=C(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=C(function(){this._streamCleanUp(),r=!0,this._streamData("")},this),this._streamCleanUp=C(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function m(e){var t,n,r,i=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,a=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,o=this,s=0,l=0,c=!1,d=!1,u=[],h={data:[],errors:[],meta:{}};if(k(e.step)){var f=e.step;e.step=function(t){if(h=t,y())v();else{if(v(),0===h.data.length)return;s+=t.data.length,e.preview&&s>e.preview?n.abort():f(h,o)}}}function m(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function v(){if(h&&r&&(C("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+p.DefaultDelimiter+"'"),r=!1),e.skipEmptyLines)for(var t=0;t<h.data.length;t++)m(h.data[t])&&h.data.splice(t--,1);return y()&&function(){if(h){for(var t=0;y()&&t<h.data.length;t++)for(var n=0;n<h.data[t].length;n++){var r=h.data[t][n];e.trimHeaders&&(r=r.trim()),u.push(r)}h.data.splice(0,1)}}(),function(){if(!h||!e.header&&!e.dynamicTyping&&!e.transform)return h;for(var t=0;t<h.data.length;t++){var n,r=e.header?{}:[];for(n=0;n<h.data[t].length;n++){var i=n,a=h.data[t][n];e.header&&(i=n>=u.length?"__parsed_extra":u[n]),e.transform&&(a=e.transform(a,i)),a=w(i,a),"__parsed_extra"===i?(r[i]=r[i]||[],r[i].push(a)):r[i]=a}h.data[t]=r,e.header&&(n>u.length?C("FieldMismatch","TooManyFields","Too many fields: expected "+u.length+" fields but parsed "+n,l+t):n<u.length&&C("FieldMismatch","TooFewFields","Too few fields: expected "+u.length+" fields but parsed "+n,l+t))}return e.header&&h.meta&&(h.meta.fields=u),l+=h.data.length,h}()}function y(){return e.header&&0===u.length}function w(t,n){return r=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[r]&&(e.dynamicTyping[r]=e.dynamicTypingFunction(r)),!0===(e.dynamicTyping[r]||e.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(i.test(n)?parseFloat(n):a.test(n)?new Date(n):""===n?null:n):n;var r}function C(e,t,n,r){h.errors.push({type:e,code:t,message:n,row:r})}this.parse=function(i,a,o){var s=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substr(0,1048576);var n=new RegExp(g(t)+"([^]*?)"+g(t),"gm"),r=(e=e.replace(n,"")).split("\r"),i=e.split("\n"),a=1<i.length&&i[0].length<r[0].length;if(1===r.length||a)return"\n";for(var o=0,s=0;s<r.length;s++)"\n"===r[s][0]&&o++;return o>=r.length/2?"\r\n":"\r"}(i,s)),r=!1,e.delimiter)k(e.delimiter)&&(e.delimiter=e.delimiter(i),h.meta.delimiter=e.delimiter);else{var l=function(t,n,r,i){for(var a,o,s,l=[",","\t","|",";",p.RECORD_SEP,p.UNIT_SEP],c=0;c<l.length;c++){var d=l[c],u=0,h=0,f=0;s=void 0;for(var g=new b({comments:i,delimiter:d,newline:n,preview:10}).parse(t),v=0;v<g.data.length;v++)if(r&&m(g.data[v]))f++;else{var y=g.data[v].length;h+=y,void 0!==s?1<y&&(u+=Math.abs(y-s),s=y):s=0}0<g.data.length&&(h/=g.data.length-f),(void 0===o||o<u)&&1.99<h&&(o=u,a=d)}return{successful:!!(e.delimiter=a),bestDelimiter:a}}(i,e.newline,e.skipEmptyLines,e.comments);l.successful?e.delimiter=l.bestDelimiter:(r=!0,e.delimiter=p.DefaultDelimiter),h.meta.delimiter=e.delimiter}var d=x(e);return e.preview&&e.header&&d.preview++,t=i,n=new b(d),h=n.parse(t,a,o),v(),c?{meta:{paused:!0}}:h||{meta:{paused:!1}}},this.paused=function(){return c},this.pause=function(){c=!0,n.abort(),t=t.substr(n.getCharIndex())},this.resume=function(){c=!1,o.streamer.parseChunk(t,!0)},this.aborted=function(){return d},this.abort=function(){d=!0,n.abort(),h.meta.aborted=!0,k(e.complete)&&e.complete(h),t=""}}function g(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function b(e){var t,n=(e=e||{}).delimiter,r=e.newline,i=e.comments,a=e.step,o=e.preview,s=e.fastMode,l=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(l=e.escapeChar),("string"!=typeof n||-1<p.BAD_DELIMITERS.indexOf(n))&&(n=","),i===n)throw"Comment character same as delimiter";!0===i?i="#":("string"!=typeof i||-1<p.BAD_DELIMITERS.indexOf(i))&&(i=!1),"\n"!==r&&"\r"!==r&&"\r\n"!==r&&(r="\n");var c=0,d=!1;this.parse=function(e,p,u){if("string"!=typeof e)throw"Input must be a string";var h=e.length,f=n.length,m=r.length,b=i.length,v=k(a),y=[],w=[],x=[],C=c=0;if(!e)return M();if(s||!1!==s&&-1===e.indexOf(t)){for(var S=e.split(r),E=0;E<S.length;E++){if(x=S[E],c+=x.length,E!==S.length-1)c+=r.length;else if(u)return M();if(!i||x.substr(0,b)!==i){if(v){if(y=[],D(x.split(n)),j(),d)return M()}else D(x.split(n));if(o&&o<=E)return y=y.slice(0,o),M(!0)}}return M()}for(var _,O=e.indexOf(n,c),L=e.indexOf(r,c),T=new RegExp(g(l)+g(t),"g");;)if(e[c]!==t)if(i&&0===x.length&&e.substr(c,b)===i){if(-1===L)return M();c=L+m,L=e.indexOf(r,c),O=e.indexOf(n,c)}else if(-1!==O&&(O<L||-1===L))x.push(e.substring(c,O)),c=O+f,O=e.indexOf(n,c);else{if(-1===L)break;if(x.push(e.substring(c,L)),B(L+m),v&&(j(),d))return M();if(o&&y.length>=o)return M(!0)}else for(_=c,c++;;){if(-1===(_=e.indexOf(t,_+1)))return u||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:y.length,index:c}),R();if(_===h-1)return R(e.substring(c,_).replace(T,t));if(t!==l||e[_+1]!==l){if(t===l||0===_||e[_-1]!==l){var A=I(-1===L?O:Math.min(O,L));if(e[_+1+A]===n){x.push(e.substring(c,_).replace(T,t)),c=_+1+A+f,O=e.indexOf(n,c),L=e.indexOf(r,c);break}var P=I(L);if(e.substr(_+1+P,m)===r){if(x.push(e.substring(c,_).replace(T,t)),B(_+1+P+m),O=e.indexOf(n,c),v&&(j(),d))return M();if(o&&y.length>=o)return M(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:y.length,index:c}),_++}}else _++}return R();function D(e){y.push(e),C=c}function I(t){var n=0;if(-1!==t){var r=e.substring(_+1,t);r&&""===r.trim()&&(n=r.length)}return n}function R(t){return u||(void 0===t&&(t=e.substr(c)),x.push(t),c=h,D(x),v&&j()),M()}function B(t){c=t,D(x),x=[],L=e.indexOf(r,c)}function M(e){return{data:y,errors:w,meta:{delimiter:n,linebreak:r,aborted:d,truncated:!!e,cursor:C+(p||0)}}}function j(){a(M()),y=[],w=[]}},this.abort=function(){d=!0},this.getCharIndex=function(){return c}}function v(e){var t=e.data,n=o[t.workerId],r=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var i={abort:function(){r=!0,y(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(k(n.userStep)){for(var a=0;a<t.results.data.length&&(n.userStep({data:[t.results.data[a]],errors:t.results.errors,meta:t.results.meta},i),!r);a++);delete t.results}else k(n.userChunk)&&(n.userChunk(t.results,i,t.file),delete t.results)}t.finished&&!r&&y(t.workerId,t.results)}function y(e,t){var n=o[e];k(n.userComplete)&&n.userComplete(t),n.terminate(),delete o[e]}function w(){throw"Not implemented."}function x(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var n in e)t[n]=x(e[n]);return t}function C(e,t){return function(){e.apply(t,arguments)}}function k(e){return"function"==typeof e}return i?n.onmessage=function(e){var t=e.data;if(void 0===p.WORKER_ID&&t&&(p.WORKER_ID=t.workerId),"string"==typeof t.input)n.postMessage({workerId:p.WORKER_ID,results:p.parse(t.input,t.config),finished:!0});else if(n.File&&t.input instanceof File||t.input instanceof Object){var r=p.parse(t.input,t.config);r&&n.postMessage({workerId:p.WORKER_ID,results:r,finished:!0})}}:p.WORKERS_SUPPORTED&&(t=document.getElementsByTagName("script"),e=t.length?t[t.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){a=!0},!0):a=!0),(d.prototype=Object.create(c.prototype)).constructor=d,(u.prototype=Object.create(c.prototype)).constructor=u,(h.prototype=Object.create(h.prototype)).constructor=h,(f.prototype=Object.create(c.prototype)).constructor=f,p})?r.apply(t,i):r)||(e.exports=a)},function(e,t,n){e.exports=n.p+"data/data.csv?v=5753dc"},function(e){e.exports=["Borrowing Practices","Fiscal Conditions and Infrastructure Needs","Debt Levels","Credit Rating"]},function(e){e.exports=[{field:"debt_limit_type",type:"text",group:1,order:1,label:"General Obligation Debt Limit Type",tooltip:"The kind of limit the state has on GO borrowing, one of the most common types of debt issued by states. These limits affect how states borrow."},{field:"centralization",type:"percent",group:1,order:2,label:"Centralization",tooltip:"The degree to which borrowing is done by the state itself rather than by a component unit—a legally separate entity such as a housing or turnpike authority. Higher values mean the state is more centralized."},{field:"state_local_division",type:"percent",group:1,order:3,label:"State-Local Borrowing Division",tooltip:"The share of combined state and local debt issued by local governments. States where local governments borrow less tend to have higher debt levels."},{field:"revenue_volatility",type:"number",group:2,order:1,label:"Revenue Volatility",tooltip:"A measure of variation in tax collections. Low scores mean that revenue levels are similar from year to year, while high scores indicate that revenue varies more. More volatile states should plan for greater uncertainty."},{field:"ten_year_pop_growth",type:"percent",group:2,order:2,label:"Population Growth",tooltip:"The 10-year population growth rate from 2008 to 2017. Growing populations are associated with greater infrastructure investment."},{field:"debt_per_capita",type:"currency",group:3,order:1,label:"Debt per Capita",tooltip:"Total debt relative to a state’s population."},{field:"debt_percent_SPI",type:"percent",group:3,order:2,label:"Debt as a Percentage of SPI",tooltip:"Total debt relative to state personal income, a measure of economic resources.",isDefaultSelection:!0},{field:"credit2015",type:"text",group:4,order:1,label:2015,tooltip:"Standard & Poor’s general obligation credit rating."},{field:"credit2018",type:"text",group:4,order:2,label:2018,tooltip:"Standard & Poor’s general obligation credit rating."},{field:"census",type:"text",group:null,order:null,label:"Census region and division",tooltip:null}]},function(e){e.exports={census:["N/A","Northeast—New England","Northeast—Middle Atlantic","Midwest—East North Central","Midwest—West North Central","South—South Atlantic","South—East South Central","South—West South Central","West—Mountain","West—Pacific"],credit2018:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"],credit2015:["N/A","AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","RD","SD","D"]}},function(e,t,n){e.exports=function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t={resultsList:"autoComplete_results_list",result:"autoComplete_result",highlight:"autoComplete_highlighted"},n=function(e){return"string"==typeof e?document.querySelector(e):e()},r=function(e){return e.innerHTML=""},i={getInput:n,createResultsList:function(e){var n=document.createElement("ul");return e.container&&(t.resultsList=e.container(n)||t.resultsList),n.classList.add(t.resultsList),e.destination.insertAdjacentElement(e.position,n),n},highlight:function(e){return"<span class=".concat(t.highlight,">").concat(e,"</span>")},addResultsToList:function(e,n,r,i){n.forEach(function(a,o){var s=document.createElement("li"),p=n[o].source[r]||n[o].source;s.setAttribute("data-result",p),s.setAttribute("class",t.result),s.setAttribute("tabindex","1"),s.innerHTML=i?i(a,s):a.match||a,e.appendChild(s)})},navigation:function(e,t){var r=n(e),i=t.firstChild;document.onkeydown=function(e){var n=document.activeElement;switch(e.keyCode){case 38:n!==i&&n!==r?n.previousSibling.focus():n===i&&r.focus();break;case 40:n===r&&t.childNodes.length>0?i.focus():n!==t.lastChild&&n.nextSibling.focus()}}},clearResults:r,getSelection:function(e,i,a,o,s){var p=i.querySelectorAll(".".concat(t.result));Object.keys(p).forEach(function(l){["mousedown","keydown"].forEach(function(c){p[l].addEventListener(c,function(p){"mousedown"!==c&&13!==p.keyCode||(a({event:p,query:n(e).value,results:o.map(function(e){return e.source}),selection:o.find(function(e){var n=e.source[s]||e.source;return n===p.target.closest(".".concat(t.result)).getAttribute("data-result")}).source}),r(i))})})})}};return function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.selector=e.selector||"#autoComplete",this.data={src:function(){return"function"==typeof e.data.src?e.data.src():e.data.src},key:e.data.key},this.searchEngine="loose"===e.searchEngine?"loose":"strict",this.threshold=e.threshold||0,this.resultsList=i.createResultsList({container:!(!e.resultsList||!e.resultsList.container)&&e.resultsList.container,destination:e.resultsList&&e.resultsList.destination?e.resultsList.destination:i.getInput(this.selector),position:e.resultsList&&e.resultsList.position?e.resultsList.position:"afterend"}),this.placeHolder=e.placeHolder,this.maxResults=e.maxResults||5,this.resultItem=e.resultItem,this.highlight=e.highlight||!1,this.onSelection=e.onSelection,this.init()}return n=t,(r=[{key:"search",value:function(e,t){var n=this.highlight,r=t.toLowerCase();if("loose"===this.searchEngine){e=e.replace(/ /g,"");for(var a=[],o=0,s=0;s<r.length;s++){var p=r[s];o<e.length&&p===e[o]&&(p=n?i.highlight(p):p,o++),a.push(p)}return o===e.length&&a.join("")}if(r.includes(e)){if(n){var l=i.getInput(this.selector).value.toLowerCase();return r.replace(l,i.highlight(l))}return r}}},{key:"listMatchedResults",value:function(e){var t=this,n=[],r=i.getInput(this.selector).value.toLowerCase();e.filter(function(e){var i=t.search(r,e[t.data.key]||e);i&&n.push({match:i,source:e})});var a=n.slice(0,this.maxResults);return i.addResultsToList(this.resultsList,a,this.data.key,this.resultItem),i.navigation(this.selector,this.resultsList),a}},{key:"ignite",value:function(e){var t=this,n=this.selector,r=i.getInput(n),a=this.placeHolder,o=this.onSelection;a&&r.setAttribute("placeholder",a),r.onkeyup=function(){var a=t.resultsList;if(i.clearResults(a),r.value.length>t.threshold&&r.value.replace(/ /g,"").length){var s=t.listMatchedResults(e);o&&i.getSelection(n,a,o,s,t.data.key)}}}},{key:"init",value:function(){var e=this,t=this.data.src();t instanceof Promise?t.then(function(t){return e.ignite(t)}):this.ignite(t)}}])&&e(n.prototype,r),a&&e(n,a),t;var n,r,a}()}()},function(e,t,n){"use strict";(function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.7
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,a=0;a<r.length;a+=1)if(n&&navigator.userAgent.indexOf(r[a])>=0){i=1;break}var o=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},i))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function p(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function l(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=p(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:c(l(e))}var d=n&&!(!window.MSInputMethodContext||!document.documentMode),u=n&&/MSIE 10/.test(navigator.userAgent);function h(e){return 11===e?d:10===e?u:d||u}function f(e){if(!e)return document.documentElement;for(var t=h(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===p(n,"position")?f(n):n:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function g(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,a=document.createRange();a.setStart(r,0),a.setEnd(i,0);var o,s,p=a.commonAncestorContainer;if(e!==p&&t!==p||r.contains(i))return"BODY"===(s=(o=p).nodeName)||"HTML"!==s&&f(o.firstElementChild)!==o?f(p):p;var l=m(e);return l.host?g(l.host,t):g(e,m(t).host)}function b(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function v(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function y(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],h(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function w(e){var t=e.body,n=e.documentElement,r=h(10)&&getComputedStyle(n);return{height:y("Height",t,n,r),width:y("Width",t,n,r)}}var x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},C=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),k=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function E(e){return S({},e,{right:e.left+e.width,bottom:e.top+e.height})}function _(e){var t={};try{if(h(10)){t=e.getBoundingClientRect();var n=b(e,"top"),r=b(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},a="HTML"===e.nodeName?w(e.ownerDocument):{},o=a.width||e.clientWidth||i.right-i.left,s=a.height||e.clientHeight||i.bottom-i.top,l=e.offsetWidth-o,c=e.offsetHeight-s;if(l||c){var d=p(e);l-=v(d,"x"),c-=v(d,"y"),i.width-=l,i.height-=c}return E(i)}function O(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=h(10),i="HTML"===t.nodeName,a=_(e),o=_(t),s=c(e),l=p(t),d=parseFloat(l.borderTopWidth,10),u=parseFloat(l.borderLeftWidth,10);n&&i&&(o.top=Math.max(o.top,0),o.left=Math.max(o.left,0));var f=E({top:a.top-o.top-d,left:a.left-o.left-u,width:a.width,height:a.height});if(f.marginTop=0,f.marginLeft=0,!r&&i){var m=parseFloat(l.marginTop,10),g=parseFloat(l.marginLeft,10);f.top-=d-m,f.bottom-=d-m,f.left-=u-g,f.right-=u-g,f.marginTop=m,f.marginLeft=g}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(f=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=b(t,"top"),i=b(t,"left"),a=n?-1:1;return e.top+=r*a,e.bottom+=r*a,e.left+=i*a,e.right+=i*a,e}(f,t)),f}function L(e){if(!e||!e.parentElement||h())return document.documentElement;for(var t=e.parentElement;t&&"none"===p(t,"transform");)t=t.parentElement;return t||document.documentElement}function T(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},o=i?L(e):g(e,t);if("viewport"===r)a=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=O(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),a=Math.max(n.clientHeight,window.innerHeight||0),o=t?0:b(n),s=t?0:b(n,"left");return E({top:o-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:a})}(o,i);else{var s=void 0;"scrollParent"===r?"BODY"===(s=c(l(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===r?e.ownerDocument.documentElement:r;var d=O(s,o,i);if("HTML"!==s.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===p(t,"position"))return!0;var r=l(t);return!!r&&e(r)}(o))a=d;else{var u=w(e.ownerDocument),h=u.height,f=u.width;a.top+=d.top-d.marginTop,a.bottom=h+d.top,a.left+=d.left-d.marginLeft,a.right=f+d.left}}var m="number"==typeof(n=n||0);return a.left+=m?n:n.left||0,a.top+=m?n:n.top||0,a.right-=m?n:n.right||0,a.bottom-=m?n:n.bottom||0,a}function A(e,t,n,r,i){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var o=T(n,r,a,i),s={top:{width:o.width,height:t.top-o.top},right:{width:o.right-t.right,height:o.height},bottom:{width:o.width,height:o.bottom-t.bottom},left:{width:t.left-o.left,height:o.height}},p=Object.keys(s).map(function(e){return S({key:e},s[e],{area:(t=s[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),l=p.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=l.length>0?l[0].key:p[0].key,d=e.split("-")[1];return c+(d?"-"+d:"")}function P(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return O(n,r?L(t):g(t,n),r)}function D(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function I(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function R(e,t,n){n=n.split("-")[0];var r=D(e),i={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(n),o=a?"top":"left",s=a?"left":"top",p=a?"height":"width",l=a?"width":"height";return i[o]=t[o]+t[p]/2-r[p]/2,i[s]=n===s?t[s]-r[l]:t[I(s)],i}function B(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function M(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=B(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&s(n)&&(t.offsets.popper=E(t.offsets.popper),t.offsets.reference=E(t.offsets.reference),t=n(t,e))}),t}function j(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],a=i?""+i+n:e;if(void 0!==document.body.style[a])return a}return null}function F(e){var t=e.ownerDocument;return t?t.defaultView:window}function N(e,t,n,r){n.updateBound=r,F(e).addEventListener("resize",n.updateBound,{passive:!0});var i=c(e);return function e(t,n,r,i){var a="BODY"===t.nodeName,o=a?t.ownerDocument.defaultView:t;o.addEventListener(n,r,{passive:!0}),a||e(c(o.parentNode),n,r,i),i.push(o)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function z(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,F(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function W(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function q(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&W(t[n])&&(r="px"),e.style[n]=t[n]+r})}var U=n&&/Firefox/i.test(navigator.userAgent);function Y(e,t,n){var r=B(e,function(e){return e.name===t}),i=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!i){var a="`"+t+"`",o="`"+n+"`";console.warn(o+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return i}var $=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],X=$.slice(3);function G(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=X.indexOf(e),r=X.slice(n+1).concat(X.slice(0,n));return t?r.reverse():r}var V={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function K(e,t,n,r){var i=[0,0],a=-1!==["right","left"].indexOf(r),o=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=o.indexOf(B(o,function(e){return-1!==e.search(/,|\s/)}));o[s]&&-1===o[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var p=/\s*,\s*|\s+/,l=-1!==s?[o.slice(0,s).concat([o[s].split(p)[0]]),[o[s].split(p)[1]].concat(o.slice(s+1))]:[o];return(l=l.map(function(e,r){var i=(1===r?!a:a)?"height":"width",o=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,o=!0,e):o?(e[e.length-1]+=t,o=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+i[1],o=i[2];if(!a)return e;if(0===o.indexOf("%")){var s=void 0;switch(o){case"%p":s=n;break;case"%":case"%r":default:s=r}return E(s)[t]/100*a}if("vh"===o||"vw"===o)return("vh"===o?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a;return a}(e,i,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){W(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))})}),i}var J={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,a=i.reference,o=i.popper,s=-1!==["bottom","top"].indexOf(n),p=s?"left":"top",l=s?"width":"height",c={start:k({},p,a[p]),end:k({},p,a[p]+a[l]-o[l])};e.offsets.popper=S({},o,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,a=i.popper,o=i.reference,s=r.split("-")[0],p=void 0;return p=W(+n)?[+n,0]:K(n,a,o,s),"left"===s?(a.top+=p[0],a.left-=p[1]):"right"===s?(a.top+=p[0],a.left+=p[1]):"top"===s?(a.left+=p[0],a.top-=p[1]):"bottom"===s&&(a.left+=p[0],a.top+=p[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||f(e.instance.popper);e.instance.reference===n&&(n=f(n));var r=H("transform"),i=e.instance.popper.style,a=i.top,o=i.left,s=i[r];i.top="",i.left="",i[r]="";var p=T(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);i.top=a,i.left=o,i[r]=s,t.boundaries=p;var l=t.priority,c=e.offsets.popper,d={primary:function(e){var n=c[e];return c[e]<p[e]&&!t.escapeWithReference&&(n=Math.max(c[e],p[e])),k({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>p[e]&&!t.escapeWithReference&&(r=Math.min(c[n],p[e]-("right"===e?c.width:c.height))),k({},n,r)}};return l.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=S({},c,d[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],a=Math.floor,o=-1!==["top","bottom"].indexOf(i),s=o?"right":"bottom",p=o?"left":"top",l=o?"width":"height";return n[s]<a(r[p])&&(e.offsets.popper[p]=a(r[p])-n[l]),n[p]>a(r[s])&&(e.offsets.popper[p]=a(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!Y(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],a=e.offsets,o=a.popper,s=a.reference,l=-1!==["left","right"].indexOf(i),c=l?"height":"width",d=l?"Top":"Left",u=d.toLowerCase(),h=l?"left":"top",f=l?"bottom":"right",m=D(r)[c];s[f]-m<o[u]&&(e.offsets.popper[u]-=o[u]-(s[f]-m)),s[u]+m>o[f]&&(e.offsets.popper[u]+=s[u]+m-o[f]),e.offsets.popper=E(e.offsets.popper);var g=s[u]+s[c]/2-m/2,b=p(e.instance.popper),v=parseFloat(b["margin"+d],10),y=parseFloat(b["border"+d+"Width"],10),w=g-e.offsets.popper[u]-v-y;return w=Math.max(Math.min(o[c]-m,w),0),e.arrowElement=r,e.offsets.arrow=(k(n={},u,Math.round(w)),k(n,h,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(j(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=T(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],i=I(r),a=e.placement.split("-")[1]||"",o=[];switch(t.behavior){case V.FLIP:o=[r,i];break;case V.CLOCKWISE:o=G(r);break;case V.COUNTERCLOCKWISE:o=G(r,!0);break;default:o=t.behavior}return o.forEach(function(s,p){if(r!==s||o.length===p+1)return e;r=e.placement.split("-")[0],i=I(r);var l=e.offsets.popper,c=e.offsets.reference,d=Math.floor,u="left"===r&&d(l.right)>d(c.left)||"right"===r&&d(l.left)<d(c.right)||"top"===r&&d(l.bottom)>d(c.top)||"bottom"===r&&d(l.top)<d(c.bottom),h=d(l.left)<d(n.left),f=d(l.right)>d(n.right),m=d(l.top)<d(n.top),g=d(l.bottom)>d(n.bottom),b="left"===r&&h||"right"===r&&f||"top"===r&&m||"bottom"===r&&g,v=-1!==["top","bottom"].indexOf(r),y=!!t.flipVariations&&(v&&"start"===a&&h||v&&"end"===a&&f||!v&&"start"===a&&m||!v&&"end"===a&&g);(u||b||y)&&(e.flipped=!0,(u||b)&&(r=o[p+1]),y&&(a=function(e){return"end"===e?"start":"start"===e?"end":e}(a)),e.placement=r+(a?"-"+a:""),e.offsets.popper=S({},e.offsets.popper,R(e.instance.popper,e.offsets.reference,e.placement)),e=M(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,a=r.reference,o=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[o?"left":"top"]=a[n]-(s?i[o?"width":"height"]:0),e.placement=I(t),e.offsets.popper=E(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!Y(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=B(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,a=B(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var o=void 0!==a?a:t.gpuAcceleration,s=f(e.instance.popper),p=_(s),l={position:i.position},c=function(e,t){var n=e.offsets,r=n.popper,i=n.reference,a=Math.round,o=Math.floor,s=function(e){return e},p=a(i.width),l=a(r.width),c=-1!==["left","right"].indexOf(e.placement),d=-1!==e.placement.indexOf("-"),u=t?c||d||p%2==l%2?a:o:s,h=t?a:s;return{left:u(p%2==1&&l%2==1&&!d&&t?r.left-1:r.left),top:h(r.top),bottom:h(r.bottom),right:u(r.right)}}(e,window.devicePixelRatio<2||!U),d="bottom"===n?"top":"bottom",u="right"===r?"left":"right",h=H("transform"),m=void 0,g=void 0;if(g="bottom"===d?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-p.height+c.bottom:c.top,m="right"===u?"HTML"===s.nodeName?-s.clientWidth+c.right:-p.width+c.right:c.left,o&&h)l[h]="translate3d("+m+"px, "+g+"px, 0)",l[d]=0,l[u]=0,l.willChange="transform";else{var b="bottom"===d?-1:1,v="right"===u?-1:1;l[d]=g*b,l[u]=m*v,l.willChange=d+", "+u}var y={"x-placement":e.placement};return e.attributes=S({},y,e.attributes),e.styles=S({},l,e.styles),e.arrowStyles=S({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return q(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&q(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var a=P(i,t,e,n.positionFixed),o=A(n.placement,a,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",o),q(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},Q=function(){function e(t,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=o(this.update.bind(this)),this.options=S({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(S({},e.Defaults.modifiers,i.modifiers)).forEach(function(t){r.options.modifiers[t]=S({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return S({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return C(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=P(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=A(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=R(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=M(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=N(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return z.call(this)}}]),e}();Q.Utils=("undefined"!=typeof window?window:e).PopperUtils,Q.placements=$,Q.Defaults=J,t.a=Q}).call(this,n(34))},function(e,t,n){e.exports={dropdown:"src-components-dropdown--dropdown"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=t.TextInput=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var a=Object.getPrototypeOf(t);return null===a?void 0:e(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=n(6),o=p(n(3)),s=p(n(35));function p(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.TextInput=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"input",n=arguments[1];return l(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n))}return d(t,o.default),r(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);return this.prerendered?e:(e.setAttribute("type","text"),e)}},{key:"init",value:function(){}}]),t}(),t.Dropdown=function(e){function t(e,n){l(this,t),console.log(e);var r,i,a=e.split(".")[0].split("#")[0];"div"!==a&&(e.split(".").length>1&&(r=e.split(".")[0].split("#")[0]),e.split("#").length>1&&(i=e.split("#")[0].split(".")[0]),console.log("Dropdown element must be a div; coercing . . ."),e=(a="div")+(void 0!==i?"#"+i:"")+(void 0!==r?"."+r:""));var o=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return o.options=o.el.querySelector("ul"),o.body=document.querySelector("body"),o._isOpen=!1,o}return d(t,o.default),r(t,[{key:"prerender",value:function(){var e=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"prerender",this).call(this);if(this.prerendered)return e;var n=a.DOMHelpers.c("div.js-input-div"),r=a.DOMHelpers.c("ul");return this.data.forEach(function(e){var t=a.DOMHelpers.c("li");t.setAttribute("data-value",e.value),t.innerHTML=e.name,e.selected&&(t.classList.add("selected"),n.textContent=e.name),r.appendChild(t)}),e.appendChild(n),e.appendChild(r),e.classList.add(s.default.PCTDropdown),e.setAttribute("tabindex","0"),e}},{key:"init",value:function(){var e=this;console.log(this),this.input=this.el.querySelector(".js-input-div"),this.el.querySelectorAll("li").forEach(function(t){t.addEventListener("click",function(n){n.stopPropagation(),e.itemClickHandler(t)})}),this._selectedOption=this.el.querySelector("li.selected"),this.toBeSelected=this.el.querySelector("li.selected"),this.el.addEventListener("click",this.clickHandler.bind(this)),this.el.addEventListener("keydown",function(t){if(console.log(t.keyCode),9!==t.keyCode)return[32,38,40].indexOf(t.keyCode)>-1?(t.preventDefault(),void e.spaceAndArrowHandler.call(e,t)):void([13,27].indexOf(t.keyCode>-1)&&e.isOpen&&e.enterAndEscapeHandler.call(e,t));e.tabHandler.call(e,t)})}},{key:"itemClickHandler",value:function(e){this.toBeSelected.classList.remove("selected"),this.toBeSelected=e,this.toBeSelected.classList.add("selected"),this.selectedOption=this.toBeSelected}},{key:"enterAndEscapeHandler",value:function(e){27===e.keyCode?(console.log("escape key"),this.toBeSelected.classList.remove("selected"),this.selectedOption.classList.add("selected"),this.toBeSelected=this.selectedOption,this.isOpen=!1):this.selectedOption=this.toBeSelected}},{key:"spaceAndArrowHandler",value:function(e){if(32!==e.keyCode)if(this.isOpen){var t=38===e.keyCode?this.toBeSelected.previousElementSibling:this.toBeSelected.nextElementSibling;t&&(this.toBeSelected.classList.remove("selected"),this.toBeSelected=t,this.toBeSelected.classList.add("selected"))}else this.isOpen=!0;else this.isOpen||(this.isOpen=!0)}},{key:"tabHandler",value:function(e){this.isOpen&&e.preventDefault()}},{key:"clickHandler",value:function(e){!this.isOpen&&this.body.UIControlIsOpen||(e.stopPropagation(),this.isOpen=!this.isOpen)}},{key:"isOpen",set:function(e){function t(){this.isOpen=!1}this._isOpen=e,e?(this.el.classList.add(s.default.isOpen),this.body.UIControlIsOpen=!0,this.body.addEventListener("click",t.bind(this))):(this.el.classList.remove(s.default.isOpen),this.body.UIControlIsOpen=!1,this.body.removeEventListener("click",t.bind(this)))},get:function(){return this._isOpen}},{key:"selectedOption",set:function(e){this._selectedOption=e,this.isOpen=!1,this.input.textContent=this._selectedOption.innerText,this.onChange?this.onChange():console.log("Instance of Dropdown class needs an onChange method to handle selection of a new value")},get:function(){return this._selectedOption}}]),t}()},function(e,t){e.exports="<p><strong>Centralization.</strong> The degree to which borrowing is done by the state itself rather than by a component unit-a legally separate entity such as a housing or turnpike authority. Higher values mean the state is more centralized.</p>\n"},function(e,t){e.exports="<p><strong>General obligation (GO) debt limit type.</strong> The kind of limit the state has on GO borrowing, one of the most common types of debt issued by states. These limits affect how states borrow. </p>\n"},function(e,t){e.exports="<p><strong>Debt per capita.</strong> Total debt relative to a state’s population.</p>\n"},function(e,t){e.exports="<p><strong>Debt as a percentage of state personal income.</strong> Total debt relative to state personal income, a measure of economic resources.</p>\n"},function(e,t){e.exports="<p><strong>Population growth.</strong> The 10-year population growth rate from 2008 to 2017. Growing populations are associated with greater infrastructure investment. </p>\n"},function(e,t){e.exports="<p><strong>Revenue volatility.</strong> A measure of variation in tax collections. Low scores mean that revenue levels are similar from year to year, while high scores indicate that revenue varies more. More volatile states should plan for greater uncertainty. </p>\n"},function(e,t){e.exports="<p><strong>Division of borrowing between state and local governments.</strong> The share of combined state and local debt issued by local governments. States where local governments borrow less tend to have higher debt levels.</p>\n"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(36),s=(r=o)&&r.__esModule?r:{default:r};var p=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.el=document.querySelector(t),Object.keys(n).forEach(function(e){r[e]=n[e]})}return a(e,[{key:"init",value:function(e){this.needsRouter&&(this.router=new s.default,this.router.init(e)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var e=!1,t=document.body,n=0;function r(){new Date-n<500||e||(t.classList.add("has-hover"),e=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){e&&(t.classList.remove("has-hover"),e=!1)},!0),document.addEventListener("mousemove",r,!0),r()}},{key:"createComponent",value:function(e,t,n,r){var a=Object.create({children:[],data:null,model:e,parent:null,rerenderOnDataMismatch:!1});if(null!==r&&"object"===(void 0===r?"undefined":i(r)))for(var o in r)r.hasOwnProperty(o)&&(a[o]=r[o]);return new t(n,a)}}]),e}();t.default=p},function(e,t){e.exports='<section id="section-overview">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">Overview</h2>\n    <div class="js-inner-content">\n    \n\t<p>\n\t    When state policymakers try to assess how much debt to take on for projects\n\t    such as roads, bridges, and schools, they often compare debt levels in\n\t    their state to those of others. Because no universal guidelines exist for\n\t    how much debt is affordable, many policymakers evaluate how their state\n\t    stacks up against others with a common credit rating or national median\n\t    debt level.\n\t</p>\n\t<p>\n\t    But selecting a peer group based only on a common rating or using national\n\t    benchmarks overlooks many factors that influence borrowing levels. States\n\t    with growing populations, for example, tend to borrow more; a state&#8217;s\n\t    fiscal health affects the funds available for debt service; and policies\n\t    meant to limit state debt can influence how much local governments and\n\t    other state entities borrow for capital projects.\n\t</p>\n\t<p>\n\t    To address this gap, The Pew Charitable Trusts has created an interactive\n\t    tool to allow policymakers to compare states based on seven characteristics\n\t    related to debt.<sup>*</sup> States can use these data to select more\n\t    tailored peer groups, giving them a deeper understanding of how states with\n\t    similar borrowing practices, constraints, and needs manage their borrowing.\n\t    Ultimately, these improved comparisons will help them make better-informed\n\t    decisions.\n\t</p>\n\t<p class="pct-footnote">\n\t<sup>*</sup> To measure debt levels, this tool uses Census Bureau data. For more\n\t    information about these characteristics and why Pew chose them, see the \n\t    &#8220;About the Data&#8221; section below.\n\t</p>\n\n    </div>\n    </section>\n<section id="section-comparison">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">State Comparison</h2>\n    <div class="js-inner-content">\n        <div class="compare-selection-wrapper">\n            <span class="compare-label">Compare</span><br />\n            <div class="flex flex-start flex-baseline autoComplete_outerWrapper">\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-0">\n                    <input autocomplete="hack" type="text" id="compare-input-0">\n                </div>\n                <span>to</span>\n                <div class="autoComplete_wrapper" id="autoComplete_wrapper-1">\n                    <input autocomplete="hack" type="text" id="compare-input-1">\n                </div>\n            </div>\n        </div>\n    </div>\n    </section>\n<section id="section-states">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">50-State Data</h2>\n    <div class="js-inner-content">\n    </div>\n    </section>\n<section id="section-about">\n\t<h2 class="static" role="button" tabindex="0" aria-label="Show/hide content">About the Data</h2>\n    <div class="js-inner-content">\n    \n\t<p>\n    Pew researchers developed this list of characteristics by examining\n    relevant literature and consulting subject matter experts. The final set of\n    seven characteristics included in the tool was selected based on evidence\n    in the literature that the characteristics are related to state debt, the\n    feasibility of collecting the data used to construct the characteristic,\n    and a desire to avoid redundancy. Pew also limited the number of\n    characteristics to make the tool easy to use and understand.\n</p>\n<p>\n    The goal of this tool was not to create an exhaustive catalog of the\n    factors that may affect state borrowing levels, so states should not feel\n    the need to limit themselves to the data in it when selecting peers.\n    Instead, the tool is intended to help states consider these differences\n    when constructing peer groups.\n</p>\n<h3 class="static">\n    Borrowing practices\n</h3>\n<p>\n    How states borrow also affects how they should make comparisons: General\n    obligation (GO) debt limits, centralization, and the division of\n    state-local borrowing in a state can affect state borrowing practices.\n</p>\n<h4>\n    General obligation debt limit type (2018)\n</h4>\n<p>\n    GO debt is one of the most common types issued by states. It carries a\n    state’s full faith and credit, the strongest possible pledge. As a result,\n    GO debt is typically a state’s highest rated and lowest cost since credit\n    rating agencies and bond purchasers strongly believe the state will repay\n    it.<sup>1</sup> \n</p>\n<p>\n    Not all states issue much GO debt. All but two have GO debt limits, which\n    vary in restrictiveness and structure. For example, Connecticut limits this\n    debt to 1.6 times total estimated general fund tax receipts, while Arizona\neffectively prohibits its issuance.<sup>2</sup> Comparing Connecticut\n    and Arizona, then, might not be appropriate because Connecticut has\n    significant GO debt and Arizona none. Connecticut’s debt will draw on the\n    state’s general fund in a way Arizona’s won’t. (GO debt is typically\n    supported by a state’s general fund.) Because analyzing the revenue streams\n    available for debt repayment is important, this is a key difference.\n</p>\n<p>\n    These limits sometimes apply to state debt beyond just GO borrowing. For\n    example, West Virginia’s limit applies to net tax-supported debt, which\n    includes GO.\n</p>\n<p>\n    Pew has classified each state’s limit for GO debt as one of the following\n    types:\n</p>\n<ul>\n    <li>\n        <strong>Constitutional amendment.</strong>\n        Three states—Alabama, Ohio, and West Virginia—require an amendment to\n        their constitutions to issue GO debt.\n    </li>\n    <li>\n        <strong>Metric.</strong>\n        In 11 states—Connecticut, Georgia, Hawaii, Mississippi, Nevada, New\n        Hampshire, North Dakota, Oregon, Tennessee, Utah, and Wisconsin—debt is\n        not allowed to exceed a certain metric-based threshold. Tennessee, for\n        example, caps debt service at 10 percent of combined revenues in its\n        general, debt service, and highway funds.\n    </li>\n    <li>\n        <strong>Metric-based with referendum to exceed.</strong>\n        North Carolina, Pennsylvania, and Wyoming use a metric to cap debt but\n        allow issuance above the cap with voter approval.\n    </li>\n    <li>\n        <strong>No limit.</strong>\n        Maryland and Vermont place no restrictions on GO debt.\n    </li>\n    <li>\n        <strong>Prohibition.</strong>\n        Arizona, Colorado, Indiana, and Nebraska prohibit GO debt. Indiana law\n        forbids any GO debt to be issued; the others authorize amounts so\n        low—$350,000 or less—as to be equivalent to prohibitions.\n    </li>\n    <li>\n        <strong>Referendum and/or supermajority.</strong>\n        Thirteen states—Alaska, Arkansas, California, Idaho, Iowa, Kansas,\n        Kentucky, Maine, Michigan, Minnesota, Missouri, Montana, and Rhode\n        Island—require some combination of voter approval and/or a legislative\n        supermajority (generally three-fifths or two-thirds) to issue debt.\n    </li>\n    <li>\n        <strong>Referendum and/or supermajority and metric.</strong>\n        Fourteen states—Delaware, Florida, Illinois, Louisiana, Massachusetts,\n        New Jersey, New Mexico, New York, Oklahoma, South Carolina, South\n        Dakota, Texas, Virginia, and Washington—require a referendum and/or\n        supermajority and have a metric-based cap on debt or debt service.\n    </li>\n</ul>\n<div class="pct-note"><p>\n    <strong>Note:</strong> The classification system is a variation on the approach taken in D.\n    Roderick Kiewiet and Kristin Szakaly, “Constitutional Limitations on\nBorrowing: An Analysis of State Bonded Indebtedness,”    <cite>The Journal of Law, Economics &amp; Organization</cite> 12, no. 1 (1996):\n    62-97,\n    <a href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents">\n        https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents</a>.\n</p>\n<p>\n    <strong>Source:</strong> Pew analysis of state constitutions and statutes\n</p></div>\n<h4>\n    Centralization (fiscal year 2014)\n</h4>\n<p>\n    Another effect of Arizona’s prohibition on GO debt is decentralized debt\n    issuance.<sup>3</sup> This means\n    borrowing is done by entities other than the primary—meaning\n    state—government, including the independent agencies and authorities known\n    as component units. Centralization measures component unit debt as a share\n    of the total debt issued by both the primary government and its component\n    units.\n</p>\n<p>\n    Component unit debt generally relies less on state funds for repayment than\n    primary government debt. Often, lenders have no legal claim on state\n    general funds if the component unit defaults. As a result, state\n    comparisons based on total debt may be misleading. Montana and Delaware,\n    for example, have about the same total debt, but most of Montana’s debt is\n    held by component units and most of Delaware’s is held by the state.\n</p>\n<div class="pct-note"><p>\n    <strong>Note:</strong> To calculate centralization in a state, Pew first analyzed the\n    state’s comprehensive annual financial report to determine how much debt\n    was held by the primary government. That was then compared to a sum of the\n    debt of major component units as reported in their annual financial\n    statements.<sup>4</sup> \n</p></div>\n<h4>\n    The state-local borrowing division (2015)\n</h4>\n<p>\n    One factor that influences state debt levels is the division of borrowing\n    between state and local governments. In some states, local governments are\n    responsible for paying for most capital projects within their\n    jurisdictions. In other places, the state is responsible for those\n    projects. Instead of a city or town bonding to finance them, the state\n    takes on this debt—increasing its overall borrowing. The division of\n    borrowing responsibility is related to the debt limit. Local governments in\n    Arizona, for example, borrow more than the state does because the state’s\nability to borrow is so restricted.<sup>5</sup> This tool measures the\n    state-local borrowing division as the share of total debt within a state\n    issued by local governments.\n</p>\n<div class="pct-note"><p>\n    <strong>Source:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances: 2015 Data Release” (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n</p></div>\n<p>\n    <strong></strong>\n</p>\n<h3 class="static">\n    Fiscal conditions and infrastructure needs\n</h3>\n<p>\n    Fiscal conditions may affect a state’s willingness to issue debt and\n    ability to repay it, while infrastructure needs might increase a state’s\n    demand for debt. Observing trends and variations among states in both\n    categories can allow officials to create more appropriate peer groups.\n</p>\n<h4>\n    Revenue volatility (1997-2016)\n</h4>\n<p>\n    Revenue volatility is the annual fluctuation in tax collections and is\n    affected by each state’s mix of tax streams. It indicates whether a state\n    can expect to dedicate a relatively consistent share of its revenue to its\n    liabilities year to year or whether that share will show greater\n    fluctuation as revenue varies. States with stable revenue can plan debt\n    issuances and pay down debt more easily than states with uncertain tax\n    collections can.<sup>6</sup> States\n    with more volatile revenue may therefore wish to compare themselves to\n    states with similar concerns.\n</p>\n<p>\n    Pew used data from 1997 to 2016 to calculate a revenue volatility score for\n    each state. The score reflects variations in yearly percentage changes in\nrevenue between 1997 and 2016.<sup>7</sup> States have differing\n    levels of volatility because they have unique revenue mixes. Alaska has a\n    highly volatile revenue stream because much of its collections come from\n    unpredictable severance taxes on oil. Other states—such as South Dakota,\n    which earns more of its revenue from stable sources like personal income\n    taxes—have less volatility. A low volatility score means that revenue\n    levels were similar from year to year, and a high score indicates that\n    revenue grew or declined more dramatically.\n</p>\n<div class="pct-note"><p>\n    <strong>Source:</strong> The Pew Charitable Trusts, “Tax Revenue Volatility, FY 1997-2016,”\n    last modified Aug. 29, 2018,\n    <a\n        href="http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6"\n    >\n        http://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/fiscal-50#ind6</a>\n</p></div>\n<h4>\n    Population growth (2008-17)\n</h4>\n<p>\n    Population growth drives infrastructure needs. More people means greater\n    pressure on a state’s infrastructure, necessitating improvements and new\n    construction. Research shows that as a state’s population grows, so too\ndoes its demand for, and in some cases spending on, capital construction.<sup>8</sup> \n</p>\n<p>\n    As a result, states with similar growth patterns may have similar demands\n    for infrastructure. For this reason, Pew used population growth as a proxy\n    for infrastructure demand, a metric for which exact, reliable sources are\n    scarce. Observing population growth can help identify peers and provides a\n    data point not often used in interstate debt comparisons.\n</p>\n<p>\n    Pew selected a 10-year population growth rate, measured as the increase or\n    decrease in state population between 2008 and 2017. Although no consensus\n    exists in academic literature regarding the appropriate time span for\n    examining population trends, this period captured the trough of the Great\n    Recession, the subsequent economic expansion, and the resulting demographic\n    and geographic shifts.<sup>9</sup> \n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances: 2015 Data Release” (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n    United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n    2017,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx</a>\n    ; U.S. Census Bureau, “Intercensal Estimates of the Resident Population for\n    the United States, Regions, States, and Puerto Rico: April 1, 2000 to July\n    1, 2010,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2000-2010/intercensal/state/st-est00int-01.xls</a>\n</p></div>\n<h3 class="static">\n    Debt levels (2015)\n</h3>\n<p>\n    Debt levels are a natural point of comparison and are influenced by the\n    preceding characteristics. While an absolute dollar amount provides useful\n    information, it does not put the amount of debt into context relative to\n    the state’s resources.<sup>10</sup> \n    Given size, population, and economic differences among states, a dollar\n    amount is also less useful for state comparisons. Instead, normalized\n    ratios allow states of various sizes to compare themselves. Consistent with\n    the best practices for understanding debt affordability, Pew’s tool\n    includes two ratios—debt per capita and debt as a percentage of state\n    personal income—to give a more complete measure of a state’s debt.\n    State-based analyses often use a ratio of debt service to revenue when\n    evaluating debt levels and setting limits. This ratio is not included in\nthis tool due to cross-state comparability issues.<sup>11</sup> \n</p>\n<h4>\n    Debt per capita\n</h4>\n<p>\n    Because debt is repaid through revenue generally in the form of taxes or\n    user fees paid by residents, assessing debt relative to its repayment\n    source—the resident—is a common approach. Debt per capita, which measures\n    total debt against a state’s population, makes comparisons between states\n    of different sizes feasible and helps policymakers understand the debt\n    burden on individual residents.\n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances,” 2015 Data Release (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Census Bureau, “Annual Estimates of the Resident Population for the\n    United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1,\n    2017,” Table 1,\n    <a\n        href="https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx"\n    >\n        https://www2.census.gov/programs-surveys/popest/tables/2010-2017/state/totals/nst-est2017-01.xlsx</a>\n</p></div>\n<h4>\n    Debt as a percentage of state personal income\n</h4>\n<p>\n    Another common practice, used by credit rating agencies and academics, is\n    to consider a state’s debt level relative to resources available for\n    repayment.<sup>12</sup> A ratio\n    comparing debt not only to population but to taxpayer earning power or\nwealth is therefore beneficial.<sup>13</sup> Debt as a percentage\n    of state personal income addresses this and is commonly used by states to\n    evaluate debt levels.\n</p>\n<div class="pct-note"><p>\n    <strong>Sources:</strong> Pew analysis of data from U.S. Census Bureau, “Annual Survey of\n    State and Local Government Finances,” 2015 Data Release (2018),\n    <a\n        href="https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html"\n    >\n        https://www.census.gov/programs-surveys/gov-finances/newsroom/updates/release.html</a>\n    ; U.S. Bureau of Economic Analysis, “SA1 Personal Income Summary: Personal\n    Income, Population, Per Capita Personal Income,”\n    https://www.bea.gov/data/income-saving/personal-income-by-state.\n</p></div>\n<aside class="pct-box">\n        <h4>Census Data vs. Moody’s Net Tax-Supported Debt Calculations</h4>\n    \n\t<p>\n\t    While debt affordability studies often use Moody’s Investors Service Inc.\n\t    calculations of state net tax-supported debt to compare borrowing, The Pew\n\t    Charitable Trusts used U.S. Census Bureau data for two reasons.\n\t</p>\n\t<p>\n\t    First, the Census Bureau captures a broader scope of debt than does\n\t    Moody’s, including some debt held by dependent agencies such as public\n\tauthorities and component units,<sup>14</sup> giving a more\n\t    accurate representation of the debt burden supported by a state’s\n\t    residents.<sup>15</sup> Second, the\n\t    bureau analyzes how closely the dependent agencies it includes in its\n\t    definition of state debt are fiscally or administratively tied to the\n\t    state. Because ultimate responsibility for a debt can be nebulous—and a\n\t    state may not support the liabilities of its more independent entities—this\n\tfurther ensures an accurate description of state debt.<sup>16</sup> \n\t</p>\n</aside>\n<h3 class="static">\n    Credit ratings (September 2018 and September 2015)\n</h3>\n<p>\n    This tool allows users to group states by Standard &amp; Poor’s credit\n    ratings to explore differences among those with similar credit profiles.\n    The user can select credit ratings from 2018 or 2015 to look at either\n    recent information or information corresponding to other, earlier data\n    points in this tool.\n</p>\n<div class="pct-note"><p>\n    <strong>Note:</strong> Pew collected ratings on general obligation issuance as of September\n    2018 and September 2015. If the state does not issue GO bonds, the rating\n    on the senior-most tax-backed issuance was used instead. In addition to\n    S&amp;P, there are two other major credit rating agencies: Moody’s and\n    Fitch. There is little variation in ratings among the three agencies.\n</p></div>\n<div class="pct-endnotes">\n    \n    <div id="edn1">\n        <p>\n 1. \n            The Pew Charitable Trusts, “Strategies for Managing State Debt”\n            (2017),\n            <a\n                href="http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt"\n            >\n                http://www.pewtrusts.org/en/research-and-analysis/reports/2017/06/strategies-for-managing-state-debt</a>.\n        </p>\n    </div>\n    <div id="edn2">\n        <p>\n 2. \n            Ibid.\n        </p>\n    </div>\n    <div id="edn3">\n        <p>\n 3. \n            Research on state borrowing practices has found that debt limits\n            decrease the centralization of state debt as states borrow through\n            other entities to circumvent these limits. See Beverly S. Bunch,\n            “The Effect of Constitutional Debt Limits on State Governments’ Use\n            of Public Authorities,” <cite>Public Choice </cite>68, no. 1-3 (1991):\n            57-69,\n            <a href="https://link.springer.com/article/10.1007/BF00173819">\n                https://link.springer.com/article/10.1007/BF00173819</a>\n            ; Rhonda Riherd Trautman, “The Impact of State Debt Management on\n            Debt Activity,” <cite>Public Budgeting &amp; Finance </cite>15, no. 2\n            (1995): 33-51,\n            <a href="https://doi.org/10.1111/1540-5850.01038">\n                https://doi.org/10.1111/1540-5850.01038</a>.\n        </p>\n    </div>\n    <div id="edn4">\n        <p>\n 4. \n            For more detail on how we collected these data, see The Pew\n            Charitable Trusts, “Strategies for Managing State Debt,”\n            methodology.\n        </p>\n    </div>\n    <div id="edn5">\n        <p>\n 5. \n            For a discussion of the relationship between debt limits and local\n            borrowing, see D. Roderick Kiewiet and Kristin Szakaly,\n            “Constitutional Limitations on Borrowing: An Analysis of State\nBonded Indebtedness,”            <cite>The Journal of Law, Economics &amp; Organization </cite>12, no. 1\n            (1996): 62-97,\n            <a\n                href="https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents"\n            >\n                https://www.jstor.org/stable/765039?seq=1#page_scan_tab_contents</a>.\n        </p>\n    </div>\n    <div id="edn6">\n        <p>\n 6. \n            One study found that as economic volatility increases, states\n            prefer to pay for infrastructure projects with cash rather than\n            through financing. Wen Wang, Yilin Hou, and William Duncome,\n            “Determinants of Pay-as-You-Go Financing of Capital Projects:\n            Evidence From the States,” <cite>Public Budgeting &amp; Finance </cite>\n            27, no. 4 (2007): 18-42,\n            <a href="https://doi.org/10.1111/j.1540-5850.2007.00892.x">\n                https://doi.org/10.1111/j.1540-5850.2007.00892.x</a>.\n        </p>\n    </div>\n    <div id="edn7">\n        <p>\n 7. \n            The Pew Charitable Trusts, “Tax Revenue Volatility Varies Across\n            States, Revenue Streams,” accessed Sept. 10, 2018,\n            <a\n                href="http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6"\n            >\n                http://www.pewtrusts.org/en/multimedia/data-visualizations/2014/fiscal-50#ind6</a>.\n        </p>\n    </div>\n    <div id="edn8">\n        <p>\n 8. \n            Ronald C. Fisher and Robert W. Wassmer, “The Issuance of State and\nLocal Debt During the United States Great Recession,”            <cite>National Tax Journal</cite> 67, no. 1 (2014): 113-50,\n            <a\n                href="https://ideas.repec.org/a/ntj/journl/v67y2014i1p113-150.html"\n            >\n                https://ideas.repec.org/a/ntj/journl/v67y2014i1p113-150.html</a>\n            ; Ronald C. Fisher and Robert W. Wassmer, “An Analysis of\nState-Local Government Capital Expenditure During the 2000s,”            <cite>Public Budgeting &amp; Finance</cite> 35, no. 1 (2015): 3-28,\n            <a\n                href="https://onlinelibrary.wiley.com/doi/abs/10.1111/pbaf.12062"\n            >\n                https://onlinelibrary.wiley.com/doi/abs/10.1111/pbaf.12062</a>.\n        </p>\n    </div>\n    <div id="edn9">\n        <p>\n 9. \n            The National Bureau of Economic Research, “US Business Cycle\n            Expansions and Contractions,” Sept. 20, 2010,\n            <a href="http://www.nber.org/cycles.html">\n                http://www.nber.org/cycles.html</a>.\n        </p>\n    </div>\n    <div id="edn10">\n        <p>\n 10. \n            Jennifer Weiner, “Assessing the Affordability of State Debt,” New\n            England Public Policy Center at the Federal Reserve Bank of Boston\n            (2013),\n            <a\n                href="https://www.bostonfed.org/publications/new-england-public-policy-center-research-report/2013/assessing-the-affordability-of-state-debt.aspx"\n            >\n                https://www.bostonfed.org/publications/new-england-public-policy-center-research-report/2013/assessing-the-affordability-of-state-debt.aspx</a>.\n        </p>\n    </div>\n    <div id="edn11">\n        <p>\n 11. \n            In CAFRs, states report debt service payments from a variety of\n            funds. Using this information to construct a comparable measure of\n            debt service as a share of general fund revenue requires a detailed\n            understanding of each state’s reporting practices.\n        </p>\n    </div>\n    <div id="edn12">\n        <p>\n 12. \n            Jennifer Weiner, “A Guide to State Debt Affordability Studies:\n            Common Elements and Best Practices,” New England Public Policy\n            Center at the Federal Reserve Bank of Boston (2013),\n            <a\n                href="https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx"\n            >\n                https://www.bostonfed.org/publications/new-england-public-policy-center-policy-brief/2013/a-guide-to-state-debt-affordability-studies-common-elements-and-best-practices.aspx</a>\n            ; Charles Brecher, Kurt Richwerger, and Marcia Van Wagner, “An\nApproach to Measuring the Affordability of State Debt,”            <cite>Public Budgeting &amp; Finance</cite> 23, no. 4 (2003): 65-85,\n            <a\n                href="https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x"\n            >\n                https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0275-1100.2003.02304004.x</a>.\n        </p>\n    </div>\n    <div id="edn13">\n        <p>\n 13. \n            W. Bartley Hildreth and Gerald J. Miller, “Debt and the Local\n            Economy: Problems in Benchmarking Local Government Debt\n            Affordability,” <cite>Public Budgeting &amp; Finance</cite> 22, no. 4\n            (2003): 99-113,\n            <a href="https://doi.org/10.1111/1540-5850.00091">\n                https://doi.org/10.1111/1540-5850.00091</a>.\n        </p>\n    </div>\n    <div id="edn14">\n        <p>\n 14. \n            Component units are entities that are legally separate from a state\n            but perform state functions. They typically include bodies such as\n            housing authorities, economic development corporations, and\n            universities.\n        </p>\n    </div>\n    <div id="edn15">\n        <p>\n 15. \n            Weiner, “A Guide.”\n        </p>\n    </div>\n    <div id="edn16">\n        <p>\n 16. \n            Bo Zhao and Wen Wang, “Transparency in State Debt Disclosure,” New\n            England Public Policy Center at the Federal Reserve Bank of Boston\n            (2017),\n            <a\n                href="https://www.bostonfed.org/publications/research-department-working-paper/2017/transparency-in-state-debt-disclosure.aspx"\n            >\n                https://www.bostonfed.org/publications/research-department-working-paper/2017/transparency-in-state-debt-disclosure.aspx</a>.\n        </p>\n    </div>\n</div>\n\n    </div>\n    </section>'},function(e,t){e.exports='<footer>\n\t\t<div>\n\t\t\t<p><strong>Download resources:</strong>\n\t\t\t\t\t<a class="pct-download" href="">Resource 1</a>\n\t\t\t\t\t<a class="pct-download" href="">Resource 2</a>\n\t\t\t\t</p></div>\n</footer>'},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){e.exports={autoComplete_wrapper:"autoComplete_wrapper",autoComplete:"autoComplete",autoComplete_results_list:"autoComplete_results_list",autoComplete_result:"autoComplete_result",autoComplete_highlighted:"autoComplete_highlighted"}},function(e,t,n){},function(e,t,n){"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){e.exports={PCTDropdown:"submodules-UI-js-inputs--PCTDropdown",isOpen:"submodules-UI-js-inputs--isOpen"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return i(e,[{key:"init",value:function(e){var t=this;if(void 0===e||"object"!==(void 0===e?"undefined":r(e)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof e.encode||"function"!=typeof e.decode||!Array.isArray(e.views)||"object"!==r(e.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=e.encode,this.decodeHash=e.decode,this.viewPromises=e.views.map(function(e){return e.isReady}),this.PS=e.PS,Promise.all(this.viewPromises).then(function(){t.decodeHash()}),this.PS.setSubs(e.subscriptions.map(function(e){return[e,function(e,n){t.hashChange.call(t,e,n)}]}))}},{key:"hashChange",value:function(e,t){this.setStateObj(e,t),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(e,t){this.stateObj[e]=t}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),e}();t.default=a},function(e,t,n){e.exports={static:"src-css--static"}},function(e,t,n){"use strict";n.r(t);var r=n(6);function i(){}function a(e,t){var n=new i;if(e instanceof i)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var r,a=-1,o=e.length;if(null==t)for(;++a<o;)n.set(a,e[a]);else for(;++a<o;)n.set(t(r=e[a],a,e),r)}else if(e)for(var s in e)n.set(s,e[s]);return n}i.prototype=a.prototype={constructor:i,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var o=a,s=function(){var e,t,n,r=[],i=[];function a(n,i,s,p){if(i>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var l,c,d,u=-1,h=n.length,f=r[i++],m=o(),g=s();++u<h;)(d=m.get(l=f(c=n[u])+""))?d.push(c):m.set(l,[c]);return m.each(function(e,t){p(g,t,a(e,i,s,p))}),g}return n={object:function(e){return a(e,0,p,l)},map:function(e){return a(e,0,c,d)},entries:function(e){return function e(n,a){if(++a>r.length)return n;var o,s=i[a-1];return null!=t&&a>=r.length?o=n.entries():(o=[],n.each(function(t,n){o.push({key:n,values:e(t,a)})})),null!=s?o.sort(function(e,t){return s(e.key,t.key)}):o}(a(e,0,c,d),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return i[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function p(){return{}}function l(e,t,n){e[t]=n}function c(){return o()}function d(e,t,n){e.set(t,n)}function u(){}var h=o.prototype;function f(e,t){var n=new u;if(e instanceof u)e.each(function(e){n.add(e)});else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)n.add(e[r]);else for(;++r<i;)n.add(t(e[r],r,e))}return n}u.prototype=f.prototype={constructor:u,has:h.has,add:function(e){return this["$"+(e+="")]=e,this},remove:h.remove,clear:h.clear,values:h.keys,size:h.size,empty:h.empty,each:h.each};var m=n(11),g=n.n(m),b=n(5),v=n(12),y=n.n(v),w=n(13),x=n(14),C=n(15),k=n(3),S=n.n(k),E=(n(31),n(4)),_=n.n(E),O=(n(32),n(1)),L=n.n(O);class T extends S.a{prerender(){var e=super.prerender();return this.matches=[],this.matches[0]=this.model.data.find(e=>e.code===this.data.comparison[0]),this.matches[1]=this.model.data.find(e=>e.code===this.data.comparison[1]),this.prerendered&&this.rerender,e}update(e,t){this.matches[e]=this.model.data.find(e=>e.code===t)}}class A extends T{prerender(){var e=super.prerender();return this.prerendered&&!this.rerender?e:(console.log(this.model.dict,this.data.field),e.innerHTML=this.returnTemplate(0)+this.returnTemplate(1),e)}update(e,t){var n=parseInt(e.split(".")[1]);console.log(n),super.update(n,t),console.log(this,n),this.el.children[n].fadeInContent(this.returnTemplate(n))}returnTemplate(e){return`<p class="${L.a.chartLabel} ${L.a.chartLabelText}">${this.matches[e].state}: <span class="${L.a["compareColor"+(e+1)]}">${void 0!==this.model.dict[this.data.field]?this.model.dict[this.data.field][[this.matches[e][this.data.field]]]:this.matches[e][this.data.field]}</span></p>`}}var P=n(9),D=n.n(P);class I extends S.a{prerender(){var e=super.prerender();return this.prerendered&&!this.rerender?e:(e.classList.add(D.a.bar,D.a["barColor"+this.data.color]),e.style.transform=`scaleX(${this.linearScale(this.data.d,this.data.field)})`,e)}linearScale(e,t){var n=this.model.types.find(e=>e.field===t);return.01+.99*((e[t]-n.min)/n.spread)}update(){console.log(this),this.el.style.transform=`scaleX(${this.linearScale(this.data.d,this.data.field)})`}}function R(e,t){var n,r=this.model.types.find(e=>e.field===t).type,i=e[t];switch(console.log(i),r){case"number":n=i.toLocaleString("en-US",{minimumFractionDigits:1});break;case"currency":n=i.toLocaleString("en-US",{style:r,currency:"USD"});break;case"percent":n=i.toLocaleString("en-US",{style:r,minimumFractionDigits:1});break;default:n="[unformatted]"+i}return n}class B extends T{prerender(){var e=super.prerender();return this.bars=[],[0,1].forEach(e=>{this.bars.push(this.parent.parent.createComponent(this.model,I,`div.js-bar-compare-${this.data.field}-${e}`,{parent:this,data:{d:this.matches[e],field:this.data.field,color:e+1}}))}),this.children.push(...this.bars),this.prerendered&&!this.rerender?e:(e.innerHTML=this.returnTemplate(),e)}returnTemplate(){return` \n                        <div class="${L.a.chartContainer}">\n                            ${this.partialTemplate(0)}\n                            ${this.partialTemplate(1)}\n                        </div>\n                       `}partialTemplate(e){return`\n                <p class="${L.a.chartLabel} ${L.a["chartLabel"+(e+1)]}">\n                    ${this.matches[e].state}\n                </p>\n                <div class="${L.a.barContainer} ${L.a["barContainer"+(e+1)]}">\n                    ${this.bars[e].el.outerHTML}                        \n                    <div class="${L.a.dataLabel}" style="transform: translateX(${(100*this.bars[e].linearScale(this.matches[e],this.data.field)).toFixed(1)}%)">\n                        ${this.formatValue(this.matches[e],this.data.field)}\n                    </div>\n                </div>\n        `}linearScale(e,t){var n=this.model.types.find(e=>e.field===t);return(e[t]-n.min)/n.spread}formatValue(){return R.apply(this,arguments)}update(e,t){var n=parseInt(e.split(".")[1]),r=this.el.querySelectorAll("."+L.a.dataLabel)[n];super.update(n,t),console.log(this),this.el.querySelectorAll("."+L.a.chartLabel)[n].fadeInContent(this.matches[n].state),this.children[n].data.d=this.matches[n],this.children[n].update(n),r.fadeInContent(this.formatValue(this.matches[n],this.data.field)),r.style.transform=`translateX(${(100*this.children[n].linearScale(this.matches[n],this.data.field)).toFixed(1)}%)`}}var M=n(16),j=n.n(M),H=n(7),F=n.n(H),N=n(17);function z(){return(z=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var W="undefined"!=typeof window,q=W&&navigator.userAgent,U=/MSIE |Trident\//.test(q),Y=/UCBrowser\//.test(q),$=W&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,X={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:[0,20],distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",updateDuration:0,wait:null,zIndex:9999},G=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],V={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow"},K=W?Element.prototype:{},J=K.matches||K.matchesSelector||K.webkitMatchesSelector||K.mozMatchesSelector||K.msMatchesSelector;function Q(e){return[].slice.call(e)}function Z(e,t){return(K.closest||function(e){for(var t=this;t;){if(J.call(t,e))return t;t=t.parentElement}}).call(e,t)}function ee(e,t){for(;e;){if(t(e))return e;e=e.parentElement}}function te(e,t){return{}.hasOwnProperty.call(e,t)}function ne(e,t,n){if(Array.isArray(e)){var r=e[t];return null==r?n:r}return e}function re(e,t){var n;return function(){var r=this,i=arguments;clearTimeout(n),n=setTimeout(function(){return e.apply(r,i)},t)}}function ie(e,t){return e&&e.modifiers&&e.modifiers[t]}function ae(e,t){return e.indexOf(t)>-1}function oe(e){return!(!e||!te(e,"isVirtual"))||e instanceof Element}function se(e,t){return"function"==typeof e?e.apply(null,t):e}function pe(e,t){e.filter(function(e){return"flip"===e.name})[0].enabled=t}function le(){return document.createElement("div")}function ce(e,t){e.innerHTML=t instanceof Element?t.innerHTML:t}function de(e,t){t.content instanceof Element?(ce(e,""),e.appendChild(t.content)):e[t.allowHTML?"innerHTML":"textContent"]=t.content}function ue(e){return{tooltip:e.querySelector(V.TOOLTIP),backdrop:e.querySelector(V.BACKDROP),content:e.querySelector(V.CONTENT),arrow:e.querySelector(V.ARROW)||e.querySelector(V.ROUND_ARROW)}}function he(e){e.setAttribute("data-inertia","")}function fe(e){var t=le();return"round"===e?(t.className="tippy-roundarrow",ce(t,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):t.className="tippy-arrow",t}function me(){var e=le();return e.className="tippy-backdrop",e.setAttribute("data-state","hidden"),e}function ge(e,t){e.setAttribute("tabindex","-1"),t.setAttribute("data-interactive","")}function be(e,t){e.forEach(function(e){e&&(e.style.transitionDuration="".concat(t,"ms"))})}function ve(e,t,n){var r=Y&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";e[t+"EventListener"](r,n)}function ye(e){var t=e.getAttribute("x-placement");return t?t.split("-")[0]:""}function we(e,t){e.forEach(function(e){e&&e.setAttribute("data-state",t)})}function xe(e,t,n){n.split(" ").forEach(function(n){e.classList[t](n+"-theme")})}function Ce(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.checkHideOnClick,n=e.exclude,r=e.duration;Q(document.querySelectorAll(V.POPPER)).forEach(function(e){var i=e._tippy;!i||t&&!0!==i.props.hideOnClick||n&&e===n.popper||i.hide(r)})}var ke={passive:!0},Se=4,Ee=!1;function _e(){Ee||(Ee=!0,$&&document.body.classList.add("tippy-iOS"),window.performance&&document.addEventListener("mousemove",Le))}var Oe=0;function Le(){var e=performance.now();e-Oe<20&&(Ee=!1,document.removeEventListener("mousemove",Le),$||document.body.classList.remove("tippy-iOS")),Oe=e}function Te(e){var t=e.target;if(!(t instanceof Element))return Ce();var n=Z(t,V.POPPER);if(!(n&&n._tippy&&n._tippy.props.interactive)){var r=ee(t,function(e){return e._tippy&&e._tippy.reference===e});if(r){var i=r._tippy,a=ae(i.props.trigger,"click");if(Ee||a)return Ce({exclude:i,checkHideOnClick:!0});if(!0!==i.props.hideOnClick||a)return;i.clearDelayTimeouts()}Ce({checkHideOnClick:!0})}}function Ae(){var e=document.activeElement;e&&e.blur&&e._tippy&&e.blur()}var Pe=Object.keys(X);function De(e,t){var n=z({},t,{content:se(t.content,[e])},t.ignoreAttributes?{}:function(e){return Pe.reduce(function(t,n){var r=(e.getAttribute("data-tippy-".concat(n))||"").trim();if(!r)return t;if("content"===n)t[n]=r;else try{t[n]=JSON.parse(r)}catch(e){t[n]=r}return t},{})}(e));return(n.arrow||Y)&&(n.animateFill=!1),n}function Ie(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;Object.keys(e).forEach(function(e){if(!te(t,e))throw new Error("[tippy]: `".concat(e,"` is not a valid option"))})}var Re=1;function Be(e,t){var n=De(e,t);if(!n.multiple&&e._tippy)return null;var r={},i=null,a=0,o=0,s=!1,p=function(){},l=[],c=n.interactiveDebounce>0?re(C,n.interactiveDebounce):C,d=null,u=Re++,h=function(e,t){var n=le();n.className="tippy-popper",n.id="tippy-".concat(e),n.style.zIndex=t.zIndex,t.role&&n.setAttribute("role",t.role);var r=le();r.className="tippy-tooltip",r.style.maxWidth=t.maxWidth+("number"==typeof t.maxWidth?"px":""),r.setAttribute("data-size",t.size),r.setAttribute("data-animation",t.animation),r.setAttribute("data-state","hidden"),xe(r,"add",t.theme);var i=le();return i.className="tippy-content",i.setAttribute("data-state","hidden"),t.interactive&&ge(n,r),t.arrow&&r.appendChild(fe(t.arrowType)),t.animateFill&&(r.appendChild(me()),r.setAttribute("data-animatefill","")),t.inertia&&he(r),de(i,t),r.appendChild(i),n.appendChild(r),n}(u,n);h.addEventListener("mouseenter",function(e){m.props.interactive&&m.state.isVisible&&"mouseenter"===r.type&&b(e)}),h.addEventListener("mouseleave",function(){m.props.interactive&&"mouseenter"===r.type&&document.addEventListener("mousemove",c)});var f,m={id:u,reference:e,popper:h,popperChildren:ue(h),popperInstance:null,props:n,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:B,set:M,setContent:function(e){M({content:e})},show:j,hide:H,enable:function(){m.state.isEnabled=!0},disable:function(){m.state.isEnabled=!1},destroy:F};return D(),n.lazy||(L(),m.popperInstance.disableEventListeners()),n.showOnInit&&b(),n.a11y&&!n.target&&((f=e)instanceof Element&&(!J.call(f,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")||f.hasAttribute("disabled")))&&e.setAttribute("tabindex","0"),e._tippy=m,h._tippy=m,m;function g(e){var t=i=e,n=t.clientX,r=t.clientY;if(m.popperInstance){var a=ye(m.popper),o=m.props.arrow?Se+("round"===m.props.arrowType?18:16):Se,s=ae(["top","bottom"],a),p=ae(["left","right"],a),l=s?Math.max(o,n):n,c=p?Math.max(o,r):r;s&&l>o&&(l=Math.min(n,window.innerWidth-o)),p&&c>o&&(c=Math.min(r,window.innerHeight-o));var d=m.reference.getBoundingClientRect(),u=m.props.followCursor,h="horizontal"===u,f="vertical"===u;m.popperInstance.reference={getBoundingClientRect:function(){return{width:0,height:0,top:h?d.top:c,bottom:h?d.bottom:c,left:f?d.left:l,right:f?d.right:l}},clientWidth:0,clientHeight:0},m.popperInstance.scheduleUpdate(),"initial"===u&&m.state.isVisible&&y()}}function b(e){if(B(),!m.state.isVisible){if(m.props.target)return function(e){var n=Z(e.target,m.props.target);n&&!n._tippy&&(Be(n,z({},m.props,{content:se(t.content,[n]),appendTo:t.appendTo,target:"",showOnInit:!0})),b(e))}(e);if(s=!0,m.props.wait)return m.props.wait(m,e);T()&&!m.state.isMounted&&document.addEventListener("mousemove",g);var n=ne(m.props.delay,0,X.delay);n?a=setTimeout(function(){j()},n):j()}}function v(){if(B(),!m.state.isVisible)return y();s=!1;var e=ne(m.props.delay,1,X.delay);e?o=setTimeout(function(){m.state.isVisible&&H()},e):H()}function y(){document.removeEventListener("mousemove",g)}function w(){document.body.removeEventListener("mouseleave",v),document.removeEventListener("mousemove",c)}function x(e){m.state.isEnabled&&!O(e)&&(m.state.isVisible||(r=e,e instanceof MouseEvent&&(i=e)),"click"===e.type&&!1!==m.props.hideOnClick&&m.state.isVisible?v():b(e))}function C(e){var t=ee(e.target,function(e){return e._tippy}),n=Z(e.target,V.POPPER)===m.popper,r=t===m.reference;n||r||function(e,t,n,r){if(!e)return!0;var i=n.clientX,a=n.clientY,o=r.interactiveBorder,s=r.distance,p=t.top-a>("top"===e?o+s:o),l=a-t.bottom>("bottom"===e?o+s:o),c=t.left-i>("left"===e?o+s:o),d=i-t.right>("right"===e?o+s:o);return p||l||c||d}(ye(m.popper),m.popper.getBoundingClientRect(),e,m.props)&&(w(),v())}function k(e){if(!O(e))return m.props.interactive?(document.body.addEventListener("mouseleave",v),void document.addEventListener("mousemove",c)):void v()}function S(e){e.target===m.reference&&(m.props.interactive&&e.relatedTarget&&m.popper.contains(e.relatedTarget)||v())}function E(e){Z(e.target,m.props.target)&&b(e)}function _(e){Z(e.target,m.props.target)&&v()}function O(e){var t="ontouchstart"in window,n=ae(e.type,"touch"),r=m.props.touchHold;return t&&Ee&&r&&!n||Ee&&!r&&n}function L(){var e=m.props.popperOptions,t=m.popperChildren,n=t.tooltip,r=t.arrow;m.popperInstance=new N.a(m.reference,m.popper,z({placement:m.props.placement},e,{modifiers:z({},e?e.modifiers:{},{preventOverflow:z({boundariesElement:m.props.boundary,padding:Se},ie(e,"preventOverflow")),arrow:z({element:r,enabled:!!r},ie(e,"arrow")),flip:z({enabled:m.props.flip,padding:m.props.distance+Se,behavior:m.props.flipBehavior},ie(e,"flip")),offset:z({offset:m.props.offset},ie(e,"offset"))}),onUpdate:function(t){m.props.flip&&!m.props.flipOnUpdate&&(t.flipped&&(m.popperInstance.options.placement=t.placement),pe(m.popperInstance.modifiers,!1));var r=ye(m.popper),i=n.style;i.top="",i.bottom="",i.left="",i.right="",i[r]=-(m.props.distance-10)+"px";var a={top:Se,bottom:Se,left:Se,right:Se};a[r]=Se+m.props.distance,m.popperInstance.modifiers.filter(function(e){return"preventOverflow"===e.name})[0].padding=a,e&&e.onUpdate&&e.onUpdate(t)}}))}function T(){return m.props.followCursor&&!Ee&&"focus"!==r.type}function A(e,t){function n(e){e.target===r&&(ve(r,"remove",n),t())}if(0===e)return t();var r=m.popperChildren.tooltip;ve(r,"remove",p),ve(r,"add",n),p=n}function P(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];m.reference.addEventListener(e,t,n),l.push({eventType:e,handler:t,options:n})}function D(){m.props.touchHold&&!m.props.target&&(P("touchstart",x,ke),P("touchend",k,ke)),m.props.trigger.trim().split(" ").forEach(function(e){if("manual"!==e)if(m.props.target)switch(e){case"mouseenter":P("mouseover",E),P("mouseout",_);break;case"focus":P("focusin",E),P("focusout",_);break;case"click":P(e,E)}else switch(P(e,x),e){case"mouseenter":P("mouseleave",k);break;case"focus":P(U?"focusout":"blur",S)}})}function I(){l.forEach(function(e){var t=e.eventType,n=e.handler,r=e.options;m.reference.removeEventListener(t,n,r)}),l=[]}function R(){return[m.popperChildren.tooltip,m.popperChildren.backdrop,m.popperChildren.content]}function B(){clearTimeout(a),clearTimeout(o)}function M(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Ie(e,X);var t=m.props,n=De(m.reference,z({},m.props,e,{ignoreAttributes:!0}));n.ignoreAttributes=te(e,"ignoreAttributes")?e.ignoreAttributes:t.ignoreAttributes,m.props=n,(te(e,"trigger")||te(e,"touchHold"))&&(I(),D()),te(e,"interactiveDebounce")&&(w(),c=re(C,e.interactiveDebounce)),function(e,t,n){var r=ue(e),i=r.tooltip,a=r.content,o=r.backdrop,s=r.arrow;e.style.zIndex=n.zIndex,i.setAttribute("data-size",n.size),i.setAttribute("data-animation",n.animation),i.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?e.setAttribute("role",n.role):e.removeAttribute("role"),t.content!==n.content&&de(a,n),!t.animateFill&&n.animateFill?(i.appendChild(me()),i.setAttribute("data-animatefill","")):t.animateFill&&!n.animateFill&&(i.removeChild(o),i.removeAttribute("data-animatefill")),!t.arrow&&n.arrow?i.appendChild(fe(n.arrowType)):t.arrow&&!n.arrow&&i.removeChild(s),t.arrow&&n.arrow&&t.arrowType!==n.arrowType&&i.replaceChild(fe(n.arrowType),s),!t.interactive&&n.interactive?ge(e,i):t.interactive&&!n.interactive&&function(e,t){e.removeAttribute("tabindex"),t.removeAttribute("data-interactive")}(e,i),!t.inertia&&n.inertia?he(i):t.inertia&&!n.inertia&&function(e){e.removeAttribute("data-inertia")}(i),t.theme!==n.theme&&(xe(i,"remove",t.theme),xe(i,"add",n.theme))}(m.popper,t,n),m.popperChildren=ue(m.popper),m.popperInstance&&(m.popperInstance.update(),G.some(function(t){return te(e,t)})&&(m.popperInstance.destroy(),L(),m.state.isVisible||m.popperInstance.disableEventListeners(),m.props.followCursor&&i&&g(i)))}function j(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ne(m.props.duration,0,X.duration[0]);if(!m.state.isDestroyed&&m.state.isEnabled&&(!Ee||m.props.touch))return te(m.reference,"isVirtual")||document.documentElement.contains(m.reference)?void(m.reference.hasAttribute("disabled")||!1!==m.props.onShow(m)&&(m.popper.style.visibility="visible",m.state.isVisible=!0,m.props.interactive&&m.reference.classList.add("tippy-active"),be([m.popper,m.popperChildren.tooltip,m.popperChildren.backdrop],0),function(e){var t=!(T()||"initial"===m.props.followCursor&&Ee);m.popperInstance?(T()||(m.popperInstance.scheduleUpdate(),t&&m.popperInstance.enableEventListeners()),pe(m.popperInstance.modifiers,m.props.flip)):(L(),t||m.popperInstance.disableEventListeners()),m.popperInstance.reference=m.reference;var n=m.popperChildren.arrow;if(T()){n&&(n.style.margin="0");var a=ne(m.props.delay,0,X.delay);r.type&&g(a&&i?i:r)}else n&&(n.style.margin="");Ee&&i&&"initial"===m.props.followCursor&&(g(i),n&&(n.style.margin="0")),function(e,t){var n=e.popper,r=e.options,i=r.onCreate,a=r.onUpdate;r.onCreate=r.onUpdate=function(e){!function(e){e.offsetHeight}(n),t(),a(e),r.onCreate=i,r.onUpdate=a}}(m.popperInstance,e);var o=m.props.appendTo;(d="parent"===o?m.reference.parentNode:se(o,[m.reference])).contains(m.popper)||(d.appendChild(m.popper),m.props.onMount(m),m.state.isMounted=!0)}(function(){m.state.isVisible&&(T()||m.popperInstance.update(),be([m.popper],n.updateDuration),be(R(),e),m.popperChildren.backdrop&&(m.popperChildren.content.style.transitionDelay=Math.round(e/12)+"ms"),m.props.sticky&&(be([m.popper],U?0:m.props.updateDuration),function e(){m.popperInstance&&m.popperInstance.scheduleUpdate(),m.state.isMounted?requestAnimationFrame(e):be([m.popper],0)}()),we(R(),"visible"),function(e,t){A(e,t)}(e,function(){m.popperChildren.tooltip.classList.add("tippy-notransition"),m.props.aria&&m.reference.setAttribute("aria-".concat(m.props.aria),m.popper.id),m.props.onShown(m),m.state.isShown=!0}))}))):F()}function H(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ne(m.props.duration,1,X.duration[1]);!m.state.isDestroyed&&m.state.isEnabled&&!1!==m.props.onHide(m)&&(m.popperChildren.tooltip.classList.remove("tippy-notransition"),m.props.interactive&&m.reference.classList.remove("tippy-active"),m.popper.style.visibility="hidden",m.state.isVisible=!1,m.state.isShown=!1,be(R(),e),we(R(),"hidden"),function(e,t){A(e,function(){!m.state.isVisible&&d&&d.contains(m.popper)&&t()})}(e,function(){s||y(),m.props.aria&&m.reference.removeAttribute("aria-".concat(m.props.aria)),m.popperInstance.disableEventListeners(),m.popperInstance.options.placement=m.props.placement,d.removeChild(m.popper),m.props.onHidden(m),m.state.isMounted=!1}))}function F(e){m.state.isDestroyed||(m.state.isMounted&&H(0),I(),delete m.reference._tippy,m.props.target&&e&&Q(m.reference.querySelectorAll(m.props.target)).forEach(function(e){e._tippy&&e._tippy.destroy()}),m.popperInstance&&m.popperInstance.destroy(),m.state.isDestroyed=!0)}}var Me=!1;function je(e,t){Ie(t,X),Me||(document.addEventListener("click",Te,!0),document.addEventListener("touchstart",_e,ke),window.addEventListener("blur",Ae),Me=!0);var n,r=z({},X,t);n=e,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(e){var t={isVirtual:!0,attributes:e.attributes||{},setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},hasAttribute:function(t){return t in e.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){delete e.classList.classNames[t]},contains:function(t){return t in e.classList.classNames}}};for(var n in t)e[n]=t[n]}(e);var i=function(e){if(oe(e))return[e];if(e instanceof NodeList)return Q(e);if(Array.isArray(e))return e;try{return Q(document.querySelectorAll(e))}catch(e){return[]}}(e).reduce(function(e,t){var n=t&&Be(t,r);return n&&e.push(n),e},[]);return oe(e)?i[0]:i}je.version="4.0.4",je.defaults=X,je.setDefaults=function(e){Object.keys(e).forEach(function(t){X[t]=e[t]})},je.hideAll=Ce,je.group=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.delay,r=void 0===n?e[0].props.delay:n,i=t.duration,a=void 0===i?0:i,o=!1;function s(e){o=e,d()}function p(t){t._originalProps.onShow(t),e.forEach(function(e){e.set({duration:a}),e.hide()}),s(!0)}function l(e){e._originalProps.onHide(e),s(!1)}function c(e){e._originalProps.onShown(e),e.set({duration:e._originalProps.duration})}function d(){e.forEach(function(e){e.set({onShow:p,onShown:c,onHide:l,delay:o?[0,Array.isArray(r)?r[1]:r]:r,duration:o?a:e._originalProps.duration})})}e.forEach(function(e){e._originalProps={duration:e.props.duration,onHide:e.props.onHide,onShow:e.props.onShow,onShown:e.props.onShown}}),d()},W&&setTimeout(function(){Q(document.querySelectorAll("[data-tippy]")).forEach(function(e){var t=e.getAttribute("data-tippy");t&&je(e,{content:t})})}),function(e){if(W){var t=document.createElement("style");t.type="text/css",t.textContent=e;var n=document.head,r=n.firstChild;r?n.insertBefore(t,r):n.appendChild(t)}}('.tippy-iOS{cursor:pointer!important}.tippy-notransition{transition:none}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;will-change:transform;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}');var He=je;const Fe=["US","AL"];class Ne extends S.a{prerender(){this.comparisons=[],this.model.groups.forEach((e,t)=>{this.model.typesNested[t].values.forEach(e=>{var t;t="text"===e.type?this.parent.createComponent(this.model,A,`div.js-text-compare-${e.field}`,{rerenderOnDataMismatch:!0,parent:this,data:{comparison:Fe,field:e.field}}):this.parent.createComponent(this.model,B,`div.js-text-compare-${e.field}`,{rerenderOnDataMismatch:!0,parent:this,data:{comparison:Fe,field:e.field}}),this.comparisons.push(t)})}),this.children.push(...this.comparisons);var e=super.prerender();if(this.prerendered&&!this.rerender)return e;var t=0;return this.model.groups.forEach((n,r)=>{var i=document.createElement("div");i.classList.add(_.a[n.cleanString()]),i.insertAdjacentHTML("afterbegin",`<h3 class="${_.a.groupHeader}">${n}</h3>`);var a=document.createElement("div");a.classList.add(_.a.typeContainer,_.a[n.cleanString()]),this.model.typesNested[r].values.forEach(e=>{var n=document.createElement("div");n.classList.add(_.a.typeDiv,_.a[e.field]),n.insertAdjacentHTML("afterbegin",`<h4 class="${_.a.typeHeader} ${e.tooltip?_.a.withTooltip:"withoutTooltip"}" data-tippy-content="${e.tooltip||""}">${e.label}</h4>`),n.appendChild(this.comparisons[t].el),t++,a.appendChild(n)}),i.appendChild(a),e.appendChild(i)}),e}init(){this.initializeAutocompletes(),this.initializeTooltips(),F.a.setSubs([["compare",(e,t)=>{this.update(e,t)}]])}initializeTooltips(){var e=document.querySelectorAll("."+_.a.withTooltip);He(e)}update(e,t){console.log(this),this.comparisons.forEach(n=>{n.update(e,t)})}initializeAutocompletes(){var e=this.model.data.map(e=>({state:e.state,code:e.code}));console.log(e),[0,1].forEach(t=>{var n=document.querySelector("#compare-input-"+t),r=document.querySelector("#autoComplete_wrapper-"+t);n.classList.add("autoComplete",_.a["autoComplete"+t]),r.classList.add(_.a["autoComplete_wrapper-"+t]),this.children.push(new j.a({data:{src:e,key:"state"},selector:"#compare-input-"+t,placeHolder:"Select state",searchEngine:"strict",resultsList:{container:()=>"autoComplete_results_list",destination:document.querySelector("#compare-input-"+t),position:"afterend"},highlight:!0,onSelection:e=>{console.log(e,this),b.stateModule.setState("compare."+t,e.selection.code),n.value="",n.setAttribute("placeholder",e.selection.state)}})),n.setAttribute("placeHolder",this.model.data.find(e=>e.code===Fe[t]).state),console.log(this.children)})}}var ze=n(2),We=n.n(ze),qe=n(0),Ue=n.n(qe),Ye=n(18),$e=n.n(Ye),Xe=n(19);class Ge extends Xe.Dropdown{constructor(e,t){var n=[],r=t.data.type;t.data.data.forEach(e=>{n.push({value:e.field,name:isNaN(+e.label)?e.label:"Credit rating "+e.label,selected:!!e.isDefaultSelection})}),t.data=n.sort(function(e,t){return e.name<t.name?-1:e.name>t.name?1:e.name>=t.name?0:NaN}),"group"===r&&t.data.unshift({value:null,name:"— None —",selected:!0}),super(...arguments),this.dropdownType=r}prerender(){var e=super.prerender();return this.prerendered&&!this.rerender?e:(e.classList.add($e.a.dropdown),e)}init(){super.init()}onChange(){b.stateModule.setState(this.dropdownType,this.selectedOption.dataset.value)}}class Ve extends S.a{prerender(){var e=super.prerender(),t=[{label:"Select field:",data:this.model.types.filter(e=>"text"!==e.type),type:"field"},{label:"Group by:",data:this.model.types.filter(e=>"text"===e.type),type:"group"}];if(this.dropdowns=[],t.forEach(e=>{this.dropdowns.push(this.parent.parent.createComponent(this.model,Ge,`div.js-dropdown-${e.label.cleanString()}`,{parent:this,data:e}))}),this.children.push(...this.dropdowns),this.prerendered&&!this.rerender)return e;var n=document.createElement("div");return n.classList.add(Ue.a.dropdownWrapper),t.forEach((e,t)=>{var r=document.createElement("div"),i=document.createElement("label"),a=this.dropdowns[t];i.classList.add(Ue.a.dropdownOuter),i.innerText=e.label,r.classList.add(Ue.a.dropdownInner),r.appendChild(a.el),i.appendChild(r),n.appendChild(i)}),e.appendChild(n),e.insertAdjacentHTML("beforeend",`\n            <div id="explainer-wrapper">\n                <div id="field-explainer"></div>\n                <div id="group-explainer"></div>\n            </div>\n            <div class="flex">\n                <p class="${Ue.a.label} ${Ue.a.labelSort} flex"><span>Sort by:</span> <span><a class="${Ue.a.sortBy} ${Ue.a.sortActive}" data-sort="alpha" href="#">A–Z</a> | <a class="${Ue.a.sortBy}" data-sort="asc" href="#">Low–High</a> | <a class="${Ue.a.sortBy}" data-sort="desc" href="#">High–Low</a></span></p>\n                <p class="${Ue.a.label} ${Ue.a.labelHighlight}">Select a state to highlight | <a id="clear-all-highlight" href="#">Clear all</a></p>\n            </div>\n        `),e}init(){this.children.forEach(e=>{e.init()}),document.querySelectorAll("."+Ue.a.sortBy).forEach(e=>{e.addEventListener("click",t=>{t.preventDefault(),document.querySelector("."+Ue.a.sortActive).classList.remove(Ue.a.sortActive),e.classList.add(Ue.a.sortActive),b.stateModule.setState("sort",e.dataset.sort)})})}}var Ke=n(20),Je=n.n(Ke),Qe=n(8),Ze=n.n(Qe),et=n(21),tt=n.n(et),nt=n(22),rt=n.n(nt),it=n(23),at=n.n(it),ot=n(24),st=n.n(ot),pt=n(25),lt=n.n(pt),ct=n(26),dt=n.n(ct);function ut(e=null){return null===e?function(e,t){return(e="N/A"===e?"!":e)<(t="N/A"===t?"!":t)?-1:e>t?1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?-1:t[e]>n[e]?1:t[e]>=n[e]?0:NaN}}function ht(e=null){return null===e?function(e,t){return e<t?1:e>t?-1:e>=t?0:NaN}:function(t,n){return t[e]<n[e]?1:t[e]>n[e]?-1:t[e]>=n[e]?0:NaN}}class ft extends S.a{prerender(){var e=super.prerender();if(this.field="debt_percent_SPI",this.bars=[],this.barContainers=[],this.lastPositions={},this.highlightedBars={},this.explainerText={centralization:Je.a,credit2015:Ze.a,credit2018:Ze.a,debt_limit_type:tt.a,debt_per_capita:rt.a,debt_percent_SPI:at.a,ten_year_pop_growth:st.a,revenue_volatility:lt.a,state_local_division:dt.a},this.groupByFn=null!==this.groupBy?e=>e[this.groupBy]:e=>null!==e,this.selections=this.parent.createComponent(this.model,Ve,"div.js-fifty-state-selections",{parent:this}),this.sortValueKey="state",this.sortValuesFn=ut,this.groupBy="null",this.nestData(),this.pushBars(),this.children.push(this.selections,...this.bars),this.prerendered&&!this.rerender)return e;this.renderSelections(),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.updateExplainerText("field",this.field,!0);var t=this.renderCharts();return e.appendChild(t),e}nestData(){this.nestedData=s().key(this.groupByFn).sortKeys(ut()).sortValues(this.sortValuesFn(this.sortValueKey)).entries(this.model.data)}pushBars(){this.bars.length=0,this.barContainers.length=0,this.nestedData.forEach(e=>{e.values.forEach(e=>{this.bars.push(this.parent.createComponent(this.model,I,`div.bar-state-${e.code}`,{parent:this,data:{d:e,field:this.field,color:2}})),this.barContainers.push(this.parent.createComponent(this.model,S.a,`div#barContainer-${e.code}`))})})}renderSelections(){this.container.appendChild(this.selections.el)}renderCharts(){var e=document.createElement("div"),t=0;return e.classList.add("js-fifty-chart-container"),this.nestedData.forEach(n=>{var r=document.createElement("div");r.classList.add(We.a.groupDiv),r.innerHTML="null"!==this.groupBy?`<h3 class="${We.a.groupHeader}">${void 0!==this.model.dict[this.groupBy]?this.model.dict[this.groupBy][n.key]:n.key}</h3>`:"",n.values.forEach(e=>{var n=this.barContainers[t].el;n.classList.add(We.a.barContainer),this.highlightedBars[n.id]&&n.classList.add(We.a.isHighlighted);var i=document.createElement("p"),a=document.createElement("div");i.classList.add(We.a.barLabel),i.innerHTML=e.state,a.classList.add(We.a.placeHolder),n.appendChild(i),n.appendChild(this.bars[t].el),n.appendChild(a),n.insertAdjacentHTML("beforeend",`\n                    <div class="${We.a.dataLabel}" style="transform: translateX(${(100*this.bars[t].linearScale(this.bars[t].data.d,this.bars[t].data.field)).toFixed(1)}%)">\n                        ${this.formatValue(this.bars[t].data.d,this.bars[t].data.field)}\n                    </div>`),r.appendChild(n),t++}),e.appendChild(r)}),e}formatValue(){return R.apply(this,arguments)}invertPositions(){this.barContainers.forEach(e=>{var t=e.el.getBoundingClientRect(),n=this.firstPositions[e.el.id].top-t.top;e.el.style.transitionDuration="0",e.el.style.transform=`translateY(${n}px)`,setTimeout(function(){e.el.style.transitionDuration="0.8s",e.el.style.transform="translateY(0)"})})}init(){F.a.setSubs([["field",(e,t)=>{this.updateBars(e,t),this.updateDataLabels(e,t),this.updateExplainerText(e,t)}],["group",(e,t)=>{this.updateGroups(e,t),this.updateExplainerText(e,t)}],["sort",(e,t)=>{this.sortBars(e,t)}],["resize",()=>{this.adjustExplainerTextHeight()}]]),this.children.forEach(e=>{e.init()}),this.explainerWrapper=document.querySelector("#explainer-wrapper"),this.fieldExplainer=document.querySelector("#field-explainer"),this.groupExplainer=document.querySelector("#group-explainer"),this.initHighlightBars(),this.initClearAllHighlights()}updateExplainerText(e,t,n){var r,i;"field"===e&&(this.field=t,i=this.explainerText[this.field]||"",r=this.fieldExplainer),"group"===e&&(this.groupBy=t,i=this.explainerText[this.groupBy]||"",r=this.groupExplainer),n||(this.explainerWrapper.style.height=this.explainerWrapper.offsetHeight+"px"),r.fadeInContent(i).then(()=>{this.adjustExplainerTextHeight()})}adjustExplainerTextHeight(){var e=[this.fieldExplainer,this.groupExplainer].reduce((e,t)=>{var n=t.querySelector("p"),r=n?window.getComputedStyle(t.querySelector("p")):null;return r?+e+n.offsetHeight+parseInt(r["margin-top"])+parseInt(r["margin-bottom"]):+e},0);this.explainerWrapper.style.height=e+"px"}initHighlightBars(){document.querySelectorAll("."+We.a.barContainer).forEach(e=>{e.addEventListener("click",()=>{this.highlightedBars[e.id]=!this.highlightedBars[e.id],e.classList.toggle(We.a.isHighlighted)})})}initClearAllHighlights(){document.querySelector("#clear-all-highlight").addEventListener("click",e=>{e.preventDefault(),document.querySelectorAll("."+We.a.barContainer).forEach(e=>{e.classList.remove(We.a.isHighlighted),this.highlightedBars={}})})}updateDataLabels(){this.barContainers.forEach((e,t)=>{var n=e.el.querySelector("."+We.a.dataLabel);n.fadeInContent(this.formatValue(this.bars[t].data.d,this.bars[t].data.field)),n.style.transform=`translateX(${(100*this.bars[t].linearScale(this.bars[t].data.d,this.bars[t].data.field)).toFixed(1)}%)`})}updateBars(e,t){this.field=t,this.bars.forEach(e=>{e.data.field=t,e.update()}),console.log(this.sortValueKey),"state"!==this.sortValueKey&&(this.sortValueKey=t,setTimeout(this.FLIP.bind(this),500))}recordFirstPositions(){this.firstPositions=this.barContainers.reduce((e,t)=>(e[t.el.id]=t.el.getBoundingClientRect(),e),{})}FLIP(){this.recordFirstPositions(),this.nestData(),this.el.innerHTML="",this.pushBars(),this.el.appendChild(this.renderCharts()),this.initHighlightBars(),this.invertPositions()}updateGroups(e,t){this.groupBy=t,console.log(this.groupBy),this.FLIP()}sortBars(e,t){this.sortValueKey="alpha"===t?"state":this.field,this.sortValuesFn="desc"===t?ht:ut,this.FLIP()}}var mt=n(27),gt=n.n(mt),bt=n(28),vt=n.n(bt),yt=n(29),wt=n.n(yt);Object(r.publishWindowResize)(b.stateModule);const xt={groups:w,types:x,dict:C},Ct=[];function kt(){return new Promise((e,t)=>{var n=this.el;g.a.parse(""+y.a,{download:!0,dynamicTyping:!0,header:!0,fastMode:!0,skipEmptyLines:!0,beforeFirstChunk(e){var t=e.hashCode();window.IS_PRERENDERING?n.setAttribute("data-data-hash",t):t.toString()!==n.getAttribute("data-data-hash")&&(n.setAttribute("data-data-mismatch",!0),console.log("data mismatch"),xt.isMismatched=!0)},complete:t=>{Ct.length=0;var n=t.data;xt.data=n,xt.types.forEach(e=>{if("text"!==e.type){let t=n.map(t=>t[e.field]).filter(e=>null!==e);e.max=Math.max(...t),e.min=Math.min(...t),e.spread=e.max-e.min}}),xt.typesNested=s().key(e=>e.group).entries(xt.types),console.log(xt),Ct.push(this.createComponent(xt,Ne,"div#comparison-view",{renderToSelector:"#section-comparison .js-inner-content",rerenderOnDataMismatch:!0,parent:this}),this.createComponent(xt,ft,"div#fifty-state-view",{renderToSelector:"#section-states .js-inner-content",rerenderOnDataMismatch:!0,parent:this})),e(!0)},error:function(e){t(e)}})})}n(37);const St=new class extends gt.a{prerender(){console.log("prerender"),this.el.insertAdjacentHTML("beforeend",vt.a),this.el.insertAdjacentHTML("beforeend",wt.a),kt.call(this).then(()=>{console.log(xt),Ct.forEach(e=>{e.container.appendChild(e.el)})})}init(){console.log("init"),super.init(),this.attachSectionOpenClose(),kt.call(this).then(()=>{Ct.forEach(e=>{e.init(this)})})}attachSectionOpenClose(){function e(){console.log(this.parentNode),this.parentNode.querySelector(".js-inner-content").classList.toggle("pct-hide"),this.classList.toggle("pct-is-closed"),this.blur()}document.querySelectorAll("#pew-app section > h2").forEach(t=>{t.addEventListener("click",e),t.addEventListener("keyup",function(t){13===t.keyCode&&e.call(this)})})}}("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&St.prerender(),St.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2ZpZnR5LXN0YXRlL3NlbGVjdGlvbnMvc3R5bGVzLnNjc3M/MWU3NCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb21wYXJpc29uL3N0eWxlcy5zY3NzP2NlZmYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2ZpZnR5LXN0YXRlL3N0eWxlcy5zY3NzPzJhNjMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VSS1qcy9lbGVtZW50L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0ZS1jb21wYXJpc29uL3N0eWxlcy5zY3NzP2Q0MjYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0YXRlZnVsLWRlYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VVElMUy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVic3ViLXNldHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvY3JlZGl0LXJhdGluZy5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9iYXIvc3R5bGVzLnNjc3M/ZjE3MSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVic3ViLWpzL3NyYy9wdWJzdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcGFwYXJzZS9wYXBhcGFyc2UubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9kYXRhL2RhdGEuY3N2Iiwid2VicGFjazovLy8uL3N1Ym1vZHVsZXMvYXV0b0NvbXBsZXRlLmpzL2Rpc3QvanMvYXV0b0NvbXBsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wb3BwZXIuanMvZGlzdC9lc20vcG9wcGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Ryb3Bkb3duL3N0eWxlcy5zY3NzP2I4NDEiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VSS1qcy9pbnB1dHMvaW5wdXRzLmpzIiwid2VicGFjazovLy8uL3NyYy9wYXJ0aWFscy9jZW50cmFsaXphdGlvbi5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvZGVidC1saW1pdC5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvZGVidC1wZXItY2FwaXRhLm1kIiwid2VicGFjazovLy8uL3NyYy9wYXJ0aWFscy9kZWJ0LXNwaS5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvcG9wdWxhdGlvbi1ncm93dGgubWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpYWxzL3JldmVudWUtdm9sYXRpbGl0eS5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvc3RhdGUtbG9jYWwubWQiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9QQ1RBcHAtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpYWxzL3NlY3Rpb25zLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpYWxzL2Zvb3Rlci5odG1sIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9hdXRvQ29tcGxldGUuanMvZGlzdC9jc3MvYXV0b0NvbXBsZXRlLmNzcz81NGM2Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmctaGFzaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3N1Ym1vZHVsZXMvVUktanMvaW5wdXRzL3N0eWxlcy5zY3NzPzJkNzMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9ST1VUUi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3N0eWxlcy5zY3NzPzIzMzkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvc2V0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbXBhcmlzb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29tcGFyaXNvbi90ZXh0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Jhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWV0aG9kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb21wYXJpc29uL2NoYXJ0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aXBweS5qcy9lc20vaW5kZXguYWxsLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0ZS1jb21wYXJpc29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Ryb3Bkb3duL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9maWZ0eS1zdGF0ZS9zZWxlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9maWZ0eS1zdGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUtZGVidC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJkcm9wZG93bldyYXBwZXIiLCJkcm9wZG93bk91dGVyIiwiZHJvcGRvd25Jbm5lciIsImxhYmVsIiwic29ydEFjdGl2ZSIsImxhYmVsU29ydCIsInNvcnRCeSIsImNvbXBhcmVDb2xvcjEiLCJjb21wYXJlQ29sb3IyIiwiY2hhcnRDb250YWluZXIiLCJjaGFydExhYmVsIiwiY2hhcnRMYWJlbFRleHQiLCJjaGFydExhYmVsMSIsImNoYXJ0TGFiZWwyIiwiYmFyQ29udGFpbmVyIiwiYmFyQ29udGFpbmVyMSIsImJhckNvbnRhaW5lcjIiLCJkYXRhTGFiZWwiLCJncm91cEhlYWRlciIsImJhckxhYmVsIiwiZ3JvdXBEaXYiLCJpc0hpZ2hsaWdodGVkIiwicGxhY2VIb2xkZXIiLCJfVXRpbHMiLCJFbGVtZW50Iiwic2VsZWN0b3IiLCJvcHRpb25zIiwiX3RoaXMiLCJ0aGlzIiwiX2NsYXNzQ2FsbENoZWNrIiwibW9kZWwiLCJwYXJlbnQiLCJyZW5kZXJUb1NlbGVjdG9yIiwiY29udGFpbmVyIiwiJGQiLCJxIiwiY2hpbGRyZW4iLCJyZXJlbmRlciIsInJlcmVuZGVyT25EYXRhTWlzbWF0Y2giLCJpc01pc21hdGNoZWQiLCJkYXRhIiwiZWwiLCJwcmVyZW5kZXIiLCJhcmd1bWVudHMiLCJpc1JlYWR5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJleGlzdGluZyIsInByZXJlbmRlcmVkIiwiaW5uZXJIVE1MIiwidHlwZUNvbnRhaW5lciIsImNyZWRpdC1yYXRpbmciLCJ0eXBlRGl2IiwidHlwZUhlYWRlciIsImRlYnRfbGltaXRfdHlwZSIsImNyZWRpdDIwMTUiLCJjcmVkaXQyMDE4IiwiYXV0b0NvbXBsZXRlMCIsImF1dG9Db21wbGV0ZV93cmFwcGVyLTAiLCJhdXRvQ29tcGxldGUxIiwiYXV0b0NvbXBsZXRlX3dyYXBwZXItMSIsIndpdGhUb29sdGlwIiwiUHViU3ViIiwic3RhdGUiLCJfbG9nU3RhdGUiLCJjb25zb2xlIiwibG9nIiwiQXJyYXkiLCJjb21wYXJlIiwidGVzdEFyciIsImxlbmd0aCIsInN0YXRlTW9kdWxlIiwibG9nU3RhdGUiLCJnZXRTdGF0ZSIsInVuZGVmaW5lZCIsImdldFByZXZpb3VzU3RhdGUiLCJzZXRTdGF0ZSIsInB1Ymxpc2giLCJpc0FycmF5IiwidW5zaGlmdCIsIkdUTVB1c2giLCJldmVudExhYmVsIiwiZGF0YUxheWVyIiwicHVzaCIsImV2ZW50IiwiZXZlbnREYXRhIiwicHVibGlzaFdpbmRvd1Jlc2l6ZSIsIlMiLCJyZXNpemVUaW1lb3V0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiRmFkZUluVGV4dCIsIkhUTUxFbGVtZW50IiwiZmFkZU91dENvbnRlbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJmYWRlSW5Db250ZW50IiwiY29udGVudCIsImR1cmF0aW9uUyIsInN0eWxlIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uU3RyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJkdXJhdGlvbiIsInBhcnNlRmxvYXQiLCJyZW1vdmUiLCJTdHJpbmdIZWxwZXJzIiwiU3RyaW5nIiwiY2xlYW5TdHJpbmciLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJyZW1vdmVVbmRlcnNjb3JlcyIsInVuZG9DYW1lbENhc2UiLCJ0cnVuYyIsInVzZVdvcmRCb3VuZGFyeSIsInN1YlN0cmluZyIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwiaGFzaENvZGUiLCJoYXNoIiwiY2hhckNvZGVBdCIsIkRPTUhlbHBlcnMiLCJpbmRleE9mIiwiY2xhc3NTdHJpbmdzIiwibWF0Y2giLCJpZFN0cmluZyIsImVsU3RyaW5nIiwiY3JlYXRlRWxlbWVudCIsImZvckVhY2giLCJrbGFzcyIsInNldEF0dHJpYnV0ZSIsInF1ZXJ5U2VsZWN0b3IiLCJxYSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzdWJzY3JpcHRpb25zIiwiY3JlYXRlVG9rZW4iLCJ0b3BpYyIsImZuUmVmIiwiZnVuY3Rpb25IYXNoIiwidG9TdHJpbmciLCJ0b2tlbiIsImZuIiwibG9nU3VicyIsInNldFN1YnMiLCJzdWJzQXJyYXkiLCJwYWlyIiwidG9rZW5PYmoiLCJzdWJzY3JpYmUiLCJjYW5jZWxTdWIiLCJ1bnN1YnNjcmliZSIsImtleXMiLCJiYXIiLCJiYXJDb2xvcjEiLCJiYXJDb2xvcjIiLCJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsIm1lc3NhZ2VzIiwibGFzdFVpZCIsImhhc0tleXMiLCJvYmoiLCJjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyIsInN1YnNjcmliZXIiLCJtZXNzYWdlIiwiZXgiLCJ0aHJvd0V4Y2VwdGlvbiIsImNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMiLCJkZWxpdmVyTWVzc2FnZSIsIm9yaWdpbmFsTWVzc2FnZSIsIm1hdGNoZWRNZXNzYWdlIiwiaW1tZWRpYXRlRXhjZXB0aW9ucyIsInN1YnNjcmliZXJzIiwiY2FsbFN1YnNjcmliZXIiLCJzeW5jIiwiZGVsaXZlciIsInBvc2l0aW9uIiwiY3JlYXRlRGVsaXZlcnlGdW5jdGlvbiIsImhhc1N1YnNjcmliZXJzIiwiZm91bmQiLCJCb29sZWFuIiwibWVzc2FnZUhhc1N1YnNjcmliZXJzIiwicHVibGlzaFN5bmMiLCJmdW5jIiwic3Vic2NyaWJlT25jZSIsImFwcGx5IiwiY2xlYXJBbGxTdWJzY3JpcHRpb25zIiwiY2xlYXJTdWJzY3JpcHRpb25zIiwiaXNUb3BpYyIsImRlc2NlbmRhbnRUb3BpY0V4aXN0cyIsImlzVG9rZW4iLCJpc0Z1bmN0aW9uIiwicmVzdWx0IiwiYW1kIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiZSIsImYiLCJzZWxmIiwicG9zdE1lc3NhZ2UiLCJ0ZXN0IiwibG9jYXRpb24iLCJzZWFyY2giLCJhIiwiaCIsInUiLCJrIiwicGFyc2UiLCJkeW5hbWljVHlwaW5nIiwieiIsImR5bmFtaWNUeXBpbmdGdW5jdGlvbiIsInRyYW5zZm9ybSIsIndvcmtlciIsIldPUktFUlNfU1VQUE9SVEVEIiwiU0NSSVBUX1BBVEgiLCJFcnJvciIsIldvcmtlciIsIm9ubWVzc2FnZSIsImlkIiwidXNlclN0ZXAiLCJzdGVwIiwidXNlckNodW5rIiwiY2h1bmsiLCJ1c2VyQ29tcGxldGUiLCJjb21wbGV0ZSIsInVzZXJFcnJvciIsImVycm9yIiwiaW5wdXQiLCJjb25maWciLCJ3b3JrZXJJZCIsIk5PREVfU1RSRUFNX0lOUFVUIiwiZG93bmxvYWQiLCJfIiwicmVhZGFibGUiLCJyZWFkIiwib24iLCJnIiwiRmlsZSIsInN0cmVhbSIsInVucGFyc2UiLCJ5IiwiZGVsaW1pdGVyIiwiQkFEX0RFTElNSVRFUlMiLCJmaWx0ZXIiLCJxdW90ZXMiLCJza2lwRW1wdHlMaW5lcyIsIm5ld2xpbmUiLCJxdW90ZUNoYXIiLCJoZWFkZXIiLCJSZWdFeHAiLCJNIiwiSlNPTiIsImZpZWxkcyIsIm1ldGEiLCJ2Iiwiam9pbiIsInRyaW0iLCJjb25zdHJ1Y3RvciIsIkRhdGUiLCJzdHJpbmdpZnkiLCJzbGljZSIsImNoYXJBdCIsIlJFQ09SRF9TRVAiLCJmcm9tQ2hhckNvZGUiLCJVTklUX1NFUCIsIkJZVEVfT1JERVJfTUFSSyIsIkxvY2FsQ2h1bmtTaXplIiwiUmVtb3RlQ2h1bmtTaXplIiwiRGVmYXVsdERlbGltaXRlciIsIlBhcnNlciIsIlBhcnNlckhhbmRsZSIsIk5ldHdvcmtTdHJlYW1lciIsIkZpbGVTdHJlYW1lciIsIlN0cmluZ1N0cmVhbWVyIiwiUmVhZGFibGVTdHJlYW1TdHJlYW1lciIsImpRdWVyeSIsImVhY2giLCJwcm9wIiwidG9VcHBlckNhc2UiLCJhdHRyIiwiRmlsZVJlYWRlciIsImZpbGVzIiwiZmlsZSIsImlucHV0RWxlbSIsImluc3RhbmNlQ29uZmlnIiwiZXh0ZW5kIiwiYmVmb3JlIiwiYWN0aW9uIiwicmVhc29uIiwic3BsaWNlIiwiX2hhbmRsZSIsIl9maW5pc2hlZCIsIl9jb21wbGV0ZWQiLCJfaW5wdXQiLCJfYmFzZUluZGV4IiwiX3BhcnRpYWxMaW5lIiwiX3Jvd0NvdW50IiwiX3N0YXJ0IiwiX25leHRDaHVuayIsImlzRmlyc3RDaHVuayIsIl9jb21wbGV0ZVJlc3VsdHMiLCJlcnJvcnMiLCJFIiwiY2h1bmtTaXplIiwicGFyc2VJbnQiLCJzdHJlYW1lciIsIl9jb25maWciLCJwYXJzZUNodW5rIiwiYmVmb3JlRmlyc3RDaHVuayIsInBhdXNlZCIsImFib3J0ZWQiLCJjdXJzb3IiLCJzdWJzdHJpbmciLCJwcmV2aWV3IiwicmVzdWx0cyIsIldPUktFUl9JRCIsImZpbmlzaGVkIiwiY29uY2F0IiwiX3NlbmRFcnJvciIsIl9yZWFkQ2h1bmsiLCJfY2h1bmtMb2FkZWQiLCJYTUxIdHRwUmVxdWVzdCIsIndpdGhDcmVkZW50aWFscyIsIm9ubG9hZCIsInciLCJvbmVycm9yIiwiX2NodW5rRXJyb3IiLCJvcGVuIiwiZG93bmxvYWRSZXF1ZXN0SGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwic3RhdHVzIiwicmVhZHlTdGF0ZSIsImdldFJlc3BvbnNlSGVhZGVyIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIndlYmtpdFNsaWNlIiwibW96U2xpY2UiLCJGaWxlUmVhZGVyU3luYyIsIk1hdGgiLCJtaW4iLCJzaXplIiwicmVhZEFzVGV4dCIsImVuY29kaW5nIiwidGFyZ2V0IiwicGF1c2UiLCJyZXN1bWUiLCJfc3RyZWFtRGF0YSIsIl9zdHJlYW1FbmQiLCJfc3RyZWFtRXJyb3IiLCJfY2hlY2tJc0ZpbmlzaGVkIiwic2hpZnQiLCJfc3RyZWFtQ2xlYW5VcCIsInJlbW92ZUxpc3RlbmVyIiwiYWJvcnQiLCJ0cmltSGVhZGVycyIsInR5cGUiLCJjb2RlIiwicm93Iiwic3BsaXQiLCJjb21tZW50cyIsImFicyIsInN1Y2Nlc3NmdWwiLCJiZXN0RGVsaW1pdGVyIiwiZ2V0Q2hhckluZGV4IiwiTyIsIngiLCJUIiwiSSIsIkEiLCJEIiwiZmFzdE1vZGUiLCJMIiwiZXNjYXBlQ2hhciIsIlAiLCJGIiwiQyIsIlIiLCJpbmRleCIsImIiLCJsaW5lYnJlYWsiLCJ0cnVuY2F0ZWQiLCJ0ZXJtaW5hdGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNyYyIsImJvZHkiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwic2VsZWN0IiwicmVzdWx0c0xpc3QiLCJoaWdobGlnaHQiLCJnZXRJbnB1dCIsImNsZWFyUmVzdWx0cyIsImF1dG9Db21wbGV0ZVZpZXciLCJjcmVhdGVSZXN1bHRzTGlzdCIsInJlbmRlclJlc3VsdHMiLCJkZXN0aW5hdGlvbiIsImluc2VydEFkamFjZW50RWxlbWVudCIsImFkZFJlc3VsdHNUb0xpc3QiLCJkYXRhU3JjIiwiZGF0YUtleSIsImNhbGxiYWNrIiwicmVjb3JkIiwicmVzdWx0VmFsdWUiLCJzb3VyY2UiLCJhcHBlbmRDaGlsZCIsIm5hdmlnYXRpb24iLCJmaXJzdCIsImZpcnN0Q2hpbGQiLCJvbmtleWRvd24iLCJhY3RpdmUiLCJhY3RpdmVFbGVtZW50Iiwia2V5Q29kZSIsInByZXZpb3VzU2libGluZyIsImZvY3VzIiwiY2hpbGROb2RlcyIsImxhc3RDaGlsZCIsIm5leHRTaWJsaW5nIiwiZ2V0U2VsZWN0aW9uIiwiZmllbGQiLCJyZXN1bHRzVmFsdWVzIiwic2VsZWN0aW9uIiwiZXZlbnRUeXBlIiwicXVlcnkiLCJtYXAiLCJmaW5kIiwicmVzVmFsdWUiLCJjbG9zZXN0IiwiZ2V0QXR0cmlidXRlIiwiYXV0b0NvbXBsZXRlIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsInNlYXJjaEVuZ2luZSIsInRocmVzaG9sZCIsIm1heFJlc3VsdHMiLCJyZXN1bHRJdGVtIiwib25TZWxlY3Rpb24iLCJpbml0IiwicHJvdG9Qcm9wcyIsInJlY29yZExvd2VyQ2FzZSIsInNlYXJjaFBvc2l0aW9uIiwibnVtYmVyIiwicmVjb3JkQ2hhciIsImluY2x1ZGVzIiwiaW5wdXRWYWx1ZSIsInJlc0xpc3QiLCJsaXN0IiwiX3RoaXMyIiwib25rZXl1cCIsImxpc3RNYXRjaGVkUmVzdWx0cyIsIl90aGlzMyIsInRoZW4iLCJpZ25pdGUiLCJzdGF0aWNQcm9wcyIsImdsb2JhbCIsImlzQnJvd3NlciIsImxvbmdlclRpbWVvdXRCcm93c2VycyIsInRpbWVvdXREdXJhdGlvbiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRlYm91bmNlIiwiY2FsbGVkIiwic2NoZWR1bGVkIiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZWxlbWVudCIsIm5vZGVUeXBlIiwiY3NzIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZ2V0UGFyZW50Tm9kZSIsIm5vZGVOYW1lIiwicGFyZW50Tm9kZSIsImhvc3QiLCJnZXRTY3JvbGxQYXJlbnQiLCJfZ2V0U3R5bGVDb21wdXRlZFByb3AiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImlzSUUxMSIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwiaXNJRTEwIiwiaXNJRSIsInZlcnNpb24iLCJnZXRPZmZzZXRQYXJlbnQiLCJub09mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsImdldFJvb3QiLCJub2RlIiwiZmluZENvbW1vbk9mZnNldFBhcmVudCIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJvcmRlciIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInN0YXJ0IiwiZW5kIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJjb250YWlucyIsImZpcnN0RWxlbWVudENoaWxkIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwiaHRtbCIsInNjcm9sbGluZ0VsZW1lbnQiLCJnZXRCb3JkZXJzU2l6ZSIsInN0eWxlcyIsImF4aXMiLCJzaWRlQSIsInNpZGVCIiwiZ2V0U2l6ZSIsImNvbXB1dGVkU3R5bGUiLCJtYXgiLCJnZXRXaW5kb3dTaXplcyIsImhlaWdodCIsIndpZHRoIiwiY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImdldENsaWVudFJlY3QiLCJvZmZzZXRzIiwicmlnaHQiLCJsZWZ0IiwiYm90dG9tIiwidG9wIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJzaXplcyIsImNsaWVudEhlaWdodCIsImhvcml6U2Nyb2xsYmFyIiwib2Zmc2V0V2lkdGgiLCJ2ZXJ0U2Nyb2xsYmFyIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJzdWJ0cmFjdCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZ2V0Qm91bmRhcmllcyIsInBvcHBlciIsInJlZmVyZW5jZSIsInBhZGRpbmciLCJib3VuZGFyaWVzRWxlbWVudCIsImJvdW5kYXJpZXMiLCJleGNsdWRlU2Nyb2xsIiwicmVsYXRpdmVPZmZzZXQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsImlzRml4ZWQiLCJfZ2V0V2luZG93U2l6ZXMiLCJpc1BhZGRpbmdOdW1iZXIiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInBsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiYXJlYSIsIl9yZWYiLCJzb3J0IiwiZmlsdGVyZWRBcmVhcyIsIl9yZWYyIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwiZ2V0T3V0ZXJTaXplcyIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblJpZ2h0IiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJtYXRjaGVkIiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwiYXJyIiwiY2hlY2siLCJydW5Nb2RpZmllcnMiLCJtb2RpZmllcnMiLCJlbmRzIiwiZmluZEluZGV4IiwiY3VyIiwid2FybiIsImVuYWJsZWQiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsInByZWZpeCIsInRvQ2hlY2siLCJnZXRXaW5kb3ciLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwidXBkYXRlQm91bmQiLCJwYXNzaXZlIiwic2Nyb2xsRWxlbWVudCIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJldmVudHNFbmFibGVkIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzY2hlZHVsZVVwZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc051bWVyaWMiLCJpc05hTiIsImlzRmluaXRlIiwic2V0U3R5bGVzIiwidW5pdCIsImlzRmlyZWZveCIsImlzTW9kaWZpZXJSZXF1aXJlZCIsInJlcXVlc3RpbmdOYW1lIiwicmVxdWVzdGVkTmFtZSIsInJlcXVlc3RpbmciLCJpc1JlcXVpcmVkIiwiX3JlcXVlc3RpbmciLCJyZXF1ZXN0ZWQiLCJwbGFjZW1lbnRzIiwidmFsaWRQbGFjZW1lbnRzIiwiY2xvY2t3aXNlIiwiY291bnRlciIsInJldmVyc2UiLCJCRUhBVklPUlMiLCJGTElQIiwiQ0xPQ0tXSVNFIiwiQ09VTlRFUkNMT0NLV0lTRSIsInBhcnNlT2Zmc2V0Iiwib2Zmc2V0IiwiYmFzZVBsYWNlbWVudCIsInVzZUhlaWdodCIsImZyYWdtZW50cyIsImZyYWciLCJkaXZpZGVyIiwic3BsaXRSZWdleCIsIm9wcyIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJyZWR1Y2UiLCJzdHIiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJwb3NpdGlvbkZpeGVkIiwicmVtb3ZlT25EZXN0cm95Iiwib25DcmVhdGUiLCJvblVwZGF0ZSIsInNoaWZ0dmFyaWF0aW9uIiwiX2RhdGEkb2Zmc2V0cyIsImlzVmVydGljYWwiLCJzaWRlIiwic2hpZnRPZmZzZXRzIiwicHJldmVudE92ZXJmbG93IiwidHJhbnNmb3JtUHJvcCIsInBvcHBlclN0eWxlcyIsInByaW9yaXR5IiwicHJpbWFyeSIsImVzY2FwZVdpdGhSZWZlcmVuY2UiLCJzZWNvbmRhcnkiLCJrZWVwVG9nZXRoZXIiLCJmbG9vciIsIm9wU2lkZSIsImFycm93IiwiX2RhdGEkb2Zmc2V0cyRhcnJvdyIsImFycm93RWxlbWVudCIsImxlbiIsInNpZGVDYXBpdGFsaXplZCIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJyb3VuZCIsImZsaXAiLCJmbGlwcGVkIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsImJlaGF2aW9yIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb24iLCJmbGlwVmFyaWF0aW9ucyIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImhpZGUiLCJib3VuZCIsImF0dHJpYnV0ZXMiLCJjb21wdXRlU3R5bGUiLCJsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24iLCJncHVBY2NlbGVyYXRpb24iLCJvZmZzZXRQYXJlbnRSZWN0Iiwic2hvdWxkUm91bmQiLCJub1JvdW5kIiwicmVmZXJlbmNlV2lkdGgiLCJwb3BwZXJXaWR0aCIsImlzVmFyaWF0aW9uIiwiaG9yaXpvbnRhbFRvSW50ZWdlciIsInZlcnRpY2FsVG9JbnRlZ2VyIiwiZ2V0Um91bmRlZE9mZnNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwicHJlZml4ZWRQcm9wZXJ0eSIsIndpbGxDaGFuZ2UiLCJpbnZlcnRUb3AiLCJpbnZlcnRMZWZ0IiwieC1wbGFjZW1lbnQiLCJhcnJvd1N0eWxlcyIsImFwcGx5U3R5bGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJvbkxvYWQiLCJtb2RpZmllck9wdGlvbnMiLCJQb3BwZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGUiLCJpc0Rlc3Ryb3llZCIsImlzQ3JlYXRlZCIsImpxdWVyeSIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlQ2hpbGQiLCJVdGlscyIsIlBvcHBlclV0aWxzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImRyb3Bkb3duIiwiVGV4dElucHV0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfX3Byb3RvX18iLCJnZXRQcm90b3R5cGVPZiIsIkRyb3Bkb3duIiwiX2lzT3BlbiIsIndyYXBwZXIiLCJvcHRpb25zTGlzdCIsIm9wdGlvbiIsInNlbGVjdGVkIiwidGV4dENvbnRlbnQiLCJQQ1REcm9wZG93biIsIml0ZW0iLCJzdG9wUHJvcGFnYXRpb24iLCJpdGVtQ2xpY2tIYW5kbGVyIiwiX3NlbGVjdGVkT3B0aW9uIiwidG9CZVNlbGVjdGVkIiwiY2xpY2tIYW5kbGVyIiwicHJldmVudERlZmF1bHQiLCJzcGFjZUFuZEFycm93SGFuZGxlciIsImlzT3BlbiIsImVudGVyQW5kRXNjYXBlSGFuZGxlciIsInRhYkhhbmRsZXIiLCJzZWxlY3RlZE9wdGlvbiIsIm5leHQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiVUlDb250cm9sSXNPcGVuIiwiYm9vbCIsImJvZHlDbGlja0hhbmRsZXIiLCJpbm5lclRleHQiLCJvbkNoYW5nZSIsIl9Sb3V0ZXIiLCJQQ1RBcHAiLCJyb3V0ZXJPcHRpb25zIiwibmVlZHNSb3V0ZXIiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJkaXNhYmxlSG92ZXJPblRvdWNoIiwiaGFzSG92ZXJDbGFzcyIsImxhc3RUb3VjaFRpbWUiLCJlbmFibGVIb3ZlciIsImNvbXBvbmVudCIsIl9vcHRpb25zIiwiX3R5cGVvZiIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiYXV0b0NvbXBsZXRlX3dyYXBwZXIiLCJhdXRvQ29tcGxldGVfcmVzdWx0c19saXN0IiwiYXV0b0NvbXBsZXRlX3Jlc3VsdCIsImF1dG9Db21wbGV0ZV9oaWdobGlnaHRlZCIsIkZ1bmN0aW9uIiwiZW5jb2RlIiwiZGVjb2RlIiwidmlld3MiLCJQUyIsInN0YXRlT2JqIiwiaGFzaFN0YXRlIiwiZGVjb2RlSGFzaCIsInZpZXdQcm9taXNlcyIsImFsbCIsIm1zZyIsImhhc2hDaGFuZ2UiLCJzZXRTdGF0ZU9iaiIsInJlcGxhY2VTdGF0ZSIsImhpc3RvcnkiLCJoYXNoU3RyaW5nIiwic3RhdGljIiwiTWFwIiwic2V0IiwiaGFzIiwiY2xlYXIiLCJ2YWx1ZXMiLCJlbnRyaWVzIiwiZW1wdHkiLCJzcmNfbWFwIiwic3JjX25lc3QiLCJzb3J0VmFsdWVzIiwicm9sbHVwIiwibmVzdCIsInNvcnRLZXlzIiwiYXJyYXkiLCJkZXB0aCIsImNyZWF0ZVJlc3VsdCIsInNldFJlc3VsdCIsImtleVZhbHVlIiwidmFsdWVzQnlLZXkiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJzb3J0S2V5IiwiU2V0IiwicHJvdG8iLCJzZXRfc2V0IiwiQ29tcGFyaXNvbiIsImRpdiIsInN1cGVyIiwibWF0Y2hlcyIsImNvbXBhcmlzb24iLCJDb21wYXJpc29uVGV4dCIsImRpY3QiLCJyZXR1cm5UZW1wbGF0ZSIsIkJhciIsImNvbG9yIiwibGluZWFyU2NhbGUiLCJ0eXBlT2JqZWN0IiwidHlwZXMiLCJzcHJlYWQiLCJmb3JtYXRWYWx1ZSIsImZvcm1hdHRlZFZhbHVlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJjdXJyZW5jeSIsIkNvbXBhcmlzb25DaGFydCIsImJhcnMiLCJjcmVhdGVDb21wb25lbnQiLCJwYXJ0aWFsVGVtcGxhdGUiLCJvdXRlckhUTUwiLCJ0b0ZpeGVkIiwidWEiLCJpc1VDQnJvd3NlciIsImlzSU9TIiwicGxhdGZvcm0iLCJNU1N0cmVhbSIsImExMXkiLCJhbGxvd0hUTUwiLCJhbmltYXRlRmlsbCIsImFuaW1hdGlvbiIsImFwcGVuZFRvIiwiYXJpYSIsImFycm93VHlwZSIsImJvdW5kYXJ5IiwiZGVsYXkiLCJkaXN0YW5jZSIsImZsaXBCZWhhdmlvciIsImZsaXBPblVwZGF0ZSIsImZvbGxvd0N1cnNvciIsImhpZGVPbkNsaWNrIiwiaWdub3JlQXR0cmlidXRlcyIsImluZXJ0aWEiLCJpbnRlcmFjdGl2ZSIsImludGVyYWN0aXZlQm9yZGVyIiwiaW50ZXJhY3RpdmVEZWJvdW5jZSIsImxhenkiLCJtYXhXaWR0aCIsIm11bHRpcGxlIiwib25IaWRkZW4iLCJvbkhpZGUiLCJvbk1vdW50Iiwib25TaG93Iiwib25TaG93biIsInBvcHBlck9wdGlvbnMiLCJyb2xlIiwic2hvd09uSW5pdCIsInN0aWNreSIsInRoZW1lIiwidG91Y2giLCJ0b3VjaEhvbGQiLCJ0cmlnZ2VyIiwidXBkYXRlRHVyYXRpb24iLCJ3YWl0IiwiekluZGV4IiwiUE9QUEVSX0lOU1RBTkNFX0RFUEVOREVOQ0lFUyIsIlNlbGVjdG9ycyIsIlBPUFBFUiIsIlRPT0xUSVAiLCJDT05URU5UIiwiQkFDS0RST1AiLCJBUlJPVyIsIlJPVU5EX0FSUk9XIiwiZWxlbWVudFByb3RvIiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJhcnJheUZyb20iLCJwYXJlbnRTZWxlY3RvciIsImNsb3Nlc3RDYWxsYmFjayIsImluZGV4X2FsbF9oYXNPd25Qcm9wZXJ0eSIsImdldFZhbHVlIiwiZGVmYXVsdFZhbHVlIiwibXMiLCJ0aW1lb3V0SWQiLCJfYXJndW1lbnRzIiwiY2xlYXJUaW1lb3V0IiwiZ2V0TW9kaWZpZXIiLCJpc1Npbmd1bGFyIiwiZXZhbHVhdGVWYWx1ZSIsImFyZ3MiLCJzZXRGbGlwTW9kaWZpZXJFbmFibGVkIiwiaW5kZXhfYWxsX2RpdiIsInNldElubmVySFRNTCIsInNldENvbnRlbnQiLCJjb250ZW50RWwiLCJnZXRDaGlsZHJlbiIsInRvb2x0aXAiLCJiYWNrZHJvcCIsImFkZEluZXJ0aWEiLCJjcmVhdGVBcnJvd0VsZW1lbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVCYWNrZHJvcEVsZW1lbnQiLCJhZGRJbnRlcmFjdGl2ZSIsImFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uIiwiZWxzIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidG9nZ2xlVHJhbnNpdGlvbkVuZExpc3RlbmVyIiwibGlzdGVuZXIiLCJldmVudE5hbWUiLCJ3ZWJraXRUcmFuc2l0aW9uIiwiZ2V0UG9wcGVyUGxhY2VtZW50IiwiZnVsbFBsYWNlbWVudCIsInNldFZpc2liaWxpdHlTdGF0ZSIsInRvZ2dsZVRoZW1lIiwidGhlbWVOYW1lIiwiaGlkZUFsbCIsImNoZWNrSGlkZU9uQ2xpY2siLCJleGNsdWRlIiwiX3RpcHB5IiwiUEFTU0lWRSIsIlBBRERJTkciLCJpc1VzaW5nVG91Y2giLCJvbkRvY3VtZW50VG91Y2giLCJwZXJmb3JtYW5jZSIsIm9uRG9jdW1lbnRNb3VzZU1vdmUiLCJsYXN0TW91c2VNb3ZlVGltZSIsIm5vdyIsIm9uRG9jdW1lbnRDbGljayIsImlzQ2xpY2tUcmlnZ2VyIiwiY2xlYXJEZWxheVRpbWVvdXRzIiwib25XaW5kb3dCbHVyIiwiYmx1ciIsImluZGV4X2FsbF9rZXlzIiwiZXZhbHVhdGVQcm9wcyIsIm91dCIsImFjYyIsInZhbHVlQXNTdHJpbmciLCJnZXREYXRhQXR0cmlidXRlT3B0aW9ucyIsInZhbGlkYXRlT3B0aW9ucyIsImRlZmF1bHRzIiwiaWRDb3VudGVyIiwiY3JlYXRlVGlwcHkiLCJjb2xsZWN0aW9uUHJvcHMiLCJsYXN0VHJpZ2dlckV2ZW50IiwibGFzdE1vdXNlTW92ZUV2ZW50Iiwic2hvd1RpbWVvdXRJZCIsImhpZGVUaW1lb3V0SWQiLCJpc1NjaGVkdWxlZFRvU2hvdyIsInRyYW5zaXRpb25FbmRMaXN0ZW5lciIsImxpc3RlbmVycyIsImRlYm91bmNlZE9uTW91c2VNb3ZlIiwib25Nb3VzZU1vdmUiLCJjcmVhdGVQb3BwZXJFbGVtZW50IiwiaXNWaXNpYmxlIiwic2NoZWR1bGVTaG93IiwicG9wcGVyQ2hpbGRyZW4iLCJwb3BwZXJJbnN0YW5jZSIsImlzRW5hYmxlZCIsImlzTW91bnRlZCIsImlzU2hvd24iLCJzaG93IiwiZW5hYmxlIiwiZGlzYWJsZSIsImRlc3Ryb3kiLCJhZGRUcmlnZ2Vyc1RvUmVmZXJlbmNlIiwiY3JlYXRlUG9wcGVySW5zdGFuY2UiLCJoYXNBdHRyaWJ1dGUiLCJwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yIiwiX2xhc3RNb3VzZU1vdmVFdmVudCIsImNsaWVudFgiLCJjbGllbnRZIiwiaXNWZXJ0aWNhbFBsYWNlbWVudCIsImlzSG9yaXpvbnRhbFBsYWNlbWVudCIsImlzSG9yaXpvbnRhbCIsInJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyIiwidGFyZ2V0RWwiLCJjcmVhdGVEZWxlZ2F0ZUNoaWxkVGlwcHkiLCJoYXNGb2xsb3dDdXJzb3JCZWhhdmlvciIsInNjaGVkdWxlSGlkZSIsImNsZWFudXBPbGRNb3VzZUxpc3RlbmVycyIsIm9uVHJpZ2dlciIsImlzRXZlbnRMaXN0ZW5lclN0b3BwZWQiLCJNb3VzZUV2ZW50IiwicmVmZXJlbmNlVGhlQ3Vyc29ySXNPdmVyIiwiaXNDdXJzb3JPdmVyUG9wcGVyIiwiaXNDdXJzb3JPdmVyUmVmZXJlbmNlIiwicG9wcGVyUGxhY2VtZW50IiwiZXhjZWVkc1RvcCIsImV4Y2VlZHNCb3R0b20iLCJleGNlZWRzTGVmdCIsImV4Y2VlZHNSaWdodCIsImlzQ3Vyc29yT3V0c2lkZUludGVyYWN0aXZlQm9yZGVyIiwib25Nb3VzZUxlYXZlIiwib25CbHVyIiwicmVsYXRlZFRhcmdldCIsIm9uRGVsZWdhdGVTaG93Iiwib25EZWxlZ2F0ZUhpZGUiLCJzdXBwb3J0c1RvdWNoIiwiaXNUb3VjaEV2ZW50IiwiX2luc3RhbmNlJHBvcHBlckNoaWxkIiwiZXNtX3BvcHBlciIsIm9uVHJhbnNpdGlvbkVuZCIsImhhbmRsZXIiLCJyZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UiLCJnZXRJbm5lckVsZW1lbnRzIiwicHJldlByb3BzIiwibmV4dFByb3BzIiwiX2dldENoaWxkcmVuIiwicmVwbGFjZUNoaWxkIiwicmVtb3ZlSW50ZXJhY3RpdmUiLCJyZW1vdmVJbmVydGlhIiwidXBkYXRlUG9wcGVyRWxlbWVudCIsInZpc2liaWxpdHkiLCJzaG91bGRFbmFibGVMaXN0ZW5lcnMiLCJtYXJnaW4iLCJyZWZsb3ciLCJhZnRlclBvcHBlclBvc2l0aW9uVXBkYXRlcyIsIm1vdW50IiwidHJhbnNpdGlvbkRlbGF5IiwidXBkYXRlUG9zaXRpb24iLCJvblRyYW5zaXRpb25lZEluIiwib25UcmFuc2l0aW9uZWRPdXQiLCJkZXN0cm95VGFyZ2V0SW5zdGFuY2VzIiwiY2hpbGQiLCJnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kIiwidGlwcHkiLCJ0YXJnZXRzIiwidmlydHVhbFJlZmVyZW5jZSIsInBvbHlmaWxscyIsImlzVmlydHVhbCIsImNsYXNzTmFtZXMiLCJwb2x5ZmlsbEVsZW1lbnRQcm90b3R5cGVQcm9wZXJ0aWVzIiwiaW5zdGFuY2VzIiwiTm9kZUxpc3QiLCJnZXRBcnJheU9mRWxlbWVudHMiLCJzZXREZWZhdWx0cyIsInBhcnRpYWxEZWZhdWx0cyIsImdyb3VwIiwiX3JlZiRkZWxheSIsIl9yZWYkZHVyYXRpb24iLCJpc0FueVRpcHB5T3BlbiIsInNldElzQW55VGlwcHlPcGVuIiwidXBkYXRlSW5zdGFuY2VzIiwiX29yaWdpbmFsUHJvcHMiLCJoZWFkIiwiaW5zZXJ0QmVmb3JlIiwiaW5qZWN0Q1NTIiwiaW5kZXhfYWxsIiwiaW5pdGlhbENvbXBhcmUiLCJjb21wYXJpc29ucyIsImdyb3VwcyIsInR5cGVzTmVzdGVkIiwidmlldyIsImNvbXBvdW5kSW5kZXgiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJpbml0aWFsaXplQXV0b2NvbXBsZXRlcyIsImluaXRpYWxpemVUb29sdGlwcyIsIkF1dG9Db21wbGV0ZSIsImZlZWRiYWNrIiwiVGhpc0Ryb3Bkb3duIiwiX2RhdGEiLCJkcm9wZG93blR5cGUiLCJpc0RlZmF1bHRTZWxlY3Rpb24iLCJOYU4iLCJkYXRhc2V0IiwiU2VsZWN0aW9ucyIsImRyb3Bkb3duRGF0YSIsImRyb3Bkb3ducyIsImxhYmVsSGlnaGxpZ2h0IiwiYXNjZW5kaW5nIiwiZGVzY2VuZGluZyIsIkZpZnR5U3RhdGVWaWV3IiwiYmFyQ29udGFpbmVycyIsImxhc3RQb3NpdGlvbnMiLCJoaWdobGlnaHRlZEJhcnMiLCJleHBsYWluZXJUZXh0IiwiY2VudHJhbGl6YXRpb24iLCJkZWJ0X3Blcl9jYXBpdGEiLCJkZWJ0X3BlcmNlbnRfU1BJIiwidGVuX3llYXJfcG9wX2dyb3d0aCIsInJldmVudWVfdm9sYXRpbGl0eSIsInN0YXRlX2xvY2FsX2RpdmlzaW9uIiwiZ3JvdXBCeUZuIiwiZ3JvdXBCeSIsInNlbGVjdGlvbnMiLCJzb3J0VmFsdWVLZXkiLCJzb3J0VmFsdWVzRm4iLCJuZXN0RGF0YSIsInB1c2hCYXJzIiwicmVuZGVyU2VsZWN0aW9ucyIsImV4cGxhaW5lcldyYXBwZXIiLCJmaWVsZEV4cGxhaW5lciIsImdyb3VwRXhwbGFpbmVyIiwidXBkYXRlRXhwbGFpbmVyVGV4dCIsImNoYXJ0cyIsInJlbmRlckNoYXJ0cyIsIm5lc3RlZERhdGEiLCJkMyIsImludmVydFBvc2l0aW9ucyIsImxhc3RQb3NpdGlvbiIsImRlbHRhWSIsImZpcnN0UG9zaXRpb25zIiwidXBkYXRlQmFycyIsInVwZGF0ZURhdGFMYWJlbHMiLCJ1cGRhdGVHcm91cHMiLCJzb3J0QmFycyIsImFkanVzdEV4cGxhaW5lclRleHRIZWlnaHQiLCJpbml0SGlnaGxpZ2h0QmFycyIsImluaXRDbGVhckFsbEhpZ2hsaWdodHMiLCJjYWxsZWRGcm9tUHJlcmVuZGVyIiwiY29tcHV0ZWRTdHlsZXMiLCJ0b2dnbGUiLCJyZWNvcmRGaXJzdFBvc2l0aW9ucyIsImdldFJ1bnRpbWVEYXRhIiwiYXBwQ29udGFpbmVyIiwiUGFwYSIsImRhdGFIYXNoIiwiSVNfUFJFUkVOREVSSU5HIiwicmVzcG9uc2UiLCJkYXRhQXJyYXkiLCJDb21wYXJpc29uVmlldyIsIkFwcCIsInNlY3Rpb25zIiwiZm9vdGVyIiwiYXR0YWNoU2VjdGlvbk9wZW5DbG9zZSIsInRvZ2dsZVNlY3Rpb24iLCJoZWFkaW5nIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEs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eUQsWUM3SXJCLFdBQ21CLENBQ3BDb3dCLGFBQWEsSUFFaUN0c0IsT0FBT3FrQyxpQkFDckRJLEdBQUl6bkMsWUFFTHluQyxHQUFJcHVCIiwiZmlsZSI6ImpzL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDM4KTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJkcm9wZG93bldyYXBwZXJcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS1zZWxlY3Rpb25zLS1kcm9wZG93bldyYXBwZXJcIixcImRyb3Bkb3duT3V0ZXJcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS1zZWxlY3Rpb25zLS1kcm9wZG93bk91dGVyXCIsXCJkcm9wZG93bklubmVyXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtc2VsZWN0aW9ucy0tZHJvcGRvd25Jbm5lclwiLFwibGFiZWxcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS1zZWxlY3Rpb25zLS1sYWJlbFwiLFwic29ydEFjdGl2ZVwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnMtLXNvcnRBY3RpdmVcIixcImxhYmVsU29ydFwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnMtLWxhYmVsU29ydFwiLFwic29ydEJ5XCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtc2VsZWN0aW9ucy0tc29ydEJ5XCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJjb21wYXJlQ29sb3IxXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1jb21wYXJlQ29sb3IxXCIsXCJjb21wYXJlQ29sb3IyXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1jb21wYXJlQ29sb3IyXCIsXCJjaGFydENvbnRhaW5lclwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tY2hhcnRDb250YWluZXJcIixcImNoYXJ0TGFiZWxcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWNoYXJ0TGFiZWxcIixcImNoYXJ0TGFiZWxUZXh0XCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1jaGFydExhYmVsVGV4dFwiLFwiY2hhcnRMYWJlbDFcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWNoYXJ0TGFiZWwxXCIsXCJjaGFydExhYmVsMlwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tY2hhcnRMYWJlbDJcIixcImJhckNvbnRhaW5lclwiOlwic3JjLWNvbXBvbmVudHMtY29tcGFyaXNvbi0tYmFyQ29udGFpbmVyXCIsXCJiYXJDb250YWluZXIxXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1iYXJDb250YWluZXIxXCIsXCJiYXJDb250YWluZXIyXCI6XCJzcmMtY29tcG9uZW50cy1jb21wYXJpc29uLS1iYXJDb250YWluZXIyXCIsXCJkYXRhTGFiZWxcIjpcInNyYy1jb21wb25lbnRzLWNvbXBhcmlzb24tLWRhdGFMYWJlbFwifTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiZ3JvdXBIZWFkZXJcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS0tZ3JvdXBIZWFkZXJcIixcImJhckxhYmVsXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtLWJhckxhYmVsXCIsXCJncm91cERpdlwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1ncm91cERpdlwiLFwiYmFyQ29udGFpbmVyXCI6XCJzcmMtdmlld3MtZmlmdHktc3RhdGUtLWJhckNvbnRhaW5lclwiLFwiaXNIaWdobGlnaHRlZFwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1pc0hpZ2hsaWdodGVkXCIsXCJkYXRhTGFiZWxcIjpcInNyYy12aWV3cy1maWZ0eS1zdGF0ZS0tZGF0YUxhYmVsXCIsXCJwbGFjZUhvbGRlclwiOlwic3JjLXZpZXdzLWZpZnR5LXN0YXRlLS1wbGFjZUhvbGRlclwifTsiLCJpbXBvcnQgeyBET01IZWxwZXJzIGFzICRkIH0gZnJvbSAnQFV0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCBvcHRpb25zKXtcbiAgICAgICAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnICl7XG4gICAgICAgICAgICB0aHJvdyBgRmlyc3QgcGFyYW1ldGVyIG11c3QgYmUgYSBzdHJpbmcgcmVmZXJlbmNpbmcgdGhlIENTUy1saWtlIHNlbGVjdG9yIG9mIHRoZSBlbGVtZW50IHRvIGJlIGNyZWF0ZWQgXG4gICAgICAgICAgICAgICAgICAgIChcImRpdiNkaXZJRC5kaXZDbGFzc1wiKS5gO1xuICAgICAgICB9IFxuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgICAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50OyAvLyBwYXJlbnQgaXMgYSBKUyBvYmplY3RcbiAgICAgICAgdGhpcy5yZW5kZXJUb1NlbGVjdG9yID0gb3B0aW9ucy5yZW5kZXJUb1NlbGVjdG9yO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9ICRkLnEodGhpcy5yZW5kZXJUb1NlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG9wdGlvbnMuY2hpbGRyZW47XG4gICAgICAgIHRoaXMucmVyZW5kZXIgPSAoIG9wdGlvbnMucmVyZW5kZXJPbkRhdGFNaXNtYXRjaCAmJiBvcHRpb25zLm1vZGVsLmlzTWlzbWF0Y2hlZCApO1xuICAgICAgICB0aGlzLmRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmVsID0gdGhpcy5wcmVyZW5kZXIoYXJndW1lbnRzKTsgLy8gd2lsbCBjYWxsIHRoZSBpbnN0YW5jZSdzIHByZXJlbmRlclxuICAgICAgICB0aGlzLmlzUmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIFxuICAgICAgICB2YXIgZXhpc3RpbmcgPSAkZC5xKHRoaXMuc2VsZWN0b3IpO1xuICAgICAgICBpZiAoIGV4aXN0aW5nICYmICF0aGlzLnJlcmVuZGVyICkge1xuICAgICAgICAgICAgICAgIC8vIGllIGlzIGV4aXN0aW5nIGFuZCBubyBuZWVkIHRvIHJlcmVuZGVyXG4gICAgICAgICAgICB0aGlzLnByZXJlbmRlcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9IGVsc2UgaWYgKCBleGlzdGluZyApIHsgLy8gaWUgaXMgZXhpc3RpbmcgYnV0IHRoZXJlIGlzIGEgbmVlZCB0byByZXJlbmRlclxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleGlzdGluZy5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWwgPSAkZC5jKHRoaXMuc2VsZWN0b3IpO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgXG4gICAgfVxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJncm91cEhlYWRlclwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWdyb3VwSGVhZGVyXCIsXCJ0eXBlQ29udGFpbmVyXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tdHlwZUNvbnRhaW5lclwiLFwiY3JlZGl0LXJhdGluZ1wiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWNyZWRpdC1yYXRpbmdcIixcInR5cGVEaXZcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS10eXBlRGl2XCIsXCJ0eXBlSGVhZGVyXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tdHlwZUhlYWRlclwiLFwiZGVidF9saW1pdF90eXBlXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tZGVidF9saW1pdF90eXBlXCIsXCJjcmVkaXQyMDE1XCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tY3JlZGl0MjAxNVwiLFwiY3JlZGl0MjAxOFwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWNyZWRpdDIwMThcIixcImF1dG9Db21wbGV0ZTBcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS1hdXRvQ29tcGxldGUwXCIsXCJhdXRvQ29tcGxldGVfd3JhcHBlci0wXCI6XCJzcmMtdmlld3Mtc3RhdGUtY29tcGFyaXNvbi0tYXV0b0NvbXBsZXRlX3dyYXBwZXItMFwiLFwiYXV0b0NvbXBsZXRlMVwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLWF1dG9Db21wbGV0ZTFcIixcImF1dG9Db21wbGV0ZV93cmFwcGVyLTFcIjpcInNyYy12aWV3cy1zdGF0ZS1jb21wYXJpc29uLS1hdXRvQ29tcGxldGVfd3JhcHBlci0xXCIsXCJ3aXRoVG9vbHRpcFwiOlwic3JjLXZpZXdzLXN0YXRlLWNvbXBhcmlzb24tLXdpdGhUb29sdGlwXCJ9OyIsImNvbnN0IFB1YlN1YiA9IHJlcXVpcmUoJ3B1YnN1Yi1qcycpO1xuY29uc3Qgc3RhdGUgPSB7fTtcblxuLy9hcnJheS5jb21wYXJlKG90aGVyQXJyYXkpIC8vSFQgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjIyOTE5Ny9ob3ctdG8ta25vdy1pZi10d28tYXJyYXlzLWhhdmUtdGhlLXNhbWUtdmFsdWVzXG5BcnJheS5wcm90b3R5cGUuY29tcGFyZSA9IEFycmF5LnByb3RvdHlwZS5jb21wYXJlIHx8IGZ1bmN0aW9uKHRlc3RBcnIpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggIT0gdGVzdEFyci5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDAgJiYgdGVzdEFyci5sZW5ndGggPT09IDApIHJldHVybiB0cnVlO1xuICAgIGNvbnNvbGUubG9nKFwiaW4gY29tcGFyZVwiKTtcbiAgICBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlc3RBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXNbaV0gIT09IHRlc3RBcnJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9sb2dTdGF0ZSgpe1xuICAgIGNvbnNvbGUubG9nKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gX2dldFN0YXRlKHByb3BlcnR5KXtcbiAgICByZXR1cm4gKCBzdGF0ZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCApID8gc3RhdGVbcHJvcGVydHldWzBdIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJldmlvdXNTdGF0ZShwcm9wZXJ0eSl7XG4gICAgcmV0dXJuICggc3RhdGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQgJiYgc3RhdGVbcHJvcGVydHldWzFdICE9PSB1bmRlZmluZWQgKSA/IHN0YXRlW3Byb3BlcnR5XVsxXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3NldFN0YXRlKGtleSx2YWx1ZSkgeyBcblxuICAgIGlmICggc3RhdGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7IC8vIGllIGZpcnN0IHRpbWUgc3RhdGUgcHJvcGVydHkgaXMgYmVpbmcgZGVmaW5lZFxuICAgICAgICBzdGF0ZVtrZXldID0gW3ZhbHVlXTtcbiAgICAgICAgUHViU3ViLnB1Ymxpc2goa2V5LCB2YWx1ZSk7XG4gICAgICAgIF9sb2dTdGF0ZSgpO1xuICAgIH0gZWxzZSB7IC8vIG5vdCB0aGUgZmlyc3QgdGltZSB0aGUgcHJvcGVydHkgaXMgYmVpbmcgZGVmaW5lZFxuICAgIC8vSWYgaXQncyBhIHN0cmluZyBvciBhcnJheSBhbmQgdmFsdWVzIGFyZSB0aGUgc2FtZSwgc3RhdGVDaGFuZ2VkPUZhbHNlK1xuICAgICAgICB2YXIgc3RhdGVDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgc3RhdGVDaGFuZ2VkID0gKHN0YXRlW2tleV1bMF0gIT09IHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiBBcnJheS5pc0FycmF5KHN0YXRlW2tleV1bMF0pKSB7XG4gICAgICAgICAgICBzdGF0ZUNoYW5nZWQgPSAhdmFsdWUuY29tcGFyZShzdGF0ZVtrZXldWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlQ2hhbmdlZCA9IHRydWU7IC8vYXNzdW1lIGl0J3MgY2hhbmdlZCBpZiB3ZSBjYW4ndCB2ZXJpZnlcbiAgICAgICAgfSAgICAgICAgICAgICAgXG4gICAgICAgIC8vT25seSBwdWJsaXNoIGlmIHdlJ3ZlIGNoYW5nZWQgc3RhdGVcbiAgICAgICAgaWYgKCBzdGF0ZUNoYW5nZWQgKSB7IFxuICAgICAgICAgICAgc3RhdGVba2V5XS51bnNoaWZ0KHZhbHVlKTtcbiAgICAgICAgICAgIFB1YlN1Yi5wdWJsaXNoKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgX2xvZ1N0YXRlKCk7XG4gICAgICAgICAgICBpZiAoIHN0YXRlW2tleV0ubGVuZ3RoID4gMiApIHtcbiAgICAgICAgICAgICAgICBzdGF0ZVtrZXldLmxlbmd0aCA9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydHMuc3RhdGVNb2R1bGUgPSB7XG4gICAgbG9nU3RhdGU6IF9sb2dTdGF0ZSxcbiAgICBnZXRTdGF0ZTogX2dldFN0YXRlLFxuICAgIGdldFByZXZpb3VzU3RhdGU6IF9nZXRQcmV2aW91c1N0YXRlLFxuICAgIHNldFN0YXRlOiBfc2V0U3RhdGVcbn07IiwiLyogZ2xvYmFsIGRhdGFMYXllciAqL1xuZXhwb3J0IGZ1bmN0aW9uIEdUTVB1c2goZXZlbnRMYWJlbCkge1xuICAgIGlmIChkYXRhTGF5ZXIpIHtcbiAgICAgICAgZGF0YUxheWVyLnB1c2goeyAnZXZlbnQnOiAnSW50ZXJhY3RpdmUgQ2xpY2snLCAnZXZlbnREYXRhJzogZXZlbnRMYWJlbCB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaFdpbmRvd1Jlc2l6ZShTKSB7IC8vIG5lZWQgdG8gcGFzcyBpbiB0aGUgU3RhdGVNb2R1bGVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemVUaHJvdHRsZXIsIGZhbHNlKTtcblxuICAgIHZhciByZXNpemVUaW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gcmVzaXplVGhyb3R0bGVyKCkgeyAvLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3Jlc2l6ZSNzZXRUaW1lb3V0XG4gICAgICAgIC8vIGlnbm9yZSByZXNpemUgZXZlbnRzIGFzIGxvbmcgYXMgYW4gYWN0dWFsUmVzaXplSGFuZGxlciBleGVjdXRpb24gaXMgaW4gdGhlIHF1ZXVlXG4gICAgICAgIGlmICghcmVzaXplVGltZW91dCkge1xuICAgICAgICAgICAgcmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYWN0dWFsUmVzaXplSGFuZGxlcigpO1xuICAgICAgICAgICAgICAgIHJlc2l6ZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgfSwgMzUwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFjdHVhbFJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAgIFxuICAgICAgICBTLnNldFN0YXRlKCdyZXNpemUnLCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBGYWRlSW5UZXh0ID0gKGZ1bmN0aW9uKCl7XG4gICAgSFRNTEVsZW1lbnQucHJvdG90eXBlLmZhZGVPdXRDb250ZW50ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnbm8tb3BhY2l0eScpO1xuICAgIH07XG4gICAgSFRNTEVsZW1lbnQucHJvdG90eXBlLmZhZGVJbkNvbnRlbnQgPSBmdW5jdGlvbihjb250ZW50LCBzKXtcbiAgICAgICAgdmFyIGR1cmF0aW9uUyA9IHMgfHwgMDtcbiAgICAgICAgaWYgKCBzICl7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLnRyYW5zaXRpb24gPSAnb3BhY2l0eSAnICsgcyArICdzIGVhc2UtaW4tb3V0JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvblN0ciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMpLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zaXRpb24tZHVyYXRpb24nKSB8fCBkdXJhdGlvblMsXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBwYXJzZUZsb2F0KGR1cmF0aW9uU3RyKSAqIDEwMDA7XG4gICAgICAgICAgICB0aGlzLmZhZGVPdXRDb250ZW50KCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVySFRNTCA9IGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCduby1vcGFjaXR5Jyk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pKCk7XG5leHBvcnQgY29uc3QgU3RyaW5nSGVscGVycyA9IChmdW5jdGlvbigpe1xuICAgIFN0cmluZy5wcm90b3R5cGUuY2xlYW5TdHJpbmcgPSBmdW5jdGlvbigpIHsgLy8gbG93ZXJjYXNlIGFuZCByZW1vdmUgcHVuY3R1YXRpb24gYW5kIHJlcGxhY2Ugc3BhY2VzIHdpdGggaHlwaGVuczsgZGVsZXRlIHB1bmN0dWF0aW9uXG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL1sgL10vZywnLScpLnJlcGxhY2UoL1snXCLigJ3igJnigJzigJgsLiE/OygpJjpdL2csJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgfTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUucmVtb3ZlVW5kZXJzY29yZXMgPSBmdW5jdGlvbigpIHsgXG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL18vZywnICcpO1xuICAgIH07XG5cbiAgICBTdHJpbmcucHJvdG90eXBlLnVuZG9DYW1lbENhc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvKFtBLVpdKS9nLCAnICQxJykudG9Mb3dlckNhc2UoKTtcbiAgICB9O1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS50cnVuYyA9IFN0cmluZy5wcm90b3R5cGUudHJ1bmMgfHwgLy8gaHQgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzExOTk0MjBcbiAgICAgICAgIGZ1bmN0aW9uKCBuLCB1c2VXb3JkQm91bmRhcnkgKXtcbiAgICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPD0gbikgeyByZXR1cm4gdGhpczsgfVxuICAgICAgICAgICAgIHZhciBzdWJTdHJpbmcgPSB0aGlzLnN1YnN0cigwLCBuLTEpO1xuICAgICAgICAgICAgIHJldHVybiAodXNlV29yZEJvdW5kYXJ5IFxuICAgICAgICAgICAgICAgID8gc3ViU3RyaW5nLnN1YnN0cigwLCBzdWJTdHJpbmcubGFzdEluZGV4T2YoJyAnKSkgXG4gICAgICAgICAgICAgICAgOiBzdWJTdHJpbmcpICsgXCIuLi5cIjtcbiAgICAgICAgICB9O1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS5oYXNoQ29kZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhhc2ggPSAwLCBpLCBjaHI7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBoYXNoO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hyICAgPSB0aGlzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XG4gICAgICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9O1xufSkoKVxuXG5leHBvcnQgY29uc3QgRE9NSGVscGVycyA9IHtcbiBjOiAgKHMpID0+IHtcbiAgICAgXG4gICAgIGlmICggcy5pbmRleE9mKCcuJykgIT09IC0xIHx8IHMuaW5kZXhPZignIycpICE9PSAtMSApe1xuICAgICAgICAgbGV0IGNsYXNzU3RyaW5ncyA9IHMubWF0Y2goL1xcLihbXiMuXSopL2cpIHx8IFtdO1xuICAgICAgICAgbGV0IGlkU3RyaW5nID0gcy5tYXRjaCgvIyhbXi5dKikvKTtcbiAgICAgICAgIGxldCBlbFN0cmluZyA9IHMubWF0Y2goL14oW14uI10rKS8pO1xuICAgICAgICAgXG4gICAgICAgICBcbiAgICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxTdHJpbmdbMF0pO1xuICAgICAgICAgY2xhc3NTdHJpbmdzLmZvckVhY2goa2xhc3MgPT4ge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChrbGFzcy5yZXBsYWNlKCcuJywnJykpO1xuICAgICAgICAgfSk7XG4gICAgICAgICBpZiAoIGlkU3RyaW5nICE9PSBudWxsICl7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWRTdHJpbmdbMV0pO1xuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIGVsO1xuICAgICB9XG4gICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHMpO1xuIH0sXG4gcTogIChzKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHMpLFxuIHFhOiAocykgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzKVxufVxuIiwidmFyIGhhc2ggPSByZXF1aXJlKFwic3RyaW5nLWhhc2hcIik7XG52YXIgUHViU3ViID0gcmVxdWlyZShcInB1YnN1Yi1qc1wiKTtcbnZhciBzdWJzY3JpcHRpb25zID0ge307XG5mdW5jdGlvbiBsb2dTdWJzKCkge1xuICAgIGNvbnNvbGUubG9nKHN1YnNjcmlwdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUb2tlbih0b3BpYywgZm5SZWYpe1xuICAgIHZhciBmdW5jdGlvbkhhc2ggPSBoYXNoKGZuUmVmLnRvU3RyaW5nKCkpO1xuICAgIHZhciBzdHIgPSB0b3BpYyArIGZuUmVmO1xuICAgIHZhciB0b2tlbiA9ICdzdWInICsgaGFzaChzdHIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRva2VuOiB0b2tlbixcbiAgICAgICAgZm46IGZ1bmN0aW9uSGFzaFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHNldFN1YnMoc3Vic0FycmF5KSB7IC8vIHN1YnNBcnJheSBpcyBhcnJheSBvZiB0b3BpYy9mdW5jdGlvbiBwYWlyIGFycmF5c1xuICAgIHN1YnNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHBhaXIpe1xuICAgICAgICB2YXIgdG9waWMgPSBwYWlyWzBdLFxuICAgICAgICAgICAgZm5SZWYgPSBwYWlyWzFdLFxuICAgICAgICAgICAgdG9rZW5PYmogPSBjcmVhdGVUb2tlbih0b3BpYyxmblJlZik7XG4gICAgICAgIFxuICAgICAgICBpZiAoIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICggc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl1bdG9waWNdID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXVt0b3BpY10gPSBQdWJTdWIuc3Vic2NyaWJlKHRvcGljLGZuUmVmKTsgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgJ1N1YnNjcmlwdGlvbiB0b2tlbiBpcyBhbHJlYWR5IGluIHVzZS4nO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNhbmNlbFN1Yih0b3BpYyxmblJlZikgeyAvLyBmb3IgY2FuY2VsaW5nIHNpbmdsZSBzdWJzY3JpcHRpb25cbiAgICB2YXIgdG9rZW5PYmogPSBjcmVhdGVUb2tlbih0b3BpYyxmblJlZik7XG4gICAgaWYgKCBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSAhPT0gdW5kZWZpbmVkICYmIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICBQdWJTdWIudW5zdWJzY3JpYmUoIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXSApO1xuICAgICAgICBkZWxldGUgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl1bdG9waWNdO1xuICAgICAgICBpZiAoIE9iamVjdC5rZXlzKHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dKS5sZW5ndGggPT09IDAgKSB7XG4gICAgICAgICAgICBkZWxldGUgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl07XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyAnU3Vic2NyaXB0aW9uIGRvZXMgbm90IGV4aXN0Lic7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBsb2dTdWJzOmxvZ1N1YnMsXG4gICAgc2V0U3ViczpzZXRTdWJzLFxuICAgIGNhbmNlbFN1YjpjYW5jZWxTdWJcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxwPjxzdHJvbmc+Q3JlZGl0IHJhdGluZzo8L3N0cm9uZz4gU3RhbmRhcmQgJmFtcDsgUG9vcuKAmXMgZ2VuZXJhbCBvYmxpZ2F0aW9uIGNyZWRpdCByYXRpbmcuPC9wPlxcblwiOyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJiYXJcIjpcInNyYy1jb21wb25lbnRzLWJhci0tYmFyXCIsXCJiYXJDb2xvcjFcIjpcInNyYy1jb21wb25lbnRzLWJhci0tYmFyQ29sb3IxXCIsXCJiYXJDb2xvcjJcIjpcInNyYy1jb21wb25lbnRzLWJhci0tYmFyQ29sb3IyXCJ9OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEwLDIwMTEsMjAxMiwyMDEzLDIwMTQgTW9yZ2FuIFJvZGVyaWNrIGh0dHA6Ly9yb2Rlcmljay5ka1xuICogTGljZW5zZTogTUlUIC0gaHR0cDovL21yZ25yZHJjay5taXQtbGljZW5zZS5vcmdcbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbXJvZGVyaWNrL1B1YlN1YkpTXG4gKi9cblxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgUHViU3ViID0ge307XG4gICAgcm9vdC5QdWJTdWIgPSBQdWJTdWI7XG5cbiAgICB2YXIgZGVmaW5lID0gcm9vdC5kZWZpbmU7XG5cbiAgICBmYWN0b3J5KFB1YlN1Yik7XG5cbiAgICAvLyBBTUQgc3VwcG9ydFxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpe1xuICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBQdWJTdWI7IH0pO1xuXG4gICAgICAgIC8vIENvbW1vbkpTIGFuZCBOb2RlLmpzIG1vZHVsZSBzdXBwb3J0XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpe1xuICAgICAgICBpZiAobW9kdWxlICE9PSB1bmRlZmluZWQgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IFB1YlN1YjsgLy8gTm9kZS5qcyBzcGVjaWZpYyBgbW9kdWxlLmV4cG9ydHNgXG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0cy5QdWJTdWIgPSBQdWJTdWI7IC8vIENvbW1vbkpTIG1vZHVsZSAxLjEuMSBzcGVjXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFB1YlN1YjsgLy8gQ29tbW9uSlNcbiAgICB9XG5cbn0oKCB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cgKSB8fCB0aGlzLCBmdW5jdGlvbiAoUHViU3ViKXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgbWVzc2FnZXMgPSB7fSxcbiAgICAgICAgbGFzdFVpZCA9IC0xO1xuXG4gICAgZnVuY3Rpb24gaGFzS2V5cyhvYmope1xuICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgIGZvciAoa2V5IGluIG9iail7XG4gICAgICAgICAgICBpZiAoIG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpICl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHRocm93cyB0aGUgcGFzc2VkIGV4Y2VwdGlvbiwgZm9yIHVzZSBhcyBhcmd1bWVudCBmb3Igc2V0VGltZW91dFxuICAgICAqIEBhbGlhcyB0aHJvd0V4Y2VwdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IGV4IEFuIEVycm9yIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm93RXhjZXB0aW9uKCBleCApe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcmVUaHJvd0V4Y2VwdGlvbigpe1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIoIG1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgfSBjYXRjaCggZXggKXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIHRocm93RXhjZXB0aW9uKCBleCApLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgc3Vic2NyaWJlciggbWVzc2FnZSwgZGF0YSApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGl2ZXJNZXNzYWdlKCBvcmlnaW5hbE1lc3NhZ2UsIG1hdGNoZWRNZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHZhciBzdWJzY3JpYmVycyA9IG1lc3NhZ2VzW21hdGNoZWRNZXNzYWdlXSxcbiAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyID0gaW1tZWRpYXRlRXhjZXB0aW9ucyA/IGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMgOiBjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyxcbiAgICAgICAgICAgIHM7XG5cbiAgICAgICAgaWYgKCAhbWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIG1hdGNoZWRNZXNzYWdlICkgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHMgaW4gc3Vic2NyaWJlcnMpe1xuICAgICAgICAgICAgaWYgKCBzdWJzY3JpYmVycy5oYXNPd25Qcm9wZXJ0eShzKSl7XG4gICAgICAgICAgICAgICAgY2FsbFN1YnNjcmliZXIoIHN1YnNjcmliZXJzW3NdLCBvcmlnaW5hbE1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGl2ZXJOYW1lc3BhY2VkKCl7XG4gICAgICAgICAgICB2YXIgdG9waWMgPSBTdHJpbmcoIG1lc3NhZ2UgKSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcblxuICAgICAgICAgICAgLy8gZGVsaXZlciB0aGUgbWVzc2FnZSBhcyBpdCBpcyBub3dcbiAgICAgICAgICAgIGRlbGl2ZXJNZXNzYWdlKG1lc3NhZ2UsIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyB0cmltIHRoZSBoaWVyYXJjaHkgYW5kIGRlbGl2ZXIgbWVzc2FnZSB0byBlYWNoIGxldmVsXG4gICAgICAgICAgICB3aGlsZSggcG9zaXRpb24gIT09IC0xICl7XG4gICAgICAgICAgICAgICAgdG9waWMgPSB0b3BpYy5zdWJzdHIoIDAsIHBvc2l0aW9uICk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICAgICAgICAgIGRlbGl2ZXJNZXNzYWdlKCBtZXNzYWdlLCB0b3BpYywgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lc3NhZ2VIYXNTdWJzY3JpYmVycyggbWVzc2FnZSApe1xuICAgICAgICB2YXIgdG9waWMgPSBTdHJpbmcoIG1lc3NhZ2UgKSxcbiAgICAgICAgICAgIGZvdW5kID0gQm9vbGVhbihtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggdG9waWMgKSAmJiBoYXNLZXlzKG1lc3NhZ2VzW3RvcGljXSkpLFxuICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG5cbiAgICAgICAgd2hpbGUgKCAhZm91bmQgJiYgcG9zaXRpb24gIT09IC0xICl7XG4gICAgICAgICAgICB0b3BpYyA9IHRvcGljLnN1YnN0ciggMCwgcG9zaXRpb24gKTtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoICcuJyApO1xuICAgICAgICAgICAgZm91bmQgPSBCb29sZWFuKG1lc3NhZ2VzLmhhc093blByb3BlcnR5KCB0b3BpYyApICYmIGhhc0tleXMobWVzc2FnZXNbdG9waWNdKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgc3luYywgaW1tZWRpYXRlRXhjZXB0aW9ucyApe1xuICAgICAgICBtZXNzYWdlID0gKHR5cGVvZiBtZXNzYWdlID09PSAnc3ltYm9sJykgPyBtZXNzYWdlLnRvU3RyaW5nKCkgOiBtZXNzYWdlO1xuXG4gICAgICAgIHZhciBkZWxpdmVyID0gY3JlYXRlRGVsaXZlcnlGdW5jdGlvbiggbWVzc2FnZSwgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApLFxuICAgICAgICAgICAgaGFzU3Vic2NyaWJlcnMgPSBtZXNzYWdlSGFzU3Vic2NyaWJlcnMoIG1lc3NhZ2UgKTtcblxuICAgICAgICBpZiAoICFoYXNTdWJzY3JpYmVycyApe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBzeW5jID09PSB0cnVlICl7XG4gICAgICAgICAgICBkZWxpdmVyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCBkZWxpdmVyLCAwICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIHRoZSBtZXNzYWdlLCBwYXNzaW5nIHRoZSBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAYWxpYXMgcHVibGlzaFxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gcHVibGlzaFxuICAgICAqIEBwYXJhbSB7fSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgdG8gc3Vic2NyaWJlcnNcbiAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9XG4gICAgICovXG4gICAgUHViU3ViLnB1Ymxpc2ggPSBmdW5jdGlvbiggbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICByZXR1cm4gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgZmFsc2UsIFB1YlN1Yi5pbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2hlcyB0aGUgdGhlIG1lc3NhZ2Ugc3luY2hyb25vdXNseSwgcGFzc2luZyB0aGUgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHB1Ymxpc2hTeW5jXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBwdWJsaXNoXG4gICAgICogQHBhcmFtIHt9IGRhdGEgVGhlIGRhdGEgdG8gcGFzcyB0byBzdWJzY3JpYmVyc1xuICAgICAqIEByZXR1cm4geyBCb29sZWFuIH1cbiAgICAgKi9cbiAgICBQdWJTdWIucHVibGlzaFN5bmMgPSBmdW5jdGlvbiggbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICByZXR1cm4gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgdHJ1ZSwgUHViU3ViLmltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0aGUgcGFzc2VkIGZ1bmN0aW9uIHRvIHRoZSBwYXNzZWQgbWVzc2FnZS4gRXZlcnkgcmV0dXJuZWQgdG9rZW4gaXMgdW5pcXVlIGFuZCBzaG91bGQgYmUgc3RvcmVkIGlmIHlvdSBuZWVkIHRvIHVuc3Vic2NyaWJlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHN1YnNjcmliZVxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gc3Vic2NyaWJlIHRvXG4gICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gYSBuZXcgbWVzc2FnZSBpcyBwdWJsaXNoZWRcbiAgICAgKiBAcmV0dXJuIHsgU3RyaW5nIH1cbiAgICAgKi9cbiAgICBQdWJTdWIuc3Vic2NyaWJlID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGZ1bmMgKXtcbiAgICAgICAgaWYgKCB0eXBlb2YgZnVuYyAhPT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBtZXNzYWdlID0gKHR5cGVvZiBtZXNzYWdlID09PSAnc3ltYm9sJykgPyBtZXNzYWdlLnRvU3RyaW5nKCkgOiBtZXNzYWdlO1xuXG4gICAgICAgIC8vIG1lc3NhZ2UgaXMgbm90IHJlZ2lzdGVyZWQgeWV0XG4gICAgICAgIGlmICggIW1lc3NhZ2VzLmhhc093blByb3BlcnR5KCBtZXNzYWdlICkgKXtcbiAgICAgICAgICAgIG1lc3NhZ2VzW21lc3NhZ2VdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmb3JjaW5nIHRva2VuIGFzIFN0cmluZywgdG8gYWxsb3cgZm9yIGZ1dHVyZSBleHBhbnNpb25zIHdpdGhvdXQgYnJlYWtpbmcgdXNhZ2VcbiAgICAgICAgLy8gYW5kIGFsbG93IGZvciBlYXN5IHVzZSBhcyBrZXkgbmFtZXMgZm9yIHRoZSAnbWVzc2FnZXMnIG9iamVjdFxuICAgICAgICB2YXIgdG9rZW4gPSAndWlkXycgKyBTdHJpbmcoKytsYXN0VWlkKTtcbiAgICAgICAgbWVzc2FnZXNbbWVzc2FnZV1bdG9rZW5dID0gZnVuYztcbiAgICAgICAgXG4gICAgICAgIC8vIHJldHVybiB0b2tlbiBmb3IgdW5zdWJzY3JpYmluZ1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2Ugb25jZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzdWJzY3JpYmUgdG9cbiAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhIG5ldyBtZXNzYWdlIGlzIHB1Ymxpc2hlZFxuICAgICAqIEByZXR1cm4geyBQdWJTdWIgfVxuICAgICAqL1xuICAgIFB1YlN1Yi5zdWJzY3JpYmVPbmNlID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGZ1bmMgKXtcbiAgICAgICAgdmFyIHRva2VuID0gUHViU3ViLnN1YnNjcmliZSggbWVzc2FnZSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIGJlZm9yZSBmdW5jIGFwcGx5LCB1bnN1YnNjcmliZSBtZXNzYWdlXG4gICAgICAgICAgICBQdWJTdWIudW5zdWJzY3JpYmUoIHRva2VuICk7XG4gICAgICAgICAgICBmdW5jLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQdWJTdWI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgc3Vic2NyaXB0aW9uc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyQWxsU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyQWxsU3Vic2NyaXB0aW9ucygpe1xuICAgICAgICBtZXNzYWdlcyA9IHt9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBzdWJzY3JpcHRpb25zIGJ5IHRoZSB0b3BpY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyU3Vic2NyaXB0aW9ucyh0b3BpYyl7XG4gICAgICAgIHZhciBtO1xuICAgICAgICBmb3IgKG0gaW4gbWVzc2FnZXMpe1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2VzLmhhc093blByb3BlcnR5KG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDApe1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlc1ttXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHN1YnNjcmlwdGlvbnNcbiAgICAgKlxuICAgICAqIC0gV2hlbiBwYXNzZWQgYSB0b2tlbiwgcmVtb3ZlcyBhIHNwZWNpZmljIHN1YnNjcmlwdGlvbi5cbiAgICAgKlxuXHQgKiAtIFdoZW4gcGFzc2VkIGEgZnVuY3Rpb24sIHJlbW92ZXMgYWxsIHN1YnNjcmlwdGlvbnMgZm9yIHRoYXQgZnVuY3Rpb25cbiAgICAgKlxuXHQgKiAtIFdoZW4gcGFzc2VkIGEgdG9waWMsIHJlbW92ZXMgYWxsIHN1YnNjcmlwdGlvbnMgZm9yIHRoYXQgdG9waWMgKGhpZXJhcmNoeSlcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIHN1YnNjcmliZU9uY2VcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfCBGdW5jdGlvbiB9IHZhbHVlIEEgdG9rZW4sIGZ1bmN0aW9uIG9yIHRvcGljIHRvIHVuc3Vic2NyaWJlIGZyb21cbiAgICAgKiBAZXhhbXBsZSAvLyBVbnN1YnNjcmliaW5nIHdpdGggYSB0b2tlblxuICAgICAqIHZhciB0b2tlbiA9IFB1YlN1Yi5zdWJzY3JpYmUoJ215dG9waWMnLCBteUZ1bmMpO1xuICAgICAqIFB1YlN1Yi51bnN1YnNjcmliZSh0b2tlbik7XG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyB3aXRoIGEgZnVuY3Rpb25cbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUobXlGdW5jKTtcbiAgICAgKiBAZXhhbXBsZSAvLyBVbnN1YnNjcmliaW5nIGZyb20gYSB0b3BpY1xuICAgICAqIFB1YlN1Yi51bnN1YnNjcmliZSgnbXl0b3BpYycpO1xuICAgICAqL1xuICAgIFB1YlN1Yi51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgdmFyIGRlc2NlbmRhbnRUb3BpY0V4aXN0cyA9IGZ1bmN0aW9uKHRvcGljKSB7XG4gICAgICAgICAgICAgICAgdmFyIG07XG4gICAgICAgICAgICAgICAgZm9yICggbSBpbiBtZXNzYWdlcyApe1xuICAgICAgICAgICAgICAgICAgICBpZiAoIG1lc3NhZ2VzLmhhc093blByb3BlcnR5KG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDAgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgZGVzY2VuZGFudCBvZiB0aGUgdG9waWMgZXhpc3RzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNUb3BpYyAgICA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgKCBtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgfHwgZGVzY2VuZGFudFRvcGljRXhpc3RzKHZhbHVlKSApLFxuICAgICAgICAgICAgaXNUb2tlbiAgICA9ICFpc1RvcGljICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycsXG4gICAgICAgICAgICBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2UsXG4gICAgICAgICAgICBtLCBtZXNzYWdlLCB0O1xuXG4gICAgICAgIGlmIChpc1RvcGljKXtcbiAgICAgICAgICAgIFB1YlN1Yi5jbGVhclN1YnNjcmlwdGlvbnModmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICggbSBpbiBtZXNzYWdlcyApe1xuICAgICAgICAgICAgaWYgKCBtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggbSApICl7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzW21dO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBpc1Rva2VuICYmIG1lc3NhZ2VbdmFsdWVdICl7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlW3ZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRva2VucyBhcmUgdW5pcXVlLCBzbyB3ZSBjYW4ganVzdCBzdG9wIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdCBpbiBtZXNzYWdlICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5oYXNPd25Qcm9wZXJ0eSh0KSAmJiBtZXNzYWdlW3RdID09PSB2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VbdF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn0pKTtcbiIsIi8qIEBsaWNlbnNlXG5QYXBhIFBhcnNlXG52NC42LjNcbmh0dHBzOi8vZ2l0aHViLmNvbS9taG9sdC9QYXBhUGFyc2VcbkxpY2Vuc2U6IE1JVFxuKi9cbkFycmF5LmlzQXJyYXl8fChBcnJheS5pc0FycmF5PWZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX0pLGZ1bmN0aW9uKGUsdCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz10KCk6ZS5QYXBhPXQoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBzLGUsZj1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnZvaWQgMCE9PWY/Zjp7fSxuPSFmLmRvY3VtZW50JiYhIWYucG9zdE1lc3NhZ2Usbz1uJiYvKFxcP3wmKXBhcGF3b3JrZXIoPXwmfCQpLy50ZXN0KGYubG9jYXRpb24uc2VhcmNoKSxhPSExLGg9e30sdT0wLGs9e3BhcnNlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9KHQ9dHx8e30pLmR5bmFtaWNUeXBpbmd8fCExO3oocikmJih0LmR5bmFtaWNUeXBpbmdGdW5jdGlvbj1yLHI9e30pO2lmKHQuZHluYW1pY1R5cGluZz1yLHQudHJhbnNmb3JtPSEheih0LnRyYW5zZm9ybSkmJnQudHJhbnNmb3JtLHQud29ya2VyJiZrLldPUktFUlNfU1VQUE9SVEVEKXt2YXIgaT1mdW5jdGlvbigpe2lmKCFrLldPUktFUlNfU1VQUE9SVEVEKXJldHVybiExO2lmKCFhJiZudWxsPT09ay5TQ1JJUFRfUEFUSCl0aHJvdyBuZXcgRXJyb3IoXCJTY3JpcHQgcGF0aCBjYW5ub3QgYmUgZGV0ZXJtaW5lZCBhdXRvbWF0aWNhbGx5IHdoZW4gUGFwYSBQYXJzZSBpcyBsb2FkZWQgYXN5bmNocm9ub3VzbHkuIFlvdSBuZWVkIHRvIHNldCBQYXBhLlNDUklQVF9QQVRIIG1hbnVhbGx5LlwiKTt2YXIgZT1rLlNDUklQVF9QQVRIfHxzO2UrPSgtMSE9PWUuaW5kZXhPZihcIj9cIik/XCImXCI6XCI/XCIpK1wicGFwYXdvcmtlclwiO3ZhciB0PW5ldyBmLldvcmtlcihlKTtyZXR1cm4gdC5vbm1lc3NhZ2U9bSx0LmlkPXUrKyxoW3QuaWRdPXR9KCk7cmV0dXJuIGkudXNlclN0ZXA9dC5zdGVwLGkudXNlckNodW5rPXQuY2h1bmssaS51c2VyQ29tcGxldGU9dC5jb21wbGV0ZSxpLnVzZXJFcnJvcj10LmVycm9yLHQuc3RlcD16KHQuc3RlcCksdC5jaHVuaz16KHQuY2h1bmspLHQuY29tcGxldGU9eih0LmNvbXBsZXRlKSx0LmVycm9yPXoodC5lcnJvciksZGVsZXRlIHQud29ya2VyLHZvaWQgaS5wb3N0TWVzc2FnZSh7aW5wdXQ6ZSxjb25maWc6dCx3b3JrZXJJZDppLmlkfSl9dmFyIG49bnVsbDtrLk5PREVfU1RSRUFNX0lOUFVULFwic3RyaW5nXCI9PXR5cGVvZiBlP249dC5kb3dubG9hZD9uZXcgYyh0KTpuZXcgXyh0KTohMD09PWUucmVhZGFibGUmJnooZS5yZWFkKSYmeihlLm9uKT9uPW5ldyBnKHQpOihmLkZpbGUmJmUgaW5zdGFuY2VvZiBGaWxlfHxlIGluc3RhbmNlb2YgT2JqZWN0KSYmKG49bmV3IHAodCkpO3JldHVybiBuLnN0cmVhbShlKX0sdW5wYXJzZTpmdW5jdGlvbihlLHQpe3ZhciBpPSExLGc9ITAsbT1cIixcIix5PVwiXFxyXFxuXCIsbj0nXCInLHI9ITE7IWZ1bmN0aW9uKCl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHQpcmV0dXJuO1wic3RyaW5nXCIhPXR5cGVvZiB0LmRlbGltaXRlcnx8ay5CQURfREVMSU1JVEVSUy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuLTEhPT10LmRlbGltaXRlci5pbmRleE9mKGUpfSkubGVuZ3RofHwobT10LmRlbGltaXRlcik7KFwiYm9vbGVhblwiPT10eXBlb2YgdC5xdW90ZXN8fEFycmF5LmlzQXJyYXkodC5xdW90ZXMpKSYmKGk9dC5xdW90ZXMpO1wiYm9vbGVhblwiIT10eXBlb2YgdC5za2lwRW1wdHlMaW5lcyYmXCJzdHJpbmdcIiE9dHlwZW9mIHQuc2tpcEVtcHR5TGluZXN8fChyPXQuc2tpcEVtcHR5TGluZXMpO1wic3RyaW5nXCI9PXR5cGVvZiB0Lm5ld2xpbmUmJih5PXQubmV3bGluZSk7XCJzdHJpbmdcIj09dHlwZW9mIHQucXVvdGVDaGFyJiYobj10LnF1b3RlQ2hhcik7XCJib29sZWFuXCI9PXR5cGVvZiB0LmhlYWRlciYmKGc9dC5oZWFkZXIpfSgpO3ZhciBzPW5ldyBSZWdFeHAoTShuKSxcImdcIik7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPUpTT04ucGFyc2UoZSkpO2lmKEFycmF5LmlzQXJyYXkoZSkpe2lmKCFlLmxlbmd0aHx8QXJyYXkuaXNBcnJheShlWzBdKSlyZXR1cm4gbyhudWxsLGUscik7aWYoXCJvYmplY3RcIj09dHlwZW9mIGVbMF0pcmV0dXJuIG8oYShlWzBdKSxlLHIpfWVsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGUpcmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUuZGF0YSYmKGUuZGF0YT1KU09OLnBhcnNlKGUuZGF0YSkpLEFycmF5LmlzQXJyYXkoZS5kYXRhKSYmKGUuZmllbGRzfHwoZS5maWVsZHM9ZS5tZXRhJiZlLm1ldGEuZmllbGRzKSxlLmZpZWxkc3x8KGUuZmllbGRzPUFycmF5LmlzQXJyYXkoZS5kYXRhWzBdKT9lLmZpZWxkczphKGUuZGF0YVswXSkpLEFycmF5LmlzQXJyYXkoZS5kYXRhWzBdKXx8XCJvYmplY3RcIj09dHlwZW9mIGUuZGF0YVswXXx8KGUuZGF0YT1bZS5kYXRhXSkpLG8oZS5maWVsZHN8fFtdLGUuZGF0YXx8W10scik7dGhyb3dcImV4Y2VwdGlvbjogVW5hYmxlIHRvIHNlcmlhbGl6ZSB1bnJlY29nbml6ZWQgaW5wdXRcIjtmdW5jdGlvbiBhKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlKXJldHVybltdO3ZhciB0PVtdO2Zvcih2YXIgciBpbiBlKXQucHVzaChyKTtyZXR1cm4gdH1mdW5jdGlvbiBvKGUsdCxyKXt2YXIgaT1cIlwiO1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1KU09OLnBhcnNlKGUpKSxcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9SlNPTi5wYXJzZSh0KSk7dmFyIG49QXJyYXkuaXNBcnJheShlKSYmMDxlLmxlbmd0aCxzPSFBcnJheS5pc0FycmF5KHRbMF0pO2lmKG4mJmcpe2Zvcih2YXIgYT0wO2E8ZS5sZW5ndGg7YSsrKTA8YSYmKGkrPW0pLGkrPXYoZVthXSxhKTswPHQubGVuZ3RoJiYoaSs9eSl9Zm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBoPW4/ZS5sZW5ndGg6dFtvXS5sZW5ndGgsdT0hMSxmPW4/MD09PU9iamVjdC5rZXlzKHRbb10pLmxlbmd0aDowPT09dFtvXS5sZW5ndGg7aWYociYmIW4mJih1PVwiZ3JlZWR5XCI9PT1yP1wiXCI9PT10W29dLmpvaW4oXCJcIikudHJpbSgpOjE9PT10W29dLmxlbmd0aCYmMD09PXRbb11bMF0ubGVuZ3RoKSxcImdyZWVkeVwiPT09ciYmbil7Zm9yKHZhciBkPVtdLGw9MDtsPGg7bCsrKXt2YXIgYz1zP2VbbF06bDtkLnB1c2godFtvXVtjXSl9dT1cIlwiPT09ZC5qb2luKFwiXCIpLnRyaW0oKX1pZighdSl7Zm9yKHZhciBwPTA7cDxoO3ArKyl7MDxwJiYhZiYmKGkrPW0pO3ZhciBfPW4mJnM/ZVtwXTpwO2krPXYodFtvXVtfXSxwKX1vPHQubGVuZ3RoLTEmJighcnx8MDxoJiYhZikmJihpKz15KX19cmV0dXJuIGl9ZnVuY3Rpb24gdihlLHQpe2lmKG51bGw9PWUpcmV0dXJuXCJcIjtpZihlLmNvbnN0cnVjdG9yPT09RGF0ZSlyZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSkuc2xpY2UoMSwyNSk7ZT1lLnRvU3RyaW5nKCkucmVwbGFjZShzLG4rbik7dmFyIHI9XCJib29sZWFuXCI9PXR5cGVvZiBpJiZpfHxBcnJheS5pc0FycmF5KGkpJiZpW3RdfHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKWlmKC0xPGUuaW5kZXhPZih0W3JdKSlyZXR1cm4hMDtyZXR1cm4hMX0oZSxrLkJBRF9ERUxJTUlURVJTKXx8LTE8ZS5pbmRleE9mKG0pfHxcIiBcIj09PWUuY2hhckF0KDApfHxcIiBcIj09PWUuY2hhckF0KGUubGVuZ3RoLTEpO3JldHVybiByP24rZStuOmV9fX07aWYoay5SRUNPUkRfU0VQPVN0cmluZy5mcm9tQ2hhckNvZGUoMzApLGsuVU5JVF9TRVA9U3RyaW5nLmZyb21DaGFyQ29kZSgzMSksay5CWVRFX09SREVSX01BUks9XCJcXHVmZWZmXCIsay5CQURfREVMSU1JVEVSUz1bXCJcXHJcIixcIlxcblwiLCdcIicsay5CWVRFX09SREVSX01BUktdLGsuV09SS0VSU19TVVBQT1JURUQ9IW4mJiEhZi5Xb3JrZXIsay5TQ1JJUFRfUEFUSD1udWxsLGsuTk9ERV9TVFJFQU1fSU5QVVQ9MSxrLkxvY2FsQ2h1bmtTaXplPTEwNDg1NzYwLGsuUmVtb3RlQ2h1bmtTaXplPTUyNDI4ODAsay5EZWZhdWx0RGVsaW1pdGVyPVwiLFwiLGsuUGFyc2VyPXYsay5QYXJzZXJIYW5kbGU9cixrLk5ldHdvcmtTdHJlYW1lcj1jLGsuRmlsZVN0cmVhbWVyPXAsay5TdHJpbmdTdHJlYW1lcj1fLGsuUmVhZGFibGVTdHJlYW1TdHJlYW1lcj1nLGYualF1ZXJ5KXt2YXIgZD1mLmpRdWVyeTtkLmZuLnBhcnNlPWZ1bmN0aW9uKG8pe3ZhciByPW8uY29uZmlnfHx7fSxoPVtdO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oZSl7aWYoIShcIklOUFVUXCI9PT1kKHRoaXMpLnByb3AoXCJ0YWdOYW1lXCIpLnRvVXBwZXJDYXNlKCkmJlwiZmlsZVwiPT09ZCh0aGlzKS5hdHRyKFwidHlwZVwiKS50b0xvd2VyQ2FzZSgpJiZmLkZpbGVSZWFkZXIpfHwhdGhpcy5maWxlc3x8MD09PXRoaXMuZmlsZXMubGVuZ3RoKXJldHVybiEwO2Zvcih2YXIgdD0wO3Q8dGhpcy5maWxlcy5sZW5ndGg7dCsrKWgucHVzaCh7ZmlsZTp0aGlzLmZpbGVzW3RdLGlucHV0RWxlbTp0aGlzLGluc3RhbmNlQ29uZmlnOmQuZXh0ZW5kKHt9LHIpfSl9KSxlKCksdGhpcztmdW5jdGlvbiBlKCl7aWYoMCE9PWgubGVuZ3RoKXt2YXIgZSx0LHIsaSxuPWhbMF07aWYoeihvLmJlZm9yZSkpe3ZhciBzPW8uYmVmb3JlKG4uZmlsZSxuLmlucHV0RWxlbSk7aWYoXCJvYmplY3RcIj09dHlwZW9mIHMpe2lmKFwiYWJvcnRcIj09PXMuYWN0aW9uKXJldHVybiBlPVwiQWJvcnRFcnJvclwiLHQ9bi5maWxlLHI9bi5pbnB1dEVsZW0saT1zLnJlYXNvbix2b2lkKHooby5lcnJvcikmJm8uZXJyb3Ioe25hbWU6ZX0sdCxyLGkpKTtpZihcInNraXBcIj09PXMuYWN0aW9uKXJldHVybiB2b2lkIHUoKTtcIm9iamVjdFwiPT10eXBlb2Ygcy5jb25maWcmJihuLmluc3RhbmNlQ29uZmlnPWQuZXh0ZW5kKG4uaW5zdGFuY2VDb25maWcscy5jb25maWcpKX1lbHNlIGlmKFwic2tpcFwiPT09cylyZXR1cm4gdm9pZCB1KCl9dmFyIGE9bi5pbnN0YW5jZUNvbmZpZy5jb21wbGV0ZTtuLmluc3RhbmNlQ29uZmlnLmNvbXBsZXRlPWZ1bmN0aW9uKGUpe3ooYSkmJmEoZSxuLmZpbGUsbi5pbnB1dEVsZW0pLHUoKX0say5wYXJzZShuLmZpbGUsbi5pbnN0YW5jZUNvbmZpZyl9ZWxzZSB6KG8uY29tcGxldGUpJiZvLmNvbXBsZXRlKCl9ZnVuY3Rpb24gdSgpe2guc3BsaWNlKDAsMSksZSgpfX19ZnVuY3Rpb24gbChlKXt0aGlzLl9oYW5kbGU9bnVsbCx0aGlzLl9maW5pc2hlZD0hMSx0aGlzLl9jb21wbGV0ZWQ9ITEsdGhpcy5faW5wdXQ9bnVsbCx0aGlzLl9iYXNlSW5kZXg9MCx0aGlzLl9wYXJ0aWFsTGluZT1cIlwiLHRoaXMuX3Jvd0NvdW50PTAsdGhpcy5fc3RhcnQ9MCx0aGlzLl9uZXh0Q2h1bms9bnVsbCx0aGlzLmlzRmlyc3RDaHVuaz0hMCx0aGlzLl9jb21wbGV0ZVJlc3VsdHM9e2RhdGE6W10sZXJyb3JzOltdLG1ldGE6e319LGZ1bmN0aW9uKGUpe3ZhciB0PUUoZSk7dC5jaHVua1NpemU9cGFyc2VJbnQodC5jaHVua1NpemUpLGUuc3RlcHx8ZS5jaHVua3x8KHQuY2h1bmtTaXplPW51bGwpO3RoaXMuX2hhbmRsZT1uZXcgcih0KSwodGhpcy5faGFuZGxlLnN0cmVhbWVyPXRoaXMpLl9jb25maWc9dH0uY2FsbCh0aGlzLGUpLHRoaXMucGFyc2VDaHVuaz1mdW5jdGlvbihlLHQpe2lmKHRoaXMuaXNGaXJzdENodW5rJiZ6KHRoaXMuX2NvbmZpZy5iZWZvcmVGaXJzdENodW5rKSl7dmFyIHI9dGhpcy5fY29uZmlnLmJlZm9yZUZpcnN0Q2h1bmsoZSk7dm9pZCAwIT09ciYmKGU9cil9dGhpcy5pc0ZpcnN0Q2h1bms9ITE7dmFyIGk9dGhpcy5fcGFydGlhbExpbmUrZTt0aGlzLl9wYXJ0aWFsTGluZT1cIlwiO3ZhciBuPXRoaXMuX2hhbmRsZS5wYXJzZShpLHRoaXMuX2Jhc2VJbmRleCwhdGhpcy5fZmluaXNoZWQpO2lmKCF0aGlzLl9oYW5kbGUucGF1c2VkKCkmJiF0aGlzLl9oYW5kbGUuYWJvcnRlZCgpKXt2YXIgcz1uLm1ldGEuY3Vyc29yO3RoaXMuX2ZpbmlzaGVkfHwodGhpcy5fcGFydGlhbExpbmU9aS5zdWJzdHJpbmcocy10aGlzLl9iYXNlSW5kZXgpLHRoaXMuX2Jhc2VJbmRleD1zKSxuJiZuLmRhdGEmJih0aGlzLl9yb3dDb3VudCs9bi5kYXRhLmxlbmd0aCk7dmFyIGE9dGhpcy5fZmluaXNoZWR8fHRoaXMuX2NvbmZpZy5wcmV2aWV3JiZ0aGlzLl9yb3dDb3VudD49dGhpcy5fY29uZmlnLnByZXZpZXc7aWYobylmLnBvc3RNZXNzYWdlKHtyZXN1bHRzOm4sd29ya2VySWQ6ay5XT1JLRVJfSUQsZmluaXNoZWQ6YX0pO2Vsc2UgaWYoeih0aGlzLl9jb25maWcuY2h1bmspJiYhdCl7aWYodGhpcy5fY29uZmlnLmNodW5rKG4sdGhpcy5faGFuZGxlKSx0aGlzLl9oYW5kbGUucGF1c2VkKCl8fHRoaXMuX2hhbmRsZS5hYm9ydGVkKCkpcmV0dXJuO249dm9pZCAwLHRoaXMuX2NvbXBsZXRlUmVzdWx0cz12b2lkIDB9cmV0dXJuIHRoaXMuX2NvbmZpZy5zdGVwfHx0aGlzLl9jb25maWcuY2h1bmt8fCh0aGlzLl9jb21wbGV0ZVJlc3VsdHMuZGF0YT10aGlzLl9jb21wbGV0ZVJlc3VsdHMuZGF0YS5jb25jYXQobi5kYXRhKSx0aGlzLl9jb21wbGV0ZVJlc3VsdHMuZXJyb3JzPXRoaXMuX2NvbXBsZXRlUmVzdWx0cy5lcnJvcnMuY29uY2F0KG4uZXJyb3JzKSx0aGlzLl9jb21wbGV0ZVJlc3VsdHMubWV0YT1uLm1ldGEpLHRoaXMuX2NvbXBsZXRlZHx8IWF8fCF6KHRoaXMuX2NvbmZpZy5jb21wbGV0ZSl8fG4mJm4ubWV0YS5hYm9ydGVkfHwodGhpcy5fY29uZmlnLmNvbXBsZXRlKHRoaXMuX2NvbXBsZXRlUmVzdWx0cyx0aGlzLl9pbnB1dCksdGhpcy5fY29tcGxldGVkPSEwKSxhfHxuJiZuLm1ldGEucGF1c2VkfHx0aGlzLl9uZXh0Q2h1bmsoKSxufX0sdGhpcy5fc2VuZEVycm9yPWZ1bmN0aW9uKGUpe3oodGhpcy5fY29uZmlnLmVycm9yKT90aGlzLl9jb25maWcuZXJyb3IoZSk6byYmdGhpcy5fY29uZmlnLmVycm9yJiZmLnBvc3RNZXNzYWdlKHt3b3JrZXJJZDprLldPUktFUl9JRCxlcnJvcjplLGZpbmlzaGVkOiExfSl9fWZ1bmN0aW9uIGMoZSl7dmFyIGk7KGU9ZXx8e30pLmNodW5rU2l6ZXx8KGUuY2h1bmtTaXplPWsuUmVtb3RlQ2h1bmtTaXplKSxsLmNhbGwodGhpcyxlKSx0aGlzLl9uZXh0Q2h1bms9bj9mdW5jdGlvbigpe3RoaXMuX3JlYWRDaHVuaygpLHRoaXMuX2NodW5rTG9hZGVkKCl9OmZ1bmN0aW9uKCl7dGhpcy5fcmVhZENodW5rKCl9LHRoaXMuc3RyZWFtPWZ1bmN0aW9uKGUpe3RoaXMuX2lucHV0PWUsdGhpcy5fbmV4dENodW5rKCl9LHRoaXMuX3JlYWRDaHVuaz1mdW5jdGlvbigpe2lmKHRoaXMuX2ZpbmlzaGVkKXRoaXMuX2NodW5rTG9hZGVkKCk7ZWxzZXtpZihpPW5ldyBYTUxIdHRwUmVxdWVzdCx0aGlzLl9jb25maWcud2l0aENyZWRlbnRpYWxzJiYoaS53aXRoQ3JlZGVudGlhbHM9dGhpcy5fY29uZmlnLndpdGhDcmVkZW50aWFscyksbnx8KGkub25sb2FkPXcodGhpcy5fY2h1bmtMb2FkZWQsdGhpcyksaS5vbmVycm9yPXcodGhpcy5fY2h1bmtFcnJvcix0aGlzKSksaS5vcGVuKFwiR0VUXCIsdGhpcy5faW5wdXQsIW4pLHRoaXMuX2NvbmZpZy5kb3dubG9hZFJlcXVlc3RIZWFkZXJzKXt2YXIgZT10aGlzLl9jb25maWcuZG93bmxvYWRSZXF1ZXN0SGVhZGVycztmb3IodmFyIHQgaW4gZSlpLnNldFJlcXVlc3RIZWFkZXIodCxlW3RdKX1pZih0aGlzLl9jb25maWcuY2h1bmtTaXplKXt2YXIgcj10aGlzLl9zdGFydCt0aGlzLl9jb25maWcuY2h1bmtTaXplLTE7aS5zZXRSZXF1ZXN0SGVhZGVyKFwiUmFuZ2VcIixcImJ5dGVzPVwiK3RoaXMuX3N0YXJ0K1wiLVwiK3IpLGkuc2V0UmVxdWVzdEhlYWRlcihcIklmLU5vbmUtTWF0Y2hcIixcIndlYmtpdC1uby1jYWNoZVwiKX10cnl7aS5zZW5kKCl9Y2F0Y2goZSl7dGhpcy5fY2h1bmtFcnJvcihlLm1lc3NhZ2UpfW4mJjA9PT1pLnN0YXR1cz90aGlzLl9jaHVua0Vycm9yKCk6dGhpcy5fc3RhcnQrPXRoaXMuX2NvbmZpZy5jaHVua1NpemV9fSx0aGlzLl9jaHVua0xvYWRlZD1mdW5jdGlvbigpezQ9PT1pLnJlYWR5U3RhdGUmJihpLnN0YXR1czwyMDB8fDQwMDw9aS5zdGF0dXM/dGhpcy5fY2h1bmtFcnJvcigpOih0aGlzLl9maW5pc2hlZD0hdGhpcy5fY29uZmlnLmNodW5rU2l6ZXx8dGhpcy5fc3RhcnQ+ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtUmFuZ2VcIik7aWYobnVsbD09PXQpcmV0dXJuLTE7cmV0dXJuIHBhcnNlSW50KHQuc3Vic3RyKHQubGFzdEluZGV4T2YoXCIvXCIpKzEpKX0oaSksdGhpcy5wYXJzZUNodW5rKGkucmVzcG9uc2VUZXh0KSkpfSx0aGlzLl9jaHVua0Vycm9yPWZ1bmN0aW9uKGUpe3ZhciB0PWkuc3RhdHVzVGV4dHx8ZTt0aGlzLl9zZW5kRXJyb3IobmV3IEVycm9yKHQpKX19ZnVuY3Rpb24gcChlKXt2YXIgaSxuOyhlPWV8fHt9KS5jaHVua1NpemV8fChlLmNodW5rU2l6ZT1rLkxvY2FsQ2h1bmtTaXplKSxsLmNhbGwodGhpcyxlKTt2YXIgcz1cInVuZGVmaW5lZFwiIT10eXBlb2YgRmlsZVJlYWRlcjt0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXt0aGlzLl9pbnB1dD1lLG49ZS5zbGljZXx8ZS53ZWJraXRTbGljZXx8ZS5tb3pTbGljZSxzPygoaT1uZXcgRmlsZVJlYWRlcikub25sb2FkPXcodGhpcy5fY2h1bmtMb2FkZWQsdGhpcyksaS5vbmVycm9yPXcodGhpcy5fY2h1bmtFcnJvcix0aGlzKSk6aT1uZXcgRmlsZVJlYWRlclN5bmMsdGhpcy5fbmV4dENodW5rKCl9LHRoaXMuX25leHRDaHVuaz1mdW5jdGlvbigpe3RoaXMuX2ZpbmlzaGVkfHx0aGlzLl9jb25maWcucHJldmlldyYmISh0aGlzLl9yb3dDb3VudDx0aGlzLl9jb25maWcucHJldmlldyl8fHRoaXMuX3JlYWRDaHVuaygpfSx0aGlzLl9yZWFkQ2h1bms9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9pbnB1dDtpZih0aGlzLl9jb25maWcuY2h1bmtTaXplKXt2YXIgdD1NYXRoLm1pbih0aGlzLl9zdGFydCt0aGlzLl9jb25maWcuY2h1bmtTaXplLHRoaXMuX2lucHV0LnNpemUpO2U9bi5jYWxsKGUsdGhpcy5fc3RhcnQsdCl9dmFyIHI9aS5yZWFkQXNUZXh0KGUsdGhpcy5fY29uZmlnLmVuY29kaW5nKTtzfHx0aGlzLl9jaHVua0xvYWRlZCh7dGFyZ2V0OntyZXN1bHQ6cn19KX0sdGhpcy5fY2h1bmtMb2FkZWQ9ZnVuY3Rpb24oZSl7dGhpcy5fc3RhcnQrPXRoaXMuX2NvbmZpZy5jaHVua1NpemUsdGhpcy5fZmluaXNoZWQ9IXRoaXMuX2NvbmZpZy5jaHVua1NpemV8fHRoaXMuX3N0YXJ0Pj10aGlzLl9pbnB1dC5zaXplLHRoaXMucGFyc2VDaHVuayhlLnRhcmdldC5yZXN1bHQpfSx0aGlzLl9jaHVua0Vycm9yPWZ1bmN0aW9uKCl7dGhpcy5fc2VuZEVycm9yKGkuZXJyb3IpfX1mdW5jdGlvbiBfKGUpe3ZhciByO2wuY2FsbCh0aGlzLGU9ZXx8e30pLHRoaXMuc3RyZWFtPWZ1bmN0aW9uKGUpe3JldHVybiByPWUsdGhpcy5fbmV4dENodW5rKCl9LHRoaXMuX25leHRDaHVuaz1mdW5jdGlvbigpe2lmKCF0aGlzLl9maW5pc2hlZCl7dmFyIGU9dGhpcy5fY29uZmlnLmNodW5rU2l6ZSx0PWU/ci5zdWJzdHIoMCxlKTpyO3JldHVybiByPWU/ci5zdWJzdHIoZSk6XCJcIix0aGlzLl9maW5pc2hlZD0hcix0aGlzLnBhcnNlQ2h1bmsodCl9fX1mdW5jdGlvbiBnKGUpe2wuY2FsbCh0aGlzLGU9ZXx8e30pO3ZhciB0PVtdLHI9ITAsaT0hMTt0aGlzLnBhdXNlPWZ1bmN0aW9uKCl7bC5wcm90b3R5cGUucGF1c2UuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2lucHV0LnBhdXNlKCl9LHRoaXMucmVzdW1lPWZ1bmN0aW9uKCl7bC5wcm90b3R5cGUucmVzdW1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9pbnB1dC5yZXN1bWUoKX0sdGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7dGhpcy5faW5wdXQ9ZSx0aGlzLl9pbnB1dC5vbihcImRhdGFcIix0aGlzLl9zdHJlYW1EYXRhKSx0aGlzLl9pbnB1dC5vbihcImVuZFwiLHRoaXMuX3N0cmVhbUVuZCksdGhpcy5faW5wdXQub24oXCJlcnJvclwiLHRoaXMuX3N0cmVhbUVycm9yKX0sdGhpcy5fY2hlY2tJc0ZpbmlzaGVkPWZ1bmN0aW9uKCl7aSYmMT09PXQubGVuZ3RoJiYodGhpcy5fZmluaXNoZWQ9ITApfSx0aGlzLl9uZXh0Q2h1bms9ZnVuY3Rpb24oKXt0aGlzLl9jaGVja0lzRmluaXNoZWQoKSx0Lmxlbmd0aD90aGlzLnBhcnNlQ2h1bmsodC5zaGlmdCgpKTpyPSEwfSx0aGlzLl9zdHJlYW1EYXRhPXcoZnVuY3Rpb24oZSl7dHJ5e3QucHVzaChcInN0cmluZ1wiPT10eXBlb2YgZT9lOmUudG9TdHJpbmcodGhpcy5fY29uZmlnLmVuY29kaW5nKSksciYmKHI9ITEsdGhpcy5fY2hlY2tJc0ZpbmlzaGVkKCksdGhpcy5wYXJzZUNodW5rKHQuc2hpZnQoKSkpfWNhdGNoKGUpe3RoaXMuX3N0cmVhbUVycm9yKGUpfX0sdGhpcyksdGhpcy5fc3RyZWFtRXJyb3I9dyhmdW5jdGlvbihlKXt0aGlzLl9zdHJlYW1DbGVhblVwKCksdGhpcy5fc2VuZEVycm9yKGUpfSx0aGlzKSx0aGlzLl9zdHJlYW1FbmQ9dyhmdW5jdGlvbigpe3RoaXMuX3N0cmVhbUNsZWFuVXAoKSxpPSEwLHRoaXMuX3N0cmVhbURhdGEoXCJcIil9LHRoaXMpLHRoaXMuX3N0cmVhbUNsZWFuVXA9dyhmdW5jdGlvbigpe3RoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLHRoaXMuX3N0cmVhbURhdGEpLHRoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsdGhpcy5fc3RyZWFtRW5kKSx0aGlzLl9pbnB1dC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsdGhpcy5fc3RyZWFtRXJyb3IpfSx0aGlzKX1mdW5jdGlvbiByKGcpe3ZhciBhLG8saCxpPS9eXFxzKi0/KFxcZCpcXC4/XFxkK3xcXGQrXFwuP1xcZCopKGVbLStdP1xcZCspP1xccyokL2ksbj0vKFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkXFwuXFxkKyhbKy1dWzAtMl1cXGQ6WzAtNV1cXGR8WikpfChcXGR7NH0tWzAxXVxcZC1bMC0zXVxcZFRbMC0yXVxcZDpbMC01XVxcZDpbMC01XVxcZChbKy1dWzAtMl1cXGQ6WzAtNV1cXGR8WikpfChcXGR7NH0tWzAxXVxcZC1bMC0zXVxcZFRbMC0yXVxcZDpbMC01XVxcZChbKy1dWzAtMl1cXGQ6WzAtNV1cXGR8WikpLyx0PXRoaXMscj0wLHM9MCx1PSExLGU9ITEsZj1bXSxkPXtkYXRhOltdLGVycm9yczpbXSxtZXRhOnt9fTtpZih6KGcuc3RlcCkpe3ZhciBsPWcuc3RlcDtnLnN0ZXA9ZnVuY3Rpb24oZSl7aWYoZD1lLHAoKSljKCk7ZWxzZXtpZihjKCksMD09PWQuZGF0YS5sZW5ndGgpcmV0dXJuO3IrPWUuZGF0YS5sZW5ndGgsZy5wcmV2aWV3JiZyPmcucHJldmlldz9vLmFib3J0KCk6bChkLHQpfX19ZnVuY3Rpb24gbShlKXtyZXR1cm5cImdyZWVkeVwiPT09Zy5za2lwRW1wdHlMaW5lcz9cIlwiPT09ZS5qb2luKFwiXCIpLnRyaW0oKToxPT09ZS5sZW5ndGgmJjA9PT1lWzBdLmxlbmd0aH1mdW5jdGlvbiBjKCl7aWYoZCYmaCYmKHkoXCJEZWxpbWl0ZXJcIixcIlVuZGV0ZWN0YWJsZURlbGltaXRlclwiLFwiVW5hYmxlIHRvIGF1dG8tZGV0ZWN0IGRlbGltaXRpbmcgY2hhcmFjdGVyOyBkZWZhdWx0ZWQgdG8gJ1wiK2suRGVmYXVsdERlbGltaXRlcitcIidcIiksaD0hMSksZy5za2lwRW1wdHlMaW5lcylmb3IodmFyIGU9MDtlPGQuZGF0YS5sZW5ndGg7ZSsrKW0oZC5kYXRhW2VdKSYmZC5kYXRhLnNwbGljZShlLS0sMSk7cmV0dXJuIHAoKSYmZnVuY3Rpb24oKXtpZighZClyZXR1cm47Zm9yKHZhciBlPTA7cCgpJiZlPGQuZGF0YS5sZW5ndGg7ZSsrKWZvcih2YXIgdD0wO3Q8ZC5kYXRhW2VdLmxlbmd0aDt0Kyspe3ZhciByPWQuZGF0YVtlXVt0XTtnLnRyaW1IZWFkZXJzJiYocj1yLnRyaW0oKSksZi5wdXNoKHIpfWQuZGF0YS5zcGxpY2UoMCwxKX0oKSxmdW5jdGlvbigpe2lmKCFkfHwhZy5oZWFkZXImJiFnLmR5bmFtaWNUeXBpbmcmJiFnLnRyYW5zZm9ybSlyZXR1cm4gZDtmb3IodmFyIGU9MDtlPGQuZGF0YS5sZW5ndGg7ZSsrKXt2YXIgdCxyPWcuaGVhZGVyP3t9OltdO2Zvcih0PTA7dDxkLmRhdGFbZV0ubGVuZ3RoO3QrKyl7dmFyIGk9dCxuPWQuZGF0YVtlXVt0XTtnLmhlYWRlciYmKGk9dD49Zi5sZW5ndGg/XCJfX3BhcnNlZF9leHRyYVwiOmZbdF0pLGcudHJhbnNmb3JtJiYobj1nLnRyYW5zZm9ybShuLGkpKSxuPV8oaSxuKSxcIl9fcGFyc2VkX2V4dHJhXCI9PT1pPyhyW2ldPXJbaV18fFtdLHJbaV0ucHVzaChuKSk6cltpXT1ufWQuZGF0YVtlXT1yLGcuaGVhZGVyJiYodD5mLmxlbmd0aD95KFwiRmllbGRNaXNtYXRjaFwiLFwiVG9vTWFueUZpZWxkc1wiLFwiVG9vIG1hbnkgZmllbGRzOiBleHBlY3RlZCBcIitmLmxlbmd0aCtcIiBmaWVsZHMgYnV0IHBhcnNlZCBcIit0LHMrZSk6dDxmLmxlbmd0aCYmeShcIkZpZWxkTWlzbWF0Y2hcIixcIlRvb0Zld0ZpZWxkc1wiLFwiVG9vIGZldyBmaWVsZHM6IGV4cGVjdGVkIFwiK2YubGVuZ3RoK1wiIGZpZWxkcyBidXQgcGFyc2VkIFwiK3QscytlKSl9Zy5oZWFkZXImJmQubWV0YSYmKGQubWV0YS5maWVsZHM9Zik7cmV0dXJuIHMrPWQuZGF0YS5sZW5ndGgsZH0oKX1mdW5jdGlvbiBwKCl7cmV0dXJuIGcuaGVhZGVyJiYwPT09Zi5sZW5ndGh9ZnVuY3Rpb24gXyhlLHQpe3JldHVybiByPWUsZy5keW5hbWljVHlwaW5nRnVuY3Rpb24mJnZvaWQgMD09PWcuZHluYW1pY1R5cGluZ1tyXSYmKGcuZHluYW1pY1R5cGluZ1tyXT1nLmR5bmFtaWNUeXBpbmdGdW5jdGlvbihyKSksITA9PT0oZy5keW5hbWljVHlwaW5nW3JdfHxnLmR5bmFtaWNUeXBpbmcpP1widHJ1ZVwiPT09dHx8XCJUUlVFXCI9PT10fHxcImZhbHNlXCIhPT10JiZcIkZBTFNFXCIhPT10JiYoaS50ZXN0KHQpP3BhcnNlRmxvYXQodCk6bi50ZXN0KHQpP25ldyBEYXRlKHQpOlwiXCI9PT10P251bGw6dCk6dDt2YXIgcn1mdW5jdGlvbiB5KGUsdCxyLGkpe2QuZXJyb3JzLnB1c2goe3R5cGU6ZSxjb2RlOnQsbWVzc2FnZTpyLHJvdzppfSl9dGhpcy5wYXJzZT1mdW5jdGlvbihlLHQscil7dmFyIGk9Zy5xdW90ZUNoYXJ8fCdcIic7aWYoZy5uZXdsaW5lfHwoZy5uZXdsaW5lPWZ1bmN0aW9uKGUsdCl7ZT1lLnN1YnN0cigwLDEwNDg1NzYpO3ZhciByPW5ldyBSZWdFeHAoTSh0KStcIihbXl0qPylcIitNKHQpLFwiZ21cIiksaT0oZT1lLnJlcGxhY2UocixcIlwiKSkuc3BsaXQoXCJcXHJcIiksbj1lLnNwbGl0KFwiXFxuXCIpLHM9MTxuLmxlbmd0aCYmblswXS5sZW5ndGg8aVswXS5sZW5ndGg7aWYoMT09PWkubGVuZ3RofHxzKXJldHVyblwiXFxuXCI7Zm9yKHZhciBhPTAsbz0wO288aS5sZW5ndGg7bysrKVwiXFxuXCI9PT1pW29dWzBdJiZhKys7cmV0dXJuIGE+PWkubGVuZ3RoLzI/XCJcXHJcXG5cIjpcIlxcclwifShlLGkpKSxoPSExLGcuZGVsaW1pdGVyKXooZy5kZWxpbWl0ZXIpJiYoZy5kZWxpbWl0ZXI9Zy5kZWxpbWl0ZXIoZSksZC5tZXRhLmRlbGltaXRlcj1nLmRlbGltaXRlcik7ZWxzZXt2YXIgbj1mdW5jdGlvbihlLHQscixpKXtmb3IodmFyIG4scyxhLG89W1wiLFwiLFwiXFx0XCIsXCJ8XCIsXCI7XCIsay5SRUNPUkRfU0VQLGsuVU5JVF9TRVBdLGg9MDtoPG8ubGVuZ3RoO2grKyl7dmFyIHU9b1toXSxmPTAsZD0wLGw9MDthPXZvaWQgMDtmb3IodmFyIGM9bmV3IHYoe2NvbW1lbnRzOmksZGVsaW1pdGVyOnUsbmV3bGluZTp0LHByZXZpZXc6MTB9KS5wYXJzZShlKSxwPTA7cDxjLmRhdGEubGVuZ3RoO3ArKylpZihyJiZtKGMuZGF0YVtwXSkpbCsrO2Vsc2V7dmFyIF89Yy5kYXRhW3BdLmxlbmd0aDtkKz1fLHZvaWQgMCE9PWE/MTxfJiYoZis9TWF0aC5hYnMoXy1hKSxhPV8pOmE9MH0wPGMuZGF0YS5sZW5ndGgmJihkLz1jLmRhdGEubGVuZ3RoLWwpLCh2b2lkIDA9PT1zfHxzPGYpJiYxLjk5PGQmJihzPWYsbj11KX1yZXR1cm57c3VjY2Vzc2Z1bDohIShnLmRlbGltaXRlcj1uKSxiZXN0RGVsaW1pdGVyOm59fShlLGcubmV3bGluZSxnLnNraXBFbXB0eUxpbmVzLGcuY29tbWVudHMpO24uc3VjY2Vzc2Z1bD9nLmRlbGltaXRlcj1uLmJlc3REZWxpbWl0ZXI6KGg9ITAsZy5kZWxpbWl0ZXI9ay5EZWZhdWx0RGVsaW1pdGVyKSxkLm1ldGEuZGVsaW1pdGVyPWcuZGVsaW1pdGVyfXZhciBzPUUoZyk7cmV0dXJuIGcucHJldmlldyYmZy5oZWFkZXImJnMucHJldmlldysrLGE9ZSxvPW5ldyB2KHMpLGQ9by5wYXJzZShhLHQsciksYygpLHU/e21ldGE6e3BhdXNlZDohMH19OmR8fHttZXRhOntwYXVzZWQ6ITF9fX0sdGhpcy5wYXVzZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdX0sdGhpcy5wYXVzZT1mdW5jdGlvbigpe3U9ITAsby5hYm9ydCgpLGE9YS5zdWJzdHIoby5nZXRDaGFySW5kZXgoKSl9LHRoaXMucmVzdW1lPWZ1bmN0aW9uKCl7dT0hMSx0LnN0cmVhbWVyLnBhcnNlQ2h1bmsoYSwhMCl9LHRoaXMuYWJvcnRlZD1mdW5jdGlvbigpe3JldHVybiBlfSx0aGlzLmFib3J0PWZ1bmN0aW9uKCl7ZT0hMCxvLmFib3J0KCksZC5tZXRhLmFib3J0ZWQ9ITAseihnLmNvbXBsZXRlKSYmZy5jb21wbGV0ZShkKSxhPVwiXCJ9fWZ1bmN0aW9uIE0oZSl7cmV0dXJuIGUucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csXCJcXFxcJCZcIil9ZnVuY3Rpb24gdihlKXt2YXIgUyxPPShlPWV8fHt9KS5kZWxpbWl0ZXIseD1lLm5ld2xpbmUsVD1lLmNvbW1lbnRzLEk9ZS5zdGVwLEE9ZS5wcmV2aWV3LEQ9ZS5mYXN0TW9kZSxMPVM9dm9pZCAwPT09ZS5xdW90ZUNoYXI/J1wiJzplLnF1b3RlQ2hhcjtpZih2b2lkIDAhPT1lLmVzY2FwZUNoYXImJihMPWUuZXNjYXBlQ2hhciksKFwic3RyaW5nXCIhPXR5cGVvZiBPfHwtMTxrLkJBRF9ERUxJTUlURVJTLmluZGV4T2YoTykpJiYoTz1cIixcIiksVD09PU8pdGhyb3dcIkNvbW1lbnQgY2hhcmFjdGVyIHNhbWUgYXMgZGVsaW1pdGVyXCI7ITA9PT1UP1Q9XCIjXCI6KFwic3RyaW5nXCIhPXR5cGVvZiBUfHwtMTxrLkJBRF9ERUxJTUlURVJTLmluZGV4T2YoVCkpJiYoVD0hMSksXCJcXG5cIiE9PXgmJlwiXFxyXCIhPT14JiZcIlxcclxcblwiIT09eCYmKHg9XCJcXG5cIik7dmFyIFA9MCxGPSExO3RoaXMucGFyc2U9ZnVuY3Rpb24oaSx0LHIpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBpKXRocm93XCJJbnB1dCBtdXN0IGJlIGEgc3RyaW5nXCI7dmFyIG49aS5sZW5ndGgsZT1PLmxlbmd0aCxzPXgubGVuZ3RoLGE9VC5sZW5ndGgsbz16KEkpLGg9W10sdT1bXSxmPVtdLGQ9UD0wO2lmKCFpKXJldHVybiBDKCk7aWYoRHx8ITEhPT1EJiYtMT09PWkuaW5kZXhPZihTKSl7Zm9yKHZhciBsPWkuc3BsaXQoeCksYz0wO2M8bC5sZW5ndGg7YysrKXtpZihmPWxbY10sUCs9Zi5sZW5ndGgsYyE9PWwubGVuZ3RoLTEpUCs9eC5sZW5ndGg7ZWxzZSBpZihyKXJldHVybiBDKCk7aWYoIVR8fGYuc3Vic3RyKDAsYSkhPT1UKXtpZihvKXtpZihoPVtdLGsoZi5zcGxpdChPKSksUigpLEYpcmV0dXJuIEMoKX1lbHNlIGsoZi5zcGxpdChPKSk7aWYoQSYmQTw9YylyZXR1cm4gaD1oLnNsaWNlKDAsQSksQyghMCl9fXJldHVybiBDKCl9Zm9yKHZhciBwLF89aS5pbmRleE9mKE8sUCksZz1pLmluZGV4T2YoeCxQKSxtPW5ldyBSZWdFeHAoTShMKStNKFMpLFwiZ1wiKTs7KWlmKGlbUF0hPT1TKWlmKFQmJjA9PT1mLmxlbmd0aCYmaS5zdWJzdHIoUCxhKT09PVQpe2lmKC0xPT09ZylyZXR1cm4gQygpO1A9ZytzLGc9aS5pbmRleE9mKHgsUCksXz1pLmluZGV4T2YoTyxQKX1lbHNlIGlmKC0xIT09XyYmKF88Z3x8LTE9PT1nKSlmLnB1c2goaS5zdWJzdHJpbmcoUCxfKSksUD1fK2UsXz1pLmluZGV4T2YoTyxQKTtlbHNle2lmKC0xPT09ZylicmVhaztpZihmLnB1c2goaS5zdWJzdHJpbmcoUCxnKSksdyhnK3MpLG8mJihSKCksRikpcmV0dXJuIEMoKTtpZihBJiZoLmxlbmd0aD49QSlyZXR1cm4gQyghMCl9ZWxzZSBmb3IocD1QLFArKzs7KXtpZigtMT09PShwPWkuaW5kZXhPZihTLHArMSkpKXJldHVybiByfHx1LnB1c2goe3R5cGU6XCJRdW90ZXNcIixjb2RlOlwiTWlzc2luZ1F1b3Rlc1wiLG1lc3NhZ2U6XCJRdW90ZWQgZmllbGQgdW50ZXJtaW5hdGVkXCIscm93OmgubGVuZ3RoLGluZGV4OlB9KSxFKCk7aWYocD09PW4tMSlyZXR1cm4gRShpLnN1YnN0cmluZyhQLHApLnJlcGxhY2UobSxTKSk7aWYoUyE9PUx8fGlbcCsxXSE9PUwpe2lmKFM9PT1MfHwwPT09cHx8aVtwLTFdIT09TCl7dmFyIHk9YigtMT09PWc/XzpNYXRoLm1pbihfLGcpKTtpZihpW3ArMSt5XT09PU8pe2YucHVzaChpLnN1YnN0cmluZyhQLHApLnJlcGxhY2UobSxTKSksUD1wKzEreStlLF89aS5pbmRleE9mKE8sUCksZz1pLmluZGV4T2YoeCxQKTticmVha312YXIgdj1iKGcpO2lmKGkuc3Vic3RyKHArMSt2LHMpPT09eCl7aWYoZi5wdXNoKGkuc3Vic3RyaW5nKFAscCkucmVwbGFjZShtLFMpKSx3KHArMSt2K3MpLF89aS5pbmRleE9mKE8sUCksbyYmKFIoKSxGKSlyZXR1cm4gQygpO2lmKEEmJmgubGVuZ3RoPj1BKXJldHVybiBDKCEwKTticmVha311LnB1c2goe3R5cGU6XCJRdW90ZXNcIixjb2RlOlwiSW52YWxpZFF1b3Rlc1wiLG1lc3NhZ2U6XCJUcmFpbGluZyBxdW90ZSBvbiBxdW90ZWQgZmllbGQgaXMgbWFsZm9ybWVkXCIscm93OmgubGVuZ3RoLGluZGV4OlB9KSxwKyt9fWVsc2UgcCsrfXJldHVybiBFKCk7ZnVuY3Rpb24gayhlKXtoLnB1c2goZSksZD1QfWZ1bmN0aW9uIGIoZSl7dmFyIHQ9MDtpZigtMSE9PWUpe3ZhciByPWkuc3Vic3RyaW5nKHArMSxlKTtyJiZcIlwiPT09ci50cmltKCkmJih0PXIubGVuZ3RoKX1yZXR1cm4gdH1mdW5jdGlvbiBFKGUpe3JldHVybiByfHwodm9pZCAwPT09ZSYmKGU9aS5zdWJzdHIoUCkpLGYucHVzaChlKSxQPW4sayhmKSxvJiZSKCkpLEMoKX1mdW5jdGlvbiB3KGUpe1A9ZSxrKGYpLGY9W10sZz1pLmluZGV4T2YoeCxQKX1mdW5jdGlvbiBDKGUpe3JldHVybntkYXRhOmgsZXJyb3JzOnUsbWV0YTp7ZGVsaW1pdGVyOk8sbGluZWJyZWFrOngsYWJvcnRlZDpGLHRydW5jYXRlZDohIWUsY3Vyc29yOmQrKHR8fDApfX19ZnVuY3Rpb24gUigpe0koQygpKSxoPVtdLHU9W119fSx0aGlzLmFib3J0PWZ1bmN0aW9uKCl7Rj0hMH0sdGhpcy5nZXRDaGFySW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gUH19ZnVuY3Rpb24gbShlKXt2YXIgdD1lLmRhdGEscj1oW3Qud29ya2VySWRdLGk9ITE7aWYodC5lcnJvcilyLnVzZXJFcnJvcih0LmVycm9yLHQuZmlsZSk7ZWxzZSBpZih0LnJlc3VsdHMmJnQucmVzdWx0cy5kYXRhKXt2YXIgbj17YWJvcnQ6ZnVuY3Rpb24oKXtpPSEwLHkodC53b3JrZXJJZCx7ZGF0YTpbXSxlcnJvcnM6W10sbWV0YTp7YWJvcnRlZDohMH19KX0scGF1c2U6YixyZXN1bWU6Yn07aWYoeihyLnVzZXJTdGVwKSl7Zm9yKHZhciBzPTA7czx0LnJlc3VsdHMuZGF0YS5sZW5ndGgmJihyLnVzZXJTdGVwKHtkYXRhOlt0LnJlc3VsdHMuZGF0YVtzXV0sZXJyb3JzOnQucmVzdWx0cy5lcnJvcnMsbWV0YTp0LnJlc3VsdHMubWV0YX0sbiksIWkpO3MrKyk7ZGVsZXRlIHQucmVzdWx0c31lbHNlIHooci51c2VyQ2h1bmspJiYoci51c2VyQ2h1bmsodC5yZXN1bHRzLG4sdC5maWxlKSxkZWxldGUgdC5yZXN1bHRzKX10LmZpbmlzaGVkJiYhaSYmeSh0LndvcmtlcklkLHQucmVzdWx0cyl9ZnVuY3Rpb24geShlLHQpe3ZhciByPWhbZV07eihyLnVzZXJDb21wbGV0ZSkmJnIudXNlckNvbXBsZXRlKHQpLHIudGVybWluYXRlKCksZGVsZXRlIGhbZV19ZnVuY3Rpb24gYigpe3Rocm93XCJOb3QgaW1wbGVtZW50ZWQuXCJ9ZnVuY3Rpb24gRShlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuIGU7dmFyIHQ9QXJyYXkuaXNBcnJheShlKT9bXTp7fTtmb3IodmFyIHIgaW4gZSl0W3JdPUUoZVtyXSk7cmV0dXJuIHR9ZnVuY3Rpb24gdyhlLHQpe3JldHVybiBmdW5jdGlvbigpe2UuYXBwbHkodCxhcmd1bWVudHMpfX1mdW5jdGlvbiB6KGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9cmV0dXJuIG8/Zi5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kYXRhO3ZvaWQgMD09PWsuV09SS0VSX0lEJiZ0JiYoay5XT1JLRVJfSUQ9dC53b3JrZXJJZCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQuaW5wdXQpZi5wb3N0TWVzc2FnZSh7d29ya2VySWQ6ay5XT1JLRVJfSUQscmVzdWx0czprLnBhcnNlKHQuaW5wdXQsdC5jb25maWcpLGZpbmlzaGVkOiEwfSk7ZWxzZSBpZihmLkZpbGUmJnQuaW5wdXQgaW5zdGFuY2VvZiBGaWxlfHx0LmlucHV0IGluc3RhbmNlb2YgT2JqZWN0KXt2YXIgcj1rLnBhcnNlKHQuaW5wdXQsdC5jb25maWcpO3ImJmYucG9zdE1lc3NhZ2Uoe3dvcmtlcklkOmsuV09SS0VSX0lELHJlc3VsdHM6cixmaW5pc2hlZDohMH0pfX06ay5XT1JLRVJTX1NVUFBPUlRFRCYmKGU9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIikscz1lLmxlbmd0aD9lW2UubGVuZ3RoLTFdLnNyYzpcIlwiLGRvY3VtZW50LmJvZHk/ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixmdW5jdGlvbigpe2E9ITB9LCEwKTphPSEwKSwoYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShsLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWMsKHAucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobC5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1wLChfLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKF8ucHJvdG90eXBlKSkuY29uc3RydWN0b3I9XywoZy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShsLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWcsa30pOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImRhdGEvZGF0YS5jc3Y/dj01NzUzZGNcIjsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIChnbG9iYWwuYXV0b0NvbXBsZXRlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cblxuICB2YXIgZGF0YUF0dHJpYnV0ZSA9IFwiZGF0YS1yZXN1bHRcIjtcbiAgdmFyIHNlbGVjdCA9IHtcbiAgICByZXN1bHRzTGlzdDogXCJhdXRvQ29tcGxldGVfcmVzdWx0c19saXN0XCIsXG4gICAgcmVzdWx0OiBcImF1dG9Db21wbGV0ZV9yZXN1bHRcIixcbiAgICBoaWdobGlnaHQ6IFwiYXV0b0NvbXBsZXRlX2hpZ2hsaWdodGVkXCJcbiAgfTtcbiAgdmFyIGdldElucHV0ID0gZnVuY3Rpb24gZ2V0SW5wdXQoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBzZWxlY3RvcigpO1xuICB9O1xuICB2YXIgY3JlYXRlUmVzdWx0c0xpc3QgPSBmdW5jdGlvbiBjcmVhdGVSZXN1bHRzTGlzdChyZW5kZXJSZXN1bHRzKSB7XG4gICAgdmFyIHJlc3VsdHNMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgIGlmIChyZW5kZXJSZXN1bHRzLmNvbnRhaW5lcikge1xuICAgICAgc2VsZWN0LnJlc3VsdHNMaXN0ID0gcmVuZGVyUmVzdWx0cy5jb250YWluZXIocmVzdWx0c0xpc3QpIHx8IHNlbGVjdC5yZXN1bHRzTGlzdDtcbiAgICB9XG4gICAgcmVzdWx0c0xpc3QuY2xhc3NMaXN0LmFkZChzZWxlY3QucmVzdWx0c0xpc3QpO1xuICAgIHJlbmRlclJlc3VsdHMuZGVzdGluYXRpb24uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KHJlbmRlclJlc3VsdHMucG9zaXRpb24sIHJlc3VsdHNMaXN0KTtcbiAgICByZXR1cm4gcmVzdWx0c0xpc3Q7XG4gIH07XG4gIHZhciBoaWdobGlnaHQgPSBmdW5jdGlvbiBoaWdobGlnaHQodmFsdWUpIHtcbiAgICByZXR1cm4gXCI8c3BhbiBjbGFzcz1cIi5jb25jYXQoc2VsZWN0LmhpZ2hsaWdodCwgXCI+XCIpLmNvbmNhdCh2YWx1ZSwgXCI8L3NwYW4+XCIpO1xuICB9O1xuICB2YXIgYWRkUmVzdWx0c1RvTGlzdCA9IGZ1bmN0aW9uIGFkZFJlc3VsdHNUb0xpc3QocmVzdWx0c0xpc3QsIGRhdGFTcmMsIGRhdGFLZXksIGNhbGxiYWNrKSB7XG4gICAgZGF0YVNyYy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCwgcmVjb3JkKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgdmFyIHJlc3VsdFZhbHVlID0gZGF0YVNyY1tyZWNvcmRdLnNvdXJjZVtkYXRhS2V5XSB8fCBkYXRhU3JjW3JlY29yZF0uc291cmNlO1xuICAgICAgcmVzdWx0LnNldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlLCByZXN1bHRWYWx1ZSk7XG4gICAgICByZXN1bHQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc2VsZWN0LnJlc3VsdCk7XG4gICAgICByZXN1bHQuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCIxXCIpO1xuICAgICAgcmVzdWx0LmlubmVySFRNTCA9IGNhbGxiYWNrID8gY2FsbGJhY2soZXZlbnQsIHJlc3VsdCkgOiBldmVudC5tYXRjaCB8fCBldmVudDtcbiAgICAgIHJlc3VsdHNMaXN0LmFwcGVuZENoaWxkKHJlc3VsdCk7XG4gICAgfSk7XG4gIH07XG4gIHZhciBuYXZpZ2F0aW9uID0gZnVuY3Rpb24gbmF2aWdhdGlvbihzZWxlY3RvciwgcmVzdWx0c0xpc3QpIHtcbiAgICB2YXIgaW5wdXQgPSBnZXRJbnB1dChzZWxlY3Rvcik7XG4gICAgdmFyIGZpcnN0ID0gcmVzdWx0c0xpc3QuZmlyc3RDaGlsZDtcbiAgICBkb2N1bWVudC5vbmtleWRvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBhY3RpdmUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgaWYgKGFjdGl2ZSAhPT0gZmlyc3QgJiYgYWN0aXZlICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgYWN0aXZlLnByZXZpb3VzU2libGluZy5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aXZlID09PSBmaXJzdCkge1xuICAgICAgICAgICAgaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgaWYgKGFjdGl2ZSA9PT0gaW5wdXQgJiYgcmVzdWx0c0xpc3QuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmaXJzdC5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aXZlICE9PSByZXN1bHRzTGlzdC5sYXN0Q2hpbGQpIHtcbiAgICAgICAgICAgIGFjdGl2ZS5uZXh0U2libGluZy5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICB2YXIgY2xlYXJSZXN1bHRzID0gZnVuY3Rpb24gY2xlYXJSZXN1bHRzKHJlc3VsdHNMaXN0KSB7XG4gICAgcmV0dXJuIHJlc3VsdHNMaXN0LmlubmVySFRNTCA9IFwiXCI7XG4gIH07XG4gIHZhciBnZXRTZWxlY3Rpb24gPSBmdW5jdGlvbiBnZXRTZWxlY3Rpb24oZmllbGQsIHJlc3VsdHNMaXN0LCBjYWxsYmFjaywgcmVzdWx0c1ZhbHVlcywgZGF0YUtleSkge1xuICAgIHZhciByZXN1bHRzID0gcmVzdWx0c0xpc3QucXVlcnlTZWxlY3RvckFsbChcIi5cIi5jb25jYXQoc2VsZWN0LnJlc3VsdCkpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdHMpLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgW1wibW91c2Vkb3duXCIsIFwia2V5ZG93blwiXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudFR5cGUpIHtcbiAgICAgICAgcmVzdWx0c1tzZWxlY3Rpb25dLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnRUeXBlID09PSBcIm1vdXNlZG93blwiIHx8IGV2ZW50LmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICBjYWxsYmFjayh7XG4gICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgcXVlcnk6IGdldElucHV0KGZpZWxkKS52YWx1ZSxcbiAgICAgICAgICAgICAgcmVzdWx0czogcmVzdWx0c1ZhbHVlcy5tYXAoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQuc291cmNlO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgc2VsZWN0aW9uOiByZXN1bHRzVmFsdWVzLmZpbmQoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc1ZhbHVlID0gdmFsdWUuc291cmNlW2RhdGFLZXldIHx8IHZhbHVlLnNvdXJjZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzVmFsdWUgPT09IGV2ZW50LnRhcmdldC5jbG9zZXN0KFwiLlwiLmNvbmNhdChzZWxlY3QucmVzdWx0KSkuZ2V0QXR0cmlidXRlKGRhdGFBdHRyaWJ1dGUpO1xuICAgICAgICAgICAgICB9KS5zb3VyY2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2xlYXJSZXN1bHRzKHJlc3VsdHNMaXN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIHZhciBhdXRvQ29tcGxldGVWaWV3ID0ge1xuICAgIGdldElucHV0OiBnZXRJbnB1dCxcbiAgICBjcmVhdGVSZXN1bHRzTGlzdDogY3JlYXRlUmVzdWx0c0xpc3QsXG4gICAgaGlnaGxpZ2h0OiBoaWdobGlnaHQsXG4gICAgYWRkUmVzdWx0c1RvTGlzdDogYWRkUmVzdWx0c1RvTGlzdCxcbiAgICBuYXZpZ2F0aW9uOiBuYXZpZ2F0aW9uLFxuICAgIGNsZWFyUmVzdWx0czogY2xlYXJSZXN1bHRzLFxuICAgIGdldFNlbGVjdGlvbjogZ2V0U2VsZWN0aW9uXG4gIH07XG5cbiAgdmFyIGF1dG9Db21wbGV0ZSA9XG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBhdXRvQ29tcGxldGUoY29uZmlnKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgYXV0b0NvbXBsZXRlKTtcbiAgICAgIHRoaXMuc2VsZWN0b3IgPSBjb25maWcuc2VsZWN0b3IgfHwgXCIjYXV0b0NvbXBsZXRlXCI7XG4gICAgICB0aGlzLmRhdGEgPSB7XG4gICAgICAgIHNyYzogZnVuY3Rpb24gc3JjKCkge1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgY29uZmlnLmRhdGEuc3JjID09PSBcImZ1bmN0aW9uXCIgPyBjb25maWcuZGF0YS5zcmMoKSA6IGNvbmZpZy5kYXRhLnNyYztcbiAgICAgICAgfSxcbiAgICAgICAga2V5OiBjb25maWcuZGF0YS5rZXlcbiAgICAgIH07XG4gICAgICB0aGlzLnNlYXJjaEVuZ2luZSA9IGNvbmZpZy5zZWFyY2hFbmdpbmUgPT09IFwibG9vc2VcIiA/IFwibG9vc2VcIiA6IFwic3RyaWN0XCI7XG4gICAgICB0aGlzLnRocmVzaG9sZCA9IGNvbmZpZy50aHJlc2hvbGQgfHwgMDtcbiAgICAgIHRoaXMucmVzdWx0c0xpc3QgPSBhdXRvQ29tcGxldGVWaWV3LmNyZWF0ZVJlc3VsdHNMaXN0KHtcbiAgICAgICAgY29udGFpbmVyOiBjb25maWcucmVzdWx0c0xpc3QgJiYgY29uZmlnLnJlc3VsdHNMaXN0LmNvbnRhaW5lciA/IGNvbmZpZy5yZXN1bHRzTGlzdC5jb250YWluZXIgOiBmYWxzZSxcbiAgICAgICAgZGVzdGluYXRpb246IGNvbmZpZy5yZXN1bHRzTGlzdCAmJiBjb25maWcucmVzdWx0c0xpc3QuZGVzdGluYXRpb24gPyBjb25maWcucmVzdWx0c0xpc3QuZGVzdGluYXRpb24gOiBhdXRvQ29tcGxldGVWaWV3LmdldElucHV0KHRoaXMuc2VsZWN0b3IpLFxuICAgICAgICBwb3NpdGlvbjogY29uZmlnLnJlc3VsdHNMaXN0ICYmIGNvbmZpZy5yZXN1bHRzTGlzdC5wb3NpdGlvbiA/IGNvbmZpZy5yZXN1bHRzTGlzdC5wb3NpdGlvbiA6IFwiYWZ0ZXJlbmRcIlxuICAgICAgfSk7XG4gICAgICB0aGlzLnBsYWNlSG9sZGVyID0gY29uZmlnLnBsYWNlSG9sZGVyO1xuICAgICAgdGhpcy5tYXhSZXN1bHRzID0gY29uZmlnLm1heFJlc3VsdHMgfHwgNTtcbiAgICAgIHRoaXMucmVzdWx0SXRlbSA9IGNvbmZpZy5yZXN1bHRJdGVtO1xuICAgICAgdGhpcy5oaWdobGlnaHQgPSBjb25maWcuaGlnaGxpZ2h0IHx8IGZhbHNlO1xuICAgICAgdGhpcy5vblNlbGVjdGlvbiA9IGNvbmZpZy5vblNlbGVjdGlvbjtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cbiAgICBfY3JlYXRlQ2xhc3MoYXV0b0NvbXBsZXRlLCBbe1xuICAgICAga2V5OiBcInNlYXJjaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlYXJjaChxdWVyeSwgcmVjb3JkKSB7XG4gICAgICAgIHZhciBoaWdobGlnaHQgPSB0aGlzLmhpZ2hsaWdodDtcbiAgICAgICAgdmFyIHJlY29yZExvd2VyQ2FzZSA9IHJlY29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodGhpcy5zZWFyY2hFbmdpbmUgPT09IFwibG9vc2VcIikge1xuICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkucmVwbGFjZSgvIC9nLCBcIlwiKTtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBbXTtcbiAgICAgICAgICB2YXIgc2VhcmNoUG9zaXRpb24gPSAwO1xuICAgICAgICAgIGZvciAodmFyIG51bWJlciA9IDA7IG51bWJlciA8IHJlY29yZExvd2VyQ2FzZS5sZW5ndGg7IG51bWJlcisrKSB7XG4gICAgICAgICAgICB2YXIgcmVjb3JkQ2hhciA9IHJlY29yZExvd2VyQ2FzZVtudW1iZXJdO1xuICAgICAgICAgICAgaWYgKHNlYXJjaFBvc2l0aW9uIDwgcXVlcnkubGVuZ3RoICYmIHJlY29yZENoYXIgPT09IHF1ZXJ5W3NlYXJjaFBvc2l0aW9uXSkge1xuICAgICAgICAgICAgICByZWNvcmRDaGFyID0gaGlnaGxpZ2h0ID8gYXV0b0NvbXBsZXRlVmlldy5oaWdobGlnaHQocmVjb3JkQ2hhcikgOiByZWNvcmRDaGFyO1xuICAgICAgICAgICAgICBzZWFyY2hQb3NpdGlvbisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWF0Y2gucHVzaChyZWNvcmRDaGFyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlYXJjaFBvc2l0aW9uICE9PSBxdWVyeS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmpvaW4oXCJcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHJlY29yZExvd2VyQ2FzZS5pbmNsdWRlcyhxdWVyeSkpIHtcbiAgICAgICAgICAgIGlmIChoaWdobGlnaHQpIHtcbiAgICAgICAgICAgICAgdmFyIGlucHV0VmFsdWUgPSBhdXRvQ29tcGxldGVWaWV3LmdldElucHV0KHRoaXMuc2VsZWN0b3IpLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgIHJldHVybiByZWNvcmRMb3dlckNhc2UucmVwbGFjZShpbnB1dFZhbHVlLCBhdXRvQ29tcGxldGVWaWV3LmhpZ2hsaWdodChpbnB1dFZhbHVlKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkTG93ZXJDYXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsaXN0TWF0Y2hlZFJlc3VsdHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0TWF0Y2hlZFJlc3VsdHMoZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzTGlzdCA9IFtdO1xuICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IGF1dG9Db21wbGV0ZVZpZXcuZ2V0SW5wdXQodGhpcy5zZWxlY3RvcikudmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgZGF0YS5maWx0ZXIoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IF90aGlzLnNlYXJjaChpbnB1dFZhbHVlLCByZWNvcmRbX3RoaXMuZGF0YS5rZXldIHx8IHJlY29yZCk7XG4gICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICByZXNMaXN0LnB1c2goe1xuICAgICAgICAgICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICAgICAgICAgIHNvdXJjZTogcmVjb3JkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbGlzdCA9IHJlc0xpc3Quc2xpY2UoMCwgdGhpcy5tYXhSZXN1bHRzKTtcbiAgICAgICAgYXV0b0NvbXBsZXRlVmlldy5hZGRSZXN1bHRzVG9MaXN0KHRoaXMucmVzdWx0c0xpc3QsIGxpc3QsIHRoaXMuZGF0YS5rZXksIHRoaXMucmVzdWx0SXRlbSk7XG4gICAgICAgIGF1dG9Db21wbGV0ZVZpZXcubmF2aWdhdGlvbih0aGlzLnNlbGVjdG9yLCB0aGlzLnJlc3VsdHNMaXN0KTtcbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlnbml0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlnbml0ZShkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yO1xuICAgICAgICB2YXIgaW5wdXQgPSBhdXRvQ29tcGxldGVWaWV3LmdldElucHV0KHNlbGVjdG9yKTtcbiAgICAgICAgdmFyIHBsYWNlSG9sZGVyID0gdGhpcy5wbGFjZUhvbGRlcjtcbiAgICAgICAgdmFyIG9uU2VsZWN0aW9uID0gdGhpcy5vblNlbGVjdGlvbjtcbiAgICAgICAgaWYgKHBsYWNlSG9sZGVyKSB7XG4gICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIiwgcGxhY2VIb2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0Lm9ua2V5dXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdHNMaXN0ID0gX3RoaXMyLnJlc3VsdHNMaXN0O1xuICAgICAgICAgIHZhciBjbGVhclJlc3VsdHMgPSBhdXRvQ29tcGxldGVWaWV3LmNsZWFyUmVzdWx0cyhyZXN1bHRzTGlzdCk7XG4gICAgICAgICAgaWYgKGlucHV0LnZhbHVlLmxlbmd0aCA+IF90aGlzMi50aHJlc2hvbGQgJiYgaW5wdXQudmFsdWUucmVwbGFjZSgvIC9nLCBcIlwiKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBsaXN0ID0gX3RoaXMyLmxpc3RNYXRjaGVkUmVzdWx0cyhkYXRhKTtcbiAgICAgICAgICAgIGlmIChvblNlbGVjdGlvbikge1xuICAgICAgICAgICAgICBhdXRvQ29tcGxldGVWaWV3LmdldFNlbGVjdGlvbihzZWxlY3RvciwgcmVzdWx0c0xpc3QsIG9uU2VsZWN0aW9uLCBsaXN0LCBfdGhpczIuZGF0YS5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuICAgICAgICB2YXIgZGF0YVNyYyA9IHRoaXMuZGF0YS5zcmMoKTtcbiAgICAgICAgaWYgKGRhdGFTcmMgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgZGF0YVNyYy50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLmlnbml0ZShkYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmlnbml0ZShkYXRhU3JjKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gYXV0b0NvbXBsZXRlO1xuICB9KCk7XG5cbiAgcmV0dXJuIGF1dG9Db21wbGV0ZTtcblxufSkpKTtcbiIsIi8qKiFcbiAqIEBmaWxlT3ZlcnZpZXcgS2lja2FzcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhbmQgcGxhY2UgcG9wcGVycyBuZWFyIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50cy5cbiAqIEB2ZXJzaW9uIDEuMTQuN1xuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xudmFyIHRpbWVvdXREdXJhdGlvbiA9IDA7XG5mb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICB0aW1lb3V0RHVyYXRpb24gPSAxO1xuICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gZmFsc2U7XG4gICAgICBmbigpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBjc3MgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbiAgcmV0dXJuIHByb3BlcnR5ID8gY3NzW3Byb3BlcnR5XSA6IGNzcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQuaG9zdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY3JvbGxpbmcgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdFxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIHN3aXRjaCAoZWxlbWVudC5ub2RlTmFtZSkge1xuICAgIGNhc2UgJ0hUTUwnOlxuICAgIGNhc2UgJ0JPRFknOlxuICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5O1xuICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICByZXR1cm4gZWxlbWVudC5ib2R5O1xuICB9XG5cbiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG5cbiAgdmFyIF9nZXRTdHlsZUNvbXB1dGVkUHJvcCA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1k7XG5cbiAgaWYgKC8oYXV0b3xzY3JvbGx8b3ZlcmxheSkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG52YXIgaXNJRTExID0gaXNCcm93c2VyICYmICEhKHdpbmRvdy5NU0lucHV0TWV0aG9kQ29udGV4dCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGlzSUUxMCA9IGlzQnJvd3NlciAmJiAvTVNJRSAxMC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGlzSUVcbiAqL1xuZnVuY3Rpb24gaXNJRSh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxMSkge1xuICAgIHJldHVybiBpc0lFMTE7XG4gIH1cbiAgaWYgKHZlcnNpb24gPT09IDEwKSB7XG4gICAgcmV0dXJuIGlzSUUxMDtcbiAgfVxuICByZXR1cm4gaXNJRTExIHx8IGlzSUUxMDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvZmZzZXQgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICB2YXIgbm9PZmZzZXRQYXJlbnQgPSBpc0lFKDEwKSA/IGRvY3VtZW50LmJvZHkgOiBudWxsO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCB8fCBudWxsO1xuICAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudFxuICB3aGlsZSAob2Zmc2V0UGFyZW50ID09PSBub09mZnNldFBhcmVudCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykge1xuICAgIG9mZnNldFBhcmVudCA9IChlbGVtZW50ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDtcbiAgfVxuXG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFRILCBURCBvciBUQUJMRSBpbiBjYXNlXG4gIC8vIG5vIG9mZnNldFBhcmVudCBpcyBwcmVzZW50LCBJIGhhdGUgdGhpcyBqb2IuLi5cbiAgaWYgKFsnVEgnLCAnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQ7XG59XG5cbmZ1bmN0aW9uIGlzT2Zmc2V0Q29udGFpbmVyKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbm9kZU5hbWUgPT09ICdIVE1MJyB8fCBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkgPT09IGVsZW1lbnQ7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlXG4gKi9cbmZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBvZmZzZXQgcGFyZW50IGNvbW1vbiB0byB0aGUgdHdvIHByb3ZpZGVkIG5vZGVzXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQxXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gY29tbW9uIG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gSGVyZSB3ZSBtYWtlIHN1cmUgdG8gZ2l2ZSBhcyBcInN0YXJ0XCIgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBmaXJzdCBpbiB0aGUgRE9NXG4gIHZhciBvcmRlciA9IGVsZW1lbnQxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQyKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HO1xuICB2YXIgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XG4gIHZhciBlbmQgPSBvcmRlciA/IGVsZW1lbnQyIDogZWxlbWVudDE7XG5cbiAgLy8gR2V0IGNvbW1vbiBhbmNlc3RvciBjb250YWluZXJcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsIDApO1xuICByYW5nZS5zZXRFbmQoZW5kLCAwKTtcbiAgdmFyIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudFxuXG4gIGlmIChlbGVtZW50MSAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgJiYgZWxlbWVudDIgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIHx8IHN0YXJ0LmNvbnRhaW5zKGVuZCkpIHtcbiAgICBpZiAoaXNPZmZzZXRDb250YWluZXIoY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7XG4gICAgICByZXR1cm4gY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChjb21tb25BbmNlc3RvckNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBvbmUgb2YgdGhlIG5vZGVzIGlzIGluc2lkZSBzaGFkb3dET00sIGZpbmQgd2hpY2ggb25lXG4gIHZhciBlbGVtZW50MXJvb3QgPSBnZXRSb290KGVsZW1lbnQxKTtcbiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDFyb290Lmhvc3QsIGVsZW1lbnQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQgaW4gdGhlIGdpdmVuIHNpZGUgKHRvcCBhbmQgbGVmdClcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbW91bnQgb2Ygc2Nyb2xsZWQgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50KSB7XG4gIHZhciBzaWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAndG9wJztcblxuICB2YXIgdXBwZXJTaWRlID0gc2lkZSA9PT0gJ3RvcCcgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JztcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBzY3JvbGxpbmdFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgaHRtbDtcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudFt1cHBlclNpZGVdO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTtcbn1cblxuLypcbiAqIFN1bSBvciBzdWJ0cmFjdCB0aGUgZWxlbWVudCBzY3JvbGwgdmFsdWVzIChsZWZ0IGFuZCB0b3ApIGZyb20gYSBnaXZlbiByZWN0IG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgLSBSZWN0IG9iamVjdCB5b3Ugd2FudCB0byBjaGFuZ2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCBmcm9tIHRoZSBmdW5jdGlvbiByZWFkcyB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY3QgLSBUaGUgbW9kaWZpZXIgcmVjdCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50KSB7XG4gIHZhciBzdWJ0cmFjdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gIHZhciBtb2RpZmllciA9IHN1YnRyYWN0ID8gLTEgOiAxO1xuICByZWN0LnRvcCArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZXR1cm4gcmVjdDtcbn1cblxuLypcbiAqIEhlbHBlciB0byBkZXRlY3QgYm9yZGVycyBvZiBhIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzIC0gYHhgIG9yIGB5YFxuICogQHJldHVybiB7bnVtYmVyfSBib3JkZXJzIC0gVGhlIGJvcmRlcnMgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXhpc1xuICovXG5cbmZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcywgYXhpcykge1xuICB2YXIgc2lkZUEgPSBheGlzID09PSAneCcgPyAnTGVmdCcgOiAnVG9wJztcbiAgdmFyIHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJztcblxuICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQSArICdXaWR0aCddLCAxMCkgKyBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVCICsgJ1dpZHRoJ10sIDEwKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2l6ZShheGlzLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSB7XG4gIHJldHVybiBNYXRoLm1heChib2R5WydvZmZzZXQnICsgYXhpc10sIGJvZHlbJ3Njcm9sbCcgKyBheGlzXSwgaHRtbFsnY2xpZW50JyArIGF4aXNdLCBodG1sWydvZmZzZXQnICsgYXhpc10sIGh0bWxbJ3Njcm9sbCcgKyBheGlzXSwgaXNJRSgxMCkgPyBwYXJzZUludChodG1sWydvZmZzZXQnICsgYXhpc10pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdUb3AnIDogJ0xlZnQnKV0pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldKSA6IDApO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTaXplcyhkb2N1bWVudCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSUUoMTApICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFNpemUoJ0hlaWdodCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICAgIHdpZHRoOiBnZXRTaXplKCdXaWR0aCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpXG4gIH07XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywge1xuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgdHJ5IHtcbiAgICBpZiAoaXNJRSgxMCkpIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoZWxlbWVudC5vd25lckRvY3VtZW50KSA6IHt9O1xuICB2YXIgd2lkdGggPSBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC5yaWdodCAtIHJlc3VsdC5sZWZ0O1xuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5ib3R0b20gLSByZXN1bHQudG9wO1xuXG4gIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIGlzSUUxMCA9IGlzSUUoMTApO1xuICB2YXIgaXNIVE1MID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCc7XG4gIHZhciBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGNoaWxkcmVuKTtcblxuICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIHZhciBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoLCAxMCk7XG4gIHZhciBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgsIDEwKTtcblxuICAvLyBJbiBjYXNlcyB3aGVyZSB0aGUgcGFyZW50IGlzIGZpeGVkLCB3ZSBtdXN0IGlnbm9yZSBuZWdhdGl2ZSBzY3JvbGwgaW4gb2Zmc2V0IGNhbGNcbiAgaWYgKGZpeGVkUG9zaXRpb24gJiYgaXNIVE1MKSB7XG4gICAgcGFyZW50UmVjdC50b3AgPSBNYXRoLm1heChwYXJlbnRSZWN0LnRvcCwgMCk7XG4gICAgcGFyZW50UmVjdC5sZWZ0ID0gTWF0aC5tYXgocGFyZW50UmVjdC5sZWZ0LCAwKTtcbiAgfVxuICB2YXIgb2Zmc2V0cyA9IGdldENsaWVudFJlY3Qoe1xuICAgIHRvcDogY2hpbGRyZW5SZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wIC0gYm9yZGVyVG9wV2lkdGgsXG4gICAgbGVmdDogY2hpbGRyZW5SZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgLSBib3JkZXJMZWZ0V2lkdGgsXG4gICAgd2lkdGg6IGNoaWxkcmVuUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IGNoaWxkcmVuUmVjdC5oZWlnaHRcbiAgfSk7XG4gIG9mZnNldHMubWFyZ2luVG9wID0gMDtcbiAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gMDtcblxuICAvLyBTdWJ0cmFjdCBtYXJnaW5zIG9mIGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGl0J3MgYmVpbmcgdXNlZCBhcyBwYXJlbnRcbiAgLy8gd2UgZG8gdGhpcyBvbmx5IG9uIEhUTUwgYmVjYXVzZSBpdCdzIHRoZSBvbmx5IGVsZW1lbnQgdGhhdCBiZWhhdmVzXG4gIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluXG4gIC8vIHRoZSBib3ggb2YgdGhlIGRvY3VtZW50RWxlbWVudCwgaW4gdGhlIG90aGVyIGNhc2VzIG5vdC5cbiAgaWYgKCFpc0lFMTAgJiYgaXNIVE1MKSB7XG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCwgMTApO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCwgMTApO1xuXG4gICAgb2Zmc2V0cy50b3AgLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5sZWZ0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG4gICAgb2Zmc2V0cy5yaWdodCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuXG4gICAgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtXG4gICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdDtcbiAgfVxuXG4gIGlmIChpc0lFMTAgJiYgIWZpeGVkUG9zaXRpb24gPyBwYXJlbnQuY29udGFpbnMoc2Nyb2xsUGFyZW50KSA6IHBhcmVudCA9PT0gc2Nyb2xsUGFyZW50ICYmIHNjcm9sbFBhcmVudC5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XG4gICAgb2Zmc2V0cyA9IGluY2x1ZGVTY3JvbGwob2Zmc2V0cywgcGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUoZWxlbWVudCkge1xuICB2YXIgZXhjbHVkZVNjcm9sbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoZWxlbWVudCwgaHRtbCk7XG4gIHZhciB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcblxuICB2YXIgc2Nyb2xsVG9wID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCkgOiAwO1xuICB2YXIgc2Nyb2xsTGVmdCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwsICdsZWZ0JykgOiAwO1xuXG4gIHZhciBvZmZzZXQgPSB7XG4gICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvIFwiaXNGaXhlZD9cIlxuICovXG5mdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIHBhcmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGlzRml4ZWQocGFyZW50Tm9kZSk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IHBhcmVudCBvZiBhbiBlbGVtZW50IHRoYXQgaGFzIGEgdHJhbnNmb3JtZWQgcHJvcGVydHkgZGVmaW5lZFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gZmlyc3QgdHJhbnNmb3JtZWQgcGFyZW50IG9yIGRvY3VtZW50RWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgaXNJRSgpKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgZWwgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIHdoaWxlIChlbCAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWwsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnKSB7XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBlbCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59XG5cbi8qKlxuICogQ29tcHV0ZWQgdGhlIGJvdW5kYXJpZXMgbGltaXRzIGFuZCByZXR1cm4gdGhlbVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudCAtIEVsZW1lbnQgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZml4ZWRQb3NpdGlvbiAtIElzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuXG4gIHZhciBib3VuZGFyaWVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTtcblxuICAvLyBIYW5kbGUgdmlld3BvcnQgY2FzZVxuICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd2aWV3cG9ydCcpIHtcbiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gSGFuZGxlIG90aGVyIGNhc2VzIGJhc2VkIG9uIERPTSBlbGVtZW50IHVzZWQgYXMgYm91bmRhcmllc1xuICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDtcbiAgICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKHJlZmVyZW5jZSkpO1xuICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xuICAgIH1cblxuICAgIHZhciBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGJvdW5kYXJpZXNOb2RlLCBvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuXG4gICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgdmFyIF9nZXRXaW5kb3dTaXplcyA9IGdldFdpbmRvd1NpemVzKHBvcHBlci5vd25lckRvY3VtZW50KSxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0V2luZG93U2l6ZXMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xuXG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIHBhZGRpbmcgPSBwYWRkaW5nIHx8IDA7XG4gIHZhciBpc1BhZGRpbmdOdW1iZXIgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ251bWJlcic7XG4gIGJvdW5kYXJpZXMubGVmdCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5sZWZ0IHx8IDA7XG4gIGJvdW5kYXJpZXMudG9wICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnRvcCB8fCAwO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnJpZ2h0IHx8IDA7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmJvdHRvbSB8fCAwO1xuXG4gIHJldHVybiBib3VuZGFyaWVzO1xufVxuXG5mdW5jdGlvbiBnZXRBcmVhKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gIHJldHVybiB3aWR0aCAqIGhlaWdodDtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IHVzZWQgdG8gdHJhbnNmb3JtIHRoZSBgYXV0b2AgcGxhY2VtZW50IHRvIHRoZSBwbGFjZW1lbnQgd2l0aCBtb3JlXG4gKiBhdmFpbGFibGUgc3BhY2UuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChwbGFjZW1lbnQsIHJlZlJlY3QsIHBvcHBlciwgcmVmZXJlbmNlLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgcGFkZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDtcblxuICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2F1dG8nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgdmFyIHJlY3RzID0ge1xuICAgIHRvcDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlZlJlY3QudG9wIC0gYm91bmRhcmllcy50b3BcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy5yaWdodCAtIHJlZlJlY3QucmlnaHQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tXG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICB3aWR0aDogcmVmUmVjdC5sZWZ0IC0gYm91bmRhcmllcy5sZWZ0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH1cbiAgfTtcblxuICB2YXIgc29ydGVkQXJlYXMgPSBPYmplY3Qua2V5cyhyZWN0cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAga2V5OiBrZXlcbiAgICB9LCByZWN0c1trZXldLCB7XG4gICAgICBhcmVhOiBnZXRBcmVhKHJlY3RzW2tleV0pXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5hcmVhIC0gYS5hcmVhO1xuICB9KTtcblxuICB2YXIgZmlsdGVyZWRBcmVhcyA9IHNvcnRlZEFyZWFzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gX3JlZjIuaGVpZ2h0O1xuICAgIHJldHVybiB3aWR0aCA+PSBwb3BwZXIuY2xpZW50V2lkdGggJiYgaGVpZ2h0ID49IHBvcHBlci5jbGllbnRIZWlnaHQ7XG4gIH0pO1xuXG4gIHZhciBjb21wdXRlZFBsYWNlbWVudCA9IGZpbHRlcmVkQXJlYXMubGVuZ3RoID4gMCA/IGZpbHRlcmVkQXJlYXNbMF0ua2V5IDogc29ydGVkQXJlYXNbMF0ua2V5O1xuXG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICByZXR1cm4gY29tcHV0ZWRQbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtFbGVtZW50fSBmaXhlZFBvc2l0aW9uIC0gaXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG5cbiAgdmFyIGNvbW1vbk9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTtcbiAgcmV0dXJuIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShyZWZlcmVuY2UsIGNvbW1vbk9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20gfHwgMCk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0IHx8IDApO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICB2YXIgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9O1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzIC0gdGhlIHJlZmVyZW5jZSBvZmZzZXRzICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UG9wcGVyT2Zmc2V0cyhwb3BwZXIsIHJlZmVyZW5jZU9mZnNldHMsIHBsYWNlbWVudCkge1xuICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICAvLyBHZXQgcG9wcGVyIG5vZGUgc2l6ZXNcbiAgdmFyIHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHtcbiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0XG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICB2YXIgaXNIb3JpeiA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBtYWluU2lkZSA9IGlzSG9yaXogPyAndG9wJyA6ICdsZWZ0JztcbiAgdmFyIHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzZWNvbmRhcnlNZWFzdXJlbWVudCA9ICFpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIHBvcHBlck9mZnNldHNbbWFpblNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gKyByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLSBwb3BwZXJSZWN0W21lYXN1cmVtZW50XSAvIDI7XG4gIGlmIChwbGFjZW1lbnQgPT09IHNlY29uZGFyeVNpZGUpIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuXG4vKipcbiAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kKGFyciwgY2hlY2spIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spO1xuICB9XG5cbiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGBcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChmdW5jdGlvbiAoY3VyKSB7XG4gICAgICByZXR1cm4gY3VyW3Byb3BdID09PSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHVzZSBgZmluZGAgKyBgaW5kZXhPZmAgaWYgYGZpbmRJbmRleGAgaXNuJ3Qgc3VwcG9ydGVkXG4gIHZhciBtYXRjaCA9IGZpbmQoYXJyLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXSA9PT0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpO1xufVxuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5mdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIHZhciBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZCA/IG1vZGlmaWVycyA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fVxuICB9O1xuXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyh0aGlzLnN0YXRlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudCh0aGlzLm9wdGlvbnMucGxhY2VtZW50LCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcbiAgZGF0YS5vcmlnaW5hbFBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gIGRhdGEucG9zaXRpb25GaXhlZCA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkO1xuXG4gIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZSc7XG5cbiAgLy8gcnVuIHRoZSBtb2RpZmllcnNcbiAgZGF0YSA9IHJ1bk1vZGlmaWVycyh0aGlzLm1vZGlmaWVycywgZGF0YSk7XG5cbiAgLy8gdGhlIGZpcnN0IGB1cGRhdGVgIHdpbGwgY2FsbCBgb25DcmVhdGVgIGNhbGxiYWNrXG4gIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcbiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQ7XG4gICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZpeGVkIHN1cHBvcnRlZCBwcm9wZXJ0eSBuYW1lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkgKGNhbWVsQ2FzZSlcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByZWZpeGVkIHByb3BlcnR5IChjYW1lbENhc2Ugb3IgUGFzY2FsQ2FzZSwgZGVwZW5kaW5nIG9uIHRoZSB2ZW5kb3IgcHJlZml4KVxuICovXG5mdW5jdGlvbiBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUocHJvcGVydHkpIHtcbiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIHZhciB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgdmFyIHRvQ2hlY2sgPSBwcmVmaXggPyAnJyArIHByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgcG9wcGVyLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgYG9uVXBkYXRlYCBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTnVtZXJpYyhuKSB7XG4gIHJldHVybiBuICE9PSAnJyAmJiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5cbi8qKlxuICogU2V0IHRoZSBzdHlsZSB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBzdHlsZSB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdW5pdCA9ICcnO1xuICAgIC8vIGFkZCB1bml0IGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljIGFuZCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PSAtMSAmJiBpc051bWVyaWMoc3R5bGVzW3Byb3BdKSkge1xuICAgICAgdW5pdCA9ICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGF0dHJpYnV0ZXMgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgYXR0cmlidXRlcyB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFBvcHBlci5qcyBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGVPbkxvYWQocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgc3RhdGUpIHtcbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIHZhciByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIHZhciBwbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChvcHRpb25zLnBsYWNlbWVudCwgcmVmZXJlbmNlT2Zmc2V0cywgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnLCBwbGFjZW1lbnQpO1xuXG4gIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2VcbiAgLy8gd2l0aG91dCB0aGUgcG9zaXRpb24gYXBwbGllZCB3ZSBjYW4ndCBndWFyYW50ZWUgY29ycmVjdCBjb21wdXRhdGlvbnNcbiAgc2V0U3R5bGVzKHBvcHBlciwgeyBwb3NpdGlvbjogb3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZScgfSk7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IHNob3VsZFJvdW5kIC0gSWYgdGhlIG9mZnNldHMgc2hvdWxkIGJlIHJvdW5kZWQgYXQgYWxsXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcG9wcGVyJ3MgcG9zaXRpb24gb2Zmc2V0cyByb3VuZGVkXG4gKlxuICogVGhlIHRhbGUgb2YgcGl4ZWwtcGVyZmVjdCBwb3NpdGlvbmluZy4gSXQncyBzdGlsbCBub3QgMTAwJSBwZXJmZWN0LCBidXQgYXNcbiAqIGdvb2QgYXMgaXQgY2FuIGJlIHdpdGhpbiByZWFzb24uXG4gKiBEaXNjdXNzaW9uIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL3B1bGwvNzE1XG4gKlxuICogTG93IERQSSBzY3JlZW5zIGNhdXNlIGEgcG9wcGVyIHRvIGJlIGJsdXJyeSBpZiBub3QgdXNpbmcgZnVsbCBwaXhlbHMgKFNhZmFyaVxuICogYXMgd2VsbCBvbiBIaWdoIERQSSBzY3JlZW5zKS5cbiAqXG4gKiBGaXJlZm94IHByZWZlcnMgbm8gcm91bmRpbmcgZm9yIHBvc2l0aW9uaW5nIGFuZCBkb2VzIG5vdCBoYXZlIGJsdXJyaW5lc3Mgb25cbiAqIGhpZ2ggRFBJIHNjcmVlbnMuXG4gKlxuICogT25seSBob3Jpem9udGFsIHBsYWNlbWVudCBhbmQgbGVmdC9yaWdodCB2YWx1ZXMgbmVlZCB0byBiZSBjb25zaWRlcmVkLlxuICovXG5mdW5jdGlvbiBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCBzaG91bGRSb3VuZCkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciByb3VuZCA9IE1hdGgucm91bmQsXG4gICAgICBmbG9vciA9IE1hdGguZmxvb3I7XG5cbiAgdmFyIG5vUm91bmQgPSBmdW5jdGlvbiBub1JvdW5kKHYpIHtcbiAgICByZXR1cm4gdjtcbiAgfTtcblxuICB2YXIgcmVmZXJlbmNlV2lkdGggPSByb3VuZChyZWZlcmVuY2Uud2lkdGgpO1xuICB2YXIgcG9wcGVyV2lkdGggPSByb3VuZChwb3BwZXIud2lkdGgpO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihkYXRhLnBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgaXNWYXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5pbmRleE9mKCctJykgIT09IC0xO1xuICB2YXIgc2FtZVdpZHRoUGFyaXR5ID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSBwb3BwZXJXaWR0aCAlIDI7XG4gIHZhciBib3RoT2RkV2lkdGggPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IDEgJiYgcG9wcGVyV2lkdGggJSAyID09PSAxO1xuXG4gIHZhciBob3Jpem9udGFsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IGlzVmVydGljYWwgfHwgaXNWYXJpYXRpb24gfHwgc2FtZVdpZHRoUGFyaXR5ID8gcm91bmQgOiBmbG9vcjtcbiAgdmFyIHZlcnRpY2FsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IHJvdW5kO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogaG9yaXpvbnRhbFRvSW50ZWdlcihib3RoT2RkV2lkdGggJiYgIWlzVmFyaWF0aW9uICYmIHNob3VsZFJvdW5kID8gcG9wcGVyLmxlZnQgLSAxIDogcG9wcGVyLmxlZnQpLFxuICAgIHRvcDogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIuYm90dG9tKSxcbiAgICByaWdodDogaG9yaXpvbnRhbFRvSW50ZWdlcihwb3BwZXIucmlnaHQpXG4gIH07XG59XG5cbnZhciBpc0ZpcmVmb3ggPSBpc0Jyb3dzZXIgJiYgL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnO1xuICB9KS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnKTtcbiAgfVxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uXG4gIH07XG5cbiAgdmFyIG9mZnNldHMgPSBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA8IDIgfHwgIWlzRmlyZWZveCk7XG5cbiAgdmFyIHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgc2lkZUIgPSB5ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAvLyBpZiBncHVBY2NlbGVyYXRpb24gaXMgc2V0IHRvIGB0cnVlYCBhbmQgdHJhbnNmb3JtIGlzIHN1cHBvcnRlZCxcbiAgLy8gIHdlIHVzZSBgdHJhbnNsYXRlM2RgIHRvIGFwcGx5IHRoZSBwb3NpdGlvbiB0byB0aGUgcG9wcGVyIHdlXG4gIC8vIGF1dG9tYXRpY2FsbHkgdXNlIHRoZSBzdXBwb3J0ZWQgcHJlZml4ZWQgdmVyc2lvbiBpZiBuZWVkZWRcbiAgdmFyIHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIHZhciBsZWZ0ID0gdm9pZCAwLFxuICAgICAgdG9wID0gdm9pZCAwO1xuICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7XG4gICAgLy8gd2hlbiBvZmZzZXRQYXJlbnQgaXMgPGh0bWw+IHRoZSBwb3NpdGlvbmluZyBpcyByZWxhdGl2ZSB0byB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gKGV4Y2x1ZGluZyB0aGUgc2Nyb2xsYmFyKVxuICAgIC8vIGFuZCBub3QgdGhlIGJvdHRvbSBvZiB0aGUgaHRtbCBlbGVtZW50XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0cy50b3A7XG4gIH1cbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudC5jbGllbnRXaWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50UmVjdC53aWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7XG4gIH0pO1xuXG4gIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyO1xuICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcbiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJztcbiAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XG5cbiAgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29ya1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXJcbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXG4gICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlXG4gICAgaWYgKCFkYXRhLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnO1xuICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVuY3Rpb25cbiAgLy9cblxuICAvLyB0b3AvbGVmdCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUgPCBwb3BwZXJbc2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09IHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpO1xuICB9XG4gIC8vIGJvdHRvbS9yaWdodCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdICs9IHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcbiAgfVxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIHZhciBjZW50ZXIgPSByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbGVuXSAvIDIgLSBhcnJvd0VsZW1lbnRTaXplIC8gMjtcblxuICAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHNcbiAgLy8gdGFrZSBwb3BwZXIgbWFyZ2luIGluIGFjY291bnQgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHRoaXMgaW5mbyBhdmFpbGFibGVcbiAgdmFyIGNzcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbJ21hcmdpbicgKyBzaWRlQ2FwaXRhbGl6ZWRdLCAxMCk7XG4gIHZhciBwb3BwZXJCb3JkZXJTaWRlID0gcGFyc2VGbG9hdChjc3NbJ2JvcmRlcicgKyBzaWRlQ2FwaXRhbGl6ZWQgKyAnV2lkdGgnXSwgMTApO1xuICB2YXIgc2lkZVZhbHVlID0gY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xuICBpZiAodmFyaWF0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiAnc3RhcnQnO1xuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAnZW5kJztcbiAgfVxuICByZXR1cm4gdmFyaWF0aW9uO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgYWNjZXB0ZWQgcGxhY2VtZW50cyB0byB1c2UgYXMgdmFsdWVzIG9mIHRoZSBgcGxhY2VtZW50YCBvcHRpb24uPGJyIC8+XG4gKiBWYWxpZCBwbGFjZW1lbnRzIGFyZTpcbiAqIC0gYGF1dG9gXG4gKiAtIGB0b3BgXG4gKiAtIGByaWdodGBcbiAqIC0gYGJvdHRvbWBcbiAqIC0gYGxlZnRgXG4gKlxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XG4gKiAtIGAtc3RhcnRgXG4gKiAtIGAtZW5kYFxuICpcbiAqIFZhcmlhdGlvbnMgYXJlIGludGVycHJldGVkIGVhc2lseSBpZiB5b3UgdGhpbmsgb2YgdGhlbSBhcyB0aGUgbGVmdCB0byByaWdodFxuICogd3JpdHRlbiBsYW5ndWFnZXMuIEhvcml6b250YWxseSAoYHRvcGAgYW5kIGBib3R0b21gKSwgYHN0YXJ0YCBpcyBsZWZ0IGFuZCBgZW5kYFxuICogaXMgcmlnaHQuPGJyIC8+XG4gKiBWZXJ0aWNhbGx5IChgbGVmdGAgYW5kIGByaWdodGApLCBgc3RhcnRgIGlzIHRvcCBhbmQgYGVuZGAgaXMgYm90dG9tLlxuICpcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxuICogLSBgdG9wLWVuZGAgKG9uIHRvcCBvZiByZWZlcmVuY2UsIHJpZ2h0IGFsaWduZWQpXG4gKiAtIGByaWdodC1zdGFydGAgKG9uIHJpZ2h0IG9mIHJlZmVyZW5jZSwgdG9wIGFsaWduZWQpXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxuICogLSBgYXV0by1lbmRgIChvbiB0aGUgc2lkZSB3aXRoIG1vcmUgc3BhY2UgYXZhaWxhYmxlLCBhbGlnbm1lbnQgZGVwZW5kcyBieSBwbGFjZW1lbnQpXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge0FycmF5fVxuICogQGVudW0ge1N0cmluZ31cbiAqIEByZWFkb25seVxuICogQG1ldGhvZCBwbGFjZW1lbnRzXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBwbGFjZW1lbnRzID0gWydhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYXV0by1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCcsICd0b3AtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3JpZ2h0LWVuZCcsICdib3R0b20tZW5kJywgJ2JvdHRvbScsICdib3R0b20tc3RhcnQnLCAnbGVmdC1lbmQnLCAnbGVmdCcsICdsZWZ0LXN0YXJ0J107XG5cbi8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYFxudmFyIHZhbGlkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuc2xpY2UoMyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHNcbiAqIGNsb2Nrd2lzZSAob3IgY291bnRlci1jbG9ja3dpc2UpLlxuICpcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxuICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlXG4gKiBAcmV0dXJucyB7QXJyYXl9IHBsYWNlbWVudHMgaW5jbHVkaW5nIHRoZWlyIHZhcmlhdGlvbnNcbiAqL1xuZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCkge1xuICB2YXIgY291bnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTtcbiAgdmFyIGFyciA9IHZhbGlkUGxhY2VtZW50cy5zbGljZShpbmRleCArIDEpLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTtcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xufVxuXG52YXIgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJ1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykge1xuICAvLyBpZiBgaW5uZXJgIG1vZGlmaWVyIGlzIGVuYWJsZWQsIHdlIGNhbid0IHVzZSB0aGUgYGZsaXBgIG1vZGlmaWVyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2lubmVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGlmIChkYXRhLmZsaXBwZWQgJiYgZGF0YS5wbGFjZW1lbnQgPT09IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQpIHtcbiAgICAvLyBzZWVtcyBsaWtlIGZsaXAgaXMgdHJ5aW5nIHRvIGxvb3AsIHByb2JhYmx5IHRoZXJlJ3Mgbm90IGVub3VnaCBzcGFjZSBvbiBhbnkgb2YgdGhlIGZsaXBwYWJsZSBzaWRlc1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJztcblxuICB2YXIgZmxpcE9yZGVyID0gW107XG5cbiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7XG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcbiAgICAgIGZsaXBPcmRlciA9IFtwbGFjZW1lbnQsIHBsYWNlbWVudE9wcG9zaXRlXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZsaXBPcmRlciA9IG9wdGlvbnMuYmVoYXZpb3I7XG4gIH1cblxuICBmbGlwT3JkZXIuZm9yRWFjaChmdW5jdGlvbiAoc3RlcCwgaW5kZXgpIHtcbiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgICBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG4gICAgdmFyIHJlZk9mZnNldHMgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuXG4gICAgLy8gdXNpbmcgZmxvb3IgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgbWF5IGNvbnRhaW4gZGVjaW1hbHMgd2UgYXJlIG5vdCBnb2luZyB0byBjb25zaWRlciBoZXJlXG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICB2YXIgb3ZlcmxhcHNSZWYgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKHJlZk9mZnNldHMubGVmdCkgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihyZWZPZmZzZXRzLnJpZ2h0KSB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKHJlZk9mZnNldHMudG9wKSB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKHJlZk9mZnNldHMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NMZWZ0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKGJvdW5kYXJpZXMubGVmdCk7XG4gICAgdmFyIG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTtcbiAgICB2YXIgb3ZlcmZsb3dzVG9wID0gZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IoYm91bmRhcmllcy50b3ApO1xuICAgIHZhciBvdmVyZmxvd3NCb3R0b20gPSBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihib3VuZGFyaWVzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzQm91bmRhcmllcyA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tO1xuXG4gICAgLy8gZmxpcCB0aGUgdmFyaWF0aW9uIGlmIHJlcXVpcmVkXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uID0gISFvcHRpb25zLmZsaXBWYXJpYXRpb25zICYmIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NSaWdodCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzVG9wIHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzQm90dG9tKTtcblxuICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzIHx8IGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgIC8vIHRoaXMgYm9vbGVhbiB0byBkZXRlY3QgYW55IGZsaXAgbG9vcFxuICAgICAgZGF0YS5mbGlwcGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gZmxpcE9yZGVyW2luZGV4ICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAgIHZhcmlhdGlvbiA9IGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRhdGEucGxhY2VtZW50ID0gcGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcblxuICAgICAgLy8gdGhpcyBvYmplY3QgY29udGFpbnMgYHBvc2l0aW9uYCwgd2Ugd2FudCB0byBwcmVzZXJ2ZSBpdCBhbG9uZyB3aXRoXG4gICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmVcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLnBvcHBlciwgZ2V0UG9wcGVyT2Zmc2V0cyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpKTtcblxuICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGtlZXBUb2dldGhlcihkYXRhKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgaWYgKHBvcHBlcltzaWRlXSA8IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSAtIHBvcHBlclttZWFzdXJlbWVudF07XG4gIH1cbiAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtzaWRlXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gc3RyIC0gVmFsdWUgKyB1bml0IHN0cmluZ1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IG1lYXN1cmVtZW50IC0gYGhlaWdodGAgb3IgYHdpZHRoYFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAcmV0dXJucyB7TnVtYmVyfFN0cmluZ31cbiAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZFxuICovXG5mdW5jdGlvbiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpIHtcbiAgLy8gc2VwYXJhdGUgdmFsdWUgZnJvbSB1bml0XG4gIHZhciBzcGxpdCA9IHN0ci5tYXRjaCgvKCg/OlxcLXxcXCspP1xcZCpcXC4/XFxkKikoLiopLyk7XG4gIHZhciB2YWx1ZSA9ICtzcGxpdFsxXTtcbiAgdmFyIHVuaXQgPSBzcGxpdFsyXTtcblxuICAvLyBJZiBpdCdzIG5vdCBhIG51bWJlciBpdCdzIGFuIG9wZXJhdG9yLCBJIGd1ZXNzXG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgaWYgKHVuaXQuaW5kZXhPZignJScpID09PSAwKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB2b2lkIDA7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICclcCc6XG4gICAgICAgIGVsZW1lbnQgPSBwb3BwZXJPZmZzZXRzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyUnOlxuICAgICAgY2FzZSAnJXInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZWxlbWVudCA9IHJlZmVyZW5jZU9mZnNldHM7XG4gICAgfVxuXG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0KGVsZW1lbnQpO1xuICAgIHJldHVybiByZWN0W21lYXN1cmVtZW50XSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3Jykge1xuICAgIC8vIGlmIGlzIGEgdmggb3IgdncsIHdlIGNhbGN1bGF0ZSB0aGUgc2l6ZSBiYXNlZCBvbiB0aGUgdmlld3BvcnRcbiAgICB2YXIgc2l6ZSA9IHZvaWQgMDtcbiAgICBpZiAodW5pdCA9PT0gJ3ZoJykge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gICAgfVxuICAgIHJldHVybiBzaXplIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgaXMgYW4gZXhwbGljaXQgcGl4ZWwgdW5pdCwgd2UgZ2V0IHJpZCBvZiB0aGUgdW5pdCBhbmQga2VlcCB0aGUgdmFsdWVcbiAgICAvLyBpZiBpcyBhbiBpbXBsaWNpdCB1bml0LCBpdCdzIHB4LCBhbmQgd2UgcmV0dXJuIGp1c3QgdGhlIHZhbHVlXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYW4gYG9mZnNldGAgc3RyaW5nIHRvIGV4dHJhcG9sYXRlIGB4YCBhbmQgYHlgIG51bWVyaWMgb2Zmc2V0cy5cbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBvZmZzZXRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IGJhc2VQbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtBcnJheX0gYSB0d28gY2VsbHMgYXJyYXkgd2l0aCB4IGFuZCB5IG9mZnNldHMgaW4gbnVtYmVyc1xuICovXG5mdW5jdGlvbiBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMsIGJhc2VQbGFjZW1lbnQpIHtcbiAgdmFyIG9mZnNldHMgPSBbMCwgMF07XG5cbiAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoXG4gIC8vIGluIHRoaXMgd2F5IHRoZSBmaXJzdCBvZmZzZXQgd2lsbCB1c2UgYW4gYXhpcyBhbmQgdGhlIHNlY29uZCBvbmVcbiAgLy8gd2lsbCB1c2UgdGhlIG90aGVyIG9uZVxuICB2YXIgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgLy8gU3BsaXQgdGhlIG9mZnNldCBzdHJpbmcgdG8gb2J0YWluIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcbiAgdmFyIGZyYWdtZW50cyA9IG9mZnNldC5zcGxpdCgvKFxcK3xcXC0pLykubWFwKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcudHJpbSgpO1xuICB9KTtcblxuICAvLyBEZXRlY3QgaWYgdGhlIG9mZnNldCBzdHJpbmcgY29udGFpbnMgYSBwYWlyIG9mIHZhbHVlcyBvciBhIHNpbmdsZSBvbmVcbiAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2VcbiAgdmFyIGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihmaW5kKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy5zZWFyY2goLyx8XFxzLykgIT09IC0xO1xuICB9KSk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpO1xuICB9XG5cbiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlXG4gIC8vIHRoZW0gYnkgb2ZzZXQgWCBhbmQgWS5cbiAgdmFyIHNwbGl0UmVnZXggPSAvXFxzKixcXHMqfFxccysvO1xuICB2YXIgb3BzID0gZGl2aWRlciAhPT0gLTEgPyBbZnJhZ21lbnRzLnNsaWNlKDAsIGRpdmlkZXIpLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpKV0gOiBbZnJhZ21lbnRzXTtcblxuICAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9uc1xuICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICAvLyBNb3N0IG9mIHRoZSB1bml0cyByZWx5IG9uIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgcG9wcGVyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodCkgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgcmV0dXJuIG9wXG4gICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdXG4gICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IHRydWU7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gKz0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICB9XG4gICAgfSwgW10pXG4gICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7XG4gICAgICByZXR1cm4gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICBvcC5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnLCBpbmRleDIpIHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIG9mZnNldChkYXRhLCBfcmVmKSB7XG4gIHZhciBvZmZzZXQgPSBfcmVmLm9mZnNldDtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LFxuICAgICAgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICB2YXIgb2Zmc2V0cyA9IHZvaWQgMDtcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBib3VuZGFyaWVzRWxlbWVudCA9IG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcblxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xuICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG9cbiAgLy8gYXZvaWQgdG8gbWFrZSB0aGlzIG1vZGlmaWVyIGNvbXBsZXRlbHkgdXNlbGVzcyBhbmQgbG9vayBsaWtlIGJyb2tlblxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpO1xuICB9XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc2V0cyB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gc28gdGhhdCB0aGUgZG9jdW1lbnQgc2l6ZSBjYW4gYmUgY2FsY3VsYXRlZCBleGNsdWRpbmdcbiAgLy8gdGhlIHNpemUgb2YgdGhlIHBvcHBlciBlbGVtZW50IGl0c2VsZlxuICB2YXIgdHJhbnNmb3JtUHJvcCA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG4gIHZhciBwb3BwZXJTdHlsZXMgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5zdHlsZTsgLy8gYXNzaWdubWVudCB0byBoZWxwIG1pbmlmaWNhdGlvblxuICB2YXIgdG9wID0gcG9wcGVyU3R5bGVzLnRvcCxcbiAgICAgIGxlZnQgPSBwb3BwZXJTdHlsZXMubGVmdCxcbiAgICAgIHRyYW5zZm9ybSA9IHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXTtcblxuICBwb3BwZXJTdHlsZXMudG9wID0gJyc7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gJyc7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9ICcnO1xuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBzdHlsZSBwcm9wZXJ0aWVzIGFmdGVyIHRoZSBvZmZzZXRzIGhhdmUgYmVlbiBjb21wdXRlZFxuICBwb3BwZXJTdHlsZXMudG9wID0gdG9wO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9IGxlZnQ7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybTtcblxuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIHZhciBvcmRlciA9IG9wdGlvbnMucHJpb3JpdHk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIHZhciBjaGVjayA9IHtcbiAgICBwcmltYXJ5OiBmdW5jdGlvbiBwcmltYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW3BsYWNlbWVudF07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPCBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBwbGFjZW1lbnQsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNlY29uZGFyeTogZnVuY3Rpb24gc2Vjb25kYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIG1haW5TaWRlID0gcGxhY2VtZW50ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbbWFpblNpZGVdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihwb3BwZXJbbWFpblNpZGVdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0gLSAocGxhY2VtZW50ID09PSAncmlnaHQnID8gcG9wcGVyLndpZHRoIDogcG9wcGVyLmhlaWdodCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBtYWluU2lkZSwgdmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICB2YXIgc2lkZSA9IFsnbGVmdCcsICd0b3AnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSc7XG4gICAgcG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgY2hlY2tbc2lkZV0ocGxhY2VtZW50KSk7XG4gIH0pO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHNoaWZ0KGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgc2hpZnR2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXJcbiAgaWYgKHNoaWZ0dmFyaWF0aW9uKSB7XG4gICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcjtcblxuICAgIHZhciBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICAgIHZhciBzaGlmdE9mZnNldHMgPSB7XG4gICAgICBzdGFydDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSksXG4gICAgICBlbmQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbWVhc3VyZW1lbnRdIC0gcG9wcGVyW21lYXN1cmVtZW50XSlcbiAgICB9O1xuXG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIHNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBoaWRlKGRhdGEpIHtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdoaWRlJywgJ3ByZXZlbnRPdmVyZmxvdycpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciBib3VuZCA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgfSkuYm91bmRhcmllcztcblxuICBpZiAocmVmUmVjdC5ib3R0b20gPCBib3VuZC50b3AgfHwgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHwgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHwgcmVmUmVjdC5yaWdodCA8IGJvdW5kLmxlZnQpIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IGZhbHNlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNIb3JpeiA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9IHJlZmVyZW5jZVtiYXNlUGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xuXG4gIGRhdGEucGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZFxuICogdG8gaXRzIGBmbmAgcHJvcGVydHkuPGJyIC8+XG4gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgb24gZWFjaCB1cGRhdGUsIHRoaXMgbWVhbnMgdGhhdCB5b3UgbXVzdFxuICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLlxuICpcbiAqIEBmdW5jdGlvbiBNb2RpZmllckZuXG4gKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge2RhdGFPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuXG4vKipcbiAqIE1vZGlmaWVycyBhcmUgcGx1Z2lucyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvciBvZiB5b3VyIHBvcHBlcnMuPGJyIC8+XG4gKiBQb3BwZXIuanMgdXNlcyBhIHNldCBvZiA5IG1vZGlmaWVycyB0byBwcm92aWRlIGFsbCB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzXG4gKiBuZWVkZWQgYnkgdGhlIGxpYnJhcnkuXG4gKlxuICogVXN1YWxseSB5b3UgZG9uJ3Qgd2FudCB0byBvdmVycmlkZSB0aGUgYG9yZGVyYCwgYGZuYCBhbmQgYG9uTG9hZGAgcHJvcHMuXG4gKiBBbGwgdGhlIG90aGVyIHByb3BlcnRpZXMgYXJlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY291bGQgYmUgdHdlYWtlZC5cbiAqIEBuYW1lc3BhY2UgbW9kaWZpZXJzXG4gKi9cbnZhciBtb2RpZmllcnMgPSB7XG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlXG4gICAqIGVsZW1lbnQuPGJyIC8+XG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cbiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgc2hpZnQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAxMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBzaGlmdFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuXG4gICAqXG4gICAqIEl0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyB1bml0czpcbiAgICogLSBgcHhgIG9yIHVuaXQtbGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgYGhlaWdodGAuXG4gICAqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSB2YWx1ZSAoYXMgYE51bWJlcmAgb3IgYFN0cmluZ2ApLCBvciBhIHBhaXIgb2YgdmFsdWVzXG4gICAqIGFzIGBTdHJpbmdgIGRpdmlkZWQgYnkgYSBjb21tYSBvciBvbmUgKG9yIG1vcmUpIHdoaXRlIHNwYWNlcy48YnIgLz5cbiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlXG4gICAqIHJlbW92ZWQgaW4gdjIuPGJyIC8+XG4gICAqIEFkZGl0aW9uYWxseSwgaXQgYWNjZXB0cyBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBiZXR3ZWVuIGRpZmZlcmVudCB1bml0cy5cbiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFZhbGlkIGV4YW1wbGVzIGFyZTpcbiAgICogYGBgXG4gICAqIDEwXG4gICAqICcxMCUnXG4gICAqICcxMCwgMTAnXG4gICAqICcxMCUsIDEwJ1xuICAgKiAnMTAgKyAxMCUnXG4gICAqICcxMCAtIDV2aCArIDMlJ1xuICAgKiAnLTEwcHggKyA1dmgsIDVweCAtIDYlJ1xuICAgKiBgYGBcbiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXBcbiAgICogPiB3aXRoIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50LCB1bmZvcnR1bmF0ZWx5LCB5b3Ugd2lsbCBoYXZlIHRvIGRpc2FibGUgdGhlIGBmbGlwYCBtb2RpZmllci5cbiAgICogPiBZb3UgY2FuIHJlYWQgbW9yZSBvbiB0aGlzIGF0IHRoaXMgW2lzc3VlXShodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9pc3N1ZXMvMzczKS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIG9mZnNldDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0yMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDIwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IG9mZnNldCxcbiAgICAvKiogQHByb3Age051bWJlcnxTdHJpbmd9IG9mZnNldD0wXG4gICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgb2Zmc2V0OiAwXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cbiAgICpcbiAgICogQSBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyLiBUaGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBhbHdheXMgaGFzIGEgbGl0dGxlIHBhZGRpbmdcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50J1xuICAgICAqIEJvdW5kYXJpZXMgdXNlZCBieSB0aGUgbW9kaWZpZXIuIENhbiBiZSBgc2Nyb2xsUGFyZW50YCwgYHdpbmRvd2AsXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICdzY3JvbGxQYXJlbnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2ggb3RoZXJcbiAgICogd2l0aG91dCBsZWF2aW5nIGFueSBnYXAgYmV0d2VlbiB0aGUgdHdvLiBFc3BlY2lhbGx5IHVzZWZ1bCB3aGVuIHRoZSBhcnJvdyBpc1xuICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBpdCBwb2ludHMgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLiBZb3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxuICAgKiBiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGtlZXBUb2dldGhlcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDQwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGtlZXBUb2dldGhlclxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlXG4gICAqIHN1cmUgaXQgaXMgcG9zaXRpb25lZCBiZXR3ZWVuIHRoZSByZWZlcmVuY2UgZWxlbWVudCBhbmQgaXRzIHBvcHBlciBlbGVtZW50LlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIG91dGVyIHNpemUgb2YgdGhlIGBhcnJvd0VsZW1lbnRgIG5vZGUgdG8gZGV0ZWN0IGhvdyBtYW55XG4gICAqIHBpeGVscyBvZiBjb25qdW5jdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpXG4gICAgICovXG4gICAgYmVoYXZpb3I6ICdmbGlwJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgZmxpcCBpZiBpdCBoaXRzIHRoZSBlZGdlcyBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xuICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24uXG4gICAgICogVGhlIHBvcHBlciB3aWxsIG5ldmVyIGJlIHBsYWNlZCBvdXRzaWRlIG9mIHRoZSBkZWZpbmVkIGJvdW5kYXJpZXNcbiAgICAgKiAoZXhjZXB0IGlmIGBrZWVwVG9nZXRoZXJgIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgd2hlbiB0aGlzIG1vZGlmaWVyIGlzIGRpc2FibGVkLCB0aGUgcG9wcGVyIHdpbGwgYmUgcGxhY2VkIG91dHNpZGVcbiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaW5uZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA3MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGlubmVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gaGlkZSB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dHNpZGUgb2YgdGhlXG4gICAqIHBvcHBlciBib3VuZGFyaWVzLiBJdCB3aWxsIHNldCBhIGB4LW91dC1vZi1ib3VuZGFyaWVzYCBhdHRyaWJ1dGUgd2hpY2ggY2FuXG4gICAqIGJlIHVzZWQgdG8gaGlkZSB3aXRoIGEgQ1NTIHNlbGVjdG9yIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGlzXG4gICAqIG91dCBvZiBib3VuZGFyaWVzLlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBoaWRlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTgwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaGlkZVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdXIgb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXBwbHlTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDkwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFwcGx5U3R5bGUsXG4gICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi9cbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjEwLjAsIHRoZSBwcm9wZXJ0eSBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9uIHVzZWQgYnkgUG9wcGVyLmpzLlxuICogVGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIG1vZGlmaWVycyBhbmQgdG8gdGhlIGBvbkNyZWF0ZWAgYW5kIGBvblVwZGF0ZWAgY2FsbGJhY2tzLlxuICogQG5hbWUgZGF0YU9iamVjdFxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEucGxhY2VtZW50IFBsYWNlbWVudCBhcHBsaWVkIHRvIHBvcHBlclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5oaWRlIFRydWUgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dCBvZiBib3VuZGFyaWVzLCB1c2VmdWwgdG8ga25vdyB3aGVuIHRvIGhpZGUgdGhlIHBvcHBlclxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdy4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+XG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhlIGBvcHRpb25zYCBvYmplY3QsIGFzIHRoZSAzcmQgYXJndW1lbnQuIEZvciBleGFtcGxlOlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XG4gKiAgIG1vZGlmaWVyczoge1xuICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBEZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudC5cbiAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdhbnQgcG9wcGVyIHRvIHBvc2l0aW9uIGl0IHNlbGYgaW4gJ2ZpeGVkJyBtb2RlXG4gICAqIEBwcm9wIHtCb29sZWFufSBwb3NpdGlvbkZpeGVkPWZhbHNlXG4gICAqL1xuICBwb3NpdGlvbkZpeGVkOiBmYWxzZSxcblxuICAvKipcbiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWQuXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qcy5cbiAgICogQHByb3Age21vZGlmaWVyc31cbiAgICovXG4gIG1vZGlmaWVyczogbW9kaWZpZXJzXG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBvbkNyZWF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgb25VcGRhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8vIFV0aWxzXG4vLyBNZXRob2RzXG52YXIgUG9wcGVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2UuXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBhbiB1cGRhdGUuIEl0IHdpbGwgcnVuIG9uIHRoZSBuZXh0IFVJIHVwZGF0ZSBhdmFpbGFibGUuXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZVVwZGF0ZVxuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLlxuICAgICAqIFN0YXJ0aW5nIGZyb20gdmVyc2lvbiAxLjcsIHRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHlvdVxuICAgICAqIGluY2x1ZGUgYHBvcHBlci11dGlscy5qc2AgYmVmb3JlIGBwb3BwZXIuanNgLlxuICAgICAqXG4gICAgICogKipERVBSRUNBVElPTioqOiBUaGlzIHdheSB0byBhY2Nlc3MgUG9wcGVyVXRpbHMgaXMgZGVwcmVjYXRlZFxuICAgICAqIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjIhIFVzZSB0aGUgUG9wcGVyVXRpbHMgbW9kdWxlIGRpcmVjdGx5IGluc3RlYWQuXG4gICAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3RcbiAgICAgKiBndWFyYW50ZWUgdGhlbSB0byBmb2xsb3cgc2VtdmVyLiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrIVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjhcbiAgICAgKiBAbWVtYmVyIFV0aWxzXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG4gIH1dKTtcbiAgcmV0dXJuIFBvcHBlcjtcbn0oKTtcblxuLyoqXG4gKiBUaGUgYHJlZmVyZW5jZU9iamVjdGAgaXMgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGNvbXBhdGlibGUgd2l0aCBQb3BwZXIuanNcbiAqIGFuZCBsZXRzIHlvdSB1c2UgaXQgYXMgcmVwbGFjZW1lbnQgb2YgYSByZWFsIERPTSBub2RlLjxiciAvPlxuICogWW91IGNhbiB1c2UgdGhpcyBtZXRob2QgdG8gcG9zaXRpb24gYSBwb3BwZXIgcmVsYXRpdmVseSB0byBhIHNldCBvZiBjb29yZGluYXRlc1xuICogaW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIERPTSBub2RlIHRvIHVzZSBhcyByZWZlcmVuY2UuXG4gKlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZmVyZW5jZU9iamVjdCwgcG9wcGVyTm9kZSk7XG4gKiBgYGBcbiAqXG4gKiBOQjogVGhpcyBmZWF0dXJlIGlzbid0IHN1cHBvcnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMC5cbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuXG5cblBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5Qb3BwZXIucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImRyb3Bkb3duXCI6XCJzcmMtY29tcG9uZW50cy1kcm9wZG93bi0tZHJvcGRvd25cIn07IiwiaW1wb3J0IHsgRE9NSGVscGVycyBhcyAkZCB9IGZyb20gJ0BVdGlscyc7XG5pbXBvcnQgRWxlbWVudCBmcm9tICcuLy4uL2VsZW1lbnQvJztcbmltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuXG5leHBvcnQgY2xhc3MgVGV4dElucHV0IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IgPSAnaW5wdXQnLCBvcHRpb25zKXtcbiAgICAgICAgc3VwZXIoc2VsZWN0b3IsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgdmFyIGlucHV0ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCApIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDsgXG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIFxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERyb3Bkb3duIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIG9wdGlvbnMpe1xuICAgICAgICBjb25zb2xlLmxvZyhzZWxlY3Rvcik7XG4gICAgICAgIHZhciBlbCA9IHNlbGVjdG9yLnNwbGl0KCcuJylbMF0uc3BsaXQoJyMnKVswXSxcbiAgICAgICAgICAgIGtsYXNzLFxuICAgICAgICAgICAgaWQ7XG5cbiAgICAgICAgaWYgKCBlbCAhPT0gJ2RpdicgKSB7XG4gICAgICAgICAgICBpZiAoIHNlbGVjdG9yLnNwbGl0KCcuJykubGVuZ3RoID4gMSApe1xuICAgICAgICAgICAgICAgIGtsYXNzID0gc2VsZWN0b3Iuc3BsaXQoJy4nKVswXS5zcGxpdCgnIycpWzBdOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggc2VsZWN0b3Iuc3BsaXQoJyMnKS5sZW5ndGggPiAxICl7XG4gICAgICAgICAgICAgICAgaWQgPSBzZWxlY3Rvci5zcGxpdCgnIycpWzBdLnNwbGl0KCcuJylbMF07IFxuICAgICAgICAgICAgfSAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRHJvcGRvd24gZWxlbWVudCBtdXN0IGJlIGEgZGl2OyBjb2VyY2luZyAuIC4gLicpO1xuICAgICAgICAgICAgZWwgPSAnZGl2JztcbiAgICAgICAgICAgIHNlbGVjdG9yID0gZWwgKyAoIGlkICE9PSB1bmRlZmluZWQgPyAnIycgKyBpZCA6ICcnICkgKyAoIGtsYXNzICE9PSB1bmRlZmluZWQgPyAnLicgKyBrbGFzcyA6ICcnICk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcihzZWxlY3Rvciwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCd1bCcpO1xuICAgICAgICB0aGlzLmJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gICAgICAgIHRoaXMuX2lzT3BlbiA9IGZhbHNlO1xuICAgIH1cbiAgICBzZXQgaXNPcGVuKGJvb2wpe1xuXG4gICAgICAgIHRoaXMuX2lzT3BlbiA9IGJvb2w7XG4gICAgICAgIGZ1bmN0aW9uIGJvZHlDbGlja0hhbmRsZXIoKXtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBib29sICl7XG4gICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQocy5pc09wZW4pO1xuICAgICAgICAgICAgdGhpcy5ib2R5LlVJQ29udHJvbElzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBib2R5Q2xpY2tIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKHMuaXNPcGVuKTtcbiAgICAgICAgICAgIHRoaXMuYm9keS5VSUNvbnRyb2xJc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGJvZHlDbGlja0hhbmRsZXIuYmluZCh0aGlzKSk7ICAgXG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGlzT3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzT3BlbjtcbiAgICB9XG4gICAgc2V0IHNlbGVjdGVkT3B0aW9uKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0ZWRPcHRpb24gPSBpdGVtO1xuICAgICAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlucHV0LnRleHRDb250ZW50ID0gdGhpcy5fc2VsZWN0ZWRPcHRpb24uaW5uZXJUZXh0O1xuXG4gICAgICAgIGlmICggdGhpcy5vbkNoYW5nZSApIHtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbnN0YW5jZSBvZiBEcm9wZG93biBjbGFzcyBuZWVkcyBhbiBvbkNoYW5nZSBtZXRob2QgdG8gaGFuZGxlIHNlbGVjdGlvbiBvZiBhIG5ldyB2YWx1ZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBzZWxlY3RlZE9wdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkT3B0aW9uO1xuICAgIH1cbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgXG4gICAgICAgIHZhciB3cmFwcGVyID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCApIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbnB1dCA9ICRkLmMoJ2Rpdi5qcy1pbnB1dC1kaXYnKTtcbiAgICAgICAgdmFyIG9wdGlvbnNMaXN0ID0gJGQuYygndWwnKTtcbiAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goZWFjaCA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSAkZC5jKCdsaScpO1xuICAgICAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIGVhY2gudmFsdWUpO1xuICAgICAgICAgICAgb3B0aW9uLmlubmVySFRNTCA9IGVhY2gubmFtZTtcbiAgICAgICAgICAgIGlmICggZWFjaC5zZWxlY3RlZCApe1xuICAgICAgICAgICAgICAgIG9wdGlvbi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIGlucHV0LnRleHRDb250ZW50ID0gZWFjaC5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9uc0xpc3QuYXBwZW5kQ2hpbGQob3B0aW9uKVxuICAgICAgICB9KTtcbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChpbnB1dClcbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChvcHRpb25zTGlzdClcbiAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKHMuUENURHJvcGRvd24pO1xuICAgICAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xuICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xuICAgICAgIHRoaXMuaW5wdXQgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJy5qcy1pbnB1dC1kaXYnKTtcbiAgICAgICB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJykuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbUNsaWNrSGFuZGxlcihpdGVtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgIH0pOyBcbiAgICAgICB0aGlzLl9zZWxlY3RlZE9wdGlvbiA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignbGkuc2VsZWN0ZWQnKTtcbiAgICAgICB0aGlzLnRvQmVTZWxlY3RlZCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignbGkuc2VsZWN0ZWQnKTtcbiAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXIuYmluZCh0aGlzKSk7XG4gICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLmtleUNvZGUpO1xuICAgICAgICAgICAgaWYgKCBlLmtleUNvZGUgPT09IDkgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YWJIYW5kbGVyLmNhbGwodGhpcyxlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIFszMiwzOCw0MF0uaW5kZXhPZihlLmtleUNvZGUpID4gLTEgKXsgLy8gMzIgc3BhY2UsIDM4IHVwIGFycm93LCA0MCBkb3duIGFycm93XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBwcmV2ZW50IHNjcm9sbGluZyBvbiBzcGFjZSBhbmQgYXJyb3dcbiAgICAgICAgICAgICAgICB0aGlzLnNwYWNlQW5kQXJyb3dIYW5kbGVyLmNhbGwodGhpcywgZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBbMTMsMjddLmluZGV4T2YoZS5rZXlDb2RlID4gLTEgKSApeyAvLyAxMyBlbnRlciwgMjcgZXNjYXBlXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLmlzT3BlbiApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRlckFuZEVzY2FwZUhhbmRsZXIuY2FsbCh0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICBcbiAgICB9XG4gICAgaXRlbUNsaWNrSGFuZGxlcihpdGVtKXtcbiAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQgPSBpdGVtO1xuICAgICAgICB0aGlzLnRvQmVTZWxlY3RlZC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9uID0gdGhpcy50b0JlU2VsZWN0ZWQ7XG4gICAgfVxuICAgIGVudGVyQW5kRXNjYXBlSGFuZGxlcihlKXsgLy8gb25seSBjYWxsZWQgaXMgdGhpcy5pc09wZW5cbiAgICAgICAgaWYgKCBlLmtleUNvZGUgPT09IDI3ICkgeyAvLyBlc2Mga2V5XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZXNjYXBlIGtleScpO1xuICAgICAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIHRoaXMudG9CZVNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZE9wdGlvbjtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7ICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbiA9IHRoaXMudG9CZVNlbGVjdGVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNwYWNlQW5kQXJyb3dIYW5kbGVyKGUpe1xuICAgICAgICBpZiAoIGUua2V5Q29kZSA9PT0gMzIgKSB7IC8vIHNwYWNlXG4gICAgICAgICAgICBpZiAoICF0aGlzLmlzT3BlbiApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGhlcmUgY2FsbCB0byBmbiB0aGF0IHNlbGVjdHMgdGhlIHRvQmVTbGVjdGVkIG9wdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFycm93IGtleXNcbiAgICAgICAgaWYgKCAhdGhpcy5pc09wZW4gKXtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpcyBvcGVuXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gZS5rZXlDb2RlID09PSAzOCA/IHRoaXMudG9CZVNlbGVjdGVkLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgOiB0aGlzLnRvQmVTZWxlY3RlZC5uZXh0RWxlbWVudFNpYmxpbmc7IFxuICAgICAgICAgICAgaWYgKCBuZXh0ICkgeyAvLyBpZiB0aGVyZSBpcyBhbiBvcHRpb24gYmVmb3JlL2FmdGVyIHRoZSBjdXJyZW50bHkgdG9CZVNlbGVjdGVkIG9wdGlvbiwgbWFrZSB0aGF0IHRoZSB0b0JlU2VsZWN0ZWQgb3B0aW9uXG4gICAgICAgICAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvQmVTZWxlY3RlZCA9IG5leHQ7XG4gICAgICAgICAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0YWJIYW5kbGVyKGUpe1xuICAgICAgICBpZiAoIHRoaXMuaXNPcGVuICl7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xpY2tIYW5kbGVyKGUpe1xuICAgICAgICBpZiAoIHRoaXMuaXNPcGVuIHx8ICF0aGlzLmJvZHkuVUlDb250cm9sSXNPcGVuICl7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5pc09wZW4gPSAhdGhpcy5pc09wZW47XG4gICAgICAgIH1cbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxwPjxzdHJvbmc+Q2VudHJhbGl6YXRpb24uPC9zdHJvbmc+IFRoZSBkZWdyZWUgdG8gd2hpY2ggYm9ycm93aW5nIGlzIGRvbmUgYnkgdGhlIHN0YXRlIGl0c2VsZiByYXRoZXIgdGhhbiBieSBhIGNvbXBvbmVudCB1bml0LWEgbGVnYWxseSBzZXBhcmF0ZSBlbnRpdHkgc3VjaCBhcyBhIGhvdXNpbmcgb3IgdHVybnBpa2UgYXV0aG9yaXR5LiBIaWdoZXIgdmFsdWVzIG1lYW4gdGhlIHN0YXRlIGlzIG1vcmUgY2VudHJhbGl6ZWQuPC9wPlxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8cD48c3Ryb25nPkdlbmVyYWwgb2JsaWdhdGlvbiAoR08pIGRlYnQgbGltaXQgdHlwZS48L3N0cm9uZz4gVGhlIGtpbmQgb2YgbGltaXQgdGhlIHN0YXRlIGhhcyBvbiBHTyBib3Jyb3dpbmcsIG9uZSBvZiB0aGUgbW9zdCBjb21tb24gdHlwZXMgb2YgZGVidCBpc3N1ZWQgYnkgc3RhdGVzLiBUaGVzZSBsaW1pdHMgYWZmZWN0IGhvdyBzdGF0ZXMgYm9ycm93LiA8L3A+XFxuXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxwPjxzdHJvbmc+RGVidCBwZXIgY2FwaXRhLjwvc3Ryb25nPiBUb3RhbCBkZWJ0IHJlbGF0aXZlIHRvIGEgc3RhdGXigJlzIHBvcHVsYXRpb24uPC9wPlxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8cD48c3Ryb25nPkRlYnQgYXMgYSBwZXJjZW50YWdlIG9mIHN0YXRlIHBlcnNvbmFsIGluY29tZS48L3N0cm9uZz4gVG90YWwgZGVidCByZWxhdGl2ZSB0byBzdGF0ZSBwZXJzb25hbCBpbmNvbWUsIGEgbWVhc3VyZSBvZiBlY29ub21pYyByZXNvdXJjZXMuPC9wPlxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8cD48c3Ryb25nPlBvcHVsYXRpb24gZ3Jvd3RoLjwvc3Ryb25nPiBUaGUgMTAteWVhciBwb3B1bGF0aW9uIGdyb3d0aCByYXRlIGZyb20gMjAwOCB0byAyMDE3LiBHcm93aW5nIHBvcHVsYXRpb25zIGFyZSBhc3NvY2lhdGVkIHdpdGggZ3JlYXRlciBpbmZyYXN0cnVjdHVyZSBpbnZlc3RtZW50LiA8L3A+XFxuXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxwPjxzdHJvbmc+UmV2ZW51ZSB2b2xhdGlsaXR5Ljwvc3Ryb25nPiBBIG1lYXN1cmUgb2YgdmFyaWF0aW9uIGluIHRheCBjb2xsZWN0aW9ucy4gTG93IHNjb3JlcyBtZWFuIHRoYXQgcmV2ZW51ZSBsZXZlbHMgYXJlIHNpbWlsYXIgZnJvbSB5ZWFyIHRvIHllYXIsIHdoaWxlIGhpZ2ggc2NvcmVzIGluZGljYXRlIHRoYXQgcmV2ZW51ZSB2YXJpZXMgbW9yZS4gTW9yZSB2b2xhdGlsZSBzdGF0ZXMgc2hvdWxkIHBsYW4gZm9yIGdyZWF0ZXIgdW5jZXJ0YWludHkuIDwvcD5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHA+PHN0cm9uZz5EaXZpc2lvbiBvZiBib3Jyb3dpbmcgYmV0d2VlbiBzdGF0ZSBhbmQgbG9jYWwgZ292ZXJubWVudHMuPC9zdHJvbmc+IFRoZSBzaGFyZSBvZiBjb21iaW5lZCBzdGF0ZSBhbmQgbG9jYWwgZGVidCBpc3N1ZWQgYnkgbG9jYWwgZ292ZXJubWVudHMuIFN0YXRlcyB3aGVyZSBsb2NhbCBnb3Zlcm5tZW50cyBib3Jyb3cgbGVzcyB0ZW5kIHRvIGhhdmUgaGlnaGVyIGRlYnQgbGV2ZWxzLjwvcD5cXG5cIjsiLCJpbXBvcnQgUm91dGVyIGZyb20gJ0BSb3V0ZXInO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUENUQXBwIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIG9wdGlvbnMpe1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKTtcbiAgICAgICAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgICAgICAgdGhpc1tvcHRpb25dID0gb3B0aW9uc1tvcHRpb25dO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5pdChyb3V0ZXJPcHRpb25zKXtcbiAgICAgICAgaWYgKCB0aGlzLm5lZWRzUm91dGVyICl7IC8vIGNvbWVzIGZyb20gb3B0aW9ucyBvYmplY3RcbiAgICAgICAgICAgIHRoaXMucm91dGVyID0gbmV3IFJvdXRlcigpO1xuICAgICAgICAgICAgdGhpcy5yb3V0ZXIuaW5pdChyb3V0ZXJPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc2FibGVIb3Zlck9uVG91Y2goKTtcbiAgICB9XG4gICAgZGlzYWJsZUhvdmVyT25Ub3VjaCgpe1xuICAgIC8vIEhUOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzAzMDM4OThcbiAgICAgICAgdmFyIGhhc0hvdmVyQ2xhc3MgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmJvZHk7XG4gICAgICAgIHZhciBsYXN0VG91Y2hUaW1lID0gMDtcblxuICAgICAgICBmdW5jdGlvbiBlbmFibGVIb3ZlcigpIHtcbiAgICAgICAgICAgIC8vIGZpbHRlciBlbXVsYXRlZCBldmVudHMgY29taW5nIGZyb20gdG91Y2ggZXZlbnRzXG4gICAgICAgICAgICBpZiAobmV3IERhdGUoKSAtIGxhc3RUb3VjaFRpbWUgPCA1MDApIHJldHVybjtcbiAgICAgICAgICAgIGlmIChoYXNIb3ZlckNsYXNzKSByZXR1cm47XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdoYXMtaG92ZXInKTtcbiAgICAgICAgICAgIGhhc0hvdmVyQ2xhc3MgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZGlzYWJsZUhvdmVyKCkge1xuICAgICAgICAgICAgaWYgKCFoYXNIb3ZlckNsYXNzKSByZXR1cm47XG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnaGFzLWhvdmVyJyk7XG4gICAgICAgICAgICBoYXNIb3ZlckNsYXNzID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVMYXN0VG91Y2hUaW1lKCkge1xuICAgICAgICAgICAgbGFzdFRvdWNoVGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdXBkYXRlTGFzdFRvdWNoVGltZSwgdHJ1ZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBkaXNhYmxlSG92ZXIsIHRydWUpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBlbmFibGVIb3ZlciwgdHJ1ZSk7XG5cbiAgICAgICAgZW5hYmxlSG92ZXIoKTtcbiAgICB9XG4gICAgY3JlYXRlQ29tcG9uZW50KG1vZGVsLCBjb21wb25lbnQsIHNlbGVjdG9yLCBfb3B0aW9ucyl7IFxuICAgICAgICB2YXIgb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUoe1xuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgcmVyZW5kZXJPbkRhdGFNaXNtYXRjaDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICggX29wdGlvbnMgIT09IG51bGwgJiYgdHlwZW9mIF9vcHRpb25zID09PSAnb2JqZWN0JyApe1xuICAgICAgICAgICAgZm9yICggbGV0IGtleSBpbiBfb3B0aW9ucyApe1xuICAgICAgICAgICAgICAgIGlmICggX29wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSApe1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zW2tleV0gPSBfb3B0aW9uc1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBjb21wb25lbnQoc2VsZWN0b3IsIG9wdGlvbnMpO1xuICAgIH1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHNlY3Rpb24gaWQ9XFxcInNlY3Rpb24tb3ZlcnZpZXdcXFwiPlxcblxcdDxoMiBjbGFzcz1cXFwic3RhdGljXFxcIiByb2xlPVxcXCJidXR0b25cXFwiIHRhYmluZGV4PVxcXCIwXFxcIiBhcmlhLWxhYmVsPVxcXCJTaG93L2hpZGUgY29udGVudFxcXCI+T3ZlcnZpZXc8L2gyPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJqcy1pbm5lci1jb250ZW50XFxcIj5cXG4gICAgXFxuXFx0PHA+XFxuXFx0ICAgIFdoZW4gc3RhdGUgcG9saWN5bWFrZXJzIHRyeSB0byBhc3Nlc3MgaG93IG11Y2ggZGVidCB0byB0YWtlIG9uIGZvciBwcm9qZWN0c1xcblxcdCAgICBzdWNoIGFzIHJvYWRzLCBicmlkZ2VzLCBhbmQgc2Nob29scywgdGhleSBvZnRlbiBjb21wYXJlIGRlYnQgbGV2ZWxzIGluXFxuXFx0ICAgIHRoZWlyIHN0YXRlIHRvIHRob3NlIG9mIG90aGVycy4gQmVjYXVzZSBubyB1bml2ZXJzYWwgZ3VpZGVsaW5lcyBleGlzdCBmb3JcXG5cXHQgICAgaG93IG11Y2ggZGVidCBpcyBhZmZvcmRhYmxlLCBtYW55IHBvbGljeW1ha2VycyBldmFsdWF0ZSBob3cgdGhlaXIgc3RhdGVcXG5cXHQgICAgc3RhY2tzIHVwIGFnYWluc3Qgb3RoZXJzIHdpdGggYSBjb21tb24gY3JlZGl0IHJhdGluZyBvciBuYXRpb25hbCBtZWRpYW5cXG5cXHQgICAgZGVidCBsZXZlbC5cXG5cXHQ8L3A+XFxuXFx0PHA+XFxuXFx0ICAgIEJ1dCBzZWxlY3RpbmcgYSBwZWVyIGdyb3VwIGJhc2VkIG9ubHkgb24gYSBjb21tb24gcmF0aW5nIG9yIHVzaW5nIG5hdGlvbmFsXFxuXFx0ICAgIGJlbmNobWFya3Mgb3Zlcmxvb2tzIG1hbnkgZmFjdG9ycyB0aGF0IGluZmx1ZW5jZSBib3Jyb3dpbmcgbGV2ZWxzLiBTdGF0ZXNcXG5cXHQgICAgd2l0aCBncm93aW5nIHBvcHVsYXRpb25zLCBmb3IgZXhhbXBsZSwgdGVuZCB0byBib3Jyb3cgbW9yZTsgYSBzdGF0ZSYjODIxNztzXFxuXFx0ICAgIGZpc2NhbCBoZWFsdGggYWZmZWN0cyB0aGUgZnVuZHMgYXZhaWxhYmxlIGZvciBkZWJ0IHNlcnZpY2U7IGFuZCBwb2xpY2llc1xcblxcdCAgICBtZWFudCB0byBsaW1pdCBzdGF0ZSBkZWJ0IGNhbiBpbmZsdWVuY2UgaG93IG11Y2ggbG9jYWwgZ292ZXJubWVudHMgYW5kXFxuXFx0ICAgIG90aGVyIHN0YXRlIGVudGl0aWVzIGJvcnJvdyBmb3IgY2FwaXRhbCBwcm9qZWN0cy5cXG5cXHQ8L3A+XFxuXFx0PHA+XFxuXFx0ICAgIFRvIGFkZHJlc3MgdGhpcyBnYXAsIFRoZSBQZXcgQ2hhcml0YWJsZSBUcnVzdHMgaGFzIGNyZWF0ZWQgYW4gaW50ZXJhY3RpdmVcXG5cXHQgICAgdG9vbCB0byBhbGxvdyBwb2xpY3ltYWtlcnMgdG8gY29tcGFyZSBzdGF0ZXMgYmFzZWQgb24gc2V2ZW4gY2hhcmFjdGVyaXN0aWNzXFxuXFx0ICAgIHJlbGF0ZWQgdG8gZGVidC48c3VwPio8L3N1cD4gU3RhdGVzIGNhbiB1c2UgdGhlc2UgZGF0YSB0byBzZWxlY3QgbW9yZVxcblxcdCAgICB0YWlsb3JlZCBwZWVyIGdyb3VwcywgZ2l2aW5nIHRoZW0gYSBkZWVwZXIgdW5kZXJzdGFuZGluZyBvZiBob3cgc3RhdGVzIHdpdGhcXG5cXHQgICAgc2ltaWxhciBib3Jyb3dpbmcgcHJhY3RpY2VzLCBjb25zdHJhaW50cywgYW5kIG5lZWRzIG1hbmFnZSB0aGVpciBib3Jyb3dpbmcuXFxuXFx0ICAgIFVsdGltYXRlbHksIHRoZXNlIGltcHJvdmVkIGNvbXBhcmlzb25zIHdpbGwgaGVscCB0aGVtIG1ha2UgYmV0dGVyLWluZm9ybWVkXFxuXFx0ICAgIGRlY2lzaW9ucy5cXG5cXHQ8L3A+XFxuXFx0PHAgY2xhc3M9XFxcInBjdC1mb290bm90ZVxcXCI+XFxuXFx0PHN1cD4qPC9zdXA+IFRvIG1lYXN1cmUgZGVidCBsZXZlbHMsIHRoaXMgdG9vbCB1c2VzIENlbnN1cyBCdXJlYXUgZGF0YS4gRm9yIG1vcmVcXG5cXHQgICAgaW5mb3JtYXRpb24gYWJvdXQgdGhlc2UgY2hhcmFjdGVyaXN0aWNzIGFuZCB3aHkgUGV3IGNob3NlIHRoZW0sIHNlZSB0aGUgXFxuXFx0ICAgICYjODIyMDtBYm91dCB0aGUgRGF0YSYjODIyMTsgc2VjdGlvbiBiZWxvdy5cXG5cXHQ8L3A+XFxuXFxuICAgIDwvZGl2PlxcbiAgICA8L3NlY3Rpb24+XFxuPHNlY3Rpb24gaWQ9XFxcInNlY3Rpb24tY29tcGFyaXNvblxcXCI+XFxuXFx0PGgyIGNsYXNzPVxcXCJzdGF0aWNcXFwiIHJvbGU9XFxcImJ1dHRvblxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIGFyaWEtbGFiZWw9XFxcIlNob3cvaGlkZSBjb250ZW50XFxcIj5TdGF0ZSBDb21wYXJpc29uPC9oMj5cXG4gICAgPGRpdiBjbGFzcz1cXFwianMtaW5uZXItY29udGVudFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb21wYXJlLXNlbGVjdGlvbi13cmFwcGVyXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiY29tcGFyZS1sYWJlbFxcXCI+Q29tcGFyZTwvc3Bhbj48YnIgLz5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmbGV4IGZsZXgtc3RhcnQgZmxleC1iYXNlbGluZSBhdXRvQ29tcGxldGVfb3V0ZXJXcmFwcGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXV0b0NvbXBsZXRlX3dyYXBwZXJcXFwiIGlkPVxcXCJhdXRvQ29tcGxldGVfd3JhcHBlci0wXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBhdXRvY29tcGxldGU9XFxcImhhY2tcXFwiIHR5cGU9XFxcInRleHRcXFwiIGlkPVxcXCJjb21wYXJlLWlucHV0LTBcXFwiPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPHNwYW4+dG88L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF1dG9Db21wbGV0ZV93cmFwcGVyXFxcIiBpZD1cXFwiYXV0b0NvbXBsZXRlX3dyYXBwZXItMVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgYXV0b2NvbXBsZXRlPVxcXCJoYWNrXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBpZD1cXFwiY29tcGFyZS1pbnB1dC0xXFxcIj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDwvc2VjdGlvbj5cXG48c2VjdGlvbiBpZD1cXFwic2VjdGlvbi1zdGF0ZXNcXFwiPlxcblxcdDxoMiBjbGFzcz1cXFwic3RhdGljXFxcIiByb2xlPVxcXCJidXR0b25cXFwiIHRhYmluZGV4PVxcXCIwXFxcIiBhcmlhLWxhYmVsPVxcXCJTaG93L2hpZGUgY29udGVudFxcXCI+NTAtU3RhdGUgRGF0YTwvaDI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImpzLWlubmVyLWNvbnRlbnRcXFwiPlxcbiAgICA8L2Rpdj5cXG4gICAgPC9zZWN0aW9uPlxcbjxzZWN0aW9uIGlkPVxcXCJzZWN0aW9uLWFib3V0XFxcIj5cXG5cXHQ8aDIgY2xhc3M9XFxcInN0YXRpY1xcXCIgcm9sZT1cXFwiYnV0dG9uXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgYXJpYS1sYWJlbD1cXFwiU2hvdy9oaWRlIGNvbnRlbnRcXFwiPkFib3V0IHRoZSBEYXRhPC9oMj5cXG4gICAgPGRpdiBjbGFzcz1cXFwianMtaW5uZXItY29udGVudFxcXCI+XFxuICAgIFxcblxcdDxwPlxcbiAgICBQZXcgcmVzZWFyY2hlcnMgZGV2ZWxvcGVkIHRoaXMgbGlzdCBvZiBjaGFyYWN0ZXJpc3RpY3MgYnkgZXhhbWluaW5nXFxuICAgIHJlbGV2YW50IGxpdGVyYXR1cmUgYW5kIGNvbnN1bHRpbmcgc3ViamVjdCBtYXR0ZXIgZXhwZXJ0cy4gVGhlIGZpbmFsIHNldCBvZlxcbiAgICBzZXZlbiBjaGFyYWN0ZXJpc3RpY3MgaW5jbHVkZWQgaW4gdGhlIHRvb2wgd2FzIHNlbGVjdGVkIGJhc2VkIG9uIGV2aWRlbmNlXFxuICAgIGluIHRoZSBsaXRlcmF0dXJlIHRoYXQgdGhlIGNoYXJhY3RlcmlzdGljcyBhcmUgcmVsYXRlZCB0byBzdGF0ZSBkZWJ0LCB0aGVcXG4gICAgZmVhc2liaWxpdHkgb2YgY29sbGVjdGluZyB0aGUgZGF0YSB1c2VkIHRvIGNvbnN0cnVjdCB0aGUgY2hhcmFjdGVyaXN0aWMsXFxuICAgIGFuZCBhIGRlc2lyZSB0byBhdm9pZCByZWR1bmRhbmN5LiBQZXcgYWxzbyBsaW1pdGVkIHRoZSBudW1iZXIgb2ZcXG4gICAgY2hhcmFjdGVyaXN0aWNzIHRvIG1ha2UgdGhlIHRvb2wgZWFzeSB0byB1c2UgYW5kIHVuZGVyc3RhbmQuXFxuPC9wPlxcbjxwPlxcbiAgICBUaGUgZ29hbCBvZiB0aGlzIHRvb2wgd2FzIG5vdCB0byBjcmVhdGUgYW4gZXhoYXVzdGl2ZSBjYXRhbG9nIG9mIHRoZVxcbiAgICBmYWN0b3JzIHRoYXQgbWF5IGFmZmVjdCBzdGF0ZSBib3Jyb3dpbmcgbGV2ZWxzLCBzbyBzdGF0ZXMgc2hvdWxkIG5vdCBmZWVsXFxuICAgIHRoZSBuZWVkIHRvIGxpbWl0IHRoZW1zZWx2ZXMgdG8gdGhlIGRhdGEgaW4gaXQgd2hlbiBzZWxlY3RpbmcgcGVlcnMuXFxuICAgIEluc3RlYWQsIHRoZSB0b29sIGlzIGludGVuZGVkIHRvIGhlbHAgc3RhdGVzIGNvbnNpZGVyIHRoZXNlIGRpZmZlcmVuY2VzXFxuICAgIHdoZW4gY29uc3RydWN0aW5nIHBlZXIgZ3JvdXBzLlxcbjwvcD5cXG48aDMgY2xhc3M9XFxcInN0YXRpY1xcXCI+XFxuICAgIEJvcnJvd2luZyBwcmFjdGljZXNcXG48L2gzPlxcbjxwPlxcbiAgICBIb3cgc3RhdGVzIGJvcnJvdyBhbHNvIGFmZmVjdHMgaG93IHRoZXkgc2hvdWxkIG1ha2UgY29tcGFyaXNvbnM6IEdlbmVyYWxcXG4gICAgb2JsaWdhdGlvbiAoR08pIGRlYnQgbGltaXRzLCBjZW50cmFsaXphdGlvbiwgYW5kIHRoZSBkaXZpc2lvbiBvZlxcbiAgICBzdGF0ZS1sb2NhbCBib3Jyb3dpbmcgaW4gYSBzdGF0ZSBjYW4gYWZmZWN0IHN0YXRlIGJvcnJvd2luZyBwcmFjdGljZXMuXFxuPC9wPlxcbjxoND5cXG4gICAgR2VuZXJhbCBvYmxpZ2F0aW9uIGRlYnQgbGltaXQgdHlwZSAoMjAxOClcXG48L2g0PlxcbjxwPlxcbiAgICBHTyBkZWJ0IGlzIG9uZSBvZiB0aGUgbW9zdCBjb21tb24gdHlwZXMgaXNzdWVkIGJ5IHN0YXRlcy4gSXQgY2FycmllcyBhXFxuICAgIHN0YXRl4oCZcyBmdWxsIGZhaXRoIGFuZCBjcmVkaXQsIHRoZSBzdHJvbmdlc3QgcG9zc2libGUgcGxlZGdlLiBBcyBhIHJlc3VsdCxcXG4gICAgR08gZGVidCBpcyB0eXBpY2FsbHkgYSBzdGF0ZeKAmXMgaGlnaGVzdCByYXRlZCBhbmQgbG93ZXN0IGNvc3Qgc2luY2UgY3JlZGl0XFxuICAgIHJhdGluZyBhZ2VuY2llcyBhbmQgYm9uZCBwdXJjaGFzZXJzIHN0cm9uZ2x5IGJlbGlldmUgdGhlIHN0YXRlIHdpbGwgcmVwYXlcXG4gICAgaXQuPHN1cD4xPC9zdXA+IFxcbjwvcD5cXG48cD5cXG4gICAgTm90IGFsbCBzdGF0ZXMgaXNzdWUgbXVjaCBHTyBkZWJ0LiBBbGwgYnV0IHR3byBoYXZlIEdPIGRlYnQgbGltaXRzLCB3aGljaFxcbiAgICB2YXJ5IGluIHJlc3RyaWN0aXZlbmVzcyBhbmQgc3RydWN0dXJlLiBGb3IgZXhhbXBsZSwgQ29ubmVjdGljdXQgbGltaXRzIHRoaXNcXG4gICAgZGVidCB0byAxLjYgdGltZXMgdG90YWwgZXN0aW1hdGVkIGdlbmVyYWwgZnVuZCB0YXggcmVjZWlwdHMsIHdoaWxlIEFyaXpvbmFcXG5lZmZlY3RpdmVseSBwcm9oaWJpdHMgaXRzIGlzc3VhbmNlLjxzdXA+Mjwvc3VwPiBDb21wYXJpbmcgQ29ubmVjdGljdXRcXG4gICAgYW5kIEFyaXpvbmEsIHRoZW4sIG1pZ2h0IG5vdCBiZSBhcHByb3ByaWF0ZSBiZWNhdXNlIENvbm5lY3RpY3V0IGhhc1xcbiAgICBzaWduaWZpY2FudCBHTyBkZWJ0IGFuZCBBcml6b25hIG5vbmUuIENvbm5lY3RpY3V04oCZcyBkZWJ0IHdpbGwgZHJhdyBvbiB0aGVcXG4gICAgc3RhdGXigJlzIGdlbmVyYWwgZnVuZCBpbiBhIHdheSBBcml6b25h4oCZcyB3b27igJl0LiAoR08gZGVidCBpcyB0eXBpY2FsbHlcXG4gICAgc3VwcG9ydGVkIGJ5IGEgc3RhdGXigJlzIGdlbmVyYWwgZnVuZC4pIEJlY2F1c2UgYW5hbHl6aW5nIHRoZSByZXZlbnVlIHN0cmVhbXNcXG4gICAgYXZhaWxhYmxlIGZvciBkZWJ0IHJlcGF5bWVudCBpcyBpbXBvcnRhbnQsIHRoaXMgaXMgYSBrZXkgZGlmZmVyZW5jZS5cXG48L3A+XFxuPHA+XFxuICAgIFRoZXNlIGxpbWl0cyBzb21ldGltZXMgYXBwbHkgdG8gc3RhdGUgZGVidCBiZXlvbmQganVzdCBHTyBib3Jyb3dpbmcuIEZvclxcbiAgICBleGFtcGxlLCBXZXN0IFZpcmdpbmlh4oCZcyBsaW1pdCBhcHBsaWVzIHRvIG5ldCB0YXgtc3VwcG9ydGVkIGRlYnQsIHdoaWNoXFxuICAgIGluY2x1ZGVzIEdPLlxcbjwvcD5cXG48cD5cXG4gICAgUGV3IGhhcyBjbGFzc2lmaWVkIGVhY2ggc3RhdGXigJlzIGxpbWl0IGZvciBHTyBkZWJ0IGFzIG9uZSBvZiB0aGUgZm9sbG93aW5nXFxuICAgIHR5cGVzOlxcbjwvcD5cXG48dWw+XFxuICAgIDxsaT5cXG4gICAgICAgIDxzdHJvbmc+Q29uc3RpdHV0aW9uYWwgYW1lbmRtZW50Ljwvc3Ryb25nPlxcbiAgICAgICAgVGhyZWUgc3RhdGVz4oCUQWxhYmFtYSwgT2hpbywgYW5kIFdlc3QgVmlyZ2luaWHigJRyZXF1aXJlIGFuIGFtZW5kbWVudCB0b1xcbiAgICAgICAgdGhlaXIgY29uc3RpdHV0aW9ucyB0byBpc3N1ZSBHTyBkZWJ0LlxcbiAgICA8L2xpPlxcbiAgICA8bGk+XFxuICAgICAgICA8c3Ryb25nPk1ldHJpYy48L3N0cm9uZz5cXG4gICAgICAgIEluIDExIHN0YXRlc+KAlENvbm5lY3RpY3V0LCBHZW9yZ2lhLCBIYXdhaWksIE1pc3Npc3NpcHBpLCBOZXZhZGEsIE5ld1xcbiAgICAgICAgSGFtcHNoaXJlLCBOb3J0aCBEYWtvdGEsIE9yZWdvbiwgVGVubmVzc2VlLCBVdGFoLCBhbmQgV2lzY29uc2lu4oCUZGVidCBpc1xcbiAgICAgICAgbm90IGFsbG93ZWQgdG8gZXhjZWVkIGEgY2VydGFpbiBtZXRyaWMtYmFzZWQgdGhyZXNob2xkLiBUZW5uZXNzZWUsIGZvclxcbiAgICAgICAgZXhhbXBsZSwgY2FwcyBkZWJ0IHNlcnZpY2UgYXQgMTAgcGVyY2VudCBvZiBjb21iaW5lZCByZXZlbnVlcyBpbiBpdHNcXG4gICAgICAgIGdlbmVyYWwsIGRlYnQgc2VydmljZSwgYW5kIGhpZ2h3YXkgZnVuZHMuXFxuICAgIDwvbGk+XFxuICAgIDxsaT5cXG4gICAgICAgIDxzdHJvbmc+TWV0cmljLWJhc2VkIHdpdGggcmVmZXJlbmR1bSB0byBleGNlZWQuPC9zdHJvbmc+XFxuICAgICAgICBOb3J0aCBDYXJvbGluYSwgUGVubnN5bHZhbmlhLCBhbmQgV3lvbWluZyB1c2UgYSBtZXRyaWMgdG8gY2FwIGRlYnQgYnV0XFxuICAgICAgICBhbGxvdyBpc3N1YW5jZSBhYm92ZSB0aGUgY2FwIHdpdGggdm90ZXIgYXBwcm92YWwuXFxuICAgIDwvbGk+XFxuICAgIDxsaT5cXG4gICAgICAgIDxzdHJvbmc+Tm8gbGltaXQuPC9zdHJvbmc+XFxuICAgICAgICBNYXJ5bGFuZCBhbmQgVmVybW9udCBwbGFjZSBubyByZXN0cmljdGlvbnMgb24gR08gZGVidC5cXG4gICAgPC9saT5cXG4gICAgPGxpPlxcbiAgICAgICAgPHN0cm9uZz5Qcm9oaWJpdGlvbi48L3N0cm9uZz5cXG4gICAgICAgIEFyaXpvbmEsIENvbG9yYWRvLCBJbmRpYW5hLCBhbmQgTmVicmFza2EgcHJvaGliaXQgR08gZGVidC4gSW5kaWFuYSBsYXdcXG4gICAgICAgIGZvcmJpZHMgYW55IEdPIGRlYnQgdG8gYmUgaXNzdWVkOyB0aGUgb3RoZXJzIGF1dGhvcml6ZSBhbW91bnRzIHNvXFxuICAgICAgICBsb3figJQkMzUwLDAwMCBvciBsZXNz4oCUYXMgdG8gYmUgZXF1aXZhbGVudCB0byBwcm9oaWJpdGlvbnMuXFxuICAgIDwvbGk+XFxuICAgIDxsaT5cXG4gICAgICAgIDxzdHJvbmc+UmVmZXJlbmR1bSBhbmQvb3Igc3VwZXJtYWpvcml0eS48L3N0cm9uZz5cXG4gICAgICAgIFRoaXJ0ZWVuIHN0YXRlc+KAlEFsYXNrYSwgQXJrYW5zYXMsIENhbGlmb3JuaWEsIElkYWhvLCBJb3dhLCBLYW5zYXMsXFxuICAgICAgICBLZW50dWNreSwgTWFpbmUsIE1pY2hpZ2FuLCBNaW5uZXNvdGEsIE1pc3NvdXJpLCBNb250YW5hLCBhbmQgUmhvZGVcXG4gICAgICAgIElzbGFuZOKAlHJlcXVpcmUgc29tZSBjb21iaW5hdGlvbiBvZiB2b3RlciBhcHByb3ZhbCBhbmQvb3IgYSBsZWdpc2xhdGl2ZVxcbiAgICAgICAgc3VwZXJtYWpvcml0eSAoZ2VuZXJhbGx5IHRocmVlLWZpZnRocyBvciB0d28tdGhpcmRzKSB0byBpc3N1ZSBkZWJ0LlxcbiAgICA8L2xpPlxcbiAgICA8bGk+XFxuICAgICAgICA8c3Ryb25nPlJlZmVyZW5kdW0gYW5kL29yIHN1cGVybWFqb3JpdHkgYW5kIG1ldHJpYy48L3N0cm9uZz5cXG4gICAgICAgIEZvdXJ0ZWVuIHN0YXRlc+KAlERlbGF3YXJlLCBGbG9yaWRhLCBJbGxpbm9pcywgTG91aXNpYW5hLCBNYXNzYWNodXNldHRzLFxcbiAgICAgICAgTmV3IEplcnNleSwgTmV3IE1leGljbywgTmV3IFlvcmssIE9rbGFob21hLCBTb3V0aCBDYXJvbGluYSwgU291dGhcXG4gICAgICAgIERha290YSwgVGV4YXMsIFZpcmdpbmlhLCBhbmQgV2FzaGluZ3RvbuKAlHJlcXVpcmUgYSByZWZlcmVuZHVtIGFuZC9vclxcbiAgICAgICAgc3VwZXJtYWpvcml0eSBhbmQgaGF2ZSBhIG1ldHJpYy1iYXNlZCBjYXAgb24gZGVidCBvciBkZWJ0IHNlcnZpY2UuXFxuICAgIDwvbGk+XFxuPC91bD5cXG48ZGl2IGNsYXNzPVxcXCJwY3Qtbm90ZVxcXCI+PHA+XFxuICAgIDxzdHJvbmc+Tm90ZTo8L3N0cm9uZz4gVGhlIGNsYXNzaWZpY2F0aW9uIHN5c3RlbSBpcyBhIHZhcmlhdGlvbiBvbiB0aGUgYXBwcm9hY2ggdGFrZW4gaW4gRC5cXG4gICAgUm9kZXJpY2sgS2lld2lldCBhbmQgS3Jpc3RpbiBTemFrYWx5LCDigJxDb25zdGl0dXRpb25hbCBMaW1pdGF0aW9ucyBvblxcbkJvcnJvd2luZzogQW4gQW5hbHlzaXMgb2YgU3RhdGUgQm9uZGVkIEluZGVidGVkbmVzcyzigJ0gICAgPGNpdGU+VGhlIEpvdXJuYWwgb2YgTGF3LCBFY29ub21pY3MgJmFtcDsgT3JnYW5pemF0aW9uPC9jaXRlPiAxMiwgbm8uIDEgKDE5OTYpOlxcbiAgICA2Mi05NyxcXG4gICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuanN0b3Iub3JnL3N0YWJsZS83NjUwMzk/c2VxPTEjcGFnZV9zY2FuX3RhYl9jb250ZW50c1xcXCI+XFxuICAgICAgICBodHRwczovL3d3dy5qc3Rvci5vcmcvc3RhYmxlLzc2NTAzOT9zZXE9MSNwYWdlX3NjYW5fdGFiX2NvbnRlbnRzPC9hPi5cXG48L3A+XFxuPHA+XFxuICAgIDxzdHJvbmc+U291cmNlOjwvc3Ryb25nPiBQZXcgYW5hbHlzaXMgb2Ygc3RhdGUgY29uc3RpdHV0aW9ucyBhbmQgc3RhdHV0ZXNcXG48L3A+PC9kaXY+XFxuPGg0PlxcbiAgICBDZW50cmFsaXphdGlvbiAoZmlzY2FsIHllYXIgMjAxNClcXG48L2g0PlxcbjxwPlxcbiAgICBBbm90aGVyIGVmZmVjdCBvZiBBcml6b25h4oCZcyBwcm9oaWJpdGlvbiBvbiBHTyBkZWJ0IGlzIGRlY2VudHJhbGl6ZWQgZGVidFxcbiAgICBpc3N1YW5jZS48c3VwPjM8L3N1cD4gVGhpcyBtZWFuc1xcbiAgICBib3Jyb3dpbmcgaXMgZG9uZSBieSBlbnRpdGllcyBvdGhlciB0aGFuIHRoZSBwcmltYXJ54oCUbWVhbmluZ1xcbiAgICBzdGF0ZeKAlGdvdmVybm1lbnQsIGluY2x1ZGluZyB0aGUgaW5kZXBlbmRlbnQgYWdlbmNpZXMgYW5kIGF1dGhvcml0aWVzIGtub3duXFxuICAgIGFzIGNvbXBvbmVudCB1bml0cy4gQ2VudHJhbGl6YXRpb24gbWVhc3VyZXMgY29tcG9uZW50IHVuaXQgZGVidCBhcyBhIHNoYXJlXFxuICAgIG9mIHRoZSB0b3RhbCBkZWJ0IGlzc3VlZCBieSBib3RoIHRoZSBwcmltYXJ5IGdvdmVybm1lbnQgYW5kIGl0cyBjb21wb25lbnRcXG4gICAgdW5pdHMuXFxuPC9wPlxcbjxwPlxcbiAgICBDb21wb25lbnQgdW5pdCBkZWJ0IGdlbmVyYWxseSByZWxpZXMgbGVzcyBvbiBzdGF0ZSBmdW5kcyBmb3IgcmVwYXltZW50IHRoYW5cXG4gICAgcHJpbWFyeSBnb3Zlcm5tZW50IGRlYnQuIE9mdGVuLCBsZW5kZXJzIGhhdmUgbm8gbGVnYWwgY2xhaW0gb24gc3RhdGVcXG4gICAgZ2VuZXJhbCBmdW5kcyBpZiB0aGUgY29tcG9uZW50IHVuaXQgZGVmYXVsdHMuIEFzIGEgcmVzdWx0LCBzdGF0ZVxcbiAgICBjb21wYXJpc29ucyBiYXNlZCBvbiB0b3RhbCBkZWJ0IG1heSBiZSBtaXNsZWFkaW5nLiBNb250YW5hIGFuZCBEZWxhd2FyZSxcXG4gICAgZm9yIGV4YW1wbGUsIGhhdmUgYWJvdXQgdGhlIHNhbWUgdG90YWwgZGVidCwgYnV0IG1vc3Qgb2YgTW9udGFuYeKAmXMgZGVidCBpc1xcbiAgICBoZWxkIGJ5IGNvbXBvbmVudCB1bml0cyBhbmQgbW9zdCBvZiBEZWxhd2FyZeKAmXMgaXMgaGVsZCBieSB0aGUgc3RhdGUuXFxuPC9wPlxcbjxkaXYgY2xhc3M9XFxcInBjdC1ub3RlXFxcIj48cD5cXG4gICAgPHN0cm9uZz5Ob3RlOjwvc3Ryb25nPiBUbyBjYWxjdWxhdGUgY2VudHJhbGl6YXRpb24gaW4gYSBzdGF0ZSwgUGV3IGZpcnN0IGFuYWx5emVkIHRoZVxcbiAgICBzdGF0ZeKAmXMgY29tcHJlaGVuc2l2ZSBhbm51YWwgZmluYW5jaWFsIHJlcG9ydCB0byBkZXRlcm1pbmUgaG93IG11Y2ggZGVidFxcbiAgICB3YXMgaGVsZCBieSB0aGUgcHJpbWFyeSBnb3Zlcm5tZW50LiBUaGF0IHdhcyB0aGVuIGNvbXBhcmVkIHRvIGEgc3VtIG9mIHRoZVxcbiAgICBkZWJ0IG9mIG1ham9yIGNvbXBvbmVudCB1bml0cyBhcyByZXBvcnRlZCBpbiB0aGVpciBhbm51YWwgZmluYW5jaWFsXFxuICAgIHN0YXRlbWVudHMuPHN1cD40PC9zdXA+IFxcbjwvcD48L2Rpdj5cXG48aDQ+XFxuICAgIFRoZSBzdGF0ZS1sb2NhbCBib3Jyb3dpbmcgZGl2aXNpb24gKDIwMTUpXFxuPC9oND5cXG48cD5cXG4gICAgT25lIGZhY3RvciB0aGF0IGluZmx1ZW5jZXMgc3RhdGUgZGVidCBsZXZlbHMgaXMgdGhlIGRpdmlzaW9uIG9mIGJvcnJvd2luZ1xcbiAgICBiZXR3ZWVuIHN0YXRlIGFuZCBsb2NhbCBnb3Zlcm5tZW50cy4gSW4gc29tZSBzdGF0ZXMsIGxvY2FsIGdvdmVybm1lbnRzIGFyZVxcbiAgICByZXNwb25zaWJsZSBmb3IgcGF5aW5nIGZvciBtb3N0IGNhcGl0YWwgcHJvamVjdHMgd2l0aGluIHRoZWlyXFxuICAgIGp1cmlzZGljdGlvbnMuIEluIG90aGVyIHBsYWNlcywgdGhlIHN0YXRlIGlzIHJlc3BvbnNpYmxlIGZvciB0aG9zZVxcbiAgICBwcm9qZWN0cy4gSW5zdGVhZCBvZiBhIGNpdHkgb3IgdG93biBib25kaW5nIHRvIGZpbmFuY2UgdGhlbSwgdGhlIHN0YXRlXFxuICAgIHRha2VzIG9uIHRoaXMgZGVidOKAlGluY3JlYXNpbmcgaXRzIG92ZXJhbGwgYm9ycm93aW5nLiBUaGUgZGl2aXNpb24gb2ZcXG4gICAgYm9ycm93aW5nIHJlc3BvbnNpYmlsaXR5IGlzIHJlbGF0ZWQgdG8gdGhlIGRlYnQgbGltaXQuIExvY2FsIGdvdmVybm1lbnRzIGluXFxuICAgIEFyaXpvbmEsIGZvciBleGFtcGxlLCBib3Jyb3cgbW9yZSB0aGFuIHRoZSBzdGF0ZSBkb2VzIGJlY2F1c2UgdGhlIHN0YXRl4oCZc1xcbmFiaWxpdHkgdG8gYm9ycm93IGlzIHNvIHJlc3RyaWN0ZWQuPHN1cD41PC9zdXA+IFRoaXMgdG9vbCBtZWFzdXJlcyB0aGVcXG4gICAgc3RhdGUtbG9jYWwgYm9ycm93aW5nIGRpdmlzaW9uIGFzIHRoZSBzaGFyZSBvZiB0b3RhbCBkZWJ0IHdpdGhpbiBhIHN0YXRlXFxuICAgIGlzc3VlZCBieSBsb2NhbCBnb3Zlcm5tZW50cy5cXG48L3A+XFxuPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPjxwPlxcbiAgICA8c3Ryb25nPlNvdXJjZTo8L3N0cm9uZz4gUGV3IGFuYWx5c2lzIG9mIGRhdGEgZnJvbSBVLlMuIENlbnN1cyBCdXJlYXUsIOKAnEFubnVhbCBTdXJ2ZXkgb2ZcXG4gICAgU3RhdGUgYW5kIExvY2FsIEdvdmVybm1lbnQgRmluYW5jZXM6IDIwMTUgRGF0YSBSZWxlYXNl4oCdICgyMDE4KSxcXG4gICAgPGFcXG4gICAgICAgIGhyZWY9XFxcImh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWxcXFwiXFxuICAgID5cXG4gICAgICAgIGh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWw8L2E+XFxuPC9wPjwvZGl2PlxcbjxwPlxcbiAgICA8c3Ryb25nPjwvc3Ryb25nPlxcbjwvcD5cXG48aDMgY2xhc3M9XFxcInN0YXRpY1xcXCI+XFxuICAgIEZpc2NhbCBjb25kaXRpb25zIGFuZCBpbmZyYXN0cnVjdHVyZSBuZWVkc1xcbjwvaDM+XFxuPHA+XFxuICAgIEZpc2NhbCBjb25kaXRpb25zIG1heSBhZmZlY3QgYSBzdGF0ZeKAmXMgd2lsbGluZ25lc3MgdG8gaXNzdWUgZGVidCBhbmRcXG4gICAgYWJpbGl0eSB0byByZXBheSBpdCwgd2hpbGUgaW5mcmFzdHJ1Y3R1cmUgbmVlZHMgbWlnaHQgaW5jcmVhc2UgYSBzdGF0ZeKAmXNcXG4gICAgZGVtYW5kIGZvciBkZWJ0LiBPYnNlcnZpbmcgdHJlbmRzIGFuZCB2YXJpYXRpb25zIGFtb25nIHN0YXRlcyBpbiBib3RoXFxuICAgIGNhdGVnb3JpZXMgY2FuIGFsbG93IG9mZmljaWFscyB0byBjcmVhdGUgbW9yZSBhcHByb3ByaWF0ZSBwZWVyIGdyb3Vwcy5cXG48L3A+XFxuPGg0PlxcbiAgICBSZXZlbnVlIHZvbGF0aWxpdHkgKDE5OTctMjAxNilcXG48L2g0PlxcbjxwPlxcbiAgICBSZXZlbnVlIHZvbGF0aWxpdHkgaXMgdGhlIGFubnVhbCBmbHVjdHVhdGlvbiBpbiB0YXggY29sbGVjdGlvbnMgYW5kIGlzXFxuICAgIGFmZmVjdGVkIGJ5IGVhY2ggc3RhdGXigJlzIG1peCBvZiB0YXggc3RyZWFtcy4gSXQgaW5kaWNhdGVzIHdoZXRoZXIgYSBzdGF0ZVxcbiAgICBjYW4gZXhwZWN0IHRvIGRlZGljYXRlIGEgcmVsYXRpdmVseSBjb25zaXN0ZW50IHNoYXJlIG9mIGl0cyByZXZlbnVlIHRvIGl0c1xcbiAgICBsaWFiaWxpdGllcyB5ZWFyIHRvIHllYXIgb3Igd2hldGhlciB0aGF0IHNoYXJlIHdpbGwgc2hvdyBncmVhdGVyXFxuICAgIGZsdWN0dWF0aW9uIGFzIHJldmVudWUgdmFyaWVzLiBTdGF0ZXMgd2l0aCBzdGFibGUgcmV2ZW51ZSBjYW4gcGxhbiBkZWJ0XFxuICAgIGlzc3VhbmNlcyBhbmQgcGF5IGRvd24gZGVidCBtb3JlIGVhc2lseSB0aGFuIHN0YXRlcyB3aXRoIHVuY2VydGFpbiB0YXhcXG4gICAgY29sbGVjdGlvbnMgY2FuLjxzdXA+Njwvc3VwPiBTdGF0ZXNcXG4gICAgd2l0aCBtb3JlIHZvbGF0aWxlIHJldmVudWUgbWF5IHRoZXJlZm9yZSB3aXNoIHRvIGNvbXBhcmUgdGhlbXNlbHZlcyB0b1xcbiAgICBzdGF0ZXMgd2l0aCBzaW1pbGFyIGNvbmNlcm5zLlxcbjwvcD5cXG48cD5cXG4gICAgUGV3IHVzZWQgZGF0YSBmcm9tIDE5OTcgdG8gMjAxNiB0byBjYWxjdWxhdGUgYSByZXZlbnVlIHZvbGF0aWxpdHkgc2NvcmUgZm9yXFxuICAgIGVhY2ggc3RhdGUuIFRoZSBzY29yZSByZWZsZWN0cyB2YXJpYXRpb25zIGluIHllYXJseSBwZXJjZW50YWdlIGNoYW5nZXMgaW5cXG5yZXZlbnVlIGJldHdlZW4gMTk5NyBhbmQgMjAxNi48c3VwPjc8L3N1cD4gU3RhdGVzIGhhdmUgZGlmZmVyaW5nXFxuICAgIGxldmVscyBvZiB2b2xhdGlsaXR5IGJlY2F1c2UgdGhleSBoYXZlIHVuaXF1ZSByZXZlbnVlIG1peGVzLiBBbGFza2EgaGFzIGFcXG4gICAgaGlnaGx5IHZvbGF0aWxlIHJldmVudWUgc3RyZWFtIGJlY2F1c2UgbXVjaCBvZiBpdHMgY29sbGVjdGlvbnMgY29tZSBmcm9tXFxuICAgIHVucHJlZGljdGFibGUgc2V2ZXJhbmNlIHRheGVzIG9uIG9pbC4gT3RoZXIgc3RhdGVz4oCUc3VjaCBhcyBTb3V0aCBEYWtvdGEsXFxuICAgIHdoaWNoIGVhcm5zIG1vcmUgb2YgaXRzIHJldmVudWUgZnJvbSBzdGFibGUgc291cmNlcyBsaWtlIHBlcnNvbmFsIGluY29tZVxcbiAgICB0YXhlc+KAlGhhdmUgbGVzcyB2b2xhdGlsaXR5LiBBIGxvdyB2b2xhdGlsaXR5IHNjb3JlIG1lYW5zIHRoYXQgcmV2ZW51ZVxcbiAgICBsZXZlbHMgd2VyZSBzaW1pbGFyIGZyb20geWVhciB0byB5ZWFyLCBhbmQgYSBoaWdoIHNjb3JlIGluZGljYXRlcyB0aGF0XFxuICAgIHJldmVudWUgZ3JldyBvciBkZWNsaW5lZCBtb3JlIGRyYW1hdGljYWxseS5cXG48L3A+XFxuPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPjxwPlxcbiAgICA8c3Ryb25nPlNvdXJjZTo8L3N0cm9uZz4gVGhlIFBldyBDaGFyaXRhYmxlIFRydXN0cywg4oCcVGF4IFJldmVudWUgVm9sYXRpbGl0eSwgRlkgMTk5Ny0yMDE2LOKAnVxcbiAgICBsYXN0IG1vZGlmaWVkIEF1Zy4gMjksIDIwMTgsXFxuICAgIDxhXFxuICAgICAgICBocmVmPVxcXCJodHRwOi8vd3d3LnBld3RydXN0cy5vcmcvZW4vcmVzZWFyY2gtYW5kLWFuYWx5c2lzL2RhdGEtdmlzdWFsaXphdGlvbnMvMjAxNC9maXNjYWwtNTAjaW5kNlxcXCJcXG4gICAgPlxcbiAgICAgICAgaHR0cDovL3d3dy5wZXd0cnVzdHMub3JnL2VuL3Jlc2VhcmNoLWFuZC1hbmFseXNpcy9kYXRhLXZpc3VhbGl6YXRpb25zLzIwMTQvZmlzY2FsLTUwI2luZDY8L2E+XFxuPC9wPjwvZGl2PlxcbjxoND5cXG4gICAgUG9wdWxhdGlvbiBncm93dGggKDIwMDgtMTcpXFxuPC9oND5cXG48cD5cXG4gICAgUG9wdWxhdGlvbiBncm93dGggZHJpdmVzIGluZnJhc3RydWN0dXJlIG5lZWRzLiBNb3JlIHBlb3BsZSBtZWFucyBncmVhdGVyXFxuICAgIHByZXNzdXJlIG9uIGEgc3RhdGXigJlzIGluZnJhc3RydWN0dXJlLCBuZWNlc3NpdGF0aW5nIGltcHJvdmVtZW50cyBhbmQgbmV3XFxuICAgIGNvbnN0cnVjdGlvbi4gUmVzZWFyY2ggc2hvd3MgdGhhdCBhcyBhIHN0YXRl4oCZcyBwb3B1bGF0aW9uIGdyb3dzLCBzbyB0b29cXG5kb2VzIGl0cyBkZW1hbmQgZm9yLCBhbmQgaW4gc29tZSBjYXNlcyBzcGVuZGluZyBvbiwgY2FwaXRhbCBjb25zdHJ1Y3Rpb24uPHN1cD44PC9zdXA+IFxcbjwvcD5cXG48cD5cXG4gICAgQXMgYSByZXN1bHQsIHN0YXRlcyB3aXRoIHNpbWlsYXIgZ3Jvd3RoIHBhdHRlcm5zIG1heSBoYXZlIHNpbWlsYXIgZGVtYW5kc1xcbiAgICBmb3IgaW5mcmFzdHJ1Y3R1cmUuIEZvciB0aGlzIHJlYXNvbiwgUGV3IHVzZWQgcG9wdWxhdGlvbiBncm93dGggYXMgYSBwcm94eVxcbiAgICBmb3IgaW5mcmFzdHJ1Y3R1cmUgZGVtYW5kLCBhIG1ldHJpYyBmb3Igd2hpY2ggZXhhY3QsIHJlbGlhYmxlIHNvdXJjZXMgYXJlXFxuICAgIHNjYXJjZS4gT2JzZXJ2aW5nIHBvcHVsYXRpb24gZ3Jvd3RoIGNhbiBoZWxwIGlkZW50aWZ5IHBlZXJzIGFuZCBwcm92aWRlcyBhXFxuICAgIGRhdGEgcG9pbnQgbm90IG9mdGVuIHVzZWQgaW4gaW50ZXJzdGF0ZSBkZWJ0IGNvbXBhcmlzb25zLlxcbjwvcD5cXG48cD5cXG4gICAgUGV3IHNlbGVjdGVkIGEgMTAteWVhciBwb3B1bGF0aW9uIGdyb3d0aCByYXRlLCBtZWFzdXJlZCBhcyB0aGUgaW5jcmVhc2Ugb3JcXG4gICAgZGVjcmVhc2UgaW4gc3RhdGUgcG9wdWxhdGlvbiBiZXR3ZWVuIDIwMDggYW5kIDIwMTcuIEFsdGhvdWdoIG5vIGNvbnNlbnN1c1xcbiAgICBleGlzdHMgaW4gYWNhZGVtaWMgbGl0ZXJhdHVyZSByZWdhcmRpbmcgdGhlIGFwcHJvcHJpYXRlIHRpbWUgc3BhbiBmb3JcXG4gICAgZXhhbWluaW5nIHBvcHVsYXRpb24gdHJlbmRzLCB0aGlzIHBlcmlvZCBjYXB0dXJlZCB0aGUgdHJvdWdoIG9mIHRoZSBHcmVhdFxcbiAgICBSZWNlc3Npb24sIHRoZSBzdWJzZXF1ZW50IGVjb25vbWljIGV4cGFuc2lvbiwgYW5kIHRoZSByZXN1bHRpbmcgZGVtb2dyYXBoaWNcXG4gICAgYW5kIGdlb2dyYXBoaWMgc2hpZnRzLjxzdXA+OTwvc3VwPiBcXG48L3A+XFxuPGRpdiBjbGFzcz1cXFwicGN0LW5vdGVcXFwiPjxwPlxcbiAgICA8c3Ryb25nPlNvdXJjZXM6PC9zdHJvbmc+IFBldyBhbmFseXNpcyBvZiBkYXRhIGZyb20gVS5TLiBDZW5zdXMgQnVyZWF1LCDigJxBbm51YWwgU3VydmV5IG9mXFxuICAgIFN0YXRlIGFuZCBMb2NhbCBHb3Zlcm5tZW50IEZpbmFuY2VzOiAyMDE1IERhdGEgUmVsZWFzZeKAnSAoMjAxOCksXFxuICAgIDxhXFxuICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dy5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvZ292LWZpbmFuY2VzL25ld3Nyb29tL3VwZGF0ZXMvcmVsZWFzZS5odG1sXFxcIlxcbiAgICA+XFxuICAgICAgICBodHRwczovL3d3dy5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvZ292LWZpbmFuY2VzL25ld3Nyb29tL3VwZGF0ZXMvcmVsZWFzZS5odG1sPC9hPlxcbiAgICA7IFUuUy4gQ2Vuc3VzIEJ1cmVhdSwg4oCcQW5udWFsIEVzdGltYXRlcyBvZiB0aGUgUmVzaWRlbnQgUG9wdWxhdGlvbiBmb3IgdGhlXFxuICAgIFVuaXRlZCBTdGF0ZXMsIFJlZ2lvbnMsIFN0YXRlcywgYW5kIFB1ZXJ0byBSaWNvOiBBcHJpbCAxLCAyMDEwIHRvIEp1bHkgMSxcXG4gICAgMjAxNyzigJ0gVGFibGUgMSxcXG4gICAgPGFcXG4gICAgICAgIGhyZWY9XFxcImh0dHBzOi8vd3d3Mi5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvcG9wZXN0L3RhYmxlcy8yMDEwLTIwMTcvc3RhdGUvdG90YWxzL25zdC1lc3QyMDE3LTAxLnhsc3hcXFwiXFxuICAgID5cXG4gICAgICAgIGh0dHBzOi8vd3d3Mi5jZW5zdXMuZ292L3Byb2dyYW1zLXN1cnZleXMvcG9wZXN0L3RhYmxlcy8yMDEwLTIwMTcvc3RhdGUvdG90YWxzL25zdC1lc3QyMDE3LTAxLnhsc3g8L2E+XFxuICAgIDsgVS5TLiBDZW5zdXMgQnVyZWF1LCDigJxJbnRlcmNlbnNhbCBFc3RpbWF0ZXMgb2YgdGhlIFJlc2lkZW50IFBvcHVsYXRpb24gZm9yXFxuICAgIHRoZSBVbml0ZWQgU3RhdGVzLCBSZWdpb25zLCBTdGF0ZXMsIGFuZCBQdWVydG8gUmljbzogQXByaWwgMSwgMjAwMCB0byBKdWx5XFxuICAgIDEsIDIwMTAs4oCdIFRhYmxlIDEsXFxuICAgIDxhXFxuICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dzIuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3BvcGVzdC90YWJsZXMvMjAwMC0yMDEwL2ludGVyY2Vuc2FsL3N0YXRlL3N0LWVzdDAwaW50LTAxLnhsc1xcXCJcXG4gICAgPlxcbiAgICAgICAgaHR0cHM6Ly93d3cyLmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9wb3Blc3QvdGFibGVzLzIwMDAtMjAxMC9pbnRlcmNlbnNhbC9zdGF0ZS9zdC1lc3QwMGludC0wMS54bHM8L2E+XFxuPC9wPjwvZGl2PlxcbjxoMyBjbGFzcz1cXFwic3RhdGljXFxcIj5cXG4gICAgRGVidCBsZXZlbHMgKDIwMTUpXFxuPC9oMz5cXG48cD5cXG4gICAgRGVidCBsZXZlbHMgYXJlIGEgbmF0dXJhbCBwb2ludCBvZiBjb21wYXJpc29uIGFuZCBhcmUgaW5mbHVlbmNlZCBieSB0aGVcXG4gICAgcHJlY2VkaW5nIGNoYXJhY3RlcmlzdGljcy4gV2hpbGUgYW4gYWJzb2x1dGUgZG9sbGFyIGFtb3VudCBwcm92aWRlcyB1c2VmdWxcXG4gICAgaW5mb3JtYXRpb24sIGl0IGRvZXMgbm90IHB1dCB0aGUgYW1vdW50IG9mIGRlYnQgaW50byBjb250ZXh0IHJlbGF0aXZlIHRvXFxuICAgIHRoZSBzdGF0ZeKAmXMgcmVzb3VyY2VzLjxzdXA+MTA8L3N1cD4gXFxuICAgIEdpdmVuIHNpemUsIHBvcHVsYXRpb24sIGFuZCBlY29ub21pYyBkaWZmZXJlbmNlcyBhbW9uZyBzdGF0ZXMsIGEgZG9sbGFyXFxuICAgIGFtb3VudCBpcyBhbHNvIGxlc3MgdXNlZnVsIGZvciBzdGF0ZSBjb21wYXJpc29ucy4gSW5zdGVhZCwgbm9ybWFsaXplZFxcbiAgICByYXRpb3MgYWxsb3cgc3RhdGVzIG9mIHZhcmlvdXMgc2l6ZXMgdG8gY29tcGFyZSB0aGVtc2VsdmVzLiBDb25zaXN0ZW50IHdpdGhcXG4gICAgdGhlIGJlc3QgcHJhY3RpY2VzIGZvciB1bmRlcnN0YW5kaW5nIGRlYnQgYWZmb3JkYWJpbGl0eSwgUGV34oCZcyB0b29sXFxuICAgIGluY2x1ZGVzIHR3byByYXRpb3PigJRkZWJ0IHBlciBjYXBpdGEgYW5kIGRlYnQgYXMgYSBwZXJjZW50YWdlIG9mIHN0YXRlXFxuICAgIHBlcnNvbmFsIGluY29tZeKAlHRvIGdpdmUgYSBtb3JlIGNvbXBsZXRlIG1lYXN1cmUgb2YgYSBzdGF0ZeKAmXMgZGVidC5cXG4gICAgU3RhdGUtYmFzZWQgYW5hbHlzZXMgb2Z0ZW4gdXNlIGEgcmF0aW8gb2YgZGVidCBzZXJ2aWNlIHRvIHJldmVudWUgd2hlblxcbiAgICBldmFsdWF0aW5nIGRlYnQgbGV2ZWxzIGFuZCBzZXR0aW5nIGxpbWl0cy4gVGhpcyByYXRpbyBpcyBub3QgaW5jbHVkZWQgaW5cXG50aGlzIHRvb2wgZHVlIHRvIGNyb3NzLXN0YXRlIGNvbXBhcmFiaWxpdHkgaXNzdWVzLjxzdXA+MTE8L3N1cD4gXFxuPC9wPlxcbjxoND5cXG4gICAgRGVidCBwZXIgY2FwaXRhXFxuPC9oND5cXG48cD5cXG4gICAgQmVjYXVzZSBkZWJ0IGlzIHJlcGFpZCB0aHJvdWdoIHJldmVudWUgZ2VuZXJhbGx5IGluIHRoZSBmb3JtIG9mIHRheGVzIG9yXFxuICAgIHVzZXIgZmVlcyBwYWlkIGJ5IHJlc2lkZW50cywgYXNzZXNzaW5nIGRlYnQgcmVsYXRpdmUgdG8gaXRzIHJlcGF5bWVudFxcbiAgICBzb3VyY2XigJR0aGUgcmVzaWRlbnTigJRpcyBhIGNvbW1vbiBhcHByb2FjaC4gRGVidCBwZXIgY2FwaXRhLCB3aGljaCBtZWFzdXJlc1xcbiAgICB0b3RhbCBkZWJ0IGFnYWluc3QgYSBzdGF0ZeKAmXMgcG9wdWxhdGlvbiwgbWFrZXMgY29tcGFyaXNvbnMgYmV0d2VlbiBzdGF0ZXNcXG4gICAgb2YgZGlmZmVyZW50IHNpemVzIGZlYXNpYmxlIGFuZCBoZWxwcyBwb2xpY3ltYWtlcnMgdW5kZXJzdGFuZCB0aGUgZGVidFxcbiAgICBidXJkZW4gb24gaW5kaXZpZHVhbCByZXNpZGVudHMuXFxuPC9wPlxcbjxkaXYgY2xhc3M9XFxcInBjdC1ub3RlXFxcIj48cD5cXG4gICAgPHN0cm9uZz5Tb3VyY2VzOjwvc3Ryb25nPiBQZXcgYW5hbHlzaXMgb2YgZGF0YSBmcm9tIFUuUy4gQ2Vuc3VzIEJ1cmVhdSwg4oCcQW5udWFsIFN1cnZleSBvZlxcbiAgICBTdGF0ZSBhbmQgTG9jYWwgR292ZXJubWVudCBGaW5hbmNlcyzigJ0gMjAxNSBEYXRhIFJlbGVhc2UgKDIwMTgpLFxcbiAgICA8YVxcbiAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL2dvdi1maW5hbmNlcy9uZXdzcm9vbS91cGRhdGVzL3JlbGVhc2UuaHRtbFxcXCJcXG4gICAgPlxcbiAgICAgICAgaHR0cHM6Ly93d3cuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL2dvdi1maW5hbmNlcy9uZXdzcm9vbS91cGRhdGVzL3JlbGVhc2UuaHRtbDwvYT5cXG4gICAgOyBVLlMuIENlbnN1cyBCdXJlYXUsIOKAnEFubnVhbCBFc3RpbWF0ZXMgb2YgdGhlIFJlc2lkZW50IFBvcHVsYXRpb24gZm9yIHRoZVxcbiAgICBVbml0ZWQgU3RhdGVzLCBSZWdpb25zLCBTdGF0ZXMsIGFuZCBQdWVydG8gUmljbzogQXByaWwgMSwgMjAxMCB0byBKdWx5IDEsXFxuICAgIDIwMTcs4oCdIFRhYmxlIDEsXFxuICAgIDxhXFxuICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dzIuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3BvcGVzdC90YWJsZXMvMjAxMC0yMDE3L3N0YXRlL3RvdGFscy9uc3QtZXN0MjAxNy0wMS54bHN4XFxcIlxcbiAgICA+XFxuICAgICAgICBodHRwczovL3d3dzIuY2Vuc3VzLmdvdi9wcm9ncmFtcy1zdXJ2ZXlzL3BvcGVzdC90YWJsZXMvMjAxMC0yMDE3L3N0YXRlL3RvdGFscy9uc3QtZXN0MjAxNy0wMS54bHN4PC9hPlxcbjwvcD48L2Rpdj5cXG48aDQ+XFxuICAgIERlYnQgYXMgYSBwZXJjZW50YWdlIG9mIHN0YXRlIHBlcnNvbmFsIGluY29tZVxcbjwvaDQ+XFxuPHA+XFxuICAgIEFub3RoZXIgY29tbW9uIHByYWN0aWNlLCB1c2VkIGJ5IGNyZWRpdCByYXRpbmcgYWdlbmNpZXMgYW5kIGFjYWRlbWljcywgaXNcXG4gICAgdG8gY29uc2lkZXIgYSBzdGF0ZeKAmXMgZGVidCBsZXZlbCByZWxhdGl2ZSB0byByZXNvdXJjZXMgYXZhaWxhYmxlIGZvclxcbiAgICByZXBheW1lbnQuPHN1cD4xMjwvc3VwPiBBIHJhdGlvXFxuICAgIGNvbXBhcmluZyBkZWJ0IG5vdCBvbmx5IHRvIHBvcHVsYXRpb24gYnV0IHRvIHRheHBheWVyIGVhcm5pbmcgcG93ZXIgb3JcXG53ZWFsdGggaXMgdGhlcmVmb3JlIGJlbmVmaWNpYWwuPHN1cD4xMzwvc3VwPiBEZWJ0IGFzIGEgcGVyY2VudGFnZVxcbiAgICBvZiBzdGF0ZSBwZXJzb25hbCBpbmNvbWUgYWRkcmVzc2VzIHRoaXMgYW5kIGlzIGNvbW1vbmx5IHVzZWQgYnkgc3RhdGVzIHRvXFxuICAgIGV2YWx1YXRlIGRlYnQgbGV2ZWxzLlxcbjwvcD5cXG48ZGl2IGNsYXNzPVxcXCJwY3Qtbm90ZVxcXCI+PHA+XFxuICAgIDxzdHJvbmc+U291cmNlczo8L3N0cm9uZz4gUGV3IGFuYWx5c2lzIG9mIGRhdGEgZnJvbSBVLlMuIENlbnN1cyBCdXJlYXUsIOKAnEFubnVhbCBTdXJ2ZXkgb2ZcXG4gICAgU3RhdGUgYW5kIExvY2FsIEdvdmVybm1lbnQgRmluYW5jZXMs4oCdIDIwMTUgRGF0YSBSZWxlYXNlICgyMDE4KSxcXG4gICAgPGFcXG4gICAgICAgIGhyZWY9XFxcImh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWxcXFwiXFxuICAgID5cXG4gICAgICAgIGh0dHBzOi8vd3d3LmNlbnN1cy5nb3YvcHJvZ3JhbXMtc3VydmV5cy9nb3YtZmluYW5jZXMvbmV3c3Jvb20vdXBkYXRlcy9yZWxlYXNlLmh0bWw8L2E+XFxuICAgIDsgVS5TLiBCdXJlYXUgb2YgRWNvbm9taWMgQW5hbHlzaXMsIOKAnFNBMSBQZXJzb25hbCBJbmNvbWUgU3VtbWFyeTogUGVyc29uYWxcXG4gICAgSW5jb21lLCBQb3B1bGF0aW9uLCBQZXIgQ2FwaXRhIFBlcnNvbmFsIEluY29tZSzigJ1cXG4gICAgaHR0cHM6Ly93d3cuYmVhLmdvdi9kYXRhL2luY29tZS1zYXZpbmcvcGVyc29uYWwtaW5jb21lLWJ5LXN0YXRlLlxcbjwvcD48L2Rpdj5cXG48YXNpZGUgY2xhc3M9XFxcInBjdC1ib3hcXFwiPlxcbiAgICAgICAgPGg0PkNlbnN1cyBEYXRhIHZzLiBNb29keeKAmXMgTmV0IFRheC1TdXBwb3J0ZWQgRGVidCBDYWxjdWxhdGlvbnM8L2g0PlxcbiAgICBcXG5cXHQ8cD5cXG5cXHQgICAgV2hpbGUgZGVidCBhZmZvcmRhYmlsaXR5IHN0dWRpZXMgb2Z0ZW4gdXNlIE1vb2R54oCZcyBJbnZlc3RvcnMgU2VydmljZSBJbmMuXFxuXFx0ICAgIGNhbGN1bGF0aW9ucyBvZiBzdGF0ZSBuZXQgdGF4LXN1cHBvcnRlZCBkZWJ0IHRvIGNvbXBhcmUgYm9ycm93aW5nLCBUaGUgUGV3XFxuXFx0ICAgIENoYXJpdGFibGUgVHJ1c3RzIHVzZWQgVS5TLiBDZW5zdXMgQnVyZWF1IGRhdGEgZm9yIHR3byByZWFzb25zLlxcblxcdDwvcD5cXG5cXHQ8cD5cXG5cXHQgICAgRmlyc3QsIHRoZSBDZW5zdXMgQnVyZWF1IGNhcHR1cmVzIGEgYnJvYWRlciBzY29wZSBvZiBkZWJ0IHRoYW4gZG9lc1xcblxcdCAgICBNb29keeKAmXMsIGluY2x1ZGluZyBzb21lIGRlYnQgaGVsZCBieSBkZXBlbmRlbnQgYWdlbmNpZXMgc3VjaCBhcyBwdWJsaWNcXG5cXHRhdXRob3JpdGllcyBhbmQgY29tcG9uZW50IHVuaXRzLDxzdXA+MTQ8L3N1cD4gZ2l2aW5nIGEgbW9yZVxcblxcdCAgICBhY2N1cmF0ZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZGVidCBidXJkZW4gc3VwcG9ydGVkIGJ5IGEgc3RhdGXigJlzXFxuXFx0ICAgIHJlc2lkZW50cy48c3VwPjE1PC9zdXA+IFNlY29uZCwgdGhlXFxuXFx0ICAgIGJ1cmVhdSBhbmFseXplcyBob3cgY2xvc2VseSB0aGUgZGVwZW5kZW50IGFnZW5jaWVzIGl0IGluY2x1ZGVzIGluIGl0c1xcblxcdCAgICBkZWZpbml0aW9uIG9mIHN0YXRlIGRlYnQgYXJlIGZpc2NhbGx5IG9yIGFkbWluaXN0cmF0aXZlbHkgdGllZCB0byB0aGVcXG5cXHQgICAgc3RhdGUuIEJlY2F1c2UgdWx0aW1hdGUgcmVzcG9uc2liaWxpdHkgZm9yIGEgZGVidCBjYW4gYmUgbmVidWxvdXPigJRhbmQgYVxcblxcdCAgICBzdGF0ZSBtYXkgbm90IHN1cHBvcnQgdGhlIGxpYWJpbGl0aWVzIG9mIGl0cyBtb3JlIGluZGVwZW5kZW50IGVudGl0aWVz4oCUdGhpc1xcblxcdGZ1cnRoZXIgZW5zdXJlcyBhbiBhY2N1cmF0ZSBkZXNjcmlwdGlvbiBvZiBzdGF0ZSBkZWJ0LjxzdXA+MTY8L3N1cD4gXFxuXFx0PC9wPlxcbjwvYXNpZGU+XFxuPGgzIGNsYXNzPVxcXCJzdGF0aWNcXFwiPlxcbiAgICBDcmVkaXQgcmF0aW5ncyAoU2VwdGVtYmVyIDIwMTggYW5kIFNlcHRlbWJlciAyMDE1KVxcbjwvaDM+XFxuPHA+XFxuICAgIFRoaXMgdG9vbCBhbGxvd3MgdXNlcnMgdG8gZ3JvdXAgc3RhdGVzIGJ5IFN0YW5kYXJkICZhbXA7IFBvb3LigJlzIGNyZWRpdFxcbiAgICByYXRpbmdzIHRvIGV4cGxvcmUgZGlmZmVyZW5jZXMgYW1vbmcgdGhvc2Ugd2l0aCBzaW1pbGFyIGNyZWRpdCBwcm9maWxlcy5cXG4gICAgVGhlIHVzZXIgY2FuIHNlbGVjdCBjcmVkaXQgcmF0aW5ncyBmcm9tIDIwMTggb3IgMjAxNSB0byBsb29rIGF0IGVpdGhlclxcbiAgICByZWNlbnQgaW5mb3JtYXRpb24gb3IgaW5mb3JtYXRpb24gY29ycmVzcG9uZGluZyB0byBvdGhlciwgZWFybGllciBkYXRhXFxuICAgIHBvaW50cyBpbiB0aGlzIHRvb2wuXFxuPC9wPlxcbjxkaXYgY2xhc3M9XFxcInBjdC1ub3RlXFxcIj48cD5cXG4gICAgPHN0cm9uZz5Ob3RlOjwvc3Ryb25nPiBQZXcgY29sbGVjdGVkIHJhdGluZ3Mgb24gZ2VuZXJhbCBvYmxpZ2F0aW9uIGlzc3VhbmNlIGFzIG9mIFNlcHRlbWJlclxcbiAgICAyMDE4IGFuZCBTZXB0ZW1iZXIgMjAxNS4gSWYgdGhlIHN0YXRlIGRvZXMgbm90IGlzc3VlIEdPIGJvbmRzLCB0aGUgcmF0aW5nXFxuICAgIG9uIHRoZSBzZW5pb3ItbW9zdCB0YXgtYmFja2VkIGlzc3VhbmNlIHdhcyB1c2VkIGluc3RlYWQuIEluIGFkZGl0aW9uIHRvXFxuICAgIFMmYW1wO1AsIHRoZXJlIGFyZSB0d28gb3RoZXIgbWFqb3IgY3JlZGl0IHJhdGluZyBhZ2VuY2llczogTW9vZHnigJlzIGFuZFxcbiAgICBGaXRjaC4gVGhlcmUgaXMgbGl0dGxlIHZhcmlhdGlvbiBpbiByYXRpbmdzIGFtb25nIHRoZSB0aHJlZSBhZ2VuY2llcy5cXG48L3A+PC9kaXY+XFxuPGRpdiBjbGFzcz1cXFwicGN0LWVuZG5vdGVzXFxcIj5cXG4gICAgXFxuICAgIDxkaXYgaWQ9XFxcImVkbjFcXFwiPlxcbiAgICAgICAgPHA+XFxuIDEuIFxcbiAgICAgICAgICAgIFRoZSBQZXcgQ2hhcml0YWJsZSBUcnVzdHMsIOKAnFN0cmF0ZWdpZXMgZm9yIE1hbmFnaW5nIFN0YXRlIERlYnTigJ1cXG4gICAgICAgICAgICAoMjAxNyksXFxuICAgICAgICAgICAgPGFcXG4gICAgICAgICAgICAgICAgaHJlZj1cXFwiaHR0cDovL3d3dy5wZXd0cnVzdHMub3JnL2VuL3Jlc2VhcmNoLWFuZC1hbmFseXNpcy9yZXBvcnRzLzIwMTcvMDYvc3RyYXRlZ2llcy1mb3ItbWFuYWdpbmctc3RhdGUtZGVidFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIGh0dHA6Ly93d3cucGV3dHJ1c3RzLm9yZy9lbi9yZXNlYXJjaC1hbmQtYW5hbHlzaXMvcmVwb3J0cy8yMDE3LzA2L3N0cmF0ZWdpZXMtZm9yLW1hbmFnaW5nLXN0YXRlLWRlYnQ8L2E+LlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuMlxcXCI+XFxuICAgICAgICA8cD5cXG4gMi4gXFxuICAgICAgICAgICAgSWJpZC5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjNcXFwiPlxcbiAgICAgICAgPHA+XFxuIDMuIFxcbiAgICAgICAgICAgIFJlc2VhcmNoIG9uIHN0YXRlIGJvcnJvd2luZyBwcmFjdGljZXMgaGFzIGZvdW5kIHRoYXQgZGVidCBsaW1pdHNcXG4gICAgICAgICAgICBkZWNyZWFzZSB0aGUgY2VudHJhbGl6YXRpb24gb2Ygc3RhdGUgZGVidCBhcyBzdGF0ZXMgYm9ycm93IHRocm91Z2hcXG4gICAgICAgICAgICBvdGhlciBlbnRpdGllcyB0byBjaXJjdW12ZW50IHRoZXNlIGxpbWl0cy4gU2VlIEJldmVybHkgUy4gQnVuY2gsXFxuICAgICAgICAgICAg4oCcVGhlIEVmZmVjdCBvZiBDb25zdGl0dXRpb25hbCBEZWJ0IExpbWl0cyBvbiBTdGF0ZSBHb3Zlcm5tZW50c+KAmSBVc2VcXG4gICAgICAgICAgICBvZiBQdWJsaWMgQXV0aG9yaXRpZXMs4oCdIDxjaXRlPlB1YmxpYyBDaG9pY2UgPC9jaXRlPjY4LCBuby4gMS0zICgxOTkxKTpcXG4gICAgICAgICAgICA1Ny02OSxcXG4gICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwczovL2xpbmsuc3ByaW5nZXIuY29tL2FydGljbGUvMTAuMTAwNy9CRjAwMTczODE5XFxcIj5cXG4gICAgICAgICAgICAgICAgaHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9hcnRpY2xlLzEwLjEwMDcvQkYwMDE3MzgxOTwvYT5cXG4gICAgICAgICAgICA7IFJob25kYSBSaWhlcmQgVHJhdXRtYW4sIOKAnFRoZSBJbXBhY3Qgb2YgU3RhdGUgRGVidCBNYW5hZ2VtZW50IG9uXFxuICAgICAgICAgICAgRGVidCBBY3Rpdml0eSzigJ0gPGNpdGU+UHVibGljIEJ1ZGdldGluZyAmYW1wOyBGaW5hbmNlIDwvY2l0ZT4xNSwgbm8uIDJcXG4gICAgICAgICAgICAoMTk5NSk6IDMzLTUxLFxcbiAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vZG9pLm9yZy8xMC4xMTExLzE1NDAtNTg1MC4wMTAzOFxcXCI+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vZG9pLm9yZy8xMC4xMTExLzE1NDAtNTg1MC4wMTAzODwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG40XFxcIj5cXG4gICAgICAgIDxwPlxcbiA0LiBcXG4gICAgICAgICAgICBGb3IgbW9yZSBkZXRhaWwgb24gaG93IHdlIGNvbGxlY3RlZCB0aGVzZSBkYXRhLCBzZWUgVGhlIFBld1xcbiAgICAgICAgICAgIENoYXJpdGFibGUgVHJ1c3RzLCDigJxTdHJhdGVnaWVzIGZvciBNYW5hZ2luZyBTdGF0ZSBEZWJ0LOKAnVxcbiAgICAgICAgICAgIG1ldGhvZG9sb2d5LlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuNVxcXCI+XFxuICAgICAgICA8cD5cXG4gNS4gXFxuICAgICAgICAgICAgRm9yIGEgZGlzY3Vzc2lvbiBvZiB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gZGVidCBsaW1pdHMgYW5kIGxvY2FsXFxuICAgICAgICAgICAgYm9ycm93aW5nLCBzZWUgRC4gUm9kZXJpY2sgS2lld2lldCBhbmQgS3Jpc3RpbiBTemFrYWx5LFxcbiAgICAgICAgICAgIOKAnENvbnN0aXR1dGlvbmFsIExpbWl0YXRpb25zIG9uIEJvcnJvd2luZzogQW4gQW5hbHlzaXMgb2YgU3RhdGVcXG5Cb25kZWQgSW5kZWJ0ZWRuZXNzLOKAnSAgICAgICAgICAgIDxjaXRlPlRoZSBKb3VybmFsIG9mIExhdywgRWNvbm9taWNzICZhbXA7IE9yZ2FuaXphdGlvbiA8L2NpdGU+MTIsIG5vLiAxXFxuICAgICAgICAgICAgKDE5OTYpOiA2Mi05NyxcXG4gICAgICAgICAgICA8YVxcbiAgICAgICAgICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dy5qc3Rvci5vcmcvc3RhYmxlLzc2NTAzOT9zZXE9MSNwYWdlX3NjYW5fdGFiX2NvbnRlbnRzXFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgaHR0cHM6Ly93d3cuanN0b3Iub3JnL3N0YWJsZS83NjUwMzk/c2VxPTEjcGFnZV9zY2FuX3RhYl9jb250ZW50czwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG42XFxcIj5cXG4gICAgICAgIDxwPlxcbiA2LiBcXG4gICAgICAgICAgICBPbmUgc3R1ZHkgZm91bmQgdGhhdCBhcyBlY29ub21pYyB2b2xhdGlsaXR5IGluY3JlYXNlcywgc3RhdGVzXFxuICAgICAgICAgICAgcHJlZmVyIHRvIHBheSBmb3IgaW5mcmFzdHJ1Y3R1cmUgcHJvamVjdHMgd2l0aCBjYXNoIHJhdGhlciB0aGFuXFxuICAgICAgICAgICAgdGhyb3VnaCBmaW5hbmNpbmcuIFdlbiBXYW5nLCBZaWxpbiBIb3UsIGFuZCBXaWxsaWFtIER1bmNvbWUsXFxuICAgICAgICAgICAg4oCcRGV0ZXJtaW5hbnRzIG9mIFBheS1hcy1Zb3UtR28gRmluYW5jaW5nIG9mIENhcGl0YWwgUHJvamVjdHM6XFxuICAgICAgICAgICAgRXZpZGVuY2UgRnJvbSB0aGUgU3RhdGVzLOKAnSA8Y2l0ZT5QdWJsaWMgQnVkZ2V0aW5nICZhbXA7IEZpbmFuY2UgPC9jaXRlPlxcbiAgICAgICAgICAgIDI3LCBuby4gNCAoMjAwNyk6IDE4LTQyLFxcbiAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vZG9pLm9yZy8xMC4xMTExL2ouMTU0MC01ODUwLjIwMDcuMDA4OTIueFxcXCI+XFxuICAgICAgICAgICAgICAgIGh0dHBzOi8vZG9pLm9yZy8xMC4xMTExL2ouMTU0MC01ODUwLjIwMDcuMDA4OTIueDwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG43XFxcIj5cXG4gICAgICAgIDxwPlxcbiA3LiBcXG4gICAgICAgICAgICBUaGUgUGV3IENoYXJpdGFibGUgVHJ1c3RzLCDigJxUYXggUmV2ZW51ZSBWb2xhdGlsaXR5IFZhcmllcyBBY3Jvc3NcXG4gICAgICAgICAgICBTdGF0ZXMsIFJldmVudWUgU3RyZWFtcyzigJ0gYWNjZXNzZWQgU2VwdC4gMTAsIDIwMTgsXFxuICAgICAgICAgICAgPGFcXG4gICAgICAgICAgICAgICAgaHJlZj1cXFwiaHR0cDovL3d3dy5wZXd0cnVzdHMub3JnL2VuL211bHRpbWVkaWEvZGF0YS12aXN1YWxpemF0aW9ucy8yMDE0L2Zpc2NhbC01MCNpbmQ2XFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgaHR0cDovL3d3dy5wZXd0cnVzdHMub3JnL2VuL211bHRpbWVkaWEvZGF0YS12aXN1YWxpemF0aW9ucy8yMDE0L2Zpc2NhbC01MCNpbmQ2PC9hPi5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjhcXFwiPlxcbiAgICAgICAgPHA+XFxuIDguIFxcbiAgICAgICAgICAgIFJvbmFsZCBDLiBGaXNoZXIgYW5kIFJvYmVydCBXLiBXYXNzbWVyLCDigJxUaGUgSXNzdWFuY2Ugb2YgU3RhdGUgYW5kXFxuTG9jYWwgRGVidCBEdXJpbmcgdGhlIFVuaXRlZCBTdGF0ZXMgR3JlYXQgUmVjZXNzaW9uLOKAnSAgICAgICAgICAgIDxjaXRlPk5hdGlvbmFsIFRheCBKb3VybmFsPC9jaXRlPiA2Nywgbm8uIDEgKDIwMTQpOiAxMTMtNTAsXFxuICAgICAgICAgICAgPGFcXG4gICAgICAgICAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly9pZGVhcy5yZXBlYy5vcmcvYS9udGovam91cm5sL3Y2N3kyMDE0aTFwMTEzLTE1MC5odG1sXFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgaHR0cHM6Ly9pZGVhcy5yZXBlYy5vcmcvYS9udGovam91cm5sL3Y2N3kyMDE0aTFwMTEzLTE1MC5odG1sPC9hPlxcbiAgICAgICAgICAgIDsgUm9uYWxkIEMuIEZpc2hlciBhbmQgUm9iZXJ0IFcuIFdhc3NtZXIsIOKAnEFuIEFuYWx5c2lzIG9mXFxuU3RhdGUtTG9jYWwgR292ZXJubWVudCBDYXBpdGFsIEV4cGVuZGl0dXJlIER1cmluZyB0aGUgMjAwMHMs4oCdICAgICAgICAgICAgPGNpdGU+UHVibGljIEJ1ZGdldGluZyAmYW1wOyBGaW5hbmNlPC9jaXRlPiAzNSwgbm8uIDEgKDIwMTUpOiAzLTI4LFxcbiAgICAgICAgICAgIDxhXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcImh0dHBzOi8vb25saW5lbGlicmFyeS53aWxleS5jb20vZG9pL2Ficy8xMC4xMTExL3BiYWYuMTIwNjJcXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICBodHRwczovL29ubGluZWxpYnJhcnkud2lsZXkuY29tL2RvaS9hYnMvMTAuMTExMS9wYmFmLjEyMDYyPC9hPi5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjlcXFwiPlxcbiAgICAgICAgPHA+XFxuIDkuIFxcbiAgICAgICAgICAgIFRoZSBOYXRpb25hbCBCdXJlYXUgb2YgRWNvbm9taWMgUmVzZWFyY2gsIOKAnFVTIEJ1c2luZXNzIEN5Y2xlXFxuICAgICAgICAgICAgRXhwYW5zaW9ucyBhbmQgQ29udHJhY3Rpb25zLOKAnSBTZXB0LiAyMCwgMjAxMCxcXG4gICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwOi8vd3d3Lm5iZXIub3JnL2N5Y2xlcy5odG1sXFxcIj5cXG4gICAgICAgICAgICAgICAgaHR0cDovL3d3dy5uYmVyLm9yZy9jeWNsZXMuaHRtbDwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG4xMFxcXCI+XFxuICAgICAgICA8cD5cXG4gMTAuIFxcbiAgICAgICAgICAgIEplbm5pZmVyIFdlaW5lciwg4oCcQXNzZXNzaW5nIHRoZSBBZmZvcmRhYmlsaXR5IG9mIFN0YXRlIERlYnQs4oCdIE5ld1xcbiAgICAgICAgICAgIEVuZ2xhbmQgUHVibGljIFBvbGljeSBDZW50ZXIgYXQgdGhlIEZlZGVyYWwgUmVzZXJ2ZSBCYW5rIG9mIEJvc3RvblxcbiAgICAgICAgICAgICgyMDEzKSxcXG4gICAgICAgICAgICA8YVxcbiAgICAgICAgICAgICAgICBocmVmPVxcXCJodHRwczovL3d3dy5ib3N0b25mZWQub3JnL3B1YmxpY2F0aW9ucy9uZXctZW5nbGFuZC1wdWJsaWMtcG9saWN5LWNlbnRlci1yZXNlYXJjaC1yZXBvcnQvMjAxMy9hc3Nlc3NpbmctdGhlLWFmZm9yZGFiaWxpdHktb2Ytc3RhdGUtZGVidC5hc3B4XFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgaHR0cHM6Ly93d3cuYm9zdG9uZmVkLm9yZy9wdWJsaWNhdGlvbnMvbmV3LWVuZ2xhbmQtcHVibGljLXBvbGljeS1jZW50ZXItcmVzZWFyY2gtcmVwb3J0LzIwMTMvYXNzZXNzaW5nLXRoZS1hZmZvcmRhYmlsaXR5LW9mLXN0YXRlLWRlYnQuYXNweDwvYT4uXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG4xMVxcXCI+XFxuICAgICAgICA8cD5cXG4gMTEuIFxcbiAgICAgICAgICAgIEluIENBRlJzLCBzdGF0ZXMgcmVwb3J0IGRlYnQgc2VydmljZSBwYXltZW50cyBmcm9tIGEgdmFyaWV0eSBvZlxcbiAgICAgICAgICAgIGZ1bmRzLiBVc2luZyB0aGlzIGluZm9ybWF0aW9uIHRvIGNvbnN0cnVjdCBhIGNvbXBhcmFibGUgbWVhc3VyZSBvZlxcbiAgICAgICAgICAgIGRlYnQgc2VydmljZSBhcyBhIHNoYXJlIG9mIGdlbmVyYWwgZnVuZCByZXZlbnVlIHJlcXVpcmVzIGEgZGV0YWlsZWRcXG4gICAgICAgICAgICB1bmRlcnN0YW5kaW5nIG9mIGVhY2ggc3RhdGXigJlzIHJlcG9ydGluZyBwcmFjdGljZXMuXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG4xMlxcXCI+XFxuICAgICAgICA8cD5cXG4gMTIuIFxcbiAgICAgICAgICAgIEplbm5pZmVyIFdlaW5lciwg4oCcQSBHdWlkZSB0byBTdGF0ZSBEZWJ0IEFmZm9yZGFiaWxpdHkgU3R1ZGllczpcXG4gICAgICAgICAgICBDb21tb24gRWxlbWVudHMgYW5kIEJlc3QgUHJhY3RpY2VzLOKAnSBOZXcgRW5nbGFuZCBQdWJsaWMgUG9saWN5XFxuICAgICAgICAgICAgQ2VudGVyIGF0IHRoZSBGZWRlcmFsIFJlc2VydmUgQmFuayBvZiBCb3N0b24gKDIwMTMpLFxcbiAgICAgICAgICAgIDxhXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcImh0dHBzOi8vd3d3LmJvc3RvbmZlZC5vcmcvcHVibGljYXRpb25zL25ldy1lbmdsYW5kLXB1YmxpYy1wb2xpY3ktY2VudGVyLXBvbGljeS1icmllZi8yMDEzL2EtZ3VpZGUtdG8tc3RhdGUtZGVidC1hZmZvcmRhYmlsaXR5LXN0dWRpZXMtY29tbW9uLWVsZW1lbnRzLWFuZC1iZXN0LXByYWN0aWNlcy5hc3B4XFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgaHR0cHM6Ly93d3cuYm9zdG9uZmVkLm9yZy9wdWJsaWNhdGlvbnMvbmV3LWVuZ2xhbmQtcHVibGljLXBvbGljeS1jZW50ZXItcG9saWN5LWJyaWVmLzIwMTMvYS1ndWlkZS10by1zdGF0ZS1kZWJ0LWFmZm9yZGFiaWxpdHktc3R1ZGllcy1jb21tb24tZWxlbWVudHMtYW5kLWJlc3QtcHJhY3RpY2VzLmFzcHg8L2E+XFxuICAgICAgICAgICAgOyBDaGFybGVzIEJyZWNoZXIsIEt1cnQgUmljaHdlcmdlciwgYW5kIE1hcmNpYSBWYW4gV2FnbmVyLCDigJxBblxcbkFwcHJvYWNoIHRvIE1lYXN1cmluZyB0aGUgQWZmb3JkYWJpbGl0eSBvZiBTdGF0ZSBEZWJ0LOKAnSAgICAgICAgICAgIDxjaXRlPlB1YmxpYyBCdWRnZXRpbmcgJmFtcDsgRmluYW5jZTwvY2l0ZT4gMjMsIG5vLiA0ICgyMDAzKTogNjUtODUsXFxuICAgICAgICAgICAgPGFcXG4gICAgICAgICAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly9vbmxpbmVsaWJyYXJ5LndpbGV5LmNvbS9kb2kvYWJzLzEwLjExMTEvai4wMjc1LTExMDAuMjAwMy4wMjMwNDAwNC54XFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgaHR0cHM6Ly9vbmxpbmVsaWJyYXJ5LndpbGV5LmNvbS9kb2kvYWJzLzEwLjExMTEvai4wMjc1LTExMDAuMjAwMy4wMjMwNDAwNC54PC9hPi5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjEzXFxcIj5cXG4gICAgICAgIDxwPlxcbiAxMy4gXFxuICAgICAgICAgICAgVy4gQmFydGxleSBIaWxkcmV0aCBhbmQgR2VyYWxkIEouIE1pbGxlciwg4oCcRGVidCBhbmQgdGhlIExvY2FsXFxuICAgICAgICAgICAgRWNvbm9teTogUHJvYmxlbXMgaW4gQmVuY2htYXJraW5nIExvY2FsIEdvdmVybm1lbnQgRGVidFxcbiAgICAgICAgICAgIEFmZm9yZGFiaWxpdHks4oCdIDxjaXRlPlB1YmxpYyBCdWRnZXRpbmcgJmFtcDsgRmluYW5jZTwvY2l0ZT4gMjIsIG5vLiA0XFxuICAgICAgICAgICAgKDIwMDMpOiA5OS0xMTMsXFxuICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly9kb2kub3JnLzEwLjExMTEvMTU0MC01ODUwLjAwMDkxXFxcIj5cXG4gICAgICAgICAgICAgICAgaHR0cHM6Ly9kb2kub3JnLzEwLjExMTEvMTU0MC01ODUwLjAwMDkxPC9hPi5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImVkbjE0XFxcIj5cXG4gICAgICAgIDxwPlxcbiAxNC4gXFxuICAgICAgICAgICAgQ29tcG9uZW50IHVuaXRzIGFyZSBlbnRpdGllcyB0aGF0IGFyZSBsZWdhbGx5IHNlcGFyYXRlIGZyb20gYSBzdGF0ZVxcbiAgICAgICAgICAgIGJ1dCBwZXJmb3JtIHN0YXRlIGZ1bmN0aW9ucy4gVGhleSB0eXBpY2FsbHkgaW5jbHVkZSBib2RpZXMgc3VjaCBhc1xcbiAgICAgICAgICAgIGhvdXNpbmcgYXV0aG9yaXRpZXMsIGVjb25vbWljIGRldmVsb3BtZW50IGNvcnBvcmF0aW9ucywgYW5kXFxuICAgICAgICAgICAgdW5pdmVyc2l0aWVzLlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZWRuMTVcXFwiPlxcbiAgICAgICAgPHA+XFxuIDE1LiBcXG4gICAgICAgICAgICBXZWluZXIsIOKAnEEgR3VpZGUu4oCdXFxuICAgICAgICA8L3A+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJlZG4xNlxcXCI+XFxuICAgICAgICA8cD5cXG4gMTYuIFxcbiAgICAgICAgICAgIEJvIFpoYW8gYW5kIFdlbiBXYW5nLCDigJxUcmFuc3BhcmVuY3kgaW4gU3RhdGUgRGVidCBEaXNjbG9zdXJlLOKAnSBOZXdcXG4gICAgICAgICAgICBFbmdsYW5kIFB1YmxpYyBQb2xpY3kgQ2VudGVyIGF0IHRoZSBGZWRlcmFsIFJlc2VydmUgQmFuayBvZiBCb3N0b25cXG4gICAgICAgICAgICAoMjAxNyksXFxuICAgICAgICAgICAgPGFcXG4gICAgICAgICAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cuYm9zdG9uZmVkLm9yZy9wdWJsaWNhdGlvbnMvcmVzZWFyY2gtZGVwYXJ0bWVudC13b3JraW5nLXBhcGVyLzIwMTcvdHJhbnNwYXJlbmN5LWluLXN0YXRlLWRlYnQtZGlzY2xvc3VyZS5hc3B4XFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgaHR0cHM6Ly93d3cuYm9zdG9uZmVkLm9yZy9wdWJsaWNhdGlvbnMvcmVzZWFyY2gtZGVwYXJ0bWVudC13b3JraW5nLXBhcGVyLzIwMTcvdHJhbnNwYXJlbmN5LWluLXN0YXRlLWRlYnQtZGlzY2xvc3VyZS5hc3B4PC9hPi5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXFxuICAgIDwvZGl2PlxcbiAgICA8L3NlY3Rpb24+XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxmb290ZXI+XFxuXFx0XFx0PGRpdj5cXG5cXHRcXHRcXHQ8cD48c3Ryb25nPkRvd25sb2FkIHJlc291cmNlczo8L3N0cm9uZz5cXG5cXHRcXHRcXHRcXHRcXHQ8YSBjbGFzcz1cXFwicGN0LWRvd25sb2FkXFxcIiBocmVmPVxcXCJcXFwiPlJlc291cmNlIDE8L2E+XFxuXFx0XFx0XFx0XFx0XFx0PGEgY2xhc3M9XFxcInBjdC1kb3dubG9hZFxcXCIgaHJlZj1cXFwiXFxcIj5SZXNvdXJjZSAyPC9hPlxcblxcdFxcdFxcdFxcdDwvcD48L2Rpdj5cXG48L2Zvb3Rlcj5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiYXV0b0NvbXBsZXRlX3dyYXBwZXJcIjpcImF1dG9Db21wbGV0ZV93cmFwcGVyXCIsXCJhdXRvQ29tcGxldGVcIjpcImF1dG9Db21wbGV0ZVwiLFwiYXV0b0NvbXBsZXRlX3Jlc3VsdHNfbGlzdFwiOlwiYXV0b0NvbXBsZXRlX3Jlc3VsdHNfbGlzdFwiLFwiYXV0b0NvbXBsZXRlX3Jlc3VsdFwiOlwiYXV0b0NvbXBsZXRlX3Jlc3VsdFwiLFwiYXV0b0NvbXBsZXRlX2hpZ2hsaWdodGVkXCI6XCJhdXRvQ29tcGxldGVfaGlnaGxpZ2h0ZWRcIn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gIHZhciBoYXNoID0gNTM4MSxcbiAgICAgIGkgICAgPSBzdHIubGVuZ3RoO1xuXG4gIHdoaWxlKGkpIHtcbiAgICBoYXNoID0gKGhhc2ggKiAzMykgXiBzdHIuY2hhckNvZGVBdCgtLWkpO1xuICB9XG5cbiAgLyogSmF2YVNjcmlwdCBkb2VzIGJpdHdpc2Ugb3BlcmF0aW9ucyAobGlrZSBYT1IsIGFib3ZlKSBvbiAzMi1iaXQgc2lnbmVkXG4gICAqIGludGVnZXJzLiBTaW5jZSB3ZSB3YW50IHRoZSByZXN1bHRzIHRvIGJlIGFsd2F5cyBwb3NpdGl2ZSwgY29udmVydCB0aGVcbiAgICogc2lnbmVkIGludCB0byBhbiB1bnNpZ25lZCBieSBkb2luZyBhbiB1bnNpZ25lZCBiaXRzaGlmdC4gKi9cbiAgcmV0dXJuIGhhc2ggPj4+IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaDtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJQQ1REcm9wZG93blwiOlwic3VibW9kdWxlcy1VSS1qcy1pbnB1dHMtLVBDVERyb3Bkb3duXCIsXCJpc09wZW5cIjpcInN1Ym1vZHVsZXMtVUktanMtaW5wdXRzLS1pc09wZW5cIn07IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIHsgLy8gdGhpcyBjb3VsZCBiZSBpbnRlZ3JhdGVkIHdpdGggc3RhdGVmdWwgZGVhZFxuICAgIC8qXG4gICAgUm91dGVyIG9mZmVycyBiYXNpYyBzaGFyZWQgZnVuY3Rpb25zIGZvciBhbGwgcm91dGVycy4gTWV0aG9kcyBmb3IgdXBkYXRpbmcgIGhpc3Rvcnkgc3RhdGUgYW5kIHVwZGF0aW5nIHRoZSBoYXNoIHVybC4gQXJyYXkgb2Ygc3Vic2NyaXB0aW9uc1xuICAgIHRoYXQgYWZmZWN0IHRoZSB1cmwgaXMgcGFzc2VkIGluLiBUaGUgUHViU3ViIG1vZHVsZSBpcyBwYXNzZWQgaW4uIHNldEhhc2ggYW5kIGRlY29kZUhhc2ggZnVuY3Rpb25zIGFyZSBwYXNzZWQgaW4gYmMgdGhleSB3aWxsIGJlIGRpZmZcbiAgICBmb3IgZWFjaCBhcHAuIHZpZXdzIGFyZSBwYXNzZWQgaW4gc28gdGhhdCB0aGUgcmVzb2x1dGlvbnMgb2YgdGhlaXIgcHJvbWlzZXMgY2FuIGJlIHRyYWNrZWQgYW5kIGFjdGVkIHVwb24gKGllIHJvdXRlciBkZWNvZGVzIG9ubHkgYWZ0ZXIgXG4gICAgYWxsIHZpZXdzIGFyZSByZWFkeSlcbiAgICAqL1xuICAgIGluaXQocm91dGVyT3B0aW9ucyl7XG4gICAgICAgIFxuICAgICAgICBpZiAoIHJvdXRlck9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygcm91dGVyT3B0aW9ucyAhPT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIHRocm93ICdyb3V0ZXIuaW5pdCBtZXRob2QgcmVxdWlyZXMgYSBjb25maWcgb2JqZWN0IGFzIHBhcmFtZXRlciAxJ1xuICAgICAgICB9XG4gICAgICAgIGlmICggdHlwZW9mIHJvdXRlck9wdGlvbnMuZW5jb2RlICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiByb3V0ZXJPcHRpb25zLmRlY29kZSAhPT0gJ2Z1bmN0aW9uJyB8fCAhQXJyYXkuaXNBcnJheShyb3V0ZXJPcHRpb25zLnZpZXdzKSB8fCB0eXBlb2Ygcm91dGVyT3B0aW9ucy5QUyAhPT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIHRocm93ICdyb3V0ZXJPcHRpb25zIG9iamVjdCBuZWVkcyBlbmNvZGUsIGRlY29kZSwgdmlld3MsIGFuZCBQUyBwcm9wZXJ0aWVzLiBlbmNvZGUgYW5kIGRlY29kZSBtdXN0IGJlIGZ1bmN0aW9uczsgdmlld3MgaXMgYW4gYXJyYXkgb2Ygdmlld3MgZnJvbSB0aGUgYXBwOyBQUyBuZWVkcyB0byBiZSB0aGUgUHViU3ViIHNldHRlci4nXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZU9iaiA9IHt9O1xuICAgICAgICB0aGlzLmhhc2hTdGF0ZSA9IHJvdXRlck9wdGlvbnMuZW5jb2RlO1xuICAgICAgICB0aGlzLmRlY29kZUhhc2ggPSByb3V0ZXJPcHRpb25zLmRlY29kZTtcbiAgICAgICAgdGhpcy52aWV3UHJvbWlzZXMgPSByb3V0ZXJPcHRpb25zLnZpZXdzLm1hcChlYWNoID0+IGVhY2guaXNSZWFkeSk7IC8vIHZpZXcuaXNSZWFkeSBpcyBhIHByb21pc2VkIHJlc29sdmVkIHRydWUgYWZ0ZXIgdGhlIHZpZXcgaXMgcmVuZGVyZWRcbiAgICAgICAgdGhpcy5QUyA9IHJvdXRlck9wdGlvbnMuUFM7XG4gICAgICAgIFxuICAgICAgICBQcm9taXNlLmFsbCh0aGlzLnZpZXdQcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlSGFzaCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5QUy5zZXRTdWJzKHJvdXRlck9wdGlvbnMuc3Vic2NyaXB0aW9ucy5tYXAoZWFjaCA9PiB7IC8vIHN1YnNjcmlwdGlvbnMgdGhhdCBtYXR0ZXIgZm9yIHJvdXRlciBhcmUgbWFkZSB0byB0cmlnZ2VyIGhhc2hDaGFuZ2UgbWV0aG9kIHdoZW4gcHVibGlzaGVkXG4gICAgICAgICAgICB2YXIgYXJyID0gW2VhY2gsIChtc2csZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzaENoYW5nZS5jYWxsKHRoaXMsbXNnLGRhdGEpO1xuICAgICAgICAgICAgfV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgaGFzaENoYW5nZShtc2csZGF0YSl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGVPYmoobXNnLGRhdGEpO1xuICAgICAgICB0aGlzLmhhc2hTdGF0ZSgpO1xuICAgICAgICB0aGlzLnJlcGxhY2VTdGF0ZSgpO1xuICAgIH1cbiAgICBzZXRTdGF0ZU9iaihtc2csIGRhdGEpe1xuICAgICAgICB0aGlzLnN0YXRlT2JqW21zZ10gPSBkYXRhO1xuICAgICAgICBcbiAgICB9XG4gICAgcmVwbGFjZVN0YXRlKCl7ICAgIFxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUodGhpcy5zdGF0ZU9iaiwnJyx0aGlzLmhhc2hTdHJpbmcpXG4gICAgfVxuXG59IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInN0YXRpY1wiOlwic3JjLWNzcy0tc3RhdGljXCJ9OyIsImV4cG9ydCB2YXIgcHJlZml4ID0gXCIkXCI7XG5cbmZ1bmN0aW9uIE1hcCgpIHt9XG5cbk1hcC5wcm90b3R5cGUgPSBtYXAucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTWFwLFxuICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiAocHJlZml4ICsga2V5KSBpbiB0aGlzO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW3ByZWZpeCArIGtleV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbcHJlZml4ICsga2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gdGhpcyAmJiBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBrZXlzLnB1c2gocHJvcGVydHkuc2xpY2UoMSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9LFxuICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgdmFsdWVzLnB1c2godGhpc1twcm9wZXJ0eV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0sXG4gIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH0sXG4gIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgKytzaXplO1xuICAgIHJldHVybiBzaXplO1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZWFjaDogZnVuY3Rpb24oZikge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBmKHRoaXNbcHJvcGVydHldLCBwcm9wZXJ0eS5zbGljZSgxKSwgdGhpcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1hcChvYmplY3QsIGYpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXA7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkgeyBtYXAuc2V0KGtleSwgdmFsdWUpOyB9KTtcblxuICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICBvO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoaSwgb2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gIGVsc2UgaWYgKG9iamVjdCkgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblxuICByZXR1cm4gbWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXA7XG4iLCJpbXBvcnQgbWFwIGZyb20gXCIuL21hcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGtleXMgPSBbXSxcbiAgICAgIHNvcnRLZXlzID0gW10sXG4gICAgICBzb3J0VmFsdWVzLFxuICAgICAgcm9sbHVwLFxuICAgICAgbmVzdDtcblxuICBmdW5jdGlvbiBhcHBseShhcnJheSwgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSB7XG4gICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSB7XG4gICAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpO1xuICAgICAgcmV0dXJuIHJvbGx1cCAhPSBudWxsID8gcm9sbHVwKGFycmF5KSA6IGFycmF5O1xuICAgIH1cblxuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGtleSA9IGtleXNbZGVwdGgrK10sXG4gICAgICAgIGtleVZhbHVlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdmFsdWVzQnlLZXkgPSBtYXAoKSxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICByZXN1bHQgPSBjcmVhdGVSZXN1bHQoKTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KHZhbHVlID0gYXJyYXlbaV0pICsgXCJcIikpIHtcbiAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XG4gICAgICBzZXRSZXN1bHQocmVzdWx0LCBrZXksIGFwcGx5KHZhbHVlcywgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cmllcyhtYXAsIGRlcHRoKSB7XG4gICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICB2YXIgYXJyYXksIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCAtIDFdO1xuICAgIGlmIChyb2xsdXAgIT0gbnVsbCAmJiBkZXB0aCA+PSBrZXlzLmxlbmd0aCkgYXJyYXkgPSBtYXAuZW50cmllcygpO1xuICAgIGVsc2UgYXJyYXkgPSBbXSwgbWFwLmVhY2goZnVuY3Rpb24odiwgaykgeyBhcnJheS5wdXNoKHtrZXk6IGssIHZhbHVlczogZW50cmllcyh2LCBkZXB0aCl9KTsgfSk7XG4gICAgcmV0dXJuIHNvcnRLZXkgIT0gbnVsbCA/IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc29ydEtleShhLmtleSwgYi5rZXkpOyB9KSA6IGFycmF5O1xuICB9XG5cbiAgcmV0dXJuIG5lc3QgPSB7XG4gICAgb2JqZWN0OiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU9iamVjdCwgc2V0T2JqZWN0KTsgfSxcbiAgICBtYXA6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApOyB9LFxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxuICAgIGtleTogZnVuY3Rpb24oZCkgeyBrZXlzLnB1c2goZCk7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRLZXlzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgcm9sbHVwOiBmdW5jdGlvbihmKSB7IHJvbGx1cCA9IGY7IHJldHVybiBuZXN0OyB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdCgpIHtcbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBzZXRPYmplY3Qob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hcCgpIHtcbiAgcmV0dXJuIG1hcCgpO1xufVxuXG5mdW5jdGlvbiBzZXRNYXAobWFwLCBrZXksIHZhbHVlKSB7XG4gIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgbWFwLCBwcmVmaXh9IGZyb20gXCIuL21hcFwiO1xuXG5mdW5jdGlvbiBTZXQoKSB7fVxuXG52YXIgcHJvdG8gPSBtYXAucHJvdG90eXBlO1xuXG5TZXQucHJvdG90eXBlID0gc2V0LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNldCxcbiAgaGFzOiBwcm90by5oYXMsXG4gIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YWx1ZSArPSBcIlwiO1xuICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gIHZhbHVlczogcHJvdG8ua2V5cyxcbiAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICBlYWNoOiBwcm90by5lYWNoXG59O1xuXG5mdW5jdGlvbiBzZXQob2JqZWN0LCBmKSB7XG4gIHZhciBzZXQgPSBuZXcgU2V0O1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTZXQpIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IHNldC5hZGQodmFsdWUpOyB9KTtcblxuICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpdOKAmXMgYW4gYXJyYXkuXG4gIGVsc2UgaWYgKG9iamVjdCkge1xuICAgIHZhciBpID0gLTEsIG4gPSBvYmplY3QubGVuZ3RoO1xuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChmKG9iamVjdFtpXSwgaSwgb2JqZWN0KSk7XG4gIH1cblxuICByZXR1cm4gc2V0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXQ7XG4iLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudC8nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wYXJpc29uIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIHZhciBkaXYgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgdGhpcy5tYXRjaGVzID0gW107XG4gICAgICAgIHRoaXMubWF0Y2hlc1swXSA9IHRoaXMubW9kZWwuZGF0YS5maW5kKGQgPT4gZC5jb2RlID09PSB0aGlzLmRhdGEuY29tcGFyaXNvblswXSk7XG4gICAgICAgIHRoaXMubWF0Y2hlc1sxXSA9IHRoaXMubW9kZWwuZGF0YS5maW5kKGQgPT4gZC5jb2RlID09PSB0aGlzLmRhdGEuY29tcGFyaXNvblsxXSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cbiAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICB9XG4gICAgdXBkYXRlKGluZGV4LGRhdGEpe1xuICAgICAgICB0aGlzLm1hdGNoZXNbaW5kZXhdID0gdGhpcy5tb2RlbC5kYXRhLmZpbmQoZCA9PiBkLmNvZGUgPT09IGRhdGEpO1xuICAgIH1cblxufSIsImltcG9ydCBzIGZyb20gJy4vLi4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IENvbXBhcmlzb24gZnJvbSAnLi4vJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGFyaXNvblRleHQgZXh0ZW5kcyBDb21wYXJpc29uIHtcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgdmFyIGRpdiA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMubW9kZWwuZGljdCwgdGhpcy5kYXRhLmZpZWxkKTtcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IHRoaXMucmV0dXJuVGVtcGxhdGUoMCkgKyB0aGlzLnJldHVyblRlbXBsYXRlKDEpO1xuICAgICAgICBcblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cbiAgICB1cGRhdGUobXNnLCBkYXRhKXsgLy8gc29tZSBoZXJlIGNvdWxkIGJlIGluIHRoZSBzdXBlclxuICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludChtc2cuc3BsaXQoJy4nKVsxXSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGluZGV4KTtcbiAgICAgICAgc3VwZXIudXBkYXRlKGluZGV4LGRhdGEpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLCBpbmRleCk7XG4gICAgICAgIHRoaXMuZWwuY2hpbGRyZW5baW5kZXhdLmZhZGVJbkNvbnRlbnQodGhpcy5yZXR1cm5UZW1wbGF0ZShpbmRleCkpO1xuICAgICAgICAvL3RoaXMuZWwuaW5uZXJIVE1MID0gdGhpcy5yZXR1cm5UZW1wbGF0ZShpbmRleCk7XG5cbiAgICB9XG4gICAgcmV0dXJuVGVtcGxhdGUoaSl7XG4gICAgICAgIHJldHVybiBgPHAgY2xhc3M9XCIke3MuY2hhcnRMYWJlbH0gJHtzLmNoYXJ0TGFiZWxUZXh0fVwiPiR7dGhpcy5tYXRjaGVzW2ldLnN0YXRlfTogPHNwYW4gY2xhc3M9XCIke3NbJ2NvbXBhcmVDb2xvcicgKyAoaSArMSldfVwiPiR7dGhpcy5tb2RlbC5kaWN0W3RoaXMuZGF0YS5maWVsZF0gIT09IHVuZGVmaW5lZCA/IHRoaXMubW9kZWwuZGljdFt0aGlzLmRhdGEuZmllbGRdW1t0aGlzLm1hdGNoZXNbaV1bdGhpcy5kYXRhLmZpZWxkXV1dIDogdGhpcy5tYXRjaGVzW2ldW3RoaXMuZGF0YS5maWVsZF19PC9zcGFuPjwvcD5gO1xuICAgIH1cbn1cbiIsImltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IEVsZW1lbnQgZnJvbSAnQFVJL2VsZW1lbnQnO1xuXG4gZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFyIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgXG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIHZhciBkaXYgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZGl2O1xuICAgICAgICB9XG4gICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKHMuYmFyLCBzWydiYXJDb2xvcicgKyB0aGlzLmRhdGEuY29sb3JdKTtcbiAgICAgICAgZGl2LnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZVgoJHt0aGlzLmxpbmVhclNjYWxlKHRoaXMuZGF0YS5kLCB0aGlzLmRhdGEuZmllbGQpfSlgO1xuXG4gICAgICAgIHJldHVybiBkaXY7XG4gICAgfVxuICAgIGxpbmVhclNjYWxlKG1hdGNoLCBmaWVsZCl7XG4gICAgICAgIHZhciB0eXBlT2JqZWN0ID0gdGhpcy5tb2RlbC50eXBlcy5maW5kKHQgPT4gdC5maWVsZCA9PT0gZmllbGQpLFxuICAgICAgICAgICAgc2NhbGUgPSAoIG1hdGNoW2ZpZWxkXSAtIHR5cGVPYmplY3QubWluICkgLyB0eXBlT2JqZWN0LnNwcmVhZCxcbiAgICAgICAgICAgIGFkanVzdGVkID0gLjAxICsgKCBzY2FsZSAqIC45OSApO1xuXG4gICAgICAgIHJldHVybiBhZGp1c3RlZDtcbiAgICB9XG4gICAgdXBkYXRlKCl7XG4gICAgICAgIC8vIGluIGRldmVsb3BtZW50IG1vZGUsIHRoaXMuZWwgaXMgYSBqcyBvYmplY3QgYnV0IGRvZXMgbm90IHJlZmVyIHRvIGVsZW1lbnQgcmVuZGVyZWQgb24gdGhlIHBhZ2VcbiAgICAgICAgLy92YXIgZWwgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5qcy1iYXItY29tcGFyZS0ke3RoaXMuZGF0YS5maWVsZH0tJHtpbmRleH1gKSA6IHRoaXMuZWw7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMpOyAgICAgICAgXG4gICAgICAgIHRoaXMuZWwuc3R5bGUudHJhbnNmb3JtID0gYHNjYWxlWCgke3RoaXMubGluZWFyU2NhbGUodGhpcy5kYXRhLmQsIHRoaXMuZGF0YS5maWVsZCl9KWA7XG4gICAgfVxuXG59IiwiZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFZhbHVlKG1hdGNoLCBmaWVsZCl7XG4gICAgdmFyIHN0eWxlID0gdGhpcy5tb2RlbC50eXBlcy5maW5kKGQgPT4gZC5maWVsZCA9PT0gZmllbGQpLnR5cGUsXG4gICAgICAgIHZhbHVlID0gbWF0Y2hbZmllbGRdLFxuICAgICAgICBmb3JtYXR0ZWRWYWx1ZVN0cmluZztcbiAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgc3dpdGNoKHN0eWxlKXtcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlU3RyaW5nID0gdmFsdWUudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywge21pbmltdW1GcmFjdGlvbkRpZ2l0czogMX0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2N1cnJlbmN5JzpcbiAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlU3RyaW5nID0gdmFsdWUudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywge3N0eWxlLGN1cnJlbmN5OidVU0QnfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncGVyY2VudCc6XG4gICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZVN0cmluZyA9IHZhbHVlLnRvTG9jYWxlU3RyaW5nKCdlbi1VUycsIHtzdHlsZSwgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAxfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlU3RyaW5nID0gJ1t1bmZvcm1hdHRlZF0nICsgdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdHRlZFZhbHVlU3RyaW5nO1xufSIsImltcG9ydCBzIGZyb20gJy4vLi4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IENvbXBhcmlzb24gZnJvbSAnLi4vJztcbmltcG9ydCBCYXIgZnJvbSAnQFByb2plY3QvY29tcG9uZW50cy9iYXInO1xuaW1wb3J0IHsgZm9ybWF0VmFsdWUgfSBmcm9tICdAUHJvamVjdC9tZXRob2RzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wYXJpc29uQ2hhcnQgZXh0ZW5kcyBDb21wYXJpc29uIHtcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgdmFyIGRpdiA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICB0aGlzLmJhcnMgPSBbXTtcbiAgICAgICAgWzAsMV0uZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICAgICAgICB0aGlzLmJhcnMucHVzaCh0aGlzLnBhcmVudC5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIEJhciwgYGRpdi5qcy1iYXItY29tcGFyZS0ke3RoaXMuZGF0YS5maWVsZH0tJHtpbmRleH1gLCB7cGFyZW50OiB0aGlzLCBkYXRhOiB7ZDogdGhpcy5tYXRjaGVzW2luZGV4XSwgZmllbGQ6IHRoaXMuZGF0YS5maWVsZCwgY29sb3I6IGluZGV4ICsgMX19KSlcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCguLi50aGlzLmJhcnMpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cblxuICAgICAgICBcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IHRoaXMucmV0dXJuVGVtcGxhdGUoKTtcbiAgICAgICAgXG5cbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICB9XG4gICAgcmV0dXJuVGVtcGxhdGUoKXtcbiAgICAgICAgcmV0dXJuIGAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiJHtzLmNoYXJ0Q29udGFpbmVyfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7dGhpcy5wYXJ0aWFsVGVtcGxhdGUoMCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHt0aGlzLnBhcnRpYWxUZW1wbGF0ZSgxKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICBgO1xuICAgIH1cbiAgICBwYXJ0aWFsVGVtcGxhdGUoaW5kZXgpe1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cIiR7cy5jaGFydExhYmVsfSAke3NbJ2NoYXJ0TGFiZWwnICsgKGluZGV4ICsgMSldfVwiPlxuICAgICAgICAgICAgICAgICAgICAke3RoaXMubWF0Y2hlc1tpbmRleF0uc3RhdGV9XG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke3MuYmFyQ29udGFpbmVyfSAke3NbJ2JhckNvbnRhaW5lcicgKyAoaW5kZXggKyAxKV19XCI+XG4gICAgICAgICAgICAgICAgICAgICR7dGhpcy5iYXJzW2luZGV4XS5lbC5vdXRlckhUTUx9ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke3MuZGF0YUxhYmVsfVwiIHN0eWxlPVwidHJhbnNmb3JtOiB0cmFuc2xhdGVYKCR7KCB0aGlzLmJhcnNbaW5kZXhdLmxpbmVhclNjYWxlKHRoaXMubWF0Y2hlc1tpbmRleF0sIHRoaXMuZGF0YS5maWVsZCkgKiAxMDApLnRvRml4ZWQoMSkgfSUpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAke3RoaXMuZm9ybWF0VmFsdWUodGhpcy5tYXRjaGVzW2luZGV4XSwgdGhpcy5kYXRhLmZpZWxkKX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxuICAgIGxpbmVhclNjYWxlKG1hdGNoLCBmaWVsZCl7XG4gICAgICAgIHZhciB0eXBlT2JqZWN0ID0gdGhpcy5tb2RlbC50eXBlcy5maW5kKHQgPT4gdC5maWVsZCA9PT0gZmllbGQpLFxuICAgICAgICAgICAgc2NhbGUgPSAoIG1hdGNoW2ZpZWxkXSAtIHR5cGVPYmplY3QubWluICkgLyB0eXBlT2JqZWN0LnNwcmVhZDtcblxuICAgICAgICByZXR1cm4gc2NhbGU7XG4gICAgfVxuICAgIGZvcm1hdFZhbHVlKCl7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIHVwZGF0ZShtc2csIGRhdGEpe1xuICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludChtc2cuc3BsaXQoJy4nKVsxXSksXG4gICAgICAgIGRhdGFMYWJlbCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmRhdGFMYWJlbClbaW5kZXhdO1xuICAgICAgICBzdXBlci51cGRhdGUoaW5kZXgsZGF0YSk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICAgICAgLy8gdXBkYXRlIGxhYmVsXG4gICAgICAgIHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmNoYXJ0TGFiZWwpW2luZGV4XS5mYWRlSW5Db250ZW50KHRoaXMubWF0Y2hlc1tpbmRleF0uc3RhdGUpO1xuICAgICAgICBcbiAgICAgICAgLy91cGRhdGUgYmFyc1xuICAgICAgICB0aGlzLmNoaWxkcmVuW2luZGV4XS5kYXRhLmQgPSB0aGlzLm1hdGNoZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLmNoaWxkcmVuW2luZGV4XS51cGRhdGUoaW5kZXgpO1xuXG4gICAgICAgIC8vdXBkYXRlIGRhdGFMYWJlbFxuICAgICAgICBkYXRhTGFiZWwuZmFkZUluQ29udGVudCh0aGlzLmZvcm1hdFZhbHVlKHRoaXMubWF0Y2hlc1tpbmRleF0sIHRoaXMuZGF0YS5maWVsZCkpO1xuICAgICAgICBkYXRhTGFiZWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHsoIHRoaXMuY2hpbGRyZW5baW5kZXhdLmxpbmVhclNjYWxlKHRoaXMubWF0Y2hlc1tpbmRleF0sIHRoaXMuZGF0YS5maWVsZCkgKiAxMDApLnRvRml4ZWQoMSkgfSUpYDtcbiAgICB9XG59XG4iLCIvKiohXG4qIHRpcHB5LmpzIHY0LjAuNFxuKiAoYykgMjAxNy0yMDE5IGF0b21pa3NcbiogTUlUIExpY2Vuc2VcbiovXG5pbXBvcnQgUG9wcGVyIGZyb20gJ3BvcHBlci5qcyc7XG5cbnZhciBjc3MgPSBcIi50aXBweS1pT1N7Y3Vyc29yOnBvaW50ZXIhaW1wb3J0YW50fS50aXBweS1ub3RyYW5zaXRpb257dHJhbnNpdGlvbjpub25lfS50aXBweS1wb3BwZXJ7dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4xNjUsLjg0LC40NCwxKTttYXgtd2lkdGg6Y2FsYygxMDAlIC0gOHB4KTtwb2ludGVyLWV2ZW50czpub25lO291dGxpbmU6MH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcHtib3JkZXItcmFkaXVzOjQwJSA0MCUgMCAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gLnRpcHB5LXJvdW5kYXJyb3d7Ym90dG9tOi03cHg7Ym90dG9tOi02LjVweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDA7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMDttYXJnaW46MCAzcHh9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1hcnJvd3tib3JkZXItdG9wOjhweCBzb2xpZCAjMzMzO2JvcmRlci1yaWdodDo4cHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWxlZnQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvdHRvbTotN3B4O21hcmdpbjowIDNweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDA7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcHstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46MCAyNSU7dHJhbnNmb3JtLW9yaWdpbjowIDI1JX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC01NSUpO3RyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTUlKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlLC00NSUpO3RyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC01MCUsLTQ1JSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgtMTBweCkgcm90YXRlWCgwKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoLTEwcHgpIHJvdGF0ZVgoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMCkgcm90YXRlWCg2MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDApIHJvdGF0ZVgoNjBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KSBzY2FsZSgxKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoLjUpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KSBzY2FsZSguNSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3B7Ym9yZGVyLXJhZGl1czowIDAgMzAlIDMwJX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1yb3VuZGFycm93e3RvcDotN3B4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo1MCUgMTAwJTt0cmFuc2Zvcm0tb3JpZ2luOjUwJSAxMDAlO21hcmdpbjowIDNweH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1yb3VuZGFycm93IHN2Z3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYXJyb3d7Ym9yZGVyLWJvdHRvbTo4cHggc29saWQgIzMzMztib3JkZXItcmlnaHQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1sZWZ0OjhweCBzb2xpZCB0cmFuc3BhcmVudDt0b3A6LTdweDttYXJnaW46MCAzcHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAxMDAlO3RyYW5zZm9ybS1vcmlnaW46NTAlIDEwMCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjAgLTUwJTt0cmFuc2Zvcm0tb3JpZ2luOjAgLTUwJX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC00NSUpO3RyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNDUlKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlKTt0cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlKTtvcGFjaXR5OjB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3A7dHJhbnNmb3JtLW9yaWdpbjp0b3B9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMTBweCkgcm90YXRlWCgwKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMTBweCkgcm90YXRlWCgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgwKSByb3RhdGVYKC02MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDApIHJvdGF0ZVgoLTYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3A7dHJhbnNmb3JtLW9yaWdpbjp0b3B9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSgxKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSgxKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSguNSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWJhY2tkcm9we2JvcmRlci1yYWRpdXM6NTAlIDAgMCA1MCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LXJvdW5kYXJyb3d7cmlnaHQ6LTEycHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjMzLjMzMzMzMzMzJSA1MCU7dHJhbnNmb3JtLW9yaWdpbjozMy4zMzMzMzMzMyUgNTAlO21hcmdpbjozcHggMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWFycm93e2JvcmRlci1sZWZ0OjhweCBzb2xpZCAjMzMzO2JvcmRlci10b3A6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206OHB4IHNvbGlkIHRyYW5zcGFyZW50O3JpZ2h0Oi03cHg7bWFyZ2luOjNweCAwOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjowIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjAgNTAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1iYWNrZHJvcHstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDA7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTAlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWJhY2tkcm9wW2RhdGEtc3RhdGU9aGlkZGVuXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC03NSUsLTUwJSk7dHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTc1JSwtNTAlKTtvcGFjaXR5OjB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQ7dHJhbnNmb3JtLW9yaWdpbjpyaWdodH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoLTEwcHgpIHJvdGF0ZVkoMCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKC0xMHB4KSByb3RhdGVZKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgwKSByb3RhdGVZKC02MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKDApIHJvdGF0ZVkoLTYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0O3RyYW5zZm9ybS1vcmlnaW46cmlnaHR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpIHNjYWxlKDEpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KSBzY2FsZSgxKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCkgc2NhbGUoLjUpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KSBzY2FsZSguNSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1iYWNrZHJvcHtib3JkZXItcmFkaXVzOjAgNTAlIDUwJSAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktcm91bmRhcnJvd3tsZWZ0Oi0xMnB4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo2Ni42NjY2NjY2NiUgNTAlO3RyYW5zZm9ybS1vcmlnaW46NjYuNjY2NjY2NjYlIDUwJTttYXJnaW46M3B4IDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1yb3VuZGFycm93IHN2Z3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYXJyb3d7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCAjMzMzO2JvcmRlci10b3A6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206OHB4IHNvbGlkIHRyYW5zcGFyZW50O2xlZnQ6LTdweDttYXJnaW46M3B4IDA7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjEwMCUgNTAlO3RyYW5zZm9ybS1vcmlnaW46MTAwJSA1MCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1iYWNrZHJvcHstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46LTUwJSAwO3RyYW5zZm9ybS1vcmlnaW46LTUwJSAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTAlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtMjUlLC01MCUpO3RyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC0yNSUsLTUwJSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgxMHB4KSByb3RhdGVZKDApO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgxMHB4KSByb3RhdGVZKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMCkgcm90YXRlWSg2MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKDApIHJvdGF0ZVkoNjBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0O3RyYW5zZm9ybS1vcmlnaW46bGVmdH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCkgc2NhbGUoMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KSBzY2FsZSguNSl9LnRpcHB5LXRvb2x0aXB7cG9zaXRpb246cmVsYXRpdmU7Y29sb3I6I2ZmZjtib3JkZXItcmFkaXVzOi4yNXJlbTtmb250LXNpemU6Ljg3NXJlbTtwYWRkaW5nOi4zMTI1cmVtIC41NjI1cmVtO2xpbmUtaGVpZ2h0OjEuNDt0ZXh0LWFsaWduOmNlbnRlcjt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07YmFja2dyb3VuZC1jb2xvcjojMzMzfS50aXBweS10b29sdGlwW2RhdGEtc2l6ZT1zbWFsbF17cGFkZGluZzouMTg3NXJlbSAuMzc1cmVtO2ZvbnQtc2l6ZTouNzVyZW19LnRpcHB5LXRvb2x0aXBbZGF0YS1zaXplPWxhcmdlXXtwYWRkaW5nOi4zNzVyZW0gLjc1cmVtO2ZvbnQtc2l6ZToxcmVtfS50aXBweS10b29sdGlwW2RhdGEtYW5pbWF0ZWZpbGxde292ZXJmbG93OmhpZGRlbjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS50aXBweS10b29sdGlwW2RhdGEtaW50ZXJhY3RpdmVdLC50aXBweS10b29sdGlwW2RhdGEtaW50ZXJhY3RpdmVdIHBhdGh7cG9pbnRlci1ldmVudHM6YXV0b30udGlwcHktdG9vbHRpcFtkYXRhLWluZXJ0aWFdW2RhdGEtc3RhdGU9dmlzaWJsZV17dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC41NCwxLjUsLjM4LDEuMTEpfS50aXBweS10b29sdGlwW2RhdGEtaW5lcnRpYV1bZGF0YS1zdGF0ZT1oaWRkZW5de3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2V9LnRpcHB5LWFycm93LC50aXBweS1yb3VuZGFycm93e3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjA7aGVpZ2h0OjB9LnRpcHB5LXJvdW5kYXJyb3d7d2lkdGg6MThweDtoZWlnaHQ6N3B4O2ZpbGw6IzMzMztwb2ludGVyLWV2ZW50czpub25lfS50aXBweS1iYWNrZHJvcHtwb3NpdGlvbjphYnNvbHV0ZTt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07YmFja2dyb3VuZC1jb2xvcjojMzMzO2JvcmRlci1yYWRpdXM6NTAlO3dpZHRoOmNhbGMoMTEwJSArIDJyZW0pO2xlZnQ6NTAlO3RvcDo1MCU7ei1pbmRleDotMTt0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoLjQ2LC4xLC41MiwuOTgpOy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47YmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW59LnRpcHB5LWJhY2tkcm9wOmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7ZmxvYXQ6bGVmdDtwYWRkaW5nLXRvcDoxMDAlfS50aXBweS1iYWNrZHJvcCsudGlwcHktY29udGVudHt0cmFuc2l0aW9uLXByb3BlcnR5Om9wYWNpdHk7d2lsbC1jaGFuZ2U6b3BhY2l0eX0udGlwcHktYmFja2Ryb3ArLnRpcHB5LWNvbnRlbnRbZGF0YS1zdGF0ZT12aXNpYmxlXXtvcGFjaXR5OjF9LnRpcHB5LWJhY2tkcm9wKy50aXBweS1jb250ZW50W2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjB9XCI7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbnZhciB2ZXJzaW9uID0gXCI0LjAuNFwiO1xuXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgdWEgPSBpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudDtcbnZhciBpc0lFID0gL01TSUUgfFRyaWRlbnRcXC8vLnRlc3QodWEpO1xudmFyIGlzVUNCcm93c2VyID0gL1VDQnJvd3NlclxcLy8udGVzdCh1YSk7XG52YXIgaXNJT1MgPSAvLyBAdHMtaWdub3JlXG5pc0Jyb3dzZXIgJiYgL2lQaG9uZXxpUGFkfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSAmJiAhd2luZG93Lk1TU3RyZWFtO1xuXG52YXIgRGVmYXVsdHMgPSB7XG4gIGExMXk6IHRydWUsXG4gIGFsbG93SFRNTDogdHJ1ZSxcbiAgYW5pbWF0ZUZpbGw6IHRydWUsXG4gIGFuaW1hdGlvbjogJ3NoaWZ0LWF3YXknLFxuICBhcHBlbmRUbzogZnVuY3Rpb24gYXBwZW5kVG8oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH0sXG4gIGFyaWE6ICdkZXNjcmliZWRieScsXG4gIGFycm93OiBmYWxzZSxcbiAgYXJyb3dUeXBlOiAnc2hhcnAnLFxuICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXG4gIGNvbnRlbnQ6ICcnLFxuICBkZWxheTogWzAsIDIwXSxcbiAgZGlzdGFuY2U6IDEwLFxuICBkdXJhdGlvbjogWzMyNSwgMjc1XSxcbiAgZmxpcDogdHJ1ZSxcbiAgZmxpcEJlaGF2aW9yOiAnZmxpcCcsXG4gIGZsaXBPblVwZGF0ZTogZmFsc2UsXG4gIGZvbGxvd0N1cnNvcjogZmFsc2UsXG4gIGhpZGVPbkNsaWNrOiB0cnVlLFxuICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgaW5lcnRpYTogZmFsc2UsXG4gIGludGVyYWN0aXZlOiBmYWxzZSxcbiAgaW50ZXJhY3RpdmVCb3JkZXI6IDIsXG4gIGludGVyYWN0aXZlRGVib3VuY2U6IDAsXG4gIGxhenk6IHRydWUsXG4gIG1heFdpZHRoOiAzNTAsXG4gIG11bHRpcGxlOiBmYWxzZSxcbiAgb2Zmc2V0OiAwLFxuICBvbkhpZGRlbjogZnVuY3Rpb24gb25IaWRkZW4oKSB7fSxcbiAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7fSxcbiAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHt9LFxuICBvblNob3c6IGZ1bmN0aW9uIG9uU2hvdygpIHt9LFxuICBvblNob3duOiBmdW5jdGlvbiBvblNob3duKCkge30sXG4gIHBsYWNlbWVudDogJ3RvcCcsXG4gIHBvcHBlck9wdGlvbnM6IHt9LFxuICByb2xlOiAndG9vbHRpcCcsXG4gIHNob3dPbkluaXQ6IGZhbHNlLFxuICBzaXplOiAncmVndWxhcicsXG4gIHN0aWNreTogZmFsc2UsXG4gIHRhcmdldDogJycsXG4gIHRoZW1lOiAnZGFyaycsXG4gIHRvdWNoOiB0cnVlLFxuICB0b3VjaEhvbGQ6IGZhbHNlLFxuICB0cmlnZ2VyOiAnbW91c2VlbnRlciBmb2N1cycsXG4gIHVwZGF0ZUR1cmF0aW9uOiAwLFxuICB3YWl0OiBudWxsLFxuICB6SW5kZXg6IDk5OTlcbiAgLyoqXG4gICAqIElmIHRoZSBzZXQoKSBtZXRob2QgZW5jb3VudGVycyBvbmUgb2YgdGhlc2UsIHRoZSBwb3BwZXJJbnN0YW5jZSBtdXN0IGJlXG4gICAqIHJlY3JlYXRlZFxuICAgKi9cblxufTtcbnZhciBQT1BQRVJfSU5TVEFOQ0VfREVQRU5ERU5DSUVTID0gWydhcnJvdycsICdhcnJvd1R5cGUnLCAnYm91bmRhcnknLCAnZGlzdGFuY2UnLCAnZmxpcCcsICdmbGlwQmVoYXZpb3InLCAnZmxpcE9uVXBkYXRlJywgJ29mZnNldCcsICdwbGFjZW1lbnQnLCAncG9wcGVyT3B0aW9ucyddO1xuXG52YXIgU2VsZWN0b3JzID0ge1xuICBQT1BQRVI6ICcudGlwcHktcG9wcGVyJyxcbiAgVE9PTFRJUDogJy50aXBweS10b29sdGlwJyxcbiAgQ09OVEVOVDogJy50aXBweS1jb250ZW50JyxcbiAgQkFDS0RST1A6ICcudGlwcHktYmFja2Ryb3AnLFxuICBBUlJPVzogJy50aXBweS1hcnJvdycsXG4gIFJPVU5EX0FSUk9XOiAnLnRpcHB5LXJvdW5kYXJyb3cnXG59O1xuXG52YXIgZWxlbWVudFByb3RvID0gaXNCcm93c2VyID8gRWxlbWVudC5wcm90b3R5cGUgOiB7fTtcbnZhciBtYXRjaGVzID0gZWxlbWVudFByb3RvLm1hdGNoZXMgfHwgZWxlbWVudFByb3RvLm1hdGNoZXNTZWxlY3RvciB8fCBlbGVtZW50UHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnRQcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudFByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yO1xuLyoqXG4gKiBQb255ZmlsbCBmb3IgQXJyYXkuZnJvbSAtIGNvbnZlcnRzIGl0ZXJhYmxlIHZhbHVlcyB0byBhbiBhcnJheVxuICogQHBhcmFtIHtBcnJheUxpa2V9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnlbXX1cbiAqL1xuXG5mdW5jdGlvbiBhcnJheUZyb20odmFsdWUpIHtcbiAgcmV0dXJuIFtdLnNsaWNlLmNhbGwodmFsdWUpO1xufVxuLyoqXG4gKiBQb255ZmlsbCBmb3IgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gcGFyZW50U2VsZWN0b3JcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBwYXJlbnRTZWxlY3Rvcikge1xuICByZXR1cm4gKGVsZW1lbnRQcm90by5jbG9zZXN0IHx8IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgIHZhciBlbCA9IHRoaXM7XG5cbiAgICB3aGlsZSAoZWwpIHtcbiAgICAgIGlmIChtYXRjaGVzLmNhbGwoZWwsIHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG5cbiAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgICB9XG4gIH0pLmNhbGwoZWxlbWVudCwgcGFyZW50U2VsZWN0b3IpO1xufVxuLyoqXG4gKiBXb3JrcyBsaWtlIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QsIGJ1dCB1c2VzIGEgY2FsbGJhY2sgaW5zdGVhZFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuXG5mdW5jdGlvbiBjbG9zZXN0Q2FsbGJhY2soZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICBpZiAoY2FsbGJhY2soZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBcImJhcmVcIiB2aXJ0dWFsIGVsZW1lbnQgKGJlZm9yZSBtdXRhdGlvbnMgZG9uZVxuICogYnkgYHBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXMoKWApLiBKU0RPTSBlbGVtZW50cyBzaG93IHVwIGFzXG4gKiBbb2JqZWN0IE9iamVjdF0sIHdlIGNhbiBjaGVjayBpZiB0aGUgdmFsdWUgaXMgXCJlbGVtZW50LWxpa2VcIiBpZiBpdCBoYXNcbiAqIGBhZGRFdmVudExpc3RlbmVyYFxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzQmFyZVZpcnR1YWxFbGVtZW50KHZhbHVlKSB7XG4gIHJldHVybiB7fS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgIXZhbHVlLmFkZEV2ZW50TGlzdGVuZXI7XG59XG4vKipcbiAqIFNhZmUgLmhhc093blByb3BlcnR5IGNoZWNrLCBmb3IgcHJvdG90eXBlLWxlc3Mgb2JqZWN0c1xuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIGtleSkge1xuICByZXR1cm4ge30uaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgZWxlbWVudHMgYmFzZWQgb24gdGhlIHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd8RWxlbWVudHxFbGVtZW50W118Tm9kZUxpc3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtFbGVtZW50W119XG4gKi9cblxuZnVuY3Rpb24gZ2V0QXJyYXlPZkVsZW1lbnRzKHZhbHVlKSB7XG4gIGlmIChpc1Npbmd1bGFyKHZhbHVlKSkge1xuICAgIHJldHVybiBbdmFsdWVdO1xuICB9XG5cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcbiAgICByZXR1cm4gYXJyYXlGcm9tKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGFycmF5RnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHZhbHVlIGF0IGEgZ2l2ZW4gaW5kZXggZGVwZW5kaW5nIG9uIGlmIGl0J3MgYW4gYXJyYXkgb3IgbnVtYmVyXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHthbnl9IFtkZWZhdWx0VmFsdWVdXG4gKi9cblxuZnVuY3Rpb24gZ2V0VmFsdWUodmFsdWUsIGluZGV4LCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFyIHYgPSB2YWx1ZVtpbmRleF07XG4gICAgcmV0dXJuIHYgPT0gbnVsbCA/IGRlZmF1bHRWYWx1ZSA6IHY7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIERlYm91bmNlIHV0aWxpdHlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqL1xuXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgbXMpIHtcbiAgdmFyIHRpbWVvdXRJZDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBfYXJndW1lbnRzID0gYXJndW1lbnRzO1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7IC8vIEB0cy1pZ25vcmVcblxuICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KF90aGlzLCBfYXJndW1lbnRzKTtcbiAgICB9LCBtcyk7XG4gIH07XG59XG4vKipcbiAqIFByZXZlbnRzIGVycm9ycyBmcm9tIGJlaW5nIHRocm93biB3aGlsZSBhY2Nlc3NpbmcgbmVzdGVkIG1vZGlmaWVyIG9iamVjdHNcbiAqIGluIGBwb3BwZXJPcHRpb25zYFxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGdldE1vZGlmaWVyKG9iaiwga2V5KSB7XG4gIHJldHVybiBvYmogJiYgb2JqLm1vZGlmaWVycyAmJiBvYmoubW9kaWZpZXJzW2tleV07XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYW4gYXJyYXkgb3Igc3RyaW5nIGluY2x1ZGVzIGEgdmFsdWVcbiAqIEBwYXJhbSB7YW55W118U3RyaW5nfSBhXG4gKiBAcGFyYW0ge2FueX0gYlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpbmNsdWRlcyhhLCBiKSB7XG4gIHJldHVybiBhLmluZGV4T2YoYikgPiAtMTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgdmFsdWUgaXMgc2luZ3VsYXItbGlrZVxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzU2luZ3VsYXIodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIGhhc093blByb3BlcnR5KHZhbHVlLCAnaXNWaXJ0dWFsJykpIHx8IHZhbHVlIGluc3RhbmNlb2YgRWxlbWVudDtcbn1cbi8qKlxuICogRmlyZWZveCBleHRlbnNpb25zIGRvbid0IGFsbG93IHNldHRpbmcgLmlubmVySFRNTCBkaXJlY3RseSwgdGhpcyB3aWxsIHRyaWNrIGl0XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gaW5uZXJIVE1MKCkge1xuICByZXR1cm4gJ2lubmVySFRNTCc7XG59XG4vKipcbiAqIEV2YWx1YXRlcyBhIGZ1bmN0aW9uIGlmIG9uZSwgb3IgcmV0dXJucyB0aGUgdmFsdWVcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHthbnlbXX0gYXJnc1xuICogQHJldHVybiB7YW55fVxuICovXG5cbmZ1bmN0aW9uIGV2YWx1YXRlVmFsdWUodmFsdWUsIGFyZ3MpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLmFwcGx5KG51bGwsIGFyZ3MpIDogdmFsdWU7XG59XG4vKipcbiAqIFNldHMgYSBwb3BwZXJJbnN0YW5jZSBgZmxpcGAgbW9kaWZpZXIncyBlbmFibGVkIHN0YXRlXG4gKiBAcGFyYW0ge09iamVjdFtdfSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgdmFsdWUpIHtcbiAgbW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBtLm5hbWUgPT09ICdmbGlwJztcbiAgfSlbMF0uZW5hYmxlZCA9IHZhbHVlO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGVsZW1lbnQgY2FuIHJlY2VpdmUgZm9jdXNcbiAqIEFsd2F5cyByZXR1cm5zIHRydWUgZm9yIHZpcnR1YWwgb2JqZWN0c1xuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGNhblJlY2VpdmVGb2N1cyhlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgRWxlbWVudCA/IG1hdGNoZXMuY2FsbChlbGVtZW50LCAnYVtocmVmXSxhcmVhW2hyZWZdLGJ1dHRvbixkZXRhaWxzLGlucHV0LHRleHRhcmVhLHNlbGVjdCxpZnJhbWUsW3RhYmluZGV4XScpICYmICFlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSA6IHRydWU7XG59XG4vKipcbiAqIFJldHVybnMgYSBuZXcgYGRpdmAgZWxlbWVudFxuICogQHJldHVybiB7SFRNTERpdkVsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gZGl2KCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgaW5uZXJIVE1MIG9mIGFuIGVsZW1lbnQgd2hpbGUgdHJpY2tpbmcgbGludGVycyAmIG1pbmlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fFN0cmluZ30gaHRtbFxuICovXG5cbmZ1bmN0aW9uIHNldElubmVySFRNTChlbGVtZW50LCBodG1sKSB7XG4gIGVsZW1lbnRbaW5uZXJIVE1MKCldID0gaHRtbCBpbnN0YW5jZW9mIEVsZW1lbnQgPyBodG1sW2lubmVySFRNTCgpXSA6IGh0bWw7XG59XG4vKipcbiAqIFNldHMgdGhlIGNvbnRlbnQgb2YgYSB0b29sdGlwXG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBjb250ZW50RWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICovXG5cbmZ1bmN0aW9uIHNldENvbnRlbnQoY29udGVudEVsLCBwcm9wcykge1xuICBpZiAocHJvcHMuY29udGVudCBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICBzZXRJbm5lckhUTUwoY29udGVudEVsLCAnJyk7XG4gICAgY29udGVudEVsLmFwcGVuZENoaWxkKHByb3BzLmNvbnRlbnQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnRlbnRFbFtwcm9wcy5hbGxvd0hUTUwgPyAnaW5uZXJIVE1MJyA6ICd0ZXh0Q29udGVudCddID0gcHJvcHMuY29udGVudDtcbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjaGlsZCBlbGVtZW50cyBvZiBhIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBwb3BwZXJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBnZXRDaGlsZHJlbihwb3BwZXIpIHtcbiAgcmV0dXJuIHtcbiAgICB0b29sdGlwOiBwb3BwZXIucXVlcnlTZWxlY3RvcihTZWxlY3RvcnMuVE9PTFRJUCksXG4gICAgYmFja2Ryb3A6IHBvcHBlci5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5CQUNLRFJPUCksXG4gICAgY29udGVudDogcG9wcGVyLnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3JzLkNPTlRFTlQpLFxuICAgIGFycm93OiBwb3BwZXIucXVlcnlTZWxlY3RvcihTZWxlY3RvcnMuQVJST1cpIHx8IHBvcHBlci5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5ST1VORF9BUlJPVylcbiAgfTtcbn1cbi8qKlxuICogQWRkcyBgZGF0YS1pbmVydGlhYCBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqL1xuXG5mdW5jdGlvbiBhZGRJbmVydGlhKHRvb2x0aXApIHtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW5lcnRpYScsICcnKTtcbn1cbi8qKlxuICogUmVtb3ZlcyBgZGF0YS1pbmVydGlhYCBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqL1xuXG5mdW5jdGlvbiByZW1vdmVJbmVydGlhKHRvb2x0aXApIHtcbiAgdG9vbHRpcC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtaW5lcnRpYScpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycm93IGVsZW1lbnQgYW5kIHJldHVybnMgaXRcbiAqIEBwYXJhbSB7U3RyaW5nfSBhcnJvd1R5cGVcbiAqIEByZXR1cm4ge0hUTUxEaXZFbGVtZW50fVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUFycm93RWxlbWVudChhcnJvd1R5cGUpIHtcbiAgdmFyIGFycm93ID0gZGl2KCk7XG5cbiAgaWYgKGFycm93VHlwZSA9PT0gJ3JvdW5kJykge1xuICAgIGFycm93LmNsYXNzTmFtZSA9ICd0aXBweS1yb3VuZGFycm93JztcbiAgICBzZXRJbm5lckhUTUwoYXJyb3csICc8c3ZnIHZpZXdCb3g9XCIwIDAgMTggN1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTAgN3MyLjAyMS0uMDE1IDUuMjUzLTQuMjE4QzYuNTg0IDEuMDUxIDcuNzk3LjAwNyA5IDBjMS4yMDMtLjAwNyAyLjQxNiAxLjAzNSAzLjc2MSAyLjc4MkMxNi4wMTIgNy4wMDUgMTggNyAxOCA3SDB6XCIvPjwvc3ZnPicpO1xuICB9IGVsc2Uge1xuICAgIGFycm93LmNsYXNzTmFtZSA9ICd0aXBweS1hcnJvdyc7XG4gIH1cblxuICByZXR1cm4gYXJyb3c7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBiYWNrZHJvcCBlbGVtZW50IGFuZCByZXR1cm5zIGl0XG4gKiBAcmV0dXJuIHtIVE1MRGl2RWxlbWVudH1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCYWNrZHJvcEVsZW1lbnQoKSB7XG4gIHZhciBiYWNrZHJvcCA9IGRpdigpO1xuICBiYWNrZHJvcC5jbGFzc05hbWUgPSAndGlwcHktYmFja2Ryb3AnO1xuICBiYWNrZHJvcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG4gIHJldHVybiBiYWNrZHJvcDtcbn1cbi8qKlxuICogQWRkcyBpbnRlcmFjdGl2ZS1yZWxhdGVkIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gdG9vbHRpcFxuICovXG5cbmZ1bmN0aW9uIGFkZEludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCkge1xuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1pbnRlcmFjdGl2ZScsICcnKTtcbn1cbi8qKlxuICogUmVtb3ZlcyBpbnRlcmFjdGl2ZS1yZWxhdGVkIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gdG9vbHRpcFxuICovXG5cbmZ1bmN0aW9uIHJlbW92ZUludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCkge1xuICBwb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICB0b29sdGlwLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbnRlcmFjdGl2ZScpO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNpdGlvbiBkdXJhdGlvbiB0byBhIGxpc3Qgb2YgZWxlbWVudHNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnRbXX0gZWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihlbHMsIHZhbHVlKSB7XG4gIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCJcIi5jb25jYXQodmFsdWUsIFwibXNcIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogQWRkL3JlbW92ZSB0cmFuc2l0aW9uZW5kIGxpc3RlbmVyIGZyb20gdG9vbHRpcFxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gdG9vbHRpcFxuICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXJcbiAqL1xuXG5mdW5jdGlvbiB0b2dnbGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIodG9vbHRpcCwgYWN0aW9uLCBsaXN0ZW5lcikge1xuICAvLyBVQyBCcm93c2VyIGhhc24ndCBhZG9wdGVkIHRoZSBgdHJhbnNpdGlvbmVuZGAgZXZlbnQgZGVzcGl0ZSBzdXBwb3J0aW5nXG4gIC8vIHVucHJlZml4ZWQgdHJhbnNpdGlvbnMuLi5cbiAgdmFyIGV2ZW50TmFtZSA9IGlzVUNCcm93c2VyICYmIGRvY3VtZW50LmJvZHkuc3R5bGUud2Via2l0VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkID8gJ3dlYmtpdFRyYW5zaXRpb25FbmQnIDogJ3RyYW5zaXRpb25lbmQnO1xuICB0b29sdGlwW2FjdGlvbiArICdFdmVudExpc3RlbmVyJ10oZXZlbnROYW1lLCBsaXN0ZW5lcik7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHBvcHBlcidzIHBsYWNlbWVudCwgaWdub3Jpbmcgc2hpZnRpbmcgKHRvcC1zdGFydCwgZXRjKVxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gcG9wcGVyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gZ2V0UG9wcGVyUGxhY2VtZW50KHBvcHBlcikge1xuICB2YXIgZnVsbFBsYWNlbWVudCA9IHBvcHBlci5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gIHJldHVybiBmdWxsUGxhY2VtZW50ID8gZnVsbFBsYWNlbWVudC5zcGxpdCgnLScpWzBdIDogJyc7XG59XG4vKipcbiAqIFNldHMgdGhlIHZpc2liaWxpdHkgc3RhdGUgdG8gZWxlbWVudHMgc28gdGhleSBjYW4gYmVnaW4gdG8gdHJhbnNpdGlvblxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudFtdfSBlbHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZVxuICovXG5cbmZ1bmN0aW9uIHNldFZpc2liaWxpdHlTdGF0ZShlbHMsIHN0YXRlKSB7XG4gIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgc3RhdGUpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFRyaWdnZXJzIHJlZmxvd1xuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gcG9wcGVyXG4gKi9cblxuZnVuY3Rpb24gcmVmbG93KHBvcHBlcikge1xuICB2b2lkIHBvcHBlci5vZmZzZXRIZWlnaHQ7XG59XG4vKipcbiAqIEFkZHMvcmVtb3ZlcyB0aGVtZSBmcm9tIHRvb2x0aXAncyBjbGFzc0xpc3RcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2x0aXBcbiAqIEBwYXJhbSB7U3RyaW5nfSBhY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSB0aGVtZVxuICovXG5cbmZ1bmN0aW9uIHRvZ2dsZVRoZW1lKHRvb2x0aXAsIGFjdGlvbiwgdGhlbWUpIHtcbiAgdGhlbWUuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uICh0aGVtZU5hbWUpIHtcbiAgICB0b29sdGlwLmNsYXNzTGlzdFthY3Rpb25dKHRoZW1lTmFtZSArICctdGhlbWUnKTtcbiAgfSk7XG59XG4vKipcbiAqIENvbnN0cnVjdHMgdGhlIHBvcHBlciBlbGVtZW50IGFuZCByZXR1cm5zIGl0XG4gKiBAcGFyYW0ge051bWJlcn0gaWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7SFRNTERpdkVsZW1lbnR9XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUG9wcGVyRWxlbWVudChpZCwgcHJvcHMpIHtcbiAgdmFyIHBvcHBlciA9IGRpdigpO1xuICBwb3BwZXIuY2xhc3NOYW1lID0gJ3RpcHB5LXBvcHBlcic7XG4gIHBvcHBlci5pZCA9IFwidGlwcHktXCIuY29uY2F0KGlkKTtcbiAgcG9wcGVyLnN0eWxlLnpJbmRleCA9IHByb3BzLnpJbmRleDtcblxuICBpZiAocHJvcHMucm9sZSkge1xuICAgIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCBwcm9wcy5yb2xlKTtcbiAgfVxuXG4gIHZhciB0b29sdGlwID0gZGl2KCk7XG4gIHRvb2x0aXAuY2xhc3NOYW1lID0gJ3RpcHB5LXRvb2x0aXAnO1xuICB0b29sdGlwLnN0eWxlLm1heFdpZHRoID0gcHJvcHMubWF4V2lkdGggKyAodHlwZW9mIHByb3BzLm1heFdpZHRoID09PSAnbnVtYmVyJyA/ICdweCcgOiAnJyk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBwcm9wcy5zaXplKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0aW9uJywgcHJvcHMuYW5pbWF0aW9uKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG4gIHRvZ2dsZVRoZW1lKHRvb2x0aXAsICdhZGQnLCBwcm9wcy50aGVtZSk7XG4gIHZhciBjb250ZW50ID0gZGl2KCk7XG4gIGNvbnRlbnQuY2xhc3NOYW1lID0gJ3RpcHB5LWNvbnRlbnQnO1xuICBjb250ZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0ZScsICdoaWRkZW4nKTtcblxuICBpZiAocHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICBhZGRJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApO1xuICB9XG5cbiAgaWYgKHByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5hcHBlbmRDaGlsZChjcmVhdGVBcnJvd0VsZW1lbnQocHJvcHMuYXJyb3dUeXBlKSk7XG4gIH1cblxuICBpZiAocHJvcHMuYW5pbWF0ZUZpbGwpIHtcbiAgICB0b29sdGlwLmFwcGVuZENoaWxkKGNyZWF0ZUJhY2tkcm9wRWxlbWVudCgpKTtcbiAgICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRlZmlsbCcsICcnKTtcbiAgfVxuXG4gIGlmIChwcm9wcy5pbmVydGlhKSB7XG4gICAgYWRkSW5lcnRpYSh0b29sdGlwKTtcbiAgfVxuXG4gIHNldENvbnRlbnQoY29udGVudCwgcHJvcHMpO1xuICB0b29sdGlwLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICBwb3BwZXIuYXBwZW5kQ2hpbGQodG9vbHRpcCk7XG4gIHJldHVybiBwb3BwZXI7XG59XG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvcHBlciBlbGVtZW50IGJhc2VkIG9uIHRoZSBuZXcgcHJvcHNcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IHByZXZQcm9wc1xuICogQHBhcmFtIHtPYmplY3R9IG5leHRQcm9wc1xuICovXG5cbmZ1bmN0aW9uIHVwZGF0ZVBvcHBlckVsZW1lbnQocG9wcGVyLCBwcmV2UHJvcHMsIG5leHRQcm9wcykge1xuICB2YXIgX2dldENoaWxkcmVuID0gZ2V0Q2hpbGRyZW4ocG9wcGVyKSxcbiAgICAgIHRvb2x0aXAgPSBfZ2V0Q2hpbGRyZW4udG9vbHRpcCxcbiAgICAgIGNvbnRlbnQgPSBfZ2V0Q2hpbGRyZW4uY29udGVudCxcbiAgICAgIGJhY2tkcm9wID0gX2dldENoaWxkcmVuLmJhY2tkcm9wLFxuICAgICAgYXJyb3cgPSBfZ2V0Q2hpbGRyZW4uYXJyb3c7XG5cbiAgcG9wcGVyLnN0eWxlLnpJbmRleCA9IG5leHRQcm9wcy56SW5kZXg7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBuZXh0UHJvcHMuc2l6ZSk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGlvbicsIG5leHRQcm9wcy5hbmltYXRpb24pO1xuICB0b29sdGlwLnN0eWxlLm1heFdpZHRoID0gbmV4dFByb3BzLm1heFdpZHRoICsgKHR5cGVvZiBuZXh0UHJvcHMubWF4V2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnKTtcblxuICBpZiAobmV4dFByb3BzLnJvbGUpIHtcbiAgICBwb3BwZXIuc2V0QXR0cmlidXRlKCdyb2xlJywgbmV4dFByb3BzLnJvbGUpO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKTtcbiAgfVxuXG4gIGlmIChwcmV2UHJvcHMuY29udGVudCAhPT0gbmV4dFByb3BzLmNvbnRlbnQpIHtcbiAgICBzZXRDb250ZW50KGNvbnRlbnQsIG5leHRQcm9wcyk7XG4gIH0gLy8gYW5pbWF0ZUZpbGxcblxuXG4gIGlmICghcHJldlByb3BzLmFuaW1hdGVGaWxsICYmIG5leHRQcm9wcy5hbmltYXRlRmlsbCkge1xuICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQoY3JlYXRlQmFja2Ryb3BFbGVtZW50KCkpO1xuICAgIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGVmaWxsJywgJycpO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5hbmltYXRlRmlsbCAmJiAhbmV4dFByb3BzLmFuaW1hdGVGaWxsKSB7XG4gICAgdG9vbHRpcC5yZW1vdmVDaGlsZChiYWNrZHJvcCk7XG4gICAgdG9vbHRpcC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0ZWZpbGwnKTtcbiAgfSAvLyBhcnJvd1xuXG5cbiAgaWYgKCFwcmV2UHJvcHMuYXJyb3cgJiYgbmV4dFByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5hcHBlbmRDaGlsZChjcmVhdGVBcnJvd0VsZW1lbnQobmV4dFByb3BzLmFycm93VHlwZSkpO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5hcnJvdyAmJiAhbmV4dFByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5yZW1vdmVDaGlsZChhcnJvdyk7XG4gIH0gLy8gYXJyb3dUeXBlXG5cblxuICBpZiAocHJldlByb3BzLmFycm93ICYmIG5leHRQcm9wcy5hcnJvdyAmJiBwcmV2UHJvcHMuYXJyb3dUeXBlICE9PSBuZXh0UHJvcHMuYXJyb3dUeXBlKSB7XG4gICAgdG9vbHRpcC5yZXBsYWNlQ2hpbGQoY3JlYXRlQXJyb3dFbGVtZW50KG5leHRQcm9wcy5hcnJvd1R5cGUpLCBhcnJvdyk7XG4gIH0gLy8gaW50ZXJhY3RpdmVcblxuXG4gIGlmICghcHJldlByb3BzLmludGVyYWN0aXZlICYmIG5leHRQcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgIGFkZEludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCk7XG4gIH0gZWxzZSBpZiAocHJldlByb3BzLmludGVyYWN0aXZlICYmICFuZXh0UHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICByZW1vdmVJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApO1xuICB9IC8vIGluZXJ0aWFcblxuXG4gIGlmICghcHJldlByb3BzLmluZXJ0aWEgJiYgbmV4dFByb3BzLmluZXJ0aWEpIHtcbiAgICBhZGRJbmVydGlhKHRvb2x0aXApO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5pbmVydGlhICYmICFuZXh0UHJvcHMuaW5lcnRpYSkge1xuICAgIHJlbW92ZUluZXJ0aWEodG9vbHRpcCk7XG4gIH0gLy8gdGhlbWVcblxuXG4gIGlmIChwcmV2UHJvcHMudGhlbWUgIT09IG5leHRQcm9wcy50aGVtZSkge1xuICAgIHRvZ2dsZVRoZW1lKHRvb2x0aXAsICdyZW1vdmUnLCBwcmV2UHJvcHMudGhlbWUpO1xuICAgIHRvZ2dsZVRoZW1lKHRvb2x0aXAsICdhZGQnLCBuZXh0UHJvcHMudGhlbWUpO1xuICB9XG59XG4vKipcbiAqIFJ1bnMgdGhlIGNhbGxiYWNrIGFmdGVyIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBoYXMgYmVlbiB1cGRhdGVkXG4gKiB1cGRhdGUoKSBpcyBkZWJvdW5jZWQgd2l0aCBQcm9taXNlLnJlc29sdmUoKSBvciBzZXRUaW1lb3V0KClcbiAqIHNjaGVkdWxlVXBkYXRlKCkgaXMgdXBkYXRlKCkgd3JhcHBlZCBpbiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKVxuICogQHBhcmFtIHtPYmplY3R9IHBvcHBlckluc3RhbmNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5cbmZ1bmN0aW9uIGFmdGVyUG9wcGVyUG9zaXRpb25VcGRhdGVzKHBvcHBlckluc3RhbmNlLCBjYWxsYmFjaykge1xuICB2YXIgcG9wcGVyID0gcG9wcGVySW5zdGFuY2UucG9wcGVyLFxuICAgICAgb3B0aW9ucyA9IHBvcHBlckluc3RhbmNlLm9wdGlvbnM7XG4gIHZhciBvbkNyZWF0ZSA9IG9wdGlvbnMub25DcmVhdGUsXG4gICAgICBvblVwZGF0ZSA9IG9wdGlvbnMub25VcGRhdGU7XG5cbiAgb3B0aW9ucy5vbkNyZWF0ZSA9IG9wdGlvbnMub25VcGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJlZmxvdyhwb3BwZXIpO1xuICAgIGNhbGxiYWNrKCk7XG4gICAgb25VcGRhdGUoZGF0YSk7XG4gICAgb3B0aW9ucy5vbkNyZWF0ZSA9IG9uQ3JlYXRlO1xuICAgIG9wdGlvbnMub25VcGRhdGUgPSBvblVwZGF0ZTtcbiAgfTtcbn1cbi8qKlxuICogSGlkZXMgYWxsIHZpc2libGUgcG9wcGVycyBvbiB0aGUgZG9jdW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cblxuZnVuY3Rpb24gaGlkZUFsbCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgY2hlY2tIaWRlT25DbGljayA9IF9yZWYuY2hlY2tIaWRlT25DbGljayxcbiAgICAgIGV4Y2x1ZGUgPSBfcmVmLmV4Y2x1ZGUsXG4gICAgICBkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb247XG5cbiAgYXJyYXlGcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3JzLlBPUFBFUikpLmZvckVhY2goZnVuY3Rpb24gKHBvcHBlcikge1xuICAgIHZhciBpbnN0YW5jZSA9IHBvcHBlci5fdGlwcHk7XG5cbiAgICBpZiAoaW5zdGFuY2UgJiYgKGNoZWNrSGlkZU9uQ2xpY2sgPyBpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayA9PT0gdHJ1ZSA6IHRydWUpICYmICghZXhjbHVkZSB8fCBwb3BwZXIgIT09IGV4Y2x1ZGUucG9wcGVyKSkge1xuICAgICAgaW5zdGFuY2UuaGlkZShkdXJhdGlvbik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgbW91c2UgY3Vyc29yIGlzIG91dHNpZGUgb2YgdGhlIHBvcHBlcidzIGludGVyYWN0aXZlIGJvcmRlclxuICogcmVnaW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gcG9wcGVyUGxhY2VtZW50XG4gKiBAcGFyYW0ge0NsaWVudFJlY3R9IHBvcHBlclJlY3RcbiAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc0N1cnNvck91dHNpZGVJbnRlcmFjdGl2ZUJvcmRlcihwb3BwZXJQbGFjZW1lbnQsIHBvcHBlclJlY3QsIGV2ZW50LCBwcm9wcykge1xuICBpZiAoIXBvcHBlclBsYWNlbWVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHggPSBldmVudC5jbGllbnRYLFxuICAgICAgeSA9IGV2ZW50LmNsaWVudFk7XG4gIHZhciBpbnRlcmFjdGl2ZUJvcmRlciA9IHByb3BzLmludGVyYWN0aXZlQm9yZGVyLFxuICAgICAgZGlzdGFuY2UgPSBwcm9wcy5kaXN0YW5jZTtcbiAgdmFyIGV4Y2VlZHNUb3AgPSBwb3BwZXJSZWN0LnRvcCAtIHkgPiAocG9wcGVyUGxhY2VtZW50ID09PSAndG9wJyA/IGludGVyYWN0aXZlQm9yZGVyICsgZGlzdGFuY2UgOiBpbnRlcmFjdGl2ZUJvcmRlcik7XG4gIHZhciBleGNlZWRzQm90dG9tID0geSAtIHBvcHBlclJlY3QuYm90dG9tID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ2JvdHRvbScgPyBpbnRlcmFjdGl2ZUJvcmRlciArIGRpc3RhbmNlIDogaW50ZXJhY3RpdmVCb3JkZXIpO1xuICB2YXIgZXhjZWVkc0xlZnQgPSBwb3BwZXJSZWN0LmxlZnQgLSB4ID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ2xlZnQnID8gaW50ZXJhY3RpdmVCb3JkZXIgKyBkaXN0YW5jZSA6IGludGVyYWN0aXZlQm9yZGVyKTtcbiAgdmFyIGV4Y2VlZHNSaWdodCA9IHggLSBwb3BwZXJSZWN0LnJpZ2h0ID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IGludGVyYWN0aXZlQm9yZGVyICsgZGlzdGFuY2UgOiBpbnRlcmFjdGl2ZUJvcmRlcik7XG4gIHJldHVybiBleGNlZWRzVG9wIHx8IGV4Y2VlZHNCb3R0b20gfHwgZXhjZWVkc0xlZnQgfHwgZXhjZWVkc1JpZ2h0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSBvZmZzZXQsIHRha2luZyBpbnRvIGFjY291bnQgdGhlIGRlZmF1bHQgb2Zmc2V0IGR1ZSB0b1xuICogdGhlIHRyYW5zZm9ybTogdHJhbnNsYXRlKCkgcnVsZSAoMTBweCkgaW4gQ1NTXG4gKiBAcGFyYW0ge051bWJlcn0gZGlzdGFuY2VcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBnZXRPZmZzZXREaXN0YW5jZUluUHgoZGlzdGFuY2UpIHtcbiAgcmV0dXJuIC0oZGlzdGFuY2UgLSAxMCkgKyAncHgnO1xufVxuXG52YXIgUEFTU0lWRSA9IHtcbiAgcGFzc2l2ZTogdHJ1ZVxufTtcbnZhciBQQURESU5HID0gNDtcblxudmFyIGlzVXNpbmdUb3VjaCA9IGZhbHNlO1xuZnVuY3Rpb24gb25Eb2N1bWVudFRvdWNoKCkge1xuICBpZiAoaXNVc2luZ1RvdWNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaXNVc2luZ1RvdWNoID0gdHJ1ZTtcblxuICBpZiAoaXNJT1MpIHtcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3RpcHB5LWlPUycpO1xuICB9XG5cbiAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpO1xuICB9XG59XG52YXIgbGFzdE1vdXNlTW92ZVRpbWUgPSAwO1xuZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlTW92ZSgpIHtcbiAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpOyAvLyBDaHJvbWUgNjArIGlzIDEgbW91c2Vtb3ZlIHBlciBhbmltYXRpb24gZnJhbWUsIHVzZSAyMG1zIHRpbWUgZGlmZmVyZW5jZVxuXG4gIGlmIChub3cgLSBsYXN0TW91c2VNb3ZlVGltZSA8IDIwKSB7XG4gICAgaXNVc2luZ1RvdWNoID0gZmFsc2U7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Eb2N1bWVudE1vdXNlTW92ZSk7XG5cbiAgICBpZiAoIWlzSU9TKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ3RpcHB5LWlPUycpO1xuICAgIH1cbiAgfVxuXG4gIGxhc3RNb3VzZU1vdmVUaW1lID0gbm93O1xufVxuZnVuY3Rpb24gb25Eb2N1bWVudENsaWNrKF9yZWYpIHtcbiAgdmFyIHRhcmdldCA9IF9yZWYudGFyZ2V0O1xuXG4gIC8vIFNpbXVsYXRlZCBldmVudHMgZGlzcGF0Y2hlZCBvbiB0aGUgZG9jdW1lbnRcbiAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkpIHtcbiAgICByZXR1cm4gaGlkZUFsbCgpO1xuICB9IC8vIENsaWNrZWQgb24gYW4gaW50ZXJhY3RpdmUgcG9wcGVyXG5cblxuICB2YXIgcG9wcGVyID0gY2xvc2VzdCh0YXJnZXQsIFNlbGVjdG9ycy5QT1BQRVIpOyAvLyBAdHMtaWdub3JlXG5cbiAgaWYgKHBvcHBlciAmJiBwb3BwZXIuX3RpcHB5ICYmIHBvcHBlci5fdGlwcHkucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ2xpY2tlZCBvbiBhIHJlZmVyZW5jZVxuXG5cbiAgdmFyIHJlZmVyZW5jZSA9IGNsb3Nlc3RDYWxsYmFjayh0YXJnZXQsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuX3RpcHB5ICYmIGVsZW1lbnQuX3RpcHB5LnJlZmVyZW5jZSA9PT0gZWxlbWVudDtcbiAgfSk7XG5cbiAgaWYgKHJlZmVyZW5jZSkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgaW5zdGFuY2UgPSByZWZlcmVuY2UuX3RpcHB5O1xuICAgIHZhciBpc0NsaWNrVHJpZ2dlciA9IGluY2x1ZGVzKGluc3RhbmNlLnByb3BzLnRyaWdnZXIsICdjbGljaycpO1xuXG4gICAgaWYgKGlzVXNpbmdUb3VjaCB8fCBpc0NsaWNrVHJpZ2dlcikge1xuICAgICAgcmV0dXJuIGhpZGVBbGwoe1xuICAgICAgICBleGNsdWRlOiBpbnN0YW5jZSxcbiAgICAgICAgY2hlY2tIaWRlT25DbGljazogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmhpZGVPbkNsaWNrICE9PSB0cnVlIHx8IGlzQ2xpY2tUcmlnZ2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5zdGFuY2UuY2xlYXJEZWxheVRpbWVvdXRzKCk7XG4gIH1cblxuICBoaWRlQWxsKHtcbiAgICBjaGVja0hpZGVPbkNsaWNrOiB0cnVlXG4gIH0pO1xufVxuZnVuY3Rpb24gb25XaW5kb3dCbHVyKCkge1xuICB2YXIgX2RvY3VtZW50ID0gZG9jdW1lbnQsXG4gICAgICBhY3RpdmVFbGVtZW50ID0gX2RvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7IC8vIEB0cy1pZ25vcmVcblxuICBpZiAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50LmJsdXIgJiYgYWN0aXZlRWxlbWVudC5fdGlwcHkpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cbn1cbi8qKlxuICogQWRkcyB0aGUgbmVlZGVkIGdsb2JhbCBldmVudCBsaXN0ZW5lcnNcbiAqL1xuXG5mdW5jdGlvbiBiaW5kR2xvYmFsRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25Eb2N1bWVudENsaWNrLCB0cnVlKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uRG9jdW1lbnRUb3VjaCwgUEFTU0lWRSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgb25XaW5kb3dCbHVyKTtcbn1cblxudmFyIGtleXMgPSBPYmplY3Qua2V5cyhEZWZhdWx0cyk7XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIG9wdGlvbmFsIHByb3BzIGZyb20gZGF0YS10aXBweS0qIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gZ2V0RGF0YUF0dHJpYnV0ZU9wdGlvbnMocmVmZXJlbmNlKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICB2YXIgdmFsdWVBc1N0cmluZyA9IChyZWZlcmVuY2UuZ2V0QXR0cmlidXRlKFwiZGF0YS10aXBweS1cIi5jb25jYXQoa2V5KSkgfHwgJycpLnRyaW0oKTtcblxuICAgIGlmICghdmFsdWVBc1N0cmluZykge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGFjY1trZXldID0gdmFsdWVBc1N0cmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYWNjW2tleV0gPSBKU09OLnBhcnNlKHZhbHVlQXNTdHJpbmcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBhY2Nba2V5XSA9IHZhbHVlQXNTdHJpbmc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuLyoqXG4gKiBQb2x5ZmlsbHMgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIChwbGFpbiBvYmplY3QpIHdpdGggRWxlbWVudC5wcm90b3R5cGUgcHJvcHNcbiAqIE11dGF0aW5nIGJlY2F1c2UgRE9NIGVsZW1lbnRzIGFyZSBtdXRhdGVkLCBhZGRzIGBfdGlwcHlgIHByb3BlcnR5XG4gKiBAcGFyYW0ge09iamVjdH0gdmlydHVhbFJlZmVyZW5jZVxuICovXG5cbmZ1bmN0aW9uIHBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXModmlydHVhbFJlZmVyZW5jZSkge1xuICB2YXIgcG9seWZpbGxzID0ge1xuICAgIGlzVmlydHVhbDogdHJ1ZSxcbiAgICBhdHRyaWJ1dGVzOiB2aXJ0dWFsUmVmZXJlbmNlLmF0dHJpYnV0ZXMgfHwge30sXG4gICAgc2V0QXR0cmlidXRlOiBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSkge1xuICAgICAgdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcbiAgICB9LFxuICAgIGdldEF0dHJpYnV0ZTogZnVuY3Rpb24gZ2V0QXR0cmlidXRlKGtleSkge1xuICAgICAgcmV0dXJuIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlc1trZXldO1xuICAgIH0sXG4gICAgcmVtb3ZlQXR0cmlidXRlOiBmdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUoa2V5KSB7XG4gICAgICBkZWxldGUgdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzW2tleV07XG4gICAgfSxcbiAgICBoYXNBdHRyaWJ1dGU6IGZ1bmN0aW9uIGhhc0F0dHJpYnV0ZShrZXkpIHtcbiAgICAgIHJldHVybiBrZXkgaW4gdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICBjbGFzc0xpc3Q6IHtcbiAgICAgIGNsYXNzTmFtZXM6IHt9LFxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQoa2V5KSB7XG4gICAgICAgIHZpcnR1YWxSZWZlcmVuY2UuY2xhc3NMaXN0LmNsYXNzTmFtZXNba2V5XSA9IHRydWU7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoa2V5KSB7XG4gICAgICAgIGRlbGV0ZSB2aXJ0dWFsUmVmZXJlbmNlLmNsYXNzTGlzdC5jbGFzc05hbWVzW2tleV07XG4gICAgICB9LFxuICAgICAgY29udGFpbnM6IGZ1bmN0aW9uIGNvbnRhaW5zKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5IGluIHZpcnR1YWxSZWZlcmVuY2UuY2xhc3NMaXN0LmNsYXNzTmFtZXM7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwb2x5ZmlsbHMpIHtcbiAgICB2aXJ0dWFsUmVmZXJlbmNlW2tleV0gPSBwb2x5ZmlsbHNba2V5XTtcbiAgfVxufVxuXG4vKipcbiAqIEV2YWx1YXRlcyB0aGUgcHJvcHMgb2JqZWN0IGJ5IG1lcmdpbmcgZGF0YSBhdHRyaWJ1dGVzIGFuZFxuICogZGlzYWJsaW5nIGNvbmZsaWN0aW5nIG9wdGlvbnMgd2hlcmUgbmVjZXNzYXJ5XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gZXZhbHVhdGVQcm9wcyhyZWZlcmVuY2UsIHByb3BzKSB7XG4gIHZhciBvdXQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb250ZW50OiBldmFsdWF0ZVZhbHVlKHByb3BzLmNvbnRlbnQsIFtyZWZlcmVuY2VdKVxuICB9LCBwcm9wcy5pZ25vcmVBdHRyaWJ1dGVzID8ge30gOiBnZXREYXRhQXR0cmlidXRlT3B0aW9ucyhyZWZlcmVuY2UpKTtcblxuICBpZiAob3V0LmFycm93IHx8IGlzVUNCcm93c2VyKSB7XG4gICAgb3V0LmFuaW1hdGVGaWxsID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBWYWxpZGF0ZXMgYW4gb2JqZWN0IG9mIG9wdGlvbnMgd2l0aCB0aGUgdmFsaWQgZGVmYXVsdCBwcm9wcyBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdHNcbiAqL1xuXG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGRlZmF1bHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkoZGVmYXVsdHMsIG9wdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlt0aXBweV06IGBcIi5jb25jYXQob3B0aW9uLCBcImAgaXMgbm90IGEgdmFsaWQgb3B0aW9uXCIpKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgaWRDb3VudGVyID0gMTtcbi8qKlxuICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIFRpcHB5IG9iamVjdC4gV2UncmUgdXNpbmcgYSBjbG9zdXJlIHBhdHRlcm4gaW5zdGVhZCBvZlxuICogYSBjbGFzcyBzbyB0aGF0IHRoZSBleHBvc2VkIG9iamVjdCBBUEkgaXMgY2xlYW4gd2l0aG91dCBwcml2YXRlIG1lbWJlcnNcbiAqIHByZWZpeGVkIHdpdGggYF9gLlxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2xsZWN0aW9uUHJvcHNcbiAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVUaXBweShyZWZlcmVuY2UsIGNvbGxlY3Rpb25Qcm9wcykge1xuICB2YXIgcHJvcHMgPSBldmFsdWF0ZVByb3BzKHJlZmVyZW5jZSwgY29sbGVjdGlvblByb3BzKTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBzaG91bGRuJ3QgaGF2ZSBtdWx0aXBsZSB0aXBweXMsIHJldHVybiBudWxsIGVhcmx5XG4gIC8vIEB0cy1pZ25vcmVcblxuICBpZiAoIXByb3BzLm11bHRpcGxlICYmIHJlZmVyZW5jZS5fdGlwcHkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PSDwn5SSIFByaXZhdGUgbWVtYmVycyDwn5SSID09PT09PT09PT09PT09PT09PT09PT09ICovXG4gIC8vIFRoZSBsYXN0IHRyaWdnZXIgZXZlbnQgb2JqZWN0IHRoYXQgY2F1c2VkIHRoZSB0aXBweSB0byBzaG93XG5cblxuICB2YXIgbGFzdFRyaWdnZXJFdmVudCA9IHt9OyAvLyBUaGUgbGFzdCBtb3VzZW1vdmUgZXZlbnQgb2JqZWN0IGNyZWF0ZWQgYnkgdGhlIGRvY3VtZW50IG1vdXNlbW92ZSBldmVudFxuXG4gIHZhciBsYXN0TW91c2VNb3ZlRXZlbnQgPSBudWxsOyAvLyBUaW1lb3V0IGNyZWF0ZWQgYnkgdGhlIHNob3cgZGVsYXlcblxuICB2YXIgc2hvd1RpbWVvdXRJZCA9IDA7IC8vIFRpbWVvdXQgY3JlYXRlZCBieSB0aGUgaGlkZSBkZWxheVxuXG4gIHZhciBoaWRlVGltZW91dElkID0gMDsgLy8gRmxhZyB0byBkZXRlcm1pbmUgaWYgdGhlIHRpcHB5IGlzIHNjaGVkdWxlZCB0byBzaG93IGR1ZSB0byB0aGUgc2hvdyB0aW1lb3V0XG5cbiAgdmFyIGlzU2NoZWR1bGVkVG9TaG93ID0gZmFsc2U7IC8vIFRoZSBjdXJyZW50IGB0cmFuc2l0aW9uZW5kYCBjYWxsYmFjayByZWZlcmVuY2VcblxuICB2YXIgdHJhbnNpdGlvbkVuZExpc3RlbmVyID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZExpc3RlbmVyKCkge307IC8vIEFycmF5IG9mIGV2ZW50IGxpc3RlbmVycyBjdXJyZW50bHkgYXR0YWNoZWQgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG5cblxuICB2YXIgbGlzdGVuZXJzID0gW107IC8vIFByaXZhdGUgb25Nb3VzZU1vdmUgaGFuZGxlciByZWZlcmVuY2UsIGRlYm91bmNlZCBvciBub3RcblxuICB2YXIgZGVib3VuY2VkT25Nb3VzZU1vdmUgPSBwcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlID4gMCA/IGRlYm91bmNlKG9uTW91c2VNb3ZlLCBwcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlKSA6IG9uTW91c2VNb3ZlOyAvLyBOb2RlIHRoZSB0aXBweSBpcyBjdXJyZW50bHkgYXBwZW5kZWQgdG9cblxuICB2YXIgcGFyZW50Tm9kZSA9IG51bGw7XG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09IPCflJEgUHVibGljIG1lbWJlcnMg8J+UkSA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuICAvLyBpZCB1c2VkIGZvciB0aGUgYGFyaWEtZGVzY3JpYmVkYnlgIC8gYGFyaWEtbGFiZWxsZWRieWAgYXR0cmlidXRlXG5cbiAgdmFyIGlkID0gaWRDb3VudGVyKys7IC8vIFBvcHBlciBlbGVtZW50IHJlZmVyZW5jZVxuXG4gIHZhciBwb3BwZXIgPSBjcmVhdGVQb3BwZXJFbGVtZW50KGlkLCBwcm9wcyk7IC8vIFByZXZlbnQgYSB0aXBweSB3aXRoIGEgZGVsYXkgZnJvbSBoaWRpbmcgaWYgdGhlIGN1cnNvciBsZWZ0IHRoZW4gcmV0dXJuZWRcbiAgLy8gYmVmb3JlIGl0IHN0YXJ0ZWQgaGlkaW5nXG5cbiAgcG9wcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlICYmIGxhc3RUcmlnZ2VyRXZlbnQudHlwZSA9PT0gJ21vdXNlZW50ZXInKSB7XG4gICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHBvcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBsYXN0VHJpZ2dlckV2ZW50LnR5cGUgPT09ICdtb3VzZWVudGVyJykge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgIH1cbiAgfSk7IC8vIFBvcHBlciBlbGVtZW50IGNoaWxkcmVuOiB7IGFycm93LCBiYWNrZHJvcCwgY29udGVudCwgdG9vbHRpcCB9XG5cbiAgdmFyIHBvcHBlckNoaWxkcmVuID0gZ2V0Q2hpbGRyZW4ocG9wcGVyKTtcbiAgdmFyIHN0YXRlID0ge1xuICAgIC8vIElzIHRoZSBpbnN0YW5jZSBjdXJyZW50bHkgZW5hYmxlZD9cbiAgICBpc0VuYWJsZWQ6IHRydWUsXG4gICAgLy8gSXMgdGhlIHRpcHB5IGN1cnJlbnRseSBzaG93aW5nIGFuZCBub3QgdHJhbnNpdGlvbmluZyBvdXQ/XG4gICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAvLyBIYXMgdGhlIGluc3RhbmNlIGJlZW4gZGVzdHJveWVkP1xuICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAvLyBJcyB0aGUgdGlwcHkgY3VycmVudGx5IG1vdW50ZWQgdG8gdGhlIERPTT9cbiAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgIC8vIEhhcyB0aGUgdGlwcHkgZmluaXNoZWQgdHJhbnNpdGlvbmluZyBpbj9cbiAgICBpc1Nob3duOiBmYWxzZSAvLyBQb3BwZXIuanMgaW5zdGFuY2UgZm9yIHRoZSB0aXBweSBpcyBsYXppbHkgY3JlYXRlZFxuXG4gIH07XG4gIHZhciBwb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gIHZhciBpbnN0YW5jZSA9IHtcbiAgICAvLyBwcm9wZXJ0aWVzXG4gICAgaWQ6IGlkLFxuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgIHBvcHBlcjogcG9wcGVyLFxuICAgIHBvcHBlckNoaWxkcmVuOiBwb3BwZXJDaGlsZHJlbixcbiAgICBwb3BwZXJJbnN0YW5jZTogcG9wcGVySW5zdGFuY2UsXG4gICAgcHJvcHM6IHByb3BzLFxuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAvLyBtZXRob2RzXG4gICAgY2xlYXJEZWxheVRpbWVvdXRzOiBjbGVhckRlbGF5VGltZW91dHMsXG4gICAgc2V0OiBzZXQsXG4gICAgc2V0Q29udGVudDogc2V0Q29udGVudCQkMSxcbiAgICBzaG93OiBzaG93LFxuICAgIGhpZGU6IGhpZGUsXG4gICAgZW5hYmxlOiBlbmFibGUsXG4gICAgZGlzYWJsZTogZGlzYWJsZSxcbiAgICBkZXN0cm95OiBkZXN0cm95XG4gIH07XG4gIGFkZFRyaWdnZXJzVG9SZWZlcmVuY2UoKTtcblxuICBpZiAoIXByb3BzLmxhenkpIHtcbiAgICBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgaWYgKHByb3BzLnNob3dPbkluaXQpIHtcbiAgICBzY2hlZHVsZVNob3coKTtcbiAgfSAvLyBFbnN1cmUgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGNhbiByZWNlaXZlIGZvY3VzIChhbmQgaXMgbm90IGEgZGVsZWdhdGUpXG5cblxuICBpZiAocHJvcHMuYTExeSAmJiAhcHJvcHMudGFyZ2V0ICYmICFjYW5SZWNlaXZlRm9jdXMocmVmZXJlbmNlKSkge1xuICAgIHJlZmVyZW5jZS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcbiAgfSAvLyBJbnN0YWxsIHNob3J0Y3V0c1xuICAvLyBAdHMtaWdub3JlXG5cblxuICByZWZlcmVuY2UuX3RpcHB5ID0gaW5zdGFuY2U7IC8vIEB0cy1pZ25vcmVcblxuICBwb3BwZXIuX3RpcHB5ID0gaW5zdGFuY2U7XG4gIHJldHVybiBpbnN0YW5jZTtcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT0g8J+UkiBQcml2YXRlIG1ldGhvZHMg8J+UkiA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qKlxuICAgKiBQb3NpdGlvbnMgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIG5lYXIgdGhlIGN1cnNvclxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IoZXZlbnQpIHtcbiAgICB2YXIgX2xhc3RNb3VzZU1vdmVFdmVudCA9IGxhc3RNb3VzZU1vdmVFdmVudCA9IGV2ZW50LFxuICAgICAgICBjbGllbnRYID0gX2xhc3RNb3VzZU1vdmVFdmVudC5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gX2xhc3RNb3VzZU1vdmVFdmVudC5jbGllbnRZO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRW5zdXJlIHZpcnR1YWwgcmVmZXJlbmNlIGlzIHBhZGRlZCB0byBwcmV2ZW50IHRvb2x0aXAgZnJvbVxuICAgIC8vIG92ZXJmbG93aW5nLiBNYXliZSBQb3BwZXIuanMgaXNzdWU/XG5cblxuICAgIHZhciBwbGFjZW1lbnQgPSBnZXRQb3BwZXJQbGFjZW1lbnQoaW5zdGFuY2UucG9wcGVyKTtcbiAgICB2YXIgcGFkZGluZyA9IGluc3RhbmNlLnByb3BzLmFycm93ID8gUEFERElORyArIChpbnN0YW5jZS5wcm9wcy5hcnJvd1R5cGUgPT09ICdyb3VuZCcgPyAxOCA6IDE2KSA6IFBBRERJTkc7XG4gICAgdmFyIGlzVmVydGljYWxQbGFjZW1lbnQgPSBpbmNsdWRlcyhbJ3RvcCcsICdib3R0b20nXSwgcGxhY2VtZW50KTtcbiAgICB2YXIgaXNIb3Jpem9udGFsUGxhY2VtZW50ID0gaW5jbHVkZXMoWydsZWZ0JywgJ3JpZ2h0J10sIHBsYWNlbWVudCk7IC8vIFRvcCAvIGxlZnQgYm91bmRhcnlcblxuICAgIHZhciB4ID0gaXNWZXJ0aWNhbFBsYWNlbWVudCA/IE1hdGgubWF4KHBhZGRpbmcsIGNsaWVudFgpIDogY2xpZW50WDtcbiAgICB2YXIgeSA9IGlzSG9yaXpvbnRhbFBsYWNlbWVudCA/IE1hdGgubWF4KHBhZGRpbmcsIGNsaWVudFkpIDogY2xpZW50WTsgLy8gQm90dG9tIC8gcmlnaHQgYm91bmRhcnlcblxuICAgIGlmIChpc1ZlcnRpY2FsUGxhY2VtZW50ICYmIHggPiBwYWRkaW5nKSB7XG4gICAgICB4ID0gTWF0aC5taW4oY2xpZW50WCwgd2luZG93LmlubmVyV2lkdGggLSBwYWRkaW5nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNIb3Jpem9udGFsUGxhY2VtZW50ICYmIHkgPiBwYWRkaW5nKSB7XG4gICAgICB5ID0gTWF0aC5taW4oY2xpZW50WSwgd2luZG93LmlubmVySGVpZ2h0IC0gcGFkZGluZyk7XG4gICAgfVxuXG4gICAgdmFyIHJlY3QgPSBpbnN0YW5jZS5yZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdmFyIGZvbGxvd0N1cnNvciA9IGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvcjtcbiAgICB2YXIgaXNIb3Jpem9udGFsID0gZm9sbG93Q3Vyc29yID09PSAnaG9yaXpvbnRhbCc7XG4gICAgdmFyIGlzVmVydGljYWwgPSBmb2xsb3dDdXJzb3IgPT09ICd2ZXJ0aWNhbCc7XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UucmVmZXJlbmNlID0ge1xuICAgICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0OiBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgIHRvcDogaXNIb3Jpem9udGFsID8gcmVjdC50b3AgOiB5LFxuICAgICAgICAgIGJvdHRvbTogaXNIb3Jpem9udGFsID8gcmVjdC5ib3R0b20gOiB5LFxuICAgICAgICAgIGxlZnQ6IGlzVmVydGljYWwgPyByZWN0LmxlZnQgOiB4LFxuICAgICAgICAgIHJpZ2h0OiBpc1ZlcnRpY2FsID8gcmVjdC5yaWdodCA6IHhcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBjbGllbnRXaWR0aDogMCxcbiAgICAgIGNsaWVudEhlaWdodDogMFxuICAgIH07XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcblxuICAgIGlmIChmb2xsb3dDdXJzb3IgPT09ICdpbml0aWFsJyAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSB0aXBweSBpbnN0YW5jZSBmb3IgYSBkZWxlZ2F0ZSB3aGVuIGl0J3MgYmVlbiB0cmlnZ2VyZWRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBjcmVhdGVEZWxlZ2F0ZUNoaWxkVGlwcHkoZXZlbnQpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIHRhcmdldEVsID0gY2xvc2VzdChldmVudC50YXJnZXQsIGluc3RhbmNlLnByb3BzLnRhcmdldCk7IC8vIEB0cy1pZ25vcmVcblxuICAgIGlmICh0YXJnZXRFbCAmJiAhdGFyZ2V0RWwuX3RpcHB5KSB7XG4gICAgICBjcmVhdGVUaXBweSh0YXJnZXRFbCwgX2V4dGVuZHMoe30sIGluc3RhbmNlLnByb3BzLCB7XG4gICAgICAgIGNvbnRlbnQ6IGV2YWx1YXRlVmFsdWUoY29sbGVjdGlvblByb3BzLmNvbnRlbnQsIFt0YXJnZXRFbF0pLFxuICAgICAgICBhcHBlbmRUbzogY29sbGVjdGlvblByb3BzLmFwcGVuZFRvLFxuICAgICAgICB0YXJnZXQ6ICcnLFxuICAgICAgICBzaG93T25Jbml0OiB0cnVlXG4gICAgICB9KSk7XG4gICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0dXAgYmVmb3JlIHNob3coKSBpcyBpbnZva2VkIChkZWxheXMsIGV0Yy4pXG4gICAqIEBwYXJhbSB7RXZlbnR9IFtldmVudF1cbiAgICovXG5cblxuICBmdW5jdGlvbiBzY2hlZHVsZVNob3coZXZlbnQpIHtcbiAgICBjbGVhckRlbGF5VGltZW91dHMoKTtcblxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElzIGEgZGVsZWdhdGUsIGNyZWF0ZSBhbiBpbnN0YW5jZSBmb3IgdGhlIGNoaWxkIHRhcmdldFxuXG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMudGFyZ2V0KSB7XG4gICAgICByZXR1cm4gY3JlYXRlRGVsZWdhdGVDaGlsZFRpcHB5KGV2ZW50KTtcbiAgICB9XG5cbiAgICBpc1NjaGVkdWxlZFRvU2hvdyA9IHRydWU7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMud2FpdCkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLnByb3BzLndhaXQoaW5zdGFuY2UsIGV2ZW50KTtcbiAgICB9IC8vIElmIHRoZSB0b29sdGlwIGhhcyBhIGRlbGF5LCB3ZSBuZWVkIHRvIGJlIGxpc3RlbmluZyB0byB0aGUgbW91c2Vtb3ZlIGFzXG4gICAgLy8gc29vbiBhcyB0aGUgdHJpZ2dlciBldmVudCBpcyBmaXJlZCwgc28gdGhhdCBpdCdzIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uXG4gICAgLy8gdXBvbiBtb3VudC5cbiAgICAvLyBFZGdlIGNhc2U6IGlmIHRoZSB0b29sdGlwIGlzIHN0aWxsIG1vdW50ZWQsIGJ1dCB0aGVuIHNjaGVkdWxlU2hvdygpIGlzXG4gICAgLy8gY2FsbGVkLCBpdCBjYXVzZXMgYSBqdW1wLlxuXG5cbiAgICBpZiAoaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSAmJiAhaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKTtcbiAgICB9XG5cbiAgICB2YXIgZGVsYXkgPSBnZXRWYWx1ZShpbnN0YW5jZS5wcm9wcy5kZWxheSwgMCwgRGVmYXVsdHMuZGVsYXkpO1xuXG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBzaG93VGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNob3coKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0dXAgYmVmb3JlIGhpZGUoKSBpcyBpbnZva2VkIChkZWxheXMsIGV0Yy4pXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVIaWRlKCkge1xuICAgIGNsZWFyRGVsYXlUaW1lb3V0cygpO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybiByZW1vdmVGb2xsb3dDdXJzb3JMaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIGlzU2NoZWR1bGVkVG9TaG93ID0gZmFsc2U7XG4gICAgdmFyIGRlbGF5ID0gZ2V0VmFsdWUoaW5zdGFuY2UucHJvcHMuZGVsYXksIDEsIERlZmF1bHRzLmRlbGF5KTtcblxuICAgIGlmIChkZWxheSkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaGlkZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGZvbGxvdyBjdXJzb3IgbGlzdGVuZXJcbiAgICovXG5cblxuICBmdW5jdGlvbiByZW1vdmVGb2xsb3dDdXJzb3JMaXN0ZW5lcigpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYW5zIHVwIG9sZCBsaXN0ZW5lcnNcbiAgICovXG5cblxuICBmdW5jdGlvbiBjbGVhbnVwT2xkTW91c2VMaXN0ZW5lcnMoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgc2NoZWR1bGVIaWRlKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkZWJvdW5jZWRPbk1vdXNlTW92ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgdXBvbiB0cmlnZ2VyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25UcmlnZ2VyKGV2ZW50KSB7XG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQgfHwgaXNFdmVudExpc3RlbmVyU3RvcHBlZChldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgbGFzdFRyaWdnZXJFdmVudCA9IGV2ZW50O1xuXG4gICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGxhc3RNb3VzZU1vdmVFdmVudCA9IGV2ZW50O1xuICAgICAgfVxuICAgIH0gLy8gVG9nZ2xlIHNob3cvaGlkZSB3aGVuIGNsaWNraW5nIGNsaWNrLXRyaWdnZXJlZCB0b29sdGlwc1xuXG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJyAmJiBpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayAhPT0gZmFsc2UgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICBzY2hlZHVsZUhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVTaG93KGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIHVzZWQgZm9yIGludGVyYWN0aXZlIHRvb2x0aXBzIHRvIGRldGVjdCB3aGVuIHRoZXkgc2hvdWxkXG4gICAqIGhpZGVcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgdmFyIHJlZmVyZW5jZVRoZUN1cnNvcklzT3ZlciA9IGNsb3Nlc3RDYWxsYmFjayggLy8gQHRzLWlnbm9yZVxuICAgIGV2ZW50LnRhcmdldCwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gZWwuX3RpcHB5O1xuICAgIH0pO1xuICAgIHZhciBpc0N1cnNvck92ZXJQb3BwZXIgPSAvLyBAdHMtaWdub3JlXG4gICAgY2xvc2VzdChldmVudC50YXJnZXQsIFNlbGVjdG9ycy5QT1BQRVIpID09PSBpbnN0YW5jZS5wb3BwZXI7XG4gICAgdmFyIGlzQ3Vyc29yT3ZlclJlZmVyZW5jZSA9IHJlZmVyZW5jZVRoZUN1cnNvcklzT3ZlciA9PT0gaW5zdGFuY2UucmVmZXJlbmNlO1xuXG4gICAgaWYgKGlzQ3Vyc29yT3ZlclBvcHBlciB8fCBpc0N1cnNvck92ZXJSZWZlcmVuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNDdXJzb3JPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIoZ2V0UG9wcGVyUGxhY2VtZW50KGluc3RhbmNlLnBvcHBlciksIGluc3RhbmNlLnBvcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgZXZlbnQsIGluc3RhbmNlLnByb3BzKSkge1xuICAgICAgY2xlYW51cE9sZE1vdXNlTGlzdGVuZXJzKCk7XG4gICAgICBzY2hlZHVsZUhpZGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgdXBvbiBtb3VzZWxlYXZlXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoZXZlbnQpIHtcbiAgICBpZiAoaXNFdmVudExpc3RlbmVyU3RvcHBlZChldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHNjaGVkdWxlSGlkZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkZWJvdW5jZWRPbk1vdXNlTW92ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVIaWRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgdXBvbiBibHVyXG4gICAqIEBwYXJhbSB7Rm9jdXNFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkJsdXIoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBpbnN0YW5jZS5yZWZlcmVuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgZXZlbnQucmVsYXRlZFRhcmdldCAmJiAvLyBAdHMtaWdub3JlXG4gICAgaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVIaWRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgd2hlbiBhIGNoaWxkIHRhcmdldCBpcyB0cmlnZ2VyZWRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkRlbGVnYXRlU2hvdyhldmVudCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoY2xvc2VzdChldmVudC50YXJnZXQsIGluc3RhbmNlLnByb3BzLnRhcmdldCkpIHtcbiAgICAgIHNjaGVkdWxlU2hvdyhldmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lciBpbnZva2VkIHdoZW4gYSBjaGlsZCB0YXJnZXQgc2hvdWxkIGhpZGVcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkRlbGVnYXRlSGlkZShldmVudCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoY2xvc2VzdChldmVudC50YXJnZXQsIGluc3RhbmNlLnByb3BzLnRhcmdldCkpIHtcbiAgICAgIHNjaGVkdWxlSGlkZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBhbiBldmVudCBsaXN0ZW5lciBzaG91bGQgc3RvcCBmdXJ0aGVyIGV4ZWN1dGlvbiBkdWUgdG8gdGhlXG4gICAqIGB0b3VjaEhvbGRgIG9wdGlvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGlzRXZlbnRMaXN0ZW5lclN0b3BwZWQoZXZlbnQpIHtcbiAgICB2YXIgc3VwcG9ydHNUb3VjaCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdztcbiAgICB2YXIgaXNUb3VjaEV2ZW50ID0gaW5jbHVkZXMoZXZlbnQudHlwZSwgJ3RvdWNoJyk7XG4gICAgdmFyIHRvdWNoSG9sZCA9IGluc3RhbmNlLnByb3BzLnRvdWNoSG9sZDtcbiAgICByZXR1cm4gc3VwcG9ydHNUb3VjaCAmJiBpc1VzaW5nVG91Y2ggJiYgdG91Y2hIb2xkICYmICFpc1RvdWNoRXZlbnQgfHwgaXNVc2luZ1RvdWNoICYmICF0b3VjaEhvbGQgJiYgaXNUb3VjaEV2ZW50O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBwb3BwZXIgaW5zdGFuY2UgZm9yIHRoZSBpbnN0YW5jZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlckluc3RhbmNlKCkge1xuICAgIHZhciBwb3BwZXJPcHRpb25zID0gaW5zdGFuY2UucHJvcHMucG9wcGVyT3B0aW9ucztcbiAgICB2YXIgX2luc3RhbmNlJHBvcHBlckNoaWxkID0gaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4sXG4gICAgICAgIHRvb2x0aXAgPSBfaW5zdGFuY2UkcG9wcGVyQ2hpbGQudG9vbHRpcCxcbiAgICAgICAgYXJyb3cgPSBfaW5zdGFuY2UkcG9wcGVyQ2hpbGQuYXJyb3c7XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UgPSBuZXcgUG9wcGVyKGluc3RhbmNlLnJlZmVyZW5jZSwgaW5zdGFuY2UucG9wcGVyLCBfZXh0ZW5kcyh7XG4gICAgICBwbGFjZW1lbnQ6IGluc3RhbmNlLnByb3BzLnBsYWNlbWVudFxuICAgIH0sIHBvcHBlck9wdGlvbnMsIHtcbiAgICAgIG1vZGlmaWVyczogX2V4dGVuZHMoe30sIHBvcHBlck9wdGlvbnMgPyBwb3BwZXJPcHRpb25zLm1vZGlmaWVycyA6IHt9LCB7XG4gICAgICAgIHByZXZlbnRPdmVyZmxvdzogX2V4dGVuZHMoe1xuICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiBpbnN0YW5jZS5wcm9wcy5ib3VuZGFyeSxcbiAgICAgICAgICBwYWRkaW5nOiBQQURESU5HXG4gICAgICAgIH0sIGdldE1vZGlmaWVyKHBvcHBlck9wdGlvbnMsICdwcmV2ZW50T3ZlcmZsb3cnKSksXG4gICAgICAgIGFycm93OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgZWxlbWVudDogYXJyb3csXG4gICAgICAgICAgZW5hYmxlZDogISFhcnJvd1xuICAgICAgICB9LCBnZXRNb2RpZmllcihwb3BwZXJPcHRpb25zLCAnYXJyb3cnKSksXG4gICAgICAgIGZsaXA6IF9leHRlbmRzKHtcbiAgICAgICAgICBlbmFibGVkOiBpbnN0YW5jZS5wcm9wcy5mbGlwLFxuICAgICAgICAgIC8vIFRoZSB0b29sdGlwIGlzIG9mZnNldCBieSAxMHB4IGZyb20gdGhlIHBvcHBlciBpbiBDU1MsXG4gICAgICAgICAgLy8gd2UgbmVlZCB0byBhY2NvdW50IGZvciBpdHMgZGlzdGFuY2VcbiAgICAgICAgICBwYWRkaW5nOiBpbnN0YW5jZS5wcm9wcy5kaXN0YW5jZSArIFBBRERJTkcsXG4gICAgICAgICAgYmVoYXZpb3I6IGluc3RhbmNlLnByb3BzLmZsaXBCZWhhdmlvclxuICAgICAgICB9LCBnZXRNb2RpZmllcihwb3BwZXJPcHRpb25zLCAnZmxpcCcpKSxcbiAgICAgICAgb2Zmc2V0OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgb2Zmc2V0OiBpbnN0YW5jZS5wcm9wcy5vZmZzZXRcbiAgICAgICAgfSwgZ2V0TW9kaWZpZXIocG9wcGVyT3B0aW9ucywgJ29mZnNldCcpKVxuICAgICAgfSksXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSkge1xuICAgICAgICBpZiAoaW5zdGFuY2UucHJvcHMuZmxpcCAmJiAhaW5zdGFuY2UucHJvcHMuZmxpcE9uVXBkYXRlKSB7XG4gICAgICAgICAgaWYgKGRhdGEuZmxpcHBlZCkge1xuICAgICAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5wbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKGluc3RhbmNlLnBvcHBlckluc3RhbmNlLm1vZGlmaWVycywgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRQb3BwZXJQbGFjZW1lbnQoaW5zdGFuY2UucG9wcGVyKTtcbiAgICAgICAgdmFyIHN0eWxlcyA9IHRvb2x0aXAuc3R5bGU7IC8vIEFjY291bnQgZm9yIHRoZSBgZGlzdGFuY2VgIG9mZnNldFxuXG4gICAgICAgIHN0eWxlcy50b3AgPSAnJztcbiAgICAgICAgc3R5bGVzLmJvdHRvbSA9ICcnO1xuICAgICAgICBzdHlsZXMubGVmdCA9ICcnO1xuICAgICAgICBzdHlsZXMucmlnaHQgPSAnJztcbiAgICAgICAgc3R5bGVzW2Jhc2VQbGFjZW1lbnRdID0gZ2V0T2Zmc2V0RGlzdGFuY2VJblB4KGluc3RhbmNlLnByb3BzLmRpc3RhbmNlKTsgLy8gQXZvaWQgX2RlZmluZVByb3BlcnR5IGhlbHBlciBmdW5jdGlvbiBjcmVhdGVkIGJ5IEJhYmVsXG5cbiAgICAgICAgdmFyIHBhZGRpbmcgPSB7XG4gICAgICAgICAgdG9wOiBQQURESU5HLFxuICAgICAgICAgIGJvdHRvbTogUEFERElORyxcbiAgICAgICAgICBsZWZ0OiBQQURESU5HLFxuICAgICAgICAgIHJpZ2h0OiBQQURESU5HXG4gICAgICAgIH07XG4gICAgICAgIHBhZGRpbmdbYmFzZVBsYWNlbWVudF0gPSBQQURESU5HICsgaW5zdGFuY2UucHJvcHMuZGlzdGFuY2U7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLm1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgICAgICAgfSlbMF0ucGFkZGluZyA9IHBhZGRpbmc7XG5cbiAgICAgICAgaWYgKHBvcHBlck9wdGlvbnMgJiYgcG9wcGVyT3B0aW9ucy5vblVwZGF0ZSkge1xuICAgICAgICAgIHBvcHBlck9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIE1vdW50cyB0aGUgdG9vbHRpcCB0byB0aGUgRE9NLCBjYWxsYmFjayB0byBzaG93IHRvb2x0aXAgaXMgcnVuICoqYWZ0ZXIqKlxuICAgKiBwb3BwZXIncyBwb3NpdGlvbiBoYXMgdXBkYXRlZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG1vdW50KGNhbGxiYWNrKSB7XG4gICAgdmFyIHNob3VsZEVuYWJsZUxpc3RlbmVycyA9ICFoYXNGb2xsb3dDdXJzb3JCZWhhdmlvcigpICYmICEoaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yID09PSAnaW5pdGlhbCcgJiYgaXNVc2luZ1RvdWNoKTtcblxuICAgIGlmICghaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIGNyZWF0ZVBvcHBlckluc3RhbmNlKCk7XG5cbiAgICAgIGlmICghc2hvdWxkRW5hYmxlTGlzdGVuZXJzKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkpIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcblxuICAgICAgICBpZiAoc2hvdWxkRW5hYmxlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKGluc3RhbmNlLnBvcHBlckluc3RhbmNlLm1vZGlmaWVycywgaW5zdGFuY2UucHJvcHMuZmxpcCk7XG4gICAgfSAvLyBJZiB0aGUgaW5zdGFuY2UgcHJldmlvdXNseSBoYWQgZm9sbG93Q3Vyc29yIGJlaGF2aW9yLCBpdCB3aWxsIGJlXG4gICAgLy8gcG9zaXRpb25lZCBpbmNvcnJlY3RseSBpZiB0cmlnZ2VyZWQgYnkgYGZvY3VzYCBhZnRlcndhcmRzLlxuICAgIC8vIFVwZGF0ZSB0aGUgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIHJlYWwgRE9NIGVsZW1lbnRcblxuXG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UucmVmZXJlbmNlID0gaW5zdGFuY2UucmVmZXJlbmNlO1xuICAgIHZhciBhcnJvdyA9IGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmFycm93O1xuXG4gICAgaWYgKGhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkpIHtcbiAgICAgIGlmIChhcnJvdykge1xuICAgICAgICBhcnJvdy5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWxheSA9IGdldFZhbHVlKGluc3RhbmNlLnByb3BzLmRlbGF5LCAwLCBEZWZhdWx0cy5kZWxheSk7XG5cbiAgICAgIGlmIChsYXN0VHJpZ2dlckV2ZW50LnR5cGUpIHtcbiAgICAgICAgcG9zaXRpb25WaXJ0dWFsUmVmZXJlbmNlTmVhckN1cnNvcihkZWxheSAmJiBsYXN0TW91c2VNb3ZlRXZlbnQgPyBsYXN0TW91c2VNb3ZlRXZlbnQgOiBsYXN0VHJpZ2dlckV2ZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFycm93KSB7XG4gICAgICBhcnJvdy5zdHlsZS5tYXJnaW4gPSAnJztcbiAgICB9IC8vIEFsbG93IGZvbGxvd0N1cnNvcjogJ2luaXRpYWwnIG9uIHRvdWNoIGRldmljZXNcblxuXG4gICAgaWYgKGlzVXNpbmdUb3VjaCAmJiBsYXN0TW91c2VNb3ZlRXZlbnQgJiYgaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yID09PSAnaW5pdGlhbCcpIHtcbiAgICAgIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IobGFzdE1vdXNlTW92ZUV2ZW50KTtcblxuICAgICAgaWYgKGFycm93KSB7XG4gICAgICAgIGFycm93LnN0eWxlLm1hcmdpbiA9ICcwJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhZnRlclBvcHBlclBvc2l0aW9uVXBkYXRlcyhpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSwgY2FsbGJhY2spO1xuICAgIHZhciBhcHBlbmRUbyA9IGluc3RhbmNlLnByb3BzLmFwcGVuZFRvO1xuICAgIHBhcmVudE5vZGUgPSBhcHBlbmRUbyA9PT0gJ3BhcmVudCcgPyBpbnN0YW5jZS5yZWZlcmVuY2UucGFyZW50Tm9kZSA6IGV2YWx1YXRlVmFsdWUoYXBwZW5kVG8sIFtpbnN0YW5jZS5yZWZlcmVuY2VdKTtcblxuICAgIGlmICghcGFyZW50Tm9kZS5jb250YWlucyhpbnN0YW5jZS5wb3BwZXIpKSB7XG4gICAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKGluc3RhbmNlLnBvcHBlcik7XG4gICAgICBpbnN0YW5jZS5wcm9wcy5vbk1vdW50KGluc3RhbmNlKTtcbiAgICAgIGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBpbnN0YW5jZSBpcyBpbiBgZm9sbG93Q3Vyc29yYCBtb2RlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciAmJiAhaXNVc2luZ1RvdWNoICYmIGxhc3RUcmlnZ2VyRXZlbnQudHlwZSAhPT0gJ2ZvY3VzJztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdG9vbHRpcCdzIHBvc2l0aW9uIG9uIGVhY2ggYW5pbWF0aW9uIGZyYW1lXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gbWFrZVN0aWNreSgpIHtcbiAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihbaW5zdGFuY2UucG9wcGVyXSwgaXNJRSA/IDAgOiBpbnN0YW5jZS5wcm9wcy51cGRhdGVEdXJhdGlvbik7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpIHtcbiAgICAgIGlmIChpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGVQb3NpdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihbaW5zdGFuY2UucG9wcGVyXSwgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlUG9zaXRpb24oKTtcbiAgfVxuICAvKipcbiAgICogSW52b2tlcyBhIGNhbGxiYWNrIG9uY2UgdGhlIHRvb2x0aXAgaGFzIGZ1bGx5IHRyYW5zaXRpb25lZCBvdXRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uZWRPdXQoZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJiBwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuY29udGFpbnMoaW5zdGFuY2UucG9wcGVyKSkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnZva2VzIGEgY2FsbGJhY2sgb25jZSB0aGUgdG9vbHRpcCBoYXMgZnVsbHkgdHJhbnNpdGlvbmVkIGluXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbmVkSW4oZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBjYWxsYmFjayk7XG4gIH1cbiAgLyoqXG4gICAqIEludm9rZXMgYSBjYWxsYmFjayBvbmNlIHRoZSB0b29sdGlwJ3MgQ1NTIHRyYW5zaXRpb24gZW5kc1xuICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG5cblxuICBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLyoqXG4gICAgICogTGlzdGVuZXIgYWRkZWQgYXMgdGhlIGB0cmFuc2l0aW9uZW5kYCBoYW5kbGVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRvb2x0aXApIHtcbiAgICAgICAgdG9nZ2xlVHJhbnNpdGlvbkVuZExpc3RlbmVyKHRvb2x0aXAsICdyZW1vdmUnLCBsaXN0ZW5lcik7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSAvLyBNYWtlIGNhbGxiYWNrIHN5bmNocm9ub3VzIGlmIGR1cmF0aW9uIGlzIDBcbiAgICAvLyBgdHJhbnNpdGlvbmVuZGAgd29uJ3QgZmlyZSBvdGhlcndpc2VcblxuXG4gICAgaWYgKGR1cmF0aW9uID09PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICB2YXIgdG9vbHRpcCA9IGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXA7XG4gICAgdG9nZ2xlVHJhbnNpdGlvbkVuZExpc3RlbmVyKHRvb2x0aXAsICdyZW1vdmUnLCB0cmFuc2l0aW9uRW5kTGlzdGVuZXIpO1xuICAgIHRvZ2dsZVRyYW5zaXRpb25FbmRMaXN0ZW5lcih0b29sdGlwLCAnYWRkJywgbGlzdGVuZXIpO1xuICAgIHRyYW5zaXRpb25FbmRMaXN0ZW5lciA9IGxpc3RlbmVyO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSByZWZlcmVuY2UgYW5kIHN0b3JlcyBpdCBpbiBgbGlzdGVuZXJzYFxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRUeXBlXG4gICAqIEBwYXJhbSB7RXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdH0gaGFuZGxlclxuICAgKiBAcGFyYW0ge09iamVjdHxCb29sZWFufSBvcHRpb25zXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb24oZXZlbnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgIGluc3RhbmNlLnJlZmVyZW5jZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgbGlzdGVuZXJzLnB1c2goe1xuICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgcmVmZXJlbmNlIGJhc2VkIG9uIHRoZSBgdHJpZ2dlcmAgcHJvcFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGFkZFRyaWdnZXJzVG9SZWZlcmVuY2UoKSB7XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnRvdWNoSG9sZCAmJiAhaW5zdGFuY2UucHJvcHMudGFyZ2V0KSB7XG4gICAgICBvbigndG91Y2hzdGFydCcsIG9uVHJpZ2dlciwgUEFTU0lWRSk7XG4gICAgICBvbigndG91Y2hlbmQnLCBvbk1vdXNlTGVhdmUsIFBBU1NJVkUpO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnByb3BzLnRyaWdnZXIudHJpbSgpLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XG4gICAgICBpZiAoZXZlbnRUeXBlID09PSAnbWFudWFsJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIE5vbi1kZWxlZ2F0ZXNcblxuXG4gICAgICBpZiAoIWluc3RhbmNlLnByb3BzLnRhcmdldCkge1xuICAgICAgICBvbihldmVudFR5cGUsIG9uVHJpZ2dlcik7XG5cbiAgICAgICAgc3dpdGNoIChldmVudFR5cGUpIHtcbiAgICAgICAgICBjYXNlICdtb3VzZWVudGVyJzpcbiAgICAgICAgICAgIG9uKCdtb3VzZWxlYXZlJywgb25Nb3VzZUxlYXZlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnZm9jdXMnOlxuICAgICAgICAgICAgb24oaXNJRSA/ICdmb2N1c291dCcgOiAnYmx1cicsIG9uQmx1cik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRGVsZWdhdGVzXG4gICAgICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XG4gICAgICAgICAgY2FzZSAnbW91c2VlbnRlcic6XG4gICAgICAgICAgICBvbignbW91c2VvdmVyJywgb25EZWxlZ2F0ZVNob3cpO1xuICAgICAgICAgICAgb24oJ21vdXNlb3V0Jywgb25EZWxlZ2F0ZUhpZGUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdmb2N1cyc6XG4gICAgICAgICAgICBvbignZm9jdXNpbicsIG9uRGVsZWdhdGVTaG93KTtcbiAgICAgICAgICAgIG9uKCdmb2N1c291dCcsIG9uRGVsZWdhdGVIaWRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgICAgb24oZXZlbnRUeXBlLCBvbkRlbGVnYXRlU2hvdyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSByZWZlcmVuY2VcbiAgICovXG5cblxuICBmdW5jdGlvbiByZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UoKSB7XG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBldmVudFR5cGUgPSBfcmVmLmV2ZW50VHlwZSxcbiAgICAgICAgICBoYW5kbGVyID0gX3JlZi5oYW5kbGVyLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gICAgICBpbnN0YW5jZS5yZWZlcmVuY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xuICAgIGxpc3RlbmVycyA9IFtdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGlubmVyIGVsZW1lbnRzIHVzZWQgaW4gc2hvdy9oaWRlIG1ldGhvZHNcbiAgICogQHJldHVybiB7SFRNTERpdkVsZW1lbnRbXX1cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRJbm5lckVsZW1lbnRzKCkge1xuICAgIHJldHVybiBbaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4udG9vbHRpcCwgaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uYmFja2Ryb3AsIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmNvbnRlbnRdO1xuICB9XG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09IPCflJEgUHVibGljIG1ldGhvZHMg8J+UkSA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRoZSBpbnN0YW5jZSB0byBhbGxvdyBpdCB0byBzaG93IG9yIGhpZGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGluc3RhbmNlIHRvIGRpc2FsbG93IGl0IHRvIHNob3cgb3IgaGlkZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBwZW5kaW5nIHRpbWVvdXRzIHJlbGF0ZWQgdG8gdGhlIGBkZWxheWAgcHJvcCBpZiBhbnlcbiAgICovXG5cblxuICBmdW5jdGlvbiBjbGVhckRlbGF5VGltZW91dHMoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHNob3dUaW1lb3V0SWQpO1xuICAgIGNsZWFyVGltZW91dChoaWRlVGltZW91dElkKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBuZXcgcHJvcHMgZm9yIHRoZSBpbnN0YW5jZSBhbmQgcmVkcmF3cyB0aGUgdG9vbHRpcFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHNldCgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMsIERlZmF1bHRzKTtcbiAgICB2YXIgcHJldlByb3BzID0gaW5zdGFuY2UucHJvcHM7XG4gICAgdmFyIG5leHRQcm9wcyA9IGV2YWx1YXRlUHJvcHMoaW5zdGFuY2UucmVmZXJlbmNlLCBfZXh0ZW5kcyh7fSwgaW5zdGFuY2UucHJvcHMsIG9wdGlvbnMsIHtcbiAgICAgIGlnbm9yZUF0dHJpYnV0ZXM6IHRydWVcbiAgICB9KSk7XG4gICAgbmV4dFByb3BzLmlnbm9yZUF0dHJpYnV0ZXMgPSBoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCAnaWdub3JlQXR0cmlidXRlcycpID8gb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzIDogcHJldlByb3BzLmlnbm9yZUF0dHJpYnV0ZXM7XG4gICAgaW5zdGFuY2UucHJvcHMgPSBuZXh0UHJvcHM7XG5cbiAgICBpZiAoaGFzT3duUHJvcGVydHkob3B0aW9ucywgJ3RyaWdnZXInKSB8fCBoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCAndG91Y2hIb2xkJykpIHtcbiAgICAgIHJlbW92ZVRyaWdnZXJzRnJvbVJlZmVyZW5jZSgpO1xuICAgICAgYWRkVHJpZ2dlcnNUb1JlZmVyZW5jZSgpO1xuICAgIH1cblxuICAgIGlmIChoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCAnaW50ZXJhY3RpdmVEZWJvdW5jZScpKSB7XG4gICAgICBjbGVhbnVwT2xkTW91c2VMaXN0ZW5lcnMoKTtcbiAgICAgIGRlYm91bmNlZE9uTW91c2VNb3ZlID0gZGVib3VuY2Uob25Nb3VzZU1vdmUsIG9wdGlvbnMuaW50ZXJhY3RpdmVEZWJvdW5jZSk7XG4gICAgfVxuXG4gICAgdXBkYXRlUG9wcGVyRWxlbWVudChpbnN0YW5jZS5wb3BwZXIsIHByZXZQcm9wcywgbmV4dFByb3BzKTtcbiAgICBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbiA9IGdldENoaWxkcmVuKGluc3RhbmNlLnBvcHBlcik7XG5cbiAgICBpZiAoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuXG4gICAgICBpZiAoUE9QUEVSX0lOU1RBTkNFX0RFUEVOREVOQ0lFUy5zb21lKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCBwcm9wKTtcbiAgICAgIH0pKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgY3JlYXRlUG9wcGVySW5zdGFuY2UoKTtcblxuICAgICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciAmJiBsYXN0TW91c2VNb3ZlRXZlbnQpIHtcbiAgICAgICAgICBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKGxhc3RNb3VzZU1vdmVFdmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNob3J0Y3V0IGZvciAuc2V0KHsgY29udGVudDogbmV3Q29udGVudCB9KVxuICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtZW50fEZ1bmN0aW9ufSBjb250ZW50XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2V0Q29udGVudCQkMShjb250ZW50KSB7XG4gICAgc2V0KHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2hvd3MgdGhlIHRvb2x0aXBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2hvdygpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGdldFZhbHVlKGluc3RhbmNlLnByb3BzLmR1cmF0aW9uLCAwLCBEZWZhdWx0cy5kdXJhdGlvblswXSk7XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgfHwgIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCB8fCBpc1VzaW5nVG91Y2ggJiYgIWluc3RhbmNlLnByb3BzLnRvdWNoKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBEZXN0cm95IHRvb2x0aXAgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG5vIGxvbmdlciBvbiB0aGUgRE9NXG5cblxuICAgIGlmICggLy8gQHRzLWlnbm9yZVxuICAgICFoYXNPd25Qcm9wZXJ0eShpbnN0YW5jZS5yZWZlcmVuY2UsICdpc1ZpcnR1YWwnKSAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGluc3RhbmNlLnJlZmVyZW5jZSkpIHtcbiAgICAgIHJldHVybiBkZXN0cm95KCk7XG4gICAgfSAvLyBEbyBub3Qgc2hvdyB0b29sdGlwIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBoYXMgYSBgZGlzYWJsZWRgIGF0dHJpYnV0ZVxuXG5cbiAgICBpZiAoaW5zdGFuY2UucmVmZXJlbmNlLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5vblNob3coaW5zdGFuY2UpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnBvcHBlci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA9IHRydWU7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGluc3RhbmNlLnJlZmVyZW5jZS5jbGFzc0xpc3QuYWRkKCd0aXBweS1hY3RpdmUnKTtcbiAgICB9IC8vIFByZXZlbnQgYSB0cmFuc2l0aW9uIGlmIHRoZSBwb3BwZXIgaXMgYXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudFxuXG5cbiAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihbaW5zdGFuY2UucG9wcGVyLCBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi50b29sdGlwLCBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi5iYWNrZHJvcF0sIDApO1xuICAgIG1vdW50KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gQXJyb3cgd2lsbCBzb21ldGltZXMgbm90IGJlIHBvc2l0aW9uZWQgY29ycmVjdGx5LiBGb3JjZSBhbm90aGVyIHVwZGF0ZVxuXG5cbiAgICAgIGlmICghaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSkge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24oW2luc3RhbmNlLnBvcHBlcl0sIHByb3BzLnVwZGF0ZUR1cmF0aW9uKTtcbiAgICAgIGFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uKGdldElubmVyRWxlbWVudHMoKSwgZHVyYXRpb24pO1xuXG4gICAgICBpZiAoaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uYmFja2Ryb3ApIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uY29udGVudC5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSBNYXRoLnJvdW5kKGR1cmF0aW9uIC8gMTIpICsgJ21zJztcbiAgICAgIH1cblxuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLnN0aWNreSkge1xuICAgICAgICBtYWtlU3RpY2t5KCk7XG4gICAgICB9XG5cbiAgICAgIHNldFZpc2liaWxpdHlTdGF0ZShnZXRJbm5lckVsZW1lbnRzKCksICd2aXNpYmxlJyk7XG4gICAgICBvblRyYW5zaXRpb25lZEluKGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXAuY2xhc3NMaXN0LmFkZCgndGlwcHktbm90cmFuc2l0aW9uJyk7XG5cbiAgICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmFyaWEpIHtcbiAgICAgICAgICBpbnN0YW5jZS5yZWZlcmVuY2Uuc2V0QXR0cmlidXRlKFwiYXJpYS1cIi5jb25jYXQoaW5zdGFuY2UucHJvcHMuYXJpYSksIGluc3RhbmNlLnBvcHBlci5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnN0YW5jZS5wcm9wcy5vblNob3duKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhdGUuaXNTaG93biA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSGlkZXMgdGhlIHRvb2x0aXBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaGlkZSgpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGdldFZhbHVlKGluc3RhbmNlLnByb3BzLmR1cmF0aW9uLCAxLCBEZWZhdWx0cy5kdXJhdGlvblsxXSk7XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgfHwgIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5vbkhpZGUoaW5zdGFuY2UpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXAuY2xhc3NMaXN0LnJlbW92ZSgndGlwcHktbm90cmFuc2l0aW9uJyk7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGluc3RhbmNlLnJlZmVyZW5jZS5jbGFzc0xpc3QucmVtb3ZlKCd0aXBweS1hY3RpdmUnKTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5wb3BwZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzU2hvd24gPSBmYWxzZTtcbiAgICBhcHBseVRyYW5zaXRpb25EdXJhdGlvbihnZXRJbm5lckVsZW1lbnRzKCksIGR1cmF0aW9uKTtcbiAgICBzZXRWaXNpYmlsaXR5U3RhdGUoZ2V0SW5uZXJFbGVtZW50cygpLCAnaGlkZGVuJyk7XG4gICAgb25UcmFuc2l0aW9uZWRPdXQoZHVyYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaXNTY2hlZHVsZWRUb1Nob3cpIHtcbiAgICAgICAgcmVtb3ZlRm9sbG93Q3Vyc29yTGlzdGVuZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmFyaWEpIHtcbiAgICAgICAgaW5zdGFuY2UucmVmZXJlbmNlLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtXCIuY29uY2F0KGluc3RhbmNlLnByb3BzLmFyaWEpKTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5vcHRpb25zLnBsYWNlbWVudCA9IGluc3RhbmNlLnByb3BzLnBsYWNlbWVudDtcbiAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaW5zdGFuY2UucG9wcGVyKTtcbiAgICAgIGluc3RhbmNlLnByb3BzLm9uSGlkZGVuKGluc3RhbmNlKTtcbiAgICAgIGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgdG9vbHRpcFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtkZXN0cm95VGFyZ2V0SW5zdGFuY2VzXVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koZGVzdHJveVRhcmdldEluc3RhbmNlcykge1xuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgdGhlIHBvcHBlciBpcyBjdXJyZW50bHkgbW91bnRlZCB0byB0aGUgRE9NLCB3ZSB3YW50IHRvIGVuc3VyZSBpdCBnZXRzXG4gICAgLy8gaGlkZGVuIGFuZCB1bm1vdW50ZWQgaW5zdGFudGx5IHVwb24gZGVzdHJ1Y3Rpb25cblxuXG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgaGlkZSgwKTtcbiAgICB9XG5cbiAgICByZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UoKTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgZGVsZXRlIGluc3RhbmNlLnJlZmVyZW5jZS5fdGlwcHk7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMudGFyZ2V0ICYmIGRlc3Ryb3lUYXJnZXRJbnN0YW5jZXMpIHtcbiAgICAgIGFycmF5RnJvbShpbnN0YW5jZS5yZWZlcmVuY2UucXVlcnlTZWxlY3RvckFsbChpbnN0YW5jZS5wcm9wcy50YXJnZXQpKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQuX3RpcHB5KSB7XG4gICAgICAgICAgY2hpbGQuX3RpcHB5LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogR3JvdXBzIGFuIGFycmF5IG9mIGluc3RhbmNlcyBieSB0YWtpbmcgY29udHJvbCBvZiB0aGVpciBwcm9wcyBkdXJpbmdcbiAqIGNlcnRhaW4gbGlmZWN5Y2xlcy5cbiAqIEBwYXJhbSB7T2JqZWN0W119IGluc3RhbmNlc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZ3JvdXAoaW5zdGFuY2VzKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkZGVsYXkgPSBfcmVmLmRlbGF5LFxuICAgICAgZGVsYXkgPSBfcmVmJGRlbGF5ID09PSB2b2lkIDAgPyBpbnN0YW5jZXNbMF0ucHJvcHMuZGVsYXkgOiBfcmVmJGRlbGF5LFxuICAgICAgX3JlZiRkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb24sXG4gICAgICBkdXJhdGlvbiA9IF9yZWYkZHVyYXRpb24gPT09IHZvaWQgMCA/IDAgOiBfcmVmJGR1cmF0aW9uO1xuXG4gIHZhciBpc0FueVRpcHB5T3BlbiA9IGZhbHNlO1xuICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpbnN0YW5jZS5fb3JpZ2luYWxQcm9wcyA9IHtcbiAgICAgIGR1cmF0aW9uOiBpbnN0YW5jZS5wcm9wcy5kdXJhdGlvbixcbiAgICAgIG9uSGlkZTogaW5zdGFuY2UucHJvcHMub25IaWRlLFxuICAgICAgb25TaG93OiBpbnN0YW5jZS5wcm9wcy5vblNob3csXG4gICAgICBvblNob3duOiBpbnN0YW5jZS5wcm9wcy5vblNob3duXG4gICAgfTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2V0SXNBbnlUaXBweU9wZW4odmFsdWUpIHtcbiAgICBpc0FueVRpcHB5T3BlbiA9IHZhbHVlO1xuICAgIHVwZGF0ZUluc3RhbmNlcygpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25TaG93KGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMub25TaG93KGluc3RhbmNlKTtcblxuICAgIGluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2Uuc2V0KHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uXG4gICAgICB9KTtcbiAgICAgIGluc3RhbmNlLmhpZGUoKTtcbiAgICB9KTtcbiAgICBzZXRJc0FueVRpcHB5T3Blbih0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uSGlkZShpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLm9uSGlkZShpbnN0YW5jZSk7XG5cbiAgICBzZXRJc0FueVRpcHB5T3BlbihmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblNob3duKGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMub25TaG93bihpbnN0YW5jZSk7XG5cbiAgICBpbnN0YW5jZS5zZXQoe1xuICAgICAgZHVyYXRpb246IGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLmR1cmF0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVJbnN0YW5jZXMoKSB7XG4gICAgaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5zZXQoe1xuICAgICAgICBvblNob3c6IG9uU2hvdyxcbiAgICAgICAgb25TaG93bjogb25TaG93bixcbiAgICAgICAgb25IaWRlOiBvbkhpZGUsXG4gICAgICAgIGRlbGF5OiBpc0FueVRpcHB5T3BlbiA/IFswLCBBcnJheS5pc0FycmF5KGRlbGF5KSA/IGRlbGF5WzFdIDogZGVsYXldIDogZGVsYXksXG4gICAgICAgIGR1cmF0aW9uOiBpc0FueVRpcHB5T3BlbiA/IGR1cmF0aW9uIDogaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMuZHVyYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlSW5zdGFuY2VzKCk7XG59XG5cbnZhciBnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kID0gZmFsc2U7XG4vKipcbiAqIEV4cG9ydGVkIG1vZHVsZVxuICogQHBhcmFtIHtTdHJpbmd8RWxlbWVudHxFbGVtZW50W118Tm9kZUxpc3R8T2JqZWN0fSB0YXJnZXRzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIHRpcHB5KHRhcmdldHMsIG9wdGlvbnMpIHtcbiAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMsIERlZmF1bHRzKTtcblxuICBpZiAoIWdsb2JhbEV2ZW50TGlzdGVuZXJzQm91bmQpIHtcbiAgICBiaW5kR2xvYmFsRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICBnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0cywgb3B0aW9ucyk7IC8vIElmIHRoZXkgYXJlIHNwZWNpZnlpbmcgYSB2aXJ0dWFsIHBvc2l0aW9uaW5nIHJlZmVyZW5jZSwgd2UgbmVlZCB0byBwb2x5ZmlsbFxuICAvLyBzb21lIG5hdGl2ZSBET00gcHJvcHNcblxuXG4gIGlmIChpc0JhcmVWaXJ0dWFsRWxlbWVudCh0YXJnZXRzKSkge1xuICAgIHBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXModGFyZ2V0cyk7XG4gIH1cblxuICB2YXIgaW5zdGFuY2VzID0gZ2V0QXJyYXlPZkVsZW1lbnRzKHRhcmdldHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCByZWZlcmVuY2UpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSByZWZlcmVuY2UgJiYgY3JlYXRlVGlwcHkocmVmZXJlbmNlLCBwcm9wcyk7XG5cbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIGFjYy5wdXNoKGluc3RhbmNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSk7XG4gIHJldHVybiBpc1Npbmd1bGFyKHRhcmdldHMpID8gaW5zdGFuY2VzWzBdIDogaW5zdGFuY2VzO1xufVxuLyoqXG4gKiBTdGF0aWMgcHJvcHNcbiAqL1xuXG5cbnRpcHB5LnZlcnNpb24gPSB2ZXJzaW9uO1xudGlwcHkuZGVmYXVsdHMgPSBEZWZhdWx0cztcbi8qKlxuICogU3RhdGljIG1ldGhvZHNcbiAqL1xuXG50aXBweS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIChwYXJ0aWFsRGVmYXVsdHMpIHtcbiAgT2JqZWN0LmtleXMocGFydGlhbERlZmF1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBEZWZhdWx0c1trZXldID0gcGFydGlhbERlZmF1bHRzW2tleV07XG4gIH0pO1xufTtcblxudGlwcHkuaGlkZUFsbCA9IGhpZGVBbGw7XG50aXBweS5ncm91cCA9IGdyb3VwO1xuLyoqXG4gKiBBdXRvLWluaXQgdG9vbHRpcHMgZm9yIGVsZW1lbnRzIHdpdGggYSBgZGF0YS10aXBweT1cIi4uLlwiYCBhdHRyaWJ1dGVcbiAqL1xuXG5mdW5jdGlvbiBhdXRvSW5pdCgpIHtcbiAgYXJyYXlGcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRpcHB5XScpKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBjb250ZW50ID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXRpcHB5Jyk7XG5cbiAgICBpZiAoY29udGVudCkge1xuICAgICAgdGlwcHkoZWwsIHtcbiAgICAgICAgY29udGVudDogY29udGVudFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuaWYgKGlzQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGF1dG9Jbml0KTtcbn1cblxuLyoqXG4gKiBJbmplY3RzIGEgc3RyaW5nIG9mIENTUyBzdHlsZXMgdG8gYSBzdHlsZSBub2RlIGluIDxoZWFkPlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1xuICovXG5cbmZ1bmN0aW9uIGluamVjdENTUyhjc3MpIHtcbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgc3R5bGUudGV4dENvbnRlbnQgPSBjc3M7XG4gICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuICAgIHZhciBmaXJzdENoaWxkID0gaGVhZC5maXJzdENoaWxkO1xuXG4gICAgaWYgKGZpcnN0Q2hpbGQpIHtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBmaXJzdENoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICB9XG59XG5cbmluamVjdENTUyhjc3MpO1xuXG5leHBvcnQgZGVmYXVsdCB0aXBweTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmFsbC5qcy5tYXBcbiIsImltcG9ydCBFbGVtZW50IGZyb20gJ0BVSS9lbGVtZW50JztcbmltcG9ydCAnQEF1dG9Db21wbGV0ZS9jc3MvYXV0b0NvbXBsZXRlLmNzcyc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCAnLi90aXBweS1zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG5pbXBvcnQgQ29tcGFyaXNvblRleHQgZnJvbSAnQFByb2plY3QvY29tcG9uZW50cy9jb21wYXJpc29uL3RleHQnO1xuaW1wb3J0IENvbXBhcmlzb25DaGFydCBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2NvbXBhcmlzb24vY2hhcnQnO1xuaW1wb3J0IEF1dG9Db21wbGV0ZSBmcm9tICdAQXV0b0NvbXBsZXRlL2pzL2F1dG9Db21wbGV0ZS5qcyc7XG5pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG5pbXBvcnQgdGlwcHkgZnJvbSAndGlwcHkuanMnO1xuXG5jb25zdCBpbml0aWFsQ29tcGFyZSA9IFsnVVMnLCdBTCddO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wYXJpc29uIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgcHJlcmVuZGVyKCl7IC8vIHRoaXMgcHJlcmVuZGVyIGlzIGNhbGxlZCBhcyBwYXJ0IG9mIHRoZSBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICB0aGlzLmNvbXBhcmlzb25zID0gW107XG4gICAgICAgIC8vIGZpcnN0IGxvb3AgdGhyb3VnaCB0byBpbnN0YW50aWF0ZSB0aGUgQ29tcGFyaXNvbnMuIGlmIHByZXJlbmRlcmVkLCBjb21wYXJpc29uLmVsIHdpbGwgYmUgdGhlIHJlbmRlcnMgaHRtbC4gaWYgbm90LCBpdCB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgICAgdGhpcy5tb2RlbC5ncm91cHMuZm9yRWFjaCgoZ3JvdXAsIGkpID0+IHtcbiAgICAgICAgICAgIHRoaXMubW9kZWwudHlwZXNOZXN0ZWRbaV0udmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgICAgICB2YXIgY29tcGFyaXNvbjtcbiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlLnR5cGUgPT09ICd0ZXh0JyApe1xuICAgICAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gdGhpcy5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIENvbXBhcmlzb25UZXh0LCBgZGl2LmpzLXRleHQtY29tcGFyZS0ke3ZhbHVlLmZpZWxkfWAsIHtyZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXMsIGRhdGE6IHtjb21wYXJpc29uOiBpbml0aWFsQ29tcGFyZSwgZmllbGQ6IHZhbHVlLmZpZWxkfX0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSB0aGlzLnBhcmVudC5jcmVhdGVDb21wb25lbnQodGhpcy5tb2RlbCwgQ29tcGFyaXNvbkNoYXJ0LCBgZGl2LmpzLXRleHQtY29tcGFyZS0ke3ZhbHVlLmZpZWxkfWAsIHtyZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXMsIGRhdGE6IHtjb21wYXJpc29uOiBpbml0aWFsQ29tcGFyZSwgZmllbGQ6IHZhbHVlLmZpZWxkfX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBhcmlzb25zLnB1c2goY29tcGFyaXNvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCguLi50aGlzLmNvbXBhcmlzb25zKTtcblxuICAgICAgICAvL3RoZW4gZWl0aGVyIHJldHVybiB0aGUgcHJlbmRlcmVkIERPTSBlbGVtZW50IG9yIGNyZWF0ZSBpdCwgYXBwZW5kaW5nIHRoZSBET00gZWxlbWVudHMgZnJvbSB0aGUgY29tcGFyaXNvbnMgaW5zdGFudGlhdGVkIGFib3ZlIFxuXG4gICAgICAgIC8vY29udGFpbmVyXG4gICAgICAgIHZhciB2aWV3ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIC8vdGhpcy5jaGlsZHJlbiA9IFtdOyBhbHJlYWR5IHNldCBhcyBwYXJ0IG9mIGNyZWF0ZUNvbXBvbmVudCBtZXRob2RcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldzsgLy8gaWYgcHJlcmVuZGVyZWQgYW5kIG5vIG5lZWQgdG8gcmVuZGVyIChubyBkYXRhIG1pc21hdGNoKVxuICAgICAgICB9XG4gICAgICAgIHZhciBjb21wb3VuZEluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5tb2RlbC5ncm91cHMuZm9yRWFjaCgoZ3JvdXAsIGkpID0+IHtcbiAgICAgICAgICAgIHZhciBncm91cERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZ3JvdXBEaXYuY2xhc3NMaXN0LmFkZChzW2dyb3VwLmNsZWFuU3RyaW5nKCldKTtcbiAgICAgICAgICAgIGdyb3VwRGl2Lmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGA8aDMgY2xhc3M9XCIke3MuZ3JvdXBIZWFkZXJ9XCI+JHtncm91cH08L2gzPmApO1xuICAgICAgICAgICAgdmFyIHR5cGVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHR5cGVDb250YWluZXIuY2xhc3NMaXN0LmFkZChzLnR5cGVDb250YWluZXIsIHNbZ3JvdXAuY2xlYW5TdHJpbmcoKV0pO1xuICAgICAgICAgICAgdGhpcy5tb2RlbC50eXBlc05lc3RlZFtpXS52YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsgXG4gICAgICAgICAgICAgICAgdHlwZURpdi5jbGFzc0xpc3QuYWRkKHMudHlwZURpdiwgc1t2YWx1ZS5maWVsZF0pO1xuICAgICAgICAgICAgICAgIHR5cGVEaXYuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgYDxoNCBjbGFzcz1cIiR7cy50eXBlSGVhZGVyfSAkeyB2YWx1ZS50b29sdGlwID8gcy53aXRoVG9vbHRpcCA6ICd3aXRob3V0VG9vbHRpcCcgfVwiIGRhdGEtdGlwcHktY29udGVudD1cIiR7dmFsdWUudG9vbHRpcCB8fCAnJ31cIj4ke3ZhbHVlLmxhYmVsfTwvaDQ+YCk7XG4gICAgICAgICAgICAgICAgdHlwZURpdi5hcHBlbmRDaGlsZCh0aGlzLmNvbXBhcmlzb25zW2NvbXBvdW5kSW5kZXhdLmVsKTtcbiAgICAgICAgICAgICAgICBjb21wb3VuZEluZGV4Kys7XG4gICAgICAgICAgICAgICAgdHlwZUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0eXBlRGl2KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBncm91cERpdi5hcHBlbmRDaGlsZCh0eXBlQ29udGFpbmVyKTtcbiAgICAgICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQoZ3JvdXBEaXYpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplQXV0b2NvbXBsZXRlcygpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVUb29sdGlwcygpO1xuICAgICAgICBQUy5zZXRTdWJzKFtcbiAgICAgICAgICAgIFsnY29tcGFyZScsIChtc2csZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKG1zZywgZGF0YSk7ICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICB9XVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZVRvb2x0aXBzKCl7XG4gICAgICAgIHZhciBlbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMud2l0aFRvb2x0aXApO1xuICAgICAgICB0aXBweShlbHMpXG4gICAgICAgICAgICBcbiAgICB9XG4gICAgdXBkYXRlKG1zZyxkYXRhKXtcbiAgICAgICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgICAgIHRoaXMuY29tcGFyaXNvbnMuZm9yRWFjaChjb21wYXJpc29uID0+IHtcbiAgICAgICAgICAgIGNvbXBhcmlzb24udXBkYXRlKG1zZywgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0aWFsaXplQXV0b2NvbXBsZXRlcygpe1xuICAgICAgICB2YXIgc3JjID0gdGhpcy5tb2RlbC5kYXRhLm1hcChkID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZC5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogZC5jb2RlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAga2V5ID0gJ3N0YXRlJztcblxuICAgICAgICBjb25zb2xlLmxvZyhzcmMpO1xuICAgICAgICBbMCwxXS5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb21wYXJlLWlucHV0LScgKyBpbmRleCksXG4gICAgICAgICAgICAgICAgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhdXRvQ29tcGxldGVfd3JhcHBlci0nICsgaW5kZXgpO1xuICAgICAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnYXV0b0NvbXBsZXRlJywgc1snYXV0b0NvbXBsZXRlJyArIGluZGV4XSk7XG4gICAgICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoc1snYXV0b0NvbXBsZXRlX3dyYXBwZXItJyArIGluZGV4XSk7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IEF1dG9Db21wbGV0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJyNjb21wYXJlLWlucHV0LScgKyBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VIb2xkZXI6ICdTZWxlY3Qgc3RhdGUnLFxuICAgICAgICAgICAgICAgICAgICAvL3RocmVzaG9sZDogMCwgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaW4uIENoYXJzIGxlbmd0aCB0byBzdGFydCBFbmdpbmUgfCAoT3B0aW9uYWwpXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaEVuZ2luZTogXCJzdHJpY3RcIiwgICAgICAgICAgICAgIC8vIFNlYXJjaCBFbmdpbmUgdHlwZS9tb2RlICAgICAgICAgICB8IChPcHRpb25hbClcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c0xpc3Q6IHsgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbmRlcmVkIHJlc3VsdHMgbGlzdCBvYmplY3QgICAgICB8IChPcHRpb25hbClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogKCkgPT4gJ2F1dG9Db21wbGV0ZV9yZXN1bHRzX2xpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb21wYXJlLWlucHV0LScgKyBpbmRleCksXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2FmdGVyZW5kJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHQ6IHRydWUsICAgICAgICAgICAgICAgICAgICAgICAvLyBIaWdobGlnaHQgbWF0Y2hpbmcgcmVzdWx0cyAgICAgIHwgKE9wdGlvbmFsKVxuICAgICAgICAgICAgICAgICAgICAvL21heFJlc3VsdHM6IDUsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1heC4gbnVtYmVyIG9mIHJlbmRlcmVkIHJlc3VsdHMgfCAoT3B0aW9uYWwpXG4gICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0aW9uOiBmZWVkYmFjayA9PiB7ICAgICAgICAgICAgIC8vIEFjdGlvbiBzY3JpcHQgb25TZWxlY3Rpb24gZXZlbnQgfCAoT3B0aW9uYWwpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmZWVkYmFjaywgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCdjb21wYXJlLicgKyBpbmRleCwgZmVlZGJhY2suc2VsZWN0aW9uLmNvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCBmZWVkYmFjay5zZWxlY3Rpb24uc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3BsYWNlSG9sZGVyJywgdGhpcy5tb2RlbC5kYXRhLmZpbmQoZCA9PiBkLmNvZGUgPT09IGluaXRpYWxDb21wYXJlW2luZGV4XSkuc3RhdGUpO1xuICAgICAgICAgICAgLy9pbnB1dC52YWx1ZSA9IHRoaXMubW9kZWwuZGF0YS5maW5kKGQgPT4gZC5jb2RlID09PSBpbml0aWFsQ29tcGFyZVtpbmRleF0pLnN0YXRlO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5jaGlsZHJlbik7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCB7IERyb3Bkb3duIH0gZnJvbSAnQFVJL2lucHV0cy9pbnB1dHMuanMnO1xuaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaGlzRHJvcGRvd24gZXh0ZW5kcyBEcm9wZG93biB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIG9wdGlvbnMpe1xuICAgICAgICB2YXIgX2RhdGEgPSBbXTtcbiAgICAgICAgdmFyIGRyb3Bkb3duVHlwZSA9IG9wdGlvbnMuZGF0YS50eXBlO1xuICAgICAgICBvcHRpb25zLmRhdGEuZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgLyppZiAoIGRyb3Bkb3duVHlwZSA9PT0gJ2hpZ2hsaWdodCcgKXsgLy8gdHJhbnNmb3JtIHN0YXRlIGRhdGEgaW50byBmb3JtIERyb3Bkb3duIGNhbiB1c2VcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkKTtcbiAgICAgICAgICAgICAgICBfZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGQuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZC5zdGF0ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWUgZC50eXBlIGlzIGZpZWxkIG9yIGdyb3VwICovXG4gICAgICAgICAgICAgICAgX2RhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpc05hTigrZC5sYWJlbCkgPyBkLmxhYmVsIDogJ0NyZWRpdCByYXRpbmcgJyArIGQubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBkLmlzRGVmYXVsdFNlbGVjdGlvbiA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgLy8gICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgb3B0aW9ucy5kYXRhID0gX2RhdGEuc29ydChmdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICAgICAgICAgIHJldHVybiBhLm5hbWUgPCBiLm5hbWUgPyAtMSA6IGEubmFtZSA+IGIubmFtZSA/IDEgOiBhLm5hbWUgPj0gYi5uYW1lID8gMCA6IE5hTjtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICggZHJvcGRvd25UeXBlID09PSAnZ3JvdXAnICl7XG4gICAgICAgICAgICBvcHRpb25zLmRhdGEudW5zaGlmdCh7dmFsdWU6IG51bGwsIG5hbWU6ICfigJQgTm9uZSDigJQnLCBzZWxlY3RlZDogdHJ1ZX0pO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZHJvcGRvd25UeXBlID0gZHJvcGRvd25UeXBlO1xuICAgIH1cbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIGRyb3Bkb3duID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGRyb3Bkb3duOyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cbiAgICAgICAgZHJvcGRvd24uY2xhc3NMaXN0LmFkZChzLmRyb3Bkb3duKTtcbiAgICAgICAgLy9kcm9wZG93bi5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBkcm9wZG93bjtcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICBzdXBlci5pbml0KCk7XG4gICAgICAgIC8qY29uc29sZS5sb2coJ2luaXQgZHJvcGRvd24nLCB0aGlzKTtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBlID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUsIHRoaXMpO1xuICAgICAgICAgICAgUy5zZXRTdGF0ZSh0aGlzLmRyb3Bkb3duVHlwZSwgZS50YXJnZXQudmFsdWUpO1xuICAgICAgICB9KTsqL1xuICAgIH1cbiAgICBvbkNoYW5nZSgpe1xuICAgICAgICBTLnNldFN0YXRlKHRoaXMuZHJvcGRvd25UeXBlLCB0aGlzLnNlbGVjdGVkT3B0aW9uLmRhdGFzZXQudmFsdWUpO1xuICAgIH1cbiAgICBcbn0iLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCBUaGlzRHJvcGRvd24gZnJvbSAnQFByb2plY3QvY29tcG9uZW50cy9kcm9wZG93bic7XG5pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdGlvbnMgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgIC8vY29udGFpbmVyXG4gICAgICAgIHZhciB2aWV3ID0gc3VwZXIucHJlcmVuZGVyKCksXG4gICAgICAgICAgICBkcm9wZG93bkRhdGEgPSBbIC8vIFRPRE86IHNvdHIgZm4gbmVlZHMgdG8gYmUgRFJZZXIsIGFkZCB0byB1dGlscyBBcnJheS5wcm90b3R5cGUuc29ydEFzY2VuZGluZyBvciBzdFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnU2VsZWN0IGZpZWxkOicsXG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5tb2RlbC50eXBlcy5maWx0ZXIodCA9PiB0LnR5cGUgIT09ICd0ZXh0JyksIFxuICAgICAgICAgICAgICAgIHR5cGU6ICdmaWVsZCdcbiAgICAgICAgICAgIH0se1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnR3JvdXAgYnk6JywgLy8gQUdIRyBUT0RPOiBkbyB0aGUgc29ydCB1bmRlciB0aGUgY29tcG5lbnRcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLm1vZGVsLnR5cGVzLmZpbHRlcih0ID0+IHQudHlwZSA9PT0gJ3RleHQnKSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnZ3JvdXAnXG4gICAgICAgICAgICB9Lyose1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnSGlnaGxpZ2h0OicsXG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5tb2RlbC5kYXRhLm1hcChkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBkLmNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZC5zdGF0ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdHlwZTogJ2hpZ2hsaWdodCdcbiAgICAgICAgICAgIH0qL1xuICAgICAgICBdO1xuICAgICAgICB0aGlzLmRyb3Bkb3ducyA9IFtdO1xuICAgICAgICBkcm9wZG93bkRhdGEuZm9yRWFjaChkID0+IHtcbiAgICAgICAgICAgIHRoaXMuZHJvcGRvd25zLnB1c2godGhpcy5wYXJlbnQucGFyZW50LmNyZWF0ZUNvbXBvbmVudCh0aGlzLm1vZGVsLCBUaGlzRHJvcGRvd24sIGBkaXYuanMtZHJvcGRvd24tJHtkLmxhYmVsLmNsZWFuU3RyaW5nKCl9YCwge3BhcmVudDogdGhpcywgZGF0YTogZH0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCguLi50aGlzLmRyb3Bkb3ducyk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXc7IC8vIGlmIHByZXJlbmRlcmVkIGFuZCBubyBuZWVkIHRvIHJlbmRlciAobm8gZGF0YSBtaXNtYXRjaClcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkcm9wZG93bldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZHJvcGRvd25XcmFwcGVyLmNsYXNzTGlzdC5hZGQocy5kcm9wZG93bldyYXBwZXIpO1xuICAgICAgICBkcm9wZG93bkRhdGEuZm9yRWFjaCgoZCxpKSA9PiB7XG4gICAgICAgICAgICB2YXIgZHJvcGRvd25Jbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAgICAgICAgIGRyb3Bkb3duT3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpLFxuICAgICAgICAgICAgICAgIGRyb3Bkb3duID0gdGhpcy5kcm9wZG93bnNbaV07XG4gICAgICAgICAgICBkcm9wZG93bk91dGVyLmNsYXNzTGlzdC5hZGQocy5kcm9wZG93bk91dGVyKTtcbiAgICAgICAgICAgIGRyb3Bkb3duT3V0ZXIuaW5uZXJUZXh0ID0gZC5sYWJlbDtcbiAgICAgICAgICAgIGRyb3Bkb3duSW5uZXIuY2xhc3NMaXN0LmFkZChzLmRyb3Bkb3duSW5uZXIpO1xuICAgICAgICAgICAgZHJvcGRvd25Jbm5lci5hcHBlbmRDaGlsZChkcm9wZG93bi5lbCk7XG4gICAgICAgICAgICBkcm9wZG93bk91dGVyLmFwcGVuZENoaWxkKGRyb3Bkb3duSW5uZXIpO1xuICAgICAgICAgICAgZHJvcGRvd25XcmFwcGVyLmFwcGVuZENoaWxkKGRyb3Bkb3duT3V0ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmlldy5hcHBlbmRDaGlsZChkcm9wZG93bldyYXBwZXIpO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHZpZXcuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgXG4gICAgICAgICAgICA8ZGl2IGlkPVwiZXhwbGFpbmVyLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZmllbGQtZXhwbGFpbmVyXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImdyb3VwLWV4cGxhaW5lclwiPjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiJHtzLmxhYmVsfSAke3MubGFiZWxTb3J0fSBmbGV4XCI+PHNwYW4+U29ydCBieTo8L3NwYW4+IDxzcGFuPjxhIGNsYXNzPVwiJHtzLnNvcnRCeX0gJHtzLnNvcnRBY3RpdmV9XCIgZGF0YS1zb3J0PVwiYWxwaGFcIiBocmVmPVwiI1wiPkHigJNaPC9hPiB8IDxhIGNsYXNzPVwiJHtzLnNvcnRCeX1cIiBkYXRhLXNvcnQ9XCJhc2NcIiBocmVmPVwiI1wiPkxvd+KAk0hpZ2g8L2E+IHwgPGEgY2xhc3M9XCIke3Muc29ydEJ5fVwiIGRhdGEtc29ydD1cImRlc2NcIiBocmVmPVwiI1wiPkhpZ2jigJNMb3c8L2E+PC9zcGFuPjwvcD5cbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cIiR7cy5sYWJlbH0gJHtzLmxhYmVsSGlnaGxpZ2h0fVwiPlNlbGVjdCBhIHN0YXRlIHRvIGhpZ2hsaWdodCB8IDxhIGlkPVwiY2xlYXItYWxsLWhpZ2hsaWdodFwiIGhyZWY9XCIjXCI+Q2xlYXIgYWxsPC9hPjwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgKTtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgIGNoaWxkLmluaXQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5zb3J0QnkpLmZvckVhY2goZWFjaCA9PiB7XG4gICAgICAgICAgICBlYWNoLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLnNvcnRBY3RpdmUpLmNsYXNzTGlzdC5yZW1vdmUocy5zb3J0QWN0aXZlKTtcbiAgICAgICAgICAgICAgICBlYWNoLmNsYXNzTGlzdC5hZGQocy5zb3J0QWN0aXZlKTtcbiAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCdzb3J0JywgZWFjaC5kYXRhc2V0LnNvcnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCIvKmVzbGludCBuby11bnVzZWQtdmFyczogW1wiZXJyb3JcIiwgeyBcInZhcnNJZ25vcmVQYXR0ZXJuXCI6IFwiYXNjZW5kaW5nfGRlc2NlbmRpbmdcIiB9XSAqL1xuXG5pbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzLWNvbGxlY3Rpb24nO1xuaW1wb3J0IEJhciBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2Jhcic7XG5pbXBvcnQgU2VsZWN0aW9ucyBmcm9tICcuL3NlbGVjdGlvbnMnO1xuaW1wb3J0IFBTIGZyb20gJ3B1YnN1Yi1zZXR0ZXInO1xuXG5pbXBvcnQgeyBmb3JtYXRWYWx1ZSB9IGZyb20gJ0BQcm9qZWN0L21ldGhvZHMnO1xuXG4vLyBwYXJ0aWFsc1xuaW1wb3J0IGNlbnRyYWxpemF0aW9uIGZyb20gJ0BQcm9qZWN0L3BhcnRpYWxzL2NlbnRyYWxpemF0aW9uLm1kJztcbmltcG9ydCBjcmVkaXQyMDE1IGZyb20gJ0BQcm9qZWN0L3BhcnRpYWxzL2NyZWRpdC1yYXRpbmcubWQnO1xuaW1wb3J0IGNyZWRpdDIwMTggZnJvbSAnQFByb2plY3QvcGFydGlhbHMvY3JlZGl0LXJhdGluZy5tZCc7XG5pbXBvcnQgZGVidF9saW1pdF90eXBlIGZyb20gJ0BQcm9qZWN0L3BhcnRpYWxzL2RlYnQtbGltaXQubWQnO1xuaW1wb3J0IGRlYnRfcGVyX2NhcGl0YSBmcm9tICdAUHJvamVjdC9wYXJ0aWFscy9kZWJ0LXBlci1jYXBpdGEubWQnO1xuaW1wb3J0IGRlYnRfcGVyY2VudF9TUEkgZnJvbSAnQFByb2plY3QvcGFydGlhbHMvZGVidC1zcGkubWQnO1xuaW1wb3J0IHRlbl95ZWFyX3BvcF9ncm93dGggZnJvbSAnQFByb2plY3QvcGFydGlhbHMvcG9wdWxhdGlvbi1ncm93dGgubWQnO1xuaW1wb3J0IHJldmVudWVfdm9sYXRpbGl0eSBmcm9tICdAUHJvamVjdC9wYXJ0aWFscy9yZXZlbnVlLXZvbGF0aWxpdHkubWQnO1xuaW1wb3J0IHN0YXRlX2xvY2FsX2RpdmlzaW9uIGZyb20gJ0BQcm9qZWN0L3BhcnRpYWxzL3N0YXRlLWxvY2FsLm1kJztcblxuZnVuY3Rpb24gYXNjZW5kaW5nKGtleSA9IG51bGwpIHtcbiAgICByZXR1cm4ga2V5ID09PSBudWxsID8gXG4gICAgICAgIGZ1bmN0aW9uKGEsYil7XG4gICAgICAgICAgICBhID0gYSA9PT0gJ04vQScgPyAnIScgOiBhOyAvLyB0aGlzIGVuc3VyZXMgbi9hIGlzIGFsd2F5cyBmaXJzdFxuICAgICAgICAgICAgYiA9IGIgPT09ICdOL0EnID8gJyEnIDogYjtcbiAgICAgICAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbiAgICAgICAgfSA6XG4gICAgICAgIGZ1bmN0aW9uKGEsYil7XG4gICAgICAgICAgICByZXR1cm4gYVtrZXldIDwgYltrZXldID8gLTEgOiBhW2tleV0gPiBiW2tleV0gPyAxIDogYVtrZXldID49IGJba2V5XSA/IDAgOiBOYU47XG4gICAgICAgIH1cbn1cbmZ1bmN0aW9uIGRlc2NlbmRpbmcoa2V5ID0gbnVsbCkge1xuICAgIHJldHVybiBrZXkgPT09IG51bGwgPyBcbiAgICAgICAgZnVuY3Rpb24oYSxiKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGEgPCBiID8gMSA6IGEgPiBiID8gLTEgOiBhID49IGIgPyAwIDogTmFOO1xuICAgICAgICB9IDpcbiAgICAgICAgZnVuY3Rpb24oYSxiKXtcbiAgICAgICAgICAgIHJldHVybiBhW2tleV0gPCBiW2tleV0gPyAxIDogYVtrZXldID4gYltrZXldID8gLTEgOiBhW2tleV0gPj0gYltrZXldID8gMCA6IE5hTjtcbiAgICAgICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlmdHlTdGF0ZVZpZXcgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgIC8vY29udGFpbmVyXG4gICAgICAgIHZhciB2aWV3ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIHRoaXMuZmllbGQgPSAnZGVidF9wZXJjZW50X1NQSSc7XG4gICAgICAgIHRoaXMuYmFycyA9IFtdO1xuICAgICAgICB0aGlzLmJhckNvbnRhaW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5sYXN0UG9zaXRpb25zID0ge307XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRCYXJzID0ge307XG4gICAgICAgIHRoaXMuZXhwbGFpbmVyVGV4dCA9IHtcbiAgICAgICAgICAgIGNlbnRyYWxpemF0aW9uLFxuICAgICAgICAgICAgY3JlZGl0MjAxNSxcbiAgICAgICAgICAgIGNyZWRpdDIwMTgsXG4gICAgICAgICAgICBkZWJ0X2xpbWl0X3R5cGUsXG4gICAgICAgICAgICBkZWJ0X3Blcl9jYXBpdGEsXG4gICAgICAgICAgICBkZWJ0X3BlcmNlbnRfU1BJLFxuICAgICAgICAgICAgdGVuX3llYXJfcG9wX2dyb3d0aCxcbiAgICAgICAgICAgIHJldmVudWVfdm9sYXRpbGl0eSxcbiAgICAgICAgICAgIHN0YXRlX2xvY2FsX2RpdmlzaW9uXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ3JvdXBCeUZuID0gdGhpcy5ncm91cEJ5ICE9PSBudWxsID8gZCA9PiBkW3RoaXMuZ3JvdXBCeV0gOiBkID0+IGQgIT09IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IHRoaXMucGFyZW50LmNyZWF0ZUNvbXBvbmVudCh0aGlzLm1vZGVsLCBTZWxlY3Rpb25zLCBgZGl2LmpzLWZpZnR5LXN0YXRlLXNlbGVjdGlvbnNgLCB7cGFyZW50OiB0aGlzfSk7XG4gICAgICAgIHRoaXMuc29ydFZhbHVlS2V5ID0gJ3N0YXRlJztcbiAgICAgICAgdGhpcy5zb3J0VmFsdWVzRm4gPSBhc2NlbmRpbmc7XG4gICAgICAgIHRoaXMuZ3JvdXBCeSA9ICdudWxsJztcbiAgICAgICAgdGhpcy5uZXN0RGF0YSgpOyAgICAgICAgXG4gICAgICAgIHRoaXMucHVzaEJhcnMoKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRoaXMuc2VsZWN0aW9ucywgLi4udGhpcy5iYXJzKTtcblxuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3OyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMucmVuZGVyU2VsZWN0aW9ucygpO1xuICAgICAgICB0aGlzLmV4cGxhaW5lcldyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZXhwbGFpbmVyLXdyYXBwZXInKTtcbiAgICAgICAgdGhpcy5maWVsZEV4cGxhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaWVsZC1leHBsYWluZXInKTtcbiAgICAgICAgdGhpcy5ncm91cEV4cGxhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNncm91cC1leHBsYWluZXInKTtcbiAgICAgICAgdGhpcy51cGRhdGVFeHBsYWluZXJUZXh0KCdmaWVsZCcsIHRoaXMuZmllbGQsIHRydWUpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGNoYXJ0cyA9IHRoaXMucmVuZGVyQ2hhcnRzKCk7XG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQoY2hhcnRzKTtcbiAgICAgICBcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIG5lc3REYXRhKCl7XG4gICAgICAgIHRoaXMubmVzdGVkRGF0YSA9IGQzLm5lc3QoKS5rZXkodGhpcy5ncm91cEJ5Rm4pLnNvcnRLZXlzKGFzY2VuZGluZygpKS5zb3J0VmFsdWVzKHRoaXMuc29ydFZhbHVlc0ZuKHRoaXMuc29ydFZhbHVlS2V5KSkuZW50cmllcyh0aGlzLm1vZGVsLmRhdGEpO1xuICAgIH1cbiAgICBwdXNoQmFycygpe1xuICAgICAgICB0aGlzLmJhcnMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5iYXJDb250YWluZXJzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgdGhpcy5uZXN0ZWREYXRhLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgICAgICAgZ3JvdXAudmFsdWVzLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXJzLnB1c2godGhpcy5wYXJlbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMubW9kZWwsIEJhciwgYGRpdi5iYXItc3RhdGUtJHtkLmNvZGV9YCwge3BhcmVudDogdGhpcywgZGF0YToge2QsZmllbGQ6IHRoaXMuZmllbGQsIGNvbG9yOjJ9fSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFyQ29udGFpbmVycy5wdXNoKHRoaXMucGFyZW50LmNyZWF0ZUNvbXBvbmVudCh0aGlzLm1vZGVsLCBFbGVtZW50LCBgZGl2I2JhckNvbnRhaW5lci0ke2QuY29kZX1gKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7IFxuICAgICAgICBcbiAgICB9XG4gICAgcmVuZGVyU2VsZWN0aW9ucygpe1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnNlbGVjdGlvbnMuZWwpO1xuICAgIH1cbiAgICByZW5kZXJDaGFydHMoKXtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnanMtZmlmdHktY2hhcnQtY29udGFpbmVyJyk7XG5cbiAgICAgICAgdGhpcy5uZXN0ZWREYXRhLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgICAgICAgdmFyIGdyb3VwRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBncm91cERpdi5jbGFzc0xpc3QuYWRkKHMuZ3JvdXBEaXYpO1xuICAgICAgICAgICAgZ3JvdXBEaXYuaW5uZXJIVE1MID0gdGhpcy5ncm91cEJ5ICE9PSAnbnVsbCcgPyBgPGgzIGNsYXNzPVwiJHtzLmdyb3VwSGVhZGVyfVwiPiR7dGhpcy5tb2RlbC5kaWN0W3RoaXMuZ3JvdXBCeV0gIT09IHVuZGVmaW5lZCA/IHRoaXMubW9kZWwuZGljdFt0aGlzLmdyb3VwQnldW2dyb3VwLmtleV0gOiBncm91cC5rZXl9PC9oMz5gIDogJyc7XG4gICAgICAgICAgICBncm91cC52YWx1ZXMuZm9yRWFjaChkID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgYmFyQ29udGFpbmVyID0gdGhpcy5iYXJDb250YWluZXJzW2luZGV4XS5lbDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChzLmJhckNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLmhpZ2hsaWdodGVkQmFyc1tiYXJDb250YWluZXIuaWRdICkge1xuICAgICAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChzLmlzSGlnaGxpZ2h0ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyksXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlSG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZChzLmJhckxhYmVsKTtcbiAgICAgICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSBkLnN0YXRlO1xuICAgICAgICAgICAgICAgIHBsYWNlSG9sZGVyLmNsYXNzTGlzdC5hZGQocy5wbGFjZUhvbGRlcik7XG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5iYXJzW2luZGV4XS5lbCk7XG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKHBsYWNlSG9sZGVyKTtcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBgXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke3MuZGF0YUxhYmVsfVwiIHN0eWxlPVwidHJhbnNmb3JtOiB0cmFuc2xhdGVYKCR7KCB0aGlzLmJhcnNbaW5kZXhdLmxpbmVhclNjYWxlKHRoaXMuYmFyc1tpbmRleF0uZGF0YS5kLCB0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZmllbGQpICogMTAwKS50b0ZpeGVkKDEpIH0lKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgJHt0aGlzLmZvcm1hdFZhbHVlKHRoaXMuYmFyc1tpbmRleF0uZGF0YS5kLCB0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZmllbGQpfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gKVxuICAgICAgICAgICAgICAgIGdyb3VwRGl2LmFwcGVuZENoaWxkKGJhckNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGdyb3VwRGl2KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG4gICAgZm9ybWF0VmFsdWUoKXtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGludmVydFBvc2l0aW9ucygpe1xuICAgICAgICB0aGlzLmJhckNvbnRhaW5lcnMuZm9yRWFjaChiYXJDb250YWluZXIgPT4ge1xuICAgICAgICAgICAgdmFyIGxhc3RQb3NpdGlvbiA9IGJhckNvbnRhaW5lci5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICBkZWx0YVkgPSB0aGlzLmZpcnN0UG9zaXRpb25zW2JhckNvbnRhaW5lci5lbC5pZF0udG9wIC0gbGFzdFBvc2l0aW9uLnRvcDtcbiAgICAgICAgICAgIGJhckNvbnRhaW5lci5lbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMCc7XG4gICAgICAgICAgICBiYXJDb250YWluZXIuZWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHtkZWx0YVl9cHgpYDtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgLy8gdHJhbnNpdGlvbiB3b24ndCBoYXBwZW4gdy9vIHRoZSBzZXR0aW1lb3V0IHRyaWNrXG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwLjhzJztcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuZWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoMCknO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICBQUy5zZXRTdWJzKFtcbiAgICAgICAgICAgIFsnZmllbGQnLCAobXNnLGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJhcnMobXNnLGRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRGF0YUxhYmVscyhtc2csZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFeHBsYWluZXJUZXh0KG1zZyxkYXRhKTtcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgWydncm91cCcsIChtc2csZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlR3JvdXBzKG1zZyxkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUV4cGxhaW5lclRleHQobXNnLGRhdGEpO1xuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBbJ3NvcnQnLCAobXNnLGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRCYXJzKG1zZyxkYXRhKTtcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgWydyZXNpemUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGp1c3RFeHBsYWluZXJUZXh0SGVpZ2h0KCk7XG4gICAgICAgICAgICB9XVxuICAgICAgICBdKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgICAgICBjaGlsZC5pbml0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV4cGxhaW5lcldyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZXhwbGFpbmVyLXdyYXBwZXInKTtcbiAgICAgICAgdGhpcy5maWVsZEV4cGxhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaWVsZC1leHBsYWluZXInKTtcbiAgICAgICAgdGhpcy5ncm91cEV4cGxhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNncm91cC1leHBsYWluZXInKTtcbiAgICAgICAgdGhpcy5pbml0SGlnaGxpZ2h0QmFycygpO1xuICAgICAgICB0aGlzLmluaXRDbGVhckFsbEhpZ2hsaWdodHMoKTtcbiAgICB9XG4gICAgdXBkYXRlRXhwbGFpbmVyVGV4dChtc2csZGF0YSwgY2FsbGVkRnJvbVByZXJlbmRlcil7XG4gICAgICAgIHZhciBlbCxcbiAgICAgICAgICAgIGNvbnRlbnQ7XG4gICAgICAgIGlmICggbXNnID09PSAnZmllbGQnICkge1xuICAgICAgICAgICAgdGhpcy5maWVsZCA9IGRhdGE7IC8vIHNvIHRoYXQgdGhlIG9yZGVyIG9mIHN1YnMgZG9lc24ndCBtYXR0ZXJcbiAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLmV4cGxhaW5lclRleHRbdGhpcy5maWVsZF0gfHwgJyc7XG4gICAgICAgICAgICBlbCA9IHRoaXMuZmllbGRFeHBsYWluZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBtc2cgPT09ICdncm91cCcgKXtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBCeSA9IGRhdGE7IC8vIHNvIHRoYXQgdGhlIG9yZGVyIG9mIHN1YnMgZG9lc24ndCBtYXR0ZXJcbiAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLmV4cGxhaW5lclRleHRbdGhpcy5ncm91cEJ5XSB8fCAnJztcbiAgICAgICAgICAgIGVsID0gdGhpcy5ncm91cEV4cGxhaW5lcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoICFjYWxsZWRGcm9tUHJlcmVuZGVyICkge1xuICAgICAgICAgICAgdGhpcy5leHBsYWluZXJXcmFwcGVyLnN0eWxlLmhlaWdodCA9IHRoaXMuZXhwbGFpbmVyV3JhcHBlci5vZmZzZXRIZWlnaHQgKyAncHgnOyAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbC5mYWRlSW5Db250ZW50KGNvbnRlbnQpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGp1c3RFeHBsYWluZXJUZXh0SGVpZ2h0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGp1c3RFeHBsYWluZXJUZXh0SGVpZ2h0KCl7XG4gICAgICAgIHZhciBpbm5lckhlaWdodCA9IFt0aGlzLmZpZWxkRXhwbGFpbmVyLCB0aGlzLmdyb3VwRXhwbGFpbmVyXS5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICAgICAgICB2YXIgZWwgPSBjdXIucXVlcnlTZWxlY3RvcigncCcpO1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGVzID0gZWwgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjdXIucXVlcnlTZWxlY3RvcigncCcpKSA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gY29tcHV0ZWRTdHlsZXMgPyArYWNjICsgZWwub2Zmc2V0SGVpZ2h0ICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZXNbJ21hcmdpbi10b3AnXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlc1snbWFyZ2luLWJvdHRvbSddKSA6ICthY2M7XG4gICAgICAgIH0sMCk7XG4gICAgICAgIHRoaXMuZXhwbGFpbmVyV3JhcHBlci5zdHlsZS5oZWlnaHQgPSBpbm5lckhlaWdodCArICdweCc7XG4gICAgfVxuICAgIGluaXRIaWdobGlnaHRCYXJzKCl7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5iYXJDb250YWluZXIpLmZvckVhY2goYmFyQ29udGFpbmVyID0+IHtcbiAgICAgICAgICAgIGJhckNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodGVkQmFyc1tiYXJDb250YWluZXIuaWRdID0gIXRoaXMuaGlnaGxpZ2h0ZWRCYXJzW2JhckNvbnRhaW5lci5pZF07XG4gICAgICAgICAgICAgICAgYmFyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUocy5pc0hpZ2hsaWdodGVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5pdENsZWFyQWxsSGlnaGxpZ2h0cygpe1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2xlYXItYWxsLWhpZ2hsaWdodCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5iYXJDb250YWluZXIpLmZvckVhY2goYmFyQ29udGFpbmVyID0+IHtcbiAgICAgICAgICAgICAgICBiYXJDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShzLmlzSGlnaGxpZ2h0ZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRCYXJzID0ge307XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZURhdGFMYWJlbHMoKXtcbiAgICAgICAgdGhpcy5iYXJDb250YWluZXJzLmZvckVhY2goKGJhckNvbnRhaW5lciwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHZhciBkYXRhTGFiZWwgPSBiYXJDb250YWluZXIuZWwucXVlcnlTZWxlY3RvcignLicgKyBzLmRhdGFMYWJlbCk7XG4gICAgICAgICAgICBkYXRhTGFiZWwuZmFkZUluQ29udGVudCh0aGlzLmZvcm1hdFZhbHVlKHRoaXMuYmFyc1tpbmRleF0uZGF0YS5kLCB0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZmllbGQpKTtcbiAgICAgICAgICAgIGRhdGFMYWJlbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgkeyggdGhpcy5iYXJzW2luZGV4XS5saW5lYXJTY2FsZSh0aGlzLmJhcnNbaW5kZXhdLmRhdGEuZCwgdGhpcy5iYXJzW2luZGV4XS5kYXRhLmZpZWxkKSAqIDEwMCkudG9GaXhlZCgxKSB9JSlgO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgdXBkYXRlQmFycyhtc2csZGF0YSl7XG4gICAgICAgIHRoaXMuZmllbGQgPSBkYXRhO1xuICAgICAgICB0aGlzLmJhcnMuZm9yRWFjaChiYXIgPT4ge1xuICAgICAgICAgICAgYmFyLmRhdGEuZmllbGQgPSBkYXRhO1xuICAgICAgICAgICAgYmFyLnVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5zb3J0VmFsdWVLZXkpO1xuICAgICAgICBpZiAoIHRoaXMuc29ydFZhbHVlS2V5ICE9PSAnc3RhdGUnICl7XG4gICAgICAgICAgICB0aGlzLnNvcnRWYWx1ZUtleSA9IGRhdGE7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuRkxJUC5iaW5kKHRoaXMpLDUwMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVjb3JkRmlyc3RQb3NpdGlvbnMoKXtcbiAgICAgICAgdGhpcy5maXJzdFBvc2l0aW9ucyA9IHRoaXMuYmFyQ29udGFpbmVycy5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGFjY1tjdXIuZWwuaWRdID0gY3VyLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSx7fSk7XG4gICAgICAgIFxuICAgIH1cbiAgICBGTElQKCl7XG4gICAgICAgIHRoaXMucmVjb3JkRmlyc3RQb3NpdGlvbnMoKTtcbiAgICAgICAgdGhpcy5uZXN0RGF0YSgpO1xuICAgICAgICB0aGlzLmVsLmlubmVySFRNTCA9ICcnOyBcbiAgICAgICAgdGhpcy5wdXNoQmFycygpOyAgICAgICAgXG4gICAgICAgIHRoaXMuZWwuYXBwZW5kQ2hpbGQodGhpcy5yZW5kZXJDaGFydHMoKSk7XG4gICAgICAgIHRoaXMuaW5pdEhpZ2hsaWdodEJhcnMoKTtcbiAgICAgICAgdGhpcy5pbnZlcnRQb3NpdGlvbnMoKTtcbiAgICB9XG4gICAgdXBkYXRlR3JvdXBzKG1zZywgZGF0YSl7XG4gICAgICAgIHRoaXMuZ3JvdXBCeSA9IGRhdGE7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuZ3JvdXBCeSk7XG4gICAgICAgIHRoaXMuRkxJUCgpO1xuICAgIH1cbiAgICBzb3J0QmFycyhtc2csIGRhdGEpe1xuICAgICAgICB0aGlzLnNvcnRWYWx1ZUtleSA9IGRhdGEgPT09ICdhbHBoYScgPyAnc3RhdGUnIDogdGhpcy5maWVsZDtcbiAgICAgICAgdGhpcy5zb3J0VmFsdWVzRm4gPSBkYXRhID09PSAnZGVzYycgPyBkZXNjZW5kaW5nIDogYXNjZW5kaW5nO1xuICAgICAgICB0aGlzLkZMSVAoKTsgICAgXG4gICAgfVxuICAgIFxufSIsIi8qIGdsb2JhbCBQVUJMSUNQQVRIIHByb2Nlc3MgbW9kdWxlICovXG4vL3V0aWxzXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMy1jb2xsZWN0aW9uJztcbmltcG9ydCBQYXBhIGZyb20gJ3BhcGFwYXJzZSc7XG5pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG4vL2ltcG9ydCBQUyBmcm9tICdwdWJzdWItc2V0dGVyJztcbmltcG9ydCB7IHB1Ymxpc2hXaW5kb3dSZXNpemUgfSBmcm9tICdAVXRpbHMnO1xuXG4vL2RhdGEgKCBDU1ZzIGxvYWRlZCBieSBmaWxlLWxvYWRlciBmb3IgdXNlIGJ5IFBhcGFwYXJzZSBhdCBidWlsZCBhbmQgcnVudGltZS4gdGhhdCdzIHNldCBpbiB3ZWJwYWNrLmNvbW1vbi5qcyApXG5pbXBvcnQgZGF0YSBmcm9tICcuL2RhdGEvZGF0YS5jc3YnO1xuaW1wb3J0IGdyb3VwcyBmcm9tICcuL2RhdGEvZ3JvdXBzLmpzb24nO1xuaW1wb3J0IHR5cGVzIGZyb20gJy4vZGF0YS90eXBlcy5qc29uJztcbmltcG9ydCBkaWN0IGZyb20gJy4vZGF0YS9kaWN0aW9uYXJ5Lmpzb24nO1xuXG4vL3ZpZXdzXG5pbXBvcnQgQ29tcGFyaXNvblZpZXcgZnJvbSAnLi92aWV3cy9zdGF0ZS1jb21wYXJpc29uLyc7XG5pbXBvcnQgRmlmdHlTdGF0ZVZpZXcgZnJvbSAnLi92aWV3cy9maWZ0eS1zdGF0ZS8nO1xuXG4vLyBhcHAgcHJvdG90eXBlXG5pbXBvcnQgUENUQXBwIGZyb20gJ0BBcHAnO1xuXG4vL3N0YXRpYyBjb250ZW50XG5pbXBvcnQgc2VjdGlvbnMgZnJvbSAnLi9wYXJ0aWFscy9zZWN0aW9ucy5odG1sJztcbmltcG9ydCBmb290ZXIgZnJvbSAnLi9wYXJ0aWFscy9mb290ZXIuaHRtbCc7XG5cbnB1Ymxpc2hXaW5kb3dSZXNpemUoUyk7XG5cbmNvbnN0IG1vZGVsID0ge1xuICAgIGdyb3VwcyxcbiAgICB0eXBlcyxcbiAgICBkaWN0XG59O1xuXG5jb25zdCB2aWV3cyA9IFtdO1xuXG5mdW5jdGlvbiBnZXRSdW50aW1lRGF0YSgpe1xuICAgIHZhciBwdWJsaWNQYXRoID0gJyc7XG4gICAgaWYgKCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nICYmICF3aW5kb3cuSVNfUFJFUkVOREVSSU5HICl7IC8vIHByb2R1Y3Rpb24gYnVpbGQgbmVlZHMgdG8ga25vdyB0aGUgcHVibGljIHBhdGggb2YgYXNzZXRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBkZXYgYW5kIHByZXZpZXcsIGFzc2V0cyBhcmUgYSBjaGlsZCBvZiByb290OyBmb3IgYnVpbGQgdGhleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhcmUgaW4gc29tZSBkaXN0YW50IHBhdGggb24gc2l0ZWNvcmVcbiAgICAgICAgcHVibGljUGF0aCA9IFBVQkxJQ1BBVEg7IC8vIFRPRE86IHNldCBQVUJMSUNQQVRIIHVzaW5nIGRlZmluZSBwbHVnaW4gaW4gd2VicGFjay5idWlsZC5qc1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB2YXIgYXBwQ29udGFpbmVyID0gdGhpcy5lbDtcbiAgICAgICAgUGFwYS5wYXJzZShwdWJsaWNQYXRoICsgZGF0YSwge1xuICAgICAgICAgICAgZG93bmxvYWQ6IHRydWUsXG4gICAgICAgICAgICBkeW5hbWljVHlwaW5nOiB0cnVlLFxuICAgICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgICAgZmFzdE1vZGU6IHRydWUsIC8vIG5vIHN0cmluZyBlc2NhcGVzXG4gICAgICAgICAgICBza2lwRW1wdHlMaW5lczogdHJ1ZSxcbiAgICAgICAgICAgIGJlZm9yZUZpcnN0Q2h1bmsoY2h1bmspeyAvLyBvbiBwcmVyZW5kZXIsIGRvIHNpbXBsZSBoYXNoIG9mIENTViBjb250ZW50cyBhbmQgYXBwZW5kIGFzIGF0dHJpYnV0ZSBvZiB0aGUgYXBwIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF0IHJ1bnRpbWUsIGRvIHNhbWUgaGFzaCBvZiBjc3YgY29udGVudHMgYW5kIGNvbXBhcmUgdG8gb3JpZ2luYWwuIGlmIGhhc2hlcyBtYXRjaCwgYXBwIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250aW51ZSBub3JtYWxseS4gaWYgbWlzbWF0Y2hlZCwgYXBwIHdpbGwgcmVyZW5kZXIgYWxsIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIG5ldyBkYXRhLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIGZvciBgaG90YCB1cGRhdGluZyBvZiB0aGUgbWFpbiBkYXRhIGZpbGUgd2l0aG91dCByZWJ1aWxkaW5nIHRoZSBkaXN0LyBmb2xkZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYG1vZGVsLmlzTWlzbWF0Y2hgIHdpbGwgYmUgc2V0IHRvIGB0cnVlYCBhbmQgdGhlIHByZXJlbmRlcmluZyBmdW5jdGlvbnMgd2lsbCBjaGVjayB0aGF0IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHJlc3BvbmQgYWNjb3JkaW5nbHlcblxuICAgICAgICAgICAgICAgIHZhciBkYXRhSGFzaCA9IGNodW5rLmhhc2hDb2RlKCk7IC8vIGhhc2hDb2RlIGlzIGhlbHBlciBmdW5jdGlvbiBmcm9tIHV0aWxzLCBpbXBvcnRlZCBhbmQgSUlGRSdkIGluIGluZGV4LmpzXG4gICAgICAgICAgICAgICAgaWYgKCB3aW5kb3cuSVNfUFJFUkVOREVSSU5HICl7XG4gICAgICAgICAgICAgICAgICAgIGFwcENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1oYXNoJywgZGF0YUhhc2gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnICYmIGRhdGFIYXNoLnRvU3RyaW5nKCkgIT09IGFwcENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1oYXNoJykgKXtcbiAgICAgICAgICAgICAgICAgICAgYXBwQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS1kYXRhLW1pc21hdGNoJyx0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhdGEgbWlzbWF0Y2gnKTtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuaXNNaXNtYXRjaGVkID0gdHJ1ZTsgLy8gc2V0IHNvIHRoYXQgY29tcG9uZW50cyBjYW4gYWNjZXNzIHRoaXMgdmFsdWUgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiByZXNwb25zZSA9PiB7IC8vIGFycm93IGZ1bmN0aW9uIGhlcmUgdG8ga2VlcCBgdGhpc2AgY29udGV4dCBhcyBTdGF0ZURlYnRcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2aWV3cy5sZW5ndGggPSAwOyAgLy8gSEVSRSBZT1UgTkVFRCBUTyBORVNUIEJZIFVTSU5HIFRIRSBUSEUgR1JPVVAgVEhBVCBUSEUgVkFMVUUgTUFQUyBUT1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAvKiBjb21wbGV0ZSBtb2RlbCBiYXNlZCBvbiBmZXRjaGVkIGRhdGEgKi9cbiAgICAgICAgICAgICAgICBtb2RlbC5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICBtb2RlbC50eXBlcy5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHR5cGUudHlwZSAhPT0gJ3RleHQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhQXJyYXkgPSBkYXRhLm1hcChkID0+IGRbdHlwZS5maWVsZF0pLmZpbHRlcihkID0+IGQgIT09IG51bGwpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUubWF4ID0gTWF0aC5tYXgoLi4uZGF0YUFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUubWluID0gTWF0aC5taW4oLi4uZGF0YUFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUuc3ByZWFkID0gdHlwZS5tYXggLSB0eXBlLm1pbiA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtb2RlbC50eXBlc05lc3RlZCA9IGQzLm5lc3QoKS5rZXkoZCA9PiBkLmdyb3VwKS5lbnRyaWVzKG1vZGVsLnR5cGVzKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtb2RlbCk7XG4gICAgICAgICAgICAgICAgLy8gLi4uLlxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLyogcHVzaCB2aWV3cyBub3cgdGhhdCBtb2RlbCBpcyBjb21wbGV0ZSAqL1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZpZXdzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KG1vZGVsLCBDb21wYXJpc29uVmlldywgJ2RpdiNjb21wYXJpc29uLXZpZXcnLCB7cmVuZGVyVG9TZWxlY3RvcjogJyNzZWN0aW9uLWNvbXBhcmlzb24gLmpzLWlubmVyLWNvbnRlbnQnLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXN9KSwgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudChtb2RlbCwgRmlmdHlTdGF0ZVZpZXcsICdkaXYjZmlmdHktc3RhdGUtdmlldycsIHtyZW5kZXJUb1NlbGVjdG9yOiAnI3NlY3Rpb24tc3RhdGVzIC5qcy1pbm5lci1jb250ZW50JywgcmVyZW5kZXJPbkRhdGFNaXNtYXRjaDogdHJ1ZSwgcGFyZW50OiB0aGlzfSkgIFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZURlYnQgZXh0ZW5kcyBQQ1RBcHAge1xuICAgIHByZXJlbmRlcigpe1xuICAgICAgICBjb25zb2xlLmxvZygncHJlcmVuZGVyJyk7XG4gICAgICAgIHRoaXMuZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBzZWN0aW9ucyk7XG4gICAgICAgIHRoaXMuZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBmb290ZXIpO1xuICAgICAgICAvL3RoaXMud2FzUHJlcmVuZGVyZWQgPSBmYWxzZTtcbiAgICAgICAgZ2V0UnVudGltZURhdGEuY2FsbCh0aGlzKS50aGVuKCgpID0+IHsgLy8gYmluZCBTdGF0ZURlYnQgYXMgY29udGV4dCBgdGhpc2AgZm9yIGdldFJ1bnRpbWVEYXRhIHNvIHRoYXQgaXQgY2FuIGFjY2Vlc3MgdGhpcy5lbCwgZXRjXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtb2RlbCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICAgICAgICAgICAgdmlldy5jb250YWluZXIuYXBwZW5kQ2hpbGQodmlldy5lbCk7IC8vIGRpZmZlcmVudCBoZXJlIGZyb20gQ2FwZVRvd246IHZpZXdzIGFyZW4ndCBhcHBlbmRlZCB0byBhcHAgY29udGFpbmVyOyBzb21lIHN0YXRpYyBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzIHByZXNlbnQgYWxyZWFkeS4gdmlld3MgYXBwZW5kZWQgdG8gKnRoZWlyKiBjb250YWluZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgncmVuZGVyZWQnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgY29uc29sZS5sb2coJ2luaXQnKTtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLmF0dGFjaFNlY3Rpb25PcGVuQ2xvc2UoKTtcbiAgICAgICAgZ2V0UnVudGltZURhdGEuY2FsbCh0aGlzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICAgICAgICAgICB2aWV3LmluaXQodGhpcyk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgIGlmICggbW9kdWxlLmhvdCApe1xuICAgICAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgbW9kdWxlLmhvdC5hY2NlcHQoJy4vdmlld3Mvc3RhdGUtY29tcGFyaXNvbicsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYWNjZXB0IScsIGFyZ3VtZW50cywgdGhhdCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlY3Rpb24tY29tcGFyaXNvbiAuanMtaW5uZXItY29udGVudCcpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IHRoYXQuY3JlYXRlQ29tcG9uZW50KG1vZGVsLCBDb21wYXJpc29uVmlldywgJ2RpdiNjb21wYXJpc29uLXZpZXcnLCB7cmVuZGVyVG9TZWxlY3RvcjogJyNzZWN0aW9uLWNvbXBhcmlzb24gLmpzLWlubmVyLWNvbnRlbnQnLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVwbGFjZW1lbnQpO1xuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50LmNvbnRhaW5lci5hcHBlbmRDaGlsZChyZXBsYWNlbWVudC5lbCk7XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGF0dGFjaFNlY3Rpb25PcGVuQ2xvc2UoKXtcbiAgICAgICAgZnVuY3Rpb24gdG9nZ2xlU2VjdGlvbigpe1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuanMtaW5uZXItY29udGVudCcpLmNsYXNzTGlzdC50b2dnbGUoJ3BjdC1oaWRlJyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC50b2dnbGUoJ3BjdC1pcy1jbG9zZWQnKTtcbiAgICAgICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNwZXctYXBwIHNlY3Rpb24gPiBoMicpLmZvckVhY2goaGVhZGluZyA9PiB7XG4gICAgICAgICAgICBoZWFkaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlU2VjdGlvbik7XG4gICAgICAgICAgICBoZWFkaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpe1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVTZWN0aW9uLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCIvKiBnbG9iYWwgcHJvY2VzcyAqL1xuLyplc2xpbnQgbm8tdW51c2VkLXZhcnM6IFtcImVycm9yXCIsIHsgXCJ2YXJzSWdub3JlUGF0dGVyblwiOiBcIlN0cmluZ0hlbHBlcnN8RmFkZUluVGV4dFwiIH1dKi8gLy9hbGxvdyBTdHJpbmdIZWxwZXJzIHRvIGJlIGlwb3J0ZWQgKGRlZmluZWQpIGFuZCBub3QgYmVpbmcgZXhwbGljaXRseSBjYWxsZWRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gd2l0aG91dCB0cmlnZ2VyaW5nIGVzbGludCBlcnJvclxuaW1wb3J0IHsgU3RyaW5nSGVscGVycywgRmFkZUluVGV4dCB9IGZyb20gJ0BVdGlscyc7IC8vIHN0cmluZyBoZWxwZXJzIGlzIGFuIElJRkVcbmltcG9ydCBTdGF0ZURlYnQgZnJvbSAnLi9zdGF0ZS1kZWJ0LmpzJztcbmltcG9ydCAnLi9jc3Mvc3R5bGVzLnNjc3MnO1xuXG5cbmNvbnN0IGNvbnRhaW5lciA9ICcjcGV3LWFwcCc7XG5jb25zdCBBcHAgPSBuZXcgU3RhdGVEZWJ0KGNvbnRhaW5lciwgeyAvLyBTdGF0ZURlYnQgZXh0ZW5kcyBQQ1RBcHAtanMuIFBDVEFwcC1qcydzIGNvbnN0cnVjdG9yIG1ldGhvZCBpcyBjYWxsZWQsIHAxIGNvbnRhaXVuZXIsIHAyIG9wdGlvbnNcblx0bmVlZHNSb3V0ZXI6IGZhbHNlXG59KTtcbmlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgd2luZG93LklTX1BSRVJFTkRFUklORyApeyAvLyBwcm9jZXNzIGRldmVsb3BtZW50IG1lYW5zIHVzaW5nIFdlYlBhY2sgZGV2IHNlcnZlci4gd2luZG93IGlzIHByZXJlbmRlcmluZyBtZWFucyBpblxuXHRBcHAucHJlcmVuZGVyKCk7XG59XG5BcHAuaW5pdCgpOyJdLCJzb3VyY2VSb290IjoiIn0=